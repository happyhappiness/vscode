commit_sha,commit_message,file_name,change_type,log_statement,log_loc,old_store_name,new_store_name
59d4b1de1aa934a4bc0216fdf8b5749c93bd462d,"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,assert(D);,80,/data/download/llvm-mirror_clang0_old.cpp,/data/download/llvm-mirror_clang0_new.cpp
59d4b1de1aa934a4bc0216fdf8b5749c93bd462d,"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,assert(Other.Occurences.size() == Occurences.size());,186,/data/download/llvm-mirror_clang0_old.cpp,/data/download/llvm-mirror_clang0_new.cpp
59d4b1de1aa934a4bc0216fdf8b5749c93bd462d,"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,assert(FirstMismatch->FirstCloneInfo.Suggestion);,241,/data/download/llvm-mirror_clang0_old.cpp,/data/download/llvm-mirror_clang0_new.cpp
59d4b1de1aa934a4bc0216fdf8b5749c93bd462d,"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,assert(D);,305,/data/download/llvm-mirror_clang0_old.cpp,/data/download/llvm-mirror_clang0_new.cpp
59d4b1de1aa934a4bc0216fdf8b5749c93bd462d,"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,assert(D->hasBody());,306,/data/download/llvm-mirror_clang0_old.cpp,/data/download/llvm-mirror_clang0_new.cpp
59d4b1de1aa934a4bc0216fdf8b5749c93bd462d,"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,assert(D);,606,/data/download/llvm-mirror_clang0_old.cpp,/data/download/llvm-mirror_clang0_new.cpp
59d4b1de1aa934a4bc0216fdf8b5749c93bd462d,"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,assert(D->hasBody());,607,/data/download/llvm-mirror_clang0_old.cpp,/data/download/llvm-mirror_clang0_new.cpp
59d4b1de1aa934a4bc0216fdf8b5749c93bd462d,"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,assert(i != 0);,522,/data/download/llvm-mirror_clang0_old.cpp,/data/download/llvm-mirror_clang0_new.cpp
59d4b1de1aa934a4bc0216fdf8b5749c93bd462d,"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,assert(i != 0);,808,/data/download/llvm-mirror_clang0_old.cpp,/data/download/llvm-mirror_clang0_new.cpp
59d4b1de1aa934a4bc0216fdf8b5749c93bd462d,"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,"assert(std::all_of(Indexes.begin(), Indexes.end(),",638,/data/download/llvm-mirror_clang0_old.cpp,/data/download/llvm-mirror_clang0_new.cpp
59d4b1de1aa934a4bc0216fdf8b5749c93bd462d,"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,assert(Other.Occurences.size() == Occurences.size());,685,/data/download/llvm-mirror_clang0_old.cpp,/data/download/llvm-mirror_clang0_new.cpp
59d4b1de1aa934a4bc0216fdf8b5749c93bd462d,"[analyzer] Reland r299544 ""Add a modular constraint system to the CloneDetector""

Hopefully fix crashes by unshadowing the variable.


Original commit message:

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299653 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,assert(FirstMismatch->FirstCloneInfo.Suggestion);,739,/data/download/llvm-mirror_clang0_old.cpp,/data/download/llvm-mirror_clang0_new.cpp
ebceafb9283e1642955d27afb73443d8784aa5ea,"[Sema] Extend GetSignedVectorType to deal with non ExtVector types

This improves some error messages which would otherwise refer to
ext_vector_type types in contexts where there are no such types.

Factored out from D25866 at reviewer's request.

Reviewers: bruno

Differential Revision: https://reviews.llvm.org/D31667



git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299641 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaExpr.cpp,+,assert(TypeSize == Context.getTypeSize(Context.LongLongTy) &&,9732,/data/download/llvm-mirror_clang1_old.cpp,/data/download/llvm-mirror_clang1_new.cpp
ebceafb9283e1642955d27afb73443d8784aa5ea,"[Sema] Extend GetSignedVectorType to deal with non ExtVector types

This improves some error messages which would otherwise refer to
ext_vector_type types in contexts where there are no such types.

Factored out from D25866 at reviewer's request.

Reviewers: bruno

Differential Revision: https://reviews.llvm.org/D31667



git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299641 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaExpr.cpp,-,assert(TypeSize == Context.getTypeSize(Context.LongLongTy) &&,9729,/data/download/llvm-mirror_clang1_old.cpp,/data/download/llvm-mirror_clang1_new.cpp
ebceafb9283e1642955d27afb73443d8784aa5ea,"[Sema] Extend GetSignedVectorType to deal with non ExtVector types

This improves some error messages which would otherwise refer to
ext_vector_type types in contexts where there are no such types.

Factored out from D25866 at reviewer's request.

Reviewers: bruno

Differential Revision: https://reviews.llvm.org/D31667



git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299641 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaExpr.cpp,+,assert(TypeSize == Context.getTypeSize(Context.CharTy) &&,9749,/data/download/llvm-mirror_clang1_old.cpp,/data/download/llvm-mirror_clang1_new.cpp
727ea63e6e82677f6e10e05e08bc7d6bdbae3111,"Revert ""[analyzer] Add a modular constraint system to the CloneDetector""

This reverts commit r299544.

Crashes on tests on some buildbots.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299550 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,assert(D);,80,/data/download/llvm-mirror_clang2_old.cpp,/data/download/llvm-mirror_clang2_new.cpp
727ea63e6e82677f6e10e05e08bc7d6bdbae3111,"Revert ""[analyzer] Add a modular constraint system to the CloneDetector""

This reverts commit r299544.

Crashes on tests on some buildbots.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299550 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,assert(Other.Occurences.size() == Occurences.size());,186,/data/download/llvm-mirror_clang2_old.cpp,/data/download/llvm-mirror_clang2_new.cpp
727ea63e6e82677f6e10e05e08bc7d6bdbae3111,"Revert ""[analyzer] Add a modular constraint system to the CloneDetector""

This reverts commit r299544.

Crashes on tests on some buildbots.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299550 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,assert(FirstMismatch->FirstCloneInfo.Suggestion);,241,/data/download/llvm-mirror_clang2_old.cpp,/data/download/llvm-mirror_clang2_new.cpp
727ea63e6e82677f6e10e05e08bc7d6bdbae3111,"Revert ""[analyzer] Add a modular constraint system to the CloneDetector""

This reverts commit r299544.

Crashes on tests on some buildbots.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299550 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,assert(D);,305,/data/download/llvm-mirror_clang2_old.cpp,/data/download/llvm-mirror_clang2_new.cpp
727ea63e6e82677f6e10e05e08bc7d6bdbae3111,"Revert ""[analyzer] Add a modular constraint system to the CloneDetector""

This reverts commit r299544.

Crashes on tests on some buildbots.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299550 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,assert(D->hasBody());,306,/data/download/llvm-mirror_clang2_old.cpp,/data/download/llvm-mirror_clang2_new.cpp
727ea63e6e82677f6e10e05e08bc7d6bdbae3111,"Revert ""[analyzer] Add a modular constraint system to the CloneDetector""

This reverts commit r299544.

Crashes on tests on some buildbots.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299550 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,assert(D);,606,/data/download/llvm-mirror_clang2_old.cpp,/data/download/llvm-mirror_clang2_new.cpp
727ea63e6e82677f6e10e05e08bc7d6bdbae3111,"Revert ""[analyzer] Add a modular constraint system to the CloneDetector""

This reverts commit r299544.

Crashes on tests on some buildbots.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299550 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,assert(D->hasBody());,607,/data/download/llvm-mirror_clang2_old.cpp,/data/download/llvm-mirror_clang2_new.cpp
727ea63e6e82677f6e10e05e08bc7d6bdbae3111,"Revert ""[analyzer] Add a modular constraint system to the CloneDetector""

This reverts commit r299544.

Crashes on tests on some buildbots.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299550 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,assert(i != 0);,522,/data/download/llvm-mirror_clang2_old.cpp,/data/download/llvm-mirror_clang2_new.cpp
727ea63e6e82677f6e10e05e08bc7d6bdbae3111,"Revert ""[analyzer] Add a modular constraint system to the CloneDetector""

This reverts commit r299544.

Crashes on tests on some buildbots.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299550 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,assert(i != 0);,808,/data/download/llvm-mirror_clang2_old.cpp,/data/download/llvm-mirror_clang2_new.cpp
727ea63e6e82677f6e10e05e08bc7d6bdbae3111,"Revert ""[analyzer] Add a modular constraint system to the CloneDetector""

This reverts commit r299544.

Crashes on tests on some buildbots.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299550 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,"assert(std::all_of(Indexes.begin(), Indexes.end(),",638,/data/download/llvm-mirror_clang2_old.cpp,/data/download/llvm-mirror_clang2_new.cpp
727ea63e6e82677f6e10e05e08bc7d6bdbae3111,"Revert ""[analyzer] Add a modular constraint system to the CloneDetector""

This reverts commit r299544.

Crashes on tests on some buildbots.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299550 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,assert(Other.Occurences.size() == Occurences.size());,685,/data/download/llvm-mirror_clang2_old.cpp,/data/download/llvm-mirror_clang2_new.cpp
727ea63e6e82677f6e10e05e08bc7d6bdbae3111,"Revert ""[analyzer] Add a modular constraint system to the CloneDetector""

This reverts commit r299544.

Crashes on tests on some buildbots.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299550 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,assert(FirstMismatch->FirstCloneInfo.Suggestion);,739,/data/download/llvm-mirror_clang2_old.cpp,/data/download/llvm-mirror_clang2_new.cpp
a61d7c54b0ed55119636b7d922ab5d9c5747fe04,"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,assert(D);,80,/data/download/llvm-mirror_clang3_old.cpp,/data/download/llvm-mirror_clang3_new.cpp
a61d7c54b0ed55119636b7d922ab5d9c5747fe04,"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,assert(Other.Occurences.size() == Occurences.size());,186,/data/download/llvm-mirror_clang3_old.cpp,/data/download/llvm-mirror_clang3_new.cpp
a61d7c54b0ed55119636b7d922ab5d9c5747fe04,"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,assert(FirstMismatch->FirstCloneInfo.Suggestion);,241,/data/download/llvm-mirror_clang3_old.cpp,/data/download/llvm-mirror_clang3_new.cpp
a61d7c54b0ed55119636b7d922ab5d9c5747fe04,"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,assert(D);,305,/data/download/llvm-mirror_clang3_old.cpp,/data/download/llvm-mirror_clang3_new.cpp
a61d7c54b0ed55119636b7d922ab5d9c5747fe04,"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,assert(D->hasBody());,306,/data/download/llvm-mirror_clang3_old.cpp,/data/download/llvm-mirror_clang3_new.cpp
a61d7c54b0ed55119636b7d922ab5d9c5747fe04,"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,assert(D);,606,/data/download/llvm-mirror_clang3_old.cpp,/data/download/llvm-mirror_clang3_new.cpp
a61d7c54b0ed55119636b7d922ab5d9c5747fe04,"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,assert(D->hasBody());,607,/data/download/llvm-mirror_clang3_old.cpp,/data/download/llvm-mirror_clang3_new.cpp
a61d7c54b0ed55119636b7d922ab5d9c5747fe04,"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,assert(i != 0);,522,/data/download/llvm-mirror_clang3_old.cpp,/data/download/llvm-mirror_clang3_new.cpp
a61d7c54b0ed55119636b7d922ab5d9c5747fe04,"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,-,assert(i != 0);,808,/data/download/llvm-mirror_clang3_old.cpp,/data/download/llvm-mirror_clang3_new.cpp
a61d7c54b0ed55119636b7d922ab5d9c5747fe04,"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,"assert(std::all_of(Indexes.begin(), Indexes.end(),",638,/data/download/llvm-mirror_clang3_old.cpp,/data/download/llvm-mirror_clang3_new.cpp
a61d7c54b0ed55119636b7d922ab5d9c5747fe04,"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,assert(Other.Occurences.size() == Occurences.size());,685,/data/download/llvm-mirror_clang3_old.cpp,/data/download/llvm-mirror_clang3_new.cpp
a61d7c54b0ed55119636b7d922ab5d9c5747fe04,"[analyzer] Add a modular constraint system to the CloneDetector

A big part of the clone detection code is functionality for filtering clones and
clone groups based on different criteria. So far this filtering process was
hardcoded into the CloneDetector class, which made it hard to understand and,
ultimately, to extend.

This patch splits the CloneDetector's logic into a sequence of reusable
constraints that are used for filtering clone groups. These constraints
can be turned on and off and reodreder at will, and new constraints are easy
to implement if necessary.

Unit tests are added for the new constraint interface.

This is a refactoring patch - no functional change intended.

Patch by Raphael Isemann!

Differential Revision: https://reviews.llvm.org/D23418


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299544 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Analysis/CloneDetection.cpp,+,assert(FirstMismatch->FirstCloneInfo.Suggestion);,739,/data/download/llvm-mirror_clang3_old.cpp,/data/download/llvm-mirror_clang3_new.cpp
6dbc85b44bd268240bc4969c4a77fbdf2a3d8cac,"[OpenCL] Extended diagnostics for atomic initialization

Summary:
I saw the same changes in the following review: https://reviews.llvm.org/D17438

I don't know in that way I could determine that atomic variable was initialized by macro ATOMIC_VAR_INIT. Anyway I added check that atomic variables can be initialize only in global scope.
I think that we can discuss this change.

Reviewers: Anastasia, cfe-commits

Reviewed By: Anastasia

Subscribers: bader, yaxunl

Differential Revision: https://reviews.llvm.org/D30643

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299537 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaInit.cpp,+,return ExprError();,6516,/data/download/llvm-mirror_clang4_old.cpp,/data/download/llvm-mirror_clang4_new.cpp
6abfe5cfd2160d5c1c8594673ae995151afad6f5,"Add #pragma clang fp

This adds the new pragma and the first variant, contract(on/off/fast).

The pragma has the same block scope rules as STDC FP_CONTRACT, i.e. it can be
placed at the beginning of a compound statement or at file scope.

Similarly to STDC FP_CONTRACT there is no need to use attributes.  First an
annotate token is inserted with the parsed details of the pragma.  Then the
annotate token is parsed in the proper contexts and the Sema is updated with
the corresponding FPOptions using the shared ActOn function with STDC
FP_CONTRACT.

After this the FPOptions from the Sema is propagated into the AST expression
nodes.  There is no change here.

I was going to add a 'default' option besides 'on/off/fast' similar to STDC
FP_CONTRACT but then decided against it. I think that we'd have to make option
uppercase then to avoid using 'default' the keyword.  Also because of the
scoped activation of pragma I am not sure there is really a need a for this.

Differential Revision: https://reviews.llvm.org/D31276

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299470 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Parse/ParsePragma.cpp,+,assert(Tok.is(tok::annot_pragma_fp));,2078,/data/download/llvm-mirror_clang5_old.cpp,/data/download/llvm-mirror_clang5_new.cpp
6abfe5cfd2160d5c1c8594673ae995151afad6f5,"Add #pragma clang fp

This adds the new pragma and the first variant, contract(on/off/fast).

The pragma has the same block scope rules as STDC FP_CONTRACT, i.e. it can be
placed at the beginning of a compound statement or at file scope.

Similarly to STDC FP_CONTRACT there is no need to use attributes.  First an
annotate token is inserted with the parsed details of the pragma.  Then the
annotate token is parsed in the proper contexts and the Sema is updated with
the corresponding FPOptions using the shared ActOn function with STDC
FP_CONTRACT.

After this the FPOptions from the Sema is propagated into the AST expression
nodes.  There is no change here.

I was going to add a 'default' option besides 'on/off/fast' similar to STDC
FP_CONTRACT but then decided against it. I think that we'd have to make option
uppercase then to avoid using 'default' the keyword.  Also because of the
scoped activation of pragma I am not sure there is really a need a for this.

Differential Revision: https://reviews.llvm.org/D31276

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299470 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Parse/ParseStmt.cpp,+,return StmtError();,348,/data/download/llvm-mirror_clang6_old.cpp,/data/download/llvm-mirror_clang6_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"assert(getSortKind() == Z3_BV_SORT && ""Not a bitvector sort!"");",158,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,assert(getSortKind() == Z3_FLOATING_POINT_SORT &&,163,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,void print(raw_ostream &OS) const {,180,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,LLVM_DUMP_METHOD void dump() const { print(llvm::errs()); },184,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,assert(Z3Sort::getSort(LHS.AST) == Z3Sort::getSort(RHS.AST) &&,328,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,assert(Z3Sort::getSort(LHS.AST) == Z3Sort::getSort(RHS.AST) &&,460,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"assert(ToBitWidth > 0 && ""BitWidth must be positive!"");",558,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,assert(Sort.getSortKind() == Z3_FLOATING_POINT_SORT &&,644,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"assert(false && ""Floating-point types don't match!"");",657,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"assert(false && ""Bitvector types don't match!"");",673,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"assert(false && ""Bitwidth not supported!"");",691,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"assert(false && ""Boolean type doesn't match!"");",698,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"assert(Z3_is_eq_sort(Z3Context::ZC, Z3_get_sort(Z3Context::ZC, AST),",723,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,void print(raw_ostream &OS) const {,737,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,LLVM_DUMP_METHOD void dump() const { print(llvm::errs()); },741,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,void print(raw_ostream &OS) const {,798,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,LLVM_DUMP_METHOD void dump() const { print(llvm::errs()); },802,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"Z3_solver_assert(Z3Context::ZC, Solver, Exp.AST);",841,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"assert(Z3_solver_get_num_scopes(Z3Context::ZC, Solver) >= NumStates);",871,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"void Z3ErrorHandler(Z3_context Context, Z3_error_code Error) {",885,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"llvm::report_fatal_error(""Z3 error: "" +",886,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"llvm::Twine(Z3_get_error_msg_ex(Context, Error)));",887,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"Z3_set_error_handler(Z3Context::ZC, Z3ErrorHandler);",898,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"void print(ProgramStateRef St, raw_ostream &Out, const char *nl,",915,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,assert((getAPSIntType(From) == getAPSIntType(To)) &&,1041,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,assert(!Ty->isRealFloatingType());,1153,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,if (BinaryOperator::isComparisonOp(Op) || BinaryOperator::isLogicalOp(Op)) {,1375,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,assert((Ctx.getTypeSize(LTy) == Ctx.getTypeSize(RTy)) &&,1444,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"void Z3ConstraintManager::print(ProgramStateRef St, raw_ostream &OS,",1595,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,I->second.print(OS);,1603,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
fe95f3ca3634529cecfe3dddb88095c273e36722,"[analyzer] Add new Z3 constraint manager backend

Summary: Implement new Z3 constraint manager backend.

Reviewers: zaks.anna, dcoughlin, NoQ, xazax.hun

Subscribers: mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D28952

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299463 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/Z3ConstraintManager.cpp,+,"llvm::report_fatal_error(""Clang was not compiled with Z3 support!"", false);",1615,/data/download/llvm-mirror_clang7_old.cpp,/data/download/llvm-mirror_clang7_new.cpp
e81416c533773ff6a121b2f8985a3680b9ec8a02,"[coroutines] Fix rebuilding of implicit and dependent coroutine statements.

Summary:
Certain implicitly generated coroutine statements, such as the calls to 'return_value()' or `return_void()` or `get_return_object_on_allocation_failure()`, cannot be built until the promise type is no longer dependent. This means they are not built until after the coroutine body statement has been transformed.

This patch fixes an issue where these statements would never be built for coroutine templates.

It also fixes a small issue where diagnostics about `get_return_object_on_allocation_failure()` were incorrectly suppressed. 

Reviewers: rsmith, majnemer, GorNishanov, aaron.ballman

Reviewed By: GorNishanov

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31487

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299380 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,-,"assert(PromiseRecordDecl && ""Type should have already been checked"");",707,/data/download/llvm-mirror_clang8_old.cpp,/data/download/llvm-mirror_clang8_new.cpp
e81416c533773ff6a121b2f8985a3680b9ec8a02,"[coroutines] Fix rebuilding of implicit and dependent coroutine statements.

Summary:
Certain implicitly generated coroutine statements, such as the calls to 'return_value()' or `return_void()` or `get_return_object_on_allocation_failure()`, cannot be built until the promise type is no longer dependent. This means they are not built until after the coroutine body statement has been transformed.

This patch fixes an issue where these statements would never be built for coroutine templates.

It also fixes a small issue where diagnostics about `get_return_object_on_allocation_failure()` were incorrectly suppressed. 

Reviewers: rsmith, majnemer, GorNishanov, aaron.ballman

Reviewed By: GorNishanov

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31487

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299380 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"assert(PromiseRecordDecl && ""Type should have already been checked"");",732,/data/download/llvm-mirror_clang8_old.cpp,/data/download/llvm-mirror_clang8_new.cpp
e81416c533773ff6a121b2f8985a3680b9ec8a02,"[coroutines] Fix rebuilding of implicit and dependent coroutine statements.

Summary:
Certain implicitly generated coroutine statements, such as the calls to 'return_value()' or `return_void()` or `get_return_object_on_allocation_failure()`, cannot be built until the promise type is no longer dependent. This means they are not built until after the coroutine body statement has been transformed.

This patch fixes an issue where these statements would never be built for coroutine templates.

It also fixes a small issue where diagnostics about `get_return_object_on_allocation_failure()` were incorrectly suppressed. 

Reviewers: rsmith, majnemer, GorNishanov, aaron.ballman

Reviewed By: GorNishanov

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31487

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299380 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"assert(this->IsValid && ""coroutine already invalid"");",738,/data/download/llvm-mirror_clang8_old.cpp,/data/download/llvm-mirror_clang8_new.cpp
e81416c533773ff6a121b2f8985a3680b9ec8a02,"[coroutines] Fix rebuilding of implicit and dependent coroutine statements.

Summary:
Certain implicitly generated coroutine statements, such as the calls to 'return_value()' or `return_void()` or `get_return_object_on_allocation_failure()`, cannot be built until the promise type is no longer dependent. This means they are not built until after the coroutine body statement has been transformed.

This patch fixes an issue where these statements would never be built for coroutine templates.

It also fixes a small issue where diagnostics about `get_return_object_on_allocation_failure()` were incorrectly suppressed. 

Reviewers: rsmith, majnemer, GorNishanov, aaron.ballman

Reviewed By: GorNishanov

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31487

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299380 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"assert(this->IsValid && ""coroutine already invalid"");",746,/data/download/llvm-mirror_clang8_old.cpp,/data/download/llvm-mirror_clang8_new.cpp
e81416c533773ff6a121b2f8985a3680b9ec8a02,"[coroutines] Fix rebuilding of implicit and dependent coroutine statements.

Summary:
Certain implicitly generated coroutine statements, such as the calls to 'return_value()' or `return_void()` or `get_return_object_on_allocation_failure()`, cannot be built until the promise type is no longer dependent. This means they are not built until after the coroutine body statement has been transformed.

This patch fixes an issue where these statements would never be built for coroutine templates.

It also fixes a small issue where diagnostics about `get_return_object_on_allocation_failure()` were incorrectly suppressed. 

Reviewers: rsmith, majnemer, GorNishanov, aaron.ballman

Reviewed By: GorNishanov

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31487

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299380 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,assert(!this->IsPromiseDependentType &&,747,/data/download/llvm-mirror_clang8_old.cpp,/data/download/llvm-mirror_clang8_new.cpp
e81416c533773ff6a121b2f8985a3680b9ec8a02,"[coroutines] Fix rebuilding of implicit and dependent coroutine statements.

Summary:
Certain implicitly generated coroutine statements, such as the calls to 'return_value()' or `return_void()` or `get_return_object_on_allocation_failure()`, cannot be built until the promise type is no longer dependent. This means they are not built until after the coroutine body statement has been transformed.

This patch fixes an issue where these statements would never be built for coroutine templates.

It also fixes a small issue where diagnostics about `get_return_object_on_allocation_failure()` were incorrectly suppressed. 

Reviewers: rsmith, majnemer, GorNishanov, aaron.ballman

Reviewed By: GorNishanov

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31487

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299380 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,assert(!IsPromiseDependentType &&,798,/data/download/llvm-mirror_clang8_old.cpp,/data/download/llvm-mirror_clang8_new.cpp
e81416c533773ff6a121b2f8985a3680b9ec8a02,"[coroutines] Fix rebuilding of implicit and dependent coroutine statements.

Summary:
Certain implicitly generated coroutine statements, such as the calls to 'return_value()' or `return_void()` or `get_return_object_on_allocation_failure()`, cannot be built until the promise type is no longer dependent. This means they are not built until after the coroutine body statement has been transformed.

This patch fixes an issue where these statements would never be built for coroutine templates.

It also fixes a small issue where diagnostics about `get_return_object_on_allocation_failure()` were incorrectly suppressed. 

Reviewers: rsmith, majnemer, GorNishanov, aaron.ballman

Reviewed By: GorNishanov

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31487

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299380 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,assert(!IsPromiseDependentType &&,843,/data/download/llvm-mirror_clang8_old.cpp,/data/download/llvm-mirror_clang8_new.cpp
e81416c533773ff6a121b2f8985a3680b9ec8a02,"[coroutines] Fix rebuilding of implicit and dependent coroutine statements.

Summary:
Certain implicitly generated coroutine statements, such as the calls to 'return_value()' or `return_void()` or `get_return_object_on_allocation_failure()`, cannot be built until the promise type is no longer dependent. This means they are not built until after the coroutine body statement has been transformed.

This patch fixes an issue where these statements would never be built for coroutine templates.

It also fixes a small issue where diagnostics about `get_return_object_on_allocation_failure()` were incorrectly suppressed. 

Reviewers: rsmith, majnemer, GorNishanov, aaron.ballman

Reviewed By: GorNishanov

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31487

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299380 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,assert(!IsPromiseDependentType &&,919,/data/download/llvm-mirror_clang8_old.cpp,/data/download/llvm-mirror_clang8_new.cpp
e81416c533773ff6a121b2f8985a3680b9ec8a02,"[coroutines] Fix rebuilding of implicit and dependent coroutine statements.

Summary:
Certain implicitly generated coroutine statements, such as the calls to 'return_value()' or `return_void()` or `get_return_object_on_allocation_failure()`, cannot be built until the promise type is no longer dependent. This means they are not built until after the coroutine body statement has been transformed.

This patch fixes an issue where these statements would never be built for coroutine templates.

It also fixes a small issue where diagnostics about `get_return_object_on_allocation_failure()` were incorrectly suppressed. 

Reviewers: rsmith, majnemer, GorNishanov, aaron.ballman

Reviewed By: GorNishanov

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31487

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299380 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,assert(!IsPromiseDependentType &&,951,/data/download/llvm-mirror_clang8_old.cpp,/data/download/llvm-mirror_clang8_new.cpp
03c6593eccfbbf50bc948d3781e2db0236440c2d,"[ThinLTO] Handle -emit-llvm* in ThinLTO backends

Summary:
Use PreCodeGenModuleHook to invoke the correct writer when emitting LLVM
IR, returning false to skip codegen from within thinBackend.

Reviewers: pcc, mehdi_amini

Subscribers: Prazek, cfe-commits

Differential Revision: https://reviews.llvm.org/D31534

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299274 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/BackendUtil.cpp,+,"M->print(*OS, nullptr, CGOpts.EmitLLVMUseLists);",1007,/data/download/llvm-mirror_clang9_old.cpp,/data/download/llvm-mirror_clang9_new.cpp
03c6593eccfbbf50bc948d3781e2db0236440c2d,"[ThinLTO] Handle -emit-llvm* in ThinLTO backends

Summary:
Use PreCodeGenModuleHook to invoke the correct writer when emitting LLVM
IR, returning false to skip codegen from within thinBackend.

Reviewers: pcc, mehdi_amini

Subscribers: Prazek, cfe-commits

Differential Revision: https://reviews.llvm.org/D31534

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299274 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/BackendUtil.cpp,+,"WriteBitcodeToFile(M, *OS, CGOpts.EmitLLVMUseLists);",1013,/data/download/llvm-mirror_clang9_old.cpp,/data/download/llvm-mirror_clang9_new.cpp
40be91d5ff7b8d289fdb0e9df4de724eb4d1a152,"[Modules][PCH] Serialize #pragma pack

This patch serializes the state of #pragma pack. It preserves the state of the
pragma from a PCH/from modules in a file that uses that PCH/those modules.

rdar://21359084

Differential Revision: https://reviews.llvm.org/D31241


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299226 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"Error(""invalid pragma pack record"");",3304,/data/download/llvm-mirror_clang10_old.cpp,/data/download/llvm-mirror_clang10_new.cpp
40be91d5ff7b8d289fdb0e9df4de724eb4d1a152,"[Modules][PCH] Serialize #pragma pack

This patch serializes the state of #pragma pack. It preserves the state of the
pragma from a PCH/from modules in a file that uses that PCH/those modules.

rdar://21359084

Differential Revision: https://reviews.llvm.org/D31241


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299226 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,assert(PragmaPackStack.front().Value == SemaObj->PackStack.DefaultValue &&,7452,/data/download/llvm-mirror_clang10_old.cpp,/data/download/llvm-mirror_clang10_new.cpp
40be91d5ff7b8d289fdb0e9df4de724eb4d1a152,"[Modules][PCH] Serialize #pragma pack

This patch serializes the state of #pragma pack. It preserves the state of the
pragma from a PCH/from modules in a file that uses that PCH/those modules.

rdar://21359084

Differential Revision: https://reviews.llvm.org/D31241


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299226 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,assert(*PragmaPackCurrentValue == SemaObj->PackStack.DefaultValue &&,7464,/data/download/llvm-mirror_clang10_old.cpp,/data/download/llvm-mirror_clang10_new.cpp
40be91d5ff7b8d289fdb0e9df4de724eb4d1a152,"[Modules][PCH] Serialize #pragma pack

This patch serializes the state of #pragma pack. It preserves the state of the
pragma from a PCH/from modules in a file that uses that PCH/those modules.

rdar://21359084

Differential Revision: https://reviews.llvm.org/D31241


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299226 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,+,void ASTWriter::WritePackPragmaOptions(Sema &SemaRef) {,4174,/data/download/llvm-mirror_clang11_old.cpp,/data/download/llvm-mirror_clang11_new.cpp
40be91d5ff7b8d289fdb0e9df4de724eb4d1a152,"[Modules][PCH] Serialize #pragma pack

This patch serializes the state of #pragma pack. It preserves the state of the
pragma from a PCH/from modules in a file that uses that PCH/those modules.

rdar://21359084

Differential Revision: https://reviews.llvm.org/D31241


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299226 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,+,WritePackPragmaOptions(SemaRef);,4877,/data/download/llvm-mirror_clang11_old.cpp,/data/download/llvm-mirror_clang11_new.cpp
462da6c855225120cf0cec7860ef1e8669f7f6b4,"[ThinLTO] Set up lto::Config properly for codegen in ThinLTO backends

Summary:
This involved refactoring out pieces of
EmitAssemblyHelper::CreateTargetMachine for use in runThinLTOBackend.

Subsumes D31114.

Reviewers: mehdi_amini, pcc

Subscribers: Prazek, cfe-commits

Differential Revision: https://reviews.llvm.org/D31508

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299152 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/BackendUtil.cpp,+,"assert(CodeModel != ~0u && ""invalid code model!"");",321,/data/download/llvm-mirror_clang12_old.cpp,/data/download/llvm-mirror_clang12_new.cpp
462da6c855225120cf0cec7860ef1e8669f7f6b4,"[ThinLTO] Set up lto::Config properly for codegen in ThinLTO backends

Summary:
This involved refactoring out pieces of
EmitAssemblyHelper::CreateTargetMachine for use in runThinLTOBackend.

Subsumes D31114.

Reviewers: mehdi_amini, pcc

Subscribers: Prazek, cfe-commits

Differential Revision: https://reviews.llvm.org/D31508

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299152 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/BackendUtil.cpp,+,"assert(RM.hasValue() && ""invalid PIC model!"");",335,/data/download/llvm-mirror_clang12_old.cpp,/data/download/llvm-mirror_clang12_new.cpp
462da6c855225120cf0cec7860ef1e8669f7f6b4,"[ThinLTO] Set up lto::Config properly for codegen in ThinLTO backends

Summary:
This involved refactoring out pieces of
EmitAssemblyHelper::CreateTargetMachine for use in runThinLTOBackend.

Subsumes D31114.

Reviewers: mehdi_amini, pcc

Subscribers: Prazek, cfe-commits

Differential Revision: https://reviews.llvm.org/D31508

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299152 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/BackendUtil.cpp,+,"assert(Action == Backend_EmitAssembly && ""Invalid action!"");",345,/data/download/llvm-mirror_clang12_old.cpp,/data/download/llvm-mirror_clang12_new.cpp
462da6c855225120cf0cec7860ef1e8669f7f6b4,"[ThinLTO] Set up lto::Config properly for codegen in ThinLTO backends

Summary:
This involved refactoring out pieces of
EmitAssemblyHelper::CreateTargetMachine for use in runThinLTOBackend.

Subsumes D31114.

Reviewers: mehdi_amini, pcc

Subscribers: Prazek, cfe-commits

Differential Revision: https://reviews.llvm.org/D31508

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299152 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/BackendUtil.cpp,+,"assert((CodeGenOpts.FloatABI == ""soft"" || CodeGenOpts.FloatABI == ""softfp"" ||",361,/data/download/llvm-mirror_clang12_old.cpp,/data/download/llvm-mirror_clang12_new.cpp
462da6c855225120cf0cec7860ef1e8669f7f6b4,"[ThinLTO] Set up lto::Config properly for codegen in ThinLTO backends

Summary:
This involved refactoring out pieces of
EmitAssemblyHelper::CreateTargetMachine for use in runThinLTOBackend.

Subsumes D31114.

Reviewers: mehdi_amini, pcc

Subscribers: Prazek, cfe-commits

Differential Revision: https://reviews.llvm.org/D31508

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299152 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/BackendUtil.cpp,+,Options.DebuggerTuning = CodeGenOpts.getDebuggerTuning();,408,/data/download/llvm-mirror_clang12_old.cpp,/data/download/llvm-mirror_clang12_new.cpp
462da6c855225120cf0cec7860ef1e8669f7f6b4,"[ThinLTO] Set up lto::Config properly for codegen in ThinLTO backends

Summary:
This involved refactoring out pieces of
EmitAssemblyHelper::CreateTargetMachine for use in runThinLTOBackend.

Subsumes D31114.

Reviewers: mehdi_amini, pcc

Subscribers: Prazek, cfe-commits

Differential Revision: https://reviews.llvm.org/D31508

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299152 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/BackendUtil.cpp,-,"assert(CodeModel != ~0u && ""invalid code model!"");",510,/data/download/llvm-mirror_clang12_old.cpp,/data/download/llvm-mirror_clang12_new.cpp
462da6c855225120cf0cec7860ef1e8669f7f6b4,"[ThinLTO] Set up lto::Config properly for codegen in ThinLTO backends

Summary:
This involved refactoring out pieces of
EmitAssemblyHelper::CreateTargetMachine for use in runThinLTOBackend.

Subsumes D31114.

Reviewers: mehdi_amini, pcc

Subscribers: Prazek, cfe-commits

Differential Revision: https://reviews.llvm.org/D31508

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299152 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/BackendUtil.cpp,-,"assert(RM.hasValue() && ""invalid PIC model!"");",525,/data/download/llvm-mirror_clang12_old.cpp,/data/download/llvm-mirror_clang12_new.cpp
462da6c855225120cf0cec7860ef1e8669f7f6b4,"[ThinLTO] Set up lto::Config properly for codegen in ThinLTO backends

Summary:
This involved refactoring out pieces of
EmitAssemblyHelper::CreateTargetMachine for use in runThinLTOBackend.

Subsumes D31114.

Reviewers: mehdi_amini, pcc

Subscribers: Prazek, cfe-commits

Differential Revision: https://reviews.llvm.org/D31508

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299152 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/BackendUtil.cpp,-,"assert((CodeGenOpts.FloatABI == ""soft"" || CodeGenOpts.FloatABI == ""softfp"" ||",553,/data/download/llvm-mirror_clang12_old.cpp,/data/download/llvm-mirror_clang12_new.cpp
462da6c855225120cf0cec7860ef1e8669f7f6b4,"[ThinLTO] Set up lto::Config properly for codegen in ThinLTO backends

Summary:
This involved refactoring out pieces of
EmitAssemblyHelper::CreateTargetMachine for use in runThinLTOBackend.

Subsumes D31114.

Reviewers: mehdi_amini, pcc

Subscribers: Prazek, cfe-commits

Differential Revision: https://reviews.llvm.org/D31508

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299152 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/BackendUtil.cpp,-,Options.DebuggerTuning = CodeGenOpts.getDebuggerTuning();,600,/data/download/llvm-mirror_clang12_old.cpp,/data/download/llvm-mirror_clang12_new.cpp
462da6c855225120cf0cec7860ef1e8669f7f6b4,"[ThinLTO] Set up lto::Config properly for codegen in ThinLTO backends

Summary:
This involved refactoring out pieces of
EmitAssemblyHelper::CreateTargetMachine for use in runThinLTOBackend.

Subsumes D31114.

Reviewers: mehdi_amini, pcc

Subscribers: Prazek, cfe-commits

Differential Revision: https://reviews.llvm.org/D31508

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299152 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/BackendUtil.cpp,-,"assert(Action == Backend_EmitAssembly && ""Invalid action!"");",642,/data/download/llvm-mirror_clang12_old.cpp,/data/download/llvm-mirror_clang12_new.cpp
70854ab835598d27a6cce2b268120735b0c8c101,"Clang changes for alloc_align attribute 

GCC has the alloc_align attribute, which is similar to assume_aligned, except the attribute's parameter is the index of the integer parameter that needs aligning to.

Differential Revision: https://reviews.llvm.org/D29599


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299117 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaDeclAttr.cpp,-,"assert(Attr.isArgExpr(AttrArgNo) && ""Expected expression argument"");",765,/data/download/llvm-mirror_clang13_old.cpp,/data/download/llvm-mirror_clang13_new.cpp
70854ab835598d27a6cce2b268120735b0c8c101,"Clang changes for alloc_align attribute 

GCC has the alloc_align attribute, which is similar to assume_aligned, except the attribute's parameter is the index of the integer parameter that needs aligning to.

Differential Revision: https://reviews.llvm.org/D29599


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299117 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaDeclAttr.cpp,+,"assert(Attr.isArgExpr(AttrArgNo) && ""Expected expression argument"");",816,/data/download/llvm-mirror_clang13_old.cpp,/data/download/llvm-mirror_clang13_new.cpp
6cecba61e47d6be93136d0caaeba3d7e54962e8f,"Add the -grecord-gcc-switches option and pass the flags down on the compile unit.

Patch by Zhizhou Yang

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299037 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Clang.cpp,-,if (getToolChain().UseDwarfDebugFlags()) {,4324,/data/download/llvm-mirror_clang14_old.cpp,/data/download/llvm-mirror_clang14_new.cpp
6cecba61e47d6be93136d0caaeba3d7e54962e8f,"Add the -grecord-gcc-switches option and pass the flags down on the compile unit.

Patch by Zhizhou Yang

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299037 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Clang.cpp,+,if (getToolChain().UseDwarfDebugFlags() ||,4328,/data/download/llvm-mirror_clang14_old.cpp,/data/download/llvm-mirror_clang14_new.cpp
1cd6beccb6bb876db3bbfa763e8979d3b363f1fa,"[Objective-C] Fix ""weak-unavailable"" warning with -fobjc-weak

Summary: clang should produce the same errors Objective-C classes that cannot be assigned to weak pointers under both -fobjc-arc and -fobjc-weak. Check for ObjCWeak along with ObjCAutoRefCount when analyzing pointer conversions. Add an -fobjc-weak pass to the existing arc-unavailable-for-weakref test cases to verify the behavior is the same.

Reviewers: rsmith, doug.gregor, rjmccall

Reviewed By: rjmccall

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31006

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299014 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCast.cpp,-,assert(Self.getLangOpts().ObjCAutoRefCount);,124,/data/download/llvm-mirror_clang15_old.cpp,/data/download/llvm-mirror_clang15_new.cpp
1cd6beccb6bb876db3bbfa763e8979d3b363f1fa,"[Objective-C] Fix ""weak-unavailable"" warning with -fobjc-weak

Summary: clang should produce the same errors Objective-C classes that cannot be assigned to weak pointers under both -fobjc-arc and -fobjc-weak. Check for ObjCWeak along with ObjCAutoRefCount when analyzing pointer conversions. Add an -fobjc-weak pass to the existing arc-unavailable-for-weakref test cases to verify the behavior is the same.

Reviewers: rsmith, doug.gregor, rjmccall

Reviewed By: rjmccall

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D31006

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@299014 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCast.cpp,+,assert(Self.getLangOpts().allowsNonTrivialObjCLifetimeQualifiers());,124,/data/download/llvm-mirror_clang15_old.cpp,/data/download/llvm-mirror_clang15_new.cpp
4c5e59fededeae3a88e0852ebbf80608efccb74c,"Reapplied r298976 [OpenCL] Added parsing for OpenCL vector types.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298992 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Parse/ParseExpr.cpp,+,return ExprError();,2370,/data/download/llvm-mirror_clang16_old.cpp,/data/download/llvm-mirror_clang16_new.cpp
d481ee522f403a21e1b7b761f5240434b140e7a9,"Reverted r298976 [OpenCL] Added parsing for OpenCL vector types.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298978 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Parse/ParseExpr.cpp,-,return ExprError();,2370,/data/download/llvm-mirror_clang17_old.cpp,/data/download/llvm-mirror_clang17_new.cpp
51f8b6a982dab8c021849d346865c075c0fd000d,"[OpenCL] Added parsing for OpenCL vector types.

Reviewers: cfe-commits, Anastasia

Reviewed By: Anastasia

Subscribers: yaxunl, bader

Differential Revision: https://reviews.llvm.org/D31183

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298976 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Parse/ParseExpr.cpp,+,return ExprError();,2370,/data/download/llvm-mirror_clang18_old.cpp,/data/download/llvm-mirror_clang18_new.cpp
83b923e7076da13e36296450711771aec78e81a4,"Revert ""Added `applyAtomicChanges` function.""

This broke GreenDragon:
http://lab.llvm.org:8080/green/job/clang-stage2-cmake-modulesRDA_build/4776/

Reverting this commit and all follow-up commits.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298967 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,-,inline llvm::Error make_string_error(const llvm::Twine &Message) {,139,/data/download/llvm-mirror_clang19_old.cpp,/data/download/llvm-mirror_clang19_new.cpp
83b923e7076da13e36296450711771aec78e81a4,"Revert ""Added `applyAtomicChanges` function.""

This broke GreenDragon:
http://lab.llvm.org:8080/green/job/clang-stage2-cmake-modulesRDA_build/4776/

Reverting this commit and all follow-up commits.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298967 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,-,llvm::inconvertibleErrorCode());,141,/data/download/llvm-mirror_clang19_old.cpp,/data/download/llvm-mirror_clang19_new.cpp
83b923e7076da13e36296450711771aec78e81a4,"Revert ""Added `applyAtomicChanges` function.""

This broke GreenDragon:
http://lab.llvm.org:8080/green/job/clang-stage2-cmake-modulesRDA_build/4776/

Reverting this commit and all follow-up commits.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298967 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,-,return make_string_error(,288,/data/download/llvm-mirror_clang19_old.cpp,/data/download/llvm-mirror_clang19_new.cpp
83b923e7076da13e36296450711771aec78e81a4,"Revert ""Added `applyAtomicChanges` function.""

This broke GreenDragon:
http://lab.llvm.org:8080/green/job/clang-stage2-cmake-modulesRDA_build/4776/

Reverting this commit and all follow-up commits.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298967 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,-,llvm::toString(HeaderReplacements.takeError()));,290,/data/download/llvm-mirror_clang19_old.cpp,/data/download/llvm-mirror_clang19_new.cpp
83b923e7076da13e36296450711771aec78e81a4,"Revert ""Added `applyAtomicChanges` function.""

This broke GreenDragon:
http://lab.llvm.org:8080/green/job/clang-stage2-cmake-modulesRDA_build/4776/

Reverting this commit and all follow-up commits.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298967 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,-,"return make_string_error(""Failed to combine replacements in all changes: "" +",295,/data/download/llvm-mirror_clang19_old.cpp,/data/download/llvm-mirror_clang19_new.cpp
83b923e7076da13e36296450711771aec78e81a4,"Revert ""Added `applyAtomicChanges` function.""

This broke GreenDragon:
http://lab.llvm.org:8080/green/job/clang-stage2-cmake-modulesRDA_build/4776/

Reverting this commit and all follow-up commits.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298967 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,-,llvm::toString(Replaces.takeError()));,296,/data/download/llvm-mirror_clang19_old.cpp,/data/download/llvm-mirror_clang19_new.cpp
83b923e7076da13e36296450711771aec78e81a4,"Revert ""Added `applyAtomicChanges` function.""

This broke GreenDragon:
http://lab.llvm.org:8080/green/job/clang-stage2-cmake-modulesRDA_build/4776/

Reverting this commit and all follow-up commits.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298967 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,-,return make_string_error(,302,/data/download/llvm-mirror_clang19_old.cpp,/data/download/llvm-mirror_clang19_new.cpp
83b923e7076da13e36296450711771aec78e81a4,"Revert ""Added `applyAtomicChanges` function.""

This broke GreenDragon:
http://lab.llvm.org:8080/green/job/clang-stage2-cmake-modulesRDA_build/4776/

Reverting this commit and all follow-up commits.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298967 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,-,"return make_string_error(""Failed to cleanup around replacements: "" +",311,/data/download/llvm-mirror_clang19_old.cpp,/data/download/llvm-mirror_clang19_new.cpp
83b923e7076da13e36296450711771aec78e81a4,"Revert ""Added `applyAtomicChanges` function.""

This broke GreenDragon:
http://lab.llvm.org:8080/green/job/clang-stage2-cmake-modulesRDA_build/4776/

Reverting this commit and all follow-up commits.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298967 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,-,llvm::toString(CleanReplaces.takeError()));,312,/data/download/llvm-mirror_clang19_old.cpp,/data/download/llvm-mirror_clang19_new.cpp
83b923e7076da13e36296450711771aec78e81a4,"Revert ""Added `applyAtomicChanges` function.""

This broke GreenDragon:
http://lab.llvm.org:8080/green/job/clang-stage2-cmake-modulesRDA_build/4776/

Reverting this commit and all follow-up commits.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298967 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,-,"return make_string_error(""Failed to apply all replacements: "" +",320,/data/download/llvm-mirror_clang19_old.cpp,/data/download/llvm-mirror_clang19_new.cpp
83b923e7076da13e36296450711771aec78e81a4,"Revert ""Added `applyAtomicChanges` function.""

This broke GreenDragon:
http://lab.llvm.org:8080/green/job/clang-stage2-cmake-modulesRDA_build/4776/

Reverting this commit and all follow-up commits.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298967 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,-,llvm::toString(ChangedCode.takeError()));,321,/data/download/llvm-mirror_clang19_old.cpp,/data/download/llvm-mirror_clang19_new.cpp
83b923e7076da13e36296450711771aec78e81a4,"Revert ""Added `applyAtomicChanges` function.""

This broke GreenDragon:
http://lab.llvm.org:8080/green/job/clang-stage2-cmake-modulesRDA_build/4776/

Reverting this commit and all follow-up commits.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298967 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,-,return make_string_error(,330,/data/download/llvm-mirror_clang19_old.cpp,/data/download/llvm-mirror_clang19_new.cpp
83b923e7076da13e36296450711771aec78e81a4,"Revert ""Added `applyAtomicChanges` function.""

This broke GreenDragon:
http://lab.llvm.org:8080/green/job/clang-stage2-cmake-modulesRDA_build/4776/

Reverting this commit and all follow-up commits.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298967 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,-,llvm::toString(ChangedCode.takeError()));,332,/data/download/llvm-mirror_clang19_old.cpp,/data/download/llvm-mirror_clang19_new.cpp
83b923e7076da13e36296450711771aec78e81a4,"Revert ""Added `applyAtomicChanges` function.""

This broke GreenDragon:
http://lab.llvm.org:8080/green/job/clang-stage2-cmake-modulesRDA_build/4776/

Reverting this commit and all follow-up commits.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298967 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,-,return make_string_error(,343,/data/download/llvm-mirror_clang19_old.cpp,/data/download/llvm-mirror_clang19_new.cpp
83b923e7076da13e36296450711771aec78e81a4,"Revert ""Added `applyAtomicChanges` function.""

This broke GreenDragon:
http://lab.llvm.org:8080/green/job/clang-stage2-cmake-modulesRDA_build/4776/

Reverting this commit and all follow-up commits.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298967 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,-,llvm::toString(ChangedCode.takeError()));,345,/data/download/llvm-mirror_clang19_old.cpp,/data/download/llvm-mirror_clang19_new.cpp
966ccc5a65e5e1b65ef5b8ed6fe4492af623359d,"[analyzer] When creating a temporary object, properly copy the value into it.

Adjustments should be considered properly; we should copy the unadjusted object
over the whole temporary base region. If the unadjusted object is no longer
available in the Environment, invalidate the temporary base region, and then
copy the adjusted object into the adjusted sub-region of the temporary region.

This fixes a regression introduced by r288263, that caused various
false positives, due to copying only adjusted object into the adjusted region;
the rest of the base region therefore remained undefined.
Before r288263, the adjusted value was copied over the unadjusted region,
which is incorrect, but accidentally worked better due to how region store
disregards compound value bindings to non-base regions.

An additional test machinery is introduced to make sure that despite making
two binds, we only notify checkers once for both of them, without exposing
the partially copied objects.

This fix is a hack over a hack. The proper fix would be to model C++ temporaries
in the CFG, and after that dealing with adjustments would no longer be
necessary, and the values we need would no longer disappear from the
Environment.

rdar://problem/30658168

Differential Revision: https://reviews.llvm.org/D30534


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298924 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/ExprEngine.cpp,-,assert(!V.getAs<Loc>() || Loc::isLocType(Result->getType()) ||,197,/data/download/llvm-mirror_clang20_old.cpp,/data/download/llvm-mirror_clang20_new.cpp
966ccc5a65e5e1b65ef5b8ed6fe4492af623359d,"[analyzer] When creating a temporary object, properly copy the value into it.

Adjustments should be considered properly; we should copy the unadjusted object
over the whole temporary base region. If the unadjusted object is no longer
available in the Environment, invalidate the temporary base region, and then
copy the adjusted object into the adjusted sub-region of the temporary region.

This fixes a regression introduced by r288263, that caused various
false positives, due to copying only adjusted object into the adjusted region;
the rest of the base region therefore remained undefined.
Before r288263, the adjusted value was copied over the unadjusted region,
which is incorrect, but accidentally worked better due to how region store
disregards compound value bindings to non-base regions.

An additional test machinery is introduced to make sure that despite making
two binds, we only notify checkers once for both of them, without exposing
the partially copied objects.

This fix is a hack over a hack. The proper fix would be to model C++ temporaries
in the CFG, and after that dealing with adjustments would no longer be
necessary, and the values we need would no longer disappear from the
Environment.

rdar://problem/30658168

Differential Revision: https://reviews.llvm.org/D30534


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298924 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Core/ExprEngine.cpp,+,assert(!InitValWithAdjustments.getAs<Loc>() ||,202,/data/download/llvm-mirror_clang20_old.cpp,/data/download/llvm-mirror_clang20_new.cpp
ad6a872e1eec659fc23ec6b1a7db1a6235aed2c9,"Added `applyAtomicChanges` function.

Summary: ... which applies a set of `AtomicChange`s on code.

Reviewers: klimek, djasper

Reviewed By: djasper

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D30777

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298913 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,+,inline llvm::Error make_string_error(const llvm::Twine &Message) {,139,/data/download/llvm-mirror_clang21_old.cpp,/data/download/llvm-mirror_clang21_new.cpp
ad6a872e1eec659fc23ec6b1a7db1a6235aed2c9,"Added `applyAtomicChanges` function.

Summary: ... which applies a set of `AtomicChange`s on code.

Reviewers: klimek, djasper

Reviewed By: djasper

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D30777

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298913 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,+,llvm::inconvertibleErrorCode());,141,/data/download/llvm-mirror_clang21_old.cpp,/data/download/llvm-mirror_clang21_new.cpp
ad6a872e1eec659fc23ec6b1a7db1a6235aed2c9,"Added `applyAtomicChanges` function.

Summary: ... which applies a set of `AtomicChange`s on code.

Reviewers: klimek, djasper

Reviewed By: djasper

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D30777

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298913 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,+,return make_string_error(,288,/data/download/llvm-mirror_clang21_old.cpp,/data/download/llvm-mirror_clang21_new.cpp
ad6a872e1eec659fc23ec6b1a7db1a6235aed2c9,"Added `applyAtomicChanges` function.

Summary: ... which applies a set of `AtomicChange`s on code.

Reviewers: klimek, djasper

Reviewed By: djasper

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D30777

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298913 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,+,llvm::toString(HeaderReplacements.takeError()));,290,/data/download/llvm-mirror_clang21_old.cpp,/data/download/llvm-mirror_clang21_new.cpp
ad6a872e1eec659fc23ec6b1a7db1a6235aed2c9,"Added `applyAtomicChanges` function.

Summary: ... which applies a set of `AtomicChange`s on code.

Reviewers: klimek, djasper

Reviewed By: djasper

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D30777

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298913 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,+,"return make_string_error(""Failed to combine replacements in all changes: "" +",295,/data/download/llvm-mirror_clang21_old.cpp,/data/download/llvm-mirror_clang21_new.cpp
ad6a872e1eec659fc23ec6b1a7db1a6235aed2c9,"Added `applyAtomicChanges` function.

Summary: ... which applies a set of `AtomicChange`s on code.

Reviewers: klimek, djasper

Reviewed By: djasper

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D30777

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298913 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,+,llvm::toString(Replaces.takeError()));,296,/data/download/llvm-mirror_clang21_old.cpp,/data/download/llvm-mirror_clang21_new.cpp
ad6a872e1eec659fc23ec6b1a7db1a6235aed2c9,"Added `applyAtomicChanges` function.

Summary: ... which applies a set of `AtomicChange`s on code.

Reviewers: klimek, djasper

Reviewed By: djasper

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D30777

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298913 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,+,return make_string_error(,302,/data/download/llvm-mirror_clang21_old.cpp,/data/download/llvm-mirror_clang21_new.cpp
ad6a872e1eec659fc23ec6b1a7db1a6235aed2c9,"Added `applyAtomicChanges` function.

Summary: ... which applies a set of `AtomicChange`s on code.

Reviewers: klimek, djasper

Reviewed By: djasper

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D30777

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298913 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,+,"return make_string_error(""Failed to cleanup around replacements: "" +",311,/data/download/llvm-mirror_clang21_old.cpp,/data/download/llvm-mirror_clang21_new.cpp
ad6a872e1eec659fc23ec6b1a7db1a6235aed2c9,"Added `applyAtomicChanges` function.

Summary: ... which applies a set of `AtomicChange`s on code.

Reviewers: klimek, djasper

Reviewed By: djasper

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D30777

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298913 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,+,llvm::toString(CleanReplaces.takeError()));,312,/data/download/llvm-mirror_clang21_old.cpp,/data/download/llvm-mirror_clang21_new.cpp
ad6a872e1eec659fc23ec6b1a7db1a6235aed2c9,"Added `applyAtomicChanges` function.

Summary: ... which applies a set of `AtomicChange`s on code.

Reviewers: klimek, djasper

Reviewed By: djasper

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D30777

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298913 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,+,"return make_string_error(""Failed to apply all replacements: "" +",320,/data/download/llvm-mirror_clang21_old.cpp,/data/download/llvm-mirror_clang21_new.cpp
ad6a872e1eec659fc23ec6b1a7db1a6235aed2c9,"Added `applyAtomicChanges` function.

Summary: ... which applies a set of `AtomicChange`s on code.

Reviewers: klimek, djasper

Reviewed By: djasper

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D30777

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298913 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,+,llvm::toString(ChangedCode.takeError()));,321,/data/download/llvm-mirror_clang21_old.cpp,/data/download/llvm-mirror_clang21_new.cpp
ad6a872e1eec659fc23ec6b1a7db1a6235aed2c9,"Added `applyAtomicChanges` function.

Summary: ... which applies a set of `AtomicChange`s on code.

Reviewers: klimek, djasper

Reviewed By: djasper

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D30777

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298913 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,+,return make_string_error(,330,/data/download/llvm-mirror_clang21_old.cpp,/data/download/llvm-mirror_clang21_new.cpp
ad6a872e1eec659fc23ec6b1a7db1a6235aed2c9,"Added `applyAtomicChanges` function.

Summary: ... which applies a set of `AtomicChange`s on code.

Reviewers: klimek, djasper

Reviewed By: djasper

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D30777

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298913 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,+,llvm::toString(ChangedCode.takeError()));,332,/data/download/llvm-mirror_clang21_old.cpp,/data/download/llvm-mirror_clang21_new.cpp
ad6a872e1eec659fc23ec6b1a7db1a6235aed2c9,"Added `applyAtomicChanges` function.

Summary: ... which applies a set of `AtomicChange`s on code.

Reviewers: klimek, djasper

Reviewed By: djasper

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D30777

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298913 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,+,return make_string_error(,343,/data/download/llvm-mirror_clang21_old.cpp,/data/download/llvm-mirror_clang21_new.cpp
ad6a872e1eec659fc23ec6b1a7db1a6235aed2c9,"Added `applyAtomicChanges` function.

Summary: ... which applies a set of `AtomicChange`s on code.

Reviewers: klimek, djasper

Reviewed By: djasper

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D30777

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298913 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Tooling/Refactoring/AtomicChange.cpp,+,llvm::toString(ChangedCode.takeError()));,345,/data/download/llvm-mirror_clang21_old.cpp,/data/download/llvm-mirror_clang21_new.cpp
a5c67c5813349c3465a42604bdc88331bf358a5c,"Revert r298742 ""[ODRHash] Add error messages for mismatched parameters in methods.""

I failed to revert this in r298816.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298824 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,-,"ODRDiagError(FirstMethod->getLocation(),",9574,/data/download/llvm-mirror_clang22_old.cpp,/data/download/llvm-mirror_clang22_new.cpp
a5c67c5813349c3465a42604bdc88331bf358a5c,"Revert r298742 ""[ODRHash] Add error messages for mismatched parameters in methods.""

I failed to revert this in r298816.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298824 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,-,"ODRDiagError(FirstMethod->getLocation(),",9590,/data/download/llvm-mirror_clang22_old.cpp,/data/download/llvm-mirror_clang22_new.cpp
a5c67c5813349c3465a42604bdc88331bf358a5c,"Revert r298742 ""[ODRHash] Add error messages for mismatched parameters in methods.""

I failed to revert this in r298816.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298824 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,-,"ODRDiagError(FirstMethod->getLocation(),",9603,/data/download/llvm-mirror_clang22_old.cpp,/data/download/llvm-mirror_clang22_new.cpp
a5c67c5813349c3465a42604bdc88331bf358a5c,"Revert r298742 ""[ODRHash] Add error messages for mismatched parameters in methods.""

I failed to revert this in r298816.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298824 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,-,"ODRDiagError(FirstMethod->getLocation(),",9617,/data/download/llvm-mirror_clang22_old.cpp,/data/download/llvm-mirror_clang22_new.cpp
a5c67c5813349c3465a42604bdc88331bf358a5c,"Revert r298742 ""[ODRHash] Add error messages for mismatched parameters in methods.""

I failed to revert this in r298816.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298824 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,-,"ODRDiagError(FirstMethod->getLocation(),",9631,/data/download/llvm-mirror_clang22_old.cpp,/data/download/llvm-mirror_clang22_new.cpp
099af3a11632104a0b9cfca4e129b974b7d3cfcb,"Revert 298754 and 298742.

They broke llvm modules builds and our internal modules infrastructure.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298816 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,-,"ODRDiagError(FirstMethod->getLocation(),",9595,/data/download/llvm-mirror_clang23_old.cpp,/data/download/llvm-mirror_clang23_new.cpp
099af3a11632104a0b9cfca4e129b974b7d3cfcb,"Revert 298754 and 298742.

They broke llvm modules builds and our internal modules infrastructure.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298816 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,-,"ODRDiagError(FirstMethod->getLocation(),",9600,/data/download/llvm-mirror_clang23_old.cpp,/data/download/llvm-mirror_clang23_new.cpp
099af3a11632104a0b9cfca4e129b974b7d3cfcb,"Revert 298754 and 298742.

They broke llvm modules builds and our internal modules infrastructure.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298816 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"ODRDiagError(FirstMethod->getLocation(),",9590,/data/download/llvm-mirror_clang23_old.cpp,/data/download/llvm-mirror_clang23_new.cpp
099af3a11632104a0b9cfca4e129b974b7d3cfcb,"Revert 298754 and 298742.

They broke llvm modules builds and our internal modules infrastructure.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298816 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,-,"static_assert(1 == 1, ""Message"");                      \",645,/data/download/llvm-mirror_clang24_old.cpp,/data/download/llvm-mirror_clang24_new.cpp
099af3a11632104a0b9cfca4e129b974b7d3cfcb,"Revert 298754 and 298742.

They broke llvm modules builds and our internal modules infrastructure.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298816 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,-,static_assert(2 == 2);                                 \,646,/data/download/llvm-mirror_clang24_old.cpp,/data/download/llvm-mirror_clang24_new.cpp
099af3a11632104a0b9cfca4e129b974b7d3cfcb,"Revert 298754 and 298742.

They broke llvm modules builds and our internal modules infrastructure.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298816 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,+,"static_assert(1 == 1, ""Message"");",608,/data/download/llvm-mirror_clang24_old.cpp,/data/download/llvm-mirror_clang24_new.cpp
099af3a11632104a0b9cfca4e129b974b7d3cfcb,"Revert 298754 and 298742.

They broke llvm modules builds and our internal modules infrastructure.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298816 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,+,static_assert(2 == 2);,609,/data/download/llvm-mirror_clang24_old.cpp,/data/download/llvm-mirror_clang24_new.cpp
099af3a11632104a0b9cfca4e129b974b7d3cfcb,"Revert 298754 and 298742.

They broke llvm modules builds and our internal modules infrastructure.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298816 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,+,"static_assert(1 == 1, ""Message"");",642,/data/download/llvm-mirror_clang24_old.cpp,/data/download/llvm-mirror_clang24_new.cpp
099af3a11632104a0b9cfca4e129b974b7d3cfcb,"Revert 298754 and 298742.

They broke llvm modules builds and our internal modules infrastructure.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298816 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,+,static_assert(2 == 2);,643,/data/download/llvm-mirror_clang24_old.cpp,/data/download/llvm-mirror_clang24_new.cpp
099af3a11632104a0b9cfca4e129b974b7d3cfcb,"Revert 298754 and 298742.

They broke llvm modules builds and our internal modules infrastructure.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298816 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,+,"static_assert(1 == 1, ""Message"");",680,/data/download/llvm-mirror_clang24_old.cpp,/data/download/llvm-mirror_clang24_new.cpp
099af3a11632104a0b9cfca4e129b974b7d3cfcb,"Revert 298754 and 298742.

They broke llvm modules builds and our internal modules infrastructure.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298816 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,+,static_assert(2 == 2);,681,/data/download/llvm-mirror_clang24_old.cpp,/data/download/llvm-mirror_clang24_new.cpp
099af3a11632104a0b9cfca4e129b974b7d3cfcb,"Revert 298754 and 298742.

They broke llvm modules builds and our internal modules infrastructure.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298816 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,+,"static_assert(1 == 1, ""Message"");",716,/data/download/llvm-mirror_clang24_old.cpp,/data/download/llvm-mirror_clang24_new.cpp
099af3a11632104a0b9cfca4e129b974b7d3cfcb,"Revert 298754 and 298742.

They broke llvm modules builds and our internal modules infrastructure.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298816 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,+,static_assert(2 == 2);,717,/data/download/llvm-mirror_clang24_old.cpp,/data/download/llvm-mirror_clang24_new.cpp
bcaf7f2abe47b0dab055f1a0ec011ed9c2a3d3ea,"[coroutines] Add codegen for await and yield expressions

Details:

Emit suspend expression which roughly looks like:

auto && x = CommonExpr();
if (!x.await_ready()) {
   llvm_coro_save();
   x.await_suspend(...);     (*)
   llvm_coro_suspend(); (**)
}
x.await_resume();
where the result of the entire expression is the result of x.await_resume()

(*) If x.await_suspend return type is bool, it allows to veto a suspend:
if (x.await_suspend(...))
   llvm_coro_suspend();
(**) llvm_coro_suspend() encodes three possible continuations as a switch instruction:

%where-to = call i8 @llvm.coro.suspend(...)
switch i8 %where-to, label %coro.ret [ ; jump to epilogue to suspend
  i8 0, label %yield.ready   ; go here when resumed
  i8 1, label %yield.cleanup ; go here when destroyed
]

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298784 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/CGCoroutine.cpp,+,assert(SuspendRet->getType()->isIntegerTy(1) &&,168,/data/download/llvm-mirror_clang25_old.cpp,/data/download/llvm-mirror_clang25_new.cpp
29385a0c39f5aa0c2c4880aa8d3537b37d463e2d,"[ODRHash] Add support for array and decayed types.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298754 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,-,"ODRDiagError(FirstMethod->getLocation(),",9590,/data/download/llvm-mirror_clang26_old.cpp,/data/download/llvm-mirror_clang26_new.cpp
29385a0c39f5aa0c2c4880aa8d3537b37d463e2d,"[ODRHash] Add support for array and decayed types.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298754 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"ODRDiagError(FirstMethod->getLocation(),",9595,/data/download/llvm-mirror_clang26_old.cpp,/data/download/llvm-mirror_clang26_new.cpp
29385a0c39f5aa0c2c4880aa8d3537b37d463e2d,"[ODRHash] Add support for array and decayed types.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298754 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"ODRDiagError(FirstMethod->getLocation(),",9600,/data/download/llvm-mirror_clang26_old.cpp,/data/download/llvm-mirror_clang26_new.cpp
29385a0c39f5aa0c2c4880aa8d3537b37d463e2d,"[ODRHash] Add support for array and decayed types.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298754 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,+,"static_assert(1 == 1, ""Message"");                      \",645,/data/download/llvm-mirror_clang27_old.cpp,/data/download/llvm-mirror_clang27_new.cpp
29385a0c39f5aa0c2c4880aa8d3537b37d463e2d,"[ODRHash] Add support for array and decayed types.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298754 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,+,static_assert(2 == 2);                                 \,646,/data/download/llvm-mirror_clang27_old.cpp,/data/download/llvm-mirror_clang27_new.cpp
29385a0c39f5aa0c2c4880aa8d3537b37d463e2d,"[ODRHash] Add support for array and decayed types.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298754 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,-,"static_assert(1 == 1, ""Message"");",608,/data/download/llvm-mirror_clang27_old.cpp,/data/download/llvm-mirror_clang27_new.cpp
29385a0c39f5aa0c2c4880aa8d3537b37d463e2d,"[ODRHash] Add support for array and decayed types.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298754 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,-,static_assert(2 == 2);,609,/data/download/llvm-mirror_clang27_old.cpp,/data/download/llvm-mirror_clang27_new.cpp
29385a0c39f5aa0c2c4880aa8d3537b37d463e2d,"[ODRHash] Add support for array and decayed types.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298754 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,-,"static_assert(1 == 1, ""Message"");",642,/data/download/llvm-mirror_clang27_old.cpp,/data/download/llvm-mirror_clang27_new.cpp
29385a0c39f5aa0c2c4880aa8d3537b37d463e2d,"[ODRHash] Add support for array and decayed types.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298754 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,-,static_assert(2 == 2);,643,/data/download/llvm-mirror_clang27_old.cpp,/data/download/llvm-mirror_clang27_new.cpp
29385a0c39f5aa0c2c4880aa8d3537b37d463e2d,"[ODRHash] Add support for array and decayed types.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298754 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,-,"static_assert(1 == 1, ""Message"");",680,/data/download/llvm-mirror_clang27_old.cpp,/data/download/llvm-mirror_clang27_new.cpp
29385a0c39f5aa0c2c4880aa8d3537b37d463e2d,"[ODRHash] Add support for array and decayed types.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298754 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,-,static_assert(2 == 2);,681,/data/download/llvm-mirror_clang27_old.cpp,/data/download/llvm-mirror_clang27_new.cpp
29385a0c39f5aa0c2c4880aa8d3537b37d463e2d,"[ODRHash] Add support for array and decayed types.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298754 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,-,"static_assert(1 == 1, ""Message"");",716,/data/download/llvm-mirror_clang27_old.cpp,/data/download/llvm-mirror_clang27_new.cpp
29385a0c39f5aa0c2c4880aa8d3537b37d463e2d,"[ODRHash] Add support for array and decayed types.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298754 91177308-0d34-0410-b5e6-96231b3b80d8",test/Modules/odr_hash.cpp,-,static_assert(2 == 2);,717,/data/download/llvm-mirror_clang27_old.cpp,/data/download/llvm-mirror_clang27_new.cpp
3aa12da422888446c2468cf3d6f4c37fd5cc9fcb,"[ODRHash] Add error messages for mismatched parameters in methods.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298742 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"ODRDiagError(FirstMethod->getLocation(),",9574,/data/download/llvm-mirror_clang28_old.cpp,/data/download/llvm-mirror_clang28_new.cpp
3aa12da422888446c2468cf3d6f4c37fd5cc9fcb,"[ODRHash] Add error messages for mismatched parameters in methods.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298742 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"ODRDiagError(FirstMethod->getLocation(),",9590,/data/download/llvm-mirror_clang28_old.cpp,/data/download/llvm-mirror_clang28_new.cpp
3aa12da422888446c2468cf3d6f4c37fd5cc9fcb,"[ODRHash] Add error messages for mismatched parameters in methods.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298742 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"ODRDiagError(FirstMethod->getLocation(),",9603,/data/download/llvm-mirror_clang28_old.cpp,/data/download/llvm-mirror_clang28_new.cpp
3aa12da422888446c2468cf3d6f4c37fd5cc9fcb,"[ODRHash] Add error messages for mismatched parameters in methods.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298742 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"ODRDiagError(FirstMethod->getLocation(),",9617,/data/download/llvm-mirror_clang28_old.cpp,/data/download/llvm-mirror_clang28_new.cpp
3aa12da422888446c2468cf3d6f4c37fd5cc9fcb,"[ODRHash] Add error messages for mismatched parameters in methods.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298742 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"ODRDiagError(FirstMethod->getLocation(),",9631,/data/download/llvm-mirror_clang28_old.cpp,/data/download/llvm-mirror_clang28_new.cpp
03276d317517d21eeb46b1712195492ee27d49ad,"[analyzer] Add MisusedMovedObjectChecker for detecting use-after-move errors.

The checker currently warns on copying, moving, or calling methods on an object
that was recently std::move'd from. It understands a set of ""state reset""
methods that bring a moved-from object back to a well-specified state.

Patch by Peter Szecsi!

Differential Revision: https://reviews.llvm.org/D24246


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298698 91177308-0d34-0410-b5e6-96231b3b80d8",lib/StaticAnalyzer/Checkers/MisusedMovedObjectChecker.cpp,+,if (ExplodedNode *N = C.generateNonFatalErrorNode()) {,182,/data/download/llvm-mirror_clang29_old.cpp,/data/download/llvm-mirror_clang29_new.cpp
03276d317517d21eeb46b1712195492ee27d49ad,"[analyzer] Add MisusedMovedObjectChecker for detecting use-after-move errors.

The checker currently warns on copying, moving, or calling methods on an object
that was recently std::move'd from. It understands a set of ""state reset""
methods that bring a moved-from object back to a well-specified state.

Patch by Peter Szecsi!

Differential Revision: https://reviews.llvm.org/D24246


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298698 91177308-0d34-0410-b5e6-96231b3b80d8",test/Analysis/MisusedMovedObject.cpp,+,void logicalOperatorsSequenceTest() {,535,/data/download/llvm-mirror_clang30_old.cpp,/data/download/llvm-mirror_clang30_new.cpp
830dfeb50d63b95c23d03a46325d7dc3480f3db7,"Fix handling of initialization from parenthesized initializer list.

This change fixes a crash on initialization of a reference from ({}) during
template instantiation and incidentally improves diagnostics.

This reverts a prior attempt to handle this in r286721. Instead, we teach the
initialization code that initialization cannot be performed if a source type
is required and the initializer is an initializer list (which is not an
expression and does not have a type), and likewise for function-style cast
expressions.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298676 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaExprCXX.cpp,-,"return ExprError(Diag(TyBeginLoc,",1314,/data/download/llvm-mirror_clang31_old.cpp,/data/download/llvm-mirror_clang31_new.cpp
830dfeb50d63b95c23d03a46325d7dc3480f3db7,"Fix handling of initialization from parenthesized initializer list.

This change fixes a crash on initialization of a reference from ({}) during
template instantiation and incidentally improves diagnostics.

This reverts a prior attempt to handle this in r286721. Instead, we teach the
initialization code that initialization cannot be performed if a source type
is required and the initializer is an initializer list (which is not an
expression and does not have a type), and likewise for function-style cast
expressions.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298676 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaExprCXX.cpp,+,"return ExprError(Diag(TyBeginLoc, diag::err_value_init_for_array_type)",1300,/data/download/llvm-mirror_clang31_old.cpp,/data/download/llvm-mirror_clang31_new.cpp
830dfeb50d63b95c23d03a46325d7dc3480f3db7,"Fix handling of initialization from parenthesized initializer list.

This change fixes a crash on initialization of a reference from ({}) during
template instantiation and incidentally improves diagnostics.

This reverts a prior attempt to handle this in r286721. Instead, we teach the
initialization code that initialization cannot be performed if a source type
is required and the initializer is an initializer list (which is not an
expression and does not have a type), and likewise for function-style cast
expressions.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298676 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaExprCXX.cpp,-,"return ExprError(Diag(TyBeginLoc, diag::err_value_init_for_function_type)",1320,/data/download/llvm-mirror_clang31_old.cpp,/data/download/llvm-mirror_clang31_new.cpp
830dfeb50d63b95c23d03a46325d7dc3480f3db7,"Fix handling of initialization from parenthesized initializer list.

This change fixes a crash on initialization of a reference from ({}) during
template instantiation and incidentally improves diagnostics.

This reverts a prior attempt to handle this in r286721. Instead, we teach the
initialization code that initialization cannot be performed if a source type
is required and the initializer is an initializer list (which is not an
expression and does not have a type), and likewise for function-style cast
expressions.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298676 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaExprCXX.cpp,+,"return ExprError(Diag(TyBeginLoc, diag::err_init_for_function_type)",1308,/data/download/llvm-mirror_clang31_old.cpp,/data/download/llvm-mirror_clang31_new.cpp
830dfeb50d63b95c23d03a46325d7dc3480f3db7,"Fix handling of initialization from parenthesized initializer list.

This change fixes a crash on initialization of a reference from ({}) during
template instantiation and incidentally improves diagnostics.

This reverts a prior attempt to handle this in r286721. Instead, we teach the
initialization code that initialization cannot be performed if a source type
is required and the initializer is an initializer list (which is not an
expression and does not have a type), and likewise for function-style cast
expressions.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298676 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaInit.cpp,+,"assert(Args.size() >= 1 && ""Zero-argument case handled above"");",5355,/data/download/llvm-mirror_clang32_old.cpp,/data/download/llvm-mirror_clang32_new.cpp
830dfeb50d63b95c23d03a46325d7dc3480f3db7,"Fix handling of initialization from parenthesized initializer list.

This change fixes a crash on initialization of a reference from ({}) during
template instantiation and incidentally improves diagnostics.

This reverts a prior attempt to handle this in r286721. Instead, we teach the
initialization code that initialization cannot be performed if a source type
is required and the initializer is an initializer list (which is not an
expression and does not have a type), and likewise for function-style cast
expressions.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298676 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaInit.cpp,-,"assert(Args.size() == 1 && ""Zero-argument case handled above"");",5351,/data/download/llvm-mirror_clang32_old.cpp,/data/download/llvm-mirror_clang32_new.cpp
ae3ac3323764b2361c5c92ed733e9c67ccd4421b,"[ThinLTO] Clang support for emitting minimized bitcode for thin link

Summary:
Clang companion patch to LLVM patch D31027, which adds support
for emitting minimized bitcode file for use in the thin link step.
Add a cc1 option -fthin-link-bitcode=<file> to trigger this behavior.

Depends on D31027.

Reviewers: mehdi_amini, pcc

Subscribers: cfe-commits, Prazek

Differential Revision: https://reviews.llvm.org/D31050

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298639 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/BackendUtil.cpp,-,PerModulePasses.add(createWriteThinLTOBitcodePass(*OS));,695,/data/download/llvm-mirror_clang33_old.cpp,/data/download/llvm-mirror_clang33_new.cpp
ae3ac3323764b2361c5c92ed733e9c67ccd4421b,"[ThinLTO] Clang support for emitting minimized bitcode for thin link

Summary:
Clang companion patch to LLVM patch D31027, which adds support
for emitting minimized bitcode file for use in the thin link step.
Add a cc1 option -fthin-link-bitcode=<file> to trigger this behavior.

Depends on D31027.

Reviewers: mehdi_amini, pcc

Subscribers: cfe-commits, Prazek

Differential Revision: https://reviews.llvm.org/D31050

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298639 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/BackendUtil.cpp,+,"createWriteThinLTOBitcodePass(*OS, ThinLinkOS.get()));",709,/data/download/llvm-mirror_clang33_old.cpp,/data/download/llvm-mirror_clang33_new.cpp
bc27c2f122398298615b9d995f222a24a44cd648,"[coroutines] Implement unhandled_exception changes.

Summary:
This patch adopts the recent changes that renamed `set_exception(exception_pointer)` to `unhandled_exception()`. 

Additionally `unhandled_exception()` is now required, and so an error is emitted when exceptions are enabled but the promise type does not provide the member.
When exceptions are disabled a warning is emitted instead of an error, The warning notes that the `unhandled_exception()` function is required when exceptions are enabled.

Reviewers: rsmith, GorNishanov, aaron.ballman, majnemer

Reviewed By: GorNishanov

Subscribers: mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D30859

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298565 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,-,return ExprError();,665,/data/download/llvm-mirror_clang34_old.cpp,/data/download/llvm-mirror_clang34_new.cpp
bc27c2f122398298615b9d995f222a24a44cd648,"[coroutines] Implement unhandled_exception changes.

Summary:
This patch adopts the recent changes that renamed `set_exception(exception_pointer)` to `unhandled_exception()`. 

Additionally `unhandled_exception()` is now required, and so an error is emitted when exceptions are enabled but the promise type does not provide the member.
When exceptions are disabled a warning is emitted instead of an error, The warning notes that the `unhandled_exception()` function is required when exceptions are enabled.

Reviewers: rsmith, GorNishanov, aaron.ballman, majnemer

Reviewed By: GorNishanov

Subscribers: mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D30859

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298565 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,-,return ExprError();,671,/data/download/llvm-mirror_clang34_old.cpp,/data/download/llvm-mirror_clang34_new.cpp
bc27c2f122398298615b9d995f222a24a44cd648,"[coroutines] Implement unhandled_exception changes.

Summary:
This patch adopts the recent changes that renamed `set_exception(exception_pointer)` to `unhandled_exception()`. 

Additionally `unhandled_exception()` is now required, and so an error is emitted when exceptions are enabled but the promise type does not provide the member.
When exceptions are disabled a warning is emitted instead of an error, The warning notes that the `unhandled_exception()` function is required when exceptions are enabled.

Reviewers: rsmith, GorNishanov, aaron.ballman, majnemer

Reviewed By: GorNishanov

Subscribers: mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D30859

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298565 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,-,return ExprError();,678,/data/download/llvm-mirror_clang34_old.cpp,/data/download/llvm-mirror_clang34_new.cpp
bc27c2f122398298615b9d995f222a24a44cd648,"[coroutines] Implement unhandled_exception changes.

Summary:
This patch adopts the recent changes that renamed `set_exception(exception_pointer)` to `unhandled_exception()`. 

Additionally `unhandled_exception()` is now required, and so an error is emitted when exceptions are enabled but the promise type does not provide the member.
When exceptions are disabled a warning is emitted instead of an error, The warning notes that the `unhandled_exception()` function is required when exceptions are enabled.

Reviewers: rsmith, GorNishanov, aaron.ballman, majnemer

Reviewed By: GorNishanov

Subscribers: mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D30859

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298565 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,-,return ExprError();,684,/data/download/llvm-mirror_clang34_old.cpp,/data/download/llvm-mirror_clang34_new.cpp
f59e14431c4b7dbea2c39db286f5a309c48f5b24,"Remove an overly aggressive assert in r298491 and leave a comment
explaining why we have to ignore errors here even though in other parts
of codegen we can be more strict with builtins.

Also add a test case based on the code in a TSan test that found this
issue.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298494 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/CGCall.cpp,-,"assert(Error == ASTContext::GE_None && ""Should not codegen an error"");",1816,/data/download/llvm-mirror_clang35_old.cpp,/data/download/llvm-mirror_clang35_new.cpp
4db37b682d05e075757eb3b75d77cd14f51b1313,"[nonnull] Teach Clang to attach the nonnull LLVM attribute to
declarations and calls instead of just definitions, and then teach it to
*not* attach such attributes even if the source code contains them.

This follows the design direction discussed on cfe-dev here:
http://lists.llvm.org/pipermail/cfe-dev/2017-January/052066.html

The idea is that for C standard library builtins, even if the library
vendor chooses to annotate their routines with __attribute__((nonnull)),
we will ignore those attributes which pertain to pointer arguments that
have an associated size. This allows the widespread (and seemingly
reasonable) pattern of calling these routines with a null pointer and
a zero size. I have only done this for the library builtins currently
recognized by Clang, but we can now trivially add to this set. This will
be controllable with -fno-builtin if anyone should care to do so.

Note that this does *not* change the AST. As a consequence, warnings,
static analysis, and source code rewriting are not impacted.

This isn't even a regression on any platform as neither Clang nor LLVM
have ever put 'nonnull' onto these arguments for declarations. All this
patch does is enable it on other declarations while preventing us from
ever accidentally enabling it on these libc functions due to a library
vendor.

It will also allow any other libraries using this annotation to gain
optimizations based on the annotation even when only a declaration is
visible.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298491 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/CGCall.cpp,+,"assert(Error == ASTContext::GE_None && ""Should not codegen an error"");",1816,/data/download/llvm-mirror_clang36_old.cpp,/data/download/llvm-mirror_clang36_new.cpp
625d61d6c5d39ebcde60a01d8955c8701734dade,"[Modules] Rebuild modules on umbrella header mismatch

This restores behavior pre-r230064 since after PCMCache work (r298278)
we don't reload PCMs from disk within the same compiler invocation.

Testcases from r230064 are still left around since they still guarantee
the correct behavior we're expecting.

rdar://problem/19889777

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298464 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"Error(""mismatched umbrella headers in submodule"");",4894,/data/download/llvm-mirror_clang37_old.cpp,/data/download/llvm-mirror_clang37_new.cpp
3c892b9138e4d2de073529c85f51c76b71913383,"Apply clang-tidy's performance-unnecessary-value-param to parts of clang.

No functionality change intended.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298443 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/GeneratePCH.cpp,-,"Writer(Stream, Buffer->Data, PP.getPCMCache(), Extensions,",31,/data/download/llvm-mirror_clang38_old.cpp,/data/download/llvm-mirror_clang38_new.cpp
3c892b9138e4d2de073529c85f51c76b71913383,"Apply clang-tidy's performance-unnecessary-value-param to parts of clang.

No functionality change intended.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298443 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/GeneratePCH.cpp,+,"Writer(Stream, this->Buffer->Data, PP.getPCMCache(), Extensions,",31,/data/download/llvm-mirror_clang38_old.cpp,/data/download/llvm-mirror_clang38_new.cpp
18021952cce94fde55068790887992c1c9e0e2e8,"Add support for attribute enum_extensibility.

This commit adds support for a new attribute that will be used to
distinguish between extensible and inextensible enums. There are three
main purposes of this attribute:

1. Give better control over when enum-related warnings are issued.
For example, in the code below, clang will not issue a -Wassign-enum
warning if the enum is marked ""open"":

enum __attribute__((enum_extensibility(closed))) EnumClosed {
  B0 = 1, B1 = 10
};

enum __attribute__((enum_extensibility(open))) EnumOpen {
  C0 = 1, C1 = 10
};

enum EnumClosed ec = 100; // warning issued
enum EnumOpen eo = 100; // no warning

2. Enable code-completion and debugging tools to offer better
suggestions.

3. Make it easier for swift's clang importer to determine which swift
type an enum should be mapped to.

For more details, see the discussion I started on cfe-dev:
http://lists.llvm.org/pipermail/cfe-dev/2017-February/052748.html

rdar://problem/12764379
rdar://problem/23145650

Differential Revision: https://reviews.llvm.org/D30766

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298332 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaDecl.cpp,-,"assert(ED->hasAttr<FlagEnumAttr>() && ""looking for value in non-flag enum"");",15361,/data/download/llvm-mirror_clang39_old.cpp,/data/download/llvm-mirror_clang39_new.cpp
18021952cce94fde55068790887992c1c9e0e2e8,"Add support for attribute enum_extensibility.

This commit adds support for a new attribute that will be used to
distinguish between extensible and inextensible enums. There are three
main purposes of this attribute:

1. Give better control over when enum-related warnings are issued.
For example, in the code below, clang will not issue a -Wassign-enum
warning if the enum is marked ""open"":

enum __attribute__((enum_extensibility(closed))) EnumClosed {
  B0 = 1, B1 = 10
};

enum __attribute__((enum_extensibility(open))) EnumOpen {
  C0 = 1, C1 = 10
};

enum EnumClosed ec = 100; // warning issued
enum EnumOpen eo = 100; // no warning

2. Enable code-completion and debugging tools to offer better
suggestions.

3. Make it easier for swift's clang importer to determine which swift
type an enum should be mapped to.

For more details, see the discussion I started on cfe-dev:
http://lists.llvm.org/pipermail/cfe-dev/2017-February/052748.html

rdar://problem/12764379
rdar://problem/23145650

Differential Revision: https://reviews.llvm.org/D30766

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298332 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaDecl.cpp,+,"assert(ED->isClosedFlag() && ""looking for value in non-flag or open enum"");",15361,/data/download/llvm-mirror_clang39_old.cpp,/data/download/llvm-mirror_clang39_new.cpp
2bf5f686e2ea17e971fb6b5a1739282d70dc3536,"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Basic/MemoryBufferCache.cpp,+,"assert(Insertion.second && ""Already has a buffer"");",20,/data/download/llvm-mirror_clang40_old.cpp,/data/download/llvm-mirror_clang40_new.cpp
2bf5f686e2ea17e971fb6b5a1739282d70dc3536,"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Basic/MemoryBufferCache.cpp,+,"assert(I != Buffers.end() && ""No buffer to remove..."");",40,/data/download/llvm-mirror_clang40_old.cpp,/data/download/llvm-mirror_clang40_new.cpp
2bf5f686e2ea17e971fb6b5a1739282d70dc3536,"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,-,"ASTWriterData() : Stream(Buffer), Writer(Stream, Buffer, {}) {}",188,/data/download/llvm-mirror_clang41_old.cpp,/data/download/llvm-mirror_clang41_new.cpp
2bf5f686e2ea17e971fb6b5a1739282d70dc3536,"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,+,ASTWriterData(MemoryBufferCache &PCMCache),189,/data/download/llvm-mirror_clang41_old.cpp,/data/download/llvm-mirror_clang41_new.cpp
2bf5f686e2ea17e971fb6b5a1739282d70dc3536,"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,+,": Stream(Buffer), Writer(Stream, Buffer, PCMCache, {}) {}",190,/data/download/llvm-mirror_clang41_old.cpp,/data/download/llvm-mirror_clang41_new.cpp
2bf5f686e2ea17e971fb6b5a1739282d70dc3536,"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,-,AST->WriterData.reset(new ASTWriterData());,2011,/data/download/llvm-mirror_clang41_old.cpp,/data/download/llvm-mirror_clang41_new.cpp
2bf5f686e2ea17e971fb6b5a1739282d70dc3536,"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,+,AST->WriterData.reset(new ASTWriterData(*AST->PCMCache));,2016,/data/download/llvm-mirror_clang41_old.cpp,/data/download/llvm-mirror_clang41_new.cpp
2bf5f686e2ea17e971fb6b5a1739282d70dc3536,"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,-,"ASTWriter Writer(Stream, Buffer, {});",2526,/data/download/llvm-mirror_clang41_old.cpp,/data/download/llvm-mirror_clang41_new.cpp
2bf5f686e2ea17e971fb6b5a1739282d70dc3536,"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,+,"ASTWriter Writer(Stream, Buffer, PCMCache, {});",2532,/data/download/llvm-mirror_clang41_old.cpp,/data/download/llvm-mirror_clang41_new.cpp
2bf5f686e2ea17e971fb6b5a1739282d70dc3536,"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/CompilerInstance.cpp,+,assert(PCMCache.get() == &Reader->getModuleManager().getPCMCache() &&,138,/data/download/llvm-mirror_clang42_old.cpp,/data/download/llvm-mirror_clang42_new.cpp
2bf5f686e2ea17e971fb6b5a1739282d70dc3536,"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,-,"assert(ModuleMgr.size() >= 1 && ""what ASTFile is this then"");",477,/data/download/llvm-mirror_clang43_old.cpp,/data/download/llvm-mirror_clang43_new.cpp
2bf5f686e2ea17e971fb6b5a1739282d70dc3536,"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"assert(ModuleMgr.size() >= 1 && ""what ASTFile is this then"");",502,/data/download/llvm-mirror_clang43_old.cpp,/data/download/llvm-mirror_clang43_new.cpp
2bf5f686e2ea17e971fb6b5a1739282d70dc3536,"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/GeneratePCH.cpp,-,"Writer(Stream, Buffer->Data, Extensions, IncludeTimestamps),",31,/data/download/llvm-mirror_clang44_old.cpp,/data/download/llvm-mirror_clang44_new.cpp
2bf5f686e2ea17e971fb6b5a1739282d70dc3536,"Reapply ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298185, effectively reapplying r298165, after fixing the
new unit tests (PR32338).  The memory buffer generator doesn't null-terminate
the MemoryBuffer it creates; this version of the commit informs getMemBuffer
about that to avoid the assert.

Original commit message follows:

----

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

- The ModuleManager stores PCMs there that it loads from disk, never
touching the disk if the cache is hot.

- When modules fail to validate, they're removed from the cache.

- When a CompilerInstance is spawned to build a new module, each
already-loaded PCM is assumed to be valid, and is frozen to avoid
the use-after-free.

- Any newly-built module is written directly to the cache to avoid the
round-trip to the filesystem, making lock files unnecessary for
correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298278 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/GeneratePCH.cpp,+,"Writer(Stream, Buffer->Data, PP.getPCMCache(), Extensions,",31,/data/download/llvm-mirror_clang44_old.cpp,/data/download/llvm-mirror_clang44_new.cpp
cf26db83d56c4dcdec646533cbc1d871b92ead23,"Revert ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298165, as it broke the ARM builds.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298185 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Basic/MemoryBufferCache.cpp,-,"assert(Insertion.second && ""Already has a buffer"");",20,/data/download/llvm-mirror_clang45_old.cpp,/data/download/llvm-mirror_clang45_new.cpp
cf26db83d56c4dcdec646533cbc1d871b92ead23,"Revert ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298165, as it broke the ARM builds.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298185 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Basic/MemoryBufferCache.cpp,-,"assert(I != Buffers.end() && ""No buffer to remove..."");",40,/data/download/llvm-mirror_clang45_old.cpp,/data/download/llvm-mirror_clang45_new.cpp
cf26db83d56c4dcdec646533cbc1d871b92ead23,"Revert ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298165, as it broke the ARM builds.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298185 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,-,ASTWriterData(MemoryBufferCache &PCMCache),189,/data/download/llvm-mirror_clang46_old.cpp,/data/download/llvm-mirror_clang46_new.cpp
cf26db83d56c4dcdec646533cbc1d871b92ead23,"Revert ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298165, as it broke the ARM builds.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298185 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,-,": Stream(Buffer), Writer(Stream, Buffer, PCMCache, {}) {}",190,/data/download/llvm-mirror_clang46_old.cpp,/data/download/llvm-mirror_clang46_new.cpp
cf26db83d56c4dcdec646533cbc1d871b92ead23,"Revert ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298165, as it broke the ARM builds.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298185 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,+,"ASTWriterData() : Stream(Buffer), Writer(Stream, Buffer, {}) {}",188,/data/download/llvm-mirror_clang46_old.cpp,/data/download/llvm-mirror_clang46_new.cpp
cf26db83d56c4dcdec646533cbc1d871b92ead23,"Revert ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298165, as it broke the ARM builds.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298185 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,-,AST->WriterData.reset(new ASTWriterData(*AST->PCMCache));,2016,/data/download/llvm-mirror_clang46_old.cpp,/data/download/llvm-mirror_clang46_new.cpp
cf26db83d56c4dcdec646533cbc1d871b92ead23,"Revert ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298165, as it broke the ARM builds.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298185 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,+,AST->WriterData.reset(new ASTWriterData());,2011,/data/download/llvm-mirror_clang46_old.cpp,/data/download/llvm-mirror_clang46_new.cpp
cf26db83d56c4dcdec646533cbc1d871b92ead23,"Revert ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298165, as it broke the ARM builds.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298185 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,-,"ASTWriter Writer(Stream, Buffer, PCMCache, {});",2532,/data/download/llvm-mirror_clang46_old.cpp,/data/download/llvm-mirror_clang46_new.cpp
cf26db83d56c4dcdec646533cbc1d871b92ead23,"Revert ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298165, as it broke the ARM builds.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298185 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,+,"ASTWriter Writer(Stream, Buffer, {});",2526,/data/download/llvm-mirror_clang46_old.cpp,/data/download/llvm-mirror_clang46_new.cpp
cf26db83d56c4dcdec646533cbc1d871b92ead23,"Revert ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298165, as it broke the ARM builds.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298185 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/CompilerInstance.cpp,-,assert(PCMCache.get() == &Reader->getModuleManager().getPCMCache() &&,138,/data/download/llvm-mirror_clang47_old.cpp,/data/download/llvm-mirror_clang47_new.cpp
cf26db83d56c4dcdec646533cbc1d871b92ead23,"Revert ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298165, as it broke the ARM builds.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298185 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"assert(ModuleMgr.size() >= 1 && ""what ASTFile is this then"");",477,/data/download/llvm-mirror_clang48_old.cpp,/data/download/llvm-mirror_clang48_new.cpp
cf26db83d56c4dcdec646533cbc1d871b92ead23,"Revert ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298165, as it broke the ARM builds.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298185 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,-,"assert(ModuleMgr.size() >= 1 && ""what ASTFile is this then"");",502,/data/download/llvm-mirror_clang48_old.cpp,/data/download/llvm-mirror_clang48_new.cpp
cf26db83d56c4dcdec646533cbc1d871b92ead23,"Revert ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298165, as it broke the ARM builds.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298185 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/GeneratePCH.cpp,-,"Writer(Stream, Buffer->Data, PP.getPCMCache(), Extensions,",31,/data/download/llvm-mirror_clang49_old.cpp,/data/download/llvm-mirror_clang49_new.cpp
cf26db83d56c4dcdec646533cbc1d871b92ead23,"Revert ""Modules: Cache PCMs in memory and avoid a use-after-free""

This reverts commit r298165, as it broke the ARM builds.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298185 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/GeneratePCH.cpp,+,"Writer(Stream, Buffer->Data, Extensions, IncludeTimestamps),",31,/data/download/llvm-mirror_clang49_old.cpp,/data/download/llvm-mirror_clang49_new.cpp
4c3cdee2a5047d05201424bf9f80b6664619550d,"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Basic/MemoryBufferCache.cpp,+,"assert(Insertion.second && ""Already has a buffer"");",20,/data/download/llvm-mirror_clang50_old.cpp,/data/download/llvm-mirror_clang50_new.cpp
4c3cdee2a5047d05201424bf9f80b6664619550d,"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Basic/MemoryBufferCache.cpp,+,"assert(I != Buffers.end() && ""No buffer to remove..."");",40,/data/download/llvm-mirror_clang50_old.cpp,/data/download/llvm-mirror_clang50_new.cpp
4c3cdee2a5047d05201424bf9f80b6664619550d,"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,-,"ASTWriterData() : Stream(Buffer), Writer(Stream, Buffer, {}) {}",188,/data/download/llvm-mirror_clang51_old.cpp,/data/download/llvm-mirror_clang51_new.cpp
4c3cdee2a5047d05201424bf9f80b6664619550d,"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,+,ASTWriterData(MemoryBufferCache &PCMCache),189,/data/download/llvm-mirror_clang51_old.cpp,/data/download/llvm-mirror_clang51_new.cpp
4c3cdee2a5047d05201424bf9f80b6664619550d,"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,+,": Stream(Buffer), Writer(Stream, Buffer, PCMCache, {}) {}",190,/data/download/llvm-mirror_clang51_old.cpp,/data/download/llvm-mirror_clang51_new.cpp
4c3cdee2a5047d05201424bf9f80b6664619550d,"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,-,AST->WriterData.reset(new ASTWriterData());,2011,/data/download/llvm-mirror_clang51_old.cpp,/data/download/llvm-mirror_clang51_new.cpp
4c3cdee2a5047d05201424bf9f80b6664619550d,"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,+,AST->WriterData.reset(new ASTWriterData(*AST->PCMCache));,2016,/data/download/llvm-mirror_clang51_old.cpp,/data/download/llvm-mirror_clang51_new.cpp
4c3cdee2a5047d05201424bf9f80b6664619550d,"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,-,"ASTWriter Writer(Stream, Buffer, {});",2526,/data/download/llvm-mirror_clang51_old.cpp,/data/download/llvm-mirror_clang51_new.cpp
4c3cdee2a5047d05201424bf9f80b6664619550d,"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,+,"ASTWriter Writer(Stream, Buffer, PCMCache, {});",2532,/data/download/llvm-mirror_clang51_old.cpp,/data/download/llvm-mirror_clang51_new.cpp
4c3cdee2a5047d05201424bf9f80b6664619550d,"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/CompilerInstance.cpp,+,assert(PCMCache.get() == &Reader->getModuleManager().getPCMCache() &&,138,/data/download/llvm-mirror_clang52_old.cpp,/data/download/llvm-mirror_clang52_new.cpp
4c3cdee2a5047d05201424bf9f80b6664619550d,"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,-,"assert(ModuleMgr.size() >= 1 && ""what ASTFile is this then"");",477,/data/download/llvm-mirror_clang53_old.cpp,/data/download/llvm-mirror_clang53_new.cpp
4c3cdee2a5047d05201424bf9f80b6664619550d,"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"assert(ModuleMgr.size() >= 1 && ""what ASTFile is this then"");",502,/data/download/llvm-mirror_clang53_old.cpp,/data/download/llvm-mirror_clang53_new.cpp
4c3cdee2a5047d05201424bf9f80b6664619550d,"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/GeneratePCH.cpp,-,"Writer(Stream, Buffer->Data, Extensions, IncludeTimestamps),",31,/data/download/llvm-mirror_clang54_old.cpp,/data/download/llvm-mirror_clang54_new.cpp
4c3cdee2a5047d05201424bf9f80b6664619550d,"Modules: Cache PCMs in memory and avoid a use-after-free

Clang's internal build system for implicit modules uses lock files to
ensure that after a process writes a PCM it will read the same one back
in (without contention from other -cc1 commands).  Since PCMs are read
from disk repeatedly while invalidating, building, and importing, the
lock is not released quickly.  Furthermore, the LockFileManager is not
robust in every environment.  Other -cc1 commands can stall until
timeout (after about eight minutes).

This commit changes the lock file from being necessary for correctness
to a (possibly dubious) performance hack.  The remaining benefit is to
reduce duplicate work in competing -cc1 commands which depend on the
same module.  Follow-up commits will change the internal build system to
continue after a timeout, and reduce the timeout.  Perhaps we should
reconsider blocking at all.

This also fixes a use-after-free, when one part of a compilation
validates a PCM and starts using it, and another tries to swap out the
PCM for something new.

The PCMCache is a new type called MemoryBufferCache, which saves memory
buffers based on their filename.  Its ownership is shared by the
CompilerInstance and ModuleManager.

  - The ModuleManager stores PCMs there that it loads from disk, never
    touching the disk if the cache is hot.

  - When modules fail to validate, they're removed from the cache.

  - When a CompilerInstance is spawned to build a new module, each
    already-loaded PCM is assumed to be valid, and is frozen to avoid
    the use-after-free.

  - Any newly-built module is written directly to the cache to avoid the
    round-trip to the filesystem, making lock files unnecessary for
    correctness.

Original patch by Manman Ren; most testcases by Adrian Prantl!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298165 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/GeneratePCH.cpp,+,"Writer(Stream, Buffer->Data, PP.getPCMCache(), Extensions,",31,/data/download/llvm-mirror_clang54_old.cpp,/data/download/llvm-mirror_clang54_new.cpp
31801a78220872a1dcee9b261328ce7239eaa7e9,"[clang-cl] Fix cross-compilation with MSVC 2017.

clang-cl works best when the user runs vcvarsall to set up
an environment before running, but even this is not enough
on VC 2017 when cross compiling (e.g. using an x64 toolchain
to target x86, or vice versa).

The reason is that although clang-cl itself will have a
valid environment, it will shell out to other tools (such
as link.exe) which may not.  Generally we solve this through
adding the appropriate linker flags, but this is not enough
in VC 2017.

The cross-linker and the regular linker both link against
some common DLLs, but these DLLs live in the binary directory
of the native linker.  When setting up a cross-compilation
environment through vcvarsall, it will add *both* directories
to %PATH%, so that when cl shells out to any of the associated
tools, those tools will be able to find all of the dependencies
that it links against.  If you don't do this, link.exe will
fail to run because the loader won't be able to find all of
the required DLLs that it links against.

To solve this we teach the driver how to spawn a process with
an explicitly specified environment.  Then we modify the
PATH before shelling out to subtools and run with the modified
PATH.

Patch by Hamza Sood
Differential Revision: https://reviews.llvm.org/D30991

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@298098 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/Job.cpp,+,assert(Environment.back() == nullptr &&,318,/data/download/llvm-mirror_clang55_old.cpp,/data/download/llvm-mirror_clang55_new.cpp
9a4d019389c762a32274ed1ca1ead93f79acbcd2,"Update clang-cl driver for MSVC 2017.

2017 changes the way you find an installed copy of
Visual Studio as well as its internal directory layout.
As a result, clang-cl was unable to find VS2017 even
when you had run vcvarsall to set up a toolchain
environment.  This patch updates everything for 2017
and cleans up the way we handle a tiered search a la
environment -> installation -> PATH for which copy
of Visual Studio to bind to.

Patch originally by Hamza Sood, with some fixups for landing.

Differential Revision: https://reviews.llvm.org/D30758

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297851 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/MSVC.cpp,+,SuppressCOMErrorsRAII() { _set_com_error_handler(handler); },190,/data/download/llvm-mirror_clang56_old.cpp,/data/download/llvm-mirror_clang56_new.cpp
9a4d019389c762a32274ed1ca1ead93f79acbcd2,"Update clang-cl driver for MSVC 2017.

2017 changes the way you find an installed copy of
Visual Studio as well as its internal directory layout.
As a result, clang-cl was unable to find VS2017 even
when you had run vcvarsall to set up a toolchain
environment.  This patch updates everything for 2017
and cleans up the way we handle a tiered search a la
environment -> installation -> PATH for which copy
of Visual Studio to bind to.

Patch originally by Hamza Sood, with some fixups for landing.

Differential Revision: https://reviews.llvm.org/D30758

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297851 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/MSVC.cpp,+,~SuppressCOMErrorsRAII() { _set_com_error_handler(_com_raise_error); },192,/data/download/llvm-mirror_clang56_old.cpp,/data/download/llvm-mirror_clang56_new.cpp
c0c27f36da4a6ce9775910c8cb36f4e5688134d5,"Modules: Optimize bitcode encoding of diagnostic state

Since bitcode uses VBR encoding, large numbers are more expensive than
small ones.  Instead of emitting a UINT_MAX sentinel after each sequence
of state-change pairs, emit the size of the sequence as a prefix.

This should have no functionality change besides saving bits from the
encoding.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297770 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,assert(Idx + Size * 2 <= Record.size() &&,5467,/data/download/llvm-mirror_clang57_old.cpp,/data/download/llvm-mirror_clang57_new.cpp
c0c27f36da4a6ce9775910c8cb36f4e5688134d5,"Modules: Optimize bitcode encoding of diagnostic state

Since bitcode uses VBR encoding, large numbers are more expensive than
small ones.  Instead of emitting a UINT_MAX sentinel after each sequence
of state-change pairs, emit the size of the sequence as a prefix.

This should have no functionality change besides saving bits from the
encoding.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297770 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,-,assert(Idx != Record.size() && Record[Idx] == unsigned(-1) &&,5473,/data/download/llvm-mirror_clang57_old.cpp,/data/download/llvm-mirror_clang57_new.cpp
60b8b6975b5e3060a2a68efadb41c68440910646,"[ubsan] Add a nullability sanitizer

Teach UBSan to detect when a value with the _Nonnull type annotation
assumes a null value. Call expressions, initializers, assignments, and
return statements are all checked.

Because _Nonnull does not affect IRGen, the new checks are disabled by
default. The new driver flags are:

  -fsanitize=nullability-arg      (_Nonnull violation in call)
  -fsanitize=nullability-assign   (_Nonnull violation in assignment)
  -fsanitize=nullability-return   (_Nonnull violation in return stmt)
  -fsanitize=nullability          (all of the above)

This patch builds on top of UBSan's existing support for detecting
violations of the nonnull attributes ('nonnull' and 'returns_nonnull'),
and relies on the compiler-rt support for those checks. Eventually we
will need to update the diagnostic messages in compiler-rt (there are
FIXME's for this, which will be addressed in a follow-up).

One point of note is that the nullability-return check is only allowed
to kick in if all arguments to the function satisfy their nullability
preconditions. This makes it necessary to emit some null checks in the
function body itself.

Testing: check-clang and check-ubsan. I also built some Apple ObjC
frameworks with an asserts-enabled compiler, and verified that we get
valid reports.

Differential Revision: https://reviews.llvm.org/D30762

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297700 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/CGCall.cpp,+,assert(!requiresReturnValueNullabilityCheck() &&,2942,/data/download/llvm-mirror_clang58_old.cpp,/data/download/llvm-mirror_clang58_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,-,"ASTWriterData() : Stream(Buffer), Writer(Stream, { }) { }",188,/data/download/llvm-mirror_clang59_old.cpp,/data/download/llvm-mirror_clang59_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,+,"ASTWriterData() : Stream(Buffer), Writer(Stream, Buffer, {}) {}",188,/data/download/llvm-mirror_clang59_old.cpp,/data/download/llvm-mirror_clang59_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,-,"ASTWriter Writer(Stream, { });",2526,/data/download/llvm-mirror_clang59_old.cpp,/data/download/llvm-mirror_clang59_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTUnit.cpp,+,"ASTWriter Writer(Stream, Buffer, {});",2526,/data/download/llvm-mirror_clang59_old.cpp,/data/download/llvm-mirror_clang59_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,-,"assert((!F.Signature || F.Signature == Record[0]) && ""signature changed"");",2421,/data/download/llvm-mirror_clang60_old.cpp,/data/download/llvm-mirror_clang60_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"Error(""malformed block record in AST file"");",4039,/data/download/llvm-mirror_clang60_old.cpp,/data/download/llvm-mirror_clang60_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"Error(""malformed block record in AST file"");",4072,/data/download/llvm-mirror_clang60_old.cpp,/data/download/llvm-mirror_clang60_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,+,"ASTFileSignature ASTWriter::writeUnhashedControlBlock(Preprocessor &PP,",1344,/data/download/llvm-mirror_clang61_old.cpp,/data/download/llvm-mirror_clang61_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,+,"WritePragmaDiagnosticMappings(Diags, /* IsModule = */ WritingModule);",1382,/data/download/llvm-mirror_clang61_old.cpp,/data/download/llvm-mirror_clang61_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,-,"uint64_t ASTWriter::WriteControlBlock(Preprocessor &PP,",1332,/data/download/llvm-mirror_clang61_old.cpp,/data/download/llvm-mirror_clang61_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,+,"void ASTWriter::WriteControlBlock(Preprocessor &PP, ASTContext &Context,",1390,/data/download/llvm-mirror_clang61_old.cpp,/data/download/llvm-mirror_clang61_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,-,"uint64_t ASTWriter::WriteAST(Sema &SemaRef, const std::string &OutputFile,",4292,/data/download/llvm-mirror_clang61_old.cpp,/data/download/llvm-mirror_clang61_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,+,"ASTFileSignature ASTWriter::WriteAST(Sema &SemaRef,",4326,/data/download/llvm-mirror_clang61_old.cpp,/data/download/llvm-mirror_clang61_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,-,"uint64_t ASTWriter::WriteASTCore(Sema &SemaRef, StringRef isysroot,",4330,/data/download/llvm-mirror_clang61_old.cpp,/data/download/llvm-mirror_clang61_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,+,"ASTFileSignature ASTWriter::WriteASTCore(Sema &SemaRef, StringRef isysroot,",4365,/data/download/llvm-mirror_clang61_old.cpp,/data/download/llvm-mirror_clang61_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,-,"uint64_t Signature = WriteControlBlock(PP, Context, isysroot, OutputFile);",4480,/data/download/llvm-mirror_clang61_old.cpp,/data/download/llvm-mirror_clang61_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,+,"WriteControlBlock(PP, Context, isysroot, OutputFile);",4515,/data/download/llvm-mirror_clang61_old.cpp,/data/download/llvm-mirror_clang61_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,-,"WritePragmaDiagnosticMappings(Context.getDiagnostics(), isModule);",4697,/data/download/llvm-mirror_clang61_old.cpp,/data/download/llvm-mirror_clang61_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTWriter.cpp,+,"return writeUnhashedControlBlock(PP, Context);",4860,/data/download/llvm-mirror_clang61_old.cpp,/data/download/llvm-mirror_clang61_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/GeneratePCH.cpp,-,"Writer(Stream, Extensions, IncludeTimestamps),",31,/data/download/llvm-mirror_clang62_old.cpp,/data/download/llvm-mirror_clang62_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/GeneratePCH.cpp,+,"Writer(Stream, Buffer->Data, Extensions, IncludeTimestamps),",31,/data/download/llvm-mirror_clang62_old.cpp,/data/download/llvm-mirror_clang62_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/GlobalModuleIndex.cpp,-,void writeIndex(llvm::BitstreamWriter &Stream);,427,/data/download/llvm-mirror_clang63_old.cpp,/data/download/llvm-mirror_clang63_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/GlobalModuleIndex.cpp,+,bool writeIndex(llvm::BitstreamWriter &Stream);,445,/data/download/llvm-mirror_clang63_old.cpp,/data/download/llvm-mirror_clang63_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/GlobalModuleIndex.cpp,-,void GlobalModuleIndexBuilder::writeIndex(llvm::BitstreamWriter &Stream) {,683,/data/download/llvm-mirror_clang63_old.cpp,/data/download/llvm-mirror_clang63_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/GlobalModuleIndex.cpp,+,bool GlobalModuleIndexBuilder::writeIndex(llvm::BitstreamWriter &Stream) {,724,/data/download/llvm-mirror_clang63_old.cpp,/data/download/llvm-mirror_clang63_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/GlobalModuleIndex.cpp,-,Builder.writeIndex(OutputStream);,819,/data/download/llvm-mirror_clang63_old.cpp,/data/download/llvm-mirror_clang63_new.cpp
d15b1db69ad01b6fe6a145e1f31d3ea5c469de96,"Modules: Use hash of PCM content for SIGNATURE

Change ASTFileSignature from a random 32-bit number to the hash of the
PCM content.

  - Move definition ASTFileSignature to Basic/Module.h so Module and
    ASTSourceDescriptor can use it.

  - Change the signature from uint64_t to std::array<uint32_t,5>.

  - Stop using (saving/reading) the size and modification time of PCM
    files when there is a valid SIGNATURE.

  - Add UNHASHED_CONTROL_BLOCK, and use it to store the SIGNATURE record
    and other records that shouldn't affect the hash.  Because implicit
    modules reuses the same file for multiple levels of -Werror, this
    includes DIAGNOSTIC_OPTIONS and DIAG_PRAGMA_MAPPINGS.

This helps to solve a PCH + implicit Modules dependency issue: PCH files
are handled by the external build system, whereas implicit modules are
handled by internal compiler build system.  This prevents invalidating a
PCH when the compiler overwrites a PCM file with the same content
(modulo the diagnostic differences).

Design and original patch by Manman Ren!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297655 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/GlobalModuleIndex.cpp,+,if (Builder.writeIndex(OutputStream)),874,/data/download/llvm-mirror_clang63_old.cpp,/data/download/llvm-mirror_clang63_new.cpp
43671d3c8322d05e28baaeccef3a3477ec1c8897,"[coroutines] Fix diagnostics depending on the first coroutine statement.

Summary:
Some coroutine diagnostics need to point to the location of the first coroutine keyword in the function, like when diagnosing a `return` inside a coroutine. Previously we did this by storing each *valid* coroutine statement in a list and select the first one to use in diagnostics. However if every coroutine statement is invalid we would have no location to point to.

This patch fixes the storage of the first coroutine statement location, ensuring that it gets stored even when the resulting AST node would be invalid. 
This patch also removes the `CoroutineStmts` list in `FunctionScopeInfo` because it was unused.

Reviewers: rsmith, GorNishanov, aaron.ballman

Reviewed By: GorNishanov

Subscribers: mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D30776

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297547 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,assert(Fn->FirstCoroutineStmtLoc.isValid() &&,774,/data/download/llvm-mirror_clang64_old.cpp,/data/download/llvm-mirror_clang64_new.cpp
a024a336fe8a86be1630ec37a10dfaaf3b04a32e,"Print nested name specifiers for typedefs and type aliases

Printing typedefs or type aliases using clang_getTypeSpelling() is missing the
namespace they are defined in. This is in contrast to other types that always
yield the full typename including namespaces.

Patch by Michael Reiher!

Differential Revision: https://reviews.llvm.org/D29944


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297465 91177308-0d34-0410-b5e6-96231b3b80d8",lib/AST/TypePrinter.cpp,-,"void printTypeSpec(const NamedDecl *D, raw_ostream &OS);",99,/data/download/llvm-mirror_clang65_old.cpp,/data/download/llvm-mirror_clang65_new.cpp
a024a336fe8a86be1630ec37a10dfaaf3b04a32e,"Print nested name specifiers for typedefs and type aliases

Printing typedefs or type aliases using clang_getTypeSpelling() is missing the
namespace they are defined in. This is in contrast to other types that always
yield the full typename including namespaces.

Patch by Michael Reiher!

Differential Revision: https://reviews.llvm.org/D29944


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297465 91177308-0d34-0410-b5e6-96231b3b80d8",lib/AST/TypePrinter.cpp,+,"void printTypeSpec(NamedDecl *D, raw_ostream &OS);",99,/data/download/llvm-mirror_clang65_old.cpp,/data/download/llvm-mirror_clang65_new.cpp
a024a336fe8a86be1630ec37a10dfaaf3b04a32e,"Print nested name specifiers for typedefs and type aliases

Printing typedefs or type aliases using clang_getTypeSpelling() is missing the
namespace they are defined in. This is in contrast to other types that always
yield the full typename including namespaces.

Patch by Michael Reiher!

Differential Revision: https://reviews.llvm.org/D29944


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297465 91177308-0d34-0410-b5e6-96231b3b80d8",lib/AST/TypePrinter.cpp,-,"void TypePrinter::printTypeSpec(const NamedDecl *D, raw_ostream &OS) {",801,/data/download/llvm-mirror_clang65_old.cpp,/data/download/llvm-mirror_clang65_new.cpp
a024a336fe8a86be1630ec37a10dfaaf3b04a32e,"Print nested name specifiers for typedefs and type aliases

Printing typedefs or type aliases using clang_getTypeSpelling() is missing the
namespace they are defined in. This is in contrast to other types that always
yield the full typename including namespaces.

Patch by Michael Reiher!

Differential Revision: https://reviews.llvm.org/D29944


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297465 91177308-0d34-0410-b5e6-96231b3b80d8",lib/AST/TypePrinter.cpp,+,"void TypePrinter::printTypeSpec(NamedDecl *D, raw_ostream &OS) {",801,/data/download/llvm-mirror_clang65_old.cpp,/data/download/llvm-mirror_clang65_new.cpp
09a7b298c42fdba0f5b2a0832ceb24d17744d539,"Add -cc1 flag -ast-dump-all to perform an AST dump including entities that haven't yet been deserialized.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297412 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTConsumers.cpp,-,"ASTPrinter(std::unique_ptr<raw_ostream> Out = nullptr, bool Dump = false,",37,/data/download/llvm-mirror_clang66_old.cpp,/data/download/llvm-mirror_clang66_new.cpp
09a7b298c42fdba0f5b2a0832ceb24d17744d539,"Add -cc1 flag -ast-dump-all to perform an AST dump including entities that haven't yet been deserialized.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297412 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Frontend/ASTConsumers.cpp,+,"ASTPrinter(std::unique_ptr<raw_ostream> Out, Kind K, StringRef FilterString,",38,/data/download/llvm-mirror_clang66_old.cpp,/data/download/llvm-mirror_clang66_new.cpp
48672a5fa2f8a4fe6e4273e6e496e5fa17182c9e,"[coroutines] Build and pass coroutine_handle to await_suspend

Summary:
This patch adds passing a coroutine_handle object to await_suspend calls.
It builds the coroutine_handle using coroutine_handle<PromiseType>::from_address(__builtin_coro_frame()).

(a revision of https://reviews.llvm.org/D26316 that for some reason refuses to apply via arc patch)

Reviewers: GorNishanov

Subscribers: mehdi_amini, cfe-commits, EricWF

Differential Revision: https://reviews.llvm.org/D30769

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297356 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"assert(StdExp && ""Should already be diagnosed"");",129,/data/download/llvm-mirror_clang67_old.cpp,/data/download/llvm-mirror_clang67_new.cpp
48672a5fa2f8a4fe6e4273e6e496e5fa17182c9e,"[coroutines] Build and pass coroutine_handle to await_suspend

Summary:
This patch adds passing a coroutine_handle object to await_suspend calls.
It builds the coroutine_handle using coroutine_handle<PromiseType>::from_address(__builtin_coro_frame()).

(a revision of https://reviews.llvm.org/D26316 that for some reason refuses to apply via arc patch)

Reviewers: GorNishanov

Subscribers: mehdi_amini, cfe-commits, EricWF

Differential Revision: https://reviews.llvm.org/D30769

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297356 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,return ExprError();,291,/data/download/llvm-mirror_clang67_old.cpp,/data/download/llvm-mirror_clang67_new.cpp
48672a5fa2f8a4fe6e4273e6e496e5fa17182c9e,"[coroutines] Build and pass coroutine_handle to await_suspend

Summary:
This patch adds passing a coroutine_handle object to await_suspend calls.
It builds the coroutine_handle using coroutine_handle<PromiseType>::from_address(__builtin_coro_frame()).

(a revision of https://reviews.llvm.org/D26316 that for some reason refuses to apply via arc patch)

Reviewers: GorNishanov

Subscribers: mehdi_amini, cfe-commits, EricWF

Differential Revision: https://reviews.llvm.org/D30769

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297356 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,return ExprError();,299,/data/download/llvm-mirror_clang67_old.cpp,/data/download/llvm-mirror_clang67_new.cpp
48672a5fa2f8a4fe6e4273e6e496e5fa17182c9e,"[coroutines] Build and pass coroutine_handle to await_suspend

Summary:
This patch adds passing a coroutine_handle object to await_suspend calls.
It builds the coroutine_handle using coroutine_handle<PromiseType>::from_address(__builtin_coro_frame()).

(a revision of https://reviews.llvm.org/D26316 that for some reason refuses to apply via arc patch)

Reviewers: GorNishanov

Subscribers: mehdi_amini, cfe-commits, EricWF

Differential Revision: https://reviews.llvm.org/D30769

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297356 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,return ExprError();,309,/data/download/llvm-mirror_clang67_old.cpp,/data/download/llvm-mirror_clang67_new.cpp
48672a5fa2f8a4fe6e4273e6e496e5fa17182c9e,"[coroutines] Build and pass coroutine_handle to await_suspend

Summary:
This patch adds passing a coroutine_handle object to await_suspend calls.
It builds the coroutine_handle using coroutine_handle<PromiseType>::from_address(__builtin_coro_frame()).

(a revision of https://reviews.llvm.org/D26316 that for some reason refuses to apply via arc patch)

Reviewers: GorNishanov

Subscribers: mehdi_amini, cfe-commits, EricWF

Differential Revision: https://reviews.llvm.org/D30769

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297356 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,assert(FD->isInvalidDecl() &&,761,/data/download/llvm-mirror_clang67_old.cpp,/data/download/llvm-mirror_clang67_new.cpp
2aad00a423bc2a481e11eb2c679b68b8bc1a2133,"Defensively ensure that GetExternalDeclStmt protects itself from nested deserialization

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297322 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,assert(NumCurrentElementsDeserializing == 0 &&,6814,/data/download/llvm-mirror_clang68_old.cpp,/data/download/llvm-mirror_clang68_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/MinGWToolChain.cpp,-,void MinGW::printVerboseInfo(raw_ostream &OS) const {,141,/data/download/llvm-mirror_clang69_old.cpp,/data/download/llvm-mirror_clang69_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/MinGWToolChain.cpp,-,CudaInstallation.print(OS);,142,/data/download/llvm-mirror_clang69_old.cpp,/data/download/llvm-mirror_clang69_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Bitrig.cpp,+,"assert(Output.isNothing() && ""Invalid output."");",74,/data/download/llvm-mirror_clang70_old.cpp,/data/download/llvm-mirror_clang70_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/CloudABI.cpp,+,"assert(Output.isNothing() && ""Invalid output."");",64,/data/download/llvm-mirror_clang71_old.cpp,/data/download/llvm-mirror_clang71_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/CommonArgs.cpp,+,"assert(Name.startswith(""m"") && ""Invalid feature name."");",73,/data/download/llvm-mirror_clang72_old.cpp,/data/download/llvm-mirror_clang72_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/CommonArgs.cpp,+,"const char *tools::SplitDebugName(const ArgList &Args, const InputInfo &Input) {",615,/data/download/llvm-mirror_clang72_old.cpp,/data/download/llvm-mirror_clang72_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/CommonArgs.cpp,+,"void tools::SplitDebugInfo(const ToolChain &TC, Compilation &C, const Tool &T,",632,/data/download/llvm-mirror_clang72_old.cpp,/data/download/llvm-mirror_clang72_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Cuda.cpp,+,void CudaInstallationDetector::print(raw_ostream &OS) const {,200,/data/download/llvm-mirror_clang73_old.cpp,/data/download/llvm-mirror_clang73_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Cuda.cpp,+,"assert(TC.getTriple().isNVPTX() && ""Wrong platform"");",213,/data/download/llvm-mirror_clang73_old.cpp,/data/download/llvm-mirror_clang73_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Cuda.cpp,+,assert(gpu_arch != CudaArch::UNKNOWN &&,217,/data/download/llvm-mirror_clang73_old.cpp,/data/download/llvm-mirror_clang73_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Cuda.cpp,+,"assert(TC.getTriple().isNVPTX() && ""Wrong platform"");",293,/data/download/llvm-mirror_clang73_old.cpp,/data/download/llvm-mirror_clang73_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Cuda.cpp,+,assert(A->getInputs().size() == 1 &&,303,/data/download/llvm-mirror_clang73_old.cpp,/data/download/llvm-mirror_clang73_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Cuda.cpp,+,assert(gpu_arch_str &&,306,/data/download/llvm-mirror_clang73_old.cpp,/data/download/llvm-mirror_clang73_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Cuda.cpp,+,"assert(!GpuArch.empty() && ""Must have an explicit GPU arch."");",358,/data/download/llvm-mirror_clang73_old.cpp,/data/download/llvm-mirror_clang73_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Cuda.cpp,+,"assert(!Arch.empty() && ""Must have an explicit GPU arch."");",382,/data/download/llvm-mirror_clang73_old.cpp,/data/download/llvm-mirror_clang73_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"assert(Inputs.size() == 1 && ""Unexpected number of inputs."");",90,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"assert(!SourceAction->getInputs().empty() && ""unexpected root action!"");",96,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"assert(Output.isFilename() && ""Unexpected lipo output."");",138,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"assert(Input.isFilename() && ""Invalid input."");",142,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"assert(Output.getType() == types::TY_Image && ""Invalid linker output type."");",425,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"assert(Output.isFilename() && ""Unexpected lipo output."");",600,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"assert(II.isFilename() && ""Unexpected lipo input."");",606,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"assert(Inputs.size() == 1 && ""Unable to handle multiple inputs."");",624,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"assert(Input.isFilename() && ""Unexpected dsymutil input."");",626,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"assert(Inputs.size() == 1 && ""Unable to handle multiple inputs."");",645,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"assert(Input.isFilename() && ""Unexpected verify input"");",647,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"assert(isTargetMacOS() && ""unexpected darwin target"");",710,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,VerifyDebug.reset(new tools::darwin::VerifyDebug(*this));,822,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"assert(DarwinLibName.endswith("".dylib"") && ""must be a dynamic library"");",919,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"assert(isTargetMacOS() && ""unexpected non MacOS platform"");",1074,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,assert((!iOSVersion && !TvOSVersion && !WatchOSVersion) &&,1285,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"assert(iOSVersion && ""Unknown target platform!"");",1293,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"assert(it != ie && ""unexpected argument translation"");",1670,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,assert(A->getOption().getID() == options::OPT_static &&,1672,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,bool MachO::UseDwarfDebugFlags() const {,1713,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"assert(TargetInitialized && ""Target not initialized!"");",1731,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,"assert(isTargetMacOS() && ""unexpected target"");",1768,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,void Darwin::printVerboseInfo(raw_ostream &OS) const {,1894,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Darwin.cpp,+,CudaInstallation.print(OS);,1895,/data/download/llvm-mirror_clang74_old.cpp,/data/download/llvm-mirror_clang74_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/DragonFly.cpp,+,"assert(Output.isNothing() && ""Invalid output."");",90,/data/download/llvm-mirror_clang75_old.cpp,/data/download/llvm-mirror_clang75_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/FreeBSD.cpp,+,"assert(Output.isNothing() && ""Invalid output."");",196,/data/download/llvm-mirror_clang76_old.cpp,/data/download/llvm-mirror_clang76_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Gnu.cpp,+,"assert(Output.isNothing() && ""Unexpected output"");",109,/data/download/llvm-mirror_clang77_old.cpp,/data/download/llvm-mirror_clang77_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Gnu.cpp,+,assert(OpenMPToolChains.first != OpenMPToolChains.second &&,245,/data/download/llvm-mirror_clang77_old.cpp,/data/download/llvm-mirror_clang77_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Gnu.cpp,+,assert(DTC != OpenMPToolChains.second &&,267,/data/download/llvm-mirror_clang77_old.cpp,/data/download/llvm-mirror_clang77_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Gnu.cpp,+,assert(DTC == OpenMPToolChains.second &&,276,/data/download/llvm-mirror_clang77_old.cpp,/data/download/llvm-mirror_clang77_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Gnu.cpp,+,"SplitDebugInfo(getToolChain(), C, *this, JA, Args, Output,",886,/data/download/llvm-mirror_clang77_old.cpp,/data/download/llvm-mirror_clang77_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Gnu.cpp,+,"SplitDebugName(Args, Inputs[0]));",887,/data/download/llvm-mirror_clang77_old.cpp,/data/download/llvm-mirror_clang77_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Gnu.cpp,+,void Generic_GCC::GCCInstallationDetector::print(raw_ostream &OS) const {,1727,/data/download/llvm-mirror_clang77_old.cpp,/data/download/llvm-mirror_clang77_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Gnu.cpp,+,void Generic_GCC::printVerboseInfo(raw_ostream &OS) const {,2241,/data/download/llvm-mirror_clang77_old.cpp,/data/download/llvm-mirror_clang77_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Gnu.cpp,+,GCCInstallation.print(OS);,2243,/data/download/llvm-mirror_clang77_old.cpp,/data/download/llvm-mirror_clang77_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Gnu.cpp,+,CudaInstallation.print(OS);,2244,/data/download/llvm-mirror_clang77_old.cpp,/data/download/llvm-mirror_clang77_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Hexagon.cpp,+,"assert(Output.isNothing() && ""Unexpected output"");",61,/data/download/llvm-mirror_clang78_old.cpp,/data/download/llvm-mirror_clang78_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/MSVC.cpp,+,"assert((Output.isFilename() || Output.isNothing()) && ""invalid output"");",81,/data/download/llvm-mirror_clang79_old.cpp,/data/download/llvm-mirror_clang79_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/MSVC.cpp,+,assert(Inputs.size() == 1);,369,/data/download/llvm-mirror_clang79_old.cpp,/data/download/llvm-mirror_clang79_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/MSVC.cpp,+,assert(II.getType() == types::TY_C || II.getType() == types::TY_CXX);,371,/data/download/llvm-mirror_clang79_old.cpp,/data/download/llvm-mirror_clang79_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/MSVC.cpp,+,assert(Output.getType() == types::TY_Object);,379,/data/download/llvm-mirror_clang79_old.cpp,/data/download/llvm-mirror_clang79_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/MinGW.cpp,+,"SplitDebugInfo(getToolChain(), C, *this, JA, Args, Output,",54,/data/download/llvm-mirror_clang80_old.cpp,/data/download/llvm-mirror_clang80_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/MinGW.cpp,+,"SplitDebugName(Args, Inputs[0]));",55,/data/download/llvm-mirror_clang80_old.cpp,/data/download/llvm-mirror_clang80_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/MinGW.cpp,+,void toolchains::MinGW::printVerboseInfo(raw_ostream &OS) const {,371,/data/download/llvm-mirror_clang80_old.cpp,/data/download/llvm-mirror_clang80_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/MinGW.cpp,+,CudaInstallation.print(OS);,372,/data/download/llvm-mirror_clang80_old.cpp,/data/download/llvm-mirror_clang80_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Minix.cpp,+,"assert(Output.isNothing() && ""Invalid output."");",55,/data/download/llvm-mirror_clang81_old.cpp,/data/download/llvm-mirror_clang81_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Mips.cpp,+,assert((GetCXXStdlibType(Args) == ToolChain::CST_Libcxx) &&,111,/data/download/llvm-mirror_clang82_old.cpp,/data/download/llvm-mirror_clang82_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Myriad.cpp,+,assert(Inputs.size() == 1);,31,/data/download/llvm-mirror_clang83_old.cpp,/data/download/llvm-mirror_clang83_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Myriad.cpp,+,assert(II.getType() == types::TY_C || II.getType() == types::TY_CXX ||,33,/data/download/llvm-mirror_clang83_old.cpp,/data/download/llvm-mirror_clang83_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Myriad.cpp,+,assert(Output.getType() == types::TY_PP_Asm); // Require preprocessed asm.,40,/data/download/llvm-mirror_clang83_old.cpp,/data/download/llvm-mirror_clang83_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Myriad.cpp,+,assert(Inputs.size() == 1);,90,/data/download/llvm-mirror_clang83_old.cpp,/data/download/llvm-mirror_clang83_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Myriad.cpp,+,assert(II.getType() == types::TY_PP_Asm); // Require preprocessed asm input.,92,/data/download/llvm-mirror_clang83_old.cpp,/data/download/llvm-mirror_clang83_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Myriad.cpp,+,assert(Output.getType() == types::TY_Object);,93,/data/download/llvm-mirror_clang83_old.cpp,/data/download/llvm-mirror_clang83_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/NetBSD.cpp,+,"assert(Output.isNothing() && ""Invalid output."");",222,/data/download/llvm-mirror_clang84_old.cpp,/data/download/llvm-mirror_clang84_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/OpenBSD.cpp,+,"assert(Output.isNothing() && ""Invalid output."");",143,/data/download/llvm-mirror_clang85_old.cpp,/data/download/llvm-mirror_clang85_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/PS4CPU.cpp,+,"assert(Inputs.size() == 1 && ""Unexpected number of inputs."");",59,/data/download/llvm-mirror_clang86_old.cpp,/data/download/llvm-mirror_clang86_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/PS4CPU.cpp,+,"assert(Input.isFilename() && ""Invalid input."");",61,/data/download/llvm-mirror_clang86_old.cpp,/data/download/llvm-mirror_clang86_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/PS4CPU.cpp,+,"assert(Output.isNothing() && ""Invalid output."");",112,/data/download/llvm-mirror_clang86_old.cpp,/data/download/llvm-mirror_clang86_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/PS4CPU.cpp,+,"assert(Output.isNothing() && ""Invalid output."");",181,/data/download/llvm-mirror_clang86_old.cpp,/data/download/llvm-mirror_clang86_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/Solaris.cpp,+,"assert(Output.isNothing() && ""Invalid output."");",80,/data/download/llvm-mirror_clang87_old.cpp,/data/download/llvm-mirror_clang87_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/WebAssembly.cpp,+,assert(Triple.isArch32Bit() != Triple.isArch64Bit());,103,/data/download/llvm-mirror_clang88_old.cpp,/data/download/llvm-mirror_clang88_new.cpp
1c814d10cf1a5085e5b0496c6707b3c44ba86eb5,"[Driver] Consolidate tools and toolchains by target platform. (NFC)

Summary:
(This is a move-only refactoring patch. There are no functionality changes.)

This patch splits apart the Clang driver's tool and toolchain implementation
files. Each target platform toolchain is moved to its own file, along with the
closest-related tools. Each target platform toolchain has separate headers and
implementation files, so the hierarchy of classes is unchanged.

There are some remaining shared free functions, mostly from Tools.cpp. Several
of these move to their own architecture-specific files, similar to r296056. Some
of them are only used by a single target platform; since the tools and
toolchains are now together, some helpers now live in a platform-specific file.
The balance are helpers related to manipulating argument lists, so they are now
in a new file pair, CommonArgs.h and .cpp.

I've tried to cluster the code logically, which is fairly straightforward for
most of the target platforms and shared architectures. I think I've made
reasonable choices for these, as well as the various shared helpers; but of
course, I'm happy to hear feedback in the review.

There are some particular things I don't like about this patch, but haven't been
able to find a better overall solution. The first is the proliferation of files:
there are several files that are tiny because the toolchain is not very
different from its base (usually the Gnu tools/toolchain). I think this is
mostly a reflection of the true complexity, though, so it may not be ""fixable""
in any reasonable sense. The second thing I don't like are the includes like
""../Something.h"". I've avoided this largely by clustering into the current file
structure. However, a few of these includes remain, and in those cases it
doesn't make sense to me to sink an existing file any deeper.

Reviewers: rsmith, mehdi_amini, compnerd, rnk, javed.absar

Subscribers: emaste, jfb, danalbert, srhines, dschuff, jyknight, nemanjai, nhaehnle, mgorny, cfe-commits

Differential Revision: https://reviews.llvm.org/D30372

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297250 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Driver/ToolChains/XCore.cpp,+,"assert(Output.isNothing() && ""Invalid output."");",70,/data/download/llvm-mirror_clang89_old.cpp,/data/download/llvm-mirror_clang89_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/AST/StmtPrinter.cpp,+,PrintExpr(S->getOperand());,2481,/data/download/llvm-mirror_clang90_old.cpp,/data/download/llvm-mirror_clang90_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,-,"assert(isa<FunctionDecl>(S.CurContext) && ""not in a function scope"");",176,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,-,"assert(ScopeInfo && ""missing function scope for function"");",179,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"assert(!Operators.isAmbiguous() && ""Operator lookup cannot be ambiguous"");",188,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,assert(CoawaitOp);,197,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,return ExprError();,215,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,return ExprError();,293,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"assert(isa<FunctionDecl>(CurContext) && ""not in a function scope"");",300,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,assert(!VD->isInvalidDecl());,318,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"assert(isa<FunctionDecl>(S.CurContext) && ""not in a function scope"");",328,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"assert(ScopeInfo && ""missing function scope for function"");",332,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,assert(ScopeInfo->CoroutinePromise);,349,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,return StmtError();,365,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,return StmtError();,368,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,return StmtError();,376,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,return ExprError();,407,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,return ExprError();,416,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,return ExprError();,421,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,return ExprError();,440,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,-,"assert(Coroutine->CoroutinePromise && ""no promise for coroutine"");",333,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,-,return ExprError();,340,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,-,"assert(Fn && !Fn->CoroutineStmts.empty() && ""not a coroutine"");",619,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,"assert(Fn && Fn->CoroutinePromise && ""not a coroutine"");",679,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
603fc45e729608b777314c06cf5122b7605a7d64,"[coroutines] Add DependentCoawaitExpr and fix re-building CoroutineBodyStmt.

Summary:
The changes contained in this patch are:

1. Defines a new AST node `CoawaitDependentExpr` for representing co_await expressions while the promise type is still dependent.
2. Correctly detect and transform the 'co_await' operand to  `p.await_transform(<expr>)`  when possible.
3. Change the initial/final suspend points to build during the initial parse, so they have the correct operator co_await lookup results.
4.  Fix transformation of the CoroutineBodyStmt so that it doesn't re-build the final/initial suspends.


@rsmith: This change is a little big, but it's not trivial for me to split it up. Please let me know if you would prefer this submitted as multiple patches.



Reviewers: rsmith, GorNishanov

Reviewed By: rsmith

Subscribers: ABataev, rsmith, mehdi_amini, cfe-commits

Differential Revision: https://reviews.llvm.org/D26057

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297093 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaCoroutine.cpp,+,return StmtError();,892,/data/download/llvm-mirror_clang91_old.cpp,/data/download/llvm-mirror_clang91_new.cpp
ba524690b91049ad6491d1639d500eb787607c1d,"[coroutines] Add co_return statement emission

Summary:
Added co_return statement emission.

Tweaked coro-alloc.cpp test to use co_return to trigger coroutine processing instead of co_await, since this change starts emitting the body of the coroutine and await expression handling has not been upstreamed yet.

Reviewers: rsmith, majnemer, EricWF, aaron.ballman

Reviewed By: rsmith

Subscribers: majnemer, llvm-commits, mehdi_amini

Differential Revision: https://reviews.llvm.org/D29979

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297076 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/CGStmt.cpp,-,"CGM.ErrorUnsupported(S, ""coroutine"");",148,/data/download/llvm-mirror_clang92_old.cpp,/data/download/llvm-mirror_clang92_new.cpp
6c303ed53a135c2d274a3ff0a84739d99d330bb8,"Further fixes and improvements to the ConstantInitBuilder API.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297050 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,"assert(Data && ""dereferencing null future"");",23,/data/download/llvm-mirror_clang93_old.cpp,/data/download/llvm-mirror_clang93_new.cpp
6c303ed53a135c2d274a3ff0a84739d99d330bb8,"Further fixes and improvements to the ConstantInitBuilder API.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297050 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,"assert(Data && ""abandoning null future"");",32,/data/download/llvm-mirror_clang93_old.cpp,/data/download/llvm-mirror_clang93_new.cpp
6c303ed53a135c2d274a3ff0a84739d99d330bb8,"Further fixes and improvements to the ConstantInitBuilder API.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297050 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,"assert(Data && ""installing null future"");",40,/data/download/llvm-mirror_clang93_old.cpp,/data/download/llvm-mirror_clang93_new.cpp
6c303ed53a135c2d274a3ff0a84739d99d330bb8,"Further fixes and improvements to the ConstantInitBuilder API.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297050 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,assert(builder.Buffer.size() == 1);,45,/data/download/llvm-mirror_clang93_old.cpp,/data/download/llvm-mirror_clang93_new.cpp
6c303ed53a135c2d274a3ff0a84739d99d330bb8,"Further fixes and improvements to the ConstantInitBuilder API.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297050 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,"assert(Buffer.empty() && ""buffer not current empty"");",54,/data/download/llvm-mirror_clang93_old.cpp,/data/download/llvm-mirror_clang93_new.cpp
6c303ed53a135c2d274a3ff0a84739d99d330bb8,"Further fixes and improvements to the ConstantInitBuilder API.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297050 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,assert(!builder->Frozen);,62,/data/download/llvm-mirror_clang93_old.cpp,/data/download/llvm-mirror_clang93_new.cpp
6c303ed53a135c2d274a3ff0a84739d99d330bb8,"Further fixes and improvements to the ConstantInitBuilder API.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297050 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,assert(builder->Buffer.size() == 1);,63,/data/download/llvm-mirror_clang93_old.cpp,/data/download/llvm-mirror_clang93_new.cpp
6c303ed53a135c2d274a3ff0a84739d99d330bb8,"Further fixes and improvements to the ConstantInitBuilder API.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297050 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,assert(builder->Buffer[0] != nullptr);,64,/data/download/llvm-mirror_clang93_old.cpp,/data/download/llvm-mirror_clang93_new.cpp
6c303ed53a135c2d274a3ff0a84739d99d330bb8,"Further fixes and improvements to the ConstantInitBuilder API.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297050 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,-,"assert(Begin < buffer.size() && ""didn't add any struct elements?"");",179,/data/download/llvm-mirror_clang93_old.cpp,/data/download/llvm-mirror_clang93_new.cpp
6c303ed53a135c2d274a3ff0a84739d99d330bb8,"Further fixes and improvements to the ConstantInitBuilder API.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297050 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,assert(ty->isPacked() == Packed);,272,/data/download/llvm-mirror_clang93_old.cpp,/data/download/llvm-mirror_clang93_new.cpp
6a168e57bbfd1e1878770e5ca12b840ef63a6636,"[CodeGen][Blocks] Refactor capture handling in code that generates
block copy/destroy routines

This is a preparation commit for work on merging unique block copy/destroy
helper functions.

rdar://22950898

Differential Revision: https://reviews.llvm.org/D30345


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297023 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/CGBlocks.cpp,+,assert(!CI.isByRef());,1408,/data/download/llvm-mirror_clang94_old.cpp,/data/download/llvm-mirror_clang94_new.cpp
6a168e57bbfd1e1878770e5ca12b840ef63a6636,"[CodeGen][Blocks] Refactor capture handling in code that generates
block copy/destroy routines

This is a preparation commit for work on merging unique block copy/destroy
helper functions.

rdar://22950898

Differential Revision: https://reviews.llvm.org/D30345


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297023 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/CGBlocks.cpp,-,assert(!CI.isByRef());,1450,/data/download/llvm-mirror_clang94_old.cpp,/data/download/llvm-mirror_clang94_new.cpp
6a168e57bbfd1e1878770e5ca12b840ef63a6636,"[CodeGen][Blocks] Refactor capture handling in code that generates
block copy/destroy routines

This is a preparation commit for work on merging unique block copy/destroy
helper functions.

rdar://22950898

Differential Revision: https://reviews.llvm.org/D30345


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297023 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/CGBlocks.cpp,+,assert(CopiedCapture.Kind == BlockCaptureEntityKind::CXXRecord);,1546,/data/download/llvm-mirror_clang94_old.cpp,/data/download/llvm-mirror_clang94_new.cpp
6a168e57bbfd1e1878770e5ca12b840ef63a6636,"[CodeGen][Blocks] Refactor capture handling in code that generates
block copy/destroy routines

This is a preparation commit for work on merging unique block copy/destroy
helper functions.

rdar://22950898

Differential Revision: https://reviews.llvm.org/D30345


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297023 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/CGBlocks.cpp,+,assert(CopiedCapture.Kind == BlockCaptureEntityKind::BlockObject);,1573,/data/download/llvm-mirror_clang94_old.cpp,/data/download/llvm-mirror_clang94_new.cpp
6a168e57bbfd1e1878770e5ca12b840ef63a6636,"[CodeGen][Blocks] Refactor capture handling in code that generates
block copy/destroy routines

This is a preparation commit for work on merging unique block copy/destroy
helper functions.

rdar://22950898

Differential Revision: https://reviews.llvm.org/D30345


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@297023 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/CGBlocks.cpp,+,assert(DestroyedCapture.Kind == BlockCaptureEntityKind::BlockObject);,1732,/data/download/llvm-mirror_clang94_old.cpp,/data/download/llvm-mirror_clang94_new.cpp
f037bd533e9461b203548e6c1e8fca08155a0a51,"[XRay] [clang] Allow logging the first argument of a function call.

Summary:
Functions with the ""xray_log_args"" attribute will tell LLVM to emit a special
XRay sled for compiler-rt to copy any call arguments to your logging handler.

Reviewers: dberris

Reviewed By: dberris

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D29704

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296999 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaDeclAttr.cpp,+,"static void handleXRayLogArgsAttr(Sema &S, Decl *D,",4427,/data/download/llvm-mirror_clang95_old.cpp,/data/download/llvm-mirror_clang95_new.cpp
f037bd533e9461b203548e6c1e8fca08155a0a51,"[XRay] [clang] Allow logging the first argument of a function call.

Summary:
Functions with the ""xray_log_args"" attribute will tell LLVM to emit a special
XRay sled for compiler-rt to copy any call arguments to your logging handler.

Reviewers: dberris

Reviewed By: dberris

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D29704

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296999 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaDeclAttr.cpp,+,"XRayLogArgsAttr(Attr.getRange(), S.Context, ++ArgCount,",4436,/data/download/llvm-mirror_clang95_old.cpp,/data/download/llvm-mirror_clang95_new.cpp
f037bd533e9461b203548e6c1e8fca08155a0a51,"[XRay] [clang] Allow logging the first argument of a function call.

Summary:
Functions with the ""xray_log_args"" attribute will tell LLVM to emit a special
XRay sled for compiler-rt to copy any call arguments to your logging handler.

Reviewers: dberris

Reviewed By: dberris

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D29704

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296999 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaDeclAttr.cpp,+,"handleXRayLogArgsAttr(S, D, Attr);",6302,/data/download/llvm-mirror_clang95_old.cpp,/data/download/llvm-mirror_clang95_new.cpp
f037bd533e9461b203548e6c1e8fca08155a0a51,"[XRay] [clang] Allow logging the first argument of a function call.

Summary:
Functions with the ""xray_log_args"" attribute will tell LLVM to emit a special
XRay sled for compiler-rt to copy any call arguments to your logging handler.

Reviewers: dberris

Reviewed By: dberris

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D29704

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296999 91177308-0d34-0410-b5e6-96231b3b80d8",test/CodeGen/xray-log-args.cpp,+,"[[clang::xray_always_instrument,clang::xray_log_args(1)]] void foo(int a) {",4,/data/download/llvm-mirror_clang96_old.cpp,/data/download/llvm-mirror_clang96_new.cpp
f037bd533e9461b203548e6c1e8fca08155a0a51,"[XRay] [clang] Allow logging the first argument of a function call.

Summary:
Functions with the ""xray_log_args"" attribute will tell LLVM to emit a special
XRay sled for compiler-rt to copy any call arguments to your logging handler.

Reviewers: dberris

Reviewed By: dberris

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D29704

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296999 91177308-0d34-0410-b5e6-96231b3b80d8",test/CodeGen/xray-log-args.cpp,+,[[clang::xray_log_args(1)]] void bar(int a) {,8,/data/download/llvm-mirror_clang96_old.cpp,/data/download/llvm-mirror_clang96_new.cpp
f037bd533e9461b203548e6c1e8fca08155a0a51,"[XRay] [clang] Allow logging the first argument of a function call.

Summary:
Functions with the ""xray_log_args"" attribute will tell LLVM to emit a special
XRay sled for compiler-rt to copy any call arguments to your logging handler.

Reviewers: dberris

Reviewed By: dberris

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D29704

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296999 91177308-0d34-0410-b5e6-96231b3b80d8",test/Sema/xray-log-args-oob.cpp,+,void foo [[clang::xray_log_args(1)]] (int);,2,/data/download/llvm-mirror_clang97_old.cpp,/data/download/llvm-mirror_clang97_new.cpp
f037bd533e9461b203548e6c1e8fca08155a0a51,"[XRay] [clang] Allow logging the first argument of a function call.

Summary:
Functions with the ""xray_log_args"" attribute will tell LLVM to emit a special
XRay sled for compiler-rt to copy any call arguments to your logging handler.

Reviewers: dberris

Reviewed By: dberris

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D29704

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296999 91177308-0d34-0410-b5e6-96231b3b80d8",test/Sema/xray-log-args-oob.cpp,+,struct [[clang::xray_log_args(1)]] a { int x; }; // expected-warning {{'xray_log_args' attribute only applies to functions and methods}},3,/data/download/llvm-mirror_clang97_old.cpp,/data/download/llvm-mirror_clang97_new.cpp
f037bd533e9461b203548e6c1e8fca08155a0a51,"[XRay] [clang] Allow logging the first argument of a function call.

Summary:
Functions with the ""xray_log_args"" attribute will tell LLVM to emit a special
XRay sled for compiler-rt to copy any call arguments to your logging handler.

Reviewers: dberris

Reviewed By: dberris

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D29704

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296999 91177308-0d34-0410-b5e6-96231b3b80d8",test/Sema/xray-log-args-oob.cpp,+,void fop [[clang::xray_log_args(1)]] (); // expected-error {{'xray_log_args' attribute parameter 1 is out of bounds}},5,/data/download/llvm-mirror_clang97_old.cpp,/data/download/llvm-mirror_clang97_new.cpp
f037bd533e9461b203548e6c1e8fca08155a0a51,"[XRay] [clang] Allow logging the first argument of a function call.

Summary:
Functions with the ""xray_log_args"" attribute will tell LLVM to emit a special
XRay sled for compiler-rt to copy any call arguments to your logging handler.

Reviewers: dberris

Reviewed By: dberris

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D29704

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296999 91177308-0d34-0410-b5e6-96231b3b80d8",test/Sema/xray-log-args-oob.cpp,+,void foq [[clang::xray_log_args(-1)]] (); // expected-error {{'xray_log_args' attribute parameter 1 is out of bounds}},7,/data/download/llvm-mirror_clang97_old.cpp,/data/download/llvm-mirror_clang97_new.cpp
f037bd533e9461b203548e6c1e8fca08155a0a51,"[XRay] [clang] Allow logging the first argument of a function call.

Summary:
Functions with the ""xray_log_args"" attribute will tell LLVM to emit a special
XRay sled for compiler-rt to copy any call arguments to your logging handler.

Reviewers: dberris

Reviewed By: dberris

Subscribers: cfe-commits

Differential Revision: https://reviews.llvm.org/D29704

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296999 91177308-0d34-0410-b5e6-96231b3b80d8",test/Sema/xray-log-args-oob.cpp,+,void fos [[clang::xray_log_args(0)]] (); // expected-error {{'xray_log_args' attribute parameter 1 is out of bounds}},9,/data/download/llvm-mirror_clang97_old.cpp,/data/download/llvm-mirror_clang97_new.cpp
03662f351adb31104fca74d0aea51c48108299b8,"Refactor ConstantInitBuilder to allow other frontends to more
easily extend the aggregate-builder API.  Stupid missing language
features.

Also add APIs for constructing a relative reference and computing
the offset of a position from the start of the initializer.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296979 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,assert(cacheEnd <= end);,120,/data/download/llvm-mirror_clang98_old.cpp,/data/download/llvm-mirror_clang98_new.cpp
03662f351adb31104fca74d0aea51c48108299b8,"Refactor ConstantInitBuilder to allow other frontends to more
easily extend the aggregate-builder API.  Stupid missing language
features.

Also add APIs for constructing a relative reference and computing
the offset of a position from the start of the initializer.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296979 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,assert(cacheEnd == 0);,131,/data/download/llvm-mirror_clang98_old.cpp,/data/download/llvm-mirror_clang98_new.cpp
03662f351adb31104fca74d0aea51c48108299b8,"Refactor ConstantInitBuilder to allow other frontends to more
easily extend the aggregate-builder API.  Stupid missing language
features.

Also add APIs for constructing a relative reference and computing
the offset of a position from the start of the initializer.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296979 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,"assert(Parent && ""Begin != 0 for root builder"");",132,/data/download/llvm-mirror_clang98_old.cpp,/data/download/llvm-mirror_clang98_new.cpp
03662f351adb31104fca74d0aea51c48108299b8,"Refactor ConstantInitBuilder to allow other frontends to more
easily extend the aggregate-builder API.  Stupid missing language
features.

Also add APIs for constructing a relative reference and computing
the offset of a position from the start of the initializer.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296979 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,assert(element != nullptr &&,144,/data/download/llvm-mirror_clang98_old.cpp,/data/download/llvm-mirror_clang98_new.cpp
c925a6abe68f98aab565a226a8d3fef15e3d8e2f,"[ODRHash] Add support for detecting different method properties.

Now print diagnostics for static, virtual, inline, volatile, and const
differences in methods.  Also use DeclarationName instead of IdentifierInfo
for additional robustness in diagnostic printing.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296932 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"ODRDiagError(FirstMethod->getLocation(),",9316,/data/download/llvm-mirror_clang99_old.cpp,/data/download/llvm-mirror_clang99_new.cpp
c925a6abe68f98aab565a226a8d3fef15e3d8e2f,"[ODRHash] Add support for detecting different method properties.

Now print diagnostics for static, virtual, inline, volatile, and const
differences in methods.  Also use DeclarationName instead of IdentifierInfo
for additional robustness in diagnostic printing.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296932 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"ODRDiagError(FirstMethod->getLocation(),",9333,/data/download/llvm-mirror_clang99_old.cpp,/data/download/llvm-mirror_clang99_new.cpp
c925a6abe68f98aab565a226a8d3fef15e3d8e2f,"[ODRHash] Add support for detecting different method properties.

Now print diagnostics for static, virtual, inline, volatile, and const
differences in methods.  Also use DeclarationName instead of IdentifierInfo
for additional robustness in diagnostic printing.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296932 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"ODRDiagError(FirstMethod->getLocation(),",9351,/data/download/llvm-mirror_clang99_old.cpp,/data/download/llvm-mirror_clang99_new.cpp
c925a6abe68f98aab565a226a8d3fef15e3d8e2f,"[ODRHash] Add support for detecting different method properties.

Now print diagnostics for static, virtual, inline, volatile, and const
differences in methods.  Also use DeclarationName instead of IdentifierInfo
for additional robustness in diagnostic printing.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296932 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"ODRDiagError(FirstMethod->getLocation(),",9364,/data/download/llvm-mirror_clang99_old.cpp,/data/download/llvm-mirror_clang99_new.cpp
c925a6abe68f98aab565a226a8d3fef15e3d8e2f,"[ODRHash] Add support for detecting different method properties.

Now print diagnostics for static, virtual, inline, volatile, and const
differences in methods.  Also use DeclarationName instead of IdentifierInfo
for additional robustness in diagnostic printing.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296932 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"ODRDiagError(FirstMethod->getLocation(),",9377,/data/download/llvm-mirror_clang99_old.cpp,/data/download/llvm-mirror_clang99_new.cpp
c925a6abe68f98aab565a226a8d3fef15e3d8e2f,"[ODRHash] Add support for detecting different method properties.

Now print diagnostics for static, virtual, inline, volatile, and const
differences in methods.  Also use DeclarationName instead of IdentifierInfo
for additional robustness in diagnostic printing.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296932 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Serialization/ASTReader.cpp,+,"ODRDiagError(FirstMethod->getLocation(),",9390,/data/download/llvm-mirror_clang99_old.cpp,/data/download/llvm-mirror_clang99_new.cpp
cf2a38c652b8340e57c059fc861d0a5974bf94a5,"Promote ConstantInitBuilder to be a public CodeGen API; it's
a generally useful utility for other frontends.  NFC.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296806 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,assert(indices.empty());,89,/data/download/llvm-mirror_clang100_old.cpp,/data/download/llvm-mirror_clang100_new.cpp
cf2a38c652b8340e57c059fc861d0a5974bf94a5,"Promote ConstantInitBuilder to be a public CodeGen API; it's
a generally useful utility for other frontends.  NFC.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296806 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,assert(position >= Begin);,93,/data/download/llvm-mirror_clang100_old.cpp,/data/download/llvm-mirror_clang100_new.cpp
cf2a38c652b8340e57c059fc861d0a5974bf94a5,"Promote ConstantInitBuilder to be a public CodeGen API; it's
a generally useful utility for other frontends.  NFC.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296806 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,assert((Begin < buffer.size() ||,104,/data/download/llvm-mirror_clang100_old.cpp,/data/download/llvm-mirror_clang100_new.cpp
cf2a38c652b8340e57c059fc861d0a5974bf94a5,"Promote ConstantInitBuilder to be a public CodeGen API; it's
a generally useful utility for other frontends.  NFC.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296806 91177308-0d34-0410-b5e6-96231b3b80d8",lib/CodeGen/ConstantInitBuilder.cpp,+,"assert(Begin < buffer.size() && ""didn't add any struct elements?"");",119,/data/download/llvm-mirror_clang100_old.cpp,/data/download/llvm-mirror_clang100_new.cpp
76f5d5795d4874977a05149b2250c2c30062a723,"Introduce an 'external_source_symbol' attribute that describes the origin
and the nature of a declaration

This commit adds an external_source_symbol attribute to Clang. This attribute
specifies that a declaration originates from an external source and describes
the nature of that source. This attribute will be used to improve IDE features
like 'jump-to-definition' for mixed-language projects or project that use
auto-generated code.

rdar://30423368

Differential Revision: https://reviews.llvm.org/D29819


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296649 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Parse/ParseDecl.cpp,+,"assert(Tok.is(tok::l_paren) && ""Attribute arg list not starting with '('"");",400,/data/download/llvm-mirror_clang101_old.cpp,/data/download/llvm-mirror_clang101_new.cpp
76f5d5795d4874977a05149b2250c2c30062a723,"Introduce an 'external_source_symbol' attribute that describes the origin
and the nature of a declaration

This commit adds an external_source_symbol attribute to Clang. This attribute
specifies that a declaration originates from an external source and describes
the nature of that source. This attribute will be used to improve IDE features
like 'jump-to-definition' for mixed-language projects or project that use
auto-generated code.

rdar://30423368

Differential Revision: https://reviews.llvm.org/D29819


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296649 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Parse/ParseDecl.cpp,+,"assert(Keyword == Ident_defined_in && ""Invalid clause keyword!"");",1180,/data/download/llvm-mirror_clang101_old.cpp,/data/download/llvm-mirror_clang101_new.cpp
76f5d5795d4874977a05149b2250c2c30062a723,"Introduce an 'external_source_symbol' attribute that describes the origin
and the nature of a declaration

This commit adds an external_source_symbol attribute to Clang. This attribute
specifies that a declaration originates from an external source and describes
the nature of that source. This attribute will be used to improve IDE features
like 'jump-to-definition' for mixed-language projects or project that use
auto-generated code.

rdar://30423368

Differential Revision: https://reviews.llvm.org/D29819


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@296649 91177308-0d34-0410-b5e6-96231b3b80d8",lib/Sema/SemaDeclAttr.cpp,+,"assert(checkAttributeAtMostNumArgs(S, Attr, 3) &&",2416,/data/download/llvm-mirror_clang102_old.cpp,/data/download/llvm-mirror_clang102_new.cpp
