commit_message,file_name,change_type,log_node,cdg_nodes,neighbor_nodes,ddg_nodes,ddg_lists,context_lists,store_name,log_loc
[ASTPrinter] Synthesize protocol extensions introduced by extensions' local conformances. rdar://28725923 (#8632),lib/AST/ASTPrinter.cpp,+,"[""2017"", ""True"", ""Condition"", ""shouldPrint ( E , Options )""]","[[""True"", [2108, ""True"", ""isa < ProtocolDecl > ( Target )"", ""Condition""]]]","[["""", [2026, ""True"", "")"", ""Statement""]], ["""", [2027, ""True"", ""Synthesized"", ""Statement""]], ["""", [2028, ""True"", ""bool"", ""Statement""]], ["""", [2029, ""True"", "","", ""Statement""]]]","[[[""isa"", ""ProtocolDecl"", ""Target"", "">"", ""<""]], [[]], [[]], [[]], [[]]]",[],[],/data/download/swift/apple_swift0_new.cpp,342
[ASTPrinter] Synthesize protocol extensions introduced by extensions' local conformances. rdar://28725923 (#8632),lib/AST/ASTPrinter.cpp,-,"[""26097"", ""True"", ""Condition"", ""! shouldPrint ( E , Options )""]","[[""True"", [26139, ""True"", ""! Unhandled . empty ( )"", ""Condition""]], [""True"", [26247, ""True"", ""isa < ProtocolDecl > ( Target )"", ""Condition""]]]","[["""", [26108, ""True"", "")"", ""Statement""]], ["""", [26109, ""True"", "")"", ""Statement""]], ["""", [26110, ""True"", ""("", ""Statement""]], ["""", [26111, ""True"", ""getExtensions"", ""Statement""]]]","[[[""!"", ""Unhandled . empty"", null]], [[""isa"", ""ProtocolDecl"", ""Target"", "">"", ""<""]], [[]], [[]], [[]], [[]]]",[],[],/data/download/swift/apple_swift0_old.cpp,348
[ASTPrinter] Synthesize protocol extensions introduced by extensions' local conformances. rdar://28725923 (#8632),lib/AST/ASTPrinter.cpp,-,"[""25996"", ""True"", ""Condition"", ""! shouldPrint ( E , Options )""]","[[""False"", [26247, ""True"", ""isa < ProtocolDecl > ( Target )"", ""Condition""]]]","[["""", [26007, ""True"", "")"", ""Statement""]], ["""", [26008, ""True"", "")"", ""Statement""]], ["""", [26009, ""True"", ""("", ""Statement""]], ["""", [26010, ""True"", ""getExtensions"", ""Statement""]]]","[[[""isa"", ""ProtocolDecl"", ""Target"", "">"", ""<""]], [[]], [[]], [[]], [[]]]",[],[],/data/download/swift/apple_swift0_old.cpp,364
Merge pull request #8634 from DougGregor/gsb-unresolved-vs-direct,lib/AST/GenericSignatureBuilder.cpp,+,"[""170970"", ""True"", ""ExpressionStatement"", ""assert ( constraintType && \""Missing constraint type?\"" )""]",[],"[["""", [170979, ""True"", ""constraintType = resolvedConstraint -> getType ( )"", ""ExpressionStatement""]], ["""", [170988, ""True"", ""auto"", ""Statement""]]]","[[[""constraintType"", ""resolvedConstraint -> getType"", ""=""]], [[]]]","[[u'constraintType', [170979, u'True', u'constraintType = resolvedConstraint -> getType ( )', u'ExpressionStatement']]]","[[[u'constraintType', u'resolvedConstraint -> getType', u'='], u'constraintType']]",/data/download/swift/apple_swift1_new.cpp,2457
Merge pull request #8634 from DougGregor/gsb-unresolved-vs-direct,lib/AST/GenericSignatureBuilder.cpp,+,"[""170931"", ""True"", ""Condition"", ""source . getLoc ( ) . isValid ( ) && ! constraintType -> hasError ( )""]",[],"[["""", [170970, ""True"", ""assert ( constraintType && \""Missing constraint type?\"" )"", ""ExpressionStatement""]], ["""", [170979, ""True"", ""constraintType = resolvedConstraint -> getType ( )"", ""ExpressionStatement""]], ["""", [170988, ""True"", ""auto"", ""Statement""]]]","[[[""assert""]], [[""constraintType"", ""resolvedConstraint -> getType"", ""=""]], [[]]]","[[u'constraintType', [170979, u'True', u'constraintType = resolvedConstraint -> getType ( )', u'ExpressionStatement']]]","[[[u'constraintType', u'resolvedConstraint -> getType', u'='], u'constraintType']]",/data/download/swift/apple_swift1_new.cpp,2460
Merge pull request #8634 from DougGregor/gsb-unresolved-vs-direct,lib/AST/GenericSignatureBuilder.cpp,+,"[""170723"", ""True"", ""ExpressionStatement"", ""assert ( subjectPA && \""No potential archetype?\"" )""]","[[""False"", [170803, ""True"", ""resolvedSubject -> isType ( )"", ""Condition""]], [""False"", [170839, ""True"", ""! resolvedSubject"", ""Condition""]], [""False"", [170952, ""True"", ""! constraintType -> isExistentialType ( ) && ! constraintType -> getClassOrBoundGenericClass ( )"", ""Condition""]]]","[["""", [170732, ""True"", ""subjectPA = resolvedSubject -> getPotentialArchetype ( )"", ""ExpressionStatement""]], ["""", [170741, ""True"", ""auto"", ""Statement""]]]","[[[null]], [[""!"", ""resolvedSubject"", null]], [[""!"", ""constraintType -> isExistentialType"", null]], [[""!"", ""constraintType -> getClassOrBoundGenericClass"", null]], [[""subjectPA"", ""resolvedSubject -> getPotentialArchetype"", ""=""]], [[]]]","[[u'subjectPA', [170732, u'True', u'subjectPA = resolvedSubject -> getPotentialArchetype ( )', u'ExpressionStatement']]]","[[[u'subjectPA', u'resolvedSubject -> getPotentialArchetype', u'='], u'subjectPA']]",/data/download/swift/apple_swift1_new.cpp,2504
Merge pull request #8634 from DougGregor/gsb-unresolved-vs-direct,lib/AST/GenericSignatureBuilder.cpp,-,"[""192520"", ""True"", ""ExpressionStatement"", ""assert ( req . getSecondType ( ) -> getClassOrBoundGenericClass ( ) )""]","[[""case RequirementKind :: Superclass"", [192540, ""True"", ""! pa"", ""Condition""]], [""case RequirementKind :: Superclass"", [192568, ""True"", ""req . getKind ( )"", ""Condition""]]]","[["""", [192544, ""True"", ""PotentialArchetype * pa = resolveArchetype ( subst ( req . getFirstType ( ) ) ) ;"", ""IdentifierDeclStatement""]], ["""", [192566, ""True"", ""case RequirementKind :: Superclass :"", ""Label""]]]","[[[""!"", ""PotentialArchetype *"", null]], [[null]], [[null, ""PotentialArchetype *"", ""PotentialArchetype *"", ""resolveArchetype"", ""="", null]], [[""RequirementKind :: Superclass""]]]",[],[],/data/download/swift/apple_swift1_old.cpp,2819
"[GSB] Separate out ""unresolved"" and ""direct"" type requirement handling.

As we've done with layout requirements, introduce a new entry point
(addTypeRequirement) that handles unresolved type requirements of the
form `T: U`, resolves the types, and then can

1. Diagnose any immediate problems with the types,
2. Delay the type requirement if one of the types cannot be resolved,
or
3. Break it into one or more ""direct"" requirements.

This allows us to clean up and centralize a bunch of checking that was
scattered/duplicated across the GSB and type checker.",lib/AST/GenericSignatureBuilder.cpp,+,"[""529950"", ""True"", ""ExpressionStatement"", ""assert ( constraintType && \""Missing constraint type?\"" )""]",[],"[["""", [529959, ""True"", ""constraintType = resolvedConstraint -> getType ( )"", ""ExpressionStatement""]], ["""", [529968, ""True"", ""auto"", ""Statement""]]]","[[[""constraintType"", ""resolvedConstraint -> getType"", ""=""]], [[]]]","[[u'constraintType', [529959, u'True', u'constraintType = resolvedConstraint -> getType ( )', u'ExpressionStatement']]]","[[[u'constraintType', u'resolvedConstraint -> getType', u'='], u'constraintType']]",/data/download/swift/apple_swift2_new.cpp,2457
"[GSB] Separate out ""unresolved"" and ""direct"" type requirement handling.

As we've done with layout requirements, introduce a new entry point
(addTypeRequirement) that handles unresolved type requirements of the
form `T: U`, resolves the types, and then can

1. Diagnose any immediate problems with the types,
2. Delay the type requirement if one of the types cannot be resolved,
or
3. Break it into one or more ""direct"" requirements.

This allows us to clean up and centralize a bunch of checking that was
scattered/duplicated across the GSB and type checker.",lib/AST/GenericSignatureBuilder.cpp,+,"[""529911"", ""True"", ""Condition"", ""source . getLoc ( ) . isValid ( ) && ! constraintType -> hasError ( )""]",[],"[["""", [529950, ""True"", ""assert ( constraintType && \""Missing constraint type?\"" )"", ""ExpressionStatement""]], ["""", [529959, ""True"", ""constraintType = resolvedConstraint -> getType ( )"", ""ExpressionStatement""]], ["""", [529968, ""True"", ""auto"", ""Statement""]]]","[[[""assert""]], [[""constraintType"", ""resolvedConstraint -> getType"", ""=""]], [[]]]","[[u'constraintType', [529959, u'True', u'constraintType = resolvedConstraint -> getType ( )', u'ExpressionStatement']]]","[[[u'constraintType', u'resolvedConstraint -> getType', u'='], u'constraintType']]",/data/download/swift/apple_swift2_new.cpp,2460
"[GSB] Separate out ""unresolved"" and ""direct"" type requirement handling.

As we've done with layout requirements, introduce a new entry point
(addTypeRequirement) that handles unresolved type requirements of the
form `T: U`, resolves the types, and then can

1. Diagnose any immediate problems with the types,
2. Delay the type requirement if one of the types cannot be resolved,
or
3. Break it into one or more ""direct"" requirements.

This allows us to clean up and centralize a bunch of checking that was
scattered/duplicated across the GSB and type checker.",lib/AST/GenericSignatureBuilder.cpp,+,"[""529703"", ""True"", ""ExpressionStatement"", ""assert ( subjectPA && \""No potential archetype?\"" )""]","[[""False"", [529783, ""True"", ""resolvedSubject -> isType ( )"", ""Condition""]], [""False"", [529819, ""True"", ""! resolvedSubject"", ""Condition""]], [""False"", [529932, ""True"", ""! constraintType -> isExistentialType ( ) && ! constraintType -> getClassOrBoundGenericClass ( )"", ""Condition""]]]","[["""", [529712, ""True"", ""subjectPA = resolvedSubject -> getPotentialArchetype ( )"", ""ExpressionStatement""]], ["""", [529721, ""True"", ""auto"", ""Statement""]]]","[[[null]], [[""!"", ""resolvedSubject"", null]], [[""!"", ""constraintType -> isExistentialType"", null]], [[""!"", ""constraintType -> getClassOrBoundGenericClass"", null]], [[""subjectPA"", ""resolvedSubject -> getPotentialArchetype"", ""=""]], [[]]]","[[u'subjectPA', [529712, u'True', u'subjectPA = resolvedSubject -> getPotentialArchetype ( )', u'ExpressionStatement']]]","[[[u'subjectPA', u'resolvedSubject -> getPotentialArchetype', u'='], u'subjectPA']]",/data/download/swift/apple_swift2_new.cpp,2504
"[GSB] Separate out ""unresolved"" and ""direct"" type requirement handling.

As we've done with layout requirements, introduce a new entry point
(addTypeRequirement) that handles unresolved type requirements of the
form `T: U`, resolves the types, and then can

1. Diagnose any immediate problems with the types,
2. Delay the type requirement if one of the types cannot be resolved,
or
3. Break it into one or more ""direct"" requirements.

This allows us to clean up and centralize a bunch of checking that was
scattered/duplicated across the GSB and type checker.",lib/AST/GenericSignatureBuilder.cpp,-,"[""551853"", ""True"", ""ExpressionStatement"", ""assert ( req . getSecondType ( ) -> getClassOrBoundGenericClass ( ) )""]","[[""case RequirementKind :: Superclass"", [551873, ""True"", ""! pa"", ""Condition""]], [""case RequirementKind :: Superclass"", [551901, ""True"", ""req . getKind ( )"", ""Condition""]]]","[["""", [551877, ""True"", ""PotentialArchetype * pa = resolveArchetype ( subst ( req . getFirstType ( ) ) ) ;"", ""IdentifierDeclStatement""]], ["""", [551899, ""True"", ""case RequirementKind :: Superclass :"", ""Label""]]]","[[[""!"", ""PotentialArchetype *"", null]], [[null]], [[null, ""PotentialArchetype *"", ""PotentialArchetype *"", ""resolveArchetype"", ""="", null]], [[""RequirementKind :: Superclass""]]]",[],[],/data/download/swift/apple_swift2_old.cpp,2916
"Merge pull request #8596 from huonw/symbol-list-3

Use IRGen's LinkInfo in TBDGen.",lib/FrontendTool/FrontendTool.cpp,-,"[""842916"", ""True"", ""ReturnStatement"", ""return writeTBD ( Instance -> getMainModule ( ) , opts . getSingleOutputFilename ( ) ) ;""]","[[""False"", [842935, ""True"", ""Action == FrontendOptions :: EmitTBD"", ""Condition""]], [""False"", [842982, ""True"", ""Action == FrontendOptions :: Typecheck"", ""Condition""]], [""False"", [843025, ""True"", ""Context . hadError ( )"", ""Condition""]], [""True"", [843147, ""True"", ""Action == FrontendOptions :: EmitImportedModules"", ""Condition""]]]","[["""", [842986, ""True"", ""bool moduleIsPublic = ! Instance -> getMainModule ( ) -> hasEntryPoint ( ) && opts . ImplicitObjCHeaderPath . empty ( ) && ! Context . LangOpts . EnableAppExtensionRestrictions ;"", ""IdentifierDeclStatement""]]]","[[[""FrontendOptions :: ActionType"", ""FrontendOptions :: EmitTBD"", ""==""]], [[""FrontendOptions :: ActionType"", ""FrontendOptions :: Typecheck"", ""==""]], [[null]], [[""FrontendOptions :: ActionType"", ""FrontendOptions :: EmitImportedModules"", ""==""]], [[null, ""bool"", ""bool"", ""!"", ""Instance -> getMainModule ( ) -> hasEntryPoint"", null, ""opts . ImplicitObjCHeaderPath . empty"", ""!"", ""ASTContext &"", ""LangOpts"", null, ""EnableAppExtensionRestrictions"", null, null, ""&&"", ""&&"", ""="", null]]]","[[u'Instance', [841428, u'True', u'std :: unique_ptr < CompilerInstance > & Instance', u'Parameter']], [u'opts', [844094, u'True', u'FrontendOptions opts = Invocation . getFrontendOptions ( ) ;', u'IdentifierDeclStatement']]]","[[[None, u'std :: unique_ptr < CompilerInstance > &'], u'std :: unique_ptr < CompilerInstance > &'], [[None, u'FrontendOptions', u'FrontendOptions', u'Invocation . getFrontendOptions', u'=', None], u'FrontendOptions']]",/data/download/swift/apple_swift3_old.cpp,553
"Merge pull request #8596 from huonw/symbol-list-3

Use IRGen's LinkInfo in TBDGen.",lib/FrontendTool/FrontendTool.cpp,+,"[""836887"", ""True"", ""ReturnStatement"", ""return writeTBD ( Instance -> getMainModule ( ) , hasMultipleIRGenThreads , opts . getSingleOutputFilename ( ) ) ;""]","[[""True"", [836922, ""True"", ""Action == FrontendOptions :: EmitTBD"", ""Condition""]], [""False"", [836969, ""True"", ""Action == FrontendOptions :: Typecheck"", ""Condition""]], [""False"", [837012, ""True"", ""Context . hadError ( )"", ""Condition""]], [""True"", [837134, ""True"", ""Action == FrontendOptions :: EmitImportedModules"", ""Condition""]]]","[["""", [836908, ""True"", ""hasMultipleIRGenThreads = Invocation . getSILOptions ( ) . NumThreads > 1"", ""ExpressionStatement""]], ["""", [836921, ""True"", ""auto"", ""Statement""]]]","[[[""FrontendOptions :: ActionType"", ""FrontendOptions :: EmitTBD"", ""==""]], [[""FrontendOptions :: ActionType"", ""FrontendOptions :: Typecheck"", ""==""]], [[null]], [[""FrontendOptions :: ActionType"", ""FrontendOptions :: EmitImportedModules"", ""==""]], [[""hasMultipleIRGenThreads"", ""Invocation . getSILOptions"", ""NumThreads"", null, ""1"", "">"", ""=""]], [[]]]","[[u'Instance', [835376, u'True', u'std :: unique_ptr < CompilerInstance > & Instance', u'Parameter']], [u'opts', [838081, u'True', u'FrontendOptions opts = Invocation . getFrontendOptions ( ) ;', u'IdentifierDeclStatement']], [u'hasMultipleIRGenThreads', [836908, u'True', u'hasMultipleIRGenThreads = Invocation . getSILOptions ( ) . NumThreads > 1', u'ExpressionStatement']]]","[[[None, u'std :: unique_ptr < CompilerInstance > &'], u'std :: unique_ptr < CompilerInstance > &'], [[None, u'FrontendOptions', u'FrontendOptions', u'Invocation . getFrontendOptions', u'=', None], u'FrontendOptions'], [[u'hasMultipleIRGenThreads', u'Invocation . getSILOptions', u'NumThreads', None, u'1', u'>', u'='], u'hasMultipleIRGenThreads']]",/data/download/swift/apple_swift3_new.cpp,554
"Merge pull request #8596 from huonw/symbol-list-3

Use IRGen's LinkInfo in TBDGen.",lib/FrontendTool/TBD.cpp,-,"[""1061433"", ""True"", ""Parameter"", ""StringRef OutputFilename""]",[],"[["""", [1061436, ""True"", ""ModuleDecl * M"", ""Parameter""]], ["""", [1061537, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""ModuleDecl *""]], [[""ENTRY""]]]",[],[],/data/download/swift/apple_swift4_old.cpp,41
"Merge pull request #8596 from huonw/symbol-list-3

Use IRGen's LinkInfo in TBDGen.",lib/FrontendTool/TBD.cpp,+,"[""1061154"", ""True"", ""Parameter"", ""bool hasMultipleIRGenThreads""]",[],"[["""", [1061157, ""True"", ""ModuleDecl * M"", ""Parameter""]], ["""", [1061262, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[null, ""ModuleDecl *""]], [[""ENTRY""]]]",[],[],/data/download/swift/apple_swift4_new.cpp,41
Merge pull request #8630 from eeckstein/fix-funcmerge,lib/LLVMPasses/LLVMMergeFunctions.cpp,+,"[""1258850"", ""True"", ""ExpressionStatement"", ""assert ( selfReferencing || matching )""]","[[""True"", [1258865, ""True"", ""! selfReferencing && ! matching"", ""Condition""]], [""True"", [1258905, ""True"", ""Constant * C = dyn_cast < Constant > ( Op )"", ""Condition""]], [""True"", [1258905, ""True"", ""Constant * C = dyn_cast < Constant > ( Op )"", ""Condition""]]]","[["""", [1258877, ""True"", ""matching = false"", ""ExpressionStatement""]], ["""", [1258886, ""True"", ""CommonConst = C"", ""ExpressionStatement""]], ["""", [1258915, ""True"", ""Value * Op = FI . CurrentInst -> getOperand ( OpIdx ) ;"", ""IdentifierDeclStatement""]], ["""", [1258931, ""True"", "")"", ""Statement""]], ["""", [1258895, ""True"", ""selfReferencing = false"", ""ExpressionStatement""]], ["""", [1258895, ""True"", ""selfReferencing = false"", ""ExpressionStatement""]], ["""", [1258932, ""True"", ""FInfos"", ""Statement""]]]","[[[""!"", ""bool"", null]], [[""!"", ""bool"", null]], [[""Constant"", ""C"", ""*"", ""dyn_cast"", ""Constant"", ""Value *"", "">"", ""<"", ""=""]], [[""Constant"", ""C"", ""*"", ""dyn_cast"", ""Constant"", ""Value *"", "">"", ""<"", ""=""]], [[""bool"", ""false"", ""=""]], [[""Constant *"", ""C"", ""=""]], [[null, ""Value *"", ""Value *"", ""FI . CurrentInst -> getOperand"", ""="", null]], [[]], [[""bool"", ""false"", ""=""]], [[""bool"", ""false"", ""=""]], [[]]]","[[u'matching', [1258947, u'True', u'bool matching = true ;', u'IdentifierDeclStatement']], [u'matching', [1258877, u'True', u'matching = false', u'ExpressionStatement']], [u'selfReferencing', [1258940, u'True', u'bool selfReferencing = true ;', u'IdentifierDeclStatement']], [u'selfReferencing', [1258895, u'True', u'selfReferencing = false', u'ExpressionStatement']]]","[[[None, u'bool', u'true', u'true', u'=', None], u'bool'], [[u'bool', u'false', u'='], u'bool'], [[None, u'bool', u'true', u'true', u'=', None], u'bool'], [[u'bool', u'false', u'='], u'bool']]",/data/download/swift/apple_swift5_new.cpp,809
Merge pull request #8630 from eeckstein/fix-funcmerge,lib/LLVMPasses/LLVMMergeFunctions.cpp,+,"[""1259243"", ""True"", ""ExpressionStatement"", ""DEBUG ( dbgs ( ) << \""    Erase \"" << OrigFunc -> getName ( ) << '\\n' )""]","[[""True"", [1259327, ""True"", ""replaceDirectCallers ( OrigFunc , NewFunction , Params , FIdx )"", ""Condition""]], [""True"", [1259354, ""True"", ""FIdx < NumFuncs"", ""Condition""]]]","[["""", [1259264, ""True"", ""FuncEntries . erase ( Iter )"", ""ExpressionStatement""]], ["""", [1259273, ""True"", ""Iter -> second -> F = nullptr"", ""ExpressionStatement""]], ["""", [1259281, ""True"", ""assert ( ! isInEquivalenceClass ( & * Iter -> second ) )"", ""ExpressionStatement""]], ["""", [1259301, ""True"", ""assert ( Iter != FuncEntries . end ( ) )"", ""ExpressionStatement""]]]","[[[null]], [[""FIdx"", ""NumFuncs"", ""<""]], [[""FuncEntries . erase""]], [[""Iter"", ""second"", null, ""F"", null, ""nullptr"", ""=""]], [[""assert""]], [[""assert""]]]","[[u'OrigFunc', [1259340, u'True', u'Function * OrigFunc = FInfos [ FIdx ] . F ;', u'IdentifierDeclStatement']]]","[[[None, u'Function *', u'Function *', u'const FunctionInfos &', u'FIdx', None, u'F', None, u'=', None], u'Function *']]",/data/download/swift/apple_swift5_new.cpp,917
Merge pull request #8630 from eeckstein/fix-funcmerge,lib/LLVMPasses/LLVMMergeFunctions.cpp,+,"[""1260331"", ""True"", ""ExpressionStatement"", ""assert ( Old -> use_empty ( ) && \""should have replaced all uses of old function\"" )""]","[[""True"", [1260721, ""True"", ""! AllReplaced"", ""Condition""]]]","[["""", [1260346, ""True"", ""CI -> eraseFromParent ( )"", ""ExpressionStatement""]], ["""", [1260353, ""True"", ""CI -> replaceAllUsesWith ( NewCI )"", ""ExpressionStatement""]], ["""", [1260362, ""True"", ""NewCI -> setAttributes ( CallSiteAttrs )"", ""ExpressionStatement""]], ["""", [1260371, ""True"", ""NewCI -> setCallingConv ( CI -> getCallingConv ( ) )"", ""ExpressionStatement""]]]","[[[""!"", ""bool"", null]], [[""CI -> eraseFromParent""]], [[""CI -> replaceAllUsesWith""]], [[""NewCI -> setAttributes""]], [[""NewCI -> setCallingConv""]]]","[[u'Old', [1260319, u'True', u'Functi