commit_sha,commit_message,file_name,change_type,log_statement,log_loc,old_store_name,new_store_name
52e289af952cb2d1d6cb5a5b047fb99ca3bfa318,[ASTPrinter] Synthesize protocol extensions introduced by extensions' local conformances. rdar://28725923 (#8632),lib/AST/ASTPrinter.cpp,+,"if (shouldPrint(E, Options)) {",342,/data/download/swift/apple_swift0_old.cpp,/data/download/swift/apple_swift0_new.cpp
52e289af952cb2d1d6cb5a5b047fb99ca3bfa318,[ASTPrinter] Synthesize protocol extensions introduced by extensions' local conformances. rdar://28725923 (#8632),lib/AST/ASTPrinter.cpp,-,"if (!shouldPrint(E, Options))",348,/data/download/swift/apple_swift0_old.cpp,/data/download/swift/apple_swift0_new.cpp
52e289af952cb2d1d6cb5a5b047fb99ca3bfa318,[ASTPrinter] Synthesize protocol extensions introduced by extensions' local conformances. rdar://28725923 (#8632),lib/AST/ASTPrinter.cpp,-,"if (!shouldPrint(E, Options))",364,/data/download/swift/apple_swift0_old.cpp,/data/download/swift/apple_swift0_new.cpp
0fab50ea833397041dc12ac4115ba83c34213297,Merge pull request #8634 from DougGregor/gsb-unresolved-vs-direct,lib/AST/GenericSignatureBuilder.cpp,+,"assert(constraintType && ""Missing constraint type?"");",2457,/data/download/swift/apple_swift1_old.cpp,/data/download/swift/apple_swift1_new.cpp
0fab50ea833397041dc12ac4115ba83c34213297,Merge pull request #8634 from DougGregor/gsb-unresolved-vs-direct,lib/AST/GenericSignatureBuilder.cpp,+,if (source.getLoc().isValid() && !constraintType->hasError()) {,2460,/data/download/swift/apple_swift1_old.cpp,/data/download/swift/apple_swift1_new.cpp
0fab50ea833397041dc12ac4115ba83c34213297,Merge pull request #8634 from DougGregor/gsb-unresolved-vs-direct,lib/AST/GenericSignatureBuilder.cpp,+,"assert(subjectPA && ""No potential archetype?"");",2504,/data/download/swift/apple_swift1_old.cpp,/data/download/swift/apple_swift1_new.cpp
0fab50ea833397041dc12ac4115ba83c34213297,Merge pull request #8634 from DougGregor/gsb-unresolved-vs-direct,lib/AST/GenericSignatureBuilder.cpp,-,assert(req.getSecondType()->getClassOrBoundGenericClass());,2819,/data/download/swift/apple_swift1_old.cpp,/data/download/swift/apple_swift1_new.cpp
c522bb52393cdd730284a84b0ce91ebdc10886dd,"[GSB] Separate out ""unresolved"" and ""direct"" type requirement handling.

As we've done with layout requirements, introduce a new entry point
(addTypeRequirement) that handles unresolved type requirements of the
form `T: U`, resolves the types, and then can

1. Diagnose any immediate problems with the types,
2. Delay the type requirement if one of the types cannot be resolved,
or
3. Break it into one or more ""direct"" requirements.

This allows us to clean up and centralize a bunch of checking that was
scattered/duplicated across the GSB and type checker.",lib/AST/GenericSignatureBuilder.cpp,+,"assert(constraintType && ""Missing constraint type?"");",2457,/data/download/swift/apple_swift2_old.cpp,/data/download/swift/apple_swift2_new.cpp
c522bb52393cdd730284a84b0ce91ebdc10886dd,"[GSB] Separate out ""unresolved"" and ""direct"" type requirement handling.

As we've done with layout requirements, introduce a new entry point
(addTypeRequirement) that handles unresolved type requirements of the
form `T: U`, resolves the types, and then can

1. Diagnose any immediate problems with the types,
2. Delay the type requirement if one of the types cannot be resolved,
or
3. Break it into one or more ""direct"" requirements.

This allows us to clean up and centralize a bunch of checking that was
scattered/duplicated across the GSB and type checker.",lib/AST/GenericSignatureBuilder.cpp,+,if (source.getLoc().isValid() && !constraintType->hasError()) {,2460,/data/download/swift/apple_swift2_old.cpp,/data/download/swift/apple_swift2_new.cpp
c522bb52393cdd730284a84b0ce91ebdc10886dd,"[GSB] Separate out ""unresolved"" and ""direct"" type requirement handling.

As we've done with layout requirements, introduce a new entry point
(addTypeRequirement) that handles unresolved type requirements of the
form `T: U`, resolves the types, and then can

1. Diagnose any immediate problems with the types,
2. Delay the type requirement if one of the types cannot be resolved,
or
3. Break it into one or more ""direct"" requirements.

This allows us to clean up and centralize a bunch of checking that was
scattered/duplicated across the GSB and type checker.",lib/AST/GenericSignatureBuilder.cpp,+,"assert(subjectPA && ""No potential archetype?"");",2504,/data/download/swift/apple_swift2_old.cpp,/data/download/swift/apple_swift2_new.cpp
c522bb52393cdd730284a84b0ce91ebdc10886dd,"[GSB] Separate out ""unresolved"" and ""direct"" type requirement handling.

As we've done with layout requirements, introduce a new entry point
(addTypeRequirement) that handles unresolved type requirements of the
form `T: U`, resolves the types, and then can

1. Diagnose any immediate problems with the types,
2. Delay the type requirement if one of the types cannot be resolved,
or
3. Break it into one or more ""direct"" requirements.

This allows us to clean up and centralize a bunch of checking that was
scattered/duplicated across the GSB and type checker.",lib/AST/GenericSignatureBuilder.cpp,-,assert(req.getSecondType()->getClassOrBoundGenericClass());,2916,/data/download/swift/apple_swift2_old.cpp,/data/download/swift/apple_swift2_new.cpp
9e9a0a04368493e8fed1c0e01b39567808f9ffd3,"Merge pull request #8596 from huonw/symbol-list-3

Use IRGen's LinkInfo in TBDGen.",lib/FrontendTool/FrontendTool.cpp,-,"return writeTBD(Instance->getMainModule(), opts.getSingleOutputFilename());",553,/data/download/swift/apple_swift3_old.cpp,/data/download/swift/apple_swift3_new.cpp
9e9a0a04368493e8fed1c0e01b39567808f9ffd3,"Merge pull request #8596 from huonw/symbol-list-3

Use IRGen's LinkInfo in TBDGen.",lib/FrontendTool/FrontendTool.cpp,+,"return writeTBD(Instance->getMainModule(), hasMultipleIRGenThreads,",554,/data/download/swift/apple_swift3_old.cpp,/data/download/swift/apple_swift3_new.cpp
9e9a0a04368493e8fed1c0e01b39567808f9ffd3,"Merge pull request #8596 from huonw/symbol-list-3

Use IRGen's LinkInfo in TBDGen.",lib/FrontendTool/TBD.cpp,-,"bool swift::writeTBD(ModuleDecl *M, StringRef OutputFilename) {",41,/data/download/swift/apple_swift4_old.cpp,/data/download/swift/apple_swift4_new.cpp
9e9a0a04368493e8fed1c0e01b39567808f9ffd3,"Merge pull request #8596 from huonw/symbol-list-3

Use IRGen's LinkInfo in TBDGen.",lib/FrontendTool/TBD.cpp,+,"bool swift::writeTBD(ModuleDecl *M, bool hasMultipleIRGenThreads,",41,/data/download/swift/apple_swift4_old.cpp,/data/download/swift/apple_swift4_new.cpp
679ddf2a1e459c998adc2cb88825584a335bd79a,Merge pull request #8630 from eeckstein/fix-funcmerge,lib/LLVMPasses/LLVMMergeFunctions.cpp,+,assert(selfReferencing || matching);,809,/data/download/swift/apple_swift5_old.cpp,/data/download/swift/apple_swift5_new.cpp
679ddf2a1e459c998adc2cb88825584a335bd79a,Merge pull request #8630 from eeckstein/fix-funcmerge,lib/LLVMPasses/LLVMMergeFunctions.cpp,+,"DEBUG(dbgs() << ""    Erase "" << OrigFunc->getName() << '\n');",917,/data/download/swift/apple_swift5_old.cpp,/data/download/swift/apple_swift5_new.cpp
679ddf2a1e459c998adc2cb88825584a335bd79a,Merge pull request #8630 from eeckstein/fix-funcmerge,lib/LLVMPasses/LLVMMergeFunctions.cpp,+,"assert(Old->use_empty() && ""should have replaced all uses of old function"");",1102,/data/download/swift/apple_swift5_old.cpp,/data/download/swift/apple_swift5_new.cpp
2584078e3c06687aa08120f476320249facbfd34,"MergeFunctions: handle self recursive functions correctly.

First, it fixes a crash where the eliminated function is still referenced.
This shows up if two equivalent self-recursive functions are merged and those functions are internal.
Fixes SR-4514, rdar://problem/31479425

Second, it avoids creating a not needed parameter for really equivalent self recursive functions.",lib/LLVMPasses/LLVMMergeFunctions.cpp,+,assert(selfReferencing || matching);,809,/data/download/swift/apple_swift6_old.cpp,/data/download/swift/apple_swift6_new.cpp
2584078e3c06687aa08120f476320249facbfd34,"MergeFunctions: handle self recursive functions correctly.

First, it fixes a crash where the eliminated function is still referenced.
This shows up if two equivalent self-recursive functions are merged and those functions are internal.
Fixes SR-4514, rdar://problem/31479425

Second, it avoids creating a not needed parameter for really equivalent self recursive functions.",lib/LLVMPasses/LLVMMergeFunctions.cpp,+,"DEBUG(dbgs() << ""    Erase "" << OrigFunc->getName() << '\n');",917,/data/download/swift/apple_swift6_old.cpp,/data/download/swift/apple_swift6_new.cpp
2584078e3c06687aa08120f476320249facbfd34,"MergeFunctions: handle self recursive functions correctly.

First, it fixes a crash where the eliminated function is still referenced.
This shows up if two equivalent self-recursive functions are merged and those functions are internal.
Fixes SR-4514, rdar://problem/31479425

Second, it avoids creating a not needed parameter for really equivalent self recursive functions.",lib/LLVMPasses/LLVMMergeFunctions.cpp,+,"assert(Old->use_empty() && ""should have replaced all uses of old function"");",1102,/data/download/swift/apple_swift6_old.cpp,/data/download/swift/apple_swift6_new.cpp
8e77ea7338cdf0456d8879ed5712fd79e4402178,"Merge pull request #8598 from eeckstein/demangling-extensions

Demangler: fix de- and re-mangling of constrained extensions",lib/Demangling/NodeDumper.cpp,+,"fprintf(stderr, ""NodeStack[%u] at position %zd:\n"", Idx, NodeStack[Idx].Pos);",65,/data/download/swift/apple_swift7_old.cpp,/data/download/swift/apple_swift7_new.cpp
8e77ea7338cdf0456d8879ed5712fd79e4402178,"Merge pull request #8598 from eeckstein/demangling-extensions

Demangler: fix de- and re-mangling of constrained extensions",lib/Demangling/NodeDumper.cpp,+,"fprintf(stderr, ""\n"");",67,/data/download/swift/apple_swift7_old.cpp,/data/download/swift/apple_swift7_new.cpp
8e77ea7338cdf0456d8879ed5712fd79e4402178,"Merge pull request #8598 from eeckstein/demangling-extensions

Demangler: fix de- and re-mangling of constrained extensions",lib/Demangling/NodeDumper.cpp,+,"fprintf(stderr, ""Position = %zd:\n%.*s\n%*s\n"", Pos,",69,/data/download/swift/apple_swift7_old.cpp,/data/download/swift/apple_swift7_new.cpp
fcb88b4084809eacdfbafa4997e2756105d1c5f1,[TBD] Thread enough through to use UniversalLinkageInfo.,lib/FrontendTool/FrontendTool.cpp,-,"return writeTBD(Instance->getMainModule(), opts.getSingleOutputFilename());",528,/data/download/swift/apple_swift8_old.cpp,/data/download/swift/apple_swift8_new.cpp
fcb88b4084809eacdfbafa4997e2756105d1c5f1,[TBD] Thread enough through to use UniversalLinkageInfo.,lib/FrontendTool/FrontendTool.cpp,+,"return writeTBD(Instance->getMainModule(), hasMultipleIRGenThreads,",529,/data/download/swift/apple_swift8_old.cpp,/data/download/swift/apple_swift8_new.cpp
fcb88b4084809eacdfbafa4997e2756105d1c5f1,[TBD] Thread enough through to use UniversalLinkageInfo.,lib/FrontendTool/TBD.cpp,-,"bool swift::writeTBD(ModuleDecl *M, StringRef OutputFilename) {",41,/data/download/swift/apple_swift9_old.cpp,/data/download/swift/apple_swift9_new.cpp
fcb88b4084809eacdfbafa4997e2756105d1c5f1,[TBD] Thread enough through to use UniversalLinkageInfo.,lib/FrontendTool/TBD.cpp,+,"bool swift::writeTBD(ModuleDecl *M, bool hasMultipleIRGenThreads,",41,/data/download/swift/apple_swift9_old.cpp,/data/download/swift/apple_swift9_new.cpp
3c439096869792e209ea74e0d2ba07ee104d9a88,"Merge pull request #8599 from rudkx/propagate-constraints

[Constraint system] Fix some issues with constraint propagation.",lib/Sema/CSPropagate.cpp,+,"assert(!constraint->isDisabled() && ""Unexpected disabled constraint!"");",72,/data/download/swift/apple_swift10_old.cpp,/data/download/swift/apple_swift10_new.cpp
3c439096869792e209ea74e0d2ba07ee104d9a88,"Merge pull request #8599 from rudkx/propagate-constraints

[Constraint system] Fix some issues with constraint propagation.",lib/Sema/CSPropagate.cpp,+,"assert(tyvar && ""Expected type variable!"");",109,/data/download/swift/apple_swift10_old.cpp,/data/download/swift/apple_swift10_new.cpp
1c1e7d7b7979316d99717a28edbc70b693e26139,Merge pull request #8600 from adrian-prantl/31482203,lib/IRGen/DebugTypeInfo.cpp,-,assert((!isArchetype() || (isArchetype() && DC)) &&,33,/data/download/swift/apple_swift11_old.cpp,/data/download/swift/apple_swift11_new.cpp
7dd2828d275d91c48eda81c0fa7a803a211bea2f,"Demangler: add a debug dump function to print the internal state of the demangler.

Useful for debugging the demangler.",lib/Demangling/NodeDumper.cpp,+,"fprintf(stderr, ""NodeStack[%u] at position %zd:\n"", Idx, NodeStack[Idx].Pos);",65,/data/download/swift/apple_swift12_old.cpp,/data/download/swift/apple_swift12_new.cpp
7dd2828d275d91c48eda81c0fa7a803a211bea2f,"Demangler: add a debug dump function to print the internal state of the demangler.

Useful for debugging the demangler.",lib/Demangling/NodeDumper.cpp,+,"fprintf(stderr, ""\n"");",67,/data/download/swift/apple_swift12_old.cpp,/data/download/swift/apple_swift12_new.cpp
7dd2828d275d91c48eda81c0fa7a803a211bea2f,"Demangler: add a debug dump function to print the internal state of the demangler.

Useful for debugging the demangler.",lib/Demangling/NodeDumper.cpp,+,"fprintf(stderr, ""Position = %zd:\n%.*s\n%*s\n"", Pos,",69,/data/download/swift/apple_swift12_old.cpp,/data/download/swift/apple_swift12_new.cpp
991a66fd99741df57583597c1565306e359269d5,"Remove obsolete assertion.

b872127 made this check unncessary because we are now using the
GenericEnvironment to map Archetypes.

rdar://problem/31482203",lib/IRGen/DebugTypeInfo.cpp,-,assert((!isArchetype() || (isArchetype() && DC)) &&,33,/data/download/swift/apple_swift13_old.cpp,/data/download/swift/apple_swift13_new.cpp
88123195c9d4f9493547a253f3bba03d1f637314,"[Constraint system] Fix some issues with constraint propagation.

There are a handful of things, but the primary ones are that we really
don't want to track depth of recursion so much as whether we are
processing at the ""top level"" of constraints we're looking at or not so
that we can determine whether we can disable elements from a
disjunction.

Related, there are places where we can bail out earlier if we know
that *any* neighboring constraint passes.

Also updating the way we gather neighboring constraints to be
independent of the function that simplifies them. The original code was
wrong in that in bailed as soon as one of the simplifications
failed (which meant we might not gather all of them).",lib/Sema/CSPropagate.cpp,+,"assert(!constraint->isDisabled() && ""Unexpected disabled constraint!"");",72,/data/download/swift/apple_swift14_old.cpp,/data/download/swift/apple_swift14_new.cpp
88123195c9d4f9493547a253f3bba03d1f637314,"[Constraint system] Fix some issues with constraint propagation.

There are a handful of things, but the primary ones are that we really
don't want to track depth of recursion so much as whether we are
processing at the ""top level"" of constraints we're looking at or not so
that we can determine whether we can disable elements from a
disjunction.

Related, there are places where we can bail out earlier if we know
that *any* neighboring constraint passes.

Also updating the way we gather neighboring constraints to be
independent of the function that simplifies them. The original code was
wrong in that in bailed as soon as one of the simplifications
failed (which meant we might not gather all of them).",lib/Sema/CSPropagate.cpp,+,"assert(tyvar && ""Expected type variable!"");",109,/data/download/swift/apple_swift14_old.cpp,/data/download/swift/apple_swift14_new.cpp
4f52f84939853da8d219e95d6e26e26c6a6d040f,[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"DEBUG(llvm::dbgs() << ""FORWARD "" << TheForwardingValue << ""  to"" << *I);",728,/data/download/swift/apple_swift15_old.cpp,/data/download/swift/apple_swift15_new.cpp
4f52f84939853da8d219e95d6e26e26c6a6d040f,[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"DEBUG(llvm::dbgs() << ""WRITE "" << *Inst);",1080,/data/download/swift/apple_swift15_old.cpp,/data/download/swift/apple_swift15_new.cpp
4f52f84939853da8d219e95d6e26e26c6a6d040f,[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"DEBUG(llvm::dbgs() << ""READ "" << *Inst);",1084,/data/download/swift/apple_swift15_old.cpp,/data/download/swift/apple_swift15_new.cpp
4f52f84939853da8d219e95d6e26e26c6a6d040f,[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"printCtx(llvm::dbgs(), /*Verbose=*/false, /*Sorted=*/true)",1181,/data/download/swift/apple_swift15_old.cpp,/data/download/swift/apple_swift15_new.cpp
4f52f84939853da8d219e95d6e26e26c6a6d040f,[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"DEBUG(llvm::dbgs() << ""PROCESS "" << printCtx.getID(BB)",1361,/data/download/swift/apple_swift15_old.cpp,/data/download/swift/apple_swift15_new.cpp
4f52f84939853da8d219e95d6e26e26c6a6d040f,[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"BB->print(llvm::dbgs(), printCtx));",1363,/data/download/swift/apple_swift15_old.cpp,/data/download/swift/apple_swift15_new.cpp
4f52f84939853da8d219e95d6e26e26c6a6d040f,[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,DEBUG(S.dump(*this));,1386,/data/download/swift/apple_swift15_old.cpp,/data/download/swift/apple_swift15_new.cpp
4f52f84939853da8d219e95d6e26e26c6a6d040f,[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"DEBUG(llvm::dbgs() << ""PROCESS "" << printCtx.getID(BB)",1405,/data/download/swift/apple_swift15_old.cpp,/data/download/swift/apple_swift15_new.cpp
4f52f84939853da8d219e95d6e26e26c6a6d040f,[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,DEBUG(Forwarder.dump(*this));,1423,/data/download/swift/apple_swift15_old.cpp,/data/download/swift/apple_swift15_new.cpp
4f52f84939853da8d219e95d6e26e26c6a6d040f,[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"DEBUG(llvm::dbgs() << ""PROCESS "" << printCtx.getID(BB)",1429,/data/download/swift/apple_swift15_old.cpp,/data/download/swift/apple_swift15_new.cpp
4f52f84939853da8d219e95d6e26e26c6a6d040f,[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,DEBUG(Forwarder.dump(*this));,1449,/data/download/swift/apple_swift15_old.cpp,/data/download/swift/apple_swift15_new.cpp
4f52f84939853da8d219e95d6e26e26c6a6d040f,[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"DEBUG(llvm::dbgs() << ""PROCESS "" << printCtx.getID(BB) << "" for RLE.\n"");",1455,/data/download/swift/apple_swift15_old.cpp,/data/download/swift/apple_swift15_new.cpp
4f52f84939853da8d219e95d6e26e26c6a6d040f,[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,DEBUG(Forwarder.dump(*this));,1472,/data/download/swift/apple_swift15_old.cpp,/data/download/swift/apple_swift15_new.cpp
4f52f84939853da8d219e95d6e26e26c6a6d040f,[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,-,"DEBUG(llvm::dbgs() << ""RLE START\n"";",1481,/data/download/swift/apple_swift15_old.cpp,/data/download/swift/apple_swift15_new.cpp
4f52f84939853da8d219e95d6e26e26c6a6d040f,[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,-,"getLocation(i).print(llvm::dbgs(), &Fn->getModule());",1484,/data/download/swift/apple_swift15_old.cpp,/data/download/swift/apple_swift15_new.cpp
4f52f84939853da8d219e95d6e26e26c6a6d040f,[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,DEBUG(for (unsigned i = 0; i < LocationVault.size(); ++i) {,1550,/data/download/swift/apple_swift15_old.cpp,/data/download/swift/apple_swift15_new.cpp
4f52f84939853da8d219e95d6e26e26c6a6d040f,[SILOpt] Redundant load elimination. Add debug output.,lib/SILOptimizer/Transforms/RedundantLoadElimination.cpp,+,"getLocation(i).print(llvm::dbgs(), &Fn->getModule());",1552,/data/download/swift/apple_swift15_old.cpp,/data/download/swift/apple_swift15_new.cpp
7ea54c8927c964a6e534f463c678c94d71aeab33,SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,+,void SILPrintContext::ID::print(raw_ostream &OS) {,113,/data/download/swift/apple_swift16_old.cpp,/data/download/swift/apple_swift16_new.cpp
7ea54c8927c964a6e534f463c678c94d71aeab33,SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,+,i.print(OS);,127,/data/download/swift/apple_swift16_old.cpp,/data/download/swift/apple_swift16_new.cpp
7ea54c8927c964a6e534f463c678c94d71aeab33,SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,-,"*this << getID(BB); printBlockArguments(BB); *this << "":"";",554,/data/download/swift/apple_swift16_old.cpp,/data/download/swift/apple_swift16_new.cpp
7ea54c8927c964a6e534f463c678c94d71aeab33,SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,+,printBlockArguments(BB);,540,/data/download/swift/apple_swift16_old.cpp,/data/download/swift/apple_swift16_new.cpp
7ea54c8927c964a6e534f463c678c94d71aeab33,SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,-,"*this << "", error "" << getID(AI->getErrorBB());",956,/data/download/swift/apple_swift16_old.cpp,/data/download/swift/apple_swift16_new.cpp
7ea54c8927c964a6e534f463c678c94d71aeab33,SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,+,"*this << "", error "" << Ctx.getID(AI->getErrorBB());",942,/data/download/swift/apple_swift16_old.cpp,/data/download/swift/apple_swift16_new.cpp
7ea54c8927c964a6e534f463c678c94d71aeab33,SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,+,"static void printBlockID(raw_ostream &OS, SILBasicBlock *bb) {",1761,/data/download/swift/apple_swift16_old.cpp,/data/download/swift/apple_swift16_new.cpp
7ea54c8927c964a6e534f463c678c94d71aeab33,SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,-,OS << SILPrinter(Ctx).getID(this);,1801,/data/download/swift/apple_swift16_old.cpp,/data/download/swift/apple_swift16_new.cpp
7ea54c8927c964a6e534f463c678c94d71aeab33,SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,+,"printBlockID(OS, this);",1767,/data/download/swift/apple_swift16_old.cpp,/data/download/swift/apple_swift16_new.cpp
7ea54c8927c964a6e534f463c678c94d71aeab33,SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,+,"void SILBasicBlock::print(raw_ostream &OS, SILPrintContext &Ctx) const {",1794,/data/download/swift/apple_swift16_old.cpp,/data/download/swift/apple_swift16_new.cpp
7ea54c8927c964a6e534f463c678c94d71aeab33,SILPrintContext: support for printing consistent block numbers.,lib/SIL/SILPrinter.cpp,+,SILPrinter(Ctx).print(this);,1795,/data/download/swift/apple_swift16_old.cpp,/data/download/swift/apple_swift16_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,ErrorBehaviorKind() : Value(Invalid) {},230,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,ErrorBehaviorKind(inner_t Inner) : Value(Inner) { assert(Value != Invalid); },231,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,bool shouldAssert() const {,233,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,assert(Value != Invalid);,234,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,bool shouldPrintMessage() const {,238,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,assert(Value != Invalid);,239,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,assert(Value != Invalid);,244,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,": Mod(M), Op(Op), BaseValue(BaseValue), ErrorBehavior(ErrorBehavior) {",275,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,bool handleError(llvm::function_ref<void()> &&MessagePrinterFunc) const {,310,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,if (ErrorBehavior.shouldPrintMessage()) {,311,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,MessagePrinterFunc();,312,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"assert(ErrorBehavior.shouldAssert() && ""At this point, we should assert"");",319,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,return handleError([&]() {,341,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,": Result(), Mod(M), TUB(TUB), Value(V), ErrorBehavior(ErrorBehavior),",1256,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"assert(Value && ""Can not initialize a checker with an empty SILValue"");",1258,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"assert(Result.hasValue() && ""Can not call until check() is called"");",1281,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"assert(Result.getValue() && ""Can not call if check() returned false"");",1282,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"assert(Result.hasValue() && ""Can not call until check() is called"");",1295,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"assert(Result.getValue() && ""Can not call if check() returned false"");",1296,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,bool handleError(llvm::function_ref<void()> &&MessagePrinterFunc) const {,1344,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,if (ErrorBehavior.shouldPrintMessage()) {,1345,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,MessagePrinterFunc();,1346,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"assert(ErrorBehavior.shouldAssert() && ""At this point, we should assert"");",1353,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,-,"<< UserBlock->getDebugID() << ""\n\n"";",1262,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,return !handleError([&]() {,1374,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"<< UserBlock->getDebugID() << ""\n\n"";",1380,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,-,"<< UserBlock->getDebugID() << ""\n\n"";",1287,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,return !handleError([&] {,1400,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"<< UserBlock->getDebugID() << ""\n\n"";",1406,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,-,"llvm::errs() << ""Block: bb"" << UserBlock->getDebugID() << ""\n\n"";",1308,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,return !handleError([&] {,1422,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"llvm::errs() << ""Block: bb"" << UserBlock->getDebugID() << ""\n\n"";",1428,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,return !handleError([&] {,1574,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,return !handleError([&] {,1612,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,return handleError([&] {,1630,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,return handleError([&] {,1644,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,return handleError([] {});,1730,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,return handleError([] {});,1735,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,return handleError([] {});,1775,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,return handleError([] {});,1846,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,-,"llvm::errs() << ""        bb"" << BB->getDebugID();",1760,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,return handleError([&] {,1861,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"llvm::errs() << ""        bb"" << BB->getDebugID();",1867,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,-,"<< Pair.first->getDebugID() << ""\n"";",1778,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,return handleError([&] {,1877,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"<< Pair.first->getDebugID() << ""\n"";",1884,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,"assert(F && ""Instructions and arguments should have a function"");",1985,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
a9d98089c8062ad051dc3edbd3c209e595ac8d67,Merge pull request #8573 from gottesmm/ownership_verifier_refactoring,lib/SIL/SILOwnershipVerifier.cpp,+,ErrorBehaviorKind ErrorBehavior(ErrorBehaviorKind::ReturnFalse);,1992,/data/download/swift/apple_swift17_old.cpp,/data/download/swift/apple_swift17_new.cpp
e34bbdf2fbef238736e0af961b49bb0faa20bdf8,"[semantic-sil] Create a new higher level API for accessing the ownership checker. It is meant to be used by passes.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,-,": Result(), Mod(M), TUB(TUB), Value(V), ErrorBehavior(ErrorBehavior) {",1258,/data/download/swift/apple_swift18_old.cpp,/data/download/swift/apple_swift18_new.cpp
e34bbdf2fbef238736e0af961b49bb0faa20bdf8,"[semantic-sil] Create a new higher level API for accessing the ownership checker. It is meant to be used by passes.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,": Result(), Mod(M), TUB(TUB), Value(V), ErrorBehavior(ErrorBehavior),",1260,/data/download/swift/apple_swift18_old.cpp,/data/download/swift/apple_swift18_new.cpp
e34bbdf2fbef238736e0af961b49bb0faa20bdf8,"[semantic-sil] Create a new higher level API for accessing the ownership checker. It is meant to be used by passes.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"assert(F && ""Instructions and arguments should have a function"");",1991,/data/download/swift/apple_swift18_old.cpp,/data/download/swift/apple_swift18_new.cpp
e34bbdf2fbef238736e0af961b49bb0faa20bdf8,"[semantic-sil] Create a new higher level API for accessing the ownership checker. It is meant to be used by passes.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,ErrorBehaviorKind ErrorBehavior(ErrorBehaviorKind::ReturnFalse);,1998,/data/download/swift/apple_swift18_old.cpp,/data/download/swift/apple_swift18_new.cpp
9ceb9d5ec9fa214bd550bb8ce7811462286eb3ff,Merge pull request #8571 from DougGregor/where-clause-validation,lib/AST/GenericSignatureBuilder.cpp,+,if (!Req->getFirstType()->hasError() &&,2773,/data/download/swift/apple_swift19_old.cpp,/data/download/swift/apple_swift19_new.cpp
9ceb9d5ec9fa214bd550bb8ce7811462286eb3ff,Merge pull request #8571 from DougGregor/where-clause-validation,lib/AST/GenericSignatureBuilder.cpp,+,!Req->getSecondType()->hasError()) {,2774,/data/download/swift/apple_swift19_old.cpp,/data/download/swift/apple_swift19_new.cpp
44c2f849d68d2680da784aa90592ee28e59fb1fe,"[Type checker] Continue validating requirements after an error.

We want to validate both type in same-type or conformance constraints,
even when the first type is ill-formed, so we don't leave null types
around for later phases to crash on.

Fixes rdar://problem/31093854.",lib/AST/GenericSignatureBuilder.cpp,+,if (!Req->getFirstType()->hasError() &&,2773,/data/download/swift/apple_swift20_old.cpp,/data/download/swift/apple_swift20_new.cpp
44c2f849d68d2680da784aa90592ee28e59fb1fe,"[Type checker] Continue validating requirements after an error.

We want to validate both type in same-type or conformance constraints,
even when the first type is ill-formed, so we don't leave null types
around for later phases to crash on.

Fixes rdar://problem/31093854.",lib/AST/GenericSignatureBuilder.cpp,+,!Req->getSecondType()->hasError()) {,2774,/data/download/swift/apple_swift20_old.cpp,/data/download/swift/apple_swift20_new.cpp
315157cbb70251ce4a0e59e3bbf8b963ef985a25,"[semantic-sil] Refactor the ownership checker to store the list of uses that it finds and provide the ability to provide these to users of the ownership checker.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,-,": Mod(M), TUB(TUB), Value(V), ErrorBehavior(ErrorBehavior) {}",1246,/data/download/swift/apple_swift21_old.cpp,/data/download/swift/apple_swift21_new.cpp
315157cbb70251ce4a0e59e3bbf8b963ef985a25,"[semantic-sil] Refactor the ownership checker to store the list of uses that it finds and provide the ability to provide these to users of the ownership checker.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,": Result(), Mod(M), TUB(TUB), Value(V), ErrorBehavior(ErrorBehavior) {",1258,/data/download/swift/apple_swift21_old.cpp,/data/download/swift/apple_swift21_new.cpp
315157cbb70251ce4a0e59e3bbf8b963ef985a25,"[semantic-sil] Refactor the ownership checker to store the list of uses that it finds and provide the ability to provide these to users of the ownership checker.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"assert(Value && ""Can not initialize a checker with an empty SILValue"");",1259,/data/download/swift/apple_swift21_old.cpp,/data/download/swift/apple_swift21_new.cpp
315157cbb70251ce4a0e59e3bbf8b963ef985a25,"[semantic-sil] Refactor the ownership checker to store the list of uses that it finds and provide the ability to provide these to users of the ownership checker.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"assert(Result.hasValue() && ""Can not call until check() is called"");",1282,/data/download/swift/apple_swift21_old.cpp,/data/download/swift/apple_swift21_new.cpp
315157cbb70251ce4a0e59e3bbf8b963ef985a25,"[semantic-sil] Refactor the ownership checker to store the list of uses that it finds and provide the ability to provide these to users of the ownership checker.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"assert(Result.getValue() && ""Can not call if check() returned false"");",1283,/data/download/swift/apple_swift21_old.cpp,/data/download/swift/apple_swift21_new.cpp
315157cbb70251ce4a0e59e3bbf8b963ef985a25,"[semantic-sil] Refactor the ownership checker to store the list of uses that it finds and provide the ability to provide these to users of the ownership checker.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"assert(Result.hasValue() && ""Can not call until check() is called"");",1296,/data/download/swift/apple_swift21_old.cpp,/data/download/swift/apple_swift21_new.cpp
315157cbb70251ce4a0e59e3bbf8b963ef985a25,"[semantic-sil] Refactor the ownership checker to store the list of uses that it finds and provide the ability to provide these to users of the ownership checker.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"assert(Result.getValue() && ""Can not call if check() returned false"");",1297,/data/download/swift/apple_swift21_old.cpp,/data/download/swift/apple_swift21_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,ErrorBehaviorKind() : Value(Invalid) {},232,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,ErrorBehaviorKind(inner_t Inner) : Value(Inner) { assert(Value != Invalid); },233,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,bool shouldAssert() const {,235,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,assert(Value != Invalid);,236,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,bool shouldPrintMessage() const {,240,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,assert(Value != Invalid);,241,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,assert(Value != Invalid);,246,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,": Mod(M), Op(Op), BaseValue(BaseValue), ErrorBehavior(ErrorBehavior) {",277,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,bool handleError(llvm::function_ref<void()> &&MessagePrinterFunc) const {,312,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,if (ErrorBehavior.shouldPrintMessage()) {,313,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,MessagePrinterFunc();,314,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"assert(ErrorBehavior.shouldAssert() && ""At this point, we should assert"");",321,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,return handleError([&]() {,343,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,": Mod(M), TUB(TUB), Value(V), ErrorBehavior(ErrorBehavior) {}",1246,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,bool handleError(llvm::function_ref<void()> &&MessagePrinterFunc) const {,1299,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,if (ErrorBehavior.shouldPrintMessage()) {,1300,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,MessagePrinterFunc();,1301,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"assert(ErrorBehavior.shouldAssert() && ""At this point, we should assert"");",1308,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,-,"<< UserBlock->getDebugID() << ""\n\n"";",1262,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,return !handleError([&]() {,1329,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"<< UserBlock->getDebugID() << ""\n\n"";",1335,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,-,"<< UserBlock->getDebugID() << ""\n\n"";",1287,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,return !handleError([&] {,1355,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"<< UserBlock->getDebugID() << ""\n\n"";",1361,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,-,"llvm::errs() << ""Block: bb"" << UserBlock->getDebugID() << ""\n\n"";",1308,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,return !handleError([&] {,1377,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"llvm::errs() << ""Block: bb"" << UserBlock->getDebugID() << ""\n\n"";",1383,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,return !handleError([&] {,1529,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,return !handleError([&] {,1567,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,return handleError([&] {,1585,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,return handleError([&] {,1599,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,return handleError([] {});,1687,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,return handleError([] {});,1692,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,return handleError([] {});,1732,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,return handleError([] {});,1803,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,-,"llvm::errs() << ""        bb"" << BB->getDebugID();",1760,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,return handleError([&] {,1818,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"llvm::errs() << ""        bb"" << BB->getDebugID();",1824,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,-,"<< Pair.first->getDebugID() << ""\n"";",1778,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,return handleError([&] {,1834,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
a5825d94b94931d1d3cc0565e887ebf166e7fd3b,"[semantic-sil] Refactor the ownership checker's handling on finding an error.

Today the ownership checker has two different behaviors on detecting an error:

1. In normal operating mode, it prints a message to stderr and asserts.
2. In testing mode, it prints a message to stderr and returns false.

This refactoring will allow me to add a third mode:

1. In optimization mode, it does not print a message and just returns false.

This will allow me to use the verifier in an early ARC optimization that I need
to prevent COW copies due to refactoring in SILGenPattern.

rdar://29870610",lib/SIL/SILOwnershipVerifier.cpp,+,"<< Pair.first->getDebugID() << ""\n"";",1841,/data/download/swift/apple_swift22_old.cpp,/data/download/swift/apple_swift22_new.cpp
aa880a190daa15da93c9e3cef94116a937067d57,Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/AST/ProtocolConformance.cpp,-,assert((conforms ||,596,/data/download/swift/apple_swift23_old.cpp,/data/download/swift/apple_swift23_new.cpp
aa880a190daa15da93c9e3cef94116a937067d57,Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/AST/ProtocolConformance.cpp,-,specializedType->hasError()) &&,599,/data/download/swift/apple_swift23_old.cpp,/data/download/swift/apple_swift23_new.cpp
aa880a190daa15da93c9e3cef94116a937067d57,Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/AST/SubstitutionMap.cpp,-,assert(!(type->hasArchetype() &&,77,/data/download/swift/apple_swift24_old.cpp,/data/download/swift/apple_swift24_new.cpp
aa880a190daa15da93c9e3cef94116a937067d57,Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/AST/SubstitutionMap.cpp,+,getGenericSignature()->print(out);,391,/data/download/swift/apple_swift24_old.cpp,/data/download/swift/apple_swift24_new.cpp
aa880a190daa15da93c9e3cef94116a937067d57,Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Sema/CSApply.cpp,-,"assert(conformance && ""Missing conformance information"");",53,/data/download/swift/apple_swift25_old.cpp,/data/download/swift/apple_swift25_new.cpp
aa880a190daa15da93c9e3cef94116a937067d57,Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Sema/TypeCheckProtocol.cpp,-,"assert(!replacement->isTypeParameter() && ""Can't be dependent"");",2383,/data/download/swift/apple_swift26_old.cpp,/data/download/swift/apple_swift26_new.cpp
aa880a190daa15da93c9e3cef94116a937067d57,Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Sema/TypeCheckProtocol.cpp,-,bool isError = replacement->hasError();,2386,/data/download/swift/apple_swift26_old.cpp,/data/download/swift/apple_swift26_new.cpp
aa880a190daa15da93c9e3cef94116a937067d57,Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Sema/TypeCheckProtocol.cpp,-,assert((conformance || isError) &&,2390,/data/download/swift/apple_swift26_old.cpp,/data/download/swift/apple_swift26_new.cpp
aa880a190daa15da93c9e3cef94116a937067d57,Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Sema/TypeCheckProtocol.cpp,-,"assert(Conformance->getTypeWitness(assocType, nullptr).getReplacement()",2481,/data/download/swift/apple_swift26_old.cpp,/data/download/swift/apple_swift26_new.cpp
aa880a190daa15da93c9e3cef94116a937067d57,Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Sema/TypeCheckProtocol.cpp,+,"assert(Conformance->getTypeWitness(assocType, nullptr)",2451,/data/download/swift/apple_swift26_old.cpp,/data/download/swift/apple_swift26_new.cpp
aa880a190daa15da93c9e3cef94116a937067d57,Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Sema/TypeCheckProtocol.cpp,-,->hasError()) {,2782,/data/download/swift/apple_swift26_old.cpp,/data/download/swift/apple_swift26_new.cpp
aa880a190daa15da93c9e3cef94116a937067d57,Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Sema/TypeCheckProtocol.cpp,+,"if (Conformance->getTypeWitness(assocType, nullptr)->hasError()) {",2747,/data/download/swift/apple_swift26_old.cpp,/data/download/swift/apple_swift26_new.cpp
aa880a190daa15da93c9e3cef94116a937067d57,Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Sema/TypeCheckProtocol.cpp,-,->hasError()) {,4753,/data/download/swift/apple_swift26_old.cpp,/data/download/swift/apple_swift26_new.cpp
aa880a190daa15da93c9e3cef94116a937067d57,Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Sema/TypeCheckProtocol.cpp,+,"if (Conformance->getTypeWitness(assocType, nullptr)->hasError()) {",4717,/data/download/swift/apple_swift26_old.cpp,/data/download/swift/apple_swift26_new.cpp
aa880a190daa15da93c9e3cef94116a937067d57,Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Serialization/Deserialization.cpp,-,assert(third.hasValue());,4435,/data/download/swift/apple_swift27_old.cpp,/data/download/swift/apple_swift27_new.cpp
aa880a190daa15da93c9e3cef94116a937067d57,Merge pull request #8557 from DougGregor/substitution-map-cleanups,lib/Serialization/Serialization.cpp,-,"writeSubstitutions(witness, DeclTypeAbbrCodes);",1347,/data/download/swift/apple_swift28_old.cpp,/data/download/swift/apple_swift28_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"SILLocation::DebugLoc getDebugLoc(SourceManager &SM, WithLoc *S,",193,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"SILLocation::DebugLoc getDebugLoc(IRGenDebugInfo &DI, WithLoc *S,",193,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"static SILLocation::DebugLoc getDebugLocation(Optional<SILLocation> OptLoc,",217,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,IRGenDebugInfo::decodeDebugLoc(SILLocation Loc) {,225,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,if (Loc.isDebugInfoLoc()),226,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,return Loc.getDebugInfoLoc();,227,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,return decodeSourceLoc(Loc.getDebugSourceLoc());,228,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,IRGenDebugInfo::getDebugLocation(Optional<SILLocation> OptLoc) {,232,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,return OptLoc->decodeDebugLoc(SM);,221,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,return decodeDebugLoc(*OptLoc);,236,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,auto L = CS->Loc.decodeDebugLoc(SM);,263,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,auto L = decodeDebugLoc(CS->Loc);,283,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLocation(Loc, SM);",308,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,L = getDebugLocation(Loc);,337,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"auto Loc = getDebugLoc(SM, NTD);",552,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"auto Loc = getDebugLoc(*this, NTD);",556,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,L = DS->Loc.decodeDebugLoc(SM);,669,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,L = decodeDebugLoc(DS->Loc);,673,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, D);",760,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, D);",764,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"auto Loc = getDebugLoc(SM, VarDecl);",899,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"auto Loc = getDebugLoc(*this, VarDecl);",903,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1476,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1480,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1494,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1498,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1534,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1538,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1543,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1547,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1556,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1560,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1566,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1570,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1575,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1579,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Archetype->getAssocType());",1611,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Archetype->getAssocType());",1615,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, DbgTy.getDecl());",1648,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, DbgTy.getDecl());",1652,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1670,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1674,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1683,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1687,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, DbgTy.getDecl());",1712,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, DbgTy.getDecl());",1716,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1724,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1728,/data/download/swift/apple_swift29_old.cpp,/data/download/swift/apple_swift29_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/SIL/SILDebugScope.cpp,+,"SILDebugScope::SILDebugScope(SILLocation Loc, SILFunction *SILFn,",25,/data/download/swift/apple_swift30_old.cpp,/data/download/swift/apple_swift30_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/SIL/SILDebugScope.cpp,+,"assert(SILFn && ""no parent provided"");",32,/data/download/swift/apple_swift30_old.cpp,/data/download/swift/apple_swift30_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/SIL/SILDebugScope.cpp,+,SILDebugScope::SILDebugScope(SILLocation Loc),37,/data/download/swift/apple_swift30_old.cpp,/data/download/swift/apple_swift30_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/SIL/SILDebugScope.cpp,+,"assert(Scope->Parent.is<SILFunction *>() && ""orphaned scope"");",47,/data/download/swift/apple_swift30_old.cpp,/data/download/swift/apple_swift30_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/SIL/SILPrinter.cpp,-,CallSite.getSourceLoc().print(,761,/data/download/swift/apple_swift31_old.cpp,/data/download/swift/apple_swift31_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/SIL/SILPrinter.cpp,+,CallSite.getSourceLoc().print(,761,/data/download/swift/apple_swift31_old.cpp,/data/download/swift/apple_swift31_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/SILOptimizer/Utils/SILInliner.cpp,-,"SILDebugScope(AI.getLoc(), &F, AIScope);",74,/data/download/swift/apple_swift32_old.cpp,/data/download/swift/apple_swift32_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/SILOptimizer/Utils/SILInliner.cpp,-,assert(CallSiteScope->getParentFunction() == &F);,75,/data/download/swift/apple_swift32_old.cpp,/data/download/swift/apple_swift32_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/SILOptimizer/Utils/SILInliner.cpp,+,"SILDebugScope(AI.getLoc(), nullptr, AIScope, AIScope->InlinedCallSite);",74,/data/download/swift/apple_swift32_old.cpp,/data/download/swift/apple_swift32_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/SILOptimizer/Utils/SILInliner.cpp,+,assert(CallSiteScope->getParentFunction() == &F);,77,/data/download/swift/apple_swift32_old.cpp,/data/download/swift/apple_swift32_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/SILOptimizer/Utils/SILInliner.cpp,-,assert(CalleeScope);,201,/data/download/swift/apple_swift32_old.cpp,/data/download/swift/apple_swift32_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/SILOptimizer/Utils/SILInliner.cpp,-,"SILDebugScope(CallSiteScope, CalleeScope);",207,/data/download/swift/apple_swift32_old.cpp,/data/download/swift/apple_swift32_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/SILOptimizer/Utils/SILInliner.cpp,-,assert(CallSiteScope->Parent == InlineScope->InlinedCallSite->Parent);,208,/data/download/swift/apple_swift32_old.cpp,/data/download/swift/apple_swift32_new.cpp
024033cf97a63effb64cf214ff3c9e8660bf96df,Merge pull request #8533 from adrian-prantl/28311051,lib/SILOptimizer/Utils/SILInliner.cpp,+,auto *InlinedScope = new (M) SILDebugScope(,210,/data/download/swift/apple_swift32_old.cpp,/data/download/swift/apple_swift32_new.cpp
6878538ba147062c52ae15815174935b61819c13,[AST] Remove GenericEnvironment from SubstitutionMap; it's unnecessary.,lib/AST/SubstitutionMap.cpp,-,assert(!(type->hasArchetype() &&,77,/data/download/swift/apple_swift33_old.cpp,/data/download/swift/apple_swift33_new.cpp
8748601b26a04e0f85e95aaf43445d905ab4dcad,"[SubstitutionMap] Dump generic signature in debug output.

You can't interpret a conformance map without a generic signature, so
add it to the debug output.",lib/AST/SubstitutionMap.cpp,+,getGenericSignature()->print(out);,398,/data/download/swift/apple_swift34_old.cpp,/data/download/swift/apple_swift34_new.cpp
5c89eb84f03040021581b24e026340517460eb02,"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/AST/ProtocolConformance.cpp,-,assert((conforms ||,596,/data/download/swift/apple_swift35_old.cpp,/data/download/swift/apple_swift35_new.cpp
5c89eb84f03040021581b24e026340517460eb02,"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/AST/ProtocolConformance.cpp,-,specializedType->hasError()) &&,599,/data/download/swift/apple_swift35_old.cpp,/data/download/swift/apple_swift35_new.cpp
5c89eb84f03040021581b24e026340517460eb02,"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Sema/CSApply.cpp,-,"assert(conformance && ""Missing conformance information"");",53,/data/download/swift/apple_swift36_old.cpp,/data/download/swift/apple_swift36_new.cpp
5c89eb84f03040021581b24e026340517460eb02,"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Sema/TypeCheckProtocol.cpp,-,"assert(!replacement->isTypeParameter() && ""Can't be dependent"");",2383,/data/download/swift/apple_swift37_old.cpp,/data/download/swift/apple_swift37_new.cpp
5c89eb84f03040021581b24e026340517460eb02,"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Sema/TypeCheckProtocol.cpp,-,bool isError = replacement->hasError();,2386,/data/download/swift/apple_swift37_old.cpp,/data/download/swift/apple_swift37_new.cpp
5c89eb84f03040021581b24e026340517460eb02,"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Sema/TypeCheckProtocol.cpp,-,assert((conformance || isError) &&,2390,/data/download/swift/apple_swift37_old.cpp,/data/download/swift/apple_swift37_new.cpp
5c89eb84f03040021581b24e026340517460eb02,"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Sema/TypeCheckProtocol.cpp,-,"assert(Conformance->getTypeWitness(assocType, nullptr).getReplacement()",2481,/data/download/swift/apple_swift37_old.cpp,/data/download/swift/apple_swift37_new.cpp
5c89eb84f03040021581b24e026340517460eb02,"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Sema/TypeCheckProtocol.cpp,+,"assert(Conformance->getTypeWitness(assocType, nullptr)",2451,/data/download/swift/apple_swift37_old.cpp,/data/download/swift/apple_swift37_new.cpp
5c89eb84f03040021581b24e026340517460eb02,"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Sema/TypeCheckProtocol.cpp,-,->hasError()) {,2782,/data/download/swift/apple_swift37_old.cpp,/data/download/swift/apple_swift37_new.cpp
5c89eb84f03040021581b24e026340517460eb02,"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Sema/TypeCheckProtocol.cpp,+,"if (Conformance->getTypeWitness(assocType, nullptr)->hasError()) {",2747,/data/download/swift/apple_swift37_old.cpp,/data/download/swift/apple_swift37_new.cpp
5c89eb84f03040021581b24e026340517460eb02,"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Sema/TypeCheckProtocol.cpp,-,->hasError()) {,4753,/data/download/swift/apple_swift37_old.cpp,/data/download/swift/apple_swift37_new.cpp
5c89eb84f03040021581b24e026340517460eb02,"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Sema/TypeCheckProtocol.cpp,+,"if (Conformance->getTypeWitness(assocType, nullptr)->hasError()) {",4717,/data/download/swift/apple_swift37_old.cpp,/data/download/swift/apple_swift37_new.cpp
5c89eb84f03040021581b24e026340517460eb02,"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Serialization/Deserialization.cpp,-,assert(third.hasValue());,4435,/data/download/swift/apple_swift38_old.cpp,/data/download/swift/apple_swift38_new.cpp
5c89eb84f03040021581b24e026340517460eb02,"[AST] Drop substitutions from type witnesses.

Nobody is using the actual substitutions, but we sure did a lot of
work to cope with them.",lib/Serialization/Serialization.cpp,-,"writeSubstitutions(witness, DeclTypeAbbrCodes);",1347,/data/download/swift/apple_swift39_old.cpp,/data/download/swift/apple_swift39_new.cpp
68824db585d6bd8313b32028fde9482e0d6ee8c1,"Merge pull request #8551 from rjmccall/elementary-access-markers

Start generating elementary access markers in SILGen",lib/SILGen/SILGenLValue.cpp,+,: WritebackPseudoComponent(typeData) {},523,/data/download/swift/apple_swift40_old.cpp,/data/download/swift/apple_swift40_new.cpp
68824db585d6bd8313b32028fde9482e0d6ee8c1,"Merge pull request #8551 from rjmccall/elementary-access-markers

Start generating elementary access markers in SILGen",lib/SILGen/SILGenLValue.cpp,+,"void writeback(SILGenFunction &SGF, SILLocation loc,",526,/data/download/swift/apple_swift40_old.cpp,/data/download/swift/apple_swift40_new.cpp
68824db585d6bd8313b32028fde9482e0d6ee8c1,"Merge pull request #8551 from rjmccall/elementary-access-markers

Start generating elementary access markers in SILGen",lib/SILGen/SILGenLValue.cpp,+,assert(base.isLValue());,530,/data/download/swift/apple_swift40_old.cpp,/data/download/swift/apple_swift40_new.cpp
68824db585d6bd8313b32028fde9482e0d6ee8c1,"Merge pull request #8551 from rjmccall/elementary-access-markers

Start generating elementary access markers in SILGen",lib/SILGen/SILGenLValue.cpp,+,void print(raw_ostream &OS) const override {,534,/data/download/swift/apple_swift40_old.cpp,/data/download/swift/apple_swift40_new.cpp
68824db585d6bd8313b32028fde9482e0d6ee8c1,"Merge pull request #8551 from rjmccall/elementary-access-markers

Start generating elementary access markers in SILGen",lib/SILGen/SILGenLValue.cpp,+,"assert(Value.isLValue() && ""nonlvalue has enforcement?"");",563,/data/download/swift/apple_swift40_old.cpp,/data/download/swift/apple_swift40_new.cpp
68824db585d6bd8313b32028fde9482e0d6ee8c1,"Merge pull request #8551 from rjmccall/elementary-access-markers

Start generating elementary access markers in SILGen",lib/SILGen/SILGenLValue.cpp,+,"pushWriteback(SGF, loc, std::move(component), accessedMV,",583,/data/download/swift/apple_swift40_old.cpp,/data/download/swift/apple_swift40_new.cpp
68824db585d6bd8313b32028fde9482e0d6ee8c1,"Merge pull request #8551 from rjmccall/elementary-access-markers

Start generating elementary access markers in SILGen",lib/SILGen/SILGenLValue.cpp,+,assert(var->getDeclContext()->isTypeContext() &&,1702,/data/download/swift/apple_swift40_old.cpp,/data/download/swift/apple_swift40_new.cpp
b3f642853caa6f3da4981bb2ac2d247e7ee0f34b,Rearrange IRGenDebugInfo::setCurrentLoc() to avoid decoding throwaway locations.,lib/IRGen/IRGenDebugInfo.cpp,-,auto L = getDebugLocation(Loc);,307,/data/download/swift/apple_swift41_old.cpp,/data/download/swift/apple_swift41_new.cpp
b3f642853caa6f3da4981bb2ac2d247e7ee0f34b,Rearrange IRGenDebugInfo::setCurrentLoc() to avoid decoding throwaway locations.,lib/IRGen/IRGenDebugInfo.cpp,+,L = getDebugLocation(Loc);,337,/data/download/swift/apple_swift41_old.cpp,/data/download/swift/apple_swift41_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"SILLocation::DebugLoc getDebugLoc(SourceManager &SM, WithLoc *S,",193,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"SILLocation::DebugLoc getDebugLoc(IRGenDebugInfo &DI, WithLoc *S,",193,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"static SILLocation::DebugLoc getDebugLocation(Optional<SILLocation> OptLoc,",217,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,IRGenDebugInfo::decodeDebugLoc(SILLocation Loc) {,225,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,if (Loc.isDebugInfoLoc()),226,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,return Loc.getDebugInfoLoc();,227,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,return decodeSourceLoc(Loc.getDebugSourceLoc());,228,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,IRGenDebugInfo::getDebugLocation(Optional<SILLocation> OptLoc) {,232,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,return OptLoc->decodeDebugLoc(SM);,221,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,return decodeDebugLoc(*OptLoc);,236,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,auto L = CS->Loc.decodeDebugLoc(SM);,263,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,auto L = decodeDebugLoc(CS->Loc);,266,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLocation(Loc, SM);",308,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,auto L = getDebugLocation(Loc);,307,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"auto Loc = getDebugLoc(SM, NTD);",552,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"auto Loc = getDebugLoc(*this, NTD);",550,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,L = DS->Loc.decodeDebugLoc(SM);,669,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,L = decodeDebugLoc(DS->Loc);,667,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, D);",760,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, D);",758,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"auto Loc = getDebugLoc(SM, VarDecl);",899,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"auto Loc = getDebugLoc(*this, VarDecl);",897,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1476,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1474,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1494,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1492,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1534,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1532,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1543,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1541,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1556,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1554,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1566,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1564,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1575,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1573,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Archetype->getAssocType());",1611,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Archetype->getAssocType());",1609,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, DbgTy.getDecl());",1648,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, DbgTy.getDecl());",1646,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1670,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1668,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1683,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1681,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, DbgTy.getDecl());",1712,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, DbgTy.getDecl());",1710,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,-,"auto L = getDebugLoc(SM, Decl);",1724,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/IRGen/IRGenDebugInfo.cpp,+,"auto L = getDebugLoc(*this, Decl);",1722,/data/download/swift/apple_swift42_old.cpp,/data/download/swift/apple_swift42_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SIL/SILDebugScope.cpp,+,"SILDebugScope::SILDebugScope(SILLocation Loc, SILFunction *SILFn,",25,/data/download/swift/apple_swift43_old.cpp,/data/download/swift/apple_swift43_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SIL/SILDebugScope.cpp,+,"assert(SILFn && ""no parent provided"");",32,/data/download/swift/apple_swift43_old.cpp,/data/download/swift/apple_swift43_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SIL/SILDebugScope.cpp,+,SILDebugScope::SILDebugScope(SILLocation Loc),37,/data/download/swift/apple_swift43_old.cpp,/data/download/swift/apple_swift43_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SIL/SILDebugScope.cpp,+,"assert(Scope->Parent.is<SILFunction *>() && ""orphaned scope"");",47,/data/download/swift/apple_swift43_old.cpp,/data/download/swift/apple_swift43_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SIL/SILPrinter.cpp,-,CallSite.getSourceLoc().print(,761,/data/download/swift/apple_swift44_old.cpp,/data/download/swift/apple_swift44_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SIL/SILPrinter.cpp,+,CallSite.getSourceLoc().print(,761,/data/download/swift/apple_swift44_old.cpp,/data/download/swift/apple_swift44_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SILOptimizer/Utils/SILInliner.cpp,-,"SILDebugScope(AI.getLoc(), &F, AIScope);",74,/data/download/swift/apple_swift45_old.cpp,/data/download/swift/apple_swift45_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SILOptimizer/Utils/SILInliner.cpp,-,assert(CallSiteScope->getParentFunction() == &F);,75,/data/download/swift/apple_swift45_old.cpp,/data/download/swift/apple_swift45_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SILOptimizer/Utils/SILInliner.cpp,+,"SILDebugScope(AI.getLoc(), nullptr, AIScope, AIScope->InlinedCallSite);",74,/data/download/swift/apple_swift45_old.cpp,/data/download/swift/apple_swift45_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SILOptimizer/Utils/SILInliner.cpp,+,assert(CallSiteScope->getParentFunction() == &F);,77,/data/download/swift/apple_swift45_old.cpp,/data/download/swift/apple_swift45_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SILOptimizer/Utils/SILInliner.cpp,-,assert(CalleeScope);,201,/data/download/swift/apple_swift45_old.cpp,/data/download/swift/apple_swift45_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SILOptimizer/Utils/SILInliner.cpp,-,"SILDebugScope(CallSiteScope, CalleeScope);",207,/data/download/swift/apple_swift45_old.cpp,/data/download/swift/apple_swift45_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SILOptimizer/Utils/SILInliner.cpp,-,assert(CallSiteScope->Parent == InlineScope->InlinedCallSite->Parent);,208,/data/download/swift/apple_swift45_old.cpp,/data/download/swift/apple_swift45_new.cpp
5ea2d13f5e0284b71eb84c2e7eba402caa4ad26a,"Improve the performance of IRGenDebugInfo

This commit changes how inline information is stored in SILDebugScope
from a tree to a linear chain of inlined call sites (similar to what
LLVM is using). This makes creating inlined SILDebugScopes slightly
more expensive, but makes lowering SILDebugScopes into LLVM metadata
much faster because entire inlined-at chains can now be cached. This
means that SIL is no longer preserve the inlining history (i.e., ((a
was inlined into b) was inlined into c) is represented the same as (a
was inlined into (b was inlined into c)), but this information was not
used by anyone.

On my late 2012 i7 iMac, this saves about 4 seconds when compiling the
RelWithDebInfo x86_64 swift standard library — or 40% of IRGen time.

rdar://problem/28311051",lib/SILOptimizer/Utils/SILInliner.cpp,+,auto *InlinedScope = new (M) SILDebugScope(,210,/data/download/swift/apple_swift45_old.cpp,/data/download/swift/apple_swift45_new.cpp
23989db8b470206b408f02741b3e8c42d3cc5209,Merge pull request #8550 from DougGregor/repeal-conformance-death-tax,lib/AST/ProtocolConformance.cpp,-,assert(inherited->getType()->isEqual(spec->getGenericConformance()->getType()),785,/data/download/swift/apple_swift46_old.cpp,/data/download/swift/apple_swift46_new.cpp
23989db8b470206b408f02741b3e8c42d3cc5209,Merge pull request #8550 from DougGregor/repeal-conformance-death-tax,lib/AST/ProtocolConformance.cpp,-,assert(getType()->isEqual(r->getType()),796,/data/download/swift/apple_swift46_old.cpp,/data/download/swift/apple_swift46_new.cpp
23989db8b470206b408f02741b3e8c42d3cc5209,Merge pull request #8550 from DougGregor/repeal-conformance-death-tax,lib/AST/ProtocolConformance.cpp,-,assert(protoInherited->getType()->isEqual(,805,/data/download/swift/apple_swift46_old.cpp,/data/download/swift/apple_swift46_new.cpp
23989db8b470206b408f02741b3e8c42d3cc5209,Merge pull request #8550 from DougGregor/repeal-conformance-death-tax,lib/AST/ProtocolConformance.cpp,-,"assert(!isComplete() && ""Missing inherited mapping in conformance"");",831,/data/download/swift/apple_swift46_old.cpp,/data/download/swift/apple_swift46_new.cpp
23989db8b470206b408f02741b3e8c42d3cc5209,Merge pull request #8550 from DougGregor/repeal-conformance-death-tax,lib/AST/ProtocolConformance.cpp,-,"assert(C.getLazyResolver() && ""Need a lazy resolver"");",832,/data/download/swift/apple_swift46_old.cpp,/data/download/swift/apple_swift46_new.cpp
23989db8b470206b408f02741b3e8c42d3cc5209,Merge pull request #8550 from DougGregor/repeal-conformance-death-tax,lib/SILGen/SILGenType.cpp,-,assert(foundBaseConformance != Conformance->getInheritedConformances().end(),392,/data/download/swift/apple_swift47_old.cpp,/data/download/swift/apple_swift47_new.cpp
23989db8b470206b408f02741b3e8c42d3cc5209,Merge pull request #8550 from DougGregor/repeal-conformance-death-tax,lib/Serialization/Deserialization.cpp,-,assert(inheritedRef.isConcrete());,748,/data/download/swift/apple_swift48_old.cpp,/data/download/swift/apple_swift48_new.cpp
23989db8b470206b408f02741b3e8c42d3cc5209,Merge pull request #8550 from DougGregor/repeal-conformance-death-tax,lib/Serialization/Serialization.cpp,-,"writeConformance(conformance->getInheritedConformance(inheritedProto),",1329,/data/download/swift/apple_swift49_old.cpp,/data/download/swift/apple_swift49_new.cpp
79cc1d53b6ffe032ae69dcc34639fa331829532a,"Start emitting begin_access markers for local and global vars.
NFC by default.

I had a much more comprehensive version of this patch that I had to
back out in order to just get something in to unblock progress.
There's a lot of technical debt in SILGen around l-values.

Enabling this will almost certainly not get past the SIL passes.",lib/SILGen/SILGenLValue.cpp,+,assert(var->getDeclContext()->isTypeContext() &&,1702,/data/download/swift/apple_swift50_old.cpp,/data/download/swift/apple_swift50_new.cpp
e44f37fd8d45ea22a7e6d3ef65bed2488072e177,Thread an enforcement kind through a few places.  NFC.,lib/SILGen/SILGenLValue.cpp,+,: WritebackPseudoComponent(typeData) {},494,/data/download/swift/apple_swift51_old.cpp,/data/download/swift/apple_swift51_new.cpp
e44f37fd8d45ea22a7e6d3ef65bed2488072e177,Thread an enforcement kind through a few places.  NFC.,lib/SILGen/SILGenLValue.cpp,+,"void writeback(SILGenFunction &SGF, SILLocation loc,",497,/data/download/swift/apple_swift51_old.cpp,/data/download/swift/apple_swift51_new.cpp
e44f37fd8d45ea22a7e6d3ef65bed2488072e177,Thread an enforcement kind through a few places.  NFC.,lib/SILGen/SILGenLValue.cpp,+,assert(base.isLValue());,501,/data/download/swift/apple_swift51_old.cpp,/data/download/swift/apple_swift51_new.cpp
e44f37fd8d45ea22a7e6d3ef65bed2488072e177,Thread an enforcement kind through a few places.  NFC.,lib/SILGen/SILGenLValue.cpp,+,void print(raw_ostream &OS) const override {,505,/data/download/swift/apple_swift51_old.cpp,/data/download/swift/apple_swift51_new.cpp
e44f37fd8d45ea22a7e6d3ef65bed2488072e177,Thread an enforcement kind through a few places.  NFC.,lib/SILGen/SILGenLValue.cpp,+,"assert(Value.isLValue() && ""nonlvalue has enforcement?"");",534,/data/download/swift/apple_swift51_old.cpp,/data/download/swift/apple_swift51_new.cpp
e44f37fd8d45ea22a7e6d3ef65bed2488072e177,Thread an enforcement kind through a few places.  NFC.,lib/SILGen/SILGenLValue.cpp,+,"pushWriteback(SGF, loc, std::move(component), accessedMV,",554,/data/download/swift/apple_swift51_old.cpp,/data/download/swift/apple_swift51_new.cpp
30ef37cb83f492185cab60538b5e9ebffad18a6d,"[AST] Eliminate ""inherited conformances"" from NormalProtocolConformance.

All of this information is recoverable from the more-general,
more-sane signature conformances, so stop
recording/serializing/deserializing all of this extra stuff.",lib/Serialization/Deserialization.cpp,-,assert(inheritedRef.isConcrete());,748,/data/download/swift/apple_swift52_old.cpp,/data/download/swift/apple_swift52_new.cpp
30ef37cb83f492185cab60538b5e9ebffad18a6d,"[AST] Eliminate ""inherited conformances"" from NormalProtocolConformance.

All of this information is recoverable from the more-general,
more-sane signature conformances, so stop
recording/serializing/deserializing all of this extra stuff.",lib/Serialization/Serialization.cpp,-,"writeConformance(conformance->getInheritedConformance(inheritedProto),",1329,/data/download/swift/apple_swift53_old.cpp,/data/download/swift/apple_swift53_new.cpp
5e3fac1e76fb0e62838eeddbd7c157b992ac0c21,Stop using ProtocolConformance::getInheritedConformances(),lib/SILGen/SILGenType.cpp,-,assert(foundBaseConformance != Conformance->getInheritedConformances().end(),392,/data/download/swift/apple_swift54_old.cpp,/data/download/swift/apple_swift54_new.cpp
dafbf47319b7d5bb9209d51b39bcbc20cfb05d78,"[AST] Reimplement ProtocolConformance::getInheritedConformance().

Use getAssociatedConformance() instead, which is far simpler and more correct.",lib/AST/ProtocolConformance.cpp,-,assert(inherited->getType()->isEqual(spec->getGenericConformance()->getType()),785,/data/download/swift/apple_swift55_old.cpp,/data/download/swift/apple_swift55_new.cpp
dafbf47319b7d5bb9209d51b39bcbc20cfb05d78,"[AST] Reimplement ProtocolConformance::getInheritedConformance().

Use getAssociatedConformance() instead, which is far simpler and more correct.",lib/AST/ProtocolConformance.cpp,-,assert(getType()->isEqual(r->getType()),796,/data/download/swift/apple_swift55_old.cpp,/data/download/swift/apple_swift55_new.cpp
dafbf47319b7d5bb9209d51b39bcbc20cfb05d78,"[AST] Reimplement ProtocolConformance::getInheritedConformance().

Use getAssociatedConformance() instead, which is far simpler and more correct.",lib/AST/ProtocolConformance.cpp,-,assert(protoInherited->getType()->isEqual(,805,/data/download/swift/apple_swift55_old.cpp,/data/download/swift/apple_swift55_new.cpp
dafbf47319b7d5bb9209d51b39bcbc20cfb05d78,"[AST] Reimplement ProtocolConformance::getInheritedConformance().

Use getAssociatedConformance() instead, which is far simpler and more correct.",lib/AST/ProtocolConformance.cpp,-,"assert(!isComplete() && ""Missing inherited mapping in conformance"");",831,/data/download/swift/apple_swift55_old.cpp,/data/download/swift/apple_swift55_new.cpp
dafbf47319b7d5bb9209d51b39bcbc20cfb05d78,"[AST] Reimplement ProtocolConformance::getInheritedConformance().

Use getAssociatedConformance() instead, which is far simpler and more correct.",lib/AST/ProtocolConformance.cpp,-,"assert(C.getLazyResolver() && ""Need a lazy resolver"");",832,/data/download/swift/apple_swift55_old.cpp,/data/download/swift/apple_swift55_new.cpp
65668c9d82fcb65f52172d4b1e25f47922744f82,"Cache Code Completion results from PCH files

- Add CompilerInvocation::getPCHHash
  This will be used when creating a unique filename for a persistent
  precompiled bridging header.

- Automatically generate and use a precompiled briding header
  When we're given both -import-objc-header and -pch-output-dir
  arguments, we will try to:
  - Validate what we think the PCH filename should be for the bridging
    header, based on the Swift PCH hash and the clang module hash.
    - If we're successful, we'll just use it.
    - If it's out of date or something else is wrong, we'll try to
      emit it.
  - This gives us a single filename which we can `stat` to check for the
    validity of our code completion cache, which is keyed off of module
    name, module filename, and module file age.

- Cache code completion results from imported modules
  If we just have a single .PCH file imported, we can use that file as
  part of the key used to cache declarations in a module.  Because
  multiple files can contribute to the __ObjC module, we've always given
  it the phony filename ""<imports>"", which never exists, so `stat`-ing it
  always fails and we never cache declarations in it.

  This is extremely problematic for projects with huge bridging headers.
  In the case where we have a single PCH import, this can bring warm code
  completion times down to about 500ms from over 2-3s, so it can provide a
  nice performance win for IDEs.

- Add a new test that performs two code-completion requests with a bridging header.
- Add some -pch-output-dir flags to existing SourceKit tests that import a bridging
  header.

rdar://problem/31198982",tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp,+,llvm::InitializeAllAsmPrinters();,256,/data/download/swift/apple_swift56_old.cpp,/data/download/swift/apple_swift56_new.cpp
65668c9d82fcb65f52172d4b1e25f47922744f82,"Cache Code Completion results from PCH files

- Add CompilerInvocation::getPCHHash
  This will be used when creating a unique filename for a persistent
  precompiled bridging header.

- Automatically generate and use a precompiled briding header
  When we're given both -import-objc-header and -pch-output-dir
  arguments, we will try to:
  - Validate what we think the PCH filename should be for the bridging
    header, based on the Swift PCH hash and the clang module hash.
    - If we're successful, we'll just use it.
    - If it's out of date or something else is wrong, we'll try to
      emit it.
  - This gives us a single filename which we can `stat` to check for the
    validity of our code completion cache, which is keyed off of module
    name, module filename, and module file age.

- Cache code completion results from imported modules
  If we just have a single .PCH file imported, we can use that file as
  part of the key used to cache declarations in a module.  Because
  multiple files can contribute to the __ObjC module, we've always given
  it the phony filename ""<imports>"", which never exists, so `stat`-ing it
  always fails and we never cache declarations in it.

  This is extremely problematic for projects with huge bridging headers.
  In the case where we have a single PCH import, this can bring warm code
  completion times down to about 500ms from over 2-3s, so it can provide a
  nice performance win for IDEs.

- Add a new test that performs two code-completion requests with a bridging header.
- Add some -pch-output-dir flags to existing SourceKit tests that import a bridging
  header.

rdar://problem/31198982",tools/SourceKit/tools/sourcekitd/lib/API/Requests.cpp,+,llvm::InitializeAllAsmPrinters();,155,/data/download/swift/apple_swift57_old.cpp,/data/download/swift/apple_swift57_new.cpp
9adf79a370982504a401d3e0301a207b313e2c31,Merge pull request #8546 from rudkx/propagate-constraints,lib/Sema/CSPropagate.cpp,-,assert(tyvar->isEqual(,59,/data/download/swift/apple_swift58_old.cpp,/data/download/swift/apple_swift58_new.cpp
1106f139f47a7c9424913047c19d921a7fec5c20,"Merge pull request #8454 from swiftix/wip-warn-about-unused-generic-params

[type-checker] More correct way to determine if a given generic parameter of a function cannot be inferred because it is not used",lib/Sema/TypeCheckGeneric.cpp,+,assert(t->isTypeParameter());,694,/data/download/swift/apple_swift59_old.cpp,/data/download/swift/apple_swift59_new.cpp
809ddd0c8782b3a1a1e0eacc379bbcdac37e07b6,"[Constraint solver] Remove invalid assert from constraint propagation.

It turns out that for disjunctions formed for subscripts, we have an
explicit function type (e.g. ($T1)->$T2) for the LHS of the bind
overload constraint, and when a subscript is mixed with an explicit
call (e.g. x[i](2)) we end up with an applicable function constraint
where the RHS is $T2 (which is a function type itself), so this assert
was invalid.

Fundamentally the assert wasn't checking anything important, so it won't
be missed. The important check here is that the applicable function
constraint that we started with is only involved in one disjunction
since we're only returning one.

This shows up in test/Constraints/overload.swift when I run it with
-propagate-constraints enabled:
  func test20886179(_ handlers: [(Int) -> Void], buttonIndex: Int) {
    handlers[buttonIndex](buttonIndex)
  }",lib/Sema/CSPropagate.cpp,-,assert(tyvar->isEqual(,59,/data/download/swift/apple_swift60_old.cpp,/data/download/swift/apple_swift60_new.cpp
4aaa855da183dcfeda506057a13311ae8aef95fe,"Merge pull request #8489 from swiftix/wip-func-sig-opt-generic-functions-3

[sil-function-signature-opt] Support FSO for generic functions",lib/SILOptimizer/Analysis/ARCAnalysis.cpp,-,"ConsumedArgToEpilogueReleaseMatcher(RCIdentityFunctionInfo *RCFI,",668,/data/download/swift/apple_swift61_old.cpp,/data/download/swift/apple_swift61_new.cpp
4aaa855da183dcfeda506057a13311ae8aef95fe,"Merge pull request #8489 from swiftix/wip-func-sig-opt-generic-functions-3

[sil-function-signature-opt] Support FSO for generic functions",lib/SILOptimizer/Analysis/ARCAnalysis.cpp,+,ConsumedArgToEpilogueReleaseMatcher::ConsumedArgToEpilogueReleaseMatcher(,667,/data/download/swift/apple_swift61_old.cpp,/data/download/swift/apple_swift61_new.cpp
4aaa855da183dcfeda506057a13311ae8aef95fe,"Merge pull request #8489 from swiftix/wip-func-sig-opt-generic-functions-3

[sil-function-signature-opt] Support FSO for generic functions",lib/SILOptimizer/Analysis/ARCAnalysis.cpp,+,for (auto Use : getNonDebugUses(Arg)) {,802,/data/download/swift/apple_swift61_old.cpp,/data/download/swift/apple_swift61_new.cpp
4aaa855da183dcfeda506057a13311ae8aef95fe,"Merge pull request #8489 from swiftix/wip-func-sig-opt-generic-functions-3

[sil-function-signature-opt] Support FSO for generic functions",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,+,"DEBUG(llvm::dbgs() << ""None of generic parameters are used by """,597,/data/download/swift/apple_swift62_old.cpp,/data/download/swift/apple_swift62_new.cpp
4aaa855da183dcfeda506057a13311ae8aef95fe,"Merge pull request #8489 from swiftix/wip-func-sig-opt-generic-functions-3

[sil-function-signature-opt] Support FSO for generic functions",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,+,if (ExpectedFTy->hasErrorResult()) {,619,/data/download/swift/apple_swift62_old.cpp,/data/download/swift/apple_swift62_new.cpp
4aaa855da183dcfeda506057a13311ae8aef95fe,"Merge pull request #8489 from swiftix/wip-func-sig-opt-generic-functions-3

[sil-function-signature-opt] Support FSO for generic functions",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,+,InterfaceErrorResult = ExpectedFTy->getErrorResult();,620,/data/download/swift/apple_swift62_old.cpp,/data/download/swift/apple_swift62_new.cpp
4aaa855da183dcfeda506057a13311ae8aef95fe,"Merge pull request #8489 from swiftix/wip-func-sig-opt-generic-functions-3

[sil-function-signature-opt] Support FSO for generic functions",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,-,"InterfaceResults, FTy->getOptionalErrorResult(),",455,/data/download/swift/apple_swift62_old.cpp,/data/download/swift/apple_swift62_new.cpp
4aaa855da183dcfeda506057a13311ae8aef95fe,"Merge pull request #8489 from swiftix/wip-func-sig-opt-generic-functions-3

[sil-function-signature-opt] Support FSO for generic functions",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,-,F->getDebugScope());,474,/data/download/swift/apple_swift62_old.cpp,/data/download/swift/apple_swift62_new.cpp
4aaa855da183dcfeda506057a13311ae8aef95fe,"Merge pull request #8489 from swiftix/wip-func-sig-opt-generic-functions-3

[sil-function-signature-opt] Support FSO for generic functions",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,+,"nullptr, F->getDebugScope());",658,/data/download/swift/apple_swift62_old.cpp,/data/download/swift/apple_swift62_new.cpp
4aaa855da183dcfeda506057a13311ae8aef95fe,"Merge pull request #8489 from swiftix/wip-func-sig-opt-generic-functions-3

[sil-function-signature-opt] Support FSO for generic functions",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,-,"auto Retains = EA->get(F)->computeEpilogueARCInstructions(EpilogueARCContext::EpilogueARCKind::Retain, RV);",665,/data/download/swift/apple_swift62_old.cpp,/data/download/swift/apple_swift62_new.cpp
4aaa855da183dcfeda506057a13311ae8aef95fe,"Merge pull request #8489 from swiftix/wip-func-sig-opt-generic-functions-3

[sil-function-signature-opt] Support FSO for generic functions",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,+,auto Retains = EA->get(F)->computeEpilogueARCInstructions(,911,/data/download/swift/apple_swift62_old.cpp,/data/download/swift/apple_swift62_new.cpp
3ec9219180bf54f5a564f96ada1292235c9e7c9b,Merge pull request #8521 from DougGregor/substitutionmap-conformance-access-path,lib/AST/GenericEnvironment.cpp,-,assert(secondArchetype == archetype);,365,/data/download/swift/apple_swift63_old.cpp,/data/download/swift/apple_swift63_new.cpp
3ec9219180bf54f5a564f96ada1292235c9e7c9b,Merge pull request #8521 from DougGregor/substitutionmap-conformance-access-path,lib/AST/ProtocolConformance.cpp,+,assert(!getSignatureConformances().empty() &&,476,/data/download/swift/apple_swift64_old.cpp,/data/download/swift/apple_swift64_new.cpp
3ec9219180bf54f5a564f96ada1292235c9e7c9b,Merge pull request #8521 from DougGregor/substitutionmap-conformance-access-path,lib/AST/SubstitutionMap.cpp,+,assert(!(type->isTypeParameter() && !getGenericSignature()) &&,75,/data/download/swift/apple_swift65_old.cpp,/data/download/swift/apple_swift65_new.cpp
3ec9219180bf54f5a564f96ada1292235c9e7c9b,Merge pull request #8521 from DougGregor/substitutionmap-conformance-access-path,lib/AST/SubstitutionMap.cpp,+,assert(!(type->hasArchetype() &&,77,/data/download/swift/apple_swift65_old.cpp,/data/download/swift/apple_swift65_new.cpp
3ec9219180bf54f5a564f96ada1292235c9e7c9b,Merge pull request #8521 from DougGregor/substitutionmap-conformance-access-path,lib/AST/SubstitutionMap.cpp,-,assert(type && parent && assocType);,229,/data/download/swift/apple_swift65_old.cpp,/data/download/swift/apple_swift65_new.cpp
3ec9219180bf54f5a564f96ada1292235c9e7c9b,Merge pull request #8521 from DougGregor/substitutionmap-conformance-access-path,lib/AST/SubstitutionMap.cpp,-,parent.first->print(out);,474,/data/download/swift/apple_swift65_old.cpp,/data/download/swift/apple_swift65_new.cpp
3ec9219180bf54f5a564f96ada1292235c9e7c9b,Merge pull request #8521 from DougGregor/substitutionmap-conformance-access-path,lib/AST/SubstitutionMap.cpp,-,parentType.first->print(out);,478,/data/download/swift/apple_swift65_old.cpp,/data/download/swift/apple_swift65_new.cpp
bd1920ba67fbc0bddf4f943d4fd8e25143222bdd,"[ClangImporter] Fix versioned stubs for functions-as-members. (#8539)

That is, the stubs we generate when you rename a C global function
imported as a type member using the SwiftName API note. (See the
test case changes.) Previously we hit an assertion.

For good measure, also fix versioned stubs for types-as-members,
which were always added to their original context rather than the
new context.

rdar://problem/31435658",lib/ClangImporter/ImportDecl.cpp,-,"assert(!correctSwiftName && ""Swift 2 didn't support import-as-member!"");",3140,/data/download/swift/apple_swift66_old.cpp,/data/download/swift/apple_swift66_new.cpp
a8065825a0365e8c7f3f5194922c11b5603e1a79,Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/SILValue.cpp,-,"assert(Arg->hasValue() && ""Expected to have a result"");                    \",194,/data/download/swift/apple_swift67_old.cpp,/data/download/swift/apple_swift67_new.cpp
a8065825a0365e8c7f3f5194922c11b5603e1a79,Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/SILValue.cpp,-,assert((Arg->getType().isAddress() ||                                    \,196,/data/download/swift/apple_swift67_old.cpp,/data/download/swift/apple_swift67_new.cpp
a8065825a0365e8c7f3f5194922c11b5603e1a79,Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/SILValue.cpp,-,"assert(!I->hasValue() && ""Expected an instruction without a result"");      \",313,/data/download/swift/apple_swift67_old.cpp,/data/download/swift/apple_swift67_new.cpp
a8065825a0365e8c7f3f5194922c11b5603e1a79,Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/SILValue.cpp,-,"assert(I->hasValue() && ""Expected to have a value"");                       \",432,/data/download/swift/apple_swift67_old.cpp,/data/download/swift/apple_swift67_new.cpp
a8065825a0365e8c7f3f5194922c11b5603e1a79,Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/SILValue.cpp,-,"assert(BI->hasValue() && ""Can only get here if we have a SILValue"");",592,/data/download/swift/apple_swift67_old.cpp,/data/download/swift/apple_swift67_new.cpp
a8065825a0365e8c7f3f5194922c11b5603e1a79,Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/SILValue.cpp,-,assert(BI->getType().isTrivial(BI->getModule()) &&,593,/data/download/swift/apple_swift67_old.cpp,/data/download/swift/apple_swift67_new.cpp
a8065825a0365e8c7f3f5194922c11b5603e1a79,Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/SILValue.cpp,-,"assert(BI->hasValue() && ""Expected to have type"");                         \",608,/data/download/swift/apple_swift67_old.cpp,/data/download/swift/apple_swift67_new.cpp
a8065825a0365e8c7f3f5194922c11b5603e1a79,Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/SILValue.cpp,-,assert(BI->getType().isTrivial(BI->getModule()) &&                       \,610,/data/download/swift/apple_swift67_old.cpp,/data/download/swift/apple_swift67_new.cpp
a8065825a0365e8c7f3f5194922c11b5603e1a79,Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/SILValue.cpp,-,assert(!BI->getType().isTrivial(BI->getModule()) &&                      \,613,/data/download/swift/apple_swift67_old.cpp,/data/download/swift/apple_swift67_new.cpp
a8065825a0365e8c7f3f5194922c11b5603e1a79,Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/ValueOwnershipKindClassifier.cpp,+,"assert(Arg->hasValue() && ""Expected to have a result"");                    \",23,/data/download/swift/apple_swift68_old.cpp,/data/download/swift/apple_swift68_new.cpp
a8065825a0365e8c7f3f5194922c11b5603e1a79,Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/ValueOwnershipKindClassifier.cpp,+,assert((Arg->getType().isAddress() ||                                    \,25,/data/download/swift/apple_swift68_old.cpp,/data/download/swift/apple_swift68_new.cpp
a8065825a0365e8c7f3f5194922c11b5603e1a79,Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/ValueOwnershipKindClassifier.cpp,+,"assert(!I->hasValue() && ""Expected an instruction without a result"");      \",142,/data/download/swift/apple_swift68_old.cpp,/data/download/swift/apple_swift68_new.cpp
a8065825a0365e8c7f3f5194922c11b5603e1a79,Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/ValueOwnershipKindClassifier.cpp,+,"assert(I->hasValue() && ""Expected to have a value"");                       \",258,/data/download/swift/apple_swift68_old.cpp,/data/download/swift/apple_swift68_new.cpp
a8065825a0365e8c7f3f5194922c11b5603e1a79,Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/ValueOwnershipKindClassifier.cpp,+,"assert(BI->hasValue() && ""Can only get here if we have a SILValue"");",409,/data/download/swift/apple_swift68_old.cpp,/data/download/swift/apple_swift68_new.cpp
a8065825a0365e8c7f3f5194922c11b5603e1a79,Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/ValueOwnershipKindClassifier.cpp,+,assert(BI->getType().isTrivial(BI->getModule()) &&,410,/data/download/swift/apple_swift68_old.cpp,/data/download/swift/apple_swift68_new.cpp
a8065825a0365e8c7f3f5194922c11b5603e1a79,Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/ValueOwnershipKindClassifier.cpp,+,"assert(BI->hasValue() && ""Expected to have type"");                         \",425,/data/download/swift/apple_swift68_old.cpp,/data/download/swift/apple_swift68_new.cpp
a8065825a0365e8c7f3f5194922c11b5603e1a79,Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/ValueOwnershipKindClassifier.cpp,+,assert(BI->getType().isTrivial(BI->getModule()) &&                       \,427,/data/download/swift/apple_swift68_old.cpp,/data/download/swift/apple_swift68_new.cpp
a8065825a0365e8c7f3f5194922c11b5603e1a79,Merge pull request #8538 from gottesmm/value_ownership_kind_refactoring,lib/SIL/ValueOwnershipKindClassifier.cpp,+,assert(!BI->getType().isTrivial(BI->getModule()) &&                      \,430,/data/download/swift/apple_swift68_old.cpp,/data/download/swift/apple_swift68_new.cpp
29deb3a5f190020e8c657500b6a8153b6654f16f,"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/SILValue.cpp,-,"assert(Arg->hasValue() && ""Expected to have a result"");                    \",194,/data/download/swift/apple_swift69_old.cpp,/data/download/swift/apple_swift69_new.cpp
29deb3a5f190020e8c657500b6a8153b6654f16f,"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/SILValue.cpp,-,assert((Arg->getType().isAddress() ||                                    \,196,/data/download/swift/apple_swift69_old.cpp,/data/download/swift/apple_swift69_new.cpp
29deb3a5f190020e8c657500b6a8153b6654f16f,"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/SILValue.cpp,-,"assert(!I->hasValue() && ""Expected an instruction without a result"");      \",313,/data/download/swift/apple_swift69_old.cpp,/data/download/swift/apple_swift69_new.cpp
29deb3a5f190020e8c657500b6a8153b6654f16f,"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/SILValue.cpp,-,"assert(I->hasValue() && ""Expected to have a value"");                       \",432,/data/download/swift/apple_swift69_old.cpp,/data/download/swift/apple_swift69_new.cpp
29deb3a5f190020e8c657500b6a8153b6654f16f,"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/SILValue.cpp,-,"assert(BI->hasValue() && ""Can only get here if we have a SILValue"");",592,/data/download/swift/apple_swift69_old.cpp,/data/download/swift/apple_swift69_new.cpp
29deb3a5f190020e8c657500b6a8153b6654f16f,"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/SILValue.cpp,-,assert(BI->getType().isTrivial(BI->getModule()) &&,593,/data/download/swift/apple_swift69_old.cpp,/data/download/swift/apple_swift69_new.cpp
29deb3a5f190020e8c657500b6a8153b6654f16f,"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/SILValue.cpp,-,"assert(BI->hasValue() && ""Expected to have type"");                         \",608,/data/download/swift/apple_swift69_old.cpp,/data/download/swift/apple_swift69_new.cpp
29deb3a5f190020e8c657500b6a8153b6654f16f,"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/SILValue.cpp,-,assert(BI->getType().isTrivial(BI->getModule()) &&                       \,610,/data/download/swift/apple_swift69_old.cpp,/data/download/swift/apple_swift69_new.cpp
29deb3a5f190020e8c657500b6a8153b6654f16f,"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/SILValue.cpp,-,assert(!BI->getType().isTrivial(BI->getModule()) &&                      \,613,/data/download/swift/apple_swift69_old.cpp,/data/download/swift/apple_swift69_new.cpp
29deb3a5f190020e8c657500b6a8153b6654f16f,"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/ValueOwnershipKindClassifier.cpp,+,"assert(Arg->hasValue() && ""Expected to have a result"");                    \",23,/data/download/swift/apple_swift70_old.cpp,/data/download/swift/apple_swift70_new.cpp
29deb3a5f190020e8c657500b6a8153b6654f16f,"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/ValueOwnershipKindClassifier.cpp,+,assert((Arg->getType().isAddress() ||                                    \,25,/data/download/swift/apple_swift70_old.cpp,/data/download/swift/apple_swift70_new.cpp
29deb3a5f190020e8c657500b6a8153b6654f16f,"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/ValueOwnershipKindClassifier.cpp,+,"assert(!I->hasValue() && ""Expected an instruction without a result"");      \",142,/data/download/swift/apple_swift70_old.cpp,/data/download/swift/apple_swift70_new.cpp
29deb3a5f190020e8c657500b6a8153b6654f16f,"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/ValueOwnershipKindClassifier.cpp,+,"assert(I->hasValue() && ""Expected to have a value"");                       \",258,/data/download/swift/apple_swift70_old.cpp,/data/download/swift/apple_swift70_new.cpp
29deb3a5f190020e8c657500b6a8153b6654f16f,"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/ValueOwnershipKindClassifier.cpp,+,"assert(BI->hasValue() && ""Can only get here if we have a SILValue"");",409,/data/download/swift/apple_swift70_old.cpp,/data/download/swift/apple_swift70_new.cpp
29deb3a5f190020e8c657500b6a8153b6654f16f,"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/ValueOwnershipKindClassifier.cpp,+,assert(BI->getType().isTrivial(BI->getModule()) &&,410,/data/download/swift/apple_swift70_old.cpp,/data/download/swift/apple_swift70_new.cpp
29deb3a5f190020e8c657500b6a8153b6654f16f,"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/ValueOwnershipKindClassifier.cpp,+,"assert(BI->hasValue() && ""Expected to have type"");                         \",425,/data/download/swift/apple_swift70_old.cpp,/data/download/swift/apple_swift70_new.cpp
29deb3a5f190020e8c657500b6a8153b6654f16f,"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/ValueOwnershipKindClassifier.cpp,+,assert(BI->getType().isTrivial(BI->getModule()) &&                       \,427,/data/download/swift/apple_swift70_old.cpp,/data/download/swift/apple_swift70_new.cpp
29deb3a5f190020e8c657500b6a8153b6654f16f,"[sil] Move ValueOwnershipKind computation code from SILValue.cpp -> ValueOwnerhsipKindClassifier.{cpp,h}.

This piece of code is large enough to be its own local compilation unit.",lib/SIL/ValueOwnershipKindClassifier.cpp,+,assert(!BI->getType().isTrivial(BI->getModule()) &&                      \,430,/data/download/swift/apple_swift70_old.cpp,/data/download/swift/apple_swift70_new.cpp
64813b7b4f18f91b55dfbcfe18273ed159460a2b,"[sil-function-signature-opt] Support FSO for generic functions

In particular, support the following optimizations:
- owned-to-guaranteed
- dead argument elimination

Argument explosion is disabled for generics at the moment as it usually leads to a slower code.",lib/SILOptimizer/Analysis/ARCAnalysis.cpp,-,"ConsumedArgToEpilogueReleaseMatcher(RCIdentityFunctionInfo *RCFI,",668,/data/download/swift/apple_swift71_old.cpp,/data/download/swift/apple_swift71_new.cpp
64813b7b4f18f91b55dfbcfe18273ed159460a2b,"[sil-function-signature-opt] Support FSO for generic functions

In particular, support the following optimizations:
- owned-to-guaranteed
- dead argument elimination

Argument explosion is disabled for generics at the moment as it usually leads to a slower code.",lib/SILOptimizer/Analysis/ARCAnalysis.cpp,+,ConsumedArgToEpilogueReleaseMatcher::ConsumedArgToEpilogueReleaseMatcher(,667,/data/download/swift/apple_swift71_old.cpp,/data/download/swift/apple_swift71_new.cpp
64813b7b4f18f91b55dfbcfe18273ed159460a2b,"[sil-function-signature-opt] Support FSO for generic functions

In particular, support the following optimizations:
- owned-to-guaranteed
- dead argument elimination

Argument explosion is disabled for generics at the moment as it usually leads to a slower code.",lib/SILOptimizer/Analysis/ARCAnalysis.cpp,+,for (auto Use : getNonDebugUses(Arg)) {,802,/data/download/swift/apple_swift71_old.cpp,/data/download/swift/apple_swift71_new.cpp
64813b7b4f18f91b55dfbcfe18273ed159460a2b,"[sil-function-signature-opt] Support FSO for generic functions

In particular, support the following optimizations:
- owned-to-guaranteed
- dead argument elimination

Argument explosion is disabled for generics at the moment as it usually leads to a slower code.",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,+,"DEBUG(llvm::dbgs() << ""None of generic parameters are used by """,597,/data/download/swift/apple_swift72_old.cpp,/data/download/swift/apple_swift72_new.cpp
64813b7b4f18f91b55dfbcfe18273ed159460a2b,"[sil-function-signature-opt] Support FSO for generic functions

In particular, support the following optimizations:
- owned-to-guaranteed
- dead argument elimination

Argument explosion is disabled for generics at the moment as it usually leads to a slower code.",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,+,if (ExpectedFTy->hasErrorResult()) {,619,/data/download/swift/apple_swift72_old.cpp,/data/download/swift/apple_swift72_new.cpp
64813b7b4f18f91b55dfbcfe18273ed159460a2b,"[sil-function-signature-opt] Support FSO for generic functions

In particular, support the following optimizations:
- owned-to-guaranteed
- dead argument elimination

Argument explosion is disabled for generics at the moment as it usually leads to a slower code.",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,+,InterfaceErrorResult = ExpectedFTy->getErrorResult();,620,/data/download/swift/apple_swift72_old.cpp,/data/download/swift/apple_swift72_new.cpp
64813b7b4f18f91b55dfbcfe18273ed159460a2b,"[sil-function-signature-opt] Support FSO for generic functions

In particular, support the following optimizations:
- owned-to-guaranteed
- dead argument elimination

Argument explosion is disabled for generics at the moment as it usually leads to a slower code.",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,-,"InterfaceResults, FTy->getOptionalErrorResult(),",455,/data/download/swift/apple_swift72_old.cpp,/data/download/swift/apple_swift72_new.cpp
64813b7b4f18f91b55dfbcfe18273ed159460a2b,"[sil-function-signature-opt] Support FSO for generic functions

In particular, support the following optimizations:
- owned-to-guaranteed
- dead argument elimination

Argument explosion is disabled for generics at the moment as it usually leads to a slower code.",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,-,F->getDebugScope());,474,/data/download/swift/apple_swift72_old.cpp,/data/download/swift/apple_swift72_new.cpp
64813b7b4f18f91b55dfbcfe18273ed159460a2b,"[sil-function-signature-opt] Support FSO for generic functions

In particular, support the following optimizations:
- owned-to-guaranteed
- dead argument elimination

Argument explosion is disabled for generics at the moment as it usually leads to a slower code.",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,+,"nullptr, F->getDebugScope());",658,/data/download/swift/apple_swift72_old.cpp,/data/download/swift/apple_swift72_new.cpp
64813b7b4f18f91b55dfbcfe18273ed159460a2b,"[sil-function-signature-opt] Support FSO for generic functions

In particular, support the following optimizations:
- owned-to-guaranteed
- dead argument elimination

Argument explosion is disabled for generics at the moment as it usually leads to a slower code.",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,-,"auto Retains = EA->get(F)->computeEpilogueARCInstructions(EpilogueARCContext::EpilogueARCKind::Retain, RV);",665,/data/download/swift/apple_swift72_old.cpp,/data/download/swift/apple_swift72_new.cpp
64813b7b4f18f91b55dfbcfe18273ed159460a2b,"[sil-function-signature-opt] Support FSO for generic functions

In particular, support the following optimizations:
- owned-to-guaranteed
- dead argument elimination

Argument explosion is disabled for generics at the moment as it usually leads to a slower code.",lib/SILOptimizer/Transforms/FunctionSignatureOpts.cpp,+,auto Retains = EA->get(F)->computeEpilogueARCInstructions(,911,/data/download/swift/apple_swift72_old.cpp,/data/download/swift/apple_swift72_new.cpp
