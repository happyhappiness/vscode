code,location,file,cdg_nodes,neighbor_node,context_list,ddg_list,static_list,cluster_index
"fprintf ( stderr , ""assertion failed: %s:%d: \""%s\""\n"" , file , line , expr )",13:4:361:431,/data/download/squid/squid-3.5.25/compat/assert.cc,[],"[["""", [4973, ""True"", ""int line"", ""Parameter""]], ["""", [4976, ""True"", ""const char * file"", ""Parameter""]], ["""", [4979, ""True"", ""const char * expr"", ""Parameter""]], ["""", [5004, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""int""]], [[""const char *""]], [[""const char *""]], [[""ENTRY""]]]","[[[""const char *""], ""const char *""], [[""int""], ""int""], [[""const char *""], ""const char *""]]","[""\""assertion failed: %s:%d: \\\""%s\\\""\\n\""""]"
"vfprintf ( stderr , format , args )",25:4:574:602,/data/download/squid/squid-3.5.25/compat/debug.cc,"[[""False"", [5359, ""True"", ""! debug_enabled"", ""Condition""]]]","[["""", [5344, ""True"", ""va_start ( args , format )"", ""ExpressionStatement""]], ["""", [5353, ""True"", ""va_list args ;"", ""IdentifierDeclStatement""]], ["""", [5321, ""True"", ""const char * format"", ""Parameter""]]]","[[[""!"", ""debug_enabled""]], [[""va_start"", ""va_list"", ""const char *""]], [[""va_list""]], [[""const char *""]]]","[[[""const char *""], ""const char *""], [[""va_list""], ""va_list""]]",[]
"fprintf ( stderr , ""%s\n"" , _sys_siglist [ sig ] )",26:8:756:800,/data/download/squid/squid-3.5.25/compat/psignal.c,"[[""True"", [13293, ""True"", ""sig > 0 && sig < _sys_nsig"", ""Condition""]]]","[["""", [13302, ""True"", ""fprintf ( stderr , \""%s: \"" , msg )"", ""ExpressionStatement""]], ["""", [13261, ""True"", ""const char * msg"", ""Parameter""]], ["""", [13261, ""True"", ""const char * msg"", ""Parameter""]], ["""", [13264, ""True"", ""int sig"", ""Parameter""]]]","[[[""int"", ""0"", "">""]], [[""int"", ""_sys_nsig"", ""<""]], [[""fprintf"", ""stderr"", ""\""%s: \"""", ""const char *""]], [[""const char *""]], [[""const char *""]], [[""int""]]]","[[[""int""], ""int""]]","[""\""%s\\n\""""]"
"fprintf ( stderr , ""%s: "" , msg )",24:23:678:708,/data/download/squid/squid-3.5.25/compat/psignal.c,"[[""True"", [13313, ""True"", ""msg && * msg"", ""Condition""]]]","[["""", [13261, ""True"", ""const char * msg"", ""Parameter""]], ["""", [13264, ""True"", ""int sig"", ""Parameter""]], ["""", [13319, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""const char *""]], [[""*"", ""const char *""]], [[""const char *""]], [[""int""]], [[""ENTRY""]]]","[[[""const char *""], ""const char *""]]","[""\""%s: \""""]"
"fprintf ( stderr , ""Connect timeouts not supported in your LDAP library\n"" )",240:4:7741:7813,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,[],"[["""", [17060, ""True"", ""int timelimit"", ""Parameter""]], ["""", [17063, ""True"", ""LDAP * ld"", ""Parameter""]], ["""", [17077, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""int""]], [[""LDAP *""]], [[""ENTRY""]]]",[],"[""\""Connect timeouts not supported in your LDAP library\\n\""""]"
"fprintf ( stderr , ""Could not Activate TLS connection\n"" )",308:12:9798:9852,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [17164, ""True"", ""ldap_start_tls_s ( ld , NULL , NULL ) != LDAP_SUCCESS"", ""Condition""]], [""False"", [17194, ""True"", ""version != LDAP_VERSION3"", ""Condition""]], [""True"", [17198, ""True"", ""use_tls"", ""Condition""]]]","[["""", [17202, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]]]","[[[""ldap_start_tls_s"", ""LDAP *"", ""NULL"", ""NULL"", ""LDAP_SUCCESS"", ""!=""]], [[""version"", ""LDAP_VERSION3"", ""!=""]], [[""use_tls""]], [[""exit"", ""1""]]]",[],"[""\""Could not Activate TLS connection\\n\""""]"
"fprintf ( stderr , ""TLS requires LDAP version 3\n"" )",305:12:9644:9692,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [17194, ""True"", ""version != LDAP_VERSION3"", ""Condition""]], [""True"", [17198, ""True"", ""use_tls"", ""Condition""]]]","[["""", [17202, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [17209, ""True"", ""fprintf ( stderr , \""Could not set LDAP_OPT_PROTOCOL_VERSION %d\\n\"" , version )"", ""ExpressionStatement""]], ["""", [17237, ""True"", ""version = LDAP_VERSION3"", ""ExpressionStatement""]]]","[[[""version"", ""LDAP_VERSION3"", ""!=""]], [[""use_tls""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""Could not set LDAP_OPT_PROTOCOL_VERSION %d\\n\"""", ""version""]], [[""version"", ""LDAP_VERSION3"", ""=""]]]",[],"[""\""TLS requires LDAP version 3\\n\""""]"
"fprintf ( stderr , ""Could not set LDAP_OPT_PROTOCOL_VERSION %d\n"" , version )",298:8:9438:9526,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [17220, ""True"", ""ldap_set_option ( ld , LDAP_OPT_PROTOCOL_VERSION , & version ) != LDAP_SUCCESS"", ""Condition""]]]","[["""", [17237, ""True"", ""version = LDAP_VERSION3"", ""ExpressionStatement""]], ["""", [17248, ""True"", ""squid_ldap_set_connect_timeout ( ld , connect_timeout )"", ""ExpressionStatement""]], ["""", [17248, ""True"", ""squid_ldap_set_connect_timeout ( ld , connect_timeout )"", ""ExpressionStatement""]], ["""", [17265, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [17301, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [17382, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]]]","[[[""ldap_set_option"", ""LDAP *"", ""LDAP_OPT_PROTOCOL_VERSION"", ""&"", ""version"", ""LDAP_SUCCESS"", ""!=""]], [[""version"", ""LDAP_VERSION3"", ""=""]], [[""squid_ldap_set_connect_timeout"", ""LDAP *"", ""connect_timeout""]], [[""squid_ldap_set_connect_timeout"", ""LDAP *"", ""connect_timeout""]], [[""exit"", ""1""]], [[""exit"", ""1""]], [[""exit"", ""1""]]]","[[[""version"", ""LDAP_VERSION3"", ""=""], ""version""]]","[""\""Could not set LDAP_OPT_PROTOCOL_VERSION %d\\n\""""]"
"fprintf ( stderr , ""\nUnable to connect to LDAP server:%s port:%d\n"" , ldapServer , port )",286:16:9025:9133,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [17285, ""True"", ""( ld = ldap_init ( ldapServer , port ) ) == NULL"", ""Condition""]], [""False"", [17377, ""True"", ""sslpath"", ""Condition""]], [""False"", [17420, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]]]","[["""", [17431, ""True"", ""LDAP * ld = NULL ;"", ""IdentifierDeclStatement""]]]","[[[""ld"", ""ldap_init"", ""const char *"", ""int"", ""="", ""NULL"", ""==""]], [[""sslpath""]], [[""strstr"", ""const char *"", ""\""://\"""", ""NULL"", ""!=""]], [[""LDAP *"", ""NULL"", ""NULL"", ""=""]]]","[[[""const char *""], ""const char *""], [[""int""], ""int""]]","[""\""\\nUnable to connect to LDAP server:%s port:%d\\n\""""]"
"fprintf ( stderr , ""\nUnable to connect to SSL LDAP server: %s port:%d\n"" , ldapServer , port )",279:16:8771:8884,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [17321, ""True"", ""( ld = ldapssl_init ( ldapServer , port , 1 ) ) == NULL"", ""Condition""]], [""True"", [17377, ""True"", ""sslpath"", ""Condition""]], [""False"", [17420, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]]]","[["""", [17339, ""True"", ""++ sslinit"", ""ExpressionStatement""]], ["""", [17344, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [17351, ""True"", ""fprintf ( stderr , \""\\nUnable to initialise SSL with cert path %s\\n\"" , sslpath )"", ""ExpressionStatement""]]]","[[[""ld"", ""ldapssl_init"", ""const char *"", ""int"", ""1"", ""="", ""NULL"", ""==""]], [[""sslpath""]], [[""strstr"", ""const char *"", ""\""://\"""", ""NULL"", ""!=""]], [[""sslinit""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""\\nUnable to initialise SSL with cert path %s\\n\"""", ""sslpath""]]]","[[[""const char *""], ""const char *""], [[""int""], ""int""]]","[""\""\\nUnable to connect to SSL LDAP server: %s port:%d\\n\""""]"
"fprintf ( stderr , ""\nUnable to initialise SSL with cert path %s\n"" , sslpath )",272:16:8500:8598,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [17362, ""True"", ""! sslinit && ( ldapssl_client_init ( sslpath , NULL ) != LDAP_SUCCESS )"", ""Condition""]], [""True"", [17377, ""True"", ""sslpath"", ""Condition""]], [""False"", [17420, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]]]","[["""", [17431, ""True"", ""LDAP * ld = NULL ;"", ""IdentifierDeclStatement""]]]","[[[""!"", ""sslinit""]], [[""ldapssl_client_init"", ""sslpath"", ""NULL"", ""LDAP_SUCCESS"", ""!=""]], [[""sslpath""]], [[""strstr"", ""const char *"", ""\""://\"""", ""NULL"", ""!=""]], [[""LDAP *"", ""NULL"", ""NULL"", ""=""]]]",[],"[""\""\\nUnable to initialise SSL with cert path %s\\n\""""]"
"fprintf ( stderr , ""\nUnable to connect to LDAPURI:%s\n"" , ldapServer )",264:12:8243:8309,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [17400, ""True"", ""rc != LDAP_SUCCESS"", ""Condition""]], [""True"", [17420, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]]]","[["""", [17404, ""True"", ""int rc = ldap_initialize ( & ld , ldapServer ) ;"", ""IdentifierDeclStatement""]], ["""", [17431, ""True"", ""LDAP * ld = NULL ;"", ""IdentifierDeclStatement""]]]","[[[""int"", ""LDAP_SUCCESS"", ""!=""]], [[""strstr"", ""const char *"", ""\""://\"""", ""NULL"", ""!=""]], [[""int"", ""int"", ""ldap_initialize"", ""&"", ""ld"", ""const char *"", ""=""]], [[""LDAP *"", ""NULL"", ""NULL"", ""=""]]]","[[[""const char *""], ""const char *""]]","[""\""\\nUnable to connect to LDAPURI:%s\\n\""""]"
"fprintf ( stderr , ""\tIf you need to bind as a user to perform searches then use the\n\t-D binddn -w bindpasswd or -D binddn -W secretfile options\n\n"" )",557:8:17799:17948,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17899, ""True"", ""fprintf ( stderr , \""\\tIf no search filter is specified, then the dn <userattr>=user,basedn\\n\\twill be used (same as specifying a search filter of '<userattr>=',\\n\\tbut quicker as as there is no need to search for the user DN)\\n\\n\"" )"", ""ExpressionStatement""]], ["""", [17908, ""True"", ""fprintf ( stderr , \""\\n\"" )"", ""ExpressionStatement""]], ["""", [17917, ""True"", ""fprintf ( stderr , \""\\t-d\\t\\t\\tenable debug mode\\n\"" )"", ""ExpressionStatement""]], ["""", [17926, ""True"", ""fprintf ( stderr , \""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires LDAP version 3\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\tIf no search filter is specified, then the dn <userattr>=user,basedn\\n\\twill be used (same as specifying a search filter of '<userattr>=',\\n\\tbut quicker as as there is no need to search for the user DN)\\n\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-d\\t\\t\\tenable debug mode\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires LDAP version 3\\n\""""]]]",[],"[""\""\\tIf you need to bind as a user to perform searches then use the\\n\\t-D binddn -w bindpasswd or -D binddn -W secretfile options\\n\\n\""""]"
"fprintf ( stderr , ""\tIf no search filter is specified, then the dn <userattr>=user,basedn\n\twill be used (same as specifying a search filter of '<userattr>=',\n\tbut quicker as as there is no need to search for the user DN)\n\n"" )",556:8:17561:17789,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17908, ""True"", ""fprintf ( stderr , \""\\n\"" )"", ""ExpressionStatement""]], ["""", [17917, ""True"", ""fprintf ( stderr , \""\\t-d\\t\\t\\tenable debug mode\\n\"" )"", ""ExpressionStatement""]], ["""", [17926, ""True"", ""fprintf ( stderr , \""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires LDAP version 3\\n\"" )"", ""ExpressionStatement""]], ["""", [17935, ""True"", ""fprintf ( stderr , \""\\t-v 2|3\\t\\t\\tLDAP version\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-d\\t\\t\\tenable debug mode\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires LDAP version 3\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-v 2|3\\t\\t\\tLDAP version\\n\""""]]]",[],"[""\""\\tIf no search filter is specified, then the dn <userattr>=user,basedn\\n\\twill be used (same as specifying a search filter of '<userattr>=',\\n\\tbut quicker as as there is no need to search for the user DN)\\n\\n\""""]"
"fprintf ( stderr , ""\n"" )",555:8:17530:17551,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17917, ""True"", ""fprintf ( stderr , \""\\t-d\\t\\t\\tenable debug mode\\n\"" )"", ""ExpressionStatement""]], ["""", [17926, ""True"", ""fprintf ( stderr , \""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires LDAP version 3\\n\"" )"", ""ExpressionStatement""]], ["""", [17935, ""True"", ""fprintf ( stderr , \""\\t-v 2|3\\t\\t\\tLDAP version\\n\"" )"", ""ExpressionStatement""]], ["""", [17944, ""True"", ""fprintf ( stderr , \""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-d\\t\\t\\tenable debug mode\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires LDAP version 3\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-v 2|3\\t\\t\\tLDAP version\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\""""]]]",[],"[""\""\\n\""""]"
"fprintf ( stderr , ""\t-d\t\t\tenable debug mode\n"" )",554:8:17472:17520,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17926, ""True"", ""fprintf ( stderr , \""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires LDAP version 3\\n\"" )"", ""ExpressionStatement""]], ["""", [17935, ""True"", ""fprintf ( stderr , \""\\t-v 2|3\\t\\t\\tLDAP version\\n\"" )"", ""ExpressionStatement""]], ["""", [17944, ""True"", ""fprintf ( stderr , \""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\"" )"", ""ExpressionStatement""]], ["""", [17953, ""True"", ""fprintf ( stderr , \""\\t-R\\t\\t\\tdo not follow referrals\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires LDAP version 3\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-v 2|3\\t\\t\\tLDAP version\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-R\\t\\t\\tdo not follow referrals\\n\""""]]]",[],"[""\""\\t-d\\t\\t\\tenable debug mode\\n\""""]"
"fprintf ( stderr , ""\t-Z\t\t\tTLS encrypt the LDAP connection, requires LDAP version 3\n"" )",552:8:17368:17455,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17935, ""True"", ""fprintf ( stderr , \""\\t-v 2|3\\t\\t\\tLDAP version\\n\"" )"", ""ExpressionStatement""]], ["""", [17944, ""True"", ""fprintf ( stderr , \""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\"" )"", ""ExpressionStatement""]], ["""", [17953, ""True"", ""fprintf ( stderr , \""\\t-R\\t\\t\\tdo not follow referrals\\n\"" )"", ""ExpressionStatement""]], ["""", [17962, ""True"", ""fprintf ( stderr , \""\\t-t timelimit\\t\\tsearch time limit\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-v 2|3\\t\\t\\tLDAP version\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-R\\t\\t\\tdo not follow referrals\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-t timelimit\\t\\tsearch time limit\\n\""""]]]",[],"[""\""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires LDAP version 3\\n\""""]"
"fprintf ( stderr , ""\t-v 2|3\t\t\tLDAP version\n"" )",551:8:17311:17358,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17944, ""True"", ""fprintf ( stderr , \""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\"" )"", ""ExpressionStatement""]], ["""", [17953, ""True"", ""fprintf ( stderr , \""\\t-R\\t\\t\\tdo not follow referrals\\n\"" )"", ""ExpressionStatement""]], ["""", [17962, ""True"", ""fprintf ( stderr , \""\\t-t timelimit\\t\\tsearch time limit\\n\"" )"", ""ExpressionStatement""]], ["""", [17971, ""True"", ""fprintf ( stderr , \""\\t-c timeout\\t\\tconnect timeout\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-R\\t\\t\\tdo not follow referrals\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-t timelimit\\t\\tsearch time limit\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-c timeout\\t\\tconnect timeout\\n\""""]]]",[],"[""\""\\t-v 2|3\\t\\t\\tLDAP version\\n\""""]"
"fprintf ( stderr , ""\t-a never|always|search|find\n\t\t\t\twhen to dereference aliases\n"" )",549:8:17193:17280,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17953, ""True"", ""fprintf ( stderr , \""\\t-R\\t\\t\\tdo not follow referrals\\n\"" )"", ""ExpressionStatement""]], ["""", [17962, ""True"", ""fprintf ( stderr , \""\\t-t timelimit\\t\\tsearch time limit\\n\"" )"", ""ExpressionStatement""]], ["""", [17971, ""True"", ""fprintf ( stderr , \""\\t-c timeout\\t\\tconnect timeout\\n\"" )"", ""ExpressionStatement""]], ["""", [17980, ""True"", ""fprintf ( stderr , \""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-R\\t\\t\\tdo not follow referrals\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-t timelimit\\t\\tsearch time limit\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-c timeout\\t\\tconnect timeout\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\""""]]]",[],"[""\""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\""""]"
"fprintf ( stderr , ""\t-R\t\t\tdo not follow referrals\n"" )",548:8:17129:17183,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17962, ""True"", ""fprintf ( stderr , \""\\t-t timelimit\\t\\tsearch time limit\\n\"" )"", ""ExpressionStatement""]], ["""", [17971, ""True"", ""fprintf ( stderr , \""\\t-c timeout\\t\\tconnect timeout\\n\"" )"", ""ExpressionStatement""]], ["""", [17980, ""True"", ""fprintf ( stderr , \""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\"" )"", ""ExpressionStatement""]], ["""", [17989, ""True"", ""fprintf ( stderr , \""\\t-P\\t\\t\\tpersistent LDAP connection\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-t timelimit\\t\\tsearch time limit\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-c timeout\\t\\tconnect timeout\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-P\\t\\t\\tpersistent LDAP connection\\n\""""]]]",[],"[""\""\\t-R\\t\\t\\tdo not follow referrals\\n\""""]"
"fprintf ( stderr , ""\t-t timelimit\t\tsearch time limit\n"" )",547:8:17063:17119,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17971, ""True"", ""fprintf ( stderr , \""\\t-c timeout\\t\\tconnect timeout\\n\"" )"", ""ExpressionStatement""]], ["""", [17980, ""True"", ""fprintf ( stderr , \""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\"" )"", ""ExpressionStatement""]], ["""", [17989, ""True"", ""fprintf ( stderr , \""\\t-P\\t\\t\\tpersistent LDAP connection\\n\"" )"", ""ExpressionStatement""]], ["""", [17998, ""True"", ""fprintf ( stderr , \""\\t-p port\\t\\t\\tLDAP server port\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-c timeout\\t\\tconnect timeout\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-P\\t\\t\\tpersistent LDAP connection\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-p port\\t\\t\\tLDAP server port\\n\""""]]]",[],"[""\""\\t-t timelimit\\t\\tsearch time limit\\n\""""]"
"fprintf ( stderr , ""\t-c timeout\t\tconnect timeout\n"" )",546:8:17001:17053,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17980, ""True"", ""fprintf ( stderr , \""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\"" )"", ""ExpressionStatement""]], ["""", [17989, ""True"", ""fprintf ( stderr , \""\\t-P\\t\\t\\tpersistent LDAP connection\\n\"" )"", ""ExpressionStatement""]], ["""", [17998, ""True"", ""fprintf ( stderr , \""\\t-p port\\t\\t\\tLDAP server port\\n\"" )"", ""ExpressionStatement""]], ["""", [18007, ""True"", ""fprintf ( stderr , \""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-P\\t\\t\\tpersistent LDAP connection\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-p port\\t\\t\\tLDAP server port\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\""""]]]",[],"[""\""\\t-c timeout\\t\\tconnect timeout\\n\""""]"
"fprintf ( stderr , ""\t-E sslcertpath\t\tenable LDAP over SSL\n"" )",544:8:16923:16984,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17989, ""True"", ""fprintf ( stderr , \""\\t-P\\t\\t\\tpersistent LDAP connection\\n\"" )"", ""ExpressionStatement""]], ["""", [17998, ""True"", ""fprintf ( stderr , \""\\t-p port\\t\\t\\tLDAP server port\\n\"" )"", ""ExpressionStatement""]], ["""", [18007, ""True"", ""fprintf ( stderr , \""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\"" )"", ""ExpressionStatement""]], ["""", [18016, ""True"", ""fprintf ( stderr , \""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-P\\t\\t\\tpersistent LDAP connection\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-p port\\t\\t\\tLDAP server port\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\""""]]]",[],"[""\""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\""""]"
"fprintf ( stderr , ""\t-P\t\t\tpersistent LDAP connection\n"" )",542:8:16830:16887,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17998, ""True"", ""fprintf ( stderr , \""\\t-p port\\t\\t\\tLDAP server port\\n\"" )"", ""ExpressionStatement""]], ["""", [18007, ""True"", ""fprintf ( stderr , \""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\"" )"", ""ExpressionStatement""]], ["""", [18016, ""True"", ""fprintf ( stderr , \""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\"" )"", ""ExpressionStatement""]], ["""", [18025, ""True"", ""fprintf ( stderr , \""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-p port\\t\\t\\tLDAP server port\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\""""]]]",[],"[""\""\\t-P\\t\\t\\tpersistent LDAP connection\\n\""""]"
"fprintf ( stderr , ""\t-p port\t\t\tLDAP server port\n"" )",541:8:16768:16820,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18007, ""True"", ""fprintf ( stderr , \""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\"" )"", ""ExpressionStatement""]], ["""", [18016, ""True"", ""fprintf ( stderr , \""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\"" )"", ""ExpressionStatement""]], ["""", [18025, ""True"", ""fprintf ( stderr , \""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\"" )"", ""ExpressionStatement""]], ["""", [18034, ""True"", ""fprintf ( stderr , \""\\t-w bindpasswd\\t\\tpassword for binddn\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-w bindpasswd\\t\\tpassword for binddn\\n\""""]]]",[],"[""\""\\t-p port\\t\\t\\tLDAP server port\\n\""""]"
"fprintf ( stderr , ""\t-h server\t\tLDAP server (defaults to localhost)\n"" )",540:8:16687:16758,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18016, ""True"", ""fprintf ( stderr , \""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\"" )"", ""ExpressionStatement""]], ["""", [18025, ""True"", ""fprintf ( stderr , \""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\"" )"", ""ExpressionStatement""]], ["""", [18034, ""True"", ""fprintf ( stderr , \""\\t-w bindpasswd\\t\\tpassword for binddn\\n\"" )"", ""ExpressionStatement""]], ["""", [18043, ""True"", ""fprintf ( stderr , \""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-w bindpasswd\\t\\tpassword for binddn\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\""""]]]",[],"[""\""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\""""]"
"fprintf ( stderr , ""\t-H URI\t\t\tLDAPURI (defaults to ldap://localhost)\n"" )",538:8:16597:16670,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18025, ""True"", ""fprintf ( stderr , \""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\"" )"", ""ExpressionStatement""]], ["""", [18034, ""True"", ""fprintf ( stderr , \""\\t-w bindpasswd\\t\\tpassword for binddn\\n\"" )"", ""ExpressionStatement""]], ["""", [18043, ""True"", ""fprintf ( stderr , \""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\"" )"", ""ExpressionStatement""]], ["""", [18052, ""True"", ""fprintf ( stderr , \""\\t-s base|one|sub\\t\\tsearch scope\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-w bindpasswd\\t\\tpassword for binddn\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-s base|one|sub\\t\\tsearch scope\\n\""""]]]",[],"[""\""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\""""]"
"fprintf ( stderr , ""\t-W secretfile\t\tread password for binddn from file secretfile\n"" )",536:8:16482:16567,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18034, ""True"", ""fprintf ( stderr , \""\\t-w bindpasswd\\t\\tpassword for binddn\\n\"" )"", ""ExpressionStatement""]], ["""", [18043, ""True"", ""fprintf ( stderr , \""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\"" )"", ""ExpressionStatement""]], ["""", [18052, ""True"", ""fprintf ( stderr , \""\\t-s base|one|sub\\t\\tsearch scope\\n\"" )"", ""ExpressionStatement""]], ["""", [18061, ""True"", ""fprintf ( stderr , \""\\t-u userattr\\t\\tusername DN attribute\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-w bindpasswd\\t\\tpassword for binddn\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-s base|one|sub\\t\\tsearch scope\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-u userattr\\t\\tusername DN attribute\\n\""""]]]",[],"[""\""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\""""]"
"fprintf ( stderr , ""\t-w bindpasswd\t\tpassword for binddn\n"" )",535:8:16413:16472,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18043, ""True"", ""fprintf ( stderr , \""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\"" )"", ""ExpressionStatement""]], ["""", [18052, ""True"", ""fprintf ( stderr , \""\\t-s base|one|sub\\t\\tsearch scope\\n\"" )"", ""ExpressionStatement""]], ["""", [18061, ""True"", ""fprintf ( stderr , \""\\t-u userattr\\t\\tusername DN attribute\\n\"" )"", ""ExpressionStatement""]], ["""", [18070, ""True"", ""fprintf ( stderr , \""\\t-f filter\\t\\tsearch filter to locate user DN\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-s base|one|sub\\t\\tsearch scope\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-u userattr\\t\\tusername DN attribute\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-f filter\\t\\tsearch filter to locate user DN\\n\""""]]]",[],"[""\""\\t-w bindpasswd\\t\\tpassword for binddn\\n\""""]"
"fprintf ( stderr , ""\t-D binddn\t\tDN to bind as to perform searches\n"" )",534:8:16334:16403,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18052, ""True"", ""fprintf ( stderr , \""\\t-s base|one|sub\\t\\tsearch scope\\n\"" )"", ""ExpressionStatement""]], ["""", [18061, ""True"", ""fprintf ( stderr , \""\\t-u userattr\\t\\tusername DN attribute\\n\"" )"", ""ExpressionStatement""]], ["""", [18070, ""True"", ""fprintf ( stderr , \""\\t-f filter\\t\\tsearch filter to locate user DN\\n\"" )"", ""ExpressionStatement""]], ["""", [18079, ""True"", ""fprintf ( stderr , \""\\t-b basedn (REQUIRED)\\tbase dn under which to search\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-s base|one|sub\\t\\tsearch scope\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-u userattr\\t\\tusername DN attribute\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-f filter\\t\\tsearch filter to locate user DN\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-b basedn (REQUIRED)\\tbase dn under which to search\\n\""""]]]",[],"[""\""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\""""]"
"fprintf ( stderr , ""\t-s base|one|sub\t\tsearch scope\n"" )",533:8:16270:16324,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18061, ""True"", ""fprintf ( stderr , \""\\t-u userattr\\t\\tusername DN attribute\\n\"" )"", ""ExpressionStatement""]], ["""", [18070, ""True"", ""fprintf ( stderr , \""\\t-f filter\\t\\tsearch filter to locate user DN\\n\"" )"", ""ExpressionStatement""]], ["""", [18079, ""True"", ""fprintf ( stderr , \""\\t-b basedn (REQUIRED)\\tbase dn under which to search\\n\"" )"", ""ExpressionStatement""]], ["""", [18088, ""True"", """", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-u userattr\\t\\tusername DN attribute\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-f filter\\t\\tsearch filter to locate user DN\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-b basedn (REQUIRED)\\tbase dn under which to search\\n\""""]], [[]]]",[],"[""\""\\t-s base|one|sub\\t\\tsearch scope\\n\""""]"
"fprintf ( stderr , ""\t-u userattr\t\tusername DN attribute\n"" )",532:8:16201:16260,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18070, ""True"", ""fprintf ( stderr , \""\\t-f filter\\t\\tsearch filter to locate user DN\\n\"" )"", ""ExpressionStatement""]], ["""", [18079, ""True"", ""fprintf ( stderr , \""\\t-b basedn (REQUIRED)\\tbase dn under which to search\\n\"" )"", ""ExpressionStatement""]], ["""", [18088, ""True"", """", ""ExpressionStatement""]], ["""", [18089, ""True"", "")"", ""Statement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-f filter\\t\\tsearch filter to locate user DN\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-b basedn (REQUIRED)\\tbase dn under which to search\\n\""""]], [[]], [[]]]",[],"[""\""\\t-u userattr\\t\\tusername DN attribute\\n\""""]"
"fprintf ( stderr , ""\t-f filter\t\tsearch filter to locate user DN\n"" )",531:8:16124:16191,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18079, ""True"", ""fprintf ( stderr , \""\\t-b basedn (REQUIRED)\\tbase dn under which to search\\n\"" )"", ""ExpressionStatement""]], ["""", [18088, ""True"", """", ""ExpressionStatement""]], ["""", [18089, ""True"", "")"", ""Statement""]], ["""", [18090, ""True"", ""\"" -b basedn [options] [ldap_server_name[:port]]...\\n\\n\"""", ""Statement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-b basedn (REQUIRED)\\tbase dn under which to search\\n\""""]], [[]], [[]], [[]]]",[],"[""\""\\t-f filter\\t\\tsearch filter to locate user DN\\n\""""]"
"fprintf ( stderr , ""\t-b basedn (REQUIRED)\tbase dn under which to search\n"" )",530:8:16040:16114,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18088, ""True"", """", ""ExpressionStatement""]], ["""", [18089, ""True"", "")"", ""Statement""]], ["""", [18090, ""True"", ""\"" -b basedn [options] [ldap_server_name[:port]]...\\n\\n\"""", ""Statement""]], ["""", [18091, ""True"", ""PROGRAM_NAME"", ""Statement""]]]","[[[""!"", ""basedn""]], [[]], [[]], [[]], [[]]]",[],"[""\""\\t-b basedn (REQUIRED)\\tbase dn under which to search\\n\""""]"
"fprintf ( stderr , ""TLS (-Z) is incompatible with version %d\n"" , version )",494:16:14958:15052,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18276, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'Z'"", [18697, ""True"", ""option"", ""Condition""]], [""case 'P'"", [18786, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]","[["""", [18280, ""True"", ""case 'Z' :"", ""Label""]], ["""", [18699, ""True"", ""-- argc"", ""ExpressionStatement""]]]","[[[""version"", ""LDAP_VERSION2"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[]], [[""argc""]]]","[[[""version"", ""LDAP_VERSION3"", ""=""], ""version""], [[""version"", ""LDAP_VERSION2"", ""=""], ""version""], [[""version"", ""LDAP_VERSION3"", ""=""], ""version""]]","[""\""TLS (-Z) is incompatible with version %d\\n\""""]"
"fprintf ( stderr , ""Protocol version should be 2 or 3\n"" )",488:16:14766:14820,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""default"", [18314, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'v'"", [18697, ""True"", ""option"", ""Condition""]], [""case 'P'"", [18786, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]","[["""", [18300, ""True"", ""default :"", ""Label""]], ["""", [18321, ""True"", ""case 'v' :"", ""Label""]]]","[[[""atoi"", ""const char *""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""default""]], [[]]]",[],"[""\""Protocol version should be 2 or 3\\n\""""]"
"fprintf ( stderr , ""ERROR: Your LDAP library does not have URI support\n"" )",388:12:11655:11726,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""case 'H'"", [18697, ""True"", ""option"", ""Condition""]], [""case 'P'"", [18786, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]","[["""", [18696, ""True"", ""case 'H' :"", ""Label""]], ["""", [18699, ""True"", ""-- argc"", ""ExpressionStatement""]], ["""", [18703, ""True"", ""++ argv"", ""ExpressionStatement""]]]","[[[""char"", ""'H'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[]], [[""argc""]], [[""argv""]]]",[],"[""\""ERROR: Your LDAP library does not have URI support\\n\""""]"
"fprintf ( stderr , ""ERROR: Missing user name at %s line %d\n"" , passwdfile , lineCount )",97:12:2553:2635,/data/download/squid/squid-3.5.25/helpers/basic_auth/NCSA/basic_ncsa_auth.cc,"[[""True"", [20087, ""True"", ""user == NULL"", ""Condition""]], [""False"", [20104, ""True"", ""( buf [ 0 ] == '#' ) || ( buf [ 0 ] == ' ' ) || ( buf [ 0 ] == '\\t' ) || ( buf [ 0 ] == '\\n' )"", ""Condition""]], [""True"", [20132, ""True"", ""fgets ( buf , sizeof ( buf ) - 1 , f ) != NULL"", ""Condition""]]]","[["""", [20091, ""True"", ""user = strtok ( buf , \"":\\n\\r\"" )"", ""ExpressionStatement""]], ["""", [20128, ""True"", ""++ lineCount"", ""ExpressionStatement""]]]","[[[""char *"", ""NULL"", ""==""]], [[""char [ HELPER_INPUT_BUFFER ]"", ""0"", ""'#'"", ""=="", ""char [ HELPER_INPUT_BUFFER ]"", ""0"", ""' '"", ""=="", ""char [ HELPER_INPUT_BUFFER ]"", ""0"", ""'\\t'"", ""=="", ""char [ HELPER_INPUT_BUFFER ]"", ""0"", ""'\\n'"", ""=="", ""||"", ""||"", ""||""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""1"", ""-"", ""FILE *"", ""NULL"", ""!=""]], [[""char *"", ""strtok"", ""char [ HELPER_INPUT_BUFFER ]"", ""\"":\\n\\r\"""", ""=""]], [[""lineCount""]]]","[[[""unsigned int"", ""unsigned int"", ""0"", ""=""], ""unsigned int""], [[""const char *""], ""const char *""]]","[""\""ERROR: Missing user name at %s line %d\\n\""""]"
"fprintf ( stderr , ""FATAL: %s: %s\n"" , passwdfile , xstrerror ( ) )",85:8:2123:2182,/data/download/squid/squid-3.5.25/helpers/basic_auth/NCSA/basic_ncsa_auth.cc,"[[""True"", [20189, ""True"", ""NULL == f"", ""Condition""]]]","[["""", [20193, ""True"", ""f = fopen ( passwdfile , \""r\"" )"", ""ExpressionStatement""]], ["""", [20206, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [20213, ""True"", ""fprintf ( stderr , \""FATAL: Cannot create hash table\\n\"" )"", ""ExpressionStatement""]], ["""", [20226, ""True"", ""hash = hash_create ( ( HASHCMP * ) strcmp , 7921 , hash_string )"", ""ExpressionStatement""]]]","[[[""NULL"", ""FILE *"", ""==""]], [[""FILE *"", ""fopen"", ""const char *"", ""\""r\"""", ""=""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""FATAL: Cannot create hash table\\n\""""]], [[""hash"", ""hash_create"", ""strcmp"", ""7921"", ""hash_string"", ""=""]]]","[[[""const char *""], ""const char *""]]","[""\""FATAL: %s: %s\\n\""""]"
"fprintf ( stderr , ""FATAL: Cannot create hash table\n"" )",80:8:1985:2037,/data/download/squid/squid-3.5.25/helpers/basic_auth/NCSA/basic_ncsa_auth.cc,"[[""True"", [20222, ""True"", ""NULL == hash"", ""Condition""]]]","[["""", [20226, ""True"", ""hash = hash_create ( ( HASHCMP * ) strcmp , 7921 , hash_string )"", ""ExpressionStatement""]], ["""", [20243, ""True"", ""hashFreeMemory ( hash )"", ""ExpressionStatement""]], ["""", [20250, ""True"", ""hashFreeItems ( hash , my_free )"", ""ExpressionStatement""]], ["""", [20263, ""True"", ""char * passwd ;"", ""IdentifierDeclStatement""]]]","[[[""NULL"", ""hash"", ""==""]], [[""hash"", ""hash_create"", ""strcmp"", ""7921"", ""hash_string"", ""=""]], [[""hashFreeMemory"", ""hash""]], [[""hashFreeItems"", ""hash"", ""my_free""]], [[""char *""]]]",[],"[""\""FATAL: Cannot create hash table\\n\""""]"
"fprintf ( stderr , ""FATAL: cannot stat %s\n"" , argv [ 1 ] )",125:8:3313:3364,/data/download/squid/squid-3.5.25/helpers/basic_auth/NCSA/basic_ncsa_auth.cc,"[[""True"", [20758, ""True"", ""stat ( argv [ 1 ] , & sb ) != 0"", ""Condition""]]]","[["""", [20775, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [20782, ""True"", ""fprintf ( stderr , \""Usage: ncsa_auth <passwordfile>\\n\"" )"", ""ExpressionStatement""]], ["""", [20795, ""True"", ""setbuf ( stdout , NULL )"", ""ExpressionStatement""]], ["""", [20804, ""True"", ""user_data * u ;"", ""IdentifierDeclStatement""]]]","[[[""stat"", ""char * *"", ""1"", ""&"", ""sb"", ""0"", ""!=""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""Usage: ncsa_auth <passwordfile>\\n\""""]], [[""setbuf"", ""stdout"", ""NULL""]], [[""user_data *""]]]","[[[""char * *""], ""char * *""]]","[""\""FATAL: cannot stat %s\\n\"""", ""1""]"
"fprintf ( stderr , ""Usage: ncsa_auth <passwordfile>\n"" )",121:8:3193:3245,/data/download/squid/squid-3.5.25/helpers/basic_auth/NCSA/basic_ncsa_auth.cc,"[[""True"", [20791, ""True"", ""argc != 2"", ""Condition""]]]","[["""", [20795, ""True"", ""setbuf ( stdout , NULL )"", ""ExpressionStatement""]], ["""", [20804, ""True"", ""user_data * u ;"", ""IdentifierDeclStatement""]], ["""", [20808, ""True"", ""char * user , * passwd , * p ;"", ""IdentifierDeclStatement""]]]","[[[""int"", ""2"", ""!=""]], [[""setbuf"", ""stdout"", ""NULL""]], [[""user_data *""]], [[""user"", ""char *"", ""p""]]]",[],"[""\""Usage: ncsa_auth <passwordfile>\\n\""""]"
"fprintf ( stderr , ""Example basic_yp_auth mydomain.com passwd.byname\n"" )",49:8:1036:1105,/data/download/squid/squid-3.5.25/helpers/basic_auth/NIS/basic_nis_auth.cc,"[[""True"", [22190, ""True"", ""argc != 3"", ""Condition""]]]","[["""", [22172, ""True"", ""fprintf ( stderr , \""\\n\"" )"", ""ExpressionStatement""]], ["""", [22181, ""True"", ""fprintf ( stderr , \""Usage: basic_yp_auth <domainname> <nis map for password>\\n\"" )"", ""ExpressionStatement""]], ["""", [22194, ""True"", ""setbuf ( stdout , NULL )"", ""ExpressionStatement""]]]","[[[""int"", ""3"", ""!=""]], [[""fprintf"", ""stderr"", ""\""\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: basic_yp_auth <domainname> <nis map for password>\\n\""""]], [[""setbuf"", ""stdout"", ""NULL""]]]",[],"[""\""Example basic_yp_auth mydomain.com passwd.byname\\n\""""]"
"fprintf ( stderr , ""\n"" )",48:8:1005:1026,/data/download/squid/squid-3.5.25/helpers/basic_auth/NIS/basic_nis_auth.cc,"[[""True"", [22190, ""True"", ""argc != 3"", ""Condition""]]]","[["""", [22181, ""True"", ""fprintf ( stderr , \""Usage: basic_yp_auth <domainname> <nis map for password>\\n\"" )"", ""ExpressionStatement""]], ["""", [22194, ""True"", ""setbuf ( stdout , NULL )"", ""ExpressionStatement""]], ["""", [22203, ""True"", ""char * nispasswd ;"", ""IdentifierDeclStatement""]]]","[[[""int"", ""3"", ""!=""]], [[""fprintf"", ""stderr"", ""\""Usage: basic_yp_auth <domainname> <nis map for password>\\n\""""]], [[""setbuf"", ""stdout"", ""NULL""]], [[""char *""]]]",[],"[""\""\\n\""""]"
"fprintf ( stderr , ""Usage: basic_yp_auth <domainname> <nis map for password>\n"" )",47:8:918:995,/data/download/squid/squid-3.5.25/helpers/basic_auth/NIS/basic_nis_auth.cc,"[[""True"", [22190, ""True"", ""argc != 3"", ""Condition""]]]","[["""", [22194, ""True"", ""setbuf ( stdout , NULL )"", ""ExpressionStatement""]], ["""", [22203, ""True"", ""char * nispasswd ;"", ""IdentifierDeclStatement""]], ["""", [22207, ""True"", ""char * user , * passwd , * p ;"", ""IdentifierDeclStatement""]]]","[[[""int"", ""3"", ""!=""]], [[""setbuf"", ""stdout"", ""NULL""]], [[""char *""]], [[""user"", ""char *"", ""p""]]]",[],"[""\""Usage: basic_yp_auth <domainname> <nis map for password>\\n\""""]"
"fprintf ( stderr , "" -r        Detect and remove Negotiate/NTLM realm from username\n"" )",157:4:5560:5644,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,[],"[["""", [22446, ""True"", ""fprintf ( stderr , \"" -1        Only one user authentication per PAM connection\\n\"" )"", ""ExpressionStatement""]], ["""", [22455, ""True"", ""fprintf ( stderr , \"" -o        Do not perform account mgmt (account expiration etc)\\n\"" )"", ""ExpressionStatement""]], ["""", [22464, ""True"", ""fprintf ( stderr , \""           to authenticate all users\\n\"" )"", ""ExpressionStatement""]], ["""", [22473, ""True"", ""fprintf ( stderr , \""           during this time the same connection will be reused\\n\"" )"", ""ExpressionStatement""]]]","[[[""fprintf"", ""stderr"", ""\"" -1        Only one user authentication per PAM connection\\n\""""]], [[""fprintf"", ""stderr"", ""\"" -o        Do not perform account mgmt (account expiration etc)\\n\""""]], [[""fprintf"", ""stderr"", ""\""           to authenticate all users\\n\""""]], [[""fprintf"", ""stderr"", ""\""           during this time the same connection will be reused\\n\""""]]]",[],"[""\"" -r        Detect and remove Negotiate/NTLM realm from username\\n\""""]"
"fprintf ( stderr , "" -1        Only one user authentication per PAM connection\n"" )",156:4:5475:5554,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,[],"[["""", [22455, ""True"", ""fprintf ( stderr , \"" -o        Do not perform account mgmt (account expiration etc)\\n\"" )"", ""ExpressionStatement""]], ["""", [22464, ""True"", ""fprintf ( stderr , \""           to authenticate all users\\n\"" )"", ""ExpressionStatement""]], ["""", [22473, ""True"", ""fprintf ( stderr , \""           during this time the same connection will be reused\\n\"" )"", ""ExpressionStatement""]], ["""", [22482, ""True"", ""fprintf ( stderr , \"" -t ttl    PAM connection ttl in seconds (default %d)\\n\"" , DEFAULT_SQUID_PAM_TTL )"", ""ExpressionStatement""]]]","[[[""fprintf"", ""stderr"", ""\"" -o        Do not perform account mgmt (account expiration etc)\\n\""""]], [[""fprintf"", ""stderr"", ""\""           to authenticate all users\\n\""""]], [[""fprintf"", ""stderr"", ""\""           during this time the same connection will be reused\\n\""""]], [[""fprintf"", ""stderr"", ""\"" -t ttl    PAM connection ttl in seconds (default %d)\\n\"""", ""DEFAULT_SQUID_PAM_TTL""]]]",[],"[""\"" -1        Only one user authentication per PAM connection\\n\""""]"
"fprintf ( stderr , "" -o        Do not perform account mgmt (account expiration etc)\n"" )",155:4:5385:5469,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,[],"[["""", [22464, ""True"", ""fprintf ( stderr , \""           to authenticate all users\\n\"" )"", ""ExpressionStatement""]], ["""", [22473, ""True"", ""fprintf ( stderr , \""           during this time the same connection will be reused\\n\"" )"", ""ExpressionStatement""]], ["""", [22482, ""True"", ""fprintf ( stderr , \"" -t ttl    PAM connection ttl in seconds (default %d)\\n\"" , DEFAULT_SQUID_PAM_TTL )"", ""ExpressionStatement""]], ["""", [22493, ""True"", ""fprintf ( stderr , \""           The PAM service name (default \\\""%s\\\"")\\n\"" , DEFAULT_SQUID_PAM_SERVICE )"", ""ExpressionStatement""]]]","[[[""fprintf"", ""stderr"", ""\""           to authenticate all users\\n\""""]], [[""fprintf"", ""stderr"", ""\""           during this time the same connection will be reused\\n\""""]], [[""fprintf"", ""stderr"", ""\"" -t ttl    PAM connection ttl in seconds (default %d)\\n\"""", ""DEFAULT_SQUID_PAM_TTL""]], [[""fprintf"", ""stderr"", ""\""           The PAM service name (default \\\""%s\\\"")\\n\"""", ""DEFAULT_SQUID_PAM_SERVICE""]]]",[],"[""\"" -o        Do not perform account mgmt (account expiration etc)\\n\""""]"
"fprintf ( stderr , ""           to authenticate all users\n"" )",154:4:5322:5379,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,[],"[["""", [22473, ""True"", ""fprintf ( stderr , \""           during this time the same connection will be reused\\n\"" )"", ""ExpressionStatement""]], ["""", [22482, ""True"", ""fprintf ( stderr , \"" -t ttl    PAM connection ttl in seconds (default %d)\\n\"" , DEFAULT_SQUID_PAM_TTL )"", ""ExpressionStatement""]], ["""", [22493, ""True"", ""fprintf ( stderr , \""           The PAM service name (default \\\""%s\\\"")\\n\"" , DEFAULT_SQUID_PAM_SERVICE )"", ""ExpressionStatement""]], ["""", [22504, ""True"", ""fprintf ( stderr , \"" -n service_name\\n\"" )"", ""ExpressionStatement""]]]","[[[""fprintf"", ""stderr"", ""\""           during this time the same connection will be reused\\n\""""]], [[""fprintf"", ""stderr"", ""\"" -t ttl    PAM connection ttl in seconds (default %d)\\n\"""", ""DEFAULT_SQUID_PAM_TTL""]], [[""fprintf"", ""stderr"", ""\""           The PAM service name (default \\\""%s\\\"")\\n\"""", ""DEFAULT_SQUID_PAM_SERVICE""]], [[""fprintf"", ""stderr"", ""\"" -n service_name\\n\""""]]]",[],"[""\""           to authenticate all users\\n\""""]"
"fprintf ( stderr , ""           during this time the same connection will be reused\n"" )",153:4:5233:5316,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,[],"[["""", [22482, ""True"", ""fprintf ( stderr , \"" -t ttl    PAM connection ttl in seconds (default %d)\\n\"" , DEFAULT_SQUID_PAM_TTL )"", ""ExpressionStatement""]], ["""", [22493, ""True"", ""fprintf ( stderr , \""           The PAM service name (default \\\""%s\\\"")\\n\"" , DEFAULT_SQUID_PAM_SERVICE )"", ""ExpressionStatement""]], ["""", [22504, ""True"", ""fprintf ( stderr , \"" -n service_name\\n\"" )"", ""ExpressionStatement""]], ["""", [22513, ""True"", ""fprintf ( stderr , \""Usage: %s [options..]\\n\"" , program )"", ""ExpressionStatement""]]]","[[[""fprintf"", ""stderr"", ""\"" -t ttl    PAM connection ttl in seconds (default %d)\\n\"""", ""DEFAULT_SQUID_PAM_TTL""]], [[""fprintf"", ""stderr"", ""\""           The PAM service name (default \\\""%s\\\"")\\n\"""", ""DEFAULT_SQUID_PAM_SERVICE""]], [[""fprintf"", ""stderr"", ""\"" -n service_name\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: %s [options..]\\n\"""", ""char *""]]]",[],"[""\""           during this time the same connection will be reused\\n\""""]"
"fprintf ( stderr , "" -t ttl    PAM connection ttl in seconds (default %d)\n"" , DEFAULT_SQUID_PAM_TTL )",152:4:5130:5227,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,[],"[["""", [22493, ""True"", ""fprintf ( stderr , \""           The PAM service name (default \\\""%s\\\"")\\n\"" , DEFAULT_SQUID_PAM_SERVICE )"", ""ExpressionStatement""]], ["""", [22504, ""True"", ""fprintf ( stderr , \"" -n service_name\\n\"" )"", ""ExpressionStatement""]], ["""", [22513, ""True"", ""fprintf ( stderr , \""Usage: %s [options..]\\n\"" , program )"", ""ExpressionStatement""]], ["""", [22432, ""True"", ""char * program"", ""Parameter""]]]","[[[""fprintf"", ""stderr"", ""\""           The PAM service name (default \\\""%s\\\"")\\n\"""", ""DEFAULT_SQUID_PAM_SERVICE""]], [[""fprintf"", ""stderr"", ""\"" -n service_name\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: %s [options..]\\n\"""", ""char *""]], [[""char *""]]]",[],"[""\"" -t ttl    PAM connection ttl in seconds (default %d)\\n\""""]"
"fprintf ( stderr , ""           The PAM service name (default \""%s\"")\n"" , DEFAULT_SQUID_PAM_SERVICE )",151:4:5028:5124,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,[],"[["""", [22504, ""True"", ""fprintf ( stderr , \"" -n service_name\\n\"" )"", ""ExpressionStatement""]], ["""", [22513, ""True"", ""fprintf ( stderr , \""Usage: %s [options..]\\n\"" , program )"", ""ExpressionStatement""]], ["""", [22432, ""True"", ""char * program"", ""Parameter""]], ["""", [22524, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""fprintf"", ""stderr"", ""\"" -n service_name\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: %s [options..]\\n\"""", ""char *""]], [[""char *""]], [[""ENTRY""]]]",[],"[""\""           The PAM service name (default \\\""%s\\\"")\\n\""""]"
"fprintf ( stderr , "" -n service_name\n"" )",150:4:4985:5022,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,[],"[["""", [22513, ""True"", ""fprintf ( stderr , \""Usage: %s [options..]\\n\"" , program )"", ""ExpressionStatement""]], ["""", [22432, ""True"", ""char * program"", ""Parameter""]], ["""", [22524, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""fprintf"", ""stderr"", ""\""Usage: %s [options..]\\n\"""", ""char *""]], [[""char *""]], [[""ENTRY""]]]",[],"[""\"" -n service_name\\n\""""]"
"fprintf ( stderr , ""Usage: %s [options..]\n"" , program )",149:4:4928:4979,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,[],"[["""", [22432, ""True"", ""char * program"", ""Parameter""]], ["""", [22524, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""char *""]], [[""ENTRY""]]]","[[[""char *""], ""char *""]]","[""\""Usage: %s [options..]\\n\""""]"
"fprintf ( stderr , ""FATAL: Unknown option '%s'\n"" , argv [ optind ] )",205:8:6716:6777,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,"[[""True"", [23088, ""True"", ""optind < argc"", ""Condition""]]]","[["""", [23092, ""True"", ""start :"", ""Label""]], ["""", [23162, ""True"", ""goto start ;"", ""GotoStatement""]], ["""", [23164, ""True"", ""1 :"", ""Label""]], ["""", [23098, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [23127, ""True"", ""break ;"", ""BreakStatement""]], ["""", [23133, ""True"", ""break ;"", ""BreakStatement""]], ["""", [23139, ""True"", ""break ;"", ""BreakStatement""]], ["""", [23145, ""True"", ""break ;"", ""BreakStatement""]], ["""", [23156, ""True"", ""break ;"", ""BreakStatement""]], ["""", [23187, ""True"", ""setvbuf ( stdout , NULL , _IOLBF , 0 )"", ""ExpressionStatement""]]]","[[[""optind"", ""int"", ""<""]], [[""start""]], [[""start""]], [[]], [[""exit"", ""1""]], [[]], [[]], [[]], [[]], [[]], [[""setvbuf"", ""stdout"", ""NULL"", ""_IOLBF"", ""0""]]]","[[[""char * [ ]""], ""char * [ ]""]]","[""\""FATAL: Unknown option '%s'\\n\""""]"
"fprintf ( stderr , ""FATAL: Unknown getopt value '%c'\n"" , ch )",198:12:6552:6609,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,"[[""default"", [23167, ""True"", ""ch"", ""Condition""]], [""True"", [23185, ""True"", ""1"", ""Condition""]], [""case 'n'"", [23167, ""True"", ""ch"", ""Condition""]], [""True"", [23185, ""True"", ""1"", ""Condition""]]]","[["""", [23125, ""True"", ""default :"", ""Label""]], ["""", [23169, ""True"", ""int ch = getopt ( argc , argv , \""1n:t:or\"" ) ;"", ""IdentifierDeclStatement""]]]","[[[""int""]], [[""1""]], [[""int"", ""'n'"", ""==""]], [[""1""]], [[""default""]], [[""int"", ""int"", ""getopt"", ""int"", ""char * [ ]"", ""\""1n:t:or\"""", ""=""]]]","[[[""int"", ""int"", ""getopt"", ""int"", ""char * [ ]"", ""\""1n:t:or\"""", ""=""], ""int""]]","[""\""FATAL: Unknown getopt value '%c'\\n\""""]"
"fprintf ( stderr , ""%s: No response from RADIUS server\n"" , progname )",464:4:12232:12297,/data/download/squid/squid-3.5.25/helpers/basic_auth/RADIUS/basic_radius_auth.cc,"[[""False"", [24505, ""True"", ""retry"", ""Condition""]], [""True"", [24338, ""True"", ""select ( socket_fd + 1 , & readfds , NULL , NULL , & tv ) == 0"", ""Condition""]], [""True"", [24426, ""True"", ""( time_spent = time_since ( & sent ) ) < 1000000"", ""Condition""]], [""True"", [24465, ""True"", ""send ( socket_fd , ( char * ) auth , total_length , 0 ) < 0"", ""Condition""]], [""True"", [24426, ""True"", ""( time_spent = time_since ( & sent ) ) < 1000000"", ""Condition""]], [""False"", [24258, ""True"", ""rc == 1"", ""Condition""]], [""False"", [24299, ""True"", ""len < 0"", ""Condition""]], [""False"", [24465, ""True"", ""send ( socket_fd , ( char * ) auth , total_length , 0 ) < 0"", ""Condition""]], [""True"", [24505, ""True"", ""retry"", ""Condition""]], [""False"", [24258, ""True"", ""rc == 1"", ""Condition""]], [""False"", [24299, ""True"", ""len < 0"", ""Condition""]], [""False"", [24465, ""True"", ""send ( socket_fd , ( char * ) auth , total_length , 0 ) < 0"", ""Condition""]], [""False"", [24272, ""True"", ""rc == 0"", ""Condition""]], [""False"", [24338, ""True"", ""select ( socket_fd + 1 , & readfds , NULL , NULL , & tv ) == 0"", ""Condition""]], [""True"", [24505, ""True"", ""retry"", ""Condition""]], [""True"", [24338, ""True"", ""select ( socket_fd + 1 , & readfds , NULL , NULL , & tv ) == 0"", ""Condition""]], [""True"", [24426, ""True"", ""( time_spent = time_since ( & sent ) ) < 1000000"", ""Condition""]], [""True"", [24465, ""True"", ""send ( socket_fd , ( char * ) auth , total_length , 0 ) < 0"", ""Condition""]]]",[],"[[[""int""]], [[""select"", ""int"", ""1"", ""+"", ""&"", ""readfds"", ""NULL"", ""NULL"", ""&"", ""tv"", ""0"", ""==""]], [[""time_spent"", ""time_since"", ""&"", ""sent"", ""="", ""1000000"", ""<""]], [[""send"", ""int"", ""AUTH_HDR *"", ""unsigned short"", ""0"", ""0"", ""<""]], [[""time_spent"", ""time_since"", ""&"", ""sent"", ""="", ""1000000"", ""<""]], [[""int"", ""1"", ""==""]], [[""int"", ""0"", ""<""]], [[""send"", ""int"", ""AUTH_HDR *"", ""unsigned short"", ""0"", ""0"", ""<""]], [[""int""]], [[""int"", ""1"", ""==""]], [[""int"", ""0"", ""<""]], [[""send"", ""int"", ""AUTH_HDR *"", ""unsigned short"", ""0"", ""0"", ""<""]], [[""int"", ""0"", ""==""]], [[""select"", ""int"", ""1"", ""+"", ""&"", ""readfds"", ""NULL"", ""NULL"", ""&"", ""tv"", ""0"", ""==""]], [[""int""]], [[""select"", ""int"", ""1"", ""+"", ""&"", ""readfds"", ""NULL"", ""NULL"", ""&"", ""tv"", ""0"", ""==""]], [[""time_spent"", ""time_since"", ""&"", ""sent"", ""="", ""1000000"", ""<""]], [[""send"", ""int"", ""AUTH_HDR *"", ""unsigned short"", ""0"", ""0"", ""<""]]]",[],"[""\""%s: No response from RADIUS server\\n\""""]"
"fprintf ( stderr , ""ERROR: RADIUS send() failure: %s\n"" , xstrerror ( ) )",428:16:11079:11144,/data/download/squid/squid-3.5.25/helpers/basic_auth/RADIUS/basic_radius_auth.cc,"[[""True"", [24457, ""True"", ""errno != EAGAIN && errno != EWOULDBLOCK"", ""Condition""]], [""True"", [24465, ""True"", ""send ( socket_fd , ( char * ) auth , total_length , 0 ) < 0"", ""Condition""]], [""True"", [24505, ""True"", ""retry"", ""Condition""]], [""True"", [24338, ""True"", ""select ( socket_fd + 1 , & readfds , NULL , NULL , & tv ) == 0"", ""Condition""]], [""True"", [24426, ""True"", ""( time_spent = time_since ( & sent ) ) < 1000000"", ""Condition""]], [""True"", [24465, ""True"", ""send ( socket_fd , ( char * ) auth , total_length , 0 ) < 0"", ""Condition""]]]",[],"[[[""errno"", ""EAGAIN"", ""!=""]], [[""errno"", ""EWOULDBLOCK"", ""!=""]], [[""send"", ""int"", ""AUTH_HDR *"", ""unsigned short"", ""0"", ""0"", ""<""]], [[""int""]], [[""select"", ""int"", ""1"", ""+"", ""&"", ""readfds"", ""NULL"", ""NULL"", ""&"", ""tv"", ""0"", ""==""]], [[""time_spent"", ""time_since"", ""&"", ""sent"", ""="", ""1000000"", ""<""]], [[""send"", ""int"", ""AUTH_HDR *"", ""unsigned short"", ""0"", ""0"", ""<""]]]",[],"[""\""ERROR: RADIUS send() failure: %s\\n\""""]"
"fprintf ( stderr , ""%s| ERROR: fcntl() failure: %s\n"" , argv [ 0 ] , xstrerror ( ) )",576:8:15438:15510,/data/download/squid/squid-3.5.25/helpers/basic_auth/RADIUS/basic_radius_auth.cc,"[[""True"", [25425, ""True"", ""fcntl ( sockfd , F_SETFL , fcntl ( sockfd , F_GETFL , 0 ) | O_NONBLOCK ) < 0"", ""Condition""]], [""False"", [25805, ""True"", ""setvbuf ( stdout , NULL , _IOLBF , 0 ) != 0"", ""Condition""]]]","[["""", [25451, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [25458, ""True"", ""perror ( \""getsockname\"" )"", ""ExpressionStatement""]], ["""", [25484, ""True"", ""salen = sizeof ( salocal )"", ""ExpressionStatement""]], ["""", [25492, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]]]","[[[""fcntl"", ""sockfd"", ""F_SETFL"", ""fcntl"", ""sockfd"", ""F_GETFL"", ""0"", ""O_NONBLOCK"", ""|"", ""0"", ""<""]], [[""setvbuf"", ""stdout"", ""NULL"", ""_IOLBF"", ""0"", ""0"", ""!=""]], [[""exit"", ""1""]], [[""perror"", ""\""getsockname\""""]], [[""socklen_t"", ""=""]], [[""exit"", ""1""]]]","[[[""char * *""], ""char * *""]]","[""\""%s| ERROR: fcntl() failure: %s\\n\"""", ""0""]"
"fprintf ( stderr , ""FATAL: %s: Couldn't find host %s\n"" , argv [ 0 ] , server )",552:8:14665:14735,/data/download/squid/squid-3.5.25/helpers/basic_auth/RADIUS/basic_radius_auth.cc,"[[""True"", [25627, ""True"", ""( auth_ipaddr = get_ipaddr ( server ) ) == 0"", ""Condition""]], [""False"", [25805, ""True"", ""setvbuf ( stdout , NULL , _IOLBF , 0 ) != 0"", ""Condition""]]]","[["""", [25639, ""True"", ""svc_port = PW_AUTH_UDP_PORT"", ""ExpressionStatement""]], ["""", [25649, ""True"", ""svc_port = atoi ( svc_name )"", ""ExpressionStatement""]], ["""", [25658, ""True"", ""svc_port = ntohs ( ( unsigned short ) svp -> s_port )"", ""ExpressionStatement""]], ["""", [25649, ""True"", ""svc_port = atoi ( svc_name )"", ""ExpressionStatement""]], ["""", [25658, ""True"", ""svc_port = ntohs ( ( unsigned short ) svp -> s_port )"", ""ExpressionStatement""]]]","[[[""auth_ipaddr"", ""get_ipaddr"", ""server"", ""="", ""0"", ""==""]], [[""setvbuf"", ""stdout"", ""NULL"", ""_IOLBF"", ""0"", ""0"", ""!=""]], [[""unsigned short"", ""PW_AUTH_UDP_PORT"", ""=""]], [[""unsigned short"", ""atoi"", ""svc_name"", ""=""]], [[""unsigned short"", ""ntohs"", ""struct servent *"", ""s_port"", ""=""]], [[""unsigned short"", ""atoi"", ""svc_name"", ""=""]], [[""unsigned short"", ""ntohs"", ""struct servent *"", ""s_port"", ""=""]]]","[[[""char * *""], ""char * *""]]","[""\""FATAL: %s: Couldn't find host %s\\n\"""", ""0""]"
"fprintf ( stderr , ""FATAL: %s: Shared secret not specified\n"" , argv [ 0 ] )",529:8:14042:14110,/data/download/squid/squid-3.5.25/helpers/basic_auth/RADIUS/basic_radius_auth.cc,"[[""True"", [25731, ""True"", ""! * secretkey"", ""Condition""]], [""False"", [25805, ""True"", ""setvbuf ( stdout , NULL , _IOLBF , 0 ) != 0"", ""Condition""]]]","[["""", [25739, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [25746, ""True"", ""fprintf ( stderr , \""FATAL: %s: Server not specified\\n\"" , argv [ 0 ] )"", ""ExpressionStatement""]], ["""", [25769, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [25776, ""True"", ""fprintf ( stderr , \""FATAL: %s: can't open configuration file '%s'.\\n\"" , argv [ 0 ] , cfname )"", ""ExpressionStatement""]]]","[[[""!"", ""*"", ""secretkey""]], [[""setvbuf"", ""stdout"", ""NULL"", ""_IOLBF"", ""0"", ""0"", ""!=""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""FATAL: %s: Server not specified\\n\"""", ""char * *"", ""0""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""FATAL: %s: can't open configuration file '%s'.\\n\"""", ""char * *"", ""0"", ""const char *""]]]","[[[""char * *""], ""char * *""]]","[""\""FATAL: %s: Shared secret not specified\\n\"""", ""0""]"
"fprintf ( stderr , ""FATAL: %s: Server not specified\n"" , argv [ 0 ] )",525:8:13925:13986,/data/download/squid/squid-3.5.25/helpers/basic_auth/RADIUS/basic_radius_auth.cc,"[[""True"", [25759, ""True"", ""! * server"", ""Condition""]], [""False"", [25805, ""True"", ""setvbuf ( stdout , NULL , _IOLBF , 0 ) != 0"", ""Condition""]]]","[["""", [25769, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [25776, ""True"", ""fprintf ( stderr , \""FATAL: %s: can't open configuration file '%s'.\\n\"" , argv [ 0 ] , cfname )"", ""ExpressionStatement""]]]","[[[""!"", ""*"", ""server""]], [[""setvbuf"", ""stdout"", ""NULL"", ""_IOLBF"", ""0"", ""0"", ""!=""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""FATAL: %s: can't open configuration file '%s'.\\n\"""", ""char * *"", ""0"", ""const char *""]]]","[[[""char * *""], ""char * *""]]","[""\""FATAL: %s: Server not specified\\n\"""", ""0""]"
"fprintf ( stderr , ""FATAL: %s: can't open configuration file '%s'.\n"" , argv [ 0 ] , cfname )",520:12:13774:13858,/data/download/squid/squid-3.5.25/helpers/basic_auth/RADIUS/basic_radius_auth.cc,"[[""True"", [25791, ""True"", ""rad_auth_config ( cfname ) < 0"", ""Condition""]], [""True"", [25800, ""True"", ""cfname"", ""Condition""]], [""False"", [25805, ""True"", ""setvbuf ( stdout , NULL , _IOLBF , 0 ) != 0"", ""Condition""]]]",[],"[[[""rad_auth_config"", ""const char *"", ""0"", ""<""]], [[""const char *""]], [[""setvbuf"", ""stdout"", ""NULL"", ""_IOLBF"", ""0"", ""0"", ""!=""]]]","[[[""const char *"", ""NULL"", ""NULL"", ""=""], ""const char *""], [[""const char *"", ""optarg"", ""=""], ""const char *""], [[""char * *""], ""char * *""]]","[""\""FATAL: %s: can't open configuration file '%s'.\\n\"""", ""0""]"
"fprintf ( stderr , ""FATAL: %d %s\n"" , rc , sasl_errstring ( rc , NULL , NULL ) )",80:8:2318:2388,/data/download/squid/squid-3.5.25/helpers/basic_auth/SASL/basic_sasl_auth.cc,"[[""True"", [26807, ""True"", ""rc != SASL_OK"", ""Condition""]], [""False"", [26858, ""True"", ""rc != SASL_OK"", ""Condition""]]]","[["""", [26811, ""True"", ""rc = sasl_server_new ( APP_NAME_SASL , NULL , NULL , NULL , 0 , & conn )"", ""ExpressionStatement""]], ["""", [26862, ""True"", ""rc = sasl_server_init ( NULL , APP_NAME_SASL )"", ""ExpressionStatement""]]]","[[[""int"", ""SASL_OK"", ""!=""]], [[""int"", ""SASL_OK"", ""!=""]], [[""int"", ""sasl_server_new"", ""APP_NAME_SASL"", ""NULL"", ""NULL"", ""NULL"", ""0"", ""&"", ""conn"", ""=""]], [[""int"", ""sasl_server_init"", ""NULL"", ""APP_NAME_SASL"", ""=""]]]","[[[""int"", ""sasl_server_new"", ""APP_NAME_SASL"", ""NULL"", ""NULL"", ""NULL"", ""0"", ""&"", ""conn"", ""=""], ""int""]]","[""\""FATAL: %d %s\\n\""""]"
"fprintf ( stderr , ""FATAL: %d %s\n"" , rc , sasl_errstring ( rc , NULL , NULL ) )",69:8:1991:2061,/data/download/squid/squid-3.5.25/helpers/basic_auth/SASL/basic_sasl_auth.cc,"[[""True"", [26858, ""True"", ""rc != SASL_OK"", ""Condition""]]]","[["""", [26862, ""True"", ""rc = sasl_server_init ( NULL , APP_NAME_SASL )"", ""ExpressionStatement""]], ["""", [26873, ""True"", ""setvbuf ( stdout , NULL , _IOLBF , 0 )"", ""ExpressionStatement""]], ["""", [26886, ""True"", ""sasl_conn_t * conn = NULL ;"", ""IdentifierDeclStatement""]]]","[[[""int"", ""SASL_OK"", ""!=""]], [[""int"", ""sasl_server_init"", ""NULL"", ""APP_NAME_SASL"", ""=""]], [[""setvbuf"", ""stdout"", ""NULL"", ""_IOLBF"", ""0""]], [[""sasl_conn_t *"", ""NULL"", ""NULL"", ""=""]]]","[[[""int"", ""sasl_server_init"", ""NULL"", ""APP_NAME_SASL"", ""=""], ""int""]]","[""\""FATAL: %d %s\\n\""""]"
"( void ) fprintf ( p , ""%s\n"" , user )",228:8:6576:6607,/data/download/squid/squid-3.5.25/helpers/basic_auth/SMB/basic_smb_auth.cc,"[[""False"", [27283, ""True"", ""( p = popen ( shcmd , \""w\"" ) ) == NULL"", ""Condition""]], [""False"", [27306, ""True"", ""dom == NULL"", ""Condition""]], [""False"", [27434, ""True"", ""( s = strchr ( buf , ' ' ) ) == NULL"", ""Condition""]], [""False"", [27455, ""True"", ""( s = strchr ( buf , '\\n' ) ) == NULL"", ""Condition""]]]","[["""", [27183, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> authfile )"", ""ExpressionStatement""]], ["""", [27198, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> authshare )"", ""ExpressionStatement""]], ["""", [27213, ""True"", ""( void ) fprintf ( p , \""%d\\n\"" , dom -> nmbcast )"", ""ExpressionStatement""]], ["""", [27228, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> nmbaddr )"", ""ExpressionStatement""]]]","[[[""p"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""]], [[""struct SMBDOMAIN *"", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""' '"", ""="", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""authfile""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""authshare""]], [[""fprintf"", ""FILE *"", ""\""%d\\n\"""", ""struct SMBDOMAIN *"", ""nmbcast""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""nmbaddr""]]]","[[[""char *"", ""char [ HELPER_INPUT_BUFFER ]"", ""=""], ""char *""], [[""char *"", ""char *"", ""1"", ""+"", ""=""], ""char *""], [[""FILE *"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""], ""FILE *""]]","[""\""%s\\n\""""]"
"( void ) fprintf ( p , ""%s\n"" , dom -> authfile )",227:8:6526:6566,/data/download/squid/squid-3.5.25/helpers/basic_auth/SMB/basic_smb_auth.cc,"[[""False"", [27283, ""True"", ""( p = popen ( shcmd , \""w\"" ) ) == NULL"", ""Condition""]], [""False"", [27306, ""True"", ""dom == NULL"", ""Condition""]], [""False"", [27434, ""True"", ""( s = strchr ( buf , ' ' ) ) == NULL"", ""Condition""]], [""False"", [27455, ""True"", ""( s = strchr ( buf , '\\n' ) ) == NULL"", ""Condition""]]]","[["""", [27198, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> authshare )"", ""ExpressionStatement""]], ["""", [27213, ""True"", ""( void ) fprintf ( p , \""%d\\n\"" , dom -> nmbcast )"", ""ExpressionStatement""]], ["""", [27228, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> nmbaddr )"", ""ExpressionStatement""]], ["""", [27243, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> passthrough )"", ""ExpressionStatement""]]]","[[[""p"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""]], [[""struct SMBDOMAIN *"", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""' '"", ""="", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""authshare""]], [[""fprintf"", ""FILE *"", ""\""%d\\n\"""", ""struct SMBDOMAIN *"", ""nmbcast""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""nmbaddr""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""passthrough""]]]","[[[""struct SMBDOMAIN *"", ""next"", ""NULL"", ""=""], ""* dom""], [[""FILE *"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""], ""FILE *""], [[""struct SMBDOMAIN *"", ""authfile"", ""\""proxyauth\"""", ""=""], ""dom -> authfile""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""struct SMBDOMAIN *"", ""next""], ""struct SMBDOMAIN *""]]","[""\""%s\\n\""""]"
"( void ) fprintf ( p , ""%s\n"" , dom -> authshare )",226:8:6475:6516,/data/download/squid/squid-3.5.25/helpers/basic_auth/SMB/basic_smb_auth.cc,"[[""False"", [27283, ""True"", ""( p = popen ( shcmd , \""w\"" ) ) == NULL"", ""Condition""]], [""False"", [27306, ""True"", ""dom == NULL"", ""Condition""]], [""False"", [27434, ""True"", ""( s = strchr ( buf , ' ' ) ) == NULL"", ""Condition""]], [""False"", [27455, ""True"", ""( s = strchr ( buf , '\\n' ) ) == NULL"", ""Condition""]]]","[["""", [27213, ""True"", ""( void ) fprintf ( p , \""%d\\n\"" , dom -> nmbcast )"", ""ExpressionStatement""]], ["""", [27228, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> nmbaddr )"", ""ExpressionStatement""]], ["""", [27243, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> passthrough )"", ""ExpressionStatement""]], ["""", [27258, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> name )"", ""ExpressionStatement""]]]","[[[""p"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""]], [[""struct SMBDOMAIN *"", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""' '"", ""="", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""fprintf"", ""FILE *"", ""\""%d\\n\"""", ""struct SMBDOMAIN *"", ""nmbcast""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""nmbaddr""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""passthrough""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""name""]]]","[[[""struct SMBDOMAIN *"", ""authshare"", ""\""NETLOGON\"""", ""=""], ""dom -> authshare""], [[""struct SMBDOMAIN *"", ""next"", ""NULL"", ""=""], ""* dom""], [[""FILE *"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""], ""FILE *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""struct SMBDOMAIN *"", ""next""], ""struct SMBDOMAIN *""]]","[""\""%s\\n\""""]"
"( void ) fprintf ( p , ""%d\n"" , dom -> nmbcast )",225:8:6426:6465,/data/download/squid/squid-3.5.25/helpers/basic_auth/SMB/basic_smb_auth.cc,"[[""False"", [27283, ""True"", ""( p = popen ( shcmd , \""w\"" ) ) == NULL"", ""Condition""]], [""False"", [27306, ""True"", ""dom == NULL"", ""Condition""]], [""False"", [27434, ""True"", ""( s = strchr ( buf , ' ' ) ) == NULL"", ""Condition""]], [""False"", [27455, ""True"", ""( s = strchr ( buf , '\\n' ) ) == NULL"", ""Condition""]]]","[["""", [27228, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> nmbaddr )"", ""ExpressionStatement""]], ["""", [27243, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> passthrough )"", ""ExpressionStatement""]], ["""", [27258, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> name )"", ""ExpressionStatement""]]]","[[[""p"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""]], [[""struct SMBDOMAIN *"", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""' '"", ""="", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""nmbaddr""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""passthrough""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""name""]]]","[[[""struct SMBDOMAIN *"", ""nmbcast"", ""NMB_BROADCAST"", ""=""], ""dom -> nmbcast""], [[""struct SMBDOMAIN *"", ""next"", ""NULL"", ""=""], ""* dom""], [[""FILE *"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""], ""FILE *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""struct SMBDOMAIN *"", ""next""], ""struct SMBDOMAIN *""]]","[""\""%d\\n\""""]"
"( void ) fprintf ( p , ""%s\n"" , dom -> nmbaddr )",224:8:6377:6416,/data/download/squid/squid-3.5.25/helpers/basic_auth/SMB/basic_smb_auth.cc,"[[""False"", [27283, ""True"", ""( p = popen ( shcmd , \""w\"" ) ) == NULL"", ""Condition""]], [""False"", [27306, ""True"", ""dom == NULL"", ""Condition""]], [""False"", [27434, ""True"", ""( s = strchr ( buf , ' ' ) ) == NULL"", ""Condition""]], [""False"", [27455, ""True"", ""( s = strchr ( buf , '\\n' ) ) == NULL"", ""Condition""]]]","[["""", [27243, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> passthrough )"", ""ExpressionStatement""]], ["""", [27258, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> name )"", ""ExpressionStatement""]]]","[[[""p"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""]], [[""struct SMBDOMAIN *"", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""' '"", ""="", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""passthrough""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""name""]]]","[[[""struct SMBDOMAIN *"", ""next"", ""NULL"", ""=""], ""* dom""], [[""FILE *"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""], ""FILE *""], [[""struct SMBDOMAIN *"", ""nmbaddr"", ""\""\"""", ""=""], ""dom -> nmbaddr""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""struct SMBDOMAIN *"", ""next""], ""struct SMBDOMAIN *""]]","[""\""%s\\n\""""]"
"( void ) fprintf ( p , ""%s\n"" , dom -> passthrough )",223:8:6324:6367,/data/download/squid/squid-3.5.25/helpers/basic_auth/SMB/basic_smb_auth.cc,"[[""False"", [27283, ""True"", ""( p = popen ( shcmd , \""w\"" ) ) == NULL"", ""Condition""]], [""False"", [27306, ""True"", ""dom == NULL"", ""Condition""]], [""False"", [27434, ""True"", ""( s = strchr ( buf , ' ' ) ) == NULL"", ""Condition""]], [""False"", [27455, ""True"", ""( s = strchr ( buf , '\\n' ) ) == NULL"", ""Condition""]]]","[["""", [27258, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> name )"", ""ExpressionStatement""]], ["""", [27312, ""True"", ""dom = firstdom"", ""ExpressionStatement""]], ["""", [27319, ""True"", ""break ;"", ""BreakStatement""]]]","[[[""p"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""]], [[""struct SMBDOMAIN *"", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""' '"", ""="", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""name""]], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""]], [[]]]","[[[""struct SMBDOMAIN *"", ""passthrough"", ""\""\"""", ""=""], ""dom -> passthrough""], [[""struct SMBDOMAIN *"", ""next"", ""NULL"", ""=""], ""* dom""], [[""FILE *"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""], ""FILE *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""struct SMBDOMAIN *"", ""next""], ""struct SMBDOMAIN *""]]","[""\""%s\\n\""""]"
"( void ) fprintf ( p , ""%s\n"" , dom -> name )",222:8:6278:6314,/data/download/squid/squid-3.5.25/helpers/basic_auth/SMB/basic_smb_auth.cc,"[[""False"", [27283, ""True"", ""( p = popen ( shcmd , \""w\"" ) ) == NULL"", ""Condition""]], [""False"", [27306, ""True"", ""dom == NULL"", ""Condition""]], [""False"", [27434, ""True"", ""( s = strchr ( buf , ' ' ) ) == NULL"", ""Condition""]], [""False"", [27455, ""True"", ""( s = strchr ( buf , '\\n' ) ) == NULL"", ""Condition""]]]","[["""", [27312, ""True"", ""dom = firstdom"", ""ExpressionStatement""]], ["""", [27319, ""True"", ""break ;"", ""BreakStatement""]], ["""", [27333, ""True"", ""dom = dom -> next"", ""AssignmentExpr""]], ["""", [27342, ""True"", ""dom = firstdom ;"", ""ForInit""]]]","[[[""p"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""]], [[""struct SMBDOMAIN *"", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""' '"", ""="", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""]], [[]], [[""struct SMBDOMAIN *"", ""struct SMBDOMAIN *"", ""next""]], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""]]]","[[[""struct SMBDOMAIN *"", ""next"", ""NULL"", ""=""], ""* dom""], [[""struct SMBDOMAIN *"", ""name"", ""struct SMBDOMAIN *"", ""sname"", ""char * [ ]"", ""int"", ""="", ""=""], ""dom -> name""], [[""FILE *"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""], ""FILE *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""struct SMBDOMAIN *"", ""next""], ""struct SMBDOMAIN *""]]","[""\""%s\\n\""""]"
"fprintf ( stderr , ""FATAL: Unknown option: -%c\n"" , opt )",105:12:3028:3080,/data/download/squid/squid-3.5.25/helpers/basic_auth/SSPI/basic_sspi_auth.cc,"[[""case 'h'"", [28933, ""True"", ""opt"", ""Condition""]], [""True"", [28935, ""True"", ""- 1 != ( opt = getopt ( argc , argv , \""dhA:D:O:\"" ) )"", ""Condition""]]]","[["""", [28846, ""True"", ""default :"", ""Label""]], ["""", [28848, ""True"", ""opt = optopt"", ""ExpressionStatement""]], ["""", [28852, ""True"", ""case '?' :"", ""Label""]], ["""", [28853, ""True"", ""exit ( 0 )"", ""ExpressionStatement""]], ["""", [28819, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [28870, ""True"", ""break ;"", ""BreakStatement""]], ["""", [28876, ""True"", ""break ;"", ""BreakStatement""]], ["""", [28889, ""True"", ""break ;"", ""BreakStatement""]], ["""", [28911, ""True"", ""break ;"", ""BreakStatement""]], ["""", [28952, ""True"", ""int opt ;"", ""IdentifierDeclStatement""]]]","[[[""int"", ""'h'"", ""==""]], [[""-"", ""1"", ""opt"", ""getopt"", ""int"", ""char * [ ]"", ""\""dhA:D:O:\"""", ""="", ""!=""]], [[""default""]], [[""int"", ""optopt"", ""=""]], [[]], [[""exit"", ""0""]], [[""exit"", ""1""]], [[]], [[]], [[]], [[]], [[""int""]]]","[[[""-"", ""1"", ""int"", ""getopt"", ""int"", ""char * [ ]"", ""\""dhA:D:O:\"""", ""="", ""!=""], ""int""], [[""int"", ""optopt"", ""=""], ""int""]]","[""\""FATAL: Unknown option: -%c\\n\""""]"
"fprintf ( stderr , ""FATAL: can't initialize SSPI, exiting.\n"" )",127:8:3524:3583,/data/download/squid/squid-3.5.25/helpers/basic_auth/SSPI/basic_sspi_auth.cc,"[[""True"", [29261, ""True"", ""LoadSecurityDll ( SSP_BASIC , NTLM_PACKAGE_NAME ) == NULL"", ""Condition""]]]","[["""", [29272, ""True"", ""process_options ( argc , argv )"", ""ExpressionStatement""]], ["""", [29281, ""True"", ""int err = 0 ;"", ""IdentifierDeclStatement""]], ["""", [29288, ""True"", ""char * p ;"", ""IdentifierDeclStatement""]]]","[[[""LoadSecurityDll"", ""SSP_BASIC"", ""NTLM_PACKAGE_NAME"", ""NULL"", ""==""]], [[""process_options"", ""int"", ""char * *""]], [[""int"", ""int"", ""0"", ""=""]], [[""char *""]]]",[],"[""\""FATAL: can't initialize SSPI, exiting.\\n\""""]"
"vfprintf ( stderr , format , args )",88:8:2431:2461,/data/download/squid/squid-3.5.25/helpers/basic_auth/SSPI/valid.h,"[[""True"", [30056, ""True"", ""debug_enabled"", ""Condition""]]]","[["""", [30029, ""True"", ""fprintf ( stderr , \""nt_auth[%d]: \"" , getpid ( ) )"", ""ExpressionStatement""]], ["""", [30043, ""True"", ""va_start ( args , format )"", ""ExpressionStatement""]], ["""", [30052, ""True"", ""va_list args ;"", ""IdentifierDeclStatement""]]]","[[[""debug_enabled""]], [[""fprintf"", ""stderr"", ""\""nt_auth[%d]: \"""", ""getpid""]], [[""va_start"", ""va_list"", ""char *""]], [[""va_list""]]]","[[[""char *""], ""char *""], [[""va_list""], ""va_list""]]",[]
"fprintf ( stderr , ""nt_auth[%d]: "" , getpid ( ) )",87:8:2380:2421,/data/download/squid/squid-3.5.25/helpers/basic_auth/SSPI/valid.h,"[[""True"", [30056, ""True"", ""debug_enabled"", ""Condition""]]]","[["""", [30043, ""True"", ""va_start ( args , format )"", ""ExpressionStatement""]], ["""", [30052, ""True"", ""va_list args ;"", ""IdentifierDeclStatement""]], ["""", [30004, ""True"", ""char * format"", ""Parameter""]]]","[[[""debug_enabled""]], [[""va_start"", ""va_list"", ""char *""]], [[""va_list""]], [[""char *""]]]",[],"[""\""nt_auth[%d]: \""""]"
"fprintf ( stderr , ""%s: FATAL: unknown option: -%c. Exiting\n"" , program_name , opt )",82:12:2536:2615,/data/download/squid/squid-3.5.25/helpers/basic_auth/fake/fake.cc,"[[""case 'h'"", [30150, ""True"", ""opt"", ""Condition""]], [""True"", [30152, ""True"", ""- 1 != ( opt = getopt ( argc , argv , \""hd\"" ) )"", ""Condition""]]]","[["""", [30129, ""True"", ""default :"", ""Label""]], ["""", [30131, ""True"", ""exit ( 0 )"", ""ExpressionStatement""]], ["""", [30138, ""True"", ""usage ( )"", ""ExpressionStatement""]], ["""", [30143, ""True"", ""case 'h' :"", ""Label""]], ["""", [30104, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [30144, ""True"", ""break ;"", ""BreakStatement""]], ["""", [30169, ""True"", ""opterr = 0"", ""ExpressionStatement""]]]","[[[""int"", ""'h'"", ""==""]], [[""-"", ""1"", ""opt"", ""getopt"", ""int"", ""char * [ ]"", ""\""hd\"""", ""="", ""!=""]], [[""default""]], [[""exit"", ""0""]], [[""usage""]], [[]], [[""exit"", ""1""]], [[]], [[""opterr"", ""0"", ""=""]]]","[[[""-"", ""1"", ""int"", ""getopt"", ""int"", ""char * [ ]"", ""\""hd\"""", ""="", ""!=""], ""int""]]","[""\""%s: FATAL: unknown option: -%c. Exiting\\n\""""]"
"fprintf ( stderr , ""Connect timeouts not supported in your LDAP library\n"" )",149:4:3753:3825,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,[],"[["""", [31495, ""True"", ""int aTimeLimit"", ""Parameter""]], ["""", [31509, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""int""]], [[""ENTRY""]]]",[],"[""\""Connect timeouts not supported in your LDAP library\\n\""""]"
"fprintf ( stderr , ""Could not Activate TLS connection\n"" )",373:16:11229:11283,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32405, ""True"", ""ldap_start_tls_s ( ld , NULL , NULL ) != LDAP_SUCCESS"", ""Condition""]], [""False"", [32435, ""True"", ""version != LDAP_VERSION3"", ""Condition""]], [""True"", [32439, ""True"", ""use_tls"", ""Condition""]], [""False"", [32657, ""True"", ""ld == NULL"", ""Condition""]]]","[["""", [32443, ""True"", ""ld = NULL"", ""ExpressionStatement""]]]","[[[""ldap_start_tls_s"", ""ld"", ""NULL"", ""NULL"", ""LDAP_SUCCESS"", ""!=""]], [[""version"", ""LDAP_VERSION3"", ""!=""]], [[""use_tls""]], [[""ld"", ""NULL"", ""==""]], [[""ld"", ""NULL"", ""=""]]]",[],"[""\""Could not Activate TLS connection\\n\""""]"
"fprintf ( stderr , ""TLS requires LDAP version 3\n"" )",370:16:11063:11111,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32435, ""True"", ""version != LDAP_VERSION3"", ""Condition""]], [""True"", [32439, ""True"", ""use_tls"", ""Condition""]], [""False"", [32657, ""True"", ""ld == NULL"", ""Condition""]]]","[["""", [32443, ""True"", ""ld = NULL"", ""ExpressionStatement""]], ["""", [32447, ""True"", ""ldap_unbind ( ld )"", ""ExpressionStatement""]], ["""", [32482, ""True"", ""version = LDAP_VERSION2"", ""ExpressionStatement""]]]","[[[""version"", ""LDAP_VERSION3"", ""!=""]], [[""use_tls""]], [[""ld"", ""NULL"", ""==""]], [[""ld"", ""NULL"", ""=""]], [[""ldap_unbind"", ""ld""]], [[""version"", ""LDAP_VERSION2"", ""=""]]]",[],"[""\""TLS requires LDAP version 3\\n\""""]"
"fprintf ( stderr , ""Could not set LDAP_OPT_PROTOCOL_VERSION %d\n"" , version )",362:12:10802:10894,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32465, ""True"", ""ldap_set_option ( ld , LDAP_OPT_PROTOCOL_VERSION , & version ) != LDAP_SUCCESS"", ""Condition""]], [""False"", [32657, ""True"", ""ld == NULL"", ""Condition""]]]","[["""", [32482, ""True"", ""version = LDAP_VERSION2"", ""ExpressionStatement""]], ["""", [32493, ""True"", ""squid_ldap_set_connect_timeout ( connect_timeout )"", ""ExpressionStatement""]], ["""", [32493, ""True"", ""squid_ldap_set_connect_timeout ( connect_timeout )"", ""ExpressionStatement""]], ["""", [32508, ""True"", ""fprintf ( stderr , \""\\nUnable to connect to LDAP server:%s port:%d\\n\"" , ldapServer , port )"", ""ExpressionStatement""]], ["""", [32537, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [32618, ""True"", ""fprintf ( stderr , \""\\nUnable to connect to LDAPURI:%s\\n\"" , ldapServer )"", ""ExpressionStatement""]]]","[[[""ldap_set_option"", ""ld"", ""LDAP_OPT_PROTOCOL_VERSION"", ""&"", ""version"", ""LDAP_SUCCESS"", ""!=""]], [[""ld"", ""NULL"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=""]], [[""squid_ldap_set_connect_timeout"", ""connect_timeout""]], [[""squid_ldap_set_connect_timeout"", ""connect_timeout""]], [[""fprintf"", ""stderr"", ""\""\\nUnable to connect to LDAP server:%s port:%d\\n\"""", ""ldapServer"", ""port""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""\\nUnable to connect to LDAPURI:%s\\n\"""", ""ldapServer""]]]","[[[""version"", ""LDAP_VERSION2"", ""=""], ""version""]]","[""\""Could not set LDAP_OPT_PROTOCOL_VERSION %d\\n\""""]"
"fprintf ( stderr , ""\nUnable to connect to LDAP server:%s port:%d\n"" , ldapServer , port )",351:20:10394:10478,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32521, ""True"", ""( ld = ldap_init ( ldapServer , port ) ) == NULL"", ""Condition""]], [""False"", [32613, ""True"", ""sslpath"", ""Condition""]], [""False"", [32646, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""True"", [32657, ""True"", ""ld == NULL"", ""Condition""]]]",[],"[[[""ld"", ""ldap_init"", ""ldapServer"", ""port"", ""="", ""NULL"", ""==""]], [[""sslpath""]], [[""strstr"", ""ldapServer"", ""\""://\"""", ""NULL"", ""!=""]], [[""ld"", ""NULL"", ""==""]]]",[],"[""\""\\nUnable to connect to LDAP server:%s port:%d\\n\""""]"
"fprintf ( stderr , ""\nUnable to connect to SSL LDAP server: %s port:%d\n"" , ldapServer , port )",344:20:10116:10233,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32557, ""True"", ""( ld = ldapssl_init ( ldapServer , port , 1 ) ) == NULL"", ""Condition""]], [""True"", [32613, ""True"", ""sslpath"", ""Condition""]], [""False"", [32646, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""True"", [32657, ""True"", ""ld == NULL"", ""Condition""]]]","[["""", [32575, ""True"", ""++ sslinit"", ""ExpressionStatement""]], ["""", [32580, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [32587, ""True"", ""fprintf ( stderr , \""\\nUnable to initialise SSL with cert path %s\\n\"" , sslpath )"", ""ExpressionStatement""]]]","[[[""ld"", ""ldapssl_init"", ""ldapServer"", ""port"", ""1"", ""="", ""NULL"", ""==""]], [[""sslpath""]], [[""strstr"", ""ldapServer"", ""\""://\"""", ""NULL"", ""!=""]], [[""ld"", ""NULL"", ""==""]], [[""sslinit""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""\\nUnable to initialise SSL with cert path %s\\n\"""", ""sslpath""]]]",[],"[""\""\\nUnable to connect to SSL LDAP server: %s port:%d\\n\""""]"
"fprintf ( stderr , ""\nUnable to initialise SSL with cert path %s\n"" , sslpath )",337:20:9817:9919,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32598, ""True"", ""! sslinit && ( ldapssl_client_init ( sslpath , NULL ) != LDAP_SUCCESS )"", ""Condition""]], [""True"", [32613, ""True"", ""sslpath"", ""Condition""]], [""False"", [32646, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""True"", [32657, ""True"", ""ld == NULL"", ""Condition""]]]",[],"[[[""!"", ""sslinit""]], [[""ldapssl_client_init"", ""sslpath"", ""NULL"", ""LDAP_SUCCESS"", ""!=""]], [[""sslpath""]], [[""strstr"", ""ldapServer"", ""\""://\"""", ""NULL"", ""!=""]], [[""ld"", ""NULL"", ""==""]]]",[],"[""\""\\nUnable to initialise SSL with cert path %s\\n\""""]"
"fprintf ( stderr , ""\nUnable to connect to LDAPURI:%s\n"" , ldapServer )",330:16:9561:9627,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32629, ""True"", ""rc != LDAP_SUCCESS"", ""Condition""]], [""True"", [32646, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""True"", [32657, ""True"", ""ld == NULL"", ""Condition""]]]","[["""", [32633, ""True"", ""rc = ldap_initialize ( & ld , ldapServer )"", ""ExpressionStatement""]]]","[[[""int"", ""LDAP_SUCCESS"", ""!=""]], [[""strstr"", ""ldapServer"", ""\""://\"""", ""NULL"", ""!=""]], [[""ld"", ""NULL"", ""==""]], [[""int"", ""ldap_initialize"", ""&"", ""ld"", ""ldapServer"", ""=""]]]",[],"[""\""\\nUnable to connect to LDAPURI:%s\\n\""""]"
"fprintf ( stderr , ""\tIf you need to bind as a user to perform searches then use the\n\t-D binddn -w bindpasswd or -D binddn -W secretfile options\n\n"" )",608:8:19414:19563,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\tIf you need to bind as a user to perform searches then use the\\n\\t-D binddn -w bindpasswd or -D binddn -W secretfile options\\n\\n\""""]"
"fprintf ( stderr , ""\n"" )",607:8:19383:19404,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\n\""""]"
"fprintf ( stderr , ""\t-S\t\t\t\t\tStrip NT domain from usernames\n"" )",606:8:19308:19373,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-S\\t\\t\\t\\t\\tStrip NT domain from usernames\\n\""""]"
"fprintf ( stderr , ""\t-Z\t\t\t\t\tTLS encrypt the LDAP connection, requires\n\t\t\t\tLDAP version 3\n"" )",604:8:19191:19291,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-Z\\t\\t\\t\\t\\tTLS encrypt the LDAP connection, requires\\n\\t\\t\\t\\tLDAP version 3\\n\""""]"
"fprintf ( stderr , ""\t-v 2|3\t\t\t\t\tLDAP version\n"" )",603:8:19130:19181,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-v 2|3\\t\\t\\t\\t\\tLDAP version\\n\""""]"
"fprintf ( stderr , ""\t-a never|always|search|find\t\twhen to dereference aliases\n"" )",601:8:19018:19099,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-a never|always|search|find\\t\\twhen to dereference aliases\\n\""""]"
"fprintf ( stderr , ""\t-R\t\t\t\t\tdo not follow referrals\n"" )",600:8:18950:19008,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-R\\t\\t\\t\\t\\tdo not follow referrals\\n\""""]"
"fprintf ( stderr , ""\t-t timelimit\t\t\t\tsearch time limit\n"" )",599:8:18880:18940,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-t timelimit\\t\\t\\t\\tsearch time limit\\n\""""]"
"fprintf ( stderr , ""\t-c timeout\t\t\t\tconnect timeout\n"" )",598:8:18814:18870,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-c timeout\\t\\t\\t\\tconnect timeout\\n\""""]"
"fprintf ( stderr , ""\t-E sslcertpath\t\t\t\tenable LDAP over SSL\n"" )",596:8:18732:18797,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-E sslcertpath\\t\\t\\t\\tenable LDAP over SSL\\n\""""]"
"fprintf ( stderr , ""\t-P\t\t\t\t\tpersistent LDAP connection\n"" )",594:8:18635:18696,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-P\\t\\t\\t\\t\\tpersistent LDAP connection\\n\""""]"
"fprintf ( stderr , ""\t-p port\t\t\t\t\tLDAP server port (defaults to %d)\n"" , LDAP_PORT )",593:8:18541:18625,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-p port\\t\\t\\t\\t\\tLDAP server port (defaults to %d)\\n\""""]"
"fprintf ( stderr , ""\t-h server\t\t\t\tLDAP server (defaults to localhost)\n"" )",592:8:18456:18531,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-h server\\t\\t\\t\\tLDAP server (defaults to localhost)\\n\""""]"
"fprintf ( stderr , ""\t-H URI\t\t\t\t\tLDAPURI (defaults to ldap://localhost)\n"" )",590:8:18362:18439,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-H URI\\t\\t\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\""""]"
"fprintf ( stderr , ""\t-W secretfile\t\t\t\tread password for binddn from file secretfile\n"" )",588:8:18243:18332,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-W secretfile\\t\\t\\t\\tread password for binddn from file secretfile\\n\""""]"
"fprintf ( stderr , ""\t-w bindpasswd\t\t\t\tpassword for binddn\n"" )",587:8:18170:18233,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-w bindpasswd\\t\\t\\t\\tpassword for binddn\\n\""""]"
"fprintf ( stderr , ""\t-D binddn\t\t\t\tDN to bind as to perform searches\n"" )",586:8:18087:18160,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-D binddn\\t\\t\\t\\tDN to bind as to perform searches\\n\""""]"
"fprintf ( stderr , ""\t-s base|one|sub\t\t\t\tsearch scope\n"" )",585:8:18019:18077,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-s base|one|sub\\t\\t\\t\\tsearch scope\\n\""""]"
"fprintf ( stderr , ""\t-u attribute\t\t\t\tattribute to use in combination with the basedn to create the user DN\n"" )",584:8:17897:18009,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-u attribute\\t\\t\\t\\tattribute to use in combination with the basedn to create the user DN\\n\""""]"
"fprintf ( stderr , ""\t-F filter\t\t\t\tuser search filter pattern. %%s = login\n"" )",583:8:17808:17887,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-F filter\\t\\t\\t\\tuser search filter pattern. %%s = login\\n\""""]"
"fprintf ( stderr , ""\t-e Encrypted passwords(REQUIRED)\tPassword are stored encrypted using HHA1\n"" )",582:8:17701:17798,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-e Encrypted passwords(REQUIRED)\\tPassword are stored encrypted using HHA1\\n\""""]"
"fprintf ( stderr , ""\t-b basedn (REQUIRED)\t\t\tbase dn under where to search for users\n"" )",581:8:17603:17691,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-b basedn (REQUIRED)\\t\\t\\tbase dn under where to search for users\\n\""""]"
"fprintf ( stderr , ""\t-l password realm delimiter(REQUIRED)\tCharater(s) that devides the password attribute\n\t\t\t\t\t\tin realm and password tokens, default ':' realm:password\n"" )",580:8:17414:17593,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-l password realm delimiter(REQUIRED)\\tCharater(s) that devides the password attribute\\n\\t\\t\\t\\t\\t\\tin realm and password tokens, default ':' realm:password\\n\""""]"
"fprintf ( stderr , ""\t-A password attribute(REQUIRED)\t\tUser attribute that contains the password\n"" )",579:8:17305:17404,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-A password attribute(REQUIRED)\\t\\tUser attribute that contains the password\\n\""""]"
"fprintf ( stderr , ""TLS (-Z) is incompatible with version %d\n"" , version )",539:16:16136:16230,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]]]",[],"[[[""version"", ""LDAP_VERSION2"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]]]","[[[""version"", ""LDAP_VERSION3"", ""=""], ""version""], [[""version"", ""LDAP_VERSION3"", ""=""], ""version""], [[""version"", ""LDAP_VERSION2"", ""=""], ""version""]]","[""\""TLS (-Z) is incompatible with version %d\\n\""""]"
"fprintf ( stderr , ""Protocol version should be 2 or 3\n"" )",533:16:15943:15997,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""default"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]]]",[],"[[[""atoi"", ""const char *""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]]]",[],"[""\""Protocol version should be 2 or 3\\n\""""]"
"fprintf ( stderr , ""ERROR: Your LDAP library does not have URI support\n"" )",430:12:12764:12835,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""case 'H'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""char"", ""'H'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""ERROR: Your LDAP library does not have URI support\\n\""""]"
"fprintf ( stderr , ""ERROR: Connect timeouts not supported in your LDAP library\n"" )",149:4:3798:3877,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,[],"[["""", [36795, ""True"", ""int aTimeLimit"", ""Parameter""]], ["""", [36809, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""int""]], [[""ENTRY""]]]",[],"[""\""ERROR: Connect timeouts not supported in your LDAP library\\n\""""]"
"fprintf ( stderr , ""Could not Activate TLS connection\n"" )",397:16:12497:12551,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [37886, ""True"", ""( version == LDAP_VERSION3 ) && ( ldap_start_tls_s ( ld , NULL , NULL ) == LDAP_SUCCESS )"", ""Condition""]], [""True"", [37903, ""True"", ""use_tls"", ""Condition""]], [""False"", [38121, ""True"", ""ld == NULL"", ""Condition""]]]","[["""", [37907, ""True"", ""ld = NULL"", ""ExpressionStatement""]], ["""", [37911, ""True"", ""ldap_unbind ( ld )"", ""ExpressionStatement""]], ["""", [37946, ""True"", ""version = LDAP_VERSION2"", ""ExpressionStatement""]]]","[[[""version"", ""LDAP_VERSION3"", ""==""]], [[""ldap_start_tls_s"", ""ld"", ""NULL"", ""NULL"", ""LDAP_SUCCESS"", ""==""]], [[""use_tls""]], [[""ld"", ""NULL"", ""==""]], [[""ld"", ""NULL"", ""=""]], [[""ldap_unbind"", ""ld""]], [[""version"", ""LDAP_VERSION2"", ""=""]]]",[],"[""\""Could not Activate TLS connection\\n\""""]"
"fprintf ( stderr , ""Could not set LDAP_OPT_PROTOCOL_VERSION %d\n"" , version )",389:12:12180:12272,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [37929, ""True"", ""ldap_set_option ( ld , LDAP_OPT_PROTOCOL_VERSION , & version ) != LDAP_SUCCESS"", ""Condition""]], [""False"", [38121, ""True"", ""ld == NULL"", ""Condition""]]]","[["""", [37946, ""True"", ""version = LDAP_VERSION2"", ""ExpressionStatement""]], ["""", [37957, ""True"", ""squid_ldap_set_connect_timeout ( connect_timeout )"", ""ExpressionStatement""]], ["""", [37957, ""True"", ""squid_ldap_set_connect_timeout ( connect_timeout )"", ""ExpressionStatement""]], ["""", [37972, ""True"", ""fprintf ( stderr , \""\\nUnable to connect to LDAP server:%s port:%d\\n\"" , ldapServer , port )"", ""ExpressionStatement""]], ["""", [38001, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [38082, ""True"", ""fprintf ( stderr , \""\\nUnable to connect to LDAPURI:%s\\n\"" , ldapServer )"", ""ExpressionStatement""]]]","[[[""ldap_set_option"", ""ld"", ""LDAP_OPT_PROTOCOL_VERSION"", ""&"", ""version"", ""LDAP_SUCCESS"", ""!=""]], [[""ld"", ""NULL"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=""]], [[""squid_ldap_set_connect_timeout"", ""connect_timeout""]], [[""squid_ldap_set_connect_timeout"", ""connect_timeout""]], [[""fprintf"", ""stderr"", ""\""\\nUnable to connect to LDAP server:%s port:%d\\n\"""", ""ldapServer"", ""port""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""\\nUnable to connect to LDAPURI:%s\\n\"""", ""ldapServer""]]]","[[[""version"", ""LDAP_VERSION2"", ""=""], ""version""]]","[""\""Could not set LDAP_OPT_PROTOCOL_VERSION %d\\n\""""]"
"fprintf ( stderr , ""\nUnable to connect to LDAP server:%s port:%d\n"" , ldapServer , port )",378:20:11772:11856,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [37985, ""True"", ""( ld = ldap_init ( ldapServer , port ) ) == NULL"", ""Condition""]], [""False"", [38077, ""True"", ""sslpath"", ""Condition""]], [""False"", [38110, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""True"", [38121, ""True"", ""ld == NULL"", ""Condition""]]]",[],"[[[""ld"", ""ldap_init"", ""ldapServer"", ""port"", ""="", ""NULL"", ""==""]], [[""sslpath""]], [[""strstr"", ""ldapServer"", ""\""://\"""", ""NULL"", ""!=""]], [[""ld"", ""NULL"", ""==""]]]",[],"[""\""\\nUnable to connect to LDAP server:%s port:%d\\n\""""]"
"fprintf ( stderr , ""\nUnable to connect to SSL LDAP server: %s port:%d\n"" , ldapServer , port )",371:20:11494:11611,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38021, ""True"", ""( ld = ldapssl_init ( ldapServer , port , 1 ) ) == NULL"", ""Condition""]], [""True"", [38077, ""True"", ""sslpath"", ""Condition""]], [""False"", [38110, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""True"", [38121, ""True"", ""ld == NULL"", ""Condition""]]]","[["""", [38039, ""True"", ""++ sslinit"", ""ExpressionStatement""]], ["""", [38044, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [38051, ""True"", ""fprintf ( stderr , \""\\nUnable to initialise SSL with cert path %s\\n\"" , sslpath )"", ""ExpressionStatement""]]]","[[[""ld"", ""ldapssl_init"", ""ldapServer"", ""port"", ""1"", ""="", ""NULL"", ""==""]], [[""sslpath""]], [[""strstr"", ""ldapServer"", ""\""://\"""", ""NULL"", ""!=""]], [[""ld"", ""NULL"", ""==""]], [[""sslinit""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""\\nUnable to initialise SSL with cert path %s\\n\"""", ""sslpath""]]]",[],"[""\""\\nUnable to connect to SSL LDAP server: %s port:%d\\n\""""]"
"fprintf ( stderr , ""\nUnable to initialise SSL with cert path %s\n"" , sslpath )",364:20:11195:11297,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38062, ""True"", ""! sslinit && ( ldapssl_client_init ( sslpath , NULL ) != LDAP_SUCCESS )"", ""Condition""]], [""True"", [38077, ""True"", ""sslpath"", ""Condition""]], [""False"", [38110, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""True"", [38121, ""True"", ""ld == NULL"", ""Condition""]]]",[],"[[[""!"", ""sslinit""]], [[""ldapssl_client_init"", ""sslpath"", ""NULL"", ""LDAP_SUCCESS"", ""!=""]], [[""sslpath""]], [[""strstr"", ""ldapServer"", ""\""://\"""", ""NULL"", ""!=""]], [[""ld"", ""NULL"", ""==""]]]",[],"[""\""\\nUnable to initialise SSL with cert path %s\\n\""""]"
"fprintf ( stderr , ""\nUnable to connect to LDAPURI:%s\n"" , ldapServer )",357:16:10939:11005,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38093, ""True"", ""rc != LDAP_SUCCESS"", ""Condition""]], [""True"", [38110, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""True"", [38121, ""True"", ""ld == NULL"", ""Condition""]]]","[["""", [38097, ""True"", ""rc = ldap_initialize ( & ld , ldapServer )"", ""ExpressionStatement""]]]","[[[""int"", ""LDAP_SUCCESS"", ""!=""]], [[""strstr"", ""ldapServer"", ""\""://\"""", ""NULL"", ""!=""]], [[""ld"", ""NULL"", ""==""]], [[""int"", ""ldap_initialize"", ""&"", ""ld"", ""ldapServer"", ""=""]]]",[],"[""\""\\nUnable to connect to LDAPURI:%s\\n\""""]"
"fprintf ( stderr , ""\tIf you need to bind as a user to perform searches then use the\n\t-D binddn -w bindpasswd or -D binddn -W secretfile options\n\n"" )",639:8:21103:21252,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\tIf you need to bind as a user to perform searches then use the\\n\\t-D binddn -w bindpasswd or -D binddn -W secretfile options\\n\\n\""""]"
"fprintf ( stderr , ""\n"" )",638:8:21072:21093,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\n\""""]"
"fprintf ( stderr , ""\t-n\t\t\t\t\tGet an eDirectory Universal Password from Novell NMAS\n\t\t\t\t\t\t(requires bind credentials, version 3, TLS, and a search filter)\n"" )",637:8:20896:21062,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-n\\t\\t\\t\\t\\tGet an eDirectory Universal Password from Novell NMAS\\n\\t\\t\\t\\t\\t\\t(requires bind credentials, version 3, TLS, and a search filter)\\n\""""]"
"fprintf ( stderr , ""\t-S\t\t\t\t\tStrip NT domain from usernames\n"" )",636:8:20821:20886,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-S\\t\\t\\t\\t\\tStrip NT domain from usernames\\n\""""]"
"fprintf ( stderr , ""\t-Z\t\t\t\t\tTLS encrypt the LDAP connection, requires\n\t\t\t\tLDAP version 3\n"" )",634:8:20704:20804,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-Z\\t\\t\\t\\t\\tTLS encrypt the LDAP connection, requires\\n\\t\\t\\t\\tLDAP version 3\\n\""""]"
"fprintf ( stderr , ""\t-v 2|3\t\t\t\t\tLDAP version\n"" )",633:8:20643:20694,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-v 2|3\\t\\t\\t\\t\\tLDAP version\\n\""""]"
"fprintf ( stderr , ""\t-a never|always|search|find\t\twhen to dereference aliases\n"" )",631:8:20531:20612,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-a never|always|search|find\\t\\twhen to dereference aliases\\n\""""]"
"fprintf ( stderr , ""\t-R\t\t\t\t\tdo not follow referrals\n"" )",630:8:20463:20521,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-R\\t\\t\\t\\t\\tdo not follow referrals\\n\""""]"
"fprintf ( stderr , ""\t-t timelimit\t\t\t\tsearch time limit\n"" )",629:8:20393:20453,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-t timelimit\\t\\t\\t\\tsearch time limit\\n\""""]"
"fprintf ( stderr , ""\t-c timeout\t\t\t\tconnect timeout\n"" )",628:8:20327:20383,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-c timeout\\t\\t\\t\\tconnect timeout\\n\""""]"
"fprintf ( stderr , ""\t-E sslcertpath\t\t\t\tenable LDAP over SSL\n"" )",626:8:20245:20310,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-E sslcertpath\\t\\t\\t\\tenable LDAP over SSL\\n\""""]"
"fprintf ( stderr , ""\t-P\t\t\t\t\tpersistent LDAP connection\n"" )",624:8:20148:20209,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-P\\t\\t\\t\\t\\tpersistent LDAP connection\\n\""""]"
"fprintf ( stderr , ""\t-p port\t\t\t\t\tLDAP server port (defaults to %d)\n"" , LDAP_PORT )",623:8:20054:20138,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-p port\\t\\t\\t\\t\\tLDAP server port (defaults to %d)\\n\""""]"
"fprintf ( stderr , ""\t-h server\t\t\t\tLDAP server (defaults to localhost)\n"" )",622:8:19969:20044,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-h server\\t\\t\\t\\tLDAP server (defaults to localhost)\\n\""""]"
"fprintf ( stderr , ""\t-H URI\t\t\t\t\tLDAPURI (defaults to ldap://localhost)\n"" )",620:8:19875:19952,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-H URI\\t\\t\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\""""]"
"fprintf ( stderr , ""\t-W secretfile\t\t\t\tread password for binddn from file secretfile\n"" )",618:8:19756:19845,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-W secretfile\\t\\t\\t\\tread password for binddn from file secretfile\\n\""""]"
"fprintf ( stderr , ""\t-w bindpasswd\t\t\t\tpassword for binddn\n"" )",617:8:19683:19746,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-w bindpasswd\\t\\t\\t\\tpassword for binddn\\n\""""]"
"fprintf ( stderr , ""\t-D binddn\t\t\t\tDN to bind as to perform searches\n"" )",616:8:19600:19673,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-D binddn\\t\\t\\t\\tDN to bind as to perform searches\\n\""""]"
"fprintf ( stderr , ""\t-s base|one|sub\t\t\t\tsearch scope\n"" )",615:8:19532:19590,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-s base|one|sub\\t\\t\\t\\tsearch scope\\n\""""]"
"fprintf ( stderr , ""\t-u attribute\t\t\t\tattribute to use in combination with the basedn to create the user DN\n"" )",614:8:19410:19522,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-u attribute\\t\\t\\t\\tattribute to use in combination with the basedn to create the user DN\\n\""""]"
"fprintf ( stderr , ""\t-F filter\t\t\t\tuser search filter pattern. %%s = login\n"" )",613:8:19321:19400,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-F filter\\t\\t\\t\\tuser search filter pattern. %%s = login\\n\""""]"
"fprintf ( stderr , ""\t-e Encrypted passwords(REQUIRED)\tPassword are stored encrypted using HHA1\n"" )",612:8:19214:19311,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-e Encrypted passwords(REQUIRED)\\tPassword are stored encrypted using HHA1\\n\""""]"
"fprintf ( stderr , ""\t-b basedn (REQUIRED)\t\t\tbase dn under where to search for users\n"" )",611:8:19116:19204,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-b basedn (REQUIRED)\\t\\t\\tbase dn under where to search for users\\n\""""]"
"fprintf ( stderr , ""\t-l password realm delimiter(REQUIRED)\tCharater(s) that devides the password attribute\n\t\t\t\t\t\tin realm and password tokens, default ':' realm:password\n"" )",610:8:18927:19106,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-l password realm delimiter(REQUIRED)\\tCharater(s) that devides the password attribute\\n\\t\\t\\t\\t\\t\\tin realm and password tokens, default ':' realm:password\\n\""""]"
"fprintf ( stderr , ""\t-A password attribute(REQUIRED)\t\tUser attribute that contains the password\n"" )",609:8:18818:18917,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38472, ""True"", ""! userbasedn || ! ( ( passattr != NULL ) || ( edir_universal_passwd && usersearchfilter && version == LDAP_VERSION3 && use_tls ) )"", ""Condition""]], [""True"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""NULL"", ""!="", ""edir_universal_passwd"", ""usersearchfilter"", ""version"", ""LDAP_VERSION3"", ""=="", ""use_tls"", ""&&"", ""&&"", ""&&"", ""||"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""\\t-A password attribute(REQUIRED)\\t\\tUser attribute that contains the password\\n\""""]"
"fprintf ( stderr , ""TLS (-Z) is incompatible with version %d\n"" , version )",566:16:17475:17569,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""True"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]]]",[],"[[[""version"", ""LDAP_VERSION2"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]]]","[[[""version"", ""LDAP_VERSION3"", ""=""], ""version""], [[""version"", ""LDAP_VERSION2"", ""=""], ""version""], [[""version"", ""LDAP_VERSION3"", ""=""], ""version""]]","[""\""TLS (-Z) is incompatible with version %d\\n\""""]"
"fprintf ( stderr , ""Protocol version should be 2 or 3\n"" )",560:16:17282:17336,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""default"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]]]",[],"[[[""atoi"", ""const char *""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]]]",[],"[""\""Protocol version should be 2 or 3\\n\""""]"
"fprintf ( stderr , ""ERROR: Your LDAP library does not have URI support\n"" )",457:12:14103:14174,/data/download/squid/squid-3.5.25/helpers/digest_auth/eDirectory/ldap_backend.cc,"[[""case 'H'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'n'"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'n'"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'n'"", [38899, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'n'"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'n'"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'n'"", [38781, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'n'"", [38666, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'n'"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'n'"", [38699, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'n'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38826, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'a'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38914, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [38929, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 's'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38796, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'Z'"", [39071, ""True"", ""option"", ""Condition""]], [""False"", [38811, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'v'"", [39071, ""True"", ""option"", ""Condition""]], [""case 'P'"", [39163, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]",[],"[[[""char"", ""'H'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'n'"", ""==""]], [[""atoi"", ""const char *"", ""'n'"", ""==""]], [[""char"", ""'n'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]]]",[],"[""\""ERROR: Your LDAP library does not have URI support\\n\""""]"
"fprintf ( stderr , ""digest_file_auth: ignoring invalid password for %s\n"" , user )",115:16:3693:3770,/data/download/squid/squid-3.5.25/helpers/digest_auth/file/text_backend.cc,"[[""True"", [40213, ""True"", ""ha1 && strlen ( ha1 ) != 32"", ""Condition""]], [""True"", [40262, ""True"", ""( strlen ( user ) > 0 ) && passwd"", ""Condition""]], [""False"", [40325, ""True"", ""! user"", ""Condition""]], [""False"", [40342, ""True"", ""( buf [ 0 ] == '#' ) || ( buf [ 0 ] == ' ' ) || ( buf [ 0 ] == '\\t' ) || ( buf [ 0 ] == '\\n' )"", ""Condition""]]]","[["""", [40228, ""True"", ""passwd = NULL"", ""ExpressionStatement""]], ["""", [40239, ""True"", ""passwd = NULL"", ""ExpressionStatement""]], ["""", [40232, ""True"", ""ha1 = passwd"", ""ExpressionStatement""]], ["""", [40243, ""True"", ""ha1 = passwd + 6"", ""ExpressionStatement""]]]","[[[""char *""]], [[""strlen"", ""char *"", ""32"", ""!=""]], [[""strlen"", ""char *"", ""0"", "">""]], [[""char *""]], [[""!"", ""char *""]], [[""char [ 8192 ]"", ""0"", ""'#'"", ""=="", ""char [ 8192 ]"", ""0"", ""' '"", ""=="", ""char [ 8192 ]"", ""0"", ""'\\t'"", ""=="", ""char [ 8192 ]"", ""0"", ""'\\n'"", ""=="", ""||"", ""||"", ""||""]], [[""char *"", ""NULL"", ""=""]], [[""char *"", ""NULL"", ""=""]], [[""char *"", ""char *"", ""=""]], [[""char *"", ""char *"", ""6"", ""+"", ""=""]]]","[[[""char *"", ""strtok"", ""char [ 8192 ]"", ""\"":\\n\"""", ""=""], ""char *""]]","[""\""digest_file_auth: ignoring invalid password for %s\\n\""""]"
"fprintf ( stderr , ""digest_file_auth: missing user name at line %u in '%s'\n"" , lineCount , passwordFile )",94:12:2880:2980,/data/download/squid/squid-3.5.25/helpers/digest_auth/file/text_backend.cc,"[[""True"", [40325, ""True"", ""! user"", ""Condition""]], [""False"", [40342, ""True"", ""( buf [ 0 ] == '#' ) || ( buf [ 0 ] == ' ' ) || ( buf [ 0 ] == '\\t' ) || ( buf [ 0 ] == '\\n' )"", ""Condition""]], [""True"", [40370, ""True"", ""fgets ( buf , sizeof ( buf ) , f ) != NULL"", ""Condition""]]]","[["""", [40329, ""True"", ""user = strtok ( buf , \"":\\n\"" )"", ""ExpressionStatement""]], ["""", [40366, ""True"", ""++ lineCount"", ""ExpressionStatement""]]]","[[[""!"", ""char *""]], [[""char [ 8192 ]"", ""0"", ""'#'"", ""=="", ""char [ 8192 ]"", ""0"", ""' '"", ""=="", ""char [ 8192 ]"", ""0"", ""'\\t'"", ""=="", ""char [ 8192 ]"", ""0"", ""'\\n'"", ""=="", ""||"", ""||"", ""||""]], [[""fgets"", ""char [ 8192 ]"", ""FILE *"", ""NULL"", ""!=""]], [[""char *"", ""strtok"", ""char [ 8192 ]"", ""\"":\\n\"""", ""=""]], [[""lineCount""]]]","[[[""const char *""], ""const char *""], [[""unsigned int"", ""unsigned int"", ""0"", ""=""], ""unsigned int""]]","[""\""digest_file_auth: missing user name at line %u in '%s'\\n\""""]"
"fprintf ( stderr , ""digest_file_auth: cannot open password file: %s\n"" , xstrerror ( ) )",83:8:2478:2559,/data/download/squid/squid-3.5.25/helpers/digest_auth/file/text_backend.cc,"[[""True"", [40415, ""True"", ""! f"", ""Condition""]]]","[["""", [40419, ""True"", ""FILE * f = fopen ( passwordFile , \""r\"" ) ;"", ""IdentifierDeclStatement""]], ["""", [40435, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [40442, ""True"", ""fprintf ( stderr , \""digest_file_auth: cannot create hash table\\n\"" )"", ""ExpressionStatement""]], ["""", [40455, ""True"", ""hash = hash_create ( ( HASHCMP * ) strcmp , 7921 , hash_string )"", ""ExpressionStatement""]]]","[[[""!"", ""FILE *""]], [[""FILE *"", ""FILE *"", ""fopen"", ""const char *"", ""\""r\"""", ""=""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""digest_file_auth: cannot create hash table\\n\""""]], [[""hash"", ""hash_create"", ""strcmp"", ""7921"", ""hash_string"", ""=""]]]",[],"[""\""digest_file_auth: cannot open password file: %s\\n\""""]"
"fprintf ( stderr , ""digest_file_auth: cannot create hash table\n"" )",78:8:2328:2391,/data/download/squid/squid-3.5.25/helpers/digest_auth/file/text_backend.cc,"[[""True"", [40451, ""True"", ""NULL == hash"", ""Condition""]]]","[["""", [40455, ""True"", ""hash = hash_create ( ( HASHCMP * ) strcmp , 7921 , hash_string )"", ""ExpressionStatement""]], ["""", [40472, ""True"", ""hashFreeItems ( hash , my_free )"", ""ExpressionStatement""]], ["""", [40485, ""True"", ""char * realm ;"", ""IdentifierDeclStatement""]]]","[[[""NULL"", ""hash"", ""==""]], [[""hash"", ""hash_create"", ""strcmp"", ""7921"", ""hash_string"", ""=""]], [[""hashFreeItems"", ""hash"", ""my_free""]], [[""char *""]]]",[],"[""\""digest_file_auth: cannot create hash table\\n\""""]"
"fprintf ( stderr , ""cannot stat %s\n"" , passwdfile )",153:8:4903:4950,/data/download/squid/squid-3.5.25/helpers/digest_auth/file/text_backend.cc,"[[""True"", [40580, ""True"", ""stat ( passwdfile , & sb ) != 0"", ""Condition""]]]","[["""", [40595, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [40602, ""True"", ""fprintf ( stderr , \""  -c   accept digest hashed passwords rather than plaintext in passwordfile\\n\"" )"", ""ExpressionStatement""]], ["""", [40626, ""True"", ""passwdfile = argv [ 2 ]"", ""ExpressionStatement""]], ["""", [40611, ""True"", ""fprintf ( stderr , \""Usage: digest_file_auth [OPTIONS] <passwordfile>\\n\"" )"", ""ExpressionStatement""]], ["""", [40632, ""True"", ""ha1mode = 1"", ""ExpressionStatement""]], ["""", [40654, ""True"", ""passwdfile = argv [ 1 ]"", ""ExpressionStatement""]]]","[[[""stat"", ""passwdfile"", ""&"", ""sb"", ""0"", ""!=""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""  -c   accept digest hashed passwords rather than plaintext in passwordfile\\n\""""]], [[""passwdfile"", ""char * *"", ""2"", ""=""]], [[""fprintf"", ""stderr"", ""\""Usage: digest_file_auth [OPTIONS] <passwordfile>\\n\""""]], [[""ha1mode"", ""1"", ""=""]], [[""passwdfile"", ""char * *"", ""1"", ""=""]]]","[[[""passwdfile"", ""char * *"", ""1"", ""=""], ""passwdfile""], [[""passwdfile"", ""char * *"", ""2"", ""=""], ""passwdfile""]]","[""\""cannot stat %s\\n\""""]"
"fprintf ( stderr , ""  -c   accept digest hashed passwords rather than plaintext in passwordfile\n"" )",149:8:4736:4832,/data/download/squid/squid-3.5.25/helpers/digest_auth/file/text_backend.cc,"[[""True"", [40620, ""True"", ""! passwdfile"", ""Condition""]]]","[["""", [40611, ""True"", ""fprintf ( stderr , \""Usage: digest_file_auth [OPTIONS] <passwordfile>\\n\"" )"", ""ExpressionStatement""]], ["""", [40626, ""True"", ""passwdfile = argv [ 2 ]"", ""ExpressionStatement""]], ["""", [40632, ""True"", ""ha1mode = 1"", ""ExpressionStatement""]], ["""", [40654, ""True"", ""passwdfile = argv [ 1 ]"", ""ExpressionStatement""]]]","[[[""!"", ""passwdfile""]], [[""fprintf"", ""stderr"", ""\""Usage: digest_file_auth [OPTIONS] <passwordfile>\\n\""""]], [[""passwdfile"", ""char * *"", ""2"", ""=""]], [[""ha1mode"", ""1"", ""=""]], [[""passwdfile"", ""char * *"", ""1"", ""=""]]]",[],"[""\""  -c   accept digest hashed passwords rather than plaintext in passwordfile\\n\""""]"
"fprintf ( stderr , ""Usage: digest_file_auth [OPTIONS] <passwordfile>\n"" )",148:8:4657:4726,/data/download/squid/squid-3.5.25/helpers/digest_auth/file/text_backend.cc,"[[""True"", [40620, ""True"", ""! passwdfile"", ""Condition""]]]","[["""", [40626, ""True"", ""passwdfile = argv [ 2 ]"", ""ExpressionStatement""]], ["""", [40632, ""True"", ""ha1mode = 1"", ""ExpressionStatement""]], ["""", [40654, ""True"", ""passwdfile = argv [ 1 ]"", ""ExpressionStatement""]], ["""", [40664, ""True"", ""struct stat sb ;"", ""IdentifierDeclStatement""]]]","[[[""!"", ""passwdfile""]], [[""passwdfile"", ""char * *"", ""2"", ""=""]], [[""ha1mode"", ""1"", ""=""]], [[""passwdfile"", ""char * *"", ""1"", ""=""]], [[""struct stat""]]]",[],"[""\""Usage: digest_file_auth [OPTIONS] <passwordfile>\\n\""""]"
"fprintf ( stderr , ""%s: FATAL: Unknown option: -%c. Exiting\n"" , program_name , opt )",761:12:24727:24806,/data/download/squid/squid-3.5.25/helpers/external_acl/AD_group/ext_ad_group_acl.cc,"[[""case 'h'"", [45030, ""True"", ""opt"", ""Condition""]], [""True"", [45032, ""True"", ""- 1 != ( opt = getopt ( argc , argv , \""D:Gcdh\"" ) )"", ""Condition""]]]","[["""", [44966, ""True"", ""default :"", ""Label""]], ["""", [44968, ""True"", ""opt = optopt"", ""ExpressionStatement""]], ["""", [44972, ""True"", ""case '?' :"", ""Label""]], ["""", [44973, ""True"", ""exit ( 0 )"", ""ExpressionStatement""]], ["""", [44936, ""True"", ""break ;"", ""BreakStatement""]], ["""", [44990, ""True"", ""break ;"", ""BreakStatement""]], ["""", [44996, ""True"", ""break ;"", ""BreakStatement""]], ["""", [45002, ""True"", ""break ;"", ""BreakStatement""]], ["""", [45008, ""True"", ""break ;"", ""BreakStatement""]], ["""", [45049, ""True"", ""opterr = 0"", ""ExpressionStatement""]]]","[[[""int"", ""'h'"", ""==""]], [[""-"", ""1"", ""opt"", ""getopt"", ""int"", ""char * [ ]"", ""\""D:Gcdh\"""", ""="", ""!=""]], [[""default""]], [[""int"", ""optopt"", ""=""]], [[]], [[""exit"", ""0""]], [[]], [[]], [[]], [[]], [[]], [[""opterr"", ""0"", ""=""]]]","[[[""int"", ""optopt"", ""=""], ""int""], [[""-"", ""1"", ""int"", ""getopt"", ""int"", ""char * [ ]"", ""\""D:Gcdh\"""", ""="", ""!=""], ""int""]]","[""\""%s: FATAL: Unknown option: -%c. Exiting\\n\""""]"
"fprintf ( stderr , ""%s: ERROR: Too large..: %s\n"" , argv [ 0 ] , buf )",818:16:26412:26473,/data/download/squid/squid-3.5.25/helpers/external_acl/AD_group/ext_ad_group_acl.cc,"[[""True"", [45336, ""True"", ""fgets ( buf , HELPER_INPUT_BUFFER , stdin )"", ""Condition""]], [""True"", [45310, ""True"", ""strchr ( buf , '\\n' ) != NULL"", ""Condition""]], [""True"", [45362, ""True"", ""NULL == strchr ( buf , '\\n' )"", ""Condition""]], [""True"", [45336, ""True"", ""fgets ( buf , HELPER_INPUT_BUFFER , stdin )"", ""Condition""]], [""True"", [45373, ""True"", ""fgets ( buf , HELPER_INPUT_BUFFER , stdin )"", ""Condition""]], [""True"", [45310, ""True"", ""strchr ( buf , '\\n' ) != NULL"", ""Condition""]], [""True"", [45362, ""True"", ""NULL == strchr ( buf , '\\n' )"", ""Condition""]]]",[],"[[[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER"", ""stdin""]], [[""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""NULL"", ""!=""]], [[""NULL"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""==""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER"", ""stdin""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER"", ""stdin""]], [[""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""NULL"", ""!=""]], [[""NULL"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""==""]]]","[[[""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER""], ""char [ HELPER_INPUT_BUFFER ]""], [[""char * [ ]""], ""char * [ ]""]]","[""\""%s: ERROR: Too large..: %s\\n\"""", ""0""]"
"fprintf ( stderr , ""%s: ERROR: Too large: %s\n"" , argv [ 0 ] , buf )",816:12:26274:26333,/data/download/squid/squid-3.5.25/helpers/external_acl/AD_group/ext_ad_group_acl.cc,"[[""True"", [45362, ""True"", ""NULL == strchr ( buf , '\\n' )"", ""Condition""]], [""True"", [45373, ""True"", ""fgets ( buf , HELPER_INPUT_BUFFER , stdin )"", ""Condition""]]]","[["""", [45090, ""True"", ""err = 0"", ""ExpressionStatement""]], ["""", [45141, ""True"", ""continue ;"", ""ContinueStatement""]], ["""", [45216, ""True"", ""continue ;"", ""ContinueStatement""]], ["""", [45293, ""True"", ""continue ;"", ""ContinueStatement""]], ["""", [45384, ""True"", ""atexit ( CloseCOM )"", ""ExpressionStatement""]], ["""", [45097, ""True"", ""SEND_ERR ( \""\"" )"", ""ExpressionStatement""]], ["""", [45105, ""True"", ""SEND_OK ( \""\"" )"", ""ExpressionStatement""]], ["""", [45142, ""True"", ""SEND_BH ( HLP_MSG ( \""Invalid Request. No Username.\"" ) )"", ""ExpressionStatement""]], ["""", [45217, ""True"", ""SEND_BH ( HLP_MSG ( \""Invalid Request. No Input.\"" ) )"", ""ExpressionStatement""]], ["""", [45294, ""True"", ""SEND_BH ( HLP_MSG ( \""Invalid Request. Too Long.\"" ) )"", ""ExpressionStatement""]], ["""", [45392, ""True"", ""debug ( \""Warning: running in case insensitive mode !!!\\n\"" )"", ""ExpressionStatement""]]]","[[[""NULL"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""==""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER"", ""stdin""]], [[""err"", ""0"", ""=""]], [[]], [[]], [[]], [[""atexit"", ""CloseCOM""]], [[""SEND_ERR"", ""\""\""""]], [[""SEND_OK"", ""\""\""""]], [[""SEND_BH"", ""HLP_MSG"", ""\""Invalid Request. No Username.\""""]], [[""SEND_BH"", ""HLP_MSG"", ""\""Invalid Request. No Input.\""""]], [[""SEND_BH"", ""HLP_MSG"", ""\""Invalid Request. Too Long.\""""]], [[""debug"", ""\""Warning: running in case insensitive mode !!!\\n\""""]]]","[[[""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER""], ""char [ HELPER_INPUT_BUFFER ]""], [[""char * [ ]""], ""char * [ ]""]]","[""\""%s: ERROR: Too large: %s\\n\"""", ""0""]"
"fprintf ( stderr , ""%s: FATAL: Can't read machine domain\n"" , program_name )",797:12:25544:25615,/data/download/squid/squid-3.5.25/helpers/external_acl/AD_group/ext_ad_group_acl.cc,"[[""True"", [45470, ""True"", ""( machinedomain = GetDomainName ( ) ) == NULL"", ""Condition""]], [""True"", [45479, ""True"", ""use_global"", ""Condition""]]]","[["""", [45481, ""True"", ""process_options ( argc , argv )"", ""ExpressionStatement""]], ["""", [45490, ""True"", ""setbuf ( stderr , NULL )"", ""ExpressionStatement""]]]","[[[""machinedomain"", ""GetDomainName"", ""="", ""NULL"", ""==""]], [[""use_global""]], [[""process_options"", ""int"", ""char * [ ]""]], [[""setbuf"", ""stderr"", ""NULL""]]]","[[[""program_name"", ""char * [ ]"", ""0"", ""=""], ""program_name""], [[""program_name"", ""strrchr"", ""char * [ ]"", ""0"", ""'/'"", ""=""], ""program_name""], [[""program_name"", ""\""(unknown)\"""", ""=""], ""program_name""]]","[""\""%s: FATAL: Can't read machine domain\\n\""""]"
"fprintf ( stderr , ""WARNING: Connect timeouts not supported in your LDAP library\n"" )",197:4:5136:5217,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,[],"[["""", [45966, ""True"", ""int timelimit"", ""Parameter""]], ["""", [45969, ""True"", ""LDAP * ld"", ""Parameter""]], ["""", [45983, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""int""]], [[""LDAP *""]], [[""ENTRY""]]]",[],"[""\""WARNING: Connect timeouts not supported in your LDAP library\\n\""""]"
"fprintf ( stderr , ""ERROR: %s\n"" , broken )",560:24:18131:18169,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [46321, ""True"", ""ldap_start_tls_s ( ld , NULL , NULL ) != LDAP_SUCCESS"", ""Condition""]], [""False"", [46351, ""True"", ""version != LDAP_VERSION3"", ""Condition""]], [""True"", [46355, ""True"", ""use_tls"", ""Condition""]], [""False"", [46393, ""True"", ""ldap_set_option ( ld , LDAP_OPT_PROTOCOL_VERSION , & version ) != LDAP_SUCCESS"", ""Condition""]]]","[["""", [46312, ""True"", ""broken = HLP_MSG ( \""Could not Activate TLS connection\"" )"", ""ExpressionStatement""]]]","[[[""ldap_start_tls_s"", ""LDAP *"", ""NULL"", ""NULL"", ""LDAP_SUCCESS"", ""!=""]], [[""version"", ""LDAP_VERSION3"", ""!=""]], [[""use_tls""]], [[""ldap_set_option"", ""LDAP *"", ""LDAP_OPT_PROTOCOL_VERSION"", ""&"", ""version"", ""LDAP_SUCCESS"", ""!=""]], [[""const char *"", ""HLP_MSG"", ""\""Could not Activate TLS connection\"""", ""=""]]]","[[[""const char *"", ""HLP_MSG"", ""\""Could not Activate TLS connection\"""", ""=""], ""const char *""]]","[""\""ERROR: %s\\n\""""]"
"fprintf ( stderr , ""FATAL: TLS requires LDAP version 3\n"" )",556:24:17855:17910,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [46351, ""True"", ""version != LDAP_VERSION3"", ""Condition""]], [""True"", [46355, ""True"", ""use_tls"", ""Condition""]], [""False"", [46393, ""True"", ""ldap_set_option ( ld , LDAP_OPT_PROTOCOL_VERSION , & version ) != LDAP_SUCCESS"", ""Condition""]], [""False"", [46585, ""True"", ""rc != LDAP_SUCCESS"", ""Condition""]], [""False"", [46463, ""True"", ""( ld = ldap_init ( ldapServer , port ) ) == NULL"", ""Condition""]], [""False"", [46555, ""True"", ""sslpath"", ""Condition""]]]",[],"[[[""version"", ""LDAP_VERSION3"", ""!=""]], [[""use_tls""]], [[""ldap_set_option"", ""LDAP *"", ""LDAP_OPT_PROTOCOL_VERSION"", ""&"", ""version"", ""LDAP_SUCCESS"", ""!=""]], [[""int"", ""LDAP_SUCCESS"", ""!=""]], [[""ld"", ""ldap_init"", ""char *"", ""int"", ""="", ""NULL"", ""==""]], [[""sslpath""]]]",[],"[""\""FATAL: TLS requires LDAP version 3\\n\""""]"
"fprintf ( stderr , ""ERROR: %s %d\n"" , broken , version )",548:20:17561:17611,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [46393, ""True"", ""ldap_set_option ( ld , LDAP_OPT_PROTOCOL_VERSION , & version ) != LDAP_SUCCESS"", ""Condition""]], [""False"", [46585, ""True"", ""rc != LDAP_SUCCESS"", ""Condition""]], [""False"", [46463, ""True"", ""( ld = ldap_init ( ldapServer , port ) ) == NULL"", ""Condition""]], [""False"", [46555, ""True"", ""sslpath"", ""Condition""]], [""True"", [46602, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""False"", [46555, ""True"", ""sslpath"", ""Condition""]], [""False"", [46602, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""True"", [46613, ""True"", ""ld == NULL"", ""Condition""]], [""False"", [46602, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""True"", [46613, ""True"", ""ld == NULL"", ""Condition""]]]",[],"[[[""ldap_set_option"", ""LDAP *"", ""LDAP_OPT_PROTOCOL_VERSION"", ""&"", ""version"", ""LDAP_SUCCESS"", ""!=""]], [[""int"", ""LDAP_SUCCESS"", ""!=""]], [[""ld"", ""ldap_init"", ""char *"", ""int"", ""="", ""NULL"", ""==""]], [[""sslpath""]], [[""strstr"", ""char *"", ""\""://\"""", ""NULL"", ""!=""]], [[""sslpath""]], [[""strstr"", ""char *"", ""\""://\"""", ""NULL"", ""!=""]], [[""LDAP *"", ""NULL"", ""==""]], [[""strstr"", ""char *"", ""\""://\"""", ""NULL"", ""!=""]], [[""LDAP *"", ""NULL"", ""==""]]]","[[[""const char *"", ""HLP_MSG"", ""\""Could not set LDAP_OPT_PROTOCOL_VERSION\"""", ""=""], ""const char *""], [[""version"", ""LDAP_VERSION3"", ""=""], ""version""], [[""version"", ""LDAP_VERSION3"", ""=""], ""version""], [[""version"", ""LDAP_VERSION3"", ""=""], ""version""], [[""version"", ""LDAP_VERSION2"", ""=""], ""version""]]","[""\""ERROR: %s %d\\n\""""]"
"fprintf ( stderr , ""ERROR: %s:%s port:%d\n"" , broken , ldapServer , port )",536:28:17002:17069,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [46463, ""True"", ""( ld = ldap_init ( ldapServer , port ) ) == NULL"", ""Condition""]], [""False"", [46555, ""True"", ""sslpath"", ""Condition""]], [""False"", [46602, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""True"", [46613, ""True"", ""ld == NULL"", ""Condition""]]]","[["""", [46454, ""True"", ""broken = HLP_MSG ( \""Unable to connect to LDAP server\"" )"", ""ExpressionStatement""]]]","[[[""ld"", ""ldap_init"", ""char *"", ""int"", ""="", ""NULL"", ""==""]], [[""sslpath""]], [[""strstr"", ""char *"", ""\""://\"""", ""NULL"", ""!=""]], [[""LDAP *"", ""NULL"", ""==""]], [[""const char *"", ""HLP_MSG"", ""\""Unable to connect to LDAP server\"""", ""=""]]]","[[[""const char *"", ""HLP_MSG"", ""\""Unable to connect to LDAP server\"""", ""=""], ""const char *""], [[""int"", ""LDAPS_PORT"", ""=""], ""int""], [[""int"", ""LDAP_PORT"", ""LDAP_PORT"", ""=""], ""int""], [[""int"", ""atoi"", ""const char *"", ""=""], ""int""], [[""char *"", ""\""localhost\"""", ""=""], ""char *""], [[""char *"", ""newhost"", ""=""], ""char *""], [[""char *"", ""NULL"", ""NULL"", ""=""], ""char *""], [[""char *"", ""xstrdup"", ""const char *"", ""=""], ""char *""], [[""char *"", ""newhost"", ""=""], ""char *""], [[""char *"", ""xstrdup"", ""const char *"", ""=""], ""char *""]]","[""\""ERROR: %s:%s port:%d\\n\""""]"
"fprintf ( stderr , ""FATAL: Unable to connect to SSL LDAP server: %s port:%d\n"" , ldapServer , port )",528:28:16589:16719,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [46499, ""True"", ""( ld = ldapssl_init ( ldapServer , port , 1 ) ) == NULL"", ""Condition""]], [""True"", [46555, ""True"", ""sslpath"", ""Condition""]], [""False"", [46602, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""True"", [46613, ""True"", ""ld == NULL"", ""Condition""]]]","[["""", [46517, ""True"", ""++ sslinit"", ""ExpressionStatement""]], ["""", [46522, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [46529, ""True"", ""fprintf ( stderr , \""FATAL: Unable to initialise SSL with cert path %s\\n\"" , sslpath )"", ""ExpressionStatement""]]]","[[[""ld"", ""ldapssl_init"", ""char *"", ""int"", ""1"", ""="", ""NULL"", ""==""]], [[""sslpath""]], [[""strstr"", ""char *"", ""\""://\"""", ""NULL"", ""!=""]], [[""LDAP *"", ""NULL"", ""==""]], [[""sslinit""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""FATAL: Unable to initialise SSL with cert path %s\\n\"""", ""sslpath""]]]","[[[""int"", ""LDAPS_PORT"", ""=""], ""int""], [[""int"", ""LDAP_PORT"", ""LDAP_PORT"", ""=""], ""int""], [[""int"", ""atoi"", ""const char *"", ""=""], ""int""], [[""char *"", ""\""localhost\"""", ""=""], ""char *""], [[""char *"", ""newhost"", ""=""], ""char *""], [[""char *"", ""NULL"", ""NULL"", ""=""], ""char *""], [[""char *"", ""xstrdup"", ""const char *"", ""=""], ""char *""], [[""char *"", ""newhost"", ""=""], ""char *""], [[""char *"", ""xstrdup"", ""const char *"", ""=""], ""char *""]]","[""\""FATAL: Unable to connect to SSL LDAP server: %s port:%d\\n\""""]"
"fprintf ( stderr , ""FATAL: Unable to initialise SSL with cert path %s\n"" , sslpath )",522:28:16265:16344,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [46540, ""True"", ""! sslinit && ( ldapssl_client_init ( sslpath , NULL ) != LDAP_SUCCESS )"", ""Condition""]], [""True"", [46555, ""True"", ""sslpath"", ""Condition""]], [""False"", [46602, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""True"", [46613, ""True"", ""ld == NULL"", ""Condition""]]]",[],"[[[""!"", ""sslinit""]], [[""ldapssl_client_init"", ""sslpath"", ""NULL"", ""LDAP_SUCCESS"", ""!=""]], [[""sslpath""]], [[""strstr"", ""char *"", ""\""://\"""", ""NULL"", ""!=""]], [[""LDAP *"", ""NULL"", ""==""]]]","[[[""sslpath"", ""const char *"", ""=""], ""sslpath""]]","[""\""FATAL: Unable to initialise SSL with cert path %s\\n\""""]"
"fprintf ( stderr , ""%s: ERROR: Unable to connect to LDAPURI:%s\n"" , argv [ 0 ] , ldapServer )",514:24:15920:16004,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [46585, ""True"", ""rc != LDAP_SUCCESS"", ""Condition""]], [""True"", [46602, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""True"", [46613, ""True"", ""ld == NULL"", ""Condition""]], [""True"", [46626, ""True"", ""! found && user && ( group = strtok ( NULL , \"" \\n\"" ) ) != NULL"", ""Condition""]], [""True"", [46142, ""True"", ""tryagain"", ""Condition""]]]",[],"[[[""int"", ""LDAP_SUCCESS"", ""!=""]], [[""strstr"", ""char *"", ""\""://\"""", ""NULL"", ""!=""]], [[""LDAP *"", ""NULL"", ""==""]], [[""!"", ""int""]], [[""char *""]], [[""group"", ""strtok"", ""NULL"", ""\"" \\n\"""", ""="", ""NULL"", ""!=""]], [[""int""]]]","[[[""char *"", ""\""localhost\"""", ""=""], ""char *""], [[""char *"", ""newhost"", ""=""], ""char *""], [[""char *"", ""NULL"", ""NULL"", ""=""], ""char *""], [[""char *"", ""xstrdup"", ""const char *"", ""=""], ""char *""], [[""char *"", ""newhost"", ""=""], ""char *""], [[""char *"", ""xstrdup"", ""const char *"", ""=""], ""char *""], [[""char * *""], ""char * *""]]","[""\""%s: ERROR: Unable to connect to LDAPURI:%s\\n\"""", ""0""]"
"fprintf ( stderr , ""%s: ERROR: Input Too large..: %s\n"" , argv [ 0 ] , buf )",465:16:14156:14223,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [46890, ""True"", ""fgets ( buf , sizeof ( buf ) , stdin )"", ""Condition""]], [""True"", [46918, ""True"", ""! strchr ( buf , '\\n' )"", ""Condition""]], [""True"", [46864, ""True"", ""strchr ( buf , '\\n' ) != NULL"", ""Condition""]], [""True"", [46936, ""True"", ""fgets ( buf , HELPER_INPUT_BUFFER , stdin ) != NULL"", ""Condition""]], [""True"", [46890, ""True"", ""fgets ( buf , sizeof ( buf ) , stdin )"", ""Condition""]], [""True"", [46918, ""True"", ""! strchr ( buf , '\\n' )"", ""Condition""]], [""True"", [46864, ""True"", ""strchr ( buf , '\\n' ) != NULL"", ""Condition""]]]",[],"[[[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""stdin""]], [[""!"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'""]], [[""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""NULL"", ""!=""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER"", ""stdin"", ""NULL"", ""!=""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""stdin""]], [[""!"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'""]], [[""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""NULL"", ""!=""]]]","[[[""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER""], ""char [ HELPER_INPUT_BUFFER ]""], [[""char * *""], ""char * *""]]","[""\""%s: ERROR: Input Too large..: %s\\n\"""", ""0""]"
"fprintf ( stderr , ""%s: ERROR: Input Too large: %s\n"" , argv [ 0 ] , buf )",463:12:14020:14085,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [46918, ""True"", ""! strchr ( buf , '\\n' )"", ""Condition""]], [""True"", [46936, ""True"", ""fgets ( buf , HELPER_INPUT_BUFFER , stdin ) != NULL"", ""Condition""]]]","[["""", [46929, ""True"", ""int found = 0 ;"", ""IdentifierDeclStatement""]], ["""", [46036, ""True"", ""tryagain = 1"", ""ExpressionStatement""]], ["""", [46041, ""True"", ""ld = NULL"", ""ExpressionStatement""]], ["""", [46663, ""True"", ""continue ;"", ""ContinueStatement""]], ["""", [46806, ""True"", ""continue ;"", ""ContinueStatement""]], ["""", [46847, ""True"", ""continue ;"", ""ContinueStatement""]], ["""", [46953, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]]]","[[[""!"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER"", ""stdin"", ""NULL"", ""!=""]], [[""int"", ""int"", ""0"", ""=""]], [[""int"", ""1"", ""=""]], [[""LDAP *"", ""NULL"", ""=""]], [[]], [[]], [[]], [[""exit"", ""1""]]]","[[[""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER""], ""char [ HELPER_INPUT_BUFFER ]""], [[""char * *""], ""char * *""]]","[""\""%s: ERROR: Input Too large: %s\\n\"""", ""0""]"
"fprintf ( stderr , ""\tIf you need to bind as a user to perform searches then use the\n\t-D binddn -w bindpasswd or -D binddn -W secretfile options\n\n"" )",440:8:13120:13269,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47016, ""True"", ""fprintf ( stderr , \""\\n\"" )"", ""ExpressionStatement""]], ["""", [47025, ""True"", ""fprintf ( stderr , \""\\t-d\\t\\t\\tenable debug mode\\n\"" )"", ""ExpressionStatement""]], ["""", [47034, ""True"", ""fprintf ( stderr , \""\\t-K\\t\\t\\tStrip Kerberos realm from usernames\\n\"" )"", ""ExpressionStatement""]], ["""", [47043, ""True"", ""fprintf ( stderr , \""\\t-S\\t\\t\\tStrip NT domain from usernames\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-d\\t\\t\\tenable debug mode\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-K\\t\\t\\tStrip Kerberos realm from usernames\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-S\\t\\t\\tStrip NT domain from usernames\\n\""""]]]",[],"[""\""\\tIf you need to bind as a user to perform searches then use the\\n\\t-D binddn -w bindpasswd or -D binddn -W secretfile options\\n\\n\""""]"
"fprintf ( stderr , ""\n"" )",439:8:13089:13110,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47025, ""True"", ""fprintf ( stderr , \""\\t-d\\t\\t\\tenable debug mode\\n\"" )"", ""ExpressionStatement""]], ["""", [47034, ""True"", ""fprintf ( stderr , \""\\t-K\\t\\t\\tStrip Kerberos realm from usernames\\n\"" )"", ""ExpressionStatement""]], ["""", [47043, ""True"", ""fprintf ( stderr , \""\\t-S\\t\\t\\tStrip NT domain from usernames\\n\"" )"", ""ExpressionStatement""]], ["""", [47052, ""True"", ""fprintf ( stderr , \""\\t-g\\t\\t\\tfirst query parameter is base DN extension\\n\\t\\t\\t\\tfor this query\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-d\\t\\t\\tenable debug mode\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-K\\t\\t\\tStrip Kerberos realm from usernames\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-S\\t\\t\\tStrip NT domain from usernames\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-g\\t\\t\\tfirst query parameter is base DN extension\\n\\t\\t\\t\\tfor this query\\n\""""]]]",[],"[""\""\\n\""""]"
"fprintf ( stderr , ""\t-d\t\t\tenable debug mode\n"" )",438:8:13031:13079,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47034, ""True"", ""fprintf ( stderr , \""\\t-K\\t\\t\\tStrip Kerberos realm from usernames\\n\"" )"", ""ExpressionStatement""]], ["""", [47043, ""True"", ""fprintf ( stderr , \""\\t-S\\t\\t\\tStrip NT domain from usernames\\n\"" )"", ""ExpressionStatement""]], ["""", [47052, ""True"", ""fprintf ( stderr , \""\\t-g\\t\\t\\tfirst query parameter is base DN extension\\n\\t\\t\\t\\tfor this query\\n\"" )"", ""ExpressionStatement""]], ["""", [47061, ""True"", ""fprintf ( stderr , \""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires\\n\\t\\t\\t\\tLDAP version 3\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-K\\t\\t\\tStrip Kerberos realm from usernames\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-S\\t\\t\\tStrip NT domain from usernames\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-g\\t\\t\\tfirst query parameter is base DN extension\\n\\t\\t\\t\\tfor this query\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires\\n\\t\\t\\t\\tLDAP version 3\\n\""""]]]",[],"[""\""\\t-d\\t\\t\\tenable debug mode\\n\""""]"
"fprintf ( stderr , ""\t-K\t\t\tStrip Kerberos realm from usernames\n"" )",437:8:12955:13021,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47043, ""True"", ""fprintf ( stderr , \""\\t-S\\t\\t\\tStrip NT domain from usernames\\n\"" )"", ""ExpressionStatement""]], ["""", [47052, ""True"", ""fprintf ( stderr , \""\\t-g\\t\\t\\tfirst query parameter is base DN extension\\n\\t\\t\\t\\tfor this query\\n\"" )"", ""ExpressionStatement""]], ["""", [47061, ""True"", ""fprintf ( stderr , \""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires\\n\\t\\t\\t\\tLDAP version 3\\n\"" )"", ""ExpressionStatement""]], ["""", [47070, ""True"", ""fprintf ( stderr , \""\\t-v 2|3\\t\\t\\tLDAP version\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-S\\t\\t\\tStrip NT domain from usernames\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-g\\t\\t\\tfirst query parameter is base DN extension\\n\\t\\t\\t\\tfor this query\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires\\n\\t\\t\\t\\tLDAP version 3\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-v 2|3\\t\\t\\tLDAP version\\n\""""]]]",[],"[""\""\\t-K\\t\\t\\tStrip Kerberos realm from usernames\\n\""""]"
"fprintf ( stderr , ""\t-S\t\t\tStrip NT domain from usernames\n"" )",436:8:12884:12945,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47052, ""True"", ""fprintf ( stderr , \""\\t-g\\t\\t\\tfirst query parameter is base DN extension\\n\\t\\t\\t\\tfor this query\\n\"" )"", ""ExpressionStatement""]], ["""", [47061, ""True"", ""fprintf ( stderr , \""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires\\n\\t\\t\\t\\tLDAP version 3\\n\"" )"", ""ExpressionStatement""]], ["""", [47070, ""True"", ""fprintf ( stderr , \""\\t-v 2|3\\t\\t\\tLDAP version\\n\"" )"", ""ExpressionStatement""]], ["""", [47079, ""True"", ""fprintf ( stderr , \""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-g\\t\\t\\tfirst query parameter is base DN extension\\n\\t\\t\\t\\tfor this query\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires\\n\\t\\t\\t\\tLDAP version 3\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-v 2|3\\t\\t\\tLDAP version\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\""""]]]",[],"[""\""\\t-S\\t\\t\\tStrip NT domain from usernames\\n\""""]"
"fprintf ( stderr , ""\t-g\t\t\tfirst query parameter is base DN extension\n\t\t\t\tfor this query\n"" )",435:8:12777:12874,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47061, ""True"", ""fprintf ( stderr , \""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires\\n\\t\\t\\t\\tLDAP version 3\\n\"" )"", ""ExpressionStatement""]], ["""", [47070, ""True"", ""fprintf ( stderr , \""\\t-v 2|3\\t\\t\\tLDAP version\\n\"" )"", ""ExpressionStatement""]], ["""", [47079, ""True"", ""fprintf ( stderr , \""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\"" )"", ""ExpressionStatement""]], ["""", [47088, ""True"", ""fprintf ( stderr , \""\\t-R\\t\\t\\tdo not follow referrals\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires\\n\\t\\t\\t\\tLDAP version 3\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-v 2|3\\t\\t\\tLDAP version\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-R\\t\\t\\tdo not follow referrals\\n\""""]]]",[],"[""\""\\t-g\\t\\t\\tfirst query parameter is base DN extension\\n\\t\\t\\t\\tfor this query\\n\""""]"
"fprintf ( stderr , ""\t-Z\t\t\tTLS encrypt the LDAP connection, requires\n\t\t\t\tLDAP version 3\n"" )",433:8:12664:12760,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47070, ""True"", ""fprintf ( stderr , \""\\t-v 2|3\\t\\t\\tLDAP version\\n\"" )"", ""ExpressionStatement""]], ["""", [47079, ""True"", ""fprintf ( stderr , \""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\"" )"", ""ExpressionStatement""]], ["""", [47088, ""True"", ""fprintf ( stderr , \""\\t-R\\t\\t\\tdo not follow referrals\\n\"" )"", ""ExpressionStatement""]], ["""", [47097, ""True"", ""fprintf ( stderr , \""\\t-t timelimit\\t\\tsearch time limit\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-v 2|3\\t\\t\\tLDAP version\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-R\\t\\t\\tdo not follow referrals\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-t timelimit\\t\\tsearch time limit\\n\""""]]]",[],"[""\""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires\\n\\t\\t\\t\\tLDAP version 3\\n\""""]"
"fprintf ( stderr , ""\t-v 2|3\t\t\tLDAP version\n"" )",432:8:12607:12654,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47079, ""True"", ""fprintf ( stderr , \""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\"" )"", ""ExpressionStatement""]], ["""", [47088, ""True"", ""fprintf ( stderr , \""\\t-R\\t\\t\\tdo not follow referrals\\n\"" )"", ""ExpressionStatement""]], ["""", [47097, ""True"", ""fprintf ( stderr , \""\\t-t timelimit\\t\\tsearch time limit\\n\"" )"", ""ExpressionStatement""]], ["""", [47106, ""True"", ""fprintf ( stderr , \""\\t-c timeout\\t\\tconnect timeout\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-R\\t\\t\\tdo not follow referrals\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-t timelimit\\t\\tsearch time limit\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-c timeout\\t\\tconnect timeout\\n\""""]]]",[],"[""\""\\t-v 2|3\\t\\t\\tLDAP version\\n\""""]"
"fprintf ( stderr , ""\t-a never|always|search|find\n\t\t\t\twhen to dereference aliases\n"" )",430:8:12489:12576,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47088, ""True"", ""fprintf ( stderr , \""\\t-R\\t\\t\\tdo not follow referrals\\n\"" )"", ""ExpressionStatement""]], ["""", [47097, ""True"", ""fprintf ( stderr , \""\\t-t timelimit\\t\\tsearch time limit\\n\"" )"", ""ExpressionStatement""]], ["""", [47106, ""True"", ""fprintf ( stderr , \""\\t-c timeout\\t\\tconnect timeout\\n\"" )"", ""ExpressionStatement""]], ["""", [47115, ""True"", ""fprintf ( stderr , \""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-R\\t\\t\\tdo not follow referrals\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-t timelimit\\t\\tsearch time limit\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-c timeout\\t\\tconnect timeout\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\""""]]]",[],"[""\""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\""""]"
"fprintf ( stderr , ""\t-R\t\t\tdo not follow referrals\n"" )",429:8:12425:12479,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47097, ""True"", ""fprintf ( stderr , \""\\t-t timelimit\\t\\tsearch time limit\\n\"" )"", ""ExpressionStatement""]], ["""", [47106, ""True"", ""fprintf ( stderr , \""\\t-c timeout\\t\\tconnect timeout\\n\"" )"", ""ExpressionStatement""]], ["""", [47115, ""True"", ""fprintf ( stderr , \""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\"" )"", ""ExpressionStatement""]], ["""", [47124, ""True"", ""fprintf ( stderr , \""\\t-P\\t\\t\\tpersistent LDAP connection\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-t timelimit\\t\\tsearch time limit\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-c timeout\\t\\tconnect timeout\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-P\\t\\t\\tpersistent LDAP connection\\n\""""]]]",[],"[""\""\\t-R\\t\\t\\tdo not follow referrals\\n\""""]"
"fprintf ( stderr , ""\t-t timelimit\t\tsearch time limit\n"" )",428:8:12359:12415,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47106, ""True"", ""fprintf ( stderr , \""\\t-c timeout\\t\\tconnect timeout\\n\"" )"", ""ExpressionStatement""]], ["""", [47115, ""True"", ""fprintf ( stderr , \""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\"" )"", ""ExpressionStatement""]], ["""", [47124, ""True"", ""fprintf ( stderr , \""\\t-P\\t\\t\\tpersistent LDAP connection\\n\"" )"", ""ExpressionStatement""]], ["""", [47133, ""True"", ""fprintf ( stderr , \""\\t-p port\\t\\t\\tLDAP server port (defaults to %d)\\n\"" , LDAP_PORT )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-c timeout\\t\\tconnect timeout\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-P\\t\\t\\tpersistent LDAP connection\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-p port\\t\\t\\tLDAP server port (defaults to %d)\\n\"""", ""LDAP_PORT""]]]",[],"[""\""\\t-t timelimit\\t\\tsearch time limit\\n\""""]"
"fprintf ( stderr , ""\t-c timeout\t\tconnect timeout\n"" )",427:8:12297:12349,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47115, ""True"", ""fprintf ( stderr , \""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\"" )"", ""ExpressionStatement""]], ["""", [47124, ""True"", ""fprintf ( stderr , \""\\t-P\\t\\t\\tpersistent LDAP connection\\n\"" )"", ""ExpressionStatement""]], ["""", [47133, ""True"", ""fprintf ( stderr , \""\\t-p port\\t\\t\\tLDAP server port (defaults to %d)\\n\"" , LDAP_PORT )"", ""ExpressionStatement""]], ["""", [47144, ""True"", ""fprintf ( stderr , \""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-P\\t\\t\\tpersistent LDAP connection\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-p port\\t\\t\\tLDAP server port (defaults to %d)\\n\"""", ""LDAP_PORT""]], [[""fprintf"", ""stderr"", ""\""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\""""]]]",[],"[""\""\\t-c timeout\\t\\tconnect timeout\\n\""""]"
"fprintf ( stderr , ""\t-E sslcertpath\t\tenable LDAP over SSL\n"" )",425:8:12219:12280,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47124, ""True"", ""fprintf ( stderr , \""\\t-P\\t\\t\\tpersistent LDAP connection\\n\"" )"", ""ExpressionStatement""]], ["""", [47133, ""True"", ""fprintf ( stderr , \""\\t-p port\\t\\t\\tLDAP server port (defaults to %d)\\n\"" , LDAP_PORT )"", ""ExpressionStatement""]], ["""", [47144, ""True"", ""fprintf ( stderr , \""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\"" )"", ""ExpressionStatement""]], ["""", [47153, ""True"", ""fprintf ( stderr , \""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-P\\t\\t\\tpersistent LDAP connection\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-p port\\t\\t\\tLDAP server port (defaults to %d)\\n\"""", ""LDAP_PORT""]], [[""fprintf"", ""stderr"", ""\""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\""""]]]",[],"[""\""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\""""]"
"fprintf ( stderr , ""\t-P\t\t\tpersistent LDAP connection\n"" )",423:8:12126:12183,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47133, ""True"", ""fprintf ( stderr , \""\\t-p port\\t\\t\\tLDAP server port (defaults to %d)\\n\"" , LDAP_PORT )"", ""ExpressionStatement""]], ["""", [47144, ""True"", ""fprintf ( stderr , \""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\"" )"", ""ExpressionStatement""]], ["""", [47153, ""True"", ""fprintf ( stderr , \""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\"" )"", ""ExpressionStatement""]], ["""", [47162, ""True"", ""fprintf ( stderr , \""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-p port\\t\\t\\tLDAP server port (defaults to %d)\\n\"""", ""LDAP_PORT""]], [[""fprintf"", ""stderr"", ""\""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\""""]]]",[],"[""\""\\t-P\\t\\t\\tpersistent LDAP connection\\n\""""]"
"fprintf ( stderr , ""\t-p port\t\t\tLDAP server port (defaults to %d)\n"" , LDAP_PORT )",422:8:12036:12116,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47144, ""True"", ""fprintf ( stderr , \""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\"" )"", ""ExpressionStatement""]], ["""", [47153, ""True"", ""fprintf ( stderr , \""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\"" )"", ""ExpressionStatement""]], ["""", [47162, ""True"", ""fprintf ( stderr , \""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\"" )"", ""ExpressionStatement""]], ["""", [47171, ""True"", ""fprintf ( stderr , \""\\t-w bindpasswd\\t\\tpassword for binddn\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-w bindpasswd\\t\\tpassword for binddn\\n\""""]]]",[],"[""\""\\t-p port\\t\\t\\tLDAP server port (defaults to %d)\\n\""""]"
"fprintf ( stderr , ""\t-h server\t\tLDAP server (defaults to localhost)\n"" )",421:8:11955:12026,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47153, ""True"", ""fprintf ( stderr , \""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\"" )"", ""ExpressionStatement""]], ["""", [47162, ""True"", ""fprintf ( stderr , \""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\"" )"", ""ExpressionStatement""]], ["""", [47171, ""True"", ""fprintf ( stderr , \""\\t-w bindpasswd\\t\\tpassword for binddn\\n\"" )"", ""ExpressionStatement""]], ["""", [47180, ""True"", ""fprintf ( stderr , \""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-w bindpasswd\\t\\tpassword for binddn\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\""""]]]",[],"[""\""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\""""]"
"fprintf ( stderr , ""\t-H URI\t\t\tLDAPURI (defaults to ldap://localhost)\n"" )",419:8:11865:11938,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47162, ""True"", ""fprintf ( stderr , \""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\"" )"", ""ExpressionStatement""]], ["""", [47171, ""True"", ""fprintf ( stderr , \""\\t-w bindpasswd\\t\\tpassword for binddn\\n\"" )"", ""ExpressionStatement""]], ["""", [47180, ""True"", ""fprintf ( stderr , \""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\"" )"", ""ExpressionStatement""]], ["""", [47189, ""True"", ""fprintf ( stderr , \""\\t-s base|one|sub\\t\\tsearch scope\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-w bindpasswd\\t\\tpassword for binddn\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-s base|one|sub\\t\\tsearch scope\\n\""""]]]",[],"[""\""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\""""]"
"fprintf ( stderr , ""\t-W secretfile\t\tread password for binddn from file secretfile\n"" )",417:8:11750:11835,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47171, ""True"", ""fprintf ( stderr , \""\\t-w bindpasswd\\t\\tpassword for binddn\\n\"" )"", ""ExpressionStatement""]], ["""", [47180, ""True"", ""fprintf ( stderr , \""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\"" )"", ""ExpressionStatement""]], ["""", [47189, ""True"", ""fprintf ( stderr , \""\\t-s base|one|sub\\t\\tsearch scope\\n\"" )"", ""ExpressionStatement""]], ["""", [47198, ""True"", ""fprintf ( stderr , \""\\t-F filter (REQUIRED)\\tuser search filter pattern. %%s = login\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-w bindpasswd\\t\\tpassword for binddn\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-s base|one|sub\\t\\tsearch scope\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-F filter (REQUIRED)\\tuser search filter pattern. %%s = login\\n\""""]]]",[],"[""\""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\""""]"
"fprintf ( stderr , ""\t-w bindpasswd\t\tpassword for binddn\n"" )",416:8:11681:11740,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47180, ""True"", ""fprintf ( stderr , \""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\"" )"", ""ExpressionStatement""]], ["""", [47189, ""True"", ""fprintf ( stderr , \""\\t-s base|one|sub\\t\\tsearch scope\\n\"" )"", ""ExpressionStatement""]], ["""", [47198, ""True"", ""fprintf ( stderr , \""\\t-F filter (REQUIRED)\\tuser search filter pattern. %%s = login\\n\"" )"", ""ExpressionStatement""]], ["""", [47207, ""True"", ""fprintf ( stderr , \""\\t-B basedn (REQUIRED)\\tbase dn under where to search for users\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-s base|one|sub\\t\\tsearch scope\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-F filter (REQUIRED)\\tuser search filter pattern. %%s = login\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-B basedn (REQUIRED)\\tbase dn under where to search for users\\n\""""]]]",[],"[""\""\\t-w bindpasswd\\t\\tpassword for binddn\\n\""""]"
"fprintf ( stderr , ""\t-D binddn\t\tDN to bind as to perform searches\n"" )",415:8:11602:11671,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47189, ""True"", ""fprintf ( stderr , \""\\t-s base|one|sub\\t\\tsearch scope\\n\"" )"", ""ExpressionStatement""]], ["""", [47198, ""True"", ""fprintf ( stderr , \""\\t-F filter (REQUIRED)\\tuser search filter pattern. %%s = login\\n\"" )"", ""ExpressionStatement""]], ["""", [47207, ""True"", ""fprintf ( stderr , \""\\t-B basedn (REQUIRED)\\tbase dn under where to search for users\\n\"" )"", ""ExpressionStatement""]], ["""", [47216, ""True"", ""fprintf ( stderr , \""\\t-f filter (REQUIRED)\\tgroup search filter pattern. %%u = user,\\n\\t\\t\\t\\t%%v = group\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-s base|one|sub\\t\\tsearch scope\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-F filter (REQUIRED)\\tuser search filter pattern. %%s = login\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-B basedn (REQUIRED)\\tbase dn under where to search for users\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-f filter (REQUIRED)\\tgroup search filter pattern. %%u = user,\\n\\t\\t\\t\\t%%v = group\\n\""""]]]",[],"[""\""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\""""]"
"fprintf ( stderr , ""\t-s base|one|sub\t\tsearch scope\n"" )",414:8:11538:11592,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47198, ""True"", ""fprintf ( stderr , \""\\t-F filter (REQUIRED)\\tuser search filter pattern. %%s = login\\n\"" )"", ""ExpressionStatement""]], ["""", [47207, ""True"", ""fprintf ( stderr , \""\\t-B basedn (REQUIRED)\\tbase dn under where to search for users\\n\"" )"", ""ExpressionStatement""]], ["""", [47216, ""True"", ""fprintf ( stderr , \""\\t-f filter (REQUIRED)\\tgroup search filter pattern. %%u = user,\\n\\t\\t\\t\\t%%v = group\\n\"" )"", ""ExpressionStatement""]], ["""", [47225, ""True"", ""fprintf ( stderr , \""\\t-b basedn (REQUIRED)\\tbase dn under where to search for groups\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-F filter (REQUIRED)\\tuser search filter pattern. %%s = login\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-B basedn (REQUIRED)\\tbase dn under where to search for users\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-f filter (REQUIRED)\\tgroup search filter pattern. %%u = user,\\n\\t\\t\\t\\t%%v = group\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-b basedn (REQUIRED)\\tbase dn under where to search for groups\\n\""""]]]",[],"[""\""\\t-s base|one|sub\\t\\tsearch scope\\n\""""]"
"fprintf ( stderr , ""\t-F filter (REQUIRED)\tuser search filter pattern. %%s = login\n"" )",413:8:11444:11528,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47207, ""True"", ""fprintf ( stderr , \""\\t-B basedn (REQUIRED)\\tbase dn under where to search for users\\n\"" )"", ""ExpressionStatement""]], ["""", [47216, ""True"", ""fprintf ( stderr , \""\\t-f filter (REQUIRED)\\tgroup search filter pattern. %%u = user,\\n\\t\\t\\t\\t%%v = group\\n\"" )"", ""ExpressionStatement""]], ["""", [47225, ""True"", ""fprintf ( stderr , \""\\t-b basedn (REQUIRED)\\tbase dn under where to search for groups\\n\"" )"", ""ExpressionStatement""]], ["""", [47234, ""True"", """", ""ExpressionStatement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-B basedn (REQUIRED)\\tbase dn under where to search for users\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-f filter (REQUIRED)\\tgroup search filter pattern. %%u = user,\\n\\t\\t\\t\\t%%v = group\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-b basedn (REQUIRED)\\tbase dn under where to search for groups\\n\""""]], [[]]]",[],"[""\""\\t-F filter (REQUIRED)\\tuser search filter pattern. %%s = login\\n\""""]"
"fprintf ( stderr , ""\t-B basedn (REQUIRED)\tbase dn under where to search for users\n"" )",412:8:11350:11434,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47216, ""True"", ""fprintf ( stderr , \""\\t-f filter (REQUIRED)\\tgroup search filter pattern. %%u = user,\\n\\t\\t\\t\\t%%v = group\\n\"" )"", ""ExpressionStatement""]], ["""", [47225, ""True"", ""fprintf ( stderr , \""\\t-b basedn (REQUIRED)\\tbase dn under where to search for groups\\n\"" )"", ""ExpressionStatement""]], ["""", [47234, ""True"", """", ""ExpressionStatement""]], ["""", [47235, ""True"", "")"", ""Statement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-f filter (REQUIRED)\\tgroup search filter pattern. %%u = user,\\n\\t\\t\\t\\t%%v = group\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-b basedn (REQUIRED)\\tbase dn under where to search for groups\\n\""""]], [[]], [[]]]",[],"[""\""\\t-B basedn (REQUIRED)\\tbase dn under where to search for users\\n\""""]"
"fprintf ( stderr , ""\t-f filter (REQUIRED)\tgroup search filter pattern. %%u = user,\n\t\t\t\t%%v = group\n"" )",411:8:11234:11340,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47225, ""True"", ""fprintf ( stderr , \""\\t-b basedn (REQUIRED)\\tbase dn under where to search for groups\\n\"" )"", ""ExpressionStatement""]], ["""", [47234, ""True"", """", ""ExpressionStatement""]], ["""", [47235, ""True"", "")"", ""Statement""]], ["""", [47236, ""True"", ""\"" -b basedn -f filter [options] ldap_server_name\\n\\n\"""", ""Statement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[""fprintf"", ""stderr"", ""\""\\t-b basedn (REQUIRED)\\tbase dn under where to search for groups\\n\""""]], [[]], [[]], [[]]]",[],"[""\""\\t-f filter (REQUIRED)\\tgroup search filter pattern. %%u = user,\\n\\t\\t\\t\\t%%v = group\\n\""""]"
"fprintf ( stderr , ""\t-b basedn (REQUIRED)\tbase dn under where to search for groups\n"" )",410:8:11139:11224,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47254, ""True"", ""! basedn || ! searchfilter"", ""Condition""]]]","[["""", [47234, ""True"", """", ""ExpressionStatement""]], ["""", [47235, ""True"", "")"", ""Statement""]], ["""", [47236, ""True"", ""\"" -b basedn -f filter [options] ldap_server_name\\n\\n\"""", ""Statement""]], ["""", [47237, ""True"", ""PROGRAM_NAME"", ""Statement""]]]","[[[""!"", ""basedn"", ""!"", ""searchfilter"", ""||""]], [[]], [[]], [[]], [[]]]",[],"[""\""\\t-b basedn (REQUIRED)\\tbase dn under where to search for groups\\n\""""]"
"fprintf ( stderr , ""FATAL: TLS (-Z) is incompatible with version %d\n"" , version )",363:16:9739:9840,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [47452, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'Z'"", [47871, ""True"", ""option"", ""Condition""]], [""case 'P'"", [47962, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]","[["""", [47456, ""True"", ""case 'Z' :"", ""Label""]], ["""", [47873, ""True"", ""-- argc"", ""ExpressionStatement""]]]","[[[""version"", ""LDAP_VERSION2"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[]], [[""argc""]]]","[[[""version"", ""LDAP_VERSION2"", ""=""], ""version""], [[""version"", ""LDAP_VERSION3"", ""=""], ""version""], [[""version"", ""LDAP_VERSION3"", ""=""], ""version""]]","[""\""FATAL: TLS (-Z) is incompatible with version %d\\n\""""]"
"fprintf ( stderr , ""FATAL: Protocol version should be 2 or 3\n"" )",357:16:9540:9601,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""default"", [47490, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'v'"", [47871, ""True"", ""option"", ""Condition""]], [""case 'P'"", [47962, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]","[["""", [47476, ""True"", ""default :"", ""Label""]], ["""", [47497, ""True"", ""case 'v' :"", ""Label""]]]","[[[""atoi"", ""const char *""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""default""]], [[]]]",[],"[""\""FATAL: Protocol version should be 2 or 3\\n\""""]"
"fprintf ( stderr , ""FATAL: Your LDAP library does not have URI support\n"" )",257:12:6424:6495,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""case 'H'"", [47871, ""True"", ""option"", ""Condition""]], [""case 'P'"", [47962, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]","[["""", [47870, ""True"", ""case 'H' :"", ""Label""]], ["""", [47873, ""True"", ""-- argc"", ""ExpressionStatement""]], ["""", [47877, ""True"", ""++ argv"", ""ExpressionStatement""]]]","[[[""char"", ""'H'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[]], [[""argc""]], [[""argv""]]]",[],"[""\""FATAL: Your LDAP library does not have URI support\\n\""""]"
"fprintf ( stderr , ""ERROR: Filter too large\n"" )",701:8:22076:22120,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""True"", [48320, ""True"", ""size <= 0"", ""Condition""]], [""False"", [48473, ""True"", ""* templ && size > 0"", ""Condition""]], [""case 'u'"", [48469, ""True"", ""* templ"", ""Condition""]], [""case 'u'"", [48460, ""True"", ""* templ"", ""Condition""]], [""True"", [48473, ""True"", ""* templ && size > 0"", ""Condition""]], [""case '%'"", [48469, ""True"", ""* templ"", ""Condition""]]]",[],"[[[""int"", ""0"", ""<=""]], [[""*"", ""const char *""]], [[""int"", ""0"", "">""]], [[""*"", ""const char *"", ""'u'"", ""==""]], [[""*"", ""const char *"", ""'u'"", ""==""]], [[""*"", ""const char *""]], [[""int"", ""0"", "">""]], [[""*"", ""const char *"", ""'%'"", ""==""]]]",[],"[""\""ERROR: Filter too large\\n\""""]"
"fprintf ( stderr , ""ERROR: Unknown filter template string %%%c\n"" , * templ )",678:16:21539:21610,/data/download/squid/squid-3.5.25/helpers/external_acl/LDAP_group/ext_ldap_group_acl.cc,"[[""default"", [48460, ""True"", ""* templ"", ""Condition""]], [""case '%'"", [48469, ""True"", ""* templ"", ""Condition""]], [""True"", [48473, ""True"", ""* templ && size > 0"", ""Condition""]], [""case 'u'"", [48469, ""True"", ""* templ"", ""Condition""]], [""case 'u'"", [48460, ""True"", ""* templ"", ""Condition""]]]",[],"[[[""*"", ""const char *""]], [[""*"", ""const char *"", ""'%'"", ""==""]], [[""*"", ""const char *""]], [[""int"", ""0"", "">""]], [[""*"", ""const char *"", ""'u'"", ""==""]], [[""*"", ""const char *"", ""'u'"", ""==""]]]","[[[""const char *""], ""const char *""]]","[""\""ERROR: Unknown filter template string %%%c\\n\""""]"
"fprintf ( stderr , ""%s: ERROR: Can't find DC for local domain '%s'\n"" , program_name , machinedomain )",440:8:14473:14569,/data/download/squid/squid-3.5.25/helpers/external_acl/LM_group/ext_lm_group_acl.cc,"[[""False"", [50617, ""True"", ""nStatus == NERR_Success"", ""Condition""]], [""True"", [50710, ""True"", ""nStatus == NERR_Success"", ""Condition""]]]","[["""", [50652, ""True"", ""nStatus = ( use_PDC_only ? NetGetDCName ( NULL , wszLocalDomain , ( LPBYTE * ) & LclDCptr ) : NetGetAnyDCName ( NULL , wszLocalDomain , ( LPBYTE * ) & LclDCptr ) )"", ""ExpressionStatement""]], ["""", [50687, ""True"", ""debug ( \""Running on a DC.\\n\"" )"", ""ExpressionStatement""]], ["""", [50694, ""True"", ""LclDCptr = NULL"", ""ExpressionStatement""]]]","[[[""NET_API_STATUS"", ""NERR_Success"", ""==""]], [[""NET_API_STATUS"", ""NERR_Success"", ""==""]], [[""NET_API_STATUS"", ""use_PDC_only"", ""NetGetDCName"", ""NULL"", ""WCHAR [ DNLEN + 1 ]"", ""&"", ""LclDCptr"", ""NetGetAnyDCName"", ""NULL"", ""WCHAR [ DNLEN + 1 ]"", ""&"", ""LclDCptr"", ""=""]], [[""debug"", ""\""Running on a DC.\\n\""""]], [[""LPWSTR"", ""NULL"", ""=""]]]",[],"[""\""%s: ERROR: Can't find DC for local domain '%s'\\n\""""]"
"fprintf ( stderr , ""%s: ERROR: NetUserGetGroups() failed.'\n"" , program_name )",437:12:14367:14440,/data/download/squid/squid-3.5.25/helpers/external_acl/LM_group/ext_lm_group_acl.cc,"[[""False"", [50413, ""True"", ""nStatus == NERR_Success"", ""Condition""]], [""False"", [50525, ""True"", ""nStatus != NERR_Success"", ""Condition""]], [""False"", [50595, ""True"", ""strcmp ( NTDomain , machinedomain ) != 0"", ""Condition""]], [""True"", [50595, ""True"", ""strcmp ( NTDomain , machinedomain ) != 0"", ""Condition""]], [""True"", [50617, ""True"", ""nStatus == NERR_Success"", ""Condition""]], [""True"", [50617, ""True"", ""nStatus == NERR_Success"", ""Condition""]], [""True"", [50710, ""True"", ""nStatus == NERR_Success"", ""Condition""]]]",[],"[[[""NET_API_STATUS"", ""NERR_Success"", ""==""]], [[""NET_API_STATUS"", ""NERR_Success"", ""!=""]], [[""strcmp"", ""char [ DNLEN + UNLEN + 2 ]"", ""machinedomain"", ""0"", ""!=""]], [[""strcmp"", ""char [ DNLEN + UNLEN + 2 ]"", ""machinedomain"", ""0"", ""!=""]], [[""NET_API_STATUS"", ""NERR_Success"", ""==""]], [[""NET_API_STATUS"", ""NERR_Success"", ""==""]], [[""NET_API_STATUS"", ""NERR_Success"", ""==""]]]",[],"[""\""%s: ERROR: NetUserGetGroups() failed.'\\n\""""]"
"fprintf ( stderr , ""%s: ERROR: Can't find DC for user's domain '%s'\n"" , program_name , NTDomain )",391:16:12655:12747,/data/download/squid/squid-3.5.25/helpers/external_acl/LM_group/ext_lm_group_acl.cc,"[[""True"", [50525, ""True"", ""nStatus != NERR_Success"", ""Condition""]], [""True"", [50595, ""True"", ""strcmp ( NTDomain , machinedomain ) != 0"", ""Condition""]], [""True"", [50617, ""True"", ""nStatus == NERR_Success"", ""Condition""]], [""True"", [50710, ""True"", ""nStatus == NERR_Success"", ""Condition""]]]","[["""", [50529, ""True"", ""nStatus = ( use_PDC_only ? NetGetDCName ( LclDCptr , wszUserDomain , ( LPBYTE * ) & UsrDCptr ) : NetGetAnyDCName ( LclDCptr , wszUserDomain , ( LPBYTE * ) & UsrDCptr ) )"", ""ExpressionStatement""]], ["""", [50563, ""True"", ""MultiByteToWideChar ( CP_ACP , 0 , NTDomain , strlen ( NTDomain ) + 1 , wszUserDomain , sizeof ( wszUserDomain ) / sizeof ( wszUserDomain [ 0 ] ) )"", ""ExpressionStatement""]]]","[[[""NET_API_STATUS"", ""NERR_Success"", ""!=""]], [[""strcmp"", ""char [ DNLEN + UNLEN + 2 ]"", ""machinedomain"", ""0"", ""!=""]], [[""NET_API_STATUS"", ""NERR_Success"", ""==""]], [[""NET_API_STATUS"", ""NERR_Success"", ""==""]], [[""NET_API_STATUS"", ""use_PDC_only"", ""NetGetDCName"", ""LPWSTR"", ""WCHAR [ DNLEN + 1 ]"", ""&"", ""UsrDCptr"", ""NetGetAnyDCName"", ""LPWSTR"", ""WCHAR [ DNLEN + 1 ]"", ""&"", ""UsrDCptr"", ""=""]], [[""MultiByteToWideChar"", ""CP_ACP"", ""0"", ""char [ DNLEN + UNLEN + 2 ]"", ""strlen"", ""char [ DNLEN + UNLEN + 2 ]"", ""1"", ""+"", ""WCHAR [ DNLEN + 1 ]"", ""WCHAR [ DNLEN + 1 ]"", ""0"", ""/""]]]","[[[""char [ DNLEN + UNLEN + 2 ]"", ""DNLEN"", ""UNLEN"", ""2"", ""+"", ""+""], ""char [ DNLEN + UNLEN + 2 ]""]]","[""\""%s: ERROR: Can't find DC for user's domain '%s'\\n\""""]"
"fprintf ( stderr , ""%s: ERROR: NetServerGetInfo() failed.'\n"" , program_name )",377:8:11909:11982,/data/download/squid/squid-3.5.25/helpers/external_acl/LM_group/ext_lm_group_acl.cc,"[[""False"", [50710, ""True"", ""nStatus == NERR_Success"", ""Condition""]]]","[["""", [50714, ""True"", ""nStatus = NetServerGetInfo ( NULL , dwLevel , ( LPBYTE * ) & pSrvBuf )"", ""ExpressionStatement""]], ["""", [50731, ""True"", ""dwLevel = 101"", ""ExpressionStatement""]], ["""", [50735, ""True"", ""MultiByteToWideChar ( CP_ACP , 0 , machinedomain , strlen ( machinedomain ) + 1 , wszLocalDomain , sizeof ( wszLocalDomain ) / sizeof ( wszLocalDomain [ 0 ] ) )"", ""ExpressionStatement""]]]","[[[""NET_API_STATUS"", ""NERR_Success"", ""==""]], [[""NET_API_STATUS"", ""NetServerGetInfo"", ""NULL"", ""DWORD"", ""&"", ""pSrvBuf"", ""=""]], [[""DWORD"", ""101"", ""=""]], [[""MultiByteToWideChar"", ""CP_ACP"", ""0"", ""machinedomain"", ""strlen"", ""machinedomain"", ""1"", ""+"", ""WCHAR [ DNLEN + 1 ]"", ""WCHAR [ DNLEN + 1 ]"", ""0"", ""/""]]]",[],"[""\""%s: ERROR: NetServerGetInfo() failed.'\\n\""""]"
"fprintf ( stderr , ""%s: FATAL: Unknown option: -%c. Exiting\n"" , program_name , opt )",500:12:16100:16179,/data/download/squid/squid-3.5.25/helpers/external_acl/LM_group/ext_lm_group_acl.cc,"[[""case 'h'"", [51238, ""True"", ""opt"", ""Condition""]], [""True"", [51240, ""True"", ""- 1 != ( opt = getopt ( argc , argv , \""D:GPcdh\"" ) )"", ""Condition""]]]","[["""", [51168, ""True"", ""default :"", ""Label""]], ["""", [51170, ""True"", ""opt = optopt"", ""ExpressionStatement""]], ["""", [51174, ""True"", ""case '?' :"", ""Label""]], ["""", [51175, ""True"", ""exit ( 0 )"", ""ExpressionStatement""]], ["""", [51138, ""True"", ""break ;"", ""BreakStatement""]], ["""", [51192, ""True"", ""break ;"", ""BreakStatement""]], ["""", [51198, ""True"", ""break ;"", ""BreakStatement""]], ["""", [51204, ""True"", ""break ;"", ""BreakStatement""]], ["""", [51210, ""True"", ""break ;"", ""BreakStatement""]], ["""", [51216, ""True"", ""break ;"", ""BreakStatement""]], ["""", [51257, ""True"", ""opterr = 0"", ""ExpressionStatement""]]]","[[[""int"", ""'h'"", ""==""]], [[""-"", ""1"", ""opt"", ""getopt"", ""int"", ""char * [ ]"", ""\""D:GPcdh\"""", ""="", ""!=""]], [[""default""]], [[""int"", ""optopt"", ""=""]], [[]], [[""exit"", ""0""]], [[]], [[]], [[]], [[]], [[]], [[]], [[""opterr"", ""0"", ""=""]]]","[[[""-"", ""1"", ""int"", ""getopt"", ""int"", ""char * [ ]"", ""\""D:GPcdh\"""", ""="", ""!=""], ""int""], [[""int"", ""optopt"", ""=""], ""int""]]","[""\""%s: FATAL: Unknown option: -%c. Exiting\\n\""""]"
"fprintf ( stderr , ""%s: FATAL: Can't read machine domain\n"" , program_name )",536:12:16917:16988,/data/download/squid/squid-3.5.25/helpers/external_acl/LM_group/ext_lm_group_acl.cc,"[[""True"", [51673, ""True"", ""( machinedomain = GetDomainName ( ) ) == NULL"", ""Condition""]], [""True"", [51682, ""True"", ""use_global"", ""Condition""]]]","[["""", [51684, ""True"", ""process_options ( argc , argv )"", ""ExpressionStatement""]], ["""", [51693, ""True"", ""setbuf ( stderr , NULL )"", ""ExpressionStatement""]]]","[[[""machinedomain"", ""GetDomainName"", ""="", ""NULL"", ""==""]], [[""use_global""]], [[""process_options"", ""int"", ""char * [ ]""]], [[""setbuf"", ""stderr"", ""NULL""]]]","[[[""program_name"", ""char * [ ]"", ""0"", ""=""], ""program_name""], [[""program_name"", ""strrchr"", ""char * [ ]"", ""0"", ""'/'"", ""=""], ""program_name""], [[""program_name"", ""\""(unknown)\"""", ""=""], ""program_name""]]","[""\""%s: FATAL: Can't read machine domain\\n\""""]"
"fprintf ( stderr , ""Usage:\n%s [-d] -f <configuration file>\n"" , program_name )",214:4:7038:7126,/data/download/squid/squid-3.5.25/helpers/external_acl/file_userip/ext_file_userip_acl.cc,[],"[["""", [63120, ""True"", ""const char * program_name"", ""Parameter""]], ["""", [63136, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""const char *""]], [[""ENTRY""]]]","[[[""const char *""], ""const char *""]]","[""\""Usage:\\n%s [-d] -f <configuration file>\\n\""""]"
"fprintf ( stderr , ""%s: ERROR: Input Too Large..: %s\n"" , program_name , line )",264:16:8558:8631,/data/download/squid/squid-3.5.25/helpers/external_acl/file_userip/ext_file_userip_acl.cc,"[[""True"", [63328, ""True"", ""fgets ( line , sizeof ( line ) , stdin )"", ""Condition""]], [""True"", [63304, ""True"", ""strchr ( line , '\\n' ) != NULL"", ""Condition""]], [""True"", [63354, ""True"", ""( cp = strchr ( line , '\\n' ) ) == NULL"", ""Condition""]], [""True"", [63328, ""True"", ""fgets ( line , sizeof ( line ) , stdin )"", ""Condition""]], [""True"", [63367, ""True"", ""fgets ( line , HELPER_INPUT_BUFFER , stdin )"", ""Condition""]], [""True"", [63304, ""True"", ""strchr ( line , '\\n' ) != NULL"", ""Condition""]], [""True"", [63354, ""True"", ""( cp = strchr ( line , '\\n' ) ) == NULL"", ""Condition""]]]",[],"[[[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""stdin""]], [[""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""NULL"", ""!=""]], [[""cp"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""stdin""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER"", ""stdin""]], [[""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""NULL"", ""!=""]], [[""cp"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]]]","[[[""char *"", ""char *"", ""char * [ ]"", ""0"", ""=""], ""char *""], [[""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER""], ""char [ HELPER_INPUT_BUFFER ]""]]","[""\""%s: ERROR: Input Too Large..: %s\\n\""""]"
"fprintf ( stderr , ""%s: ERROR: Input Too Large: %s\n"" , program_name , line )",262:12:8414:8485,/data/download/squid/squid-3.5.25/helpers/external_acl/file_userip/ext_file_userip_acl.cc,"[[""True"", [63354, ""True"", ""( cp = strchr ( line , '\\n' ) ) == NULL"", ""Condition""]], [""True"", [63367, ""True"", ""fgets ( line , HELPER_INPUT_BUFFER , stdin )"", ""Condition""]]]","[["""", [63165, ""True"", ""SEND_ERR ( \""\"" )"", ""ExpressionStatement""]], ["""", [63173, ""True"", ""SEND_OK ( \""\"" )"", ""ExpressionStatement""]], ["""", [63227, ""True"", ""continue ;"", ""ContinueStatement""]], ["""", [63287, ""True"", ""continue ;"", ""ContinueStatement""]], ["""", [63378, ""True"", ""current_entry = load_dict ( FH )"", ""ExpressionStatement""]], ["""", [63228, ""True"", ""SEND_BH ( HLP_MSG ( \""Invalid Input.\"" ) )"", ""ExpressionStatement""]], ["""", [63288, ""True"", ""SEND_BH ( HLP_MSG ( \""Input Too Large.\"" ) )"", ""ExpressionStatement""]], ["""", [63389, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]]]","[[[""cp"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER"", ""stdin""]], [[""SEND_ERR"", ""\""\""""]], [[""SEND_OK"", ""\""\""""]], [[]], [[]], [[""struct ip_user_dict *"", ""load_dict"", ""FILE *"", ""=""]], [[""SEND_BH"", ""HLP_MSG"", ""\""Invalid Input.\""""]], [[""SEND_BH"", ""HLP_MSG"", ""\""Input Too Large.\""""]], [[""exit"", ""1""]]]","[[[""char *"", ""char *"", ""char * [ ]"", ""0"", ""=""], ""char *""], [[""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER""], ""char [ HELPER_INPUT_BUFFER ]""]]","[""\""%s: ERROR: Input Too Large: %s\\n\""""]"
"fprintf ( stderr , ""%s: FATAL: Unable to open file '%s': %s"" , program_name , filename , xstrerror ( ) )",254:8:8081:8176,/data/download/squid/squid-3.5.25/helpers/external_acl/file_userip/ext_file_userip_acl.cc,"[[""True"", [63414, ""True"", ""! FH"", ""Condition""]]]","[["""", [63418, ""True"", ""FILE * FH = fopen ( filename , \""r\"" ) ;"", ""IdentifierDeclStatement""]], ["""", [63434, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [63441, ""True"", ""usage ( program_name )"", ""ExpressionStatement""]]]","[[[""!"", ""FILE *""]], [[""FILE *"", ""FILE *"", ""fopen"", ""char *"", ""\""r\"""", ""=""]], [[""exit"", ""1""]], [[""usage"", ""char *""]]]","[[[""char *"", ""optarg"", ""=""], ""char *""], [[""char *"", ""NULL"", ""NULL"", ""=""], ""char *""], [[""char *"", ""char *"", ""char * [ ]"", ""0"", ""=""], ""char *""]]","[""\""%s: FATAL: Unable to open file '%s': %s\""""]"
"fprintf ( stderr , ""%s: FATAL: No Filename configured."" , program_name )",248:8:7900:7967,/data/download/squid/squid-3.5.25/helpers/external_acl/file_userip/ext_file_userip_acl.cc,"[[""True"", [63459, ""True"", ""filename == NULL"", ""Condition""]]]","[["""", [63467, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [63511, ""True"", ""break ;"", ""BreakStatement""]], ["""", [63517, ""True"", ""break ;"", ""BreakStatement""]], ["""", [63542, ""True"", ""setvbuf ( stdout , NULL , _IOLBF , 0 )"", ""ExpressionStatement""]], ["""", [63474, ""True"", ""usage ( program_name )"", ""ExpressionStatement""]], ["""", [63512, ""True"", ""debug_enabled = 1"", ""ExpressionStatement""]], ["""", [63518, ""True"", ""filename = optarg"", ""ExpressionStatement""]], ["""", [63555, ""True"", ""int ch ;"", ""IdentifierDeclStatement""]]]","[[[""char *"", ""NULL"", ""==""]], [[""exit"", ""1""]], [[]], [[]], [[""setvbuf"", ""stdout"", ""NULL"", ""_IOLBF"", ""0""]], [[""usage"", ""char *""]], [[""debug_enabled"", ""1"", ""=""]], [[""char *"", ""optarg"", ""=""]], [[""int""]]]","[[[""char *"", ""char *"", ""char * [ ]"", ""0"", ""=""], ""char *""]]","[""\""%s: FATAL: No Filename configured.\""""]"
"fprintf ( stderr , ""%s: FATAL: Unknown parameter option '%c'"" , program_name , ch )",242:12:7714:7791,/data/download/squid/squid-3.5.25/helpers/external_acl/file_userip/ext_file_userip_acl.cc,"[[""case 'h'"", [63523, ""True"", ""ch"", ""Condition""]], [""True"", [63525, ""True"", ""( ch = getopt ( argc , argv , \""df:h\"" ) ) != - 1"", ""Condition""]]]","[["""", [63494, ""True"", ""default :"", ""Label""]], ["""", [63496, ""True"", ""exit ( 0 )"", ""ExpressionStatement""]], ["""", [63503, ""True"", ""usage ( program_name )"", ""ExpressionStatement""]], ["""", [63510, ""True"", ""case 'h' :"", ""Label""]], ["""", [63467, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [63511, ""True"", ""break ;"", ""BreakStatement""]], ["""", [63517, ""True"", ""break ;"", ""BreakStatement""]], ["""", [63542, ""True"", ""setvbuf ( stdout , NULL , _IOLBF , 0 )"", ""ExpressionStatement""]]]","[[[""int"", ""'h'"", ""==""]], [[""ch"", ""getopt"", ""int"", ""char * [ ]"", ""\""df:h\"""", ""="", ""-"", ""1"", ""!=""]], [[""default""]], [[""exit"", ""0""]], [[""usage"", ""char *""]], [[]], [[""exit"", ""1""]], [[]], [[]], [[""setvbuf"", ""stdout"", ""NULL"", ""_IOLBF"", ""0""]]]","[[[""int"", ""getopt"", ""int"", ""char * [ ]"", ""\""df:h\"""", ""="", ""-"", ""1"", ""!=""], ""int""], [[""char *"", ""char *"", ""char * [ ]"", ""0"", ""=""], ""char *""]]","[""\""%s: FATAL: Unknown parameter option '%c'\""""]"
"fprintf ( stderr , ""\n"" )",441:12:13115:13136,/data/download/squid/squid-3.5.25/helpers/external_acl/kerberos_ldap_group/support_ldap.cc,"[[""False"", [70562, ""True"", ""debug_enabled"", ""Condition""]], [""False"", [70625, ""True"", ""j < max_attr"", ""Condition""]], [""True"", [70385, ""True"", ""search_group_tree ( margs , ld , bindp , av , group , ldepth )"", ""Condition""]], [""True"", [70334, ""True"", ""debug_enabled"", ""Condition""]], [""True"", [70765, ""True"", ""rc != LDAP_SUCCESS"", ""Condition""]], [""False"", [70484, ""True"", ""! strcasecmp ( group , av )"", ""Condition""]], [""False"", [70385, ""True"", ""search_group_tree ( margs , ld , bindp , av , group , ldepth )"", ""Condition""]], [""False"", [70862, ""True"", ""depth > margs -> mdepth"", ""Condition""]]]",[],"[[[""debug_enabled""]], [[""j"", ""size_t"", ""<""]], [[""search_group_tree"", ""struct main_args *"", ""LDAP *"", ""char *"", ""char *"", ""char *"", ""int""]], [[""debug_enabled""]], [[""int"", ""LDAP_SUCCESS"", ""!=""]], [[""!"", ""strcasecmp"", ""char *"", ""char *""]], [[""search_group_tree"", ""struct main_args *"", ""LDAP *"", ""char *"", ""char *"", ""char *"", ""int""]], [[""int"", ""struct main_args *"", ""mdepth"", "">""]]]",[],"[""\""\\n\""""]"
"fprintf ( stderr , ""%02x"" , ( unsigned char ) av [ n ] )",440:16:13055:13101,/data/download/squid/squid-3.5.25/helpers/external_acl/kerberos_ldap_group/support_ldap.cc,"[[""True"", [70525, ""True"", ""av [ n ] != '\\0'"", ""Condition""]], [""True"", [70562, ""True"", ""debug_enabled"", ""Condition""]], [""False"", [70625, ""True"", ""j < max_attr"", ""Condition""]], [""True"", [70385, ""True"", ""search_group_tree ( margs , ld , bindp , av , group , ldepth )"", ""Condition""]], [""True"", [70334, ""True"", ""debug_enabled"", ""Condition""]], [""True"", [70765, ""True"", ""rc != LDAP_SUCCESS"", ""Condition""]]]",[],"[[[""char *"", ""int"", ""'\\0'"", ""!=""]], [[""debug_enabled""]], [[""j"", ""size_t"", ""<""]], [[""search_group_tree"", ""struct main_args *"", ""LDAP *"", ""char *"", ""char *"", ""char *"", ""int""]], [[""debug_enabled""]], [[""int"", ""LDAP_SUCCESS"", ""!=""]]]","[[[""char *"", ""3"", ""+=""], ""char *""], [[""char *"", ""char * *"", ""j"", ""=""], ""char *""], [[""int"", ""0"", ""=""], ""int""]]","[""\""%02x\""""]"
"fprintf ( stderr , ""\n"" )",1123:16:38410:38431,/data/download/squid/squid-3.5.25/helpers/external_acl/kerberos_ldap_group/support_ldap.cc,"[[""False"", [75021, ""True"", ""debug_enabled"", ""Condition""]], [""False"", [75084, ""True"", ""k < max_attr"", ""Condition""]], [""True"", [74943, ""True"", ""! strcasecmp ( group , av )"", ""Condition""]], [""True"", [74937, ""True"", ""debug_enabled"", ""Condition""]], [""True"", [75141, ""True"", ""ldap_count_entries ( ld , res ) != 0"", ""Condition""]], [""False"", [75084, ""True"", ""k < max_attr"", ""Condition""]], [""True"", [74943, ""True"", ""! strcasecmp ( group , av )"", ""Condition""]], [""False"", [75249, ""True"", ""rc != LDAP_SUCCESS"", ""Condition""]]]",[],"[[[""debug_enabled""]], [[""k"", ""size_t"", ""<""]], [[""!"", ""strcasecmp"", ""char *"", ""char *""]], [[""debug_enabled""]], [[""ldap_count_entries"", ""LDAP *"", ""LDAPMessage *"", ""0"", ""!=""]], [[""k"", ""size_t"", ""<""]], [[""!"", ""strcasecmp"", ""char *"", ""char *""]], [[""int"", ""LDAP_SUCCESS"", ""!=""]]]",[],"[""\""\\n\""""]"
"fprintf ( stderr , ""%02x"" , ( unsigned char ) av [ n ] )",1122:20:38346:38392,/data/download/squid/squid-3.5.25/helpers/external_acl/kerberos_ldap_group/support_ldap.cc,"[[""True"", [74984, ""True"", ""av [ n ] != '\\0'"", ""Condition""]], [""True"", [75021, ""True"", ""debug_enabled"", ""Condition""]], [""False"", [75084, ""True"", ""k < max_attr"", ""Condition""]], [""True"", [74943, ""True"", ""! strcasecmp ( group , av )"", ""Condition""]], [""True"", [74937, ""True"", ""debug_enabled"", ""Condition""]], [""True"", [75141, ""True"", ""ldap_count_entries ( ld , res ) != 0"", ""Condition""]]]",[],"[[[""char *"", ""n"", ""'\\0'"", ""!=""]], [[""debug_enabled""]], [[""k"", ""size_t"", ""<""]], [[""!"", ""strcasecmp"", ""char *"", ""char *""]], [[""debug_enabled""]], [[""ldap_count_entries"", ""LDAP *"", ""LDAPMessage *"", ""0"", ""!=""]]]","[[[""char *"", ""3"", ""+=""], ""char *""], [[""char *"", ""char * *"", ""k"", ""=""], ""char *""], [[""n"", ""n"", ""0"", ""=""], ""n""]]","[""\""%02x\""""]"
"vfprintf ( stderr , format , args )",70:4:1988:2018,/data/download/squid/squid-3.5.25/helpers/external_acl/kerberos_ldap_group/support_log.cc,"[[""False"", [76857, ""True"", ""! log_enabled"", ""Condition""]]]","[["""", [76842, ""True"", ""va_start ( args , format )"", ""ExpressionStatement""]], ["""", [76851, ""True"", ""va_list args ;"", ""IdentifierDeclStatement""]], ["""", [76819, ""True"", ""char * format"", ""Parameter""]]]","[[[""!"", ""log_enabled""]], [[""va_start"", ""va_list"", ""char *""]], [[""va_list""]], [[""char *""]]]","[[[""char *""], ""char *""], [[""va_list""], ""va_list""]]",[]
"vfprintf ( stderr , format , args )",79:4:2122:2152,/data/download/squid/squid-3.5.25/helpers/external_acl/kerberos_ldap_group/support_log.cc,[],"[["""", [76893, ""True"", ""va_start ( args , format )"", ""ExpressionStatement""]], ["""", [76902, ""True"", ""va_list args ;"", ""IdentifierDeclStatement""]], ["""", [76870, ""True"", ""char * format"", ""Parameter""]], ["""", [76906, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""va_start"", ""va_list"", ""char *""]], [[""va_list""]], [[""char *""]], [[""ENTRY""]]]","[[[""char *""], ""char *""], [[""va_list""], ""va_list""]]",[]
"vfprintf ( stderr , format , args )",88:4:2255:2285,/data/download/squid/squid-3.5.25/helpers/external_acl/kerberos_ldap_group/support_log.cc,[],"[["""", [76937, ""True"", ""va_start ( args , format )"", ""ExpressionStatement""]], ["""", [76946, ""True"", ""va_list args ;"", ""IdentifierDeclStatement""]], ["""", [76914, ""True"", ""char * format"", ""Parameter""]], ["""", [76950, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""va_start"", ""va_list"", ""char *""]], [[""va_list""]], [[""char *""]], [[""ENTRY""]]]","[[[""char *""], ""char *""], [[""va_list""], ""va_list""]]",[]
"fprintf ( stderr , ""%s| %s: ERROR: Dummy function\n"" , LogTime ( ) , PROGRAM )",285:4:7806:7876,/data/download/squid/squid-3.5.25/helpers/external_acl/kerberos_ldap_group/support_sasl.cc,[],"[["""", [82950, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",[],"[""\""%s| %s: ERROR: Dummy function\\n\""""]"
"fprintf ( stderr , ""FATAL: %s: Failed to open session db '%s'\n"" , program_name , db_path )",96:12:3056:3141,/data/download/squid/squid-3.5.25/helpers/external_acl/session/ext_session_acl.cc,"[[""True"", [83000, ""True"", ""db -> open ( db , NULL , db_path , NULL , DB_BTREE , DB_CREATE , 0666 )"", ""Condition""]], [""False"", [83091, ""True"", ""db_env"", ""Condition""]]]","[["""", [83021, ""True"", ""db_create ( & db , NULL , 0 )"", ""ExpressionStatement""]], ["""", [83099, ""True"", ""db_create ( & db , db_env , 0 )"", ""ExpressionStatement""]]]","[[[""db"", ""open"", ""db"", ""NULL"", ""db_path"", ""NULL"", ""DB_BTREE"", ""DB_CREATE"", ""0666""]], [[""db_env""]], [[""db_create"", ""&"", ""db"", ""NULL"", ""0""]], [[""db_create"", ""&"", ""db"", ""db_env"", ""0""]]]",[],"[""\""FATAL: %s: Failed to open session db '%s'\\n\""""]"
"fprintf ( stderr , ""FATAL: %s: Failed to open db file '%s' in dir '%s'\n"" , program_name , ""session"" , db_path )",88:12:2726:2851,/data/download/squid/squid-3.5.25/helpers/external_acl/session/ext_session_acl.cc,"[[""True"", [83070, ""True"", ""db -> open ( db , NULL , \""session\"" , NULL , DB_BTREE , DB_CREATE , 0666 )"", ""Condition""]], [""True"", [83091, ""True"", ""db_env"", ""Condition""]]]","[["""", [83099, ""True"", ""db_create ( & db , db_env , 0 )"", ""ExpressionStatement""]], ["""", [83114, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [83199, ""True"", ""struct stat st_buf ;"", ""IdentifierDeclStatement""]]]","[[[""db"", ""open"", ""db"", ""NULL"", ""\""session\"""", ""NULL"", ""DB_BTREE"", ""DB_CREATE"", ""0666""]], [[""db_env""]], [[""db_create"", ""&"", ""db"", ""db_env"", ""0""]], [[""exit"", ""1""]], [[""struct stat""]]]",[],"[""\""FATAL: %s: Failed to open db file '%s' in dir '%s'\\n\"""", ""\""session\""""]"
"fprintf ( stderr , ""FATAL: %s: Failed to open database environment in '%s'\n"" , program_name , db_path )",77:20:2351:2449,/data/download/squid/squid-3.5.25/helpers/external_acl/session/ext_session_acl.cc,"[[""True"", [83145, ""True"", ""db_env -> open ( db_env , db_path , DB_CREATE | DB_INIT_MPOOL | DB_INIT_LOCK , 0666 )"", ""Condition""]], [""True"", [83175, ""True"", ""S_ISDIR ( st_buf . st_mode )"", ""Condition""]], [""True"", [83184, ""True"", ""! stat ( db_path , & st_buf )"", ""Condition""]], [""True"", [83197, ""True"", ""db_path"", ""Condition""]]]","[["""", [83164, ""True"", ""db_env_create ( & db_env , 0 )"", ""ExpressionStatement""]]]","[[[""db_env"", ""open"", ""db_env"", ""db_path"", ""DB_CREATE"", ""DB_INIT_MPOOL"", ""DB_INIT_LOCK"", ""|"", ""|"", ""0666""]], [[""S_ISDIR"", ""struct stat"", ""st_mode""]], [[""!"", ""stat"", ""db_path"", ""&"", ""st_buf""]], [[""db_path""]], [[""db_env_create"", ""&"", ""db_env"", ""0""]]]",[],"[""\""FATAL: %s: Failed to open database environment in '%s'\\n\""""]"
"fprintf ( stderr , ""ERROR: %s: CORRUPTED DATABASE (%s)\n"" , program_name , details )",121:12:3612:3690,/data/download/squid/squid-3.5.25/helpers/external_acl/session/ext_session_acl.cc,"[[""True"", [83343, ""True"", ""data . size != sizeof ( timestamp )"", ""Condition""]], [""True"", [83355, ""True"", ""db -> get ( db , NULL , & key , & data , 0 ) == 0"", ""Condition""]]]","[["""", [83351, ""True"", ""time_t timestamp ;"", ""IdentifierDeclStatement""]], ["""", [83378, ""True"", ""key . size = len"", ""ExpressionStatement""]]]","[[[""DBT"", ""size"", ""!=""]], [[""db"", ""get"", ""db"", ""NULL"", ""&"", ""key"", ""&"", ""data"", ""0"", ""0"", ""==""]], [[""time_t""]], [[""DBT"", ""size"", ""size_t"", ""=""]]]","[[[""const char *""], ""const char *""]]","[""\""ERROR: %s: CORRUPTED DATABASE (%s)\\n\""""]"
"fprintf ( stderr , ""\t-a\t\t\tActive mode requiring LOGIN argument to start a session\n"" )",158:4:4823:4905,/data/download/squid/squid-3.5.25/helpers/external_acl/session/ext_session_acl.cc,[],"[["""", [83611, ""True"", ""fprintf ( stderr , \""\\t-b dbpath\\t\\tPath where persistent session database will be kept\\n\"" )"", ""ExpressionStatement""]], ["""", [83620, ""True"", ""fprintf ( stderr , \""\\t-T sessiontimeout\\tFixed timeout after which sessions will be forgotten (regardless of user activity)\\n\"" )"", ""ExpressionStatement""]], ["""", [83629, ""True"", ""fprintf ( stderr , \""\\t-t sessiontimeout\\tIdle timeout after which sessions will be forgotten (user activity will reset)\\n\"" )"", ""ExpressionStatement""]], ["""", [83638, ""True"", ""fprintf ( stderr , \""Usage: %s [-t|-T session_timeout] [-b dbpath] [-a]\\n\"" , program_name )"", ""ExpressionStatement""]]]","[[[""fprintf"", ""stderr"", ""\""\\t-b dbpath\\t\\tPath where persistent session database will be kept\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-T sessiontimeout\\tFixed timeout after which sessions will be forgotten (regardless of user activity)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-t sessiontimeout\\tIdle timeout after which sessions will be forgotten (user activity will reset)\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: %s [-t|-T session_timeout] [-b dbpath] [-a]\\n\"""", ""program_name""]]]",[],"[""\""\\t-a\\t\\t\\tActive mode requiring LOGIN argument to start a session\\n\""""]"
"fprintf ( stderr , ""\t-b dbpath\t\tPath where persistent session database will be kept\n"" )",157:4:4733:4817,/data/download/squid/squid-3.5.25/helpers/external_acl/session/ext_session_acl.cc,[],"[["""", [83620, ""True"", ""fprintf ( stderr , \""\\t-T sessiontimeout\\tFixed timeout after which sessions will be forgotten (regardless of user activity)\\n\"" )"", ""ExpressionStatement""]], ["""", [83629, ""True"", ""fprintf ( stderr , \""\\t-t sessiontimeout\\tIdle timeout after which sessions will be forgotten (user activity will reset)\\n\"" )"", ""ExpressionStatement""]], ["""", [83638, ""True"", ""fprintf ( stderr , \""Usage: %s [-t|-T session_timeout] [-b dbpath] [-a]\\n\"" , program_name )"", ""ExpressionStatement""]], ["""", [83649, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""fprintf"", ""stderr"", ""\""\\t-T sessiontimeout\\tFixed timeout after which sessions will be forgotten (regardless of user activity)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-t sessiontimeout\\tIdle timeout after which sessions will be forgotten (user activity will reset)\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: %s [-t|-T session_timeout] [-b dbpath] [-a]\\n\"""", ""program_name""]], [[""ENTRY""]]]",[],"[""\""\\t-b dbpath\\t\\tPath where persistent session database will be kept\\n\""""]"
"fprintf ( stderr , ""\t-T sessiontimeout\tFixed timeout after which sessions will be forgotten (regardless of user activity)\n"" )",156:4:4605:4727,/data/download/squid/squid-3.5.25/helpers/external_acl/session/ext_session_acl.cc,[],"[["""", [83629, ""True"", ""fprintf ( stderr , \""\\t-t sessiontimeout\\tIdle timeout after which sessions will be forgotten (user activity will reset)\\n\"" )"", ""ExpressionStatement""]], ["""", [83638, ""True"", ""fprintf ( stderr , \""Usage: %s [-t|-T session_timeout] [-b dbpath] [-a]\\n\"" , program_name )"", ""ExpressionStatement""]], ["""", [83649, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""fprintf"", ""stderr"", ""\""\\t-t sessiontimeout\\tIdle timeout after which sessions will be forgotten (user activity will reset)\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: %s [-t|-T session_timeout] [-b dbpath] [-a]\\n\"""", ""program_name""]], [[""ENTRY""]]]",[],"[""\""\\t-T sessiontimeout\\tFixed timeout after which sessions will be forgotten (regardless of user activity)\\n\""""]"
"fprintf ( stderr , ""\t-t sessiontimeout\tIdle timeout after which sessions will be forgotten (user activity will reset)\n"" )",155:4:4481:4599,/data/download/squid/squid-3.5.25/helpers/external_acl/session/ext_session_acl.cc,[],"[["""", [83638, ""True"", ""fprintf ( stderr , \""Usage: %s [-t|-T session_timeout] [-b dbpath] [-a]\\n\"" , program_name )"", ""ExpressionStatement""]], ["""", [83649, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""fprintf"", ""stderr"", ""\""Usage: %s [-t|-T session_timeout] [-b dbpath] [-a]\\n\"""", ""program_name""]], [[""ENTRY""]]]",[],"[""\""\\t-t sessiontimeout\\tIdle timeout after which sessions will be forgotten (user activity will reset)\\n\""""]"
"fprintf ( stderr , ""Usage: %s [-t|-T session_timeout] [-b dbpath] [-a]\n"" , program_name )",154:4:4390:4475,/data/download/squid/squid-3.5.25/helpers/external_acl/session/ext_session_acl.cc,[],"[["""", [83649, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",[],"[""\""Usage: %s [-t|-T session_timeout] [-b dbpath] [-a]\\n\""""]"
"fprintf ( stderr , ""FATAL: %s is concurrent and requires the concurrency option to be specified.\n"" , program_name )",198:12:5865:5976,/data/download/squid/squid-3.5.25/helpers/external_acl/session/ext_session_acl.cc,"[[""True"", [83916, ""True"", ""detail == NULL"", ""Condition""]], [""True"", [83955, ""True"", ""fgets ( request , HELPER_INPUT_BUFFER , stdin )"", ""Condition""]]]","[["""", [83920, ""True"", ""char * detail = strtok ( NULL , \""\\n\"" ) ;"", ""IdentifierDeclStatement""]], ["""", [83934, ""True"", ""const char * channel_id = strtok ( request , \"" \"" ) ;"", ""IdentifierDeclStatement""]], ["""", [83948, ""True"", ""int action = 0 ;"", ""IdentifierDeclStatement""]]]","[[[""char *"", ""NULL"", ""==""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER"", ""stdin""]], [[""char *"", ""char *"", ""strtok"", ""NULL"", ""\""\\n\"""", ""=""]], [[""const char *"", ""const char *"", ""strtok"", ""char [ HELPER_INPUT_BUFFER ]"", ""\"" \"""", ""=""]], [[""int"", ""int"", ""0"", ""=""]]]","[[[""program_name"", ""char * *"", ""0"", ""=""], ""program_name""]]","[""\""FATAL: %s is concurrent and requires the concurrency option to be specified.\\n\""""]"
"vfprintf ( logfile , format , args )",106:4:3161:3193,/data/download/squid/squid-3.5.25/helpers/external_acl/time_quota/ext_time_quota_acl.cc,[],"[["""", [84193, ""True"", """", ""ExpressionStatement""]], ["""", [84194, ""True"", "")"", ""Statement""]], ["""", [84195, ""True"", ""level"", ""Statement""]], ["""", [84196, ""True"", "","", ""Statement""]]]","[[[]], [[]], [[]], [[]]]","[[[""const char *""], ""const char *""], [[""va_list""], ""va_list""]]",[]
"fprintf ( stderr , ""ERROR: missing 'period' field on line %u of '%s'.\n"" , lineCount , filename )",291:20:8153:8244,/data/download/squid/squid-3.5.25/helpers/external_acl/time_quota/ext_time_quota_acl.cc,"[[""True"", [85237, ""True"", ""( period = strtok ( NULL , \""/\"" ) ) == NULL"", ""Condition""]], [""False"", [85266, ""True"", ""( budget = strtok ( NULL , \""/\"" ) ) == NULL"", ""Condition""]], [""True"", [85279, ""True"", ""( username = strtok ( line , \""\\t \"" ) ) != NULL"", ""Condition""]], [""True"", [85327, ""True"", ""line [ 0 ] == '#'"", ""Condition""]]]","[["""", [85292, ""True"", ""log_debug ( \""read config line %u: \\\""%s\\\"".\\n\"" , lineCount , line )"", ""ExpressionStatement""]]]","[[[""period"", ""strtok"", ""NULL"", ""\""/\"""", ""="", ""NULL"", ""==""]], [[""budget"", ""strtok"", ""NULL"", ""\""/\"""", ""="", ""NULL"", ""==""]], [[""username"", ""strtok"", ""char [ TQ_BUFFERSIZE ]"", ""\""\\t \"""", ""="", ""NULL"", ""!=""]], [[""char [ TQ_BUFFERSIZE ]"", ""0"", ""'#'"", ""==""]], [[""log_debug"", ""\""read config line %u: \\\""%s\\\"".\\n\"""", ""unsigned int"", ""char [ TQ_BUFFERSIZE ]""]]]","[[[""const char *""], ""const char *""], [[""unsigned int"", ""unsigned int"", ""0"", ""=""], ""unsigned int""]]","[""\""ERROR: missing 'period' field on line %u of '%s'.\\n\""""]"
"fprintf ( stderr , ""ERROR: missing 'budget' field on line %u of '%s'.\n"" , lineCount , filename )",287:20:7932:8023,/data/download/squid/squid-3.5.25/helpers/external_acl/time_quota/ext_time_quota_acl.cc,"[[""True"", [85266, ""True"", ""( budget = strtok ( NULL , \""/\"" ) ) == NULL"", ""Condition""]], [""True"", [85279, ""True"", ""( username = strtok ( line , \""\\t \"" ) ) != NULL"", ""Condition""]], [""True"", [85327, ""True"", ""line [ 0 ] == '#'"", ""Condition""]], [""True"", [85337, ""True"", ""fgets ( line , sizeof ( line ) , FH )"", ""Condition""]]]","[["""", [85292, ""True"", ""log_debug ( \""read config line %u: \\\""%s\\\"".\\n\"" , lineCount , line )"", ""ExpressionStatement""]], ["""", [85305, ""True"", ""* cp = '\\0'"", ""ExpressionStatement""]]]","[[[""budget"", ""strtok"", ""NULL"", ""\""/\"""", ""="", ""NULL"", ""==""]], [[""username"", ""strtok"", ""char [ TQ_BUFFERSIZE ]"", ""\""\\t \"""", ""="", ""NULL"", ""!=""]], [[""char [ TQ_BUFFERSIZE ]"", ""0"", ""'#'"", ""==""]], [[""fgets"", ""char [ TQ_BUFFERSIZE ]"", ""FILE *""]], [[""log_debug"", ""\""read config line %u: \\\""%s\\\"".\\n\"""", ""unsigned int"", ""char [ TQ_BUFFERSIZE ]""]], [[""*"", ""char *"", ""'\\0'"", ""=""]]]","[[[""const char *""], ""const char *""], [[""unsigned int"", ""unsigned int"", ""0"", ""=""], ""unsigned int""]]","[""\""ERROR: missing 'budget' field on line %u of '%s'.\\n\""""]"
"fprintf ( stderr , ""configfile is a file containing time quota definitions.\n"" )",407:4:12884:12960,/data/download/squid/squid-3.5.25/helpers/external_acl/time_quota/ext_time_quota_acl.cc,[],"[["""", [85902, ""True"", ""fprintf ( stderr , \""\\t-h            show show command line help.\\n\"" )"", ""ExpressionStatement""]], ["""", [85911, ""True"", ""fprintf ( stderr , \""\\t-p pauselen   length in seconds to describe a pause between 2 requests.\\n\"" )"", ""ExpressionStatement""]], ["""", [85920, ""True"", """", ""ExpressionStatement""]], ["""", [85921, ""True"", "")"", ""Statement""]]]","[[[""fprintf"", ""stderr"", ""\""\\t-h            show show command line help.\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-p pauselen   length in seconds to describe a pause between 2 requests.\\n\""""]], [[]], [[]]]",[],"[""\""configfile is a file containing time quota definitions.\\n\""""]"
"fprintf ( stderr , ""\t-h            show show command line help.\n"" )",406:4:12814:12878,/data/download/squid/squid-3.5.25/helpers/external_acl/time_quota/ext_time_quota_acl.cc,[],"[["""", [85911, ""True"", ""fprintf ( stderr , \""\\t-p pauselen   length in seconds to describe a pause between 2 requests.\\n\"" )"", ""ExpressionStatement""]], ["""", [85920, ""True"", """", ""ExpressionStatement""]], ["""", [85921, ""True"", "")"", ""Statement""]], ["""", [85922, ""True"", ""\"" will be used.\\n\"""", ""Statement""]]]","[[[""fprintf"", ""stderr"", ""\""\\t-p pauselen   length in seconds to describe a pause between 2 requests.\\n\""""]], [[]], [[]], [[]]]",[],"[""\""\\t-h            show show command line help.\\n\""""]"
"fprintf ( stderr , ""\t-p pauselen   length in seconds to describe a pause between 2 requests.\n"" )",405:4:12715:12808,/data/download/squid/squid-3.5.25/helpers/external_acl/time_quota/ext_time_quota_acl.cc,[],"[["""", [85920, ""True"", """", ""ExpressionStatement""]], ["""", [85921, ""True"", "")"", ""Statement""]], ["""", [85922, ""True"", ""\"" will be used.\\n\"""", ""Statement""]], ["""", [85923, ""True"", ""DEFAULT_QUOTA_DB"", ""Statement""]]]","[[[]], [[]], [[]], [[]]]",[],"[""\""\\t-p pauselen   length in seconds to describe a pause between 2 requests.\\n\""""]"
"fprintf ( stderr , ""\t-b dbpath     Path where persistent session database will be kept\n"" )",403:4:12518:12605,/data/download/squid/squid-3.5.25/helpers/external_acl/time_quota/ext_time_quota_acl.cc,[],"[["""", [85938, ""True"", ""fprintf ( stderr , \""\\t-l logfile    log messages to logfile\\n\"" )"", ""ExpressionStatement""]], ["""", [85947, ""True"", ""fprintf ( stderr , \""\\t-d            enable debugging output to logfile\\n\"" )"", ""ExpressionStatement""]], ["""", [85956, ""True"", ""fprintf ( stderr , \""Usage: %s [-d] [-l logfile] [-b dbpath] [-p pauselen] [-h] configfile\\n\"" , program_name )"", ""ExpressionStatement""]], ["""", [85967, ""True"", ""log_error ( \""Wrong usage. Please reconfigure in squid.conf.\\n\"" )"", ""ExpressionStatement""]]]","[[[""fprintf"", ""stderr"", ""\""\\t-l logfile    log messages to logfile\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-d            enable debugging output to logfile\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: %s [-d] [-l logfile] [-b dbpath] [-p pauselen] [-h] configfile\\n\"""", ""program_name""]], [[""log_error"", ""\""Wrong usage. Please reconfigure in squid.conf.\\n\""""]]]",[],"[""\""\\t-b dbpath     Path where persistent session database will be kept\\n\""""]"
"fprintf ( stderr , ""\t-l logfile    log messages to logfile\n"" )",402:4:12453:12512,/data/download/squid/squid-3.5.25/helpers/external_acl/time_quota/ext_time_quota_acl.cc,[],"[["""", [85947, ""True"", ""fprintf ( stderr , \""\\t-d            enable debugging output to logfile\\n\"" )"", ""ExpressionStatement""]], ["""", [85956, ""True"", ""fprintf ( stderr , \""Usage: %s [-d] [-l logfile] [-b dbpath] [-p pauselen] [-h] configfile\\n\"" , program_name )"", ""ExpressionStatement""]], ["""", [85967, ""True"", ""log_error ( \""Wrong usage. Please reconfigure in squid.conf.\\n\"" )"", ""ExpressionStatement""]], ["""", [85974, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""fprintf"", ""stderr"", ""\""\\t-d            enable debugging output to logfile\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: %s [-d] [-l logfile] [-b dbpath] [-p pauselen] [-h] configfile\\n\"""", ""program_name""]], [[""log_error"", ""\""Wrong usage. Please reconfigure in squid.conf.\\n\""""]], [[""ENTRY""]]]",[],"[""\""\\t-l logfile    log messages to logfile\\n\""""]"
"fprintf ( stderr , ""\t-d            enable debugging output to logfile\n"" )",401:4:12377:12447,/data/download/squid/squid-3.5.25/helpers/external_acl/time_quota/ext_time_quota_acl.cc,[],"[["""", [85956, ""True"", ""fprintf ( stderr , \""Usage: %s [-d] [-l logfile] [-b dbpath] [-p pauselen] [-h] configfile\\n\"" , program_name )"", ""ExpressionStatement""]], ["""", [85967, ""True"", ""log_error ( \""Wrong usage. Please reconfigure in squid.conf.\\n\"" )"", ""ExpressionStatement""]], ["""", [85974, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""fprintf"", ""stderr"", ""\""Usage: %s [-d] [-l logfile] [-b dbpath] [-p pauselen] [-h] configfile\\n\"""", ""program_name""]], [[""log_error"", ""\""Wrong usage. Please reconfigure in squid.conf.\\n\""""]], [[""ENTRY""]]]",[],"[""\""\\t-d            enable debugging output to logfile\\n\""""]"
"fprintf ( stderr , ""Usage: %s [-d] [-l logfile] [-b dbpath] [-p pauselen] [-h] configfile\n"" , program_name )",400:4:12267:12371,/data/download/squid/squid-3.5.25/helpers/external_acl/time_quota/ext_time_quota_acl.cc,[],"[["""", [85967, ""True"", ""log_error ( \""Wrong usage. Please reconfigure in squid.conf.\\n\"" )"", ""ExpressionStatement""]], ["""", [85974, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""log_error"", ""\""Wrong usage. Please reconfigure in squid.conf.\\n\""""]], [[""ENTRY""]]]",[],"[""\""Usage: %s [-d] [-l logfile] [-b dbpath] [-p pauselen] [-h] configfile\\n\""""]"
"fprintf ( stderr , ""ERROR: User does not exist '%s'\n"" , username )",94:8:2853:2915,/data/download/squid/squid-3.5.25/helpers/external_acl/unix_group/check_group.cc,"[[""True"", [86294, ""True"", ""( p = getpwnam ( username ) ) == NULL"", ""Condition""]]]","[["""", [86305, ""True"", ""struct group * g ;"", ""IdentifierDeclStatement""]], ["""", [86309, ""True"", ""struct passwd * p ;"", ""IdentifierDeclStatement""]], ["""", [86236, ""True"", ""char * groupname"", ""Parameter""]]]","[[[""p"", ""getpwnam"", ""char *"", ""="", ""NULL"", ""==""]], [[""struct group *""]], [[""struct passwd *""]], [[""char *""]]]","[[[""char *""], ""char *""]]","[""\""ERROR: User does not exist '%s'\\n\""""]"
"fprintf ( stderr , ""ERROR: Group does not exist '%s'\n"" , groupname )",117:8:3410:3474,/data/download/squid/squid-3.5.25/helpers/external_acl/unix_group/check_group.cc,"[[""True"", [86389, ""True"", ""( g = getgrnam ( groupname ) ) == NULL"", ""Condition""]]]","[["""", [86400, ""True"", ""struct group * g ;"", ""IdentifierDeclStatement""]], ["""", [86331, ""True"", ""char * groupname"", ""Parameter""]], ["""", [86334, ""True"", ""char * username"", ""Parameter""]]]","[[[""g"", ""getgrnam"", ""char *"", ""="", ""NULL"", ""==""]], [[""struct group *""]], [[""char *""]], [[""char *""]]]","[[[""char *""], ""char *""]]","[""\""ERROR: Group does not exist '%s'\\n\""""]"
"fprintf ( stderr , ""-s\t\t\tStrip NT domain from usernames\n"" )",141:4:4093:4161,/data/download/squid/squid-3.5.25/helpers/external_acl/unix_group/check_group.cc,[],"[["""", [86436, ""True"", ""fprintf ( stderr , \""-p\\t\\t\\tVerify primary user group as well\\n\"" )"", ""ExpressionStatement""]], ["""", [86445, ""True"", ""fprintf ( stderr , \""\\t\\t\\tbe allowed to authenticate.\\n\"" )"", ""ExpressionStatement""]], ["""", [86454, ""True"", ""fprintf ( stderr , \""\\t\\t\\tThe group name or id that the user must belong in order to\\n\"" )"", ""ExpressionStatement""]], ["""", [86463, ""True"", ""fprintf ( stderr , \""-g group\\n\"" )"", ""ExpressionStatement""]]]","[[[""fprintf"", ""stderr"", ""\""-p\\t\\t\\tVerify primary user group as well\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t\\t\\tbe allowed to authenticate.\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t\\t\\tThe group name or id that the user must belong in order to\\n\""""]], [[""fprintf"", ""stderr"", ""\""-g group\\n\""""]]]",[],"[""\""-s\\t\\t\\tStrip NT domain from usernames\\n\""""]"
"fprintf ( stderr , ""-p\t\t\tVerify primary user group as well\n"" )",139:4:4016:4087,/data/download/squid/squid-3.5.25/helpers/external_acl/unix_group/check_group.cc,[],"[["""", [86445, ""True"", ""fprintf ( stderr , \""\\t\\t\\tbe allowed to authenticate.\\n\"" )"", ""ExpressionStatement""]], ["""", [86454, ""True"", ""fprintf ( stderr , \""\\t\\t\\tThe group name or id that the user must belong in order to\\n\"" )"", ""ExpressionStatement""]], ["""", [86463, ""True"", ""fprintf ( stderr , \""-g group\\n\"" )"", ""ExpressionStatement""]], ["""", [86472, ""True"", ""fprintf ( stderr , \""Usage: %s -g group1 [-g group2 ...] [-p] [-s]\\n\\n\"" , program )"", ""ExpressionStatement""]]]","[[[""fprintf"", ""stderr"", ""\""\\t\\t\\tbe allowed to authenticate.\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t\\t\\tThe group name or id that the user must belong in order to\\n\""""]], [[""fprintf"", ""stderr"", ""\""-g group\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: %s -g group1 [-g group2 ...] [-p] [-s]\\n\\n\"""", ""char *""]]]",[],"[""\""-p\\t\\t\\tVerify primary user group as well\\n\""""]"
"fprintf ( stderr , ""\t\t\tbe allowed to authenticate.\n"" )",137:4:3947:4010,/data/download/squid/squid-3.5.25/helpers/external_acl/unix_group/check_group.cc,[],"[["""", [86454, ""True"", ""fprintf ( stderr , \""\\t\\t\\tThe group name or id that the user must belong in order to\\n\"" )"", ""ExpressionStatement""]], ["""", [86463, ""True"", ""fprintf ( stderr , \""-g group\\n\"" )"", ""ExpressionStatement""]], ["""", [86472, ""True"", ""fprintf ( stderr , \""Usage: %s -g group1 [-g group2 ...] [-p] [-s]\\n\\n\"" , program )"", ""ExpressionStatement""]], ["""", [86422, ""True"", ""char * program"", ""Parameter""]]]","[[[""fprintf"", ""stderr"", ""\""\\t\\t\\tThe group name or id that the user must belong in order to\\n\""""]], [[""fprintf"", ""stderr"", ""\""-g group\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: %s -g group1 [-g group2 ...] [-p] [-s]\\n\\n\"""", ""char *""]], [[""char *""]]]",[],"[""\""\\t\\t\\tbe allowed to authenticate.\\n\""""]"
"fprintf ( stderr , ""\t\t\tThe group name or id that the user must belong in order to\n"" )",135:4:3847:3941,/data/download/squid/squid-3.5.25/helpers/external_acl/unix_group/check_group.cc,[],"[["""", [86463, ""True"", ""fprintf ( stderr , \""-g group\\n\"" )"", ""ExpressionStatement""]], ["""", [86472, ""True"", ""fprintf ( stderr , \""Usage: %s -g group1 [-g group2 ...] [-p] [-s]\\n\\n\"" , program )"", ""ExpressionStatement""]], ["""", [86422, ""True"", ""char * program"", ""Parameter""]], ["""", [86483, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""fprintf"", ""stderr"", ""\""-g group\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: %s -g group1 [-g group2 ...] [-p] [-s]\\n\\n\"""", ""char *""]], [[""char *""]], [[""ENTRY""]]]",[],"[""\""\\t\\t\\tThe group name or id that the user must belong in order to\\n\""""]"
"fprintf ( stderr , ""-g group\n"" )",134:4:3812:3841,/data/download/squid/squid-3.5.25/helpers/external_acl/unix_group/check_group.cc,[],"[["""", [86472, ""True"", ""fprintf ( stderr , \""Usage: %s -g group1 [-g group2 ...] [-p] [-s]\\n\\n\"" , program )"", ""ExpressionStatement""]], ["""", [86422, ""True"", ""char * program"", ""Parameter""]], ["""", [86483, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""fprintf"", ""stderr"", ""\""Usage: %s -g group1 [-g group2 ...] [-p] [-s]\\n\\n\"""", ""char *""]], [[""char *""]], [[""ENTRY""]]]",[],"[""\""-g group\\n\""""]"
"fprintf ( stderr , ""Usage: %s -g group1 [-g group2 ...] [-p] [-s]\n\n"" , program )",132:4:3717:3806,/data/download/squid/squid-3.5.25/helpers/external_acl/unix_group/check_group.cc,[],"[["""", [86422, ""True"", ""char * program"", ""Parameter""]], ["""", [86483, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""char *""]], [[""ENTRY""]]]","[[[""char *""], ""char *""]]","[""\""Usage: %s -g group1 [-g group2 ...] [-p] [-s]\\n\\n\""""]"
"fprintf ( stderr , ""ERROR: %s: Too large..: %s\n"" , argv [ 0 ] , buf )",197:16:5739:5800,/data/download/squid/squid-3.5.25/helpers/external_acl/unix_group/check_group.cc,"[[""True"", [86754, ""True"", ""fgets ( buf , sizeof ( buf ) , stdin )"", ""Condition""]], [""True"", [86782, ""True"", ""( p = strchr ( buf , '\\n' ) ) == NULL"", ""Condition""]], [""True"", [86728, ""True"", ""strchr ( buf , '\\n' ) != NULL"", ""Condition""]], [""True"", [86799, ""True"", ""fgets ( buf , HELPER_INPUT_BUFFER , stdin )"", ""Condition""]], [""True"", [86754, ""True"", ""fgets ( buf , sizeof ( buf ) , stdin )"", ""Condition""]], [""True"", [86782, ""True"", ""( p = strchr ( buf , '\\n' ) ) == NULL"", ""Condition""]], [""True"", [86728, ""True"", ""strchr ( buf , '\\n' ) != NULL"", ""Condition""]]]",[],"[[[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""stdin""]], [[""p"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""NULL"", ""!=""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER"", ""stdin""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""stdin""]], [[""p"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""NULL"", ""!=""]]]","[[[""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER""], ""char [ HELPER_INPUT_BUFFER ]""], [[""char * [ ]""], ""char * [ ]""]]","[""\""ERROR: %s: Too large..: %s\\n\"""", ""0""]"
"fprintf ( stderr , ""ERROR: %s: Too large: %s\n"" , argv [ 0 ] , buf )",195:12:5609:5668,/data/download/squid/squid-3.5.25/helpers/external_acl/unix_group/check_group.cc,"[[""True"", [86782, ""True"", ""( p = strchr ( buf , '\\n' ) ) == NULL"", ""Condition""]], [""True"", [86799, ""True"", ""fgets ( buf , HELPER_INPUT_BUFFER , stdin )"", ""Condition""]]]","[["""", [86795, ""True"", ""j = 0"", ""ExpressionStatement""]], ["""", [86505, ""True"", ""SEND_ERR ( \""\"" )"", ""ExpressionStatement""]], ["""", [86513, ""True"", ""SEND_OK ( \""\"" )"", ""ExpressionStatement""]], ["""", [86677, ""True"", ""continue ;"", ""ContinueStatement""]], ["""", [86711, ""True"", ""continue ;"", ""ContinueStatement""]], ["""", [86812, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]]]","[[[""p"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER"", ""stdin""]], [[""int"", ""0"", ""=""]], [[""SEND_ERR"", ""\""\""""]], [[""SEND_OK"", ""\""\""""]], [[]], [[]], [[""exit"", ""1""]]]","[[[""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER""], ""char [ HELPER_INPUT_BUFFER ]""], [[""char * [ ]""], ""char * [ ]""]]","[""\""ERROR: %s: Too large: %s\\n\"""", ""0""]"
"fprintf ( stderr , ""FATAL: Unknown option '%s'\n"" , argv [ optind ] )",187:8:5311:5372,/data/download/squid/squid-3.5.25/helpers/external_acl/unix_group/check_group.cc,"[[""True"", [86841, ""True"", ""optind < argc"", ""Condition""]]]","[["""", [86849, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [86901, ""True"", ""break ;"", ""BreakStatement""]], ["""", [86934, ""True"", ""break ;"", ""BreakStatement""]], ["""", [86940, ""True"", ""break ;"", ""BreakStatement""]], ["""", [86946, ""True"", ""break ;"", ""BreakStatement""]], ["""", [86971, ""True"", ""setvbuf ( stdout , NULL , _IOLBF , 0 )"", ""ExpressionStatement""]], ["""", [86856, ""True"", ""usage ( argv [ 0 ] )"", ""ExpressionStatement""]], ["""", [86902, ""True"", ""++ ngroups"", ""ExpressionStatement""]], ["""", [86935, ""True"", ""check_pw = 1"", ""ExpressionStatement""]], ["""", [86941, ""True"", ""strip_dm = 1"", ""ExpressionStatement""]], ["""", [86947, ""True"", ""debug_enabled = 1"", ""ExpressionStatement""]], ["""", [86984, ""True"", ""int check_pw = 0 , ch , ngroups = 0 , i , j = 0 , strip_dm = 0 ;"", ""IdentifierDeclStatement""]]]","[[[""optind"", ""int"", ""<""]], [[""exit"", ""1""]], [[]], [[]], [[]], [[]], [[""setvbuf"", ""stdout"", ""NULL"", ""_IOLBF"", ""0""]], [[""usage"", ""char * [ ]"", ""0""]], [[""ngroups""]], [[""int"", ""1"", ""=""]], [[""int"", ""1"", ""=""]], [[""debug_enabled"", ""1"", ""=""]], [[""check_pw"", ""check_pw"", ""0"", ""="", ""ch"", ""ngroups"", ""ngroups"", ""0"", ""="", ""i"", ""j"", ""j"", ""0"", ""="", ""int"", ""int"", ""0"", ""=""]]]","[[[""char * [ ]""], ""char * [ ]""]]","[""\""FATAL: Unknown option '%s'\\n\""""]"
"fprintf ( stderr , ""Unknown option character `\\x%x'.\n"" , optopt )",177:16:5070:5132,/data/download/squid/squid-3.5.25/helpers/external_acl/unix_group/check_group.cc,"[[""False"", [86893, ""True"", ""xisprint ( optopt )"", ""Condition""]], [""case '?'"", [86952, ""True"", ""ch"", ""Condition""]], [""True"", [86954, ""True"", ""( ch = getopt ( argc , argv , \""dspg:\"" ) ) != - 1"", ""Condition""]]]","[["""", [86900, ""True"", ""case '?' :"", ""Label""]]]","[[[""xisprint"", ""optopt""]], [[""int"", ""'?'"", ""==""]], [[""ch"", ""getopt"", ""int"", ""char * [ ]"", ""\""dspg:\"""", ""="", ""-"", ""1"", ""!=""]], [[]]]",[],"[""\""Unknown option character `\\\\x%x'.\\n\""""]"
"fprintf ( stderr , ""Unknown option '-%c'.\n"" , optopt )",175:16:4981:5031,/data/download/squid/squid-3.5.25/helpers/external_acl/unix_group/check_group.cc,"[[""True"", [86893, ""True"", ""xisprint ( optopt )"", ""Condition""]], [""case '?'"", [86952, ""True"", ""ch"", ""Condition""]], [""True"", [86954, ""True"", ""( ch = getopt ( argc , argv , \""dspg:\"" ) ) != - 1"", ""Condition""]]]","[["""", [86900, ""True"", ""case '?' :"", ""Label""]]]","[[[""xisprint"", ""optopt""]], [[""int"", ""'?'"", ""==""]], [[""ch"", ""getopt"", ""int"", ""char * [ ]"", ""\""dspg:\"""", ""="", ""-"", ""1"", ""!=""]], [[]]]",[],"[""\""Unknown option '-%c'.\\n\""""]"
"fprintf ( stderr , ""WARNING: rename %s to %s failure: %s\n"" , path , to , xstrerror ( ) )",73:12:1859:1939,/data/download/squid/squid-3.5.25/helpers/log_daemon/file/log_file_daemon.cc,"[[""True"", [87119, ""True"", ""rename ( path , to ) < 0 && errno != ENOENT"", ""Condition""]], [""False"", [87176, ""True"", ""rotate_count > 0"", ""Condition""]], [""False"", [87302, ""True"", ""stat ( path , & sb ) == 0"", ""Condition""]], [""False"", [87291, ""True"", ""S_ISREG ( sb . st_mode ) == 0"", ""Condition""]], [""True"", [87302, ""True"", ""stat ( path , & sb ) == 0"", ""Condition""]]]",[],"[[[""rename"", ""const char *"", ""char [ MAXPATHLEN ]"", ""0"", ""<""]], [[""errno"", ""ENOENT"", ""!=""]], [[""int"", ""0"", "">""]], [[""stat"", ""const char *"", ""&"", ""sb"", ""0"", ""==""]], [[""S_ISREG"", ""struct stat"", ""st_mode"", ""0"", ""==""]], [[""stat"", ""const char *"", ""&"", ""sb"", ""0"", ""==""]]]","[[[""const char *""], ""const char *""], [[""char [ MAXPATHLEN ]"", ""MAXPATHLEN""], ""char [ MAXPATHLEN ]""]]","[""\""WARNING: rename %s to %s failure: %s\\n\""""]"
"fprintf ( stderr , ""WARNING: remove '%s' failure: %s\n"" , to , xstrerror ( ) )",69:12:1703:1773,/data/download/squid/squid-3.5.25/helpers/log_daemon/file/log_file_daemon.cc,"[[""True"", [87152, ""True"", ""remove ( to ) < 0"", ""Condition""]], [""True"", [87176, ""True"", ""rotate_count > 0"", ""Condition""]], [""False"", [87302, ""True"", ""stat ( path , & sb ) == 0"", ""Condition""]], [""False"", [87291, ""True"", ""S_ISREG ( sb . st_mode ) == 0"", ""Condition""]], [""True"", [87302, ""True"", ""stat ( path , & sb ) == 0"", ""Condition""]]]",[],"[[[""remove"", ""char [ MAXPATHLEN ]"", ""0"", ""<""]], [[""int"", ""0"", "">""]], [[""stat"", ""const char *"", ""&"", ""sb"", ""0"", ""==""]], [[""S_ISREG"", ""struct stat"", ""st_mode"", ""0"", ""==""]], [[""stat"", ""const char *"", ""&"", ""sb"", ""0"", ""==""]]]","[[[""char [ MAXPATHLEN ]"", ""MAXPATHLEN""], ""char [ MAXPATHLEN ]""]]","[""\""WARNING: remove '%s' failure: %s\\n\""""]"
"fprintf ( stderr , ""WARNING: rename '%s' to '%s' failure: %s\n"" , from , to , xstrerror ( ) )",62:12:1444:1528,/data/download/squid/squid-3.5.25/helpers/log_daemon/file/log_file_daemon.cc,"[[""True"", [87202, ""True"", ""rename ( from , to ) < 0 && errno != ENOENT"", ""Condition""]], [""False"", [87280, ""True"", ""i > 1"", ""Condition""]], [""False"", [87302, ""True"", ""stat ( path , & sb ) == 0"", ""Condition""]], [""False"", [87291, ""True"", ""S_ISREG ( sb . st_mode ) == 0"", ""Condition""]], [""True"", [87302, ""True"", ""stat ( path , & sb ) == 0"", ""Condition""]]]",[],"[[[""rename"", ""char [ MAXPATHLEN ]"", ""char [ MAXPATHLEN ]"", ""0"", ""<""]], [[""errno"", ""ENOENT"", ""!=""]], [[""int"", ""1"", "">""]], [[""stat"", ""const char *"", ""&"", ""sb"", ""0"", ""==""]], [[""S_ISREG"", ""struct stat"", ""st_mode"", ""0"", ""==""]], [[""stat"", ""const char *"", ""&"", ""sb"", ""0"", ""==""]]]","[[[""char [ MAXPATHLEN ]"", ""MAXPATHLEN""], ""char [ MAXPATHLEN ]""], [[""char [ MAXPATHLEN ]"", ""MAXPATHLEN""], ""char [ MAXPATHLEN ]""]]","[""\""WARNING: rename '%s' to '%s' failure: %s\\n\""""]"
"fprintf ( stderr , ""WARNING: remove '%s' failure: %s\n"" , to , xstrerror ( ) )",58:12:1288:1358,/data/download/squid/squid-3.5.25/helpers/log_daemon/file/log_file_daemon.cc,"[[""True"", [87235, ""True"", ""remove ( to ) < 0"", ""Condition""]], [""True"", [87280, ""True"", ""i > 1"", ""Condition""]], [""False"", [87302, ""True"", ""stat ( path , & sb ) == 0"", ""Condition""]], [""False"", [87291, ""True"", ""S_ISREG ( sb . st_mode ) == 0"", ""Condition""]], [""True"", [87302, ""True"", ""stat ( path , & sb ) == 0"", ""Condition""]]]",[],"[[[""remove"", ""char [ MAXPATHLEN ]"", ""0"", ""<""]], [[""int"", ""1"", "">""]], [[""stat"", ""const char *"", ""&"", ""sb"", ""0"", ""==""]], [[""S_ISREG"", ""struct stat"", ""st_mode"", ""0"", ""==""]], [[""stat"", ""const char *"", ""&"", ""sb"", ""0"", ""==""]]]","[[[""char [ MAXPATHLEN ]"", ""MAXPATHLEN""], ""char [ MAXPATHLEN ]""]]","[""\""WARNING: remove '%s' failure: %s\\n\""""]"
"fprintf ( fp , ""%s"" , buf )",171:12:4764:4786,/data/download/squid/squid-3.5.25/helpers/log_daemon/file/log_file_daemon.cc,"[[""default"", [87665, ""True"", ""buf [ 0 ]"", ""Condition""]], [""True"", [87669, ""True"", ""fgets ( buf , LOGFILE_BUF_LEN , stdin )"", ""Condition""]]]","[["""", [87404, ""True"", ""default :"", ""Label""]], ["""", [87392, ""True"", ""break ;"", ""BreakStatement""]], ["""", [87406, ""True"", ""break ;"", ""BreakStatement""]], ["""", [87415, ""True"", ""break ;"", ""BreakStatement""]], ["""", [87425, ""True"", ""break ;"", ""BreakStatement""]], ["""", [87438, ""True"", ""break ;"", ""BreakStatement""]], ["""", [87440, ""True"", ""break ;"", ""BreakStatement""]], ["""", [87442, ""True"", ""break ;"", ""BreakStatement""]], ["""", [87495, ""True"", ""break ;"", ""BreakStatement""]], ["""", [87680, ""True"", ""dup2 ( t , 2 )"", ""ExpressionStatement""]]]","[[[""char [ LOGFILE_BUF_LEN ]"", ""0""]], [[""fgets"", ""char [ LOGFILE_BUF_LEN ]"", ""LOGFILE_BUF_LEN"", ""stdin""]], [[""default""]], [[]], [[]], [[]], [[]], [[]], [[]], [[]], [[]], [[""dup2"", ""int"", ""2""]]]","[[[""char [ LOGFILE_BUF_LEN ]"", ""LOGFILE_BUF_LEN""], ""char [ LOGFILE_BUF_LEN ]""], [[""FILE *"", ""fopen"", ""char * [ ]"", ""1"", ""\""a\"""", ""=""], ""FILE *""], [[""FILE *"", ""fopen"", ""char * [ ]"", ""1"", ""\""a\"""", ""=""], ""FILE *""], [[""FILE *"", ""fopen"", ""char * [ ]"", ""1"", ""\""a\"""", ""=""], ""FILE *""]]","[""\""%s\""""]"
"fprintf ( fp , ""%s"" , buf + 1 )",135:24:3789:3815,/data/download/squid/squid-3.5.25/helpers/log_daemon/file/log_file_daemon.cc,"[[""False"", [87614, ""True"", ""err == EFBIG || err == ENOSPC"", ""Condition""]], [""True"", [87622, ""True"", ""err < 0"", ""Condition""]], [""True"", [87658, ""True"", ""buf [ 1 ] != '\\0'"", ""Condition""]], [""case 'L'"", [87665, ""True"", ""buf [ 0 ]"", ""Condition""]]]","[["""", [87545, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [87552, ""True"", ""perror ( \""fopen\"" )"", ""ExpressionStatement""]], ["""", [87563, ""True"", ""fp = fopen ( argv [ 1 ] , \""a\"" )"", ""ExpressionStatement""]], ["""", [87576, ""True"", ""rotate ( argv [ 1 ] , rotate_count )"", ""ExpressionStatement""]], ["""", [87563, ""True"", ""fp = fopen ( argv [ 1 ] , \""a\"" )"", ""ExpressionStatement""]], ["""", [87587, ""True"", ""fclose ( fp )"", ""ExpressionStatement""]]]","[[[""int"", ""EFBIG"", ""=="", ""int"", ""ENOSPC"", ""=="", ""||""]], [[""int"", ""0"", ""<""]], [[""char [ LOGFILE_BUF_LEN ]"", ""1"", ""'\\0'"", ""!=""]], [[""char [ LOGFILE_BUF_LEN ]"", ""0"", ""'L'"", ""==""]], [[""exit"", ""1""]], [[""perror"", ""\""fopen\""""]], [[""FILE *"", ""fopen"", ""char * [ ]"", ""1"", ""\""a\"""", ""=""]], [[""rotate"", ""char * [ ]"", ""1"", ""int""]], [[""FILE *"", ""fopen"", ""char * [ ]"", ""1"", ""\""a\"""", ""=""]], [[""fclose"", ""FILE *""]]]","[[[""char [ LOGFILE_BUF_LEN ]"", ""LOGFILE_BUF_LEN""], ""char [ LOGFILE_BUF_LEN ]""], [[""FILE *"", ""fopen"", ""char * [ ]"", ""1"", ""\""a\"""", ""=""], ""FILE *""]]","[""\""%s\"""", ""1""]"
"fprintf ( stderr , ""WARNING: %s writing %s. Attempting to recover via a log rotation.\n"" , xstrerr ( err ) , argv [ 1 ] )",127:24:3365:3472,/data/download/squid/squid-3.5.25/helpers/log_daemon/file/log_file_daemon.cc,"[[""True"", [87614, ""True"", ""err == EFBIG || err == ENOSPC"", ""Condition""]], [""True"", [87622, ""True"", ""err < 0"", ""Condition""]], [""True"", [87658, ""True"", ""buf [ 1 ] != '\\0'"", ""Condition""]], [""case 'L'"", [87665, ""True"", ""buf [ 0 ]"", ""Condition""]]]","[["""", [87626, ""True"", ""clearerr ( fp )"", ""ExpressionStatement""]], ["""", [87633, ""True"", ""int err = ferror ( fp ) ;"", ""IdentifierDeclStatement""]]]","[[[""int"", ""EFBIG"", ""=="", ""int"", ""ENOSPC"", ""=="", ""||""]], [[""int"", ""0"", ""<""]], [[""char [ LOGFILE_BUF_LEN ]"", ""1"", ""'\\0'"", ""!=""]], [[""char [ LOGFILE_BUF_LEN ]"", ""0"", ""'L'"", ""==""]], [[""clearerr"", ""FILE *""]], [[""int"", ""int"", ""ferror"", ""FILE *"", ""=""]]]","[[[""int"", ""int"", ""ferror"", ""FILE *"", ""=""], ""int""], [[""char * [ ]""], ""char * [ ]""]]","[""\""WARNING: %s writing %s. Attempting to recover via a log rotation.\\n\"""", ""1""]"
"fprintf ( fp , ""%s"" , buf + 1 )",118:16:2846:2872,/data/download/squid/squid-3.5.25/helpers/log_daemon/file/log_file_daemon.cc,"[[""True"", [87658, ""True"", ""buf [ 1 ] != '\\0'"", ""Condition""]], [""case 'L'"", [87665, ""True"", ""buf [ 0 ]"", ""Condition""]], [""True"", [87669, ""True"", ""fgets ( buf , LOGFILE_BUF_LEN , stdin )"", ""Condition""]]]","[["""", [87664, ""True"", ""case 'L' :"", ""Label""]]]","[[[""char [ LOGFILE_BUF_LEN ]"", ""1"", ""'\\0'"", ""!=""]], [[""char [ LOGFILE_BUF_LEN ]"", ""0"", ""'L'"", ""==""]], [[""fgets"", ""char [ LOGFILE_BUF_LEN ]"", ""LOGFILE_BUF_LEN"", ""stdin""]], [[]]]","[[[""char [ LOGFILE_BUF_LEN ]"", ""LOGFILE_BUF_LEN""], ""char [ LOGFILE_BUF_LEN ]""], [[""FILE *"", ""fopen"", ""char * [ ]"", ""1"", ""\""a\"""", ""=""], ""FILE *""], [[""FILE *"", ""fopen"", ""char * [ ]"", ""1"", ""\""a\"""", ""=""], ""FILE *""], [[""FILE *"", ""fopen"", ""char * [ ]"", ""1"", ""\""a\"""", ""=""], ""FILE *""]]","[""\""%s\"""", ""1""]"
"fprintf ( stderr , ""ERROR: unknown option: -%c. Exiting\n"" , opt )",120:12:3423:3484,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/SSPI/negotiate_sspi_auth.cc,"[[""case 'h'"", [87950, ""True"", ""opt"", ""Condition""]], [""True"", [87952, ""True"", ""- 1 != ( opt = getopt ( argc , argv , \""hdv\"" ) )"", ""Condition""]]]","[["""", [87914, ""True"", ""default :"", ""Label""]], ["""", [87916, ""True"", ""opt = optopt"", ""ExpressionStatement""]], ["""", [87920, ""True"", ""case '?' :"", ""Label""]], ["""", [87921, ""True"", ""exit ( 0 )"", ""ExpressionStatement""]], ["""", [87894, ""True"", ""had_error = 1"", ""ExpressionStatement""]], ["""", [87934, ""True"", ""break ;"", ""BreakStatement""]], ["""", [87944, ""True"", ""break ;"", ""BreakStatement""]], ["""", [87969, ""True"", ""opterr = 0"", ""ExpressionStatement""]]]","[[[""int"", ""'h'"", ""==""]], [[""-"", ""1"", ""opt"", ""getopt"", ""int"", ""char * [ ]"", ""\""hdv\"""", ""="", ""!=""]], [[""default""]], [[""int"", ""optopt"", ""=""]], [[]], [[""exit"", ""0""]], [[""int"", ""1"", ""=""]], [[]], [[]], [[""opterr"", ""0"", ""=""]]]","[[[""-"", ""1"", ""int"", ""getopt"", ""int"", ""char * [ ]"", ""\""hdv\"""", ""="", ""!=""], ""int""], [[""int"", ""optopt"", ""=""], ""int""]]","[""\""ERROR: unknown option: -%c. Exiting\\n\""""]"
"fprintf ( stderr , ""Illegal request received: '%s'\n"" , buf )",269:8:9173:9229,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/SSPI/negotiate_sspi_auth.cc,"[[""False"", [88389, ""True"", ""memcmp ( buf , \""KK \"" , 3 ) == 0"", ""Condition""]], [""False"", [88646, ""True"", ""memcmp ( buf , \""YR \"" , 3 ) == 0"", ""Condition""]], [""True"", [88783, ""True"", ""oversized"", ""Condition""]], [""True"", [88785, ""True"", ""c"", ""Condition""]]]","[["""", [88025, ""True"", ""SEND ( \""BH illegal request received\"" )"", ""ExpressionStatement""]], ["""", [88661, ""True"", ""debug ( \""Got '%s' from Squid\\n\"" , buf )"", ""ExpressionStatement""]], ["""", [88671, ""True"", """", ""ExpressionStatement""]]]","[[[""memcmp"", ""char [ HELPER_INPUT_BUFFER ]"", ""\""KK \"""", ""3"", ""0"", ""==""]], [[""memcmp"", ""char [ HELPER_INPUT_BUFFER ]"", ""\""YR \"""", ""3"", ""0"", ""==""]], [[""int""]], [[""char *""]], [[""SEND"", ""\""BH illegal request received\""""]], [[""debug"", ""\""Got '%s' from Squid\\n\"""", ""char [ HELPER_INPUT_BUFFER ]""]], [[]]]","[[[""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER""], ""char [ HELPER_INPUT_BUFFER ]""]]","[""\""Illegal request received: '%s'\\n\""""]"
"fprintf ( stderr , ""No data available.\n"" )",250:20:8474:8513,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/SSPI/negotiate_sspi_auth.cc,"[[""False"", [88153, ""True"", ""c != NULL"", ""Condition""]], [""True"", [88181, ""True"", ""Negotiate_packet_debug_enabled"", ""Condition""]], [""True"", [88198, ""True"", ""Done"", ""Condition""]], [""False"", [88311, ""True"", ""status == SSP_ERROR"", ""Condition""]]]","[["""", [88157, ""True"", ""debug ( \""sending 'AF' %s to squid with data:\\n\"" , cred )"", ""ExpressionStatement""]], ["""", [88166, ""True"", ""decodedLen = base64_decode ( decoded , sizeof ( decoded ) , c )"", ""ExpressionStatement""]]]","[[[""char *"", ""NULL"", ""!=""]], [[""Negotiate_packet_debug_enabled""]], [[""BOOL""]], [[""int"", ""SSP_ERROR"", ""==""]], [[""debug"", ""\""sending 'AF' %s to squid with data:\\n\"""", ""char [ SSP_MAX_CRED_LEN + 1 ]""]], [[""int"", ""base64_decode"", ""char [ HELPER_INPUT_BUFFER ]"", ""char *"", ""=""]]]",[],"[""\""No data available.\\n\""""]"
"fprintf ( stderr , ""No data available.\n"" )",190:24:5805:5844,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/SSPI/negotiate_sspi_auth.cc,"[[""False"", [88536, ""True"", ""c != NULL"", ""Condition""]], [""True"", [88564, ""True"", ""Negotiate_packet_debug_enabled"", ""Condition""]], [""True"", [88581, ""True"", ""Done"", ""Condition""]], [""True"", [88583, ""True"", ""status == SSP_OK"", ""Condition""]]]","[["""", [88540, ""True"", ""debug ( \""sending 'AF' %s to squid with data:\\n\"" , cred )"", ""ExpressionStatement""]], ["""", [88549, ""True"", ""decodedLen = base64_decode ( decoded , sizeof ( decoded ) , c )"", ""ExpressionStatement""]]]","[[[""char *"", ""NULL"", ""!=""]], [[""Negotiate_packet_debug_enabled""]], [[""BOOL""]], [[""int"", ""SSP_OK"", ""==""]], [[""debug"", ""\""sending 'AF' %s to squid with data:\\n\"""", ""char [ SSP_MAX_CRED_LEN + 1 ]""]], [[""int"", ""base64_decode"", ""char [ HELPER_INPUT_BUFFER ]"", ""char *"", ""=""]]]",[],"[""\""No data available.\\n\""""]"
"fprintf ( stderr , ""No newline in '%s'\n"" , buf )",156:8:4260:4304,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/SSPI/negotiate_sspi_auth.cc,"[[""False"", [88785, ""True"", ""c"", ""Condition""]], [""False"", [88808, ""True"", ""fgets ( buf , HELPER_INPUT_BUFFER , stdin )"", ""Condition""]], [""False"", [88785, ""True"", ""c"", ""Condition""]], [""False"", [88808, ""True"", ""fgets ( buf , HELPER_INPUT_BUFFER , stdin )"", ""Condition""]]]","[["""", [88787, ""True"", ""memchr ( buf , '\\n' , HELPER_INPUT_BUFFER )"", ""ExpressionStatement""]], ["""", [88798, ""True"", "">"", ""Statement""]], ["""", [88799, ""True"", ""*"", ""Statement""]]]","[[[""char *""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER"", ""stdin""]], [[""char *""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER"", ""stdin""]], [[""memchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""HELPER_INPUT_BUFFER""]], [[]], [[]]]","[[[""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER""], ""char [ HELPER_INPUT_BUFFER ]""]]","[""\""No newline in '%s'\\n\""""]"
"fprintf ( stderr , ""ERROR: Illegal request received: '%s'\n"" , buf )",151:12:4123:4186,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/SSPI/negotiate_sspi_auth.cc,"[[""True"", [88783, ""True"", ""oversized"", ""Condition""]], [""True"", [88785, ""True"", ""c"", ""Condition""]], [""False"", [88808, ""True"", ""fgets ( buf , HELPER_INPUT_BUFFER , stdin )"", ""Condition""]], [""False"", [88785, ""True"", ""c"", ""Condition""]]]","[["""", [88776, ""True"", ""SEND ( \""BH illegal request received\"" )"", ""ExpressionStatement""]], ["""", [88787, ""True"", ""memchr ( buf , '\\n' , HELPER_INPUT_BUFFER )"", ""ExpressionStatement""]]]","[[[""int""]], [[""char *""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER"", ""stdin""]], [[""char *""]], [[""SEND"", ""\""BH illegal request received\""""]], [[""memchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""HELPER_INPUT_BUFFER""]]]","[[[""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER""], ""char [ HELPER_INPUT_BUFFER ]""]]","[""\""ERROR: Illegal request received: '%s'\\n\""""]"
"fprintf ( stderr , ""FATAL: %s: can't initialize SSPI, exiting.\n"" , argv [ 0 ] )",287:8:9604:9676,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/SSPI/negotiate_sspi_auth.cc,"[[""True"", [88993, ""True"", ""LoadSecurityDll ( SSP_NTLM , NEGOTIATE_PACKAGE_NAME ) == NULL"", ""Condition""]]]","[["""", [89004, ""True"", """", ""ExpressionStatement""]], ["""", [89005, ""True"", "")"", ""Statement""]], ["""", [89006, ""True"", ""my_program_name"", ""Statement""]]]","[[[""LoadSecurityDll"", ""SSP_NTLM"", ""NEGOTIATE_PACKAGE_NAME"", ""NULL"", ""==""]], [[]], [[]], [[]]]","[[[""char * [ ]""], ""char * [ ]""]]","[""\""FATAL: %s: can't initialize SSPI, exiting.\\n\"""", ""0""]"
"fprintf ( stderr , ""%s| %s: ERROR: %s: %s\n"" , LogTime ( ) , PROGRAM , function , errmsg )",76:8:2680:2760,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/kerberos/negotiate_kerberos_auth.cc,"[[""True"", [89283, ""True"", ""code && code != KRB5_KT_END"", ""Condition""]]]","[["""", [89248, ""True"", ""debug ( ( char * ) \""%s| %s: ERROR: %s failed: %s\\n\"" , LogTime ( ) , PROGRAM , function , errmsg )"", ""ExpressionStatement""]], ["""", [89268, ""True"", ""errmsg = krb5_get_error_message ( context , code )"", ""ExpressionStatement""]], ["""", [89279, ""True"", ""const char * errmsg ;"", ""IdentifierDeclStatement""]]]","[[[""krb5_error_code""]], [[""krb5_error_code"", ""KRB5_KT_END"", ""!=""]], [[""debug"", ""\""%s| %s: ERROR: %s failed: %s\\n\"""", ""LogTime"", ""PROGRAM"", ""const char *"", ""const char *""]], [[""const char *"", ""krb5_get_error_message"", ""krb5_context"", ""krb5_error_code"", ""=""]], [[""const char *""]]]","[[[""const char *""], ""const char *""], [[""const char *"", ""krb5_get_error_message"", ""krb5_context"", ""krb5_error_code"", ""=""], ""const char *""]]","[""\""%s| %s: ERROR: %s: %s\\n\""""]"
"fprintf ( stderr , ""%s| %s: ERROR: resolving ip address with getnameinfo: %s failed\n"" , LogTime ( ) , PROGRAM , gai_strerror ( rc ) )",125:8:4333:4487,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/kerberos/negotiate_kerberos_auth.cc,"[[""True"", [89386, ""True"", ""rc != 0"", ""Condition""]], [""False"", [89489, ""True"", ""rc != 0 || hres == NULL"", ""Condition""]], [""False"", [89554, ""True"", ""rc"", ""Condition""]]]","[["""", [89363, ""True"", ""debug ( ( char * ) \""%s| %s: ERROR: resolving ip address with getnameinfo: %s failed\\n\"" , LogTime ( ) , PROGRAM , gai_strerror ( rc ) )"", ""ExpressionStatement""]], ["""", [89390, ""True"", ""rc = getnameinfo ( hres -> ai_addr , hres -> ai_addrlen , hostname , sizeof ( hostname ) , NULL , 0 , 0 )"", ""ExpressionStatement""]]]","[[[""int"", ""0"", ""!=""]], [[""int"", ""0"", ""!="", ""struct addrinfo *"", ""NULL"", ""=="", ""||""]], [[""int""]], [[""debug"", ""\""%s| %s: ERROR: resolving ip address with getnameinfo: %s failed\\n\"""", ""LogTime"", ""PROGRAM"", ""gai_strerror"", ""int""]], [[""int"", ""getnameinfo"", ""struct addrinfo *"", ""ai_addr"", ""struct addrinfo *"", ""ai_addrlen"", ""char [ 1024 ]"", ""NULL"", ""0"", ""0"", ""=""]]]","[[[""int"", ""getnameinfo"", ""struct addrinfo *"", ""ai_addr"", ""struct addrinfo *"", ""ai_addrlen"", ""char [ 1024 ]"", ""NULL"", ""0"", ""0"", ""=""], ""int""]]","[""\""%s| %s: ERROR: resolving ip address with getnameinfo: %s failed\\n\""""]"
"fprintf ( stderr , ""%s| %s: ERROR: resolving hostname with getaddrinfo: %s failed\n"" , LogTime ( ) , PROGRAM , gai_strerror ( rc ) )",109:8:3740:3892,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/kerberos/negotiate_kerberos_auth.cc,"[[""True"", [89489, ""True"", ""rc != 0 || hres == NULL"", ""Condition""]], [""False"", [89554, ""True"", ""rc"", ""Condition""]]]","[["""", [89466, ""True"", ""debug ( ( char * ) \""%s| %s: ERROR: resolving hostname with getaddrinfo: %s failed\\n\"" , LogTime ( ) , PROGRAM , gai_strerror ( rc ) )"", ""ExpressionStatement""]], ["""", [89497, ""True"", ""rc = getaddrinfo ( hostname , NULL , NULL , & hres )"", ""ExpressionStatement""]]]","[[[""int"", ""0"", ""!="", ""struct addrinfo *"", ""NULL"", ""=="", ""||""]], [[""int""]], [[""debug"", ""\""%s| %s: ERROR: resolving hostname with getaddrinfo: %s failed\\n\"""", ""LogTime"", ""PROGRAM"", ""gai_strerror"", ""int""]], [[""int"", ""getaddrinfo"", ""char [ 1024 ]"", ""NULL"", ""NULL"", ""&"", ""hres"", ""=""]]]","[[[""int"", ""getaddrinfo"", ""char [ 1024 ]"", ""NULL"", ""NULL"", ""&"", ""hres"", ""=""], ""int""]]","[""\""%s| %s: ERROR: resolving hostname with getaddrinfo: %s failed\\n\""""]"
"fprintf ( stderr , ""%s| %s: ERROR: resolving hostname '%s' failed\n"" , LogTime ( ) , PROGRAM , hostname )",101:8:3361:3473,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/kerberos/negotiate_kerberos_auth.cc,"[[""True"", [89554, ""True"", ""rc"", ""Condition""]]]","[["""", [89536, ""True"", ""debug ( ( char * ) \""%s| %s: ERROR: resolving hostname '%s' failed\\n\"" , LogTime ( ) , PROGRAM , hostname )"", ""ExpressionStatement""]], ["""", [89556, ""True"", ""rc = gethostname ( hostname , sizeof ( hostname ) - 1 )"", ""ExpressionStatement""]], ["""", [89571, ""True"", ""int rc , count ;"", ""IdentifierDeclStatement""]]]","[[[""int""]], [[""debug"", ""\""%s| %s: ERROR: resolving hostname '%s' failed\\n\"""", ""LogTime"", ""PROGRAM"", ""char [ 1024 ]""]], [[""int"", ""gethostname"", ""char [ 1024 ]"", ""1"", ""-"", ""=""]], [[""rc"", ""int""]]]","[[[""char [ 1024 ]"", ""1024""], ""char [ 1024 ]""]]","[""\""%s| %s: ERROR: resolving hostname '%s' failed\\n\""""]"
"fprintf ( stderr , ""%s| %s: INFO: User not authenticated\n"" , LogTime ( ) , PROGRAM )",184:12:6743:6840,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/kerberos/negotiate_kerberos_auth.cc,"[[""True"", [89659, ""True"", ""log"", ""Condition""]], [""False"", [89971, ""True"", ""GSS_ERROR ( major_status )"", ""Condition""]]]","[["""", [89662, ""True"", ""fprintf ( stdout , \""BH %s failed: %s\\n\"" , function , buf )"", ""ExpressionStatement""]], ["""", [89677, ""True"", ""debug ( ( char * ) \""%s| %s: ERROR: %s failed: %s\\n\"" , LogTime ( ) , PROGRAM , function , buf )"", ""ExpressionStatement""]], ["""", [89677, ""True"", ""debug ( ( char * ) \""%s| %s: ERROR: %s failed: %s\\n\"" , LogTime ( ) , PROGRAM , function , buf )"", ""ExpressionStatement""]]]","[[[""int""]], [[""GSS_ERROR"", ""OM_uint32""]], [[""fprintf"", ""stdout"", ""\""BH %s failed: %s\\n\"""", ""const char *"", ""char [ 1024 ]""]], [[""debug"", ""\""%s| %s: ERROR: %s failed: %s\\n\"""", ""LogTime"", ""PROGRAM"", ""const char *"", ""char [ 1024 ]""]], [[""debug"", ""\""%s| %s: ERROR: %s failed: %s\\n\"""", ""LogTime"", ""PROGRAM"", ""const char *"", ""char [ 1024 ]""]]]",[],"[""\""%s| %s: INFO: User not authenticated\\n\""""]"
"fprintf ( stdout , ""BH %s failed: %s\n"" , function , buf )",182:12:6660:6712,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/kerberos/negotiate_kerberos_auth.cc,"[[""True"", [89675, ""True"", ""sout"", ""Condition""]], [""False"", [89971, ""True"", ""GSS_ERROR ( major_status )"", ""Condition""]]]","[["""", [89677, ""True"", ""debug ( ( char * ) \""%s| %s: ERROR: %s failed: %s\\n\"" , LogTime ( ) , PROGRAM , function , buf )"", ""ExpressionStatement""]], ["""", [89701, ""True"", ""gss_release_buffer ( & min_stat , & status_string )"", ""ExpressionStatement""]]]","[[[""int""]], [[""GSS_ERROR"", ""OM_uint32""]], [[""debug"", ""\""%s| %s: ERROR: %s failed: %s\\n\"""", ""LogTime"", ""PROGRAM"", ""const char *"", ""char [ 1024 ]""]], [[""gss_release_buffer"", ""&"", ""min_stat"", ""&"", ""status_string""]]]","[[[""char [ 1024 ]"", ""1024""], ""char [ 1024 ]""], [[""const char *""], ""const char *""]]","[""\""BH %s failed: %s\\n\""""]"
"fprintf ( stderr , ""%s| %s: ERROR: krb5_read_keytab: %s\n"" , LogTime ( ) , PROGRAM , strerror ( retval ) )",268:16:9731:9849,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/kerberos/negotiate_kerberos_auth.cc,"[[""True"", [90283, ""True"", ""! lp -> next"", ""Condition""]], [""False"", [90379, ""True"", ""! lp"", ""Condition""]], [""False"", [90385, ""True"", ""check_k5_err ( context , \""krb5_kt_next_entry\"" , retval )"", ""Condition""]], [""False"", [90481, ""True"", ""! entry"", ""Condition""]]]","[["""", [90256, ""True"", ""debug ( ( char * ) \""%s| %s: ERROR: krb5_read_keytab failed: %s\\n\"" , LogTime ( ) , PROGRAM , strerror ( retval ) )"", ""ExpressionStatement""]], ["""", [90279, ""True"", ""retval = ENOMEM"", ""ExpressionStatement""]], ["""", [90289, ""True"", ""lp -> next = ( krb5_kt_list ) xmalloc ( sizeof ( * lp ) )"", ""ExpressionStatement""]]]","[[[""!"", ""krb5_kt_list"", ""next""]], [[""!"", ""krb5_kt_list""]], [[""check_k5_err"", ""krb5_context"", ""\""krb5_kt_next_entry\"""", ""krb5_error_code""]], [[""!"", ""krb5_keytab_entry *""]], [[""debug"", ""\""%s| %s: ERROR: krb5_read_keytab failed: %s\\n\"""", ""LogTime"", ""PROGRAM"", ""strerror"", ""krb5_error_code""]], [[""krb5_error_code"", ""ENOMEM"", ""=""]], [[""krb5_kt_list"", ""next"", ""xmalloc"", ""*"", ""krb5_kt_list"", ""=""]]]","[[[""krb5_error_code"", ""ENOMEM"", ""=""], ""krb5_error_code""]]","[""\""%s| %s: ERROR: krb5_read_keytab: %s\\n\""""]"
"fprintf ( stderr , ""%s| %s: ERROR: krb5_read_keytab: %s\n"" , LogTime ( ) , PROGRAM , strerror ( retval ) )",258:16:9279:9397,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/kerberos/negotiate_kerberos_auth.cc,"[[""True"", [90360, ""True"", ""! lp"", ""Condition""]], [""True"", [90379, ""True"", ""! lp"", ""Condition""]], [""False"", [90385, ""True"", ""check_k5_err ( context , \""krb5_kt_next_entry\"" , retval )"", ""Condition""]], [""False"", [90481, ""True"", ""! entry"", ""Condition""]]]","[["""", [90333, ""True"", ""debug ( ( char * ) \""%s| %s: ERROR: krb5_read_keytab failed: %s\\n\"" , LogTime ( ) , PROGRAM , strerror ( retval ) )"", ""ExpressionStatement""]], ["""", [90356, ""True"", ""retval = ENOMEM"", ""ExpressionStatement""]], ["""", [90364, ""True"", ""lp = ( krb5_kt_list ) xmalloc ( sizeof ( * lp ) )"", ""ExpressionStatement""]]]","[[[""!"", ""krb5_kt_list""]], [[""!"", ""krb5_kt_list""]], [[""check_k5_err"", ""krb5_context"", ""\""krb5_kt_next_entry\"""", ""krb5_error_code""]], [[""!"", ""krb5_keytab_entry *""]], [[""debug"", ""\""%s| %s: ERROR: krb5_read_keytab failed: %s\\n\"""", ""LogTime"", ""PROGRAM"", ""strerror"", ""krb5_error_code""]], [[""krb5_error_code"", ""ENOMEM"", ""=""]], [[""krb5_kt_list"", ""xmalloc"", ""*"", ""krb5_kt_list"", ""=""]]]","[[[""krb5_error_code"", ""ENOMEM"", ""=""], ""krb5_error_code""]]","[""\""%s| %s: ERROR: krb5_read_keytab: %s\\n\""""]"
"fprintf ( stderr , ""%s| %s: ERROR: krb5_read_keytab: %s\n"" , LogTime ( ) , PROGRAM , strerror ( retval ) )",243:12:8608:8722,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/kerberos/negotiate_kerberos_auth.cc,"[[""True"", [90481, ""True"", ""! entry"", ""Condition""]]]","[["""", [90454, ""True"", ""debug ( ( char * ) \""%s| %s: ERROR: krb5_read_keytab failed: %s\\n\"" , LogTime ( ) , PROGRAM , strerror ( retval ) )"", ""ExpressionStatement""]], ["""", [90477, ""True"", ""retval = ENOMEM"", ""ExpressionStatement""]], ["""", [90485, ""True"", ""entry = ( krb5_keytab_entry * ) xcalloc ( 1 , sizeof ( krb5_keytab_entry ) )"", ""ExpressionStatement""]]]","[[[""!"", ""krb5_keytab_entry *""]], [[""debug"", ""\""%s| %s: ERROR: krb5_read_keytab failed: %s\\n\"""", ""LogTime"", ""PROGRAM"", ""strerror"", ""krb5_error_code""]], [[""krb5_error_code"", ""ENOMEM"", ""=""]], [[""krb5_keytab_entry *"", ""xcalloc"", ""1"", ""=""]]]","[[[""krb5_error_code"", ""ENOMEM"", ""=""], ""krb5_error_code""]]","[""\""%s| %s: ERROR: krb5_read_keytab: %s\\n\""""]"
"fprintf ( stderr , ""%s| %s: %s failed: %s\n"" , LogTime ( ) , PROGRAM , function , buf )",159:8:4820:4913,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/kerberos/negotiate_kerberos_auth_test.cc,"[[""False"", [91288, ""True"", ""GSS_ERROR ( major_status )"", ""Condition""]]]","[["""", [91018, ""True"", ""gss_release_buffer ( & min_stat , & status_string )"", ""ExpressionStatement""]], ["""", [91033, ""True"", ""msg_ctx = 0"", ""ExpressionStatement""]], ["""", [91040, ""True"", ""len += status_string . length"", ""ExpressionStatement""]], ["""", [91046, ""True"", ""snprintf ( buf + len , ( sizeof ( buf ) - len ) , \""%s\"" , ( char * ) status_string . value )"", ""ExpressionStatement""]]]","[[[""GSS_ERROR"", ""OM_uint32""]], [[""gss_release_buffer"", ""&"", ""min_stat"", ""&"", ""status_string""]], [[""OM_uint32"", ""0"", ""=""]], [[""size_t"", ""gss_buffer_desc"", ""length"", ""+=""]], [[""snprintf"", ""char [ 1024 ]"", ""size_t"", ""+"", ""size_t"", ""-"", ""\""%s\"""", ""gss_buffer_desc"", ""value""]]]","[[[""char [ 1024 ]"", ""1024""], ""char [ 1024 ]""], [[""const char *""], ""const char *""]]","[""\""%s| %s: %s failed: %s\\n\""""]"
"fprintf ( stderr , ""%s| %s: Error: No proxy server name\n"" , LogTime ( ) , PROGRAM )",181:8:5407:5499,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/kerberos/negotiate_kerberos_auth_test.cc,"[[""True"", [91640, ""True"", ""! proxy"", ""Condition""]]]","[["""", [91644, ""True"", ""setbuf ( stdin , NULL )"", ""ExpressionStatement""]], ["""", [91653, ""True"", ""setbuf ( stdout , NULL )"", ""ExpressionStatement""]], ["""", [91662, ""True"", ""char * token = NULL ;"", ""IdentifierDeclStatement""]]]","[[[""!"", ""char *""]], [[""setbuf"", ""stdin"", ""NULL""]], [[""setbuf"", ""stdout"", ""NULL""]], [[""char *"", ""NULL"", ""NULL"", ""=""]]]",[],"[""\""%s| %s: Error: No proxy server name\\n\""""]"
"fprintf ( stdout , ""Token: %s\n"" , Token ? Token : ""NULL"" )",242:8:7691:7745,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/kerberos/negotiate_kerberos_auth_test.cc,"[[""False"", [91854, ""True"", ""argc == 3"", ""Condition""]], [""False"", [91878, ""True"", ""argc < 2"", ""Condition""]]]","[["""", [91782, ""True"", ""Token = ( const char * ) squid_kerb_proxy_auth ( argv [ 1 ] )"", ""ExpressionStatement""]], ["""", [91882, ""True"", ""int count ;"", ""IdentifierDeclStatement""]]]","[[[""int"", ""3"", ""==""]], [[""int"", ""2"", ""<""]], [[""const char *"", ""squid_kerb_proxy_auth"", ""char * [ ]"", ""1"", ""=""]], [[""int""]]]","[[[""const char *"", ""squid_kerb_proxy_auth"", ""char * [ ]"", ""1"", ""=""], ""const char *""]]","[""\""Token: %s\\n\"""", ""\""NULL\""""]"
"fprintf ( stdout , ""QQ\n"" )",239:8:7582:7605,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/kerberos/negotiate_kerberos_auth_test.cc,"[[""False"", [91854, ""True"", ""argc == 3"", ""Condition""]], [""False"", [91878, ""True"", ""argc < 2"", ""Condition""]]]","[["""", [91807, ""True"", ""-- count"", ""ExpressionStatement""]], ["""", [91843, ""True"", ""count = atoi ( argv [ 2 ] )"", ""ExpressionStatement""]], ["""", [91811, ""True"", ""fprintf ( stdout , \""YR %s\\n\"" , Token ? Token : \""NULL\"" )"", ""ExpressionStatement""]], ["""", [91826, ""True"", ""Token = ( const char * ) squid_kerb_proxy_auth ( argv [ 1 ] )"", ""ExpressionStatement""]]]","[[[""int"", ""3"", ""==""]], [[""int"", ""2"", ""<""]], [[""count""]], [[""int"", ""atoi"", ""char * [ ]"", ""2"", ""=""]], [[""fprintf"", ""stdout"", ""\""YR %s\\n\"""", ""const char *"", ""const char *"", ""\""NULL\""""]], [[""const char *"", ""squid_kerb_proxy_auth"", ""char * [ ]"", ""1"", ""=""]]]",[],"[""\""QQ\\n\""""]"
"fprintf ( stdout , ""YR %s\n"" , Token ? Token : ""NULL"" )",236:12:7491:7541,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/kerberos/negotiate_kerberos_auth_test.cc,"[[""True"", [91839, ""True"", ""count > 0"", ""Condition""]], [""True"", [91854, ""True"", ""argc == 3"", ""Condition""]], [""False"", [91878, ""True"", ""argc < 2"", ""Condition""]]]","[["""", [91826, ""True"", ""Token = ( const char * ) squid_kerb_proxy_auth ( argv [ 1 ] )"", ""ExpressionStatement""]], ["""", [91807, ""True"", ""-- count"", ""ExpressionStatement""]], ["""", [91843, ""True"", ""count = atoi ( argv [ 2 ] )"", ""ExpressionStatement""]], ["""", [91811, ""True"", ""fprintf ( stdout , \""YR %s\\n\"" , Token ? Token : \""NULL\"" )"", ""ExpressionStatement""]]]","[[[""int"", ""0"", "">""]], [[""int"", ""3"", ""==""]], [[""int"", ""2"", ""<""]], [[""const char *"", ""squid_kerb_proxy_auth"", ""char * [ ]"", ""1"", ""=""]], [[""count""]], [[""int"", ""atoi"", ""char * [ ]"", ""2"", ""=""]], [[""fprintf"", ""stdout"", ""\""YR %s\\n\"""", ""const char *"", ""const char *"", ""\""NULL\""""]]]","[[[""const char *"", ""squid_kerb_proxy_auth"", ""char * [ ]"", ""1"", ""=""], ""const char *""]]","[""\""YR %s\\n\"""", ""\""NULL\""""]"
"fprintf ( stderr , ""%s| %s: Error: No proxy server name given\n"" , LogTime ( ) , PROGRAM )",228:8:7207:7305,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/kerberos/negotiate_kerberos_auth_test.cc,"[[""True"", [91878, ""True"", ""argc < 2"", ""Condition""]]]","[["""", [91882, ""True"", ""int count ;"", ""IdentifierDeclStatement""]], ["""", [91886, ""True"", ""const char * Token ;"", ""IdentifierDeclStatement""]], ["""", [91754, ""True"", ""char * argv [ ]"", ""Parameter""]]]","[[[""int"", ""2"", ""<""]], [[""int""]], [[""const char *""]], [[""char * [ ]""]]]",[],"[""\""%s| %s: Error: No proxy server name given\\n\""""]"
"fprintf ( stderr , ""--kerberos full kerberos helper path with arguments\n"" )",92:4:2699:2771,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/wrapper/negotiate_wrapper.cc,[],"[["""", [94703, ""True"", ""fprintf ( stderr , \""--ntlm full ntlm helper path with arguments\\n\"" )"", ""ExpressionStatement""]], ["""", [94712, ""True"", ""fprintf ( stderr , \""-d full debug\\n\"" )"", ""ExpressionStatement""]], ["""", [94721, ""True"", ""fprintf ( stderr , \""-h help\\n\"" )"", ""ExpressionStatement""]], ["""", [94730, ""True"", ""fprintf ( stderr , \""negotiate_wrapper [-h] [-d] --ntlm ntlm helper + arguments --kerberos kerberos helper + arguments\\n\"" )"", ""ExpressionStatement""]]]","[[[""fprintf"", ""stderr"", ""\""--ntlm full ntlm helper path with arguments\\n\""""]], [[""fprintf"", ""stderr"", ""\""-d full debug\\n\""""]], [[""fprintf"", ""stderr"", ""\""-h help\\n\""""]], [[""fprintf"", ""stderr"", ""\""negotiate_wrapper [-h] [-d] --ntlm ntlm helper + arguments --kerberos kerberos helper + arguments\\n\""""]]]",[],"[""\""--kerberos full kerberos helper path with arguments\\n\""""]"
"fprintf ( stderr , ""--ntlm full ntlm helper path with arguments\n"" )",91:4:2629:2693,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/wrapper/negotiate_wrapper.cc,[],"[["""", [94712, ""True"", ""fprintf ( stderr , \""-d full debug\\n\"" )"", ""ExpressionStatement""]], ["""", [94721, ""True"", ""fprintf ( stderr , \""-h help\\n\"" )"", ""ExpressionStatement""]], ["""", [94730, ""True"", ""fprintf ( stderr , \""negotiate_wrapper [-h] [-d] --ntlm ntlm helper + arguments --kerberos kerberos helper + arguments\\n\"" )"", ""ExpressionStatement""]], ["""", [94739, ""True"", ""fprintf ( stderr , \""Usage: \\n\"" )"", ""ExpressionStatement""]]]","[[[""fprintf"", ""stderr"", ""\""-d full debug\\n\""""]], [[""fprintf"", ""stderr"", ""\""-h help\\n\""""]], [[""fprintf"", ""stderr"", ""\""negotiate_wrapper [-h] [-d] --ntlm ntlm helper + arguments --kerberos kerberos helper + arguments\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: \\n\""""]]]",[],"[""\""--ntlm full ntlm helper path with arguments\\n\""""]"
"fprintf ( stderr , ""-d full debug\n"" )",90:4:2589:2623,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/wrapper/negotiate_wrapper.cc,[],"[["""", [94721, ""True"", ""fprintf ( stderr , \""-h help\\n\"" )"", ""ExpressionStatement""]], ["""", [94730, ""True"", ""fprintf ( stderr , \""negotiate_wrapper [-h] [-d] --ntlm ntlm helper + arguments --kerberos kerberos helper + arguments\\n\"" )"", ""ExpressionStatement""]], ["""", [94739, ""True"", ""fprintf ( stderr , \""Usage: \\n\"" )"", ""ExpressionStatement""]], ["""", [94748, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""fprintf"", ""stderr"", ""\""-h help\\n\""""]], [[""fprintf"", ""stderr"", ""\""negotiate_wrapper [-h] [-d] --ntlm ntlm helper + arguments --kerberos kerberos helper + arguments\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: \\n\""""]], [[""ENTRY""]]]",[],"[""\""-d full debug\\n\""""]"
"fprintf ( stderr , ""-h help\n"" )",89:4:2555:2583,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/wrapper/negotiate_wrapper.cc,[],"[["""", [94730, ""True"", ""fprintf ( stderr , \""negotiate_wrapper [-h] [-d] --ntlm ntlm helper + arguments --kerberos kerberos helper + arguments\\n\"" )"", ""ExpressionStatement""]], ["""", [94739, ""True"", ""fprintf ( stderr , \""Usage: \\n\"" )"", ""ExpressionStatement""]], ["""", [94748, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""fprintf"", ""stderr"", ""\""negotiate_wrapper [-h] [-d] --ntlm ntlm helper + arguments --kerberos kerberos helper + arguments\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: \\n\""""]], [[""ENTRY""]]]",[],"[""\""-h help\\n\""""]"
"fprintf ( stderr , ""negotiate_wrapper [-h] [-d] --ntlm ntlm helper + arguments --kerberos kerberos helper + arguments\n"" )",88:4:2431:2549,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/wrapper/negotiate_wrapper.cc,[],"[["""", [94739, ""True"", ""fprintf ( stderr , \""Usage: \\n\"" )"", ""ExpressionStatement""]], ["""", [94748, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""fprintf"", ""stderr"", ""\""Usage: \\n\""""]], [[""ENTRY""]]]",[],"[""\""negotiate_wrapper [-h] [-d] --ntlm ntlm helper + arguments --kerberos kerberos helper + arguments\\n\""""]"
"fprintf ( stderr , ""Usage: \n"" )",87:4:2397:2425,/data/download/squid/squid-3.5.25/helpers/negotiate_auth/wrapper/negotiate_wrapper.cc,[],"[["""", [94748, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""ENTRY""]]]",[],"[""\""Usage: \\n\""""]"
"fprintf ( stderr , ""unknown option: -%c. Exiting\n"" , opt )",407:12:11768:11822,/data/download/squid/squid-3.5.25/helpers/ntlm_auth/SSPI/ntlm_sspi_auth.cc,"[[""case 'h'"", [95895, ""True"", ""opt"", ""Condition""]], [""True"", [95897, ""True"", ""- 1 != ( opt = getopt ( argc , argv , \""hdvA:D:\"" ) )"", ""Condition""]]]","[["""", [95815, ""True"", ""default :"", ""Label""]], ["""", [95817, ""True"", ""opt = optopt"", ""ExpressionStatement""]], ["""", [95821, ""True"", ""case '?' :"", ""Label""]], ["""", [95822, ""True"", ""exit ( 0 )"", ""ExpressionStatement""]], ["""", [95795, ""True"", ""had_error = 1"", ""ExpressionStatement""]], ["""", [95835, ""True"", ""break ;"", ""BreakStatement""]], ["""", [95845, ""True"", ""break ;"", ""BreakStatement""]], ["""", [95851, ""True"", ""break ;"", ""BreakStatement""]], ["""", [95873, ""True"", ""break ;"", ""BreakStatement""]], ["""", [95914, ""True"", ""opterr = 0"", ""ExpressionStatement""]]]","[[[""int"", ""'h'"", ""==""]], [[""-"", ""1"", ""opt"", ""getopt"", ""int"", ""char * [ ]"", ""\""hdvA:D:\"""", ""="", ""!=""]], [[""default""]], [[""int"", ""optopt"", ""=""]], [[]], [[""exit"", ""0""]], [[""int"", ""1"", ""=""]], [[]], [[]], [[]], [[]], [[""opterr"", ""0"", ""=""]]]","[[[""-"", ""1"", ""int"", ""getopt"", ""int"", ""char * [ ]"", ""\""hdvA:D:\"""", ""="", ""!=""], ""int""], [[""int"", ""optopt"", ""=""], ""int""]]","[""\""unknown option: -%c. Exiting\\n\""""]"
"fprintf ( stderr , ""Illegal request received: '%s'\n"" , buf )",607:8:19574:19630,/data/download/squid/squid-3.5.25/helpers/ntlm_auth/SSPI/ntlm_sspi_auth.cc,"[[""False"", [96319, ""True"", ""memcmp ( buf , \""KK \"" , 3 ) == 0"", ""Condition""]], [""False"", [96584, ""True"", ""memcmp ( buf , \""YR\"" , 2 ) == 0"", ""Condition""]], [""True"", [96673, ""True"", ""false"", ""Condition""]], [""False"", [96724, ""True"", ""oversized"", ""Condition""]], [""False"", [96726, ""True"", ""c"", ""Condition""]]]",[],"[[[""memcmp"", ""char [ HELPER_INPUT_BUFFER ]"", ""\""KK \"""", ""3"", ""0"", ""==""]], [[""memcmp"", ""char [ HELPER_INPUT_BUFFER ]"", ""\""YR\"""", ""2"", ""0"", ""==""]], [[""false""]], [[""int""]], [[""char *""]]]","[[[""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER""], ""char [ HELPER_INPUT_BUFFER ]""]]","[""\""Illegal request received: '%s'\\n\""""]"
"fprintf ( stdout , ""OK user=\""%s\\%s\"""" , domain , user )",597:12:19238:19289,/data/download/squid/squid-3.5.25/helpers/ntlm_auth/SSPI/ntlm_sspi_auth.cc,"[[""case NTLM_ERR_NONE"", [96184, ""True"", ""err != NTLM_ERR_NONE"", ""Condition""]], [""case NTLM_ERR_NONE"", [96236, ""True"", ""fast_header -> type"", ""Condition""]], [""case NTLM_ERR_NONE"", [96178, ""True"", ""err"", ""Condition""]], [""case NTLM_AUTHENTICATE"", [96236, ""True"", ""fast_header -> type"", ""Condition""]], [""False"", [96251, ""True"", ""ntlm_validate_packet ( fast_header , NTLM_ANY ) != NTLM_ERR_NONE"", ""Condition""]], [""True"", [96184, ""True"", ""err != NTLM_ERR_NONE"", ""Condition""]], [""False"", [96251, ""True"", ""ntlm_validate_packet ( fast_header , NTLM_ANY ) != NTLM_ERR_NONE"", ""Condition""]], [""False"", [96279, ""True"", ""( size_t ) decodedLen < sizeof ( ntlmhdr )"", ""Condition""]], [""case NTLM_AUTHENTICATE"", [96236, ""True"", ""fast_header -> type"", ""Condition""]], [""False"", [96279, ""True"", ""( size_t ) decodedLen < sizeof ( ntlmhdr )"", ""Condition""]], [""False"", [96315, ""True"", ""! have_challenge"", ""Condition""]], [""False"", [96251, ""True"", ""ntlm_validate_packet ( fast_header , NTLM_ANY ) != NTLM_ERR_NONE"", ""Condition""]]]",[],"[[[""int"", ""NTLM_ERR_NONE"", ""!="", ""NTLM_ERR_NONE"", ""==""]], [[""ntlmhdr *"", ""type"", ""NTLM_ERR_NONE"", ""==""]], [[""int"", ""NTLM_ERR_NONE"", ""==""]], [[""ntlmhdr *"", ""type"", ""NTLM_AUTHENTICATE"", ""==""]], [[""ntlm_validate_packet"", ""ntlmhdr *"", ""NTLM_ANY"", ""NTLM_ERR_NONE"", ""!=""]], [[""int"", ""NTLM_ERR_NONE"", ""!=""]], [[""ntlm_validate_packet"", ""ntlmhdr *"", ""NTLM_ANY"", ""NTLM_ERR_NONE"", ""!=""]], [[""int"", ""<""]], [[""ntlmhdr *"", ""type"", ""NTLM_AUTHENTICATE"", ""==""]], [[""int"", ""<""]], [[""!"", ""have_challenge""]], [[""ntlm_validate_packet"", ""ntlmhdr *"", ""NTLM_ANY"", ""NTLM_ERR_NONE"", ""!=""]]]","[[[""char [ UNLEN + 1 ]"", ""UNLEN"", ""1"", ""+""], ""char [ UNLEN + 1 ]""], [[""char [ DNLEN + 1 ]"", ""DNLEN"", ""1"", ""+""], ""char [ DNLEN + 1 ]""]]","[""\""OK user=\\\""%s\\\\%s\\\""\""""]"
"fprintf ( stderr , ""No newline in '%s'\n"" , buf )",455:12:13338:13382,/data/download/squid/squid-3.5.25/helpers/ntlm_auth/SSPI/ntlm_sspi_auth.cc,"[[""False"", [96726, ""True"", ""c"", ""Condition""]], [""False"", [96753, ""True"", ""fgets ( buf , sizeof ( buf ) , stdin ) == NULL"", ""Condition""]], [""False"", [96673, ""True"", ""false"", ""Condition""]], [""False"", [96724, ""True"", ""oversized"", ""Condition""]], [""False"", [96726, ""True"", ""c"", ""Condition""]]]",[],"[[[""char *""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""stdin"", ""NULL"", ""==""]], [[""false""]], [[""int""]], [[""char *""]]]","[[[""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER""], ""char [ HELPER_INPUT_BUFFER ]""]]","[""\""No newline in '%s'\\n\""""]"
"fprintf ( stderr , ""Illegal request received: '%s'\n"" , buf )",450:16:13188:13244,/data/download/squid/squid-3.5.25/helpers/ntlm_auth/SSPI/ntlm_sspi_auth.cc,"[[""True"", [96724, ""True"", ""oversized"", ""Condition""]], [""True"", [96726, ""True"", ""c"", ""Condition""]], [""False"", [96753, ""True"", ""fgets ( buf , sizeof ( buf ) , stdin ) == NULL"", ""Condition""]], [""False"", [96673, ""True"", ""false"", ""Condition""]]]","[["""", [96717, ""True"", ""helperfail ( \""messge=\\\""illegal request received\\\""\"" )"", ""ExpressionStatement""]], ["""", [96728, ""True"", ""memchr ( buf , '\\n' , sizeof ( buf ) )"", ""ExpressionStatement""]]]","[[[""int""]], [[""char *""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""stdin"", ""NULL"", ""==""]], [[""false""]], [[""helperfail"", ""\""messge=\\\""illegal request received\\\""\""""]], [[""memchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'""]]]","[[[""char [ HELPER_INPUT_BUFFER ]"", ""HELPER_INPUT_BUFFER""], ""char [ HELPER_INPUT_BUFFER ]""]]","[""\""Illegal request received: '%s'\\n\""""]"
"fprintf ( stderr , ""FATAL, can't initialize SSPI, exiting.\n"" )",625:8:20015:20074,/data/download/squid/squid-3.5.25/helpers/ntlm_auth/SSPI/ntlm_sspi_auth.cc,"[[""True"", [97032, ""True"", ""LoadSecurityDll ( SSP_NTLM , NTLM_PACKAGE_NAME ) == NULL"", ""Condition""]]]","[["""", [97043, ""True"", """", ""ExpressionStatement""]], ["""", [97044, ""True"", "")"", ""Statement""]], ["""", [97045, ""True"", ""my_program_name"", ""Statement""]]]","[[[""LoadSecurityDll"", ""SSP_NTLM"", ""NTLM_PACKAGE_NAME"", ""NULL"", ""==""]], [[]], [[]], [[]]]",[],"[""\""FATAL, can't initialize SSPI, exiting.\\n\""""]"
"fprintf ( stderr , ""unknown option: -%c. Exiting\n"" , opt )",114:12:3148:3202,/data/download/squid/squid-3.5.25/helpers/ntlm_auth/fake/ntlm_fake_auth.cc,"[[""case 'h'"", [97202, ""True"", ""opt"", ""Condition""]], [""True"", [97204, ""True"", ""- 1 != ( opt = getopt ( argc , argv , \""hdvS\"" ) )"", ""Condition""]]]","[["""", [97160, ""True"", ""default :"", ""Label""]], ["""", [97162, ""True"", ""opt = optopt"", ""ExpressionStatement""]], ["""", [97166, ""True"", ""case '?' :"", ""Label""]], ["""", [97167, ""True"", ""exit ( 0 )"", ""ExpressionStatement""]], ["""", [97140, ""True"", ""had_error = 1"", ""ExpressionStatement""]], ["""", [97180, ""True"", ""break ;"", ""BreakStatement""]], ["""", [97186, ""True"", ""break ;"", ""BreakStatement""]], ["""", [97196, ""True"", ""break ;"", ""BreakStatement""]], ["""", [97221, ""True"", ""opterr = 0"", ""ExpressionStatement""]]]","[[[""int"", ""'h'"", ""==""]], [[""-"", ""1"", ""opt"", ""getopt"", ""int"", ""char * [ ]"", ""\""hdvS\"""", ""="", ""!=""]], [[""default""]], [[""int"", ""optopt"", ""=""]], [[]], [[""exit"", ""0""]], [[""int"", ""1"", ""=""]], [[]], [[]], [[]], [[""opterr"", ""0"", ""=""]]]","[[[""int"", ""optopt"", ""=""], ""int""], [[""-"", ""1"", ""int"", ""getopt"", ""int"", ""char * [ ]"", ""\""hdvS\"""", ""="", ""!=""], ""int""]]","[""\""unknown option: -%c. Exiting\\n\""""]"
"fprintf ( stderr , ""ERROR: Empty NT password supplied for user %s\\%s. No-auth\n"" , domain , user )",303:16:9963:10055,/data/download/squid/squid-3.5.25/helpers/ntlm_auth/smb_lm/ntlm_smb_lm_auth.cc,"[[""True"", [98544, ""True"", ""memcmp ( tmp . str , lmencoded_empty_pass , ENCODED_PASS_LEN ) == 0"", ""Condition""]], [""False"", [98615, ""True"", ""len != ENCODED_PASS_LEN || offset + len > auth_length || offset == 0"", ""Condition""]], [""True"", [98643, ""True"", ""len != 0"", ""Condition""]], [""False"", [98692, ""True"", ""memcmp ( tmp . str , lmencoded_empty_pass , ENCODED_PASS_LEN ) == 0"", ""Condition""]]]","[["""", [98559, ""True"", ""debug ( \""Empty NT pass detection: user: '%s', ours:'%s', his: '%s' (length: %d)\\n\"" , user , ntencoded_empty_pass , tmp . str , tmp . l )"", ""ExpressionStatement""]], ["""", [98578, ""True"", ""tmp . l = len"", ""ExpressionStatement""]], ["""", [98584, ""True"", ""tmp . str = ( char * ) packet + offset"", ""ExpressionStatement""]]]","[[[""memcmp"", ""lstring"", ""str"", ""lmencoded_empty_pass"", ""ENCODED_PASS_LEN"", ""0"", ""==""]], [["