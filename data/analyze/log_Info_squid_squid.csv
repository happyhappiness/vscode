code,location,file,cdg_nodes,neighbor_nodes,context_lists,ddg_lists,static_lists,cluster_index
"fprintf ( stderr , ""assertion failed: %s:%d: \""%s\""\n"" , file , line , expr )",13:4:361:431,/data/download/squid/squid-3.5.25/compat/assert.cc,[],"[["""", [4973, ""True"", ""int line"", ""Parameter""]], ["""", [4976, ""True"", ""const char * file"", ""Parameter""]], ["""", [4979, ""True"", ""const char * expr"", ""Parameter""]], ["""", [5004, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""int""]], [[""const char *""]], [[""const char *""]], [[""ENTRY""]]]","[[[""const char *""], ""const char *""], [[""int""], ""int""], [[""const char *""], ""const char *""]]","[""\""assertion failed: %s:%d: \\\""%s\\\""\\n\""""]"
"vfprintf ( stderr , format , args )",25:4:574:602,/data/download/squid/squid-3.5.25/compat/debug.cc,"[[""False"", [5359, ""True"", ""! debug_enabled"", ""Condition""]]]","[["""", [5344, ""True"", ""va_start ( args , format )"", ""ExpressionStatement""]], ["""", [5353, ""True"", ""va_list args ;"", ""IdentifierDeclStatement""]], ["""", [5321, ""True"", ""const char * format"", ""Parameter""]]]","[[[""!"", ""debug_enabled""]], [[""va_start"", ""va_list"", ""const char *""]], [[""va_list""]], [[""const char *""]]]","[[[""const char *""], ""const char *""], [[""va_list""], ""va_list""]]",[]
"fprintf ( stderr , ""%s\n"" , _sys_siglist [ sig ] )",26:8:756:800,/data/download/squid/squid-3.5.25/compat/psignal.c,"[[""True"", [13293, ""True"", ""sig > 0 && sig < _sys_nsig"", ""Condition""]]]","[["""", [13302, ""True"", ""fprintf ( stderr , \""%s: \"" , msg )"", ""ExpressionStatement""]], ["""", [13261, ""True"", ""const char * msg"", ""Parameter""]], ["""", [13261, ""True"", ""const char * msg"", ""Parameter""]], ["""", [13264, ""True"", ""int sig"", ""Parameter""]]]","[[[""int"", ""0"", "">""]], [[""int"", ""_sys_nsig"", ""<""]], [[""fprintf"", ""stderr"", ""\""%s: \"""", ""const char *""]], [[""const char *""]], [[""const char *""]], [[""int""]]]","[[[""int""], ""int""]]","[""\""%s\\n\""""]"
"fprintf ( stderr , ""%s: "" , msg )",24:23:678:708,/data/download/squid/squid-3.5.25/compat/psignal.c,"[[""True"", [13313, ""True"", ""msg && * msg"", ""Condition""]]]","[["""", [13261, ""True"", ""const char * msg"", ""Parameter""]], ["""", [13264, ""True"", ""int sig"", ""Parameter""]], ["""", [13319, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""const char *""]], [[""*"", ""const char *""]], [[""const char *""]], [[""int""]], [[""ENTRY""]]]","[[[""const char *""], ""const char *""]]","[""\""%s: \""""]"
"fprintf ( stderr , ""Connect timeouts not supported in your LDAP library\n"" )",240:4:7741:7813,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,[],"[["""", [17060, ""True"", ""int timelimit"", ""Parameter""]], ["""", [17063, ""True"", ""LDAP * ld"", ""Parameter""]], ["""", [17077, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""int""]], [[""LDAP *""]], [[""ENTRY""]]]",[],"[""\""Connect timeouts not supported in your LDAP library\\n\""""]"
"fprintf ( stderr , ""Could not Activate TLS connection\n"" )",308:12:9798:9852,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [17164, ""True"", ""ldap_start_tls_s ( ld , NULL , NULL ) != LDAP_SUCCESS"", ""Condition""]], [""False"", [17194, ""True"", ""version != LDAP_VERSION3"", ""Condition""]], [""True"", [17198, ""True"", ""use_tls"", ""Condition""]]]","[["""", [17202, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]]]","[[[""ldap_start_tls_s"", ""LDAP *"", ""NULL"", ""NULL"", ""LDAP_SUCCESS"", ""!=""]], [[""version"", ""LDAP_VERSION3"", ""!=""]], [[""use_tls""]], [[""exit"", ""1""]]]",[],"[""\""Could not Activate TLS connection\\n\""""]"
"fprintf ( stderr , ""TLS requires LDAP version 3\n"" )",305:12:9644:9692,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [17194, ""True"", ""version != LDAP_VERSION3"", ""Condition""]], [""True"", [17198, ""True"", ""use_tls"", ""Condition""]]]","[["""", [17202, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [17209, ""True"", ""fprintf ( stderr , \""Could not set LDAP_OPT_PROTOCOL_VERSION %d\\n\"" , version )"", ""ExpressionStatement""]], ["""", [17237, ""True"", ""version = LDAP_VERSION3"", ""ExpressionStatement""]]]","[[[""version"", ""LDAP_VERSION3"", ""!=""]], [[""use_tls""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""Could not set LDAP_OPT_PROTOCOL_VERSION %d\\n\"""", ""version""]], [[""version"", ""LDAP_VERSION3"", ""=""]]]",[],"[""\""TLS requires LDAP version 3\\n\""""]"
"fprintf ( stderr , ""Could not set LDAP_OPT_PROTOCOL_VERSION %d\n"" , version )",298:8:9438:9526,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [17220, ""True"", ""ldap_set_option ( ld , LDAP_OPT_PROTOCOL_VERSION , & version ) != LDAP_SUCCESS"", ""Condition""]]]","[["""", [17237, ""True"", ""version = LDAP_VERSION3"", ""ExpressionStatement""]], ["""", [17248, ""True"", ""squid_ldap_set_connect_timeout ( ld , connect_timeout )"", ""ExpressionStatement""]], ["""", [17248, ""True"", ""squid_ldap_set_connect_timeout ( ld , connect_timeout )"", ""ExpressionStatement""]], ["""", [17265, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [17301, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [17382, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]]]","[[[""ldap_set_option"", ""LDAP *"", ""LDAP_OPT_PROTOCOL_VERSION"", ""&"", ""version"", ""LDAP_SUCCESS"", ""!=""]], [[""version"", ""LDAP_VERSION3"", ""=""]], [[""squid_ldap_set_connect_timeout"", ""LDAP *"", ""connect_timeout""]], [[""squid_ldap_set_connect_timeout"", ""LDAP *"", ""connect_timeout""]], [[""exit"", ""1""]], [[""exit"", ""1""]], [[""exit"", ""1""]]]","[[[""version"", ""LDAP_VERSION3"", ""=""], ""version""]]","[""\""Could not set LDAP_OPT_PROTOCOL_VERSION %d\\n\""""]"
"fprintf ( stderr , ""\nUnable to connect to LDAP server:%s port:%d\n"" , ldapServer , port )",286:16:9025:9133,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [17285, ""True"", ""( ld = ldap_init ( ldapServer , port ) ) == NULL"", ""Condition""]], [""False"", [17377, ""True"", ""sslpath"", ""Condition""]], [""False"", [17420, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]]]","[["""", [17431, ""True"", ""LDAP * ld = NULL ;"", ""IdentifierDeclStatement""]]]","[[[""ld"", ""ldap_init"", ""const char *"", ""int"", ""="", ""NULL"", ""==""]], [[""sslpath""]], [[""strstr"", ""const char *"", ""\""://\"""", ""NULL"", ""!=""]], [[""LDAP *"", ""NULL"", ""NULL"", ""=""]]]","[[[""const char *""], ""const char *""], [[""int""], ""int""]]","[""\""\\nUnable to connect to LDAP server:%s port:%d\\n\""""]"
"fprintf ( stderr , ""\nUnable to connect to SSL LDAP server: %s port:%d\n"" , ldapServer , port )",279:16:8771:8884,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [17321, ""True"", ""( ld = ldapssl_init ( ldapServer , port , 1 ) ) == NULL"", ""Condition""]], [""True"", [17377, ""True"", ""sslpath"", ""Condition""]], [""False"", [17420, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]]]","[["""", [17339, ""True"", ""++ sslinit"", ""ExpressionStatement""]], ["""", [17344, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [17351, ""True"", ""fprintf ( stderr , \""\\nUnable to initialise SSL with cert path %s\\n\"" , sslpath )"", ""ExpressionStatement""]]]","[[[""ld"", ""ldapssl_init"", ""const char *"", ""int"", ""1"", ""="", ""NULL"", ""==""]], [[""sslpath""]], [[""strstr"", ""const char *"", ""\""://\"""", ""NULL"", ""!=""]], [[""sslinit""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""\\nUnable to initialise SSL with cert path %s\\n\"""", ""sslpath""]]]","[[[""const char *""], ""const char *""], [[""int""], ""int""]]","[""\""\\nUnable to connect to SSL LDAP server: %s port:%d\\n\""""]"
"fprintf ( stderr , ""\nUnable to initialise SSL with cert path %s\n"" , sslpath )",272:16:8500:8598,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [17362, ""True"", ""! sslinit && ( ldapssl_client_init ( sslpath , NULL ) != LDAP_SUCCESS )"", ""Condition""]], [""True"", [17377, ""True"", ""sslpath"", ""Condition""]], [""False"", [17420, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]]]","[["""", [17431, ""True"", ""LDAP * ld = NULL ;"", ""IdentifierDeclStatement""]]]","[[[""!"", ""sslinit""]], [[""ldapssl_client_init"", ""sslpath"", ""NULL"", ""LDAP_SUCCESS"", ""!=""]], [[""sslpath""]], [[""strstr"", ""const char *"", ""\""://\"""", ""NULL"", ""!=""]], [[""LDAP *"", ""NULL"", ""NULL"", ""=""]]]",[],"[""\""\\nUnable to initialise SSL with cert path %s\\n\""""]"
"fprintf ( stderr , ""\nUnable to connect to LDAPURI:%s\n"" , ldapServer )",264:12:8243:8309,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [17400, ""True"", ""rc != LDAP_SUCCESS"", ""Condition""]], [""True"", [17420, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]]]","[["""", [17404, ""True"", ""int rc = ldap_initialize ( & ld , ldapServer ) ;"", ""IdentifierDeclStatement""]], ["""", [17431, ""True"", ""LDAP * ld = NULL ;"", ""IdentifierDeclStatement""]]]","[[[""int"", ""LDAP_SUCCESS"", ""!=""]], [[""strstr"", ""const char *"", ""\""://\"""", ""NULL"", ""!=""]], [[""int"", ""int"", ""ldap_initialize"", ""&"", ""ld"", ""const char *"", ""=""]], [[""LDAP *"", ""NULL"", ""NULL"", ""=""]]]","[[[""const char *""], ""const char *""]]","[""\""\\nUnable to connect to LDAPURI:%s\\n\""""]"
"fprintf ( stderr , ""\tIf you need to bind as a user to perform searches then use the\n\t-D binddn -w bindpasswd or -D binddn -W secretfile options\n\n"" )",557:8:17799:17948,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17899, ""True"", ""fprintf ( stderr , \""\\tIf no search filter is specified, then the dn <userattr>=user,basedn\\n\\twill be used (same as specifying a search filter of '<userattr>=',\\n\\tbut quicker as as there is no need to search for the user DN)\\n\\n\"" )"", ""ExpressionStatement""]], ["""", [17908, ""True"", ""fprintf ( stderr , \""\\n\"" )"", ""ExpressionStatement""]], ["""", [17917, ""True"", ""fprintf ( stderr , \""\\t-d\\t\\t\\tenable debug mode\\n\"" )"", ""ExpressionStatement""]], ["""", [17926, ""True"", ""fprintf ( stderr , \""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires LDAP version 3\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\tIf no search filter is specified, then the dn <userattr>=user,basedn\\n\\twill be used (same as specifying a search filter of '<userattr>=',\\n\\tbut quicker as as there is no need to search for the user DN)\\n\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-d\\t\\t\\tenable debug mode\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires LDAP version 3\\n\""""]]]",[],"[""\""\\tIf you need to bind as a user to perform searches then use the\\n\\t-D binddn -w bindpasswd or -D binddn -W secretfile options\\n\\n\""""]"
"fprintf ( stderr , ""\tIf no search filter is specified, then the dn <userattr>=user,basedn\n\twill be used (same as specifying a search filter of '<userattr>=',\n\tbut quicker as as there is no need to search for the user DN)\n\n"" )",556:8:17561:17789,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17908, ""True"", ""fprintf ( stderr , \""\\n\"" )"", ""ExpressionStatement""]], ["""", [17917, ""True"", ""fprintf ( stderr , \""\\t-d\\t\\t\\tenable debug mode\\n\"" )"", ""ExpressionStatement""]], ["""", [17926, ""True"", ""fprintf ( stderr , \""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires LDAP version 3\\n\"" )"", ""ExpressionStatement""]], ["""", [17935, ""True"", ""fprintf ( stderr , \""\\t-v 2|3\\t\\t\\tLDAP version\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-d\\t\\t\\tenable debug mode\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires LDAP version 3\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-v 2|3\\t\\t\\tLDAP version\\n\""""]]]",[],"[""\""\\tIf no search filter is specified, then the dn <userattr>=user,basedn\\n\\twill be used (same as specifying a search filter of '<userattr>=',\\n\\tbut quicker as as there is no need to search for the user DN)\\n\\n\""""]"
"fprintf ( stderr , ""\n"" )",555:8:17530:17551,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17917, ""True"", ""fprintf ( stderr , \""\\t-d\\t\\t\\tenable debug mode\\n\"" )"", ""ExpressionStatement""]], ["""", [17926, ""True"", ""fprintf ( stderr , \""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires LDAP version 3\\n\"" )"", ""ExpressionStatement""]], ["""", [17935, ""True"", ""fprintf ( stderr , \""\\t-v 2|3\\t\\t\\tLDAP version\\n\"" )"", ""ExpressionStatement""]], ["""", [17944, ""True"", ""fprintf ( stderr , \""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-d\\t\\t\\tenable debug mode\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires LDAP version 3\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-v 2|3\\t\\t\\tLDAP version\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\""""]]]",[],"[""\""\\n\""""]"
"fprintf ( stderr , ""\t-d\t\t\tenable debug mode\n"" )",554:8:17472:17520,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17926, ""True"", ""fprintf ( stderr , \""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires LDAP version 3\\n\"" )"", ""ExpressionStatement""]], ["""", [17935, ""True"", ""fprintf ( stderr , \""\\t-v 2|3\\t\\t\\tLDAP version\\n\"" )"", ""ExpressionStatement""]], ["""", [17944, ""True"", ""fprintf ( stderr , \""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\"" )"", ""ExpressionStatement""]], ["""", [17953, ""True"", ""fprintf ( stderr , \""\\t-R\\t\\t\\tdo not follow referrals\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires LDAP version 3\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-v 2|3\\t\\t\\tLDAP version\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-R\\t\\t\\tdo not follow referrals\\n\""""]]]",[],"[""\""\\t-d\\t\\t\\tenable debug mode\\n\""""]"
"fprintf ( stderr , ""\t-Z\t\t\tTLS encrypt the LDAP connection, requires LDAP version 3\n"" )",552:8:17368:17455,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17935, ""True"", ""fprintf ( stderr , \""\\t-v 2|3\\t\\t\\tLDAP version\\n\"" )"", ""ExpressionStatement""]], ["""", [17944, ""True"", ""fprintf ( stderr , \""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\"" )"", ""ExpressionStatement""]], ["""", [17953, ""True"", ""fprintf ( stderr , \""\\t-R\\t\\t\\tdo not follow referrals\\n\"" )"", ""ExpressionStatement""]], ["""", [17962, ""True"", ""fprintf ( stderr , \""\\t-t timelimit\\t\\tsearch time limit\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-v 2|3\\t\\t\\tLDAP version\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-R\\t\\t\\tdo not follow referrals\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-t timelimit\\t\\tsearch time limit\\n\""""]]]",[],"[""\""\\t-Z\\t\\t\\tTLS encrypt the LDAP connection, requires LDAP version 3\\n\""""]"
"fprintf ( stderr , ""\t-v 2|3\t\t\tLDAP version\n"" )",551:8:17311:17358,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17944, ""True"", ""fprintf ( stderr , \""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\"" )"", ""ExpressionStatement""]], ["""", [17953, ""True"", ""fprintf ( stderr , \""\\t-R\\t\\t\\tdo not follow referrals\\n\"" )"", ""ExpressionStatement""]], ["""", [17962, ""True"", ""fprintf ( stderr , \""\\t-t timelimit\\t\\tsearch time limit\\n\"" )"", ""ExpressionStatement""]], ["""", [17971, ""True"", ""fprintf ( stderr , \""\\t-c timeout\\t\\tconnect timeout\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-R\\t\\t\\tdo not follow referrals\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-t timelimit\\t\\tsearch time limit\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-c timeout\\t\\tconnect timeout\\n\""""]]]",[],"[""\""\\t-v 2|3\\t\\t\\tLDAP version\\n\""""]"
"fprintf ( stderr , ""\t-a never|always|search|find\n\t\t\t\twhen to dereference aliases\n"" )",549:8:17193:17280,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17953, ""True"", ""fprintf ( stderr , \""\\t-R\\t\\t\\tdo not follow referrals\\n\"" )"", ""ExpressionStatement""]], ["""", [17962, ""True"", ""fprintf ( stderr , \""\\t-t timelimit\\t\\tsearch time limit\\n\"" )"", ""ExpressionStatement""]], ["""", [17971, ""True"", ""fprintf ( stderr , \""\\t-c timeout\\t\\tconnect timeout\\n\"" )"", ""ExpressionStatement""]], ["""", [17980, ""True"", ""fprintf ( stderr , \""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-R\\t\\t\\tdo not follow referrals\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-t timelimit\\t\\tsearch time limit\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-c timeout\\t\\tconnect timeout\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\""""]]]",[],"[""\""\\t-a never|always|search|find\\n\\t\\t\\t\\twhen to dereference aliases\\n\""""]"
"fprintf ( stderr , ""\t-R\t\t\tdo not follow referrals\n"" )",548:8:17129:17183,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17962, ""True"", ""fprintf ( stderr , \""\\t-t timelimit\\t\\tsearch time limit\\n\"" )"", ""ExpressionStatement""]], ["""", [17971, ""True"", ""fprintf ( stderr , \""\\t-c timeout\\t\\tconnect timeout\\n\"" )"", ""ExpressionStatement""]], ["""", [17980, ""True"", ""fprintf ( stderr , \""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\"" )"", ""ExpressionStatement""]], ["""", [17989, ""True"", ""fprintf ( stderr , \""\\t-P\\t\\t\\tpersistent LDAP connection\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-t timelimit\\t\\tsearch time limit\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-c timeout\\t\\tconnect timeout\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-P\\t\\t\\tpersistent LDAP connection\\n\""""]]]",[],"[""\""\\t-R\\t\\t\\tdo not follow referrals\\n\""""]"
"fprintf ( stderr , ""\t-t timelimit\t\tsearch time limit\n"" )",547:8:17063:17119,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17971, ""True"", ""fprintf ( stderr , \""\\t-c timeout\\t\\tconnect timeout\\n\"" )"", ""ExpressionStatement""]], ["""", [17980, ""True"", ""fprintf ( stderr , \""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\"" )"", ""ExpressionStatement""]], ["""", [17989, ""True"", ""fprintf ( stderr , \""\\t-P\\t\\t\\tpersistent LDAP connection\\n\"" )"", ""ExpressionStatement""]], ["""", [17998, ""True"", ""fprintf ( stderr , \""\\t-p port\\t\\t\\tLDAP server port\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-c timeout\\t\\tconnect timeout\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-P\\t\\t\\tpersistent LDAP connection\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-p port\\t\\t\\tLDAP server port\\n\""""]]]",[],"[""\""\\t-t timelimit\\t\\tsearch time limit\\n\""""]"
"fprintf ( stderr , ""\t-c timeout\t\tconnect timeout\n"" )",546:8:17001:17053,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17980, ""True"", ""fprintf ( stderr , \""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\"" )"", ""ExpressionStatement""]], ["""", [17989, ""True"", ""fprintf ( stderr , \""\\t-P\\t\\t\\tpersistent LDAP connection\\n\"" )"", ""ExpressionStatement""]], ["""", [17998, ""True"", ""fprintf ( stderr , \""\\t-p port\\t\\t\\tLDAP server port\\n\"" )"", ""ExpressionStatement""]], ["""", [18007, ""True"", ""fprintf ( stderr , \""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-P\\t\\t\\tpersistent LDAP connection\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-p port\\t\\t\\tLDAP server port\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\""""]]]",[],"[""\""\\t-c timeout\\t\\tconnect timeout\\n\""""]"
"fprintf ( stderr , ""\t-E sslcertpath\t\tenable LDAP over SSL\n"" )",544:8:16923:16984,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17989, ""True"", ""fprintf ( stderr , \""\\t-P\\t\\t\\tpersistent LDAP connection\\n\"" )"", ""ExpressionStatement""]], ["""", [17998, ""True"", ""fprintf ( stderr , \""\\t-p port\\t\\t\\tLDAP server port\\n\"" )"", ""ExpressionStatement""]], ["""", [18007, ""True"", ""fprintf ( stderr , \""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\"" )"", ""ExpressionStatement""]], ["""", [18016, ""True"", ""fprintf ( stderr , \""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-P\\t\\t\\tpersistent LDAP connection\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-p port\\t\\t\\tLDAP server port\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\""""]]]",[],"[""\""\\t-E sslcertpath\\t\\tenable LDAP over SSL\\n\""""]"
"fprintf ( stderr , ""\t-P\t\t\tpersistent LDAP connection\n"" )",542:8:16830:16887,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [17998, ""True"", ""fprintf ( stderr , \""\\t-p port\\t\\t\\tLDAP server port\\n\"" )"", ""ExpressionStatement""]], ["""", [18007, ""True"", ""fprintf ( stderr , \""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\"" )"", ""ExpressionStatement""]], ["""", [18016, ""True"", ""fprintf ( stderr , \""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\"" )"", ""ExpressionStatement""]], ["""", [18025, ""True"", ""fprintf ( stderr , \""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-p port\\t\\t\\tLDAP server port\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\""""]]]",[],"[""\""\\t-P\\t\\t\\tpersistent LDAP connection\\n\""""]"
"fprintf ( stderr , ""\t-p port\t\t\tLDAP server port\n"" )",541:8:16768:16820,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18007, ""True"", ""fprintf ( stderr , \""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\"" )"", ""ExpressionStatement""]], ["""", [18016, ""True"", ""fprintf ( stderr , \""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\"" )"", ""ExpressionStatement""]], ["""", [18025, ""True"", ""fprintf ( stderr , \""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\"" )"", ""ExpressionStatement""]], ["""", [18034, ""True"", ""fprintf ( stderr , \""\\t-w bindpasswd\\t\\tpassword for binddn\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-w bindpasswd\\t\\tpassword for binddn\\n\""""]]]",[],"[""\""\\t-p port\\t\\t\\tLDAP server port\\n\""""]"
"fprintf ( stderr , ""\t-h server\t\tLDAP server (defaults to localhost)\n"" )",540:8:16687:16758,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18016, ""True"", ""fprintf ( stderr , \""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\"" )"", ""ExpressionStatement""]], ["""", [18025, ""True"", ""fprintf ( stderr , \""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\"" )"", ""ExpressionStatement""]], ["""", [18034, ""True"", ""fprintf ( stderr , \""\\t-w bindpasswd\\t\\tpassword for binddn\\n\"" )"", ""ExpressionStatement""]], ["""", [18043, ""True"", ""fprintf ( stderr , \""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-w bindpasswd\\t\\tpassword for binddn\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\""""]]]",[],"[""\""\\t-h server\\t\\tLDAP server (defaults to localhost)\\n\""""]"
"fprintf ( stderr , ""\t-H URI\t\t\tLDAPURI (defaults to ldap://localhost)\n"" )",538:8:16597:16670,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18025, ""True"", ""fprintf ( stderr , \""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\"" )"", ""ExpressionStatement""]], ["""", [18034, ""True"", ""fprintf ( stderr , \""\\t-w bindpasswd\\t\\tpassword for binddn\\n\"" )"", ""ExpressionStatement""]], ["""", [18043, ""True"", ""fprintf ( stderr , \""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\"" )"", ""ExpressionStatement""]], ["""", [18052, ""True"", ""fprintf ( stderr , \""\\t-s base|one|sub\\t\\tsearch scope\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-w bindpasswd\\t\\tpassword for binddn\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-s base|one|sub\\t\\tsearch scope\\n\""""]]]",[],"[""\""\\t-H URI\\t\\t\\tLDAPURI (defaults to ldap://localhost)\\n\""""]"
"fprintf ( stderr , ""\t-W secretfile\t\tread password for binddn from file secretfile\n"" )",536:8:16482:16567,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18034, ""True"", ""fprintf ( stderr , \""\\t-w bindpasswd\\t\\tpassword for binddn\\n\"" )"", ""ExpressionStatement""]], ["""", [18043, ""True"", ""fprintf ( stderr , \""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\"" )"", ""ExpressionStatement""]], ["""", [18052, ""True"", ""fprintf ( stderr , \""\\t-s base|one|sub\\t\\tsearch scope\\n\"" )"", ""ExpressionStatement""]], ["""", [18061, ""True"", ""fprintf ( stderr , \""\\t-u userattr\\t\\tusername DN attribute\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-w bindpasswd\\t\\tpassword for binddn\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-s base|one|sub\\t\\tsearch scope\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-u userattr\\t\\tusername DN attribute\\n\""""]]]",[],"[""\""\\t-W secretfile\\t\\tread password for binddn from file secretfile\\n\""""]"
"fprintf ( stderr , ""\t-w bindpasswd\t\tpassword for binddn\n"" )",535:8:16413:16472,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18043, ""True"", ""fprintf ( stderr , \""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\"" )"", ""ExpressionStatement""]], ["""", [18052, ""True"", ""fprintf ( stderr , \""\\t-s base|one|sub\\t\\tsearch scope\\n\"" )"", ""ExpressionStatement""]], ["""", [18061, ""True"", ""fprintf ( stderr , \""\\t-u userattr\\t\\tusername DN attribute\\n\"" )"", ""ExpressionStatement""]], ["""", [18070, ""True"", ""fprintf ( stderr , \""\\t-f filter\\t\\tsearch filter to locate user DN\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-s base|one|sub\\t\\tsearch scope\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-u userattr\\t\\tusername DN attribute\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-f filter\\t\\tsearch filter to locate user DN\\n\""""]]]",[],"[""\""\\t-w bindpasswd\\t\\tpassword for binddn\\n\""""]"
"fprintf ( stderr , ""\t-D binddn\t\tDN to bind as to perform searches\n"" )",534:8:16334:16403,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18052, ""True"", ""fprintf ( stderr , \""\\t-s base|one|sub\\t\\tsearch scope\\n\"" )"", ""ExpressionStatement""]], ["""", [18061, ""True"", ""fprintf ( stderr , \""\\t-u userattr\\t\\tusername DN attribute\\n\"" )"", ""ExpressionStatement""]], ["""", [18070, ""True"", ""fprintf ( stderr , \""\\t-f filter\\t\\tsearch filter to locate user DN\\n\"" )"", ""ExpressionStatement""]], ["""", [18079, ""True"", ""fprintf ( stderr , \""\\t-b basedn (REQUIRED)\\tbase dn under which to search\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-s base|one|sub\\t\\tsearch scope\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-u userattr\\t\\tusername DN attribute\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-f filter\\t\\tsearch filter to locate user DN\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-b basedn (REQUIRED)\\tbase dn under which to search\\n\""""]]]",[],"[""\""\\t-D binddn\\t\\tDN to bind as to perform searches\\n\""""]"
"fprintf ( stderr , ""\t-s base|one|sub\t\tsearch scope\n"" )",533:8:16270:16324,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18061, ""True"", ""fprintf ( stderr , \""\\t-u userattr\\t\\tusername DN attribute\\n\"" )"", ""ExpressionStatement""]], ["""", [18070, ""True"", ""fprintf ( stderr , \""\\t-f filter\\t\\tsearch filter to locate user DN\\n\"" )"", ""ExpressionStatement""]], ["""", [18079, ""True"", ""fprintf ( stderr , \""\\t-b basedn (REQUIRED)\\tbase dn under which to search\\n\"" )"", ""ExpressionStatement""]], ["""", [18088, ""True"", """", ""ExpressionStatement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-u userattr\\t\\tusername DN attribute\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-f filter\\t\\tsearch filter to locate user DN\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-b basedn (REQUIRED)\\tbase dn under which to search\\n\""""]], [[]]]",[],"[""\""\\t-s base|one|sub\\t\\tsearch scope\\n\""""]"
"fprintf ( stderr , ""\t-u userattr\t\tusername DN attribute\n"" )",532:8:16201:16260,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18070, ""True"", ""fprintf ( stderr , \""\\t-f filter\\t\\tsearch filter to locate user DN\\n\"" )"", ""ExpressionStatement""]], ["""", [18079, ""True"", ""fprintf ( stderr , \""\\t-b basedn (REQUIRED)\\tbase dn under which to search\\n\"" )"", ""ExpressionStatement""]], ["""", [18088, ""True"", """", ""ExpressionStatement""]], ["""", [18089, ""True"", "")"", ""Statement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-f filter\\t\\tsearch filter to locate user DN\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-b basedn (REQUIRED)\\tbase dn under which to search\\n\""""]], [[]], [[]]]",[],"[""\""\\t-u userattr\\t\\tusername DN attribute\\n\""""]"
"fprintf ( stderr , ""\t-f filter\t\tsearch filter to locate user DN\n"" )",531:8:16124:16191,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18079, ""True"", ""fprintf ( stderr , \""\\t-b basedn (REQUIRED)\\tbase dn under which to search\\n\"" )"", ""ExpressionStatement""]], ["""", [18088, ""True"", """", ""ExpressionStatement""]], ["""", [18089, ""True"", "")"", ""Statement""]], ["""", [18090, ""True"", ""\"" -b basedn [options] [ldap_server_name[:port]]...\\n\\n\"""", ""Statement""]]]","[[[""!"", ""basedn""]], [[""fprintf"", ""stderr"", ""\""\\t-b basedn (REQUIRED)\\tbase dn under which to search\\n\""""]], [[]], [[]], [[]]]",[],"[""\""\\t-f filter\\t\\tsearch filter to locate user DN\\n\""""]"
"fprintf ( stderr , ""\t-b basedn (REQUIRED)\tbase dn under which to search\n"" )",530:8:16040:16114,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18097, ""True"", ""! basedn"", ""Condition""]]]","[["""", [18088, ""True"", """", ""ExpressionStatement""]], ["""", [18089, ""True"", "")"", ""Statement""]], ["""", [18090, ""True"", ""\"" -b basedn [options] [ldap_server_name[:port]]...\\n\\n\"""", ""Statement""]], ["""", [18091, ""True"", ""PROGRAM_NAME"", ""Statement""]]]","[[[""!"", ""basedn""]], [[]], [[]], [[]], [[]]]",[],"[""\""\\t-b basedn (REQUIRED)\\tbase dn under which to search\\n\""""]"
"fprintf ( stderr , ""TLS (-Z) is incompatible with version %d\n"" , version )",494:16:14958:15052,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""True"", [18276, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'Z'"", [18697, ""True"", ""option"", ""Condition""]], [""case 'P'"", [18786, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]","[["""", [18280, ""True"", ""case 'Z' :"", ""Label""]], ["""", [18699, ""True"", ""-- argc"", ""ExpressionStatement""]]]","[[[""version"", ""LDAP_VERSION2"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[]], [[""argc""]]]","[[[""version"", ""LDAP_VERSION3"", ""=""], ""version""], [[""version"", ""LDAP_VERSION2"", ""=""], ""version""], [[""version"", ""LDAP_VERSION3"", ""=""], ""version""]]","[""\""TLS (-Z) is incompatible with version %d\\n\""""]"
"fprintf ( stderr , ""Protocol version should be 2 or 3\n"" )",488:16:14766:14820,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""default"", [18314, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'v'"", [18697, ""True"", ""option"", ""Condition""]], [""case 'P'"", [18786, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]","[["""", [18300, ""True"", ""default :"", ""Label""]], ["""", [18321, ""True"", ""case 'v' :"", ""Label""]]]","[[[""atoi"", ""const char *""]], [[""char"", ""'v'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""default""]], [[]]]",[],"[""\""Protocol version should be 2 or 3\\n\""""]"
"fprintf ( stderr , ""ERROR: Your LDAP library does not have URI support\n"" )",388:12:11655:11726,/data/download/squid/squid-3.5.25/helpers/basic_auth/LDAP/basic_ldap_auth.cc,"[[""case 'H'"", [18697, ""True"", ""option"", ""Condition""]], [""case 'P'"", [18786, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]","[["""", [18696, ""True"", ""case 'H' :"", ""Label""]], ["""", [18699, ""True"", ""-- argc"", ""ExpressionStatement""]], ["""", [18703, ""True"", ""++ argv"", ""ExpressionStatement""]]]","[[[""char"", ""'H'"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[]], [[""argc""]], [[""argv""]]]",[],"[""\""ERROR: Your LDAP library does not have URI support\\n\""""]"
"fprintf ( stderr , ""ERROR: Missing user name at %s line %d\n"" , passwdfile , lineCount )",97:12:2553:2635,/data/download/squid/squid-3.5.25/helpers/basic_auth/NCSA/basic_ncsa_auth.cc,"[[""True"", [20087, ""True"", ""user == NULL"", ""Condition""]], [""False"", [20104, ""True"", ""( buf [ 0 ] == '#' ) || ( buf [ 0 ] == ' ' ) || ( buf [ 0 ] == '\\t' ) || ( buf [ 0 ] == '\\n' )"", ""Condition""]], [""True"", [20132, ""True"", ""fgets ( buf , sizeof ( buf ) - 1 , f ) != NULL"", ""Condition""]]]","[["""", [20091, ""True"", ""user = strtok ( buf , \"":\\n\\r\"" )"", ""ExpressionStatement""]], ["""", [20128, ""True"", ""++ lineCount"", ""ExpressionStatement""]]]","[[[""char *"", ""NULL"", ""==""]], [[""char [ HELPER_INPUT_BUFFER ]"", ""0"", ""'#'"", ""=="", ""char [ HELPER_INPUT_BUFFER ]"", ""0"", ""' '"", ""=="", ""char [ HELPER_INPUT_BUFFER ]"", ""0"", ""'\\t'"", ""=="", ""char [ HELPER_INPUT_BUFFER ]"", ""0"", ""'\\n'"", ""=="", ""||"", ""||"", ""||""]], [[""fgets"", ""char [ HELPER_INPUT_BUFFER ]"", ""1"", ""-"", ""FILE *"", ""NULL"", ""!=""]], [[""char *"", ""strtok"", ""char [ HELPER_INPUT_BUFFER ]"", ""\"":\\n\\r\"""", ""=""]], [[""lineCount""]]]","[[[""unsigned int"", ""unsigned int"", ""0"", ""=""], ""unsigned int""], [[""const char *""], ""const char *""]]","[""\""ERROR: Missing user name at %s line %d\\n\""""]"
"fprintf ( stderr , ""FATAL: %s: %s\n"" , passwdfile , xstrerror ( ) )",85:8:2123:2182,/data/download/squid/squid-3.5.25/helpers/basic_auth/NCSA/basic_ncsa_auth.cc,"[[""True"", [20189, ""True"", ""NULL == f"", ""Condition""]]]","[["""", [20193, ""True"", ""f = fopen ( passwdfile , \""r\"" )"", ""ExpressionStatement""]], ["""", [20206, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [20213, ""True"", ""fprintf ( stderr , \""FATAL: Cannot create hash table\\n\"" )"", ""ExpressionStatement""]], ["""", [20226, ""True"", ""hash = hash_create ( ( HASHCMP * ) strcmp , 7921 , hash_string )"", ""ExpressionStatement""]]]","[[[""NULL"", ""FILE *"", ""==""]], [[""FILE *"", ""fopen"", ""const char *"", ""\""r\"""", ""=""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""FATAL: Cannot create hash table\\n\""""]], [[""hash"", ""hash_create"", ""strcmp"", ""7921"", ""hash_string"", ""=""]]]","[[[""const char *""], ""const char *""]]","[""\""FATAL: %s: %s\\n\""""]"
"fprintf ( stderr , ""FATAL: Cannot create hash table\n"" )",80:8:1985:2037,/data/download/squid/squid-3.5.25/helpers/basic_auth/NCSA/basic_ncsa_auth.cc,"[[""True"", [20222, ""True"", ""NULL == hash"", ""Condition""]]]","[["""", [20226, ""True"", ""hash = hash_create ( ( HASHCMP * ) strcmp , 7921 , hash_string )"", ""ExpressionStatement""]], ["""", [20243, ""True"", ""hashFreeMemory ( hash )"", ""ExpressionStatement""]], ["""", [20250, ""True"", ""hashFreeItems ( hash , my_free )"", ""ExpressionStatement""]], ["""", [20263, ""True"", ""char * passwd ;"", ""IdentifierDeclStatement""]]]","[[[""NULL"", ""hash"", ""==""]], [[""hash"", ""hash_create"", ""strcmp"", ""7921"", ""hash_string"", ""=""]], [[""hashFreeMemory"", ""hash""]], [[""hashFreeItems"", ""hash"", ""my_free""]], [[""char *""]]]",[],"[""\""FATAL: Cannot create hash table\\n\""""]"
"fprintf ( stderr , ""FATAL: cannot stat %s\n"" , argv [ 1 ] )",125:8:3313:3364,/data/download/squid/squid-3.5.25/helpers/basic_auth/NCSA/basic_ncsa_auth.cc,"[[""True"", [20758, ""True"", ""stat ( argv [ 1 ] , & sb ) != 0"", ""Condition""]]]","[["""", [20775, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [20782, ""True"", ""fprintf ( stderr , \""Usage: ncsa_auth <passwordfile>\\n\"" )"", ""ExpressionStatement""]], ["""", [20795, ""True"", ""setbuf ( stdout , NULL )"", ""ExpressionStatement""]], ["""", [20804, ""True"", ""user_data * u ;"", ""IdentifierDeclStatement""]]]","[[[""stat"", ""char * *"", ""1"", ""&"", ""sb"", ""0"", ""!=""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""Usage: ncsa_auth <passwordfile>\\n\""""]], [[""setbuf"", ""stdout"", ""NULL""]], [[""user_data *""]]]","[[[""char * *""], ""char * *""]]","[""\""FATAL: cannot stat %s\\n\"""", ""1""]"
"fprintf ( stderr , ""Usage: ncsa_auth <passwordfile>\n"" )",121:8:3193:3245,/data/download/squid/squid-3.5.25/helpers/basic_auth/NCSA/basic_ncsa_auth.cc,"[[""True"", [20791, ""True"", ""argc != 2"", ""Condition""]]]","[["""", [20795, ""True"", ""setbuf ( stdout , NULL )"", ""ExpressionStatement""]], ["""", [20804, ""True"", ""user_data * u ;"", ""IdentifierDeclStatement""]], ["""", [20808, ""True"", ""char * user , * passwd , * p ;"", ""IdentifierDeclStatement""]]]","[[[""int"", ""2"", ""!=""]], [[""setbuf"", ""stdout"", ""NULL""]], [[""user_data *""]], [[""user"", ""char *"", ""p""]]]",[],"[""\""Usage: ncsa_auth <passwordfile>\\n\""""]"
"fprintf ( stderr , ""Example basic_yp_auth mydomain.com passwd.byname\n"" )",49:8:1036:1105,/data/download/squid/squid-3.5.25/helpers/basic_auth/NIS/basic_nis_auth.cc,"[[""True"", [22190, ""True"", ""argc != 3"", ""Condition""]]]","[["""", [22172, ""True"", ""fprintf ( stderr , \""\\n\"" )"", ""ExpressionStatement""]], ["""", [22181, ""True"", ""fprintf ( stderr , \""Usage: basic_yp_auth <domainname> <nis map for password>\\n\"" )"", ""ExpressionStatement""]], ["""", [22194, ""True"", ""setbuf ( stdout , NULL )"", ""ExpressionStatement""]]]","[[[""int"", ""3"", ""!=""]], [[""fprintf"", ""stderr"", ""\""\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: basic_yp_auth <domainname> <nis map for password>\\n\""""]], [[""setbuf"", ""stdout"", ""NULL""]]]",[],"[""\""Example basic_yp_auth mydomain.com passwd.byname\\n\""""]"
"fprintf ( stderr , ""\n"" )",48:8:1005:1026,/data/download/squid/squid-3.5.25/helpers/basic_auth/NIS/basic_nis_auth.cc,"[[""True"", [22190, ""True"", ""argc != 3"", ""Condition""]]]","[["""", [22181, ""True"", ""fprintf ( stderr , \""Usage: basic_yp_auth <domainname> <nis map for password>\\n\"" )"", ""ExpressionStatement""]], ["""", [22194, ""True"", ""setbuf ( stdout , NULL )"", ""ExpressionStatement""]], ["""", [22203, ""True"", ""char * nispasswd ;"", ""IdentifierDeclStatement""]]]","[[[""int"", ""3"", ""!=""]], [[""fprintf"", ""stderr"", ""\""Usage: basic_yp_auth <domainname> <nis map for password>\\n\""""]], [[""setbuf"", ""stdout"", ""NULL""]], [[""char *""]]]",[],"[""\""\\n\""""]"
"fprintf ( stderr , ""Usage: basic_yp_auth <domainname> <nis map for password>\n"" )",47:8:918:995,/data/download/squid/squid-3.5.25/helpers/basic_auth/NIS/basic_nis_auth.cc,"[[""True"", [22190, ""True"", ""argc != 3"", ""Condition""]]]","[["""", [22194, ""True"", ""setbuf ( stdout , NULL )"", ""ExpressionStatement""]], ["""", [22203, ""True"", ""char * nispasswd ;"", ""IdentifierDeclStatement""]], ["""", [22207, ""True"", ""char * user , * passwd , * p ;"", ""IdentifierDeclStatement""]]]","[[[""int"", ""3"", ""!=""]], [[""setbuf"", ""stdout"", ""NULL""]], [[""char *""]], [[""user"", ""char *"", ""p""]]]",[],"[""\""Usage: basic_yp_auth <domainname> <nis map for password>\\n\""""]"
"fprintf ( stderr , "" -r        Detect and remove Negotiate/NTLM realm from username\n"" )",157:4:5560:5644,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,[],"[["""", [22446, ""True"", ""fprintf ( stderr , \"" -1        Only one user authentication per PAM connection\\n\"" )"", ""ExpressionStatement""]], ["""", [22455, ""True"", ""fprintf ( stderr , \"" -o        Do not perform account mgmt (account expiration etc)\\n\"" )"", ""ExpressionStatement""]], ["""", [22464, ""True"", ""fprintf ( stderr , \""           to authenticate all users\\n\"" )"", ""ExpressionStatement""]], ["""", [22473, ""True"", ""fprintf ( stderr , \""           during this time the same connection will be reused\\n\"" )"", ""ExpressionStatement""]]]","[[[""fprintf"", ""stderr"", ""\"" -1        Only one user authentication per PAM connection\\n\""""]], [[""fprintf"", ""stderr"", ""\"" -o        Do not perform account mgmt (account expiration etc)\\n\""""]], [[""fprintf"", ""stderr"", ""\""           to authenticate all users\\n\""""]], [[""fprintf"", ""stderr"", ""\""           during this time the same connection will be reused\\n\""""]]]",[],"[""\"" -r        Detect and remove Negotiate/NTLM realm from username\\n\""""]"
"fprintf ( stderr , "" -1        Only one user authentication per PAM connection\n"" )",156:4:5475:5554,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,[],"[["""", [22455, ""True"", ""fprintf ( stderr , \"" -o        Do not perform account mgmt (account expiration etc)\\n\"" )"", ""ExpressionStatement""]], ["""", [22464, ""True"", ""fprintf ( stderr , \""           to authenticate all users\\n\"" )"", ""ExpressionStatement""]], ["""", [22473, ""True"", ""fprintf ( stderr , \""           during this time the same connection will be reused\\n\"" )"", ""ExpressionStatement""]], ["""", [22482, ""True"", ""fprintf ( stderr , \"" -t ttl    PAM connection ttl in seconds (default %d)\\n\"" , DEFAULT_SQUID_PAM_TTL )"", ""ExpressionStatement""]]]","[[[""fprintf"", ""stderr"", ""\"" -o        Do not perform account mgmt (account expiration etc)\\n\""""]], [[""fprintf"", ""stderr"", ""\""           to authenticate all users\\n\""""]], [[""fprintf"", ""stderr"", ""\""           during this time the same connection will be reused\\n\""""]], [[""fprintf"", ""stderr"", ""\"" -t ttl    PAM connection ttl in seconds (default %d)\\n\"""", ""DEFAULT_SQUID_PAM_TTL""]]]",[],"[""\"" -1        Only one user authentication per PAM connection\\n\""""]"
"fprintf ( stderr , "" -o        Do not perform account mgmt (account expiration etc)\n"" )",155:4:5385:5469,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,[],"[["""", [22464, ""True"", ""fprintf ( stderr , \""           to authenticate all users\\n\"" )"", ""ExpressionStatement""]], ["""", [22473, ""True"", ""fprintf ( stderr , \""           during this time the same connection will be reused\\n\"" )"", ""ExpressionStatement""]], ["""", [22482, ""True"", ""fprintf ( stderr , \"" -t ttl    PAM connection ttl in seconds (default %d)\\n\"" , DEFAULT_SQUID_PAM_TTL )"", ""ExpressionStatement""]], ["""", [22493, ""True"", ""fprintf ( stderr , \""           The PAM service name (default \\\""%s\\\"")\\n\"" , DEFAULT_SQUID_PAM_SERVICE )"", ""ExpressionStatement""]]]","[[[""fprintf"", ""stderr"", ""\""           to authenticate all users\\n\""""]], [[""fprintf"", ""stderr"", ""\""           during this time the same connection will be reused\\n\""""]], [[""fprintf"", ""stderr"", ""\"" -t ttl    PAM connection ttl in seconds (default %d)\\n\"""", ""DEFAULT_SQUID_PAM_TTL""]], [[""fprintf"", ""stderr"", ""\""           The PAM service name (default \\\""%s\\\"")\\n\"""", ""DEFAULT_SQUID_PAM_SERVICE""]]]",[],"[""\"" -o        Do not perform account mgmt (account expiration etc)\\n\""""]"
"fprintf ( stderr , ""           to authenticate all users\n"" )",154:4:5322:5379,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,[],"[["""", [22473, ""True"", ""fprintf ( stderr , \""           during this time the same connection will be reused\\n\"" )"", ""ExpressionStatement""]], ["""", [22482, ""True"", ""fprintf ( stderr , \"" -t ttl    PAM connection ttl in seconds (default %d)\\n\"" , DEFAULT_SQUID_PAM_TTL )"", ""ExpressionStatement""]], ["""", [22493, ""True"", ""fprintf ( stderr , \""           The PAM service name (default \\\""%s\\\"")\\n\"" , DEFAULT_SQUID_PAM_SERVICE )"", ""ExpressionStatement""]], ["""", [22504, ""True"", ""fprintf ( stderr , \"" -n service_name\\n\"" )"", ""ExpressionStatement""]]]","[[[""fprintf"", ""stderr"", ""\""           during this time the same connection will be reused\\n\""""]], [[""fprintf"", ""stderr"", ""\"" -t ttl    PAM connection ttl in seconds (default %d)\\n\"""", ""DEFAULT_SQUID_PAM_TTL""]], [[""fprintf"", ""stderr"", ""\""           The PAM service name (default \\\""%s\\\"")\\n\"""", ""DEFAULT_SQUID_PAM_SERVICE""]], [[""fprintf"", ""stderr"", ""\"" -n service_name\\n\""""]]]",[],"[""\""           to authenticate all users\\n\""""]"
"fprintf ( stderr , ""           during this time the same connection will be reused\n"" )",153:4:5233:5316,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,[],"[["""", [22482, ""True"", ""fprintf ( stderr , \"" -t ttl    PAM connection ttl in seconds (default %d)\\n\"" , DEFAULT_SQUID_PAM_TTL )"", ""ExpressionStatement""]], ["""", [22493, ""True"", ""fprintf ( stderr , \""           The PAM service name (default \\\""%s\\\"")\\n\"" , DEFAULT_SQUID_PAM_SERVICE )"", ""ExpressionStatement""]], ["""", [22504, ""True"", ""fprintf ( stderr , \"" -n service_name\\n\"" )"", ""ExpressionStatement""]], ["""", [22513, ""True"", ""fprintf ( stderr , \""Usage: %s [options..]\\n\"" , program )"", ""ExpressionStatement""]]]","[[[""fprintf"", ""stderr"", ""\"" -t ttl    PAM connection ttl in seconds (default %d)\\n\"""", ""DEFAULT_SQUID_PAM_TTL""]], [[""fprintf"", ""stderr"", ""\""           The PAM service name (default \\\""%s\\\"")\\n\"""", ""DEFAULT_SQUID_PAM_SERVICE""]], [[""fprintf"", ""stderr"", ""\"" -n service_name\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: %s [options..]\\n\"""", ""char *""]]]",[],"[""\""           during this time the same connection will be reused\\n\""""]"
"fprintf ( stderr , "" -t ttl    PAM connection ttl in seconds (default %d)\n"" , DEFAULT_SQUID_PAM_TTL )",152:4:5130:5227,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,[],"[["""", [22493, ""True"", ""fprintf ( stderr , \""           The PAM service name (default \\\""%s\\\"")\\n\"" , DEFAULT_SQUID_PAM_SERVICE )"", ""ExpressionStatement""]], ["""", [22504, ""True"", ""fprintf ( stderr , \"" -n service_name\\n\"" )"", ""ExpressionStatement""]], ["""", [22513, ""True"", ""fprintf ( stderr , \""Usage: %s [options..]\\n\"" , program )"", ""ExpressionStatement""]], ["""", [22432, ""True"", ""char * program"", ""Parameter""]]]","[[[""fprintf"", ""stderr"", ""\""           The PAM service name (default \\\""%s\\\"")\\n\"""", ""DEFAULT_SQUID_PAM_SERVICE""]], [[""fprintf"", ""stderr"", ""\"" -n service_name\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: %s [options..]\\n\"""", ""char *""]], [[""char *""]]]",[],"[""\"" -t ttl    PAM connection ttl in seconds (default %d)\\n\""""]"
"fprintf ( stderr , ""           The PAM service name (default \""%s\"")\n"" , DEFAULT_SQUID_PAM_SERVICE )",151:4:5028:5124,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,[],"[["""", [22504, ""True"", ""fprintf ( stderr , \"" -n service_name\\n\"" )"", ""ExpressionStatement""]], ["""", [22513, ""True"", ""fprintf ( stderr , \""Usage: %s [options..]\\n\"" , program )"", ""ExpressionStatement""]], ["""", [22432, ""True"", ""char * program"", ""Parameter""]], ["""", [22524, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""fprintf"", ""stderr"", ""\"" -n service_name\\n\""""]], [[""fprintf"", ""stderr"", ""\""Usage: %s [options..]\\n\"""", ""char *""]], [[""char *""]], [[""ENTRY""]]]",[],"[""\""           The PAM service name (default \\\""%s\\\"")\\n\""""]"
"fprintf ( stderr , "" -n service_name\n"" )",150:4:4985:5022,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,[],"[["""", [22513, ""True"", ""fprintf ( stderr , \""Usage: %s [options..]\\n\"" , program )"", ""ExpressionStatement""]], ["""", [22432, ""True"", ""char * program"", ""Parameter""]], ["""", [22524, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""fprintf"", ""stderr"", ""\""Usage: %s [options..]\\n\"""", ""char *""]], [[""char *""]], [[""ENTRY""]]]",[],"[""\"" -n service_name\\n\""""]"
"fprintf ( stderr , ""Usage: %s [options..]\n"" , program )",149:4:4928:4979,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,[],"[["""", [22432, ""True"", ""char * program"", ""Parameter""]], ["""", [22524, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""char *""]], [[""ENTRY""]]]","[[[""char *""], ""char *""]]","[""\""Usage: %s [options..]\\n\""""]"
"fprintf ( stderr , ""FATAL: Unknown option '%s'\n"" , argv [ optind ] )",205:8:6716:6777,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,"[[""True"", [23088, ""True"", ""optind < argc"", ""Condition""]]]","[["""", [23092, ""True"", ""start :"", ""Label""]], ["""", [23162, ""True"", ""goto start ;"", ""GotoStatement""]], ["""", [23164, ""True"", ""1 :"", ""Label""]], ["""", [23098, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [23127, ""True"", ""break ;"", ""BreakStatement""]], ["""", [23133, ""True"", ""break ;"", ""BreakStatement""]], ["""", [23139, ""True"", ""break ;"", ""BreakStatement""]], ["""", [23145, ""True"", ""break ;"", ""BreakStatement""]], ["""", [23156, ""True"", ""break ;"", ""BreakStatement""]], ["""", [23187, ""True"", ""setvbuf ( stdout , NULL , _IOLBF , 0 )"", ""ExpressionStatement""]]]","[[[""optind"", ""int"", ""<""]], [[""start""]], [[""start""]], [[]], [[""exit"", ""1""]], [[]], [[]], [[]], [[]], [[]], [[""setvbuf"", ""stdout"", ""NULL"", ""_IOLBF"", ""0""]]]","[[[""char * [ ]""], ""char * [ ]""]]","[""\""FATAL: Unknown option '%s'\\n\""""]"
"fprintf ( stderr , ""FATAL: Unknown getopt value '%c'\n"" , ch )",198:12:6552:6609,/data/download/squid/squid-3.5.25/helpers/basic_auth/PAM/basic_pam_auth.cc,"[[""default"", [23167, ""True"", ""ch"", ""Condition""]], [""True"", [23185, ""True"", ""1"", ""Condition""]], [""case 'n'"", [23167, ""True"", ""ch"", ""Condition""]], [""True"", [23185, ""True"", ""1"", ""Condition""]]]","[["""", [23125, ""True"", ""default :"", ""Label""]], ["""", [23169, ""True"", ""int ch = getopt ( argc , argv , \""1n:t:or\"" ) ;"", ""IdentifierDeclStatement""]]]","[[[""int""]], [[""1""]], [[""int"", ""'n'"", ""==""]], [[""1""]], [[""default""]], [[""int"", ""int"", ""getopt"", ""int"", ""char * [ ]"", ""\""1n:t:or\"""", ""=""]]]","[[[""int"", ""int"", ""getopt"", ""int"", ""char * [ ]"", ""\""1n:t:or\"""", ""=""], ""int""]]","[""\""FATAL: Unknown getopt value '%c'\\n\""""]"
"fprintf ( stderr , ""%s: No response from RADIUS server\n"" , progname )",464:4:12232:12297,/data/download/squid/squid-3.5.25/helpers/basic_auth/RADIUS/basic_radius_auth.cc,"[[""False"", [24505, ""True"", ""retry"", ""Condition""]], [""True"", [24338, ""True"", ""select ( socket_fd + 1 , & readfds , NULL , NULL , & tv ) == 0"", ""Condition""]], [""True"", [24426, ""True"", ""( time_spent = time_since ( & sent ) ) < 1000000"", ""Condition""]], [""True"", [24465, ""True"", ""send ( socket_fd , ( char * ) auth , total_length , 0 ) < 0"", ""Condition""]], [""True"", [24426, ""True"", ""( time_spent = time_since ( & sent ) ) < 1000000"", ""Condition""]], [""False"", [24258, ""True"", ""rc == 1"", ""Condition""]], [""False"", [24299, ""True"", ""len < 0"", ""Condition""]], [""False"", [24465, ""True"", ""send ( socket_fd , ( char * ) auth , total_length , 0 ) < 0"", ""Condition""]], [""True"", [24505, ""True"", ""retry"", ""Condition""]], [""False"", [24258, ""True"", ""rc == 1"", ""Condition""]], [""False"", [24299, ""True"", ""len < 0"", ""Condition""]], [""False"", [24465, ""True"", ""send ( socket_fd , ( char * ) auth , total_length , 0 ) < 0"", ""Condition""]], [""False"", [24272, ""True"", ""rc == 0"", ""Condition""]], [""False"", [24338, ""True"", ""select ( socket_fd + 1 , & readfds , NULL , NULL , & tv ) == 0"", ""Condition""]], [""True"", [24505, ""True"", ""retry"", ""Condition""]], [""True"", [24338, ""True"", ""select ( socket_fd + 1 , & readfds , NULL , NULL , & tv ) == 0"", ""Condition""]], [""True"", [24426, ""True"", ""( time_spent = time_since ( & sent ) ) < 1000000"", ""Condition""]], [""True"", [24465, ""True"", ""send ( socket_fd , ( char * ) auth , total_length , 0 ) < 0"", ""Condition""]]]","[["""", [24337, ""True"", ""break ;"", ""BreakStatement""]], ["""", [24441, ""True"", ""continue ;"", ""ContinueStatement""]], ["""", [24507, ""True"", ""auth -> length = htons ( total_length )"", ""ExpressionStatement""]], ["""", [24298, ""True"", ""continue ;"", ""ContinueStatement""]], ["""", [24443, ""True"", ""fprintf ( stderr , \""ERROR: RADIUS send() failure: %s\\n\"" , xstrerror ( ) )"", ""ExpressionStatement""]], ["""", [24521, ""True"", ""total_length += 6"", ""ExpressionStatement""]], ["""", [24572, ""True"", ""total_length += len + 2"", ""ExpressionStatement""]], ["""", [24361, ""True"", ""FD_SET ( socket_fd , & readfds )"", ""ExpressionStatement""]], ["""", [24482, ""True"", ""gettimeofday ( & sent , NULL )"", ""ExpressionStatement""]], ["""", [24525, ""True"", ""ptr += 4"", ""ExpressionStatement""]], ["""", [24578, ""True"", ""ptr += len"", ""ExpressionStatement""]]]","[[[""int""]], [[""select"", ""int"", ""1"", ""+"", ""&"", ""readfds"", ""NULL"", ""NULL"", ""&"", ""tv"", ""0"", ""==""]], [[""time_spent"", ""time_since"", ""&"", ""sent"", ""="", ""1000000"", ""<""]], [[""send"", ""int"", ""AUTH_HDR *"", ""unsigned short"", ""0"", ""0"", ""<""]], [[""time_spent"", ""time_since"", ""&"", ""sent"", ""="", ""1000000"", ""<""]], [[""int"", ""1"", ""==""]], [[""int"", ""0"", ""<""]], [[""send"", ""int"", ""AUTH_HDR *"", ""unsigned short"", ""0"", ""0"", ""<""]], [[""int""]], [[""int"", ""1"", ""==""]], [[""int"", ""0"", ""<""]], [[""send"", ""int"", ""AUTH_HDR *"", ""unsigned short"", ""0"", ""0"", ""<""]], [[""int"", ""0"", ""==""]], [[""select"", ""int"", ""1"", ""+"", ""&"", ""readfds"", ""NULL"", ""NULL"", ""&"", ""tv"", ""0"", ""==""]], [[""int""]], [[""select"", ""int"", ""1"", ""+"", ""&"", ""readfds"", ""NULL"", ""NULL"", ""&"", ""tv"", ""0"", ""==""]], [[""time_spent"", ""time_since"", ""&"", ""sent"", ""="", ""1000000"", ""<""]], [[""send"", ""int"", ""AUTH_HDR *"", ""unsigned short"", ""0"", ""0"", ""<""]], [[]], [[]], [[""AUTH_HDR *"", ""length"", ""htons"", ""unsigned short"", ""=""]], [[]], [[""fprintf"", ""stderr"", ""\""ERROR: RADIUS send() failure: %s\\n\"""", ""xstrerror""]], [[""unsigned short"", ""6"", ""+=""]], [[""unsigned short"", ""int"", ""2"", ""+"", ""+=""]], [[""FD_SET"", ""int"", ""&"", ""readfds""]], [[""gettimeofday"", ""&"", ""sent"", ""NULL""]], [[""u_char *"", ""4"", ""+=""]], [[""u_char *"", ""int"", ""+=""]]]",[],"[""\""%s: No response from RADIUS server\\n\""""]"
"fprintf ( stderr , ""ERROR: RADIUS send() failure: %s\n"" , xstrerror ( ) )",428:16:11079:11144,/data/download/squid/squid-3.5.25/helpers/basic_auth/RADIUS/basic_radius_auth.cc,"[[""True"", [24457, ""True"", ""errno != EAGAIN && errno != EWOULDBLOCK"", ""Condition""]], [""True"", [24465, ""True"", ""send ( socket_fd , ( char * ) auth , total_length , 0 ) < 0"", ""Condition""]], [""True"", [24505, ""True"", ""retry"", ""Condition""]], [""True"", [24338, ""True"", ""select ( socket_fd + 1 , & readfds , NULL , NULL , & tv ) == 0"", ""Condition""]], [""True"", [24426, ""True"", ""( time_spent = time_since ( & sent ) ) < 1000000"", ""Condition""]], [""True"", [24465, ""True"", ""send ( socket_fd , ( char * ) auth , total_length , 0 ) < 0"", ""Condition""]]]","[["""", [24482, ""True"", ""gettimeofday ( & sent , NULL )"", ""ExpressionStatement""]], ["""", [24493, ""True"", ""struct timeval sent ;"", ""IdentifierDeclStatement""]]]","[[[""errno"", ""EAGAIN"", ""!=""]], [[""errno"", ""EWOULDBLOCK"", ""!=""]], [[""send"", ""int"", ""AUTH_HDR *"", ""unsigned short"", ""0"", ""0"", ""<""]], [[""int""]], [[""select"", ""int"", ""1"", ""+"", ""&"", ""readfds"", ""NULL"", ""NULL"", ""&"", ""tv"", ""0"", ""==""]], [[""time_spent"", ""time_since"", ""&"", ""sent"", ""="", ""1000000"", ""<""]], [[""send"", ""int"", ""AUTH_HDR *"", ""unsigned short"", ""0"", ""0"", ""<""]], [[""gettimeofday"", ""&"", ""sent"", ""NULL""]], [[""struct timeval""]]]",[],"[""\""ERROR: RADIUS send() failure: %s\\n\""""]"
"fprintf ( stderr , ""%s| ERROR: fcntl() failure: %s\n"" , argv [ 0 ] , xstrerror ( ) )",576:8:15438:15510,/data/download/squid/squid-3.5.25/helpers/basic_auth/RADIUS/basic_radius_auth.cc,"[[""True"", [25425, ""True"", ""fcntl ( sockfd , F_SETFL , fcntl ( sockfd , F_GETFL , 0 ) | O_NONBLOCK ) < 0"", ""Condition""]], [""False"", [25805, ""True"", ""setvbuf ( stdout , NULL , _IOLBF , 0 ) != 0"", ""Condition""]]]","[["""", [25451, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [25458, ""True"", ""perror ( \""getsockname\"" )"", ""ExpressionStatement""]], ["""", [25484, ""True"", ""salen = sizeof ( salocal )"", ""ExpressionStatement""]], ["""", [25492, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]]]","[[[""fcntl"", ""sockfd"", ""F_SETFL"", ""fcntl"", ""sockfd"", ""F_GETFL"", ""0"", ""O_NONBLOCK"", ""|"", ""0"", ""<""]], [[""setvbuf"", ""stdout"", ""NULL"", ""_IOLBF"", ""0"", ""0"", ""!=""]], [[""exit"", ""1""]], [[""perror"", ""\""getsockname\""""]], [[""socklen_t"", ""=""]], [[""exit"", ""1""]]]","[[[""char * *""], ""char * *""]]","[""\""%s| ERROR: fcntl() failure: %s\\n\"""", ""0""]"
"fprintf ( stderr , ""FATAL: %s: Couldn't find host %s\n"" , argv [ 0 ] , server )",552:8:14665:14735,/data/download/squid/squid-3.5.25/helpers/basic_auth/RADIUS/basic_radius_auth.cc,"[[""True"", [25627, ""True"", ""( auth_ipaddr = get_ipaddr ( server ) ) == 0"", ""Condition""]], [""False"", [25805, ""True"", ""setvbuf ( stdout , NULL , _IOLBF , 0 ) != 0"", ""Condition""]]]","[["""", [25639, ""True"", ""svc_port = PW_AUTH_UDP_PORT"", ""ExpressionStatement""]], ["""", [25649, ""True"", ""svc_port = atoi ( svc_name )"", ""ExpressionStatement""]], ["""", [25658, ""True"", ""svc_port = ntohs ( ( unsigned short ) svp -> s_port )"", ""ExpressionStatement""]], ["""", [25649, ""True"", ""svc_port = atoi ( svc_name )"", ""ExpressionStatement""]], ["""", [25658, ""True"", ""svc_port = ntohs ( ( unsigned short ) svp -> s_port )"", ""ExpressionStatement""]]]","[[[""auth_ipaddr"", ""get_ipaddr"", ""server"", ""="", ""0"", ""==""]], [[""setvbuf"", ""stdout"", ""NULL"", ""_IOLBF"", ""0"", ""0"", ""!=""]], [[""unsigned short"", ""PW_AUTH_UDP_PORT"", ""=""]], [[""unsigned short"", ""atoi"", ""svc_name"", ""=""]], [[""unsigned short"", ""ntohs"", ""struct servent *"", ""s_port"", ""=""]], [[""unsigned short"", ""atoi"", ""svc_name"", ""=""]], [[""unsigned short"", ""ntohs"", ""struct servent *"", ""s_port"", ""=""]]]","[[[""char * *""], ""char * *""]]","[""\""FATAL: %s: Couldn't find host %s\\n\"""", ""0""]"
"fprintf ( stderr , ""FATAL: %s: Shared secret not specified\n"" , argv [ 0 ] )",529:8:14042:14110,/data/download/squid/squid-3.5.25/helpers/basic_auth/RADIUS/basic_radius_auth.cc,"[[""True"", [25731, ""True"", ""! * secretkey"", ""Condition""]], [""False"", [25805, ""True"", ""setvbuf ( stdout , NULL , _IOLBF , 0 ) != 0"", ""Condition""]]]","[["""", [25739, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [25746, ""True"", ""fprintf ( stderr , \""FATAL: %s: Server not specified\\n\"" , argv [ 0 ] )"", ""ExpressionStatement""]], ["""", [25769, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [25776, ""True"", ""fprintf ( stderr , \""FATAL: %s: can't open configuration file '%s'.\\n\"" , argv [ 0 ] , cfname )"", ""ExpressionStatement""]]]","[[[""!"", ""*"", ""secretkey""]], [[""setvbuf"", ""stdout"", ""NULL"", ""_IOLBF"", ""0"", ""0"", ""!=""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""FATAL: %s: Server not specified\\n\"""", ""char * *"", ""0""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""FATAL: %s: can't open configuration file '%s'.\\n\"""", ""char * *"", ""0"", ""const char *""]]]","[[[""char * *""], ""char * *""]]","[""\""FATAL: %s: Shared secret not specified\\n\"""", ""0""]"
"fprintf ( stderr , ""FATAL: %s: Server not specified\n"" , argv [ 0 ] )",525:8:13925:13986,/data/download/squid/squid-3.5.25/helpers/basic_auth/RADIUS/basic_radius_auth.cc,"[[""True"", [25759, ""True"", ""! * server"", ""Condition""]], [""False"", [25805, ""True"", ""setvbuf ( stdout , NULL , _IOLBF , 0 ) != 0"", ""Condition""]]]","[["""", [25769, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [25776, ""True"", ""fprintf ( stderr , \""FATAL: %s: can't open configuration file '%s'.\\n\"" , argv [ 0 ] , cfname )"", ""ExpressionStatement""]]]","[[[""!"", ""*"", ""server""]], [[""setvbuf"", ""stdout"", ""NULL"", ""_IOLBF"", ""0"", ""0"", ""!=""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""FATAL: %s: can't open configuration file '%s'.\\n\"""", ""char * *"", ""0"", ""const char *""]]]","[[[""char * *""], ""char * *""]]","[""\""FATAL: %s: Server not specified\\n\"""", ""0""]"
"fprintf ( stderr , ""FATAL: %s: can't open configuration file '%s'.\n"" , argv [ 0 ] , cfname )",520:12:13774:13858,/data/download/squid/squid-3.5.25/helpers/basic_auth/RADIUS/basic_radius_auth.cc,"[[""True"", [25791, ""True"", ""rad_auth_config ( cfname ) < 0"", ""Condition""]], [""True"", [25800, ""True"", ""cfname"", ""Condition""]], [""False"", [25805, ""True"", ""setvbuf ( stdout , NULL , _IOLBF , 0 ) != 0"", ""Condition""]]]",[],"[[[""rad_auth_config"", ""const char *"", ""0"", ""<""]], [[""const char *""]], [[""setvbuf"", ""stdout"", ""NULL"", ""_IOLBF"", ""0"", ""0"", ""!=""]]]","[[[""const char *"", ""NULL"", ""NULL"", ""=""], ""const char *""], [[""const char *"", ""optarg"", ""=""], ""const char *""], [[""char * *""], ""char * *""]]","[""\""FATAL: %s: can't open configuration file '%s'.\\n\"""", ""0""]"
"fprintf ( stderr , ""FATAL: %d %s\n"" , rc , sasl_errstring ( rc , NULL , NULL ) )",80:8:2318:2388,/data/download/squid/squid-3.5.25/helpers/basic_auth/SASL/basic_sasl_auth.cc,"[[""True"", [26807, ""True"", ""rc != SASL_OK"", ""Condition""]], [""False"", [26858, ""True"", ""rc != SASL_OK"", ""Condition""]]]","[["""", [26811, ""True"", ""rc = sasl_server_new ( APP_NAME_SASL , NULL , NULL , NULL , 0 , & conn )"", ""ExpressionStatement""]], ["""", [26862, ""True"", ""rc = sasl_server_init ( NULL , APP_NAME_SASL )"", ""ExpressionStatement""]]]","[[[""int"", ""SASL_OK"", ""!=""]], [[""int"", ""SASL_OK"", ""!=""]], [[""int"", ""sasl_server_new"", ""APP_NAME_SASL"", ""NULL"", ""NULL"", ""NULL"", ""0"", ""&"", ""conn"", ""=""]], [[""int"", ""sasl_server_init"", ""NULL"", ""APP_NAME_SASL"", ""=""]]]","[[[""int"", ""sasl_server_new"", ""APP_NAME_SASL"", ""NULL"", ""NULL"", ""NULL"", ""0"", ""&"", ""conn"", ""=""], ""int""]]","[""\""FATAL: %d %s\\n\""""]"
"fprintf ( stderr , ""FATAL: %d %s\n"" , rc , sasl_errstring ( rc , NULL , NULL ) )",69:8:1991:2061,/data/download/squid/squid-3.5.25/helpers/basic_auth/SASL/basic_sasl_auth.cc,"[[""True"", [26858, ""True"", ""rc != SASL_OK"", ""Condition""]]]","[["""", [26862, ""True"", ""rc = sasl_server_init ( NULL , APP_NAME_SASL )"", ""ExpressionStatement""]], ["""", [26873, ""True"", ""setvbuf ( stdout , NULL , _IOLBF , 0 )"", ""ExpressionStatement""]], ["""", [26886, ""True"", ""sasl_conn_t * conn = NULL ;"", ""IdentifierDeclStatement""]]]","[[[""int"", ""SASL_OK"", ""!=""]], [[""int"", ""sasl_server_init"", ""NULL"", ""APP_NAME_SASL"", ""=""]], [[""setvbuf"", ""stdout"", ""NULL"", ""_IOLBF"", ""0""]], [[""sasl_conn_t *"", ""NULL"", ""NULL"", ""=""]]]","[[[""int"", ""sasl_server_init"", ""NULL"", ""APP_NAME_SASL"", ""=""], ""int""]]","[""\""FATAL: %d %s\\n\""""]"
"( void ) fprintf ( p , ""%s\n"" , user )",228:8:6576:6607,/data/download/squid/squid-3.5.25/helpers/basic_auth/SMB/basic_smb_auth.cc,"[[""False"", [27283, ""True"", ""( p = popen ( shcmd , \""w\"" ) ) == NULL"", ""Condition""]], [""False"", [27306, ""True"", ""dom == NULL"", ""Condition""]], [""False"", [27434, ""True"", ""( s = strchr ( buf , ' ' ) ) == NULL"", ""Condition""]], [""False"", [27455, ""True"", ""( s = strchr ( buf , '\\n' ) ) == NULL"", ""Condition""]]]","[["""", [27183, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> authfile )"", ""ExpressionStatement""]], ["""", [27198, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> authshare )"", ""ExpressionStatement""]], ["""", [27213, ""True"", ""( void ) fprintf ( p , \""%d\\n\"" , dom -> nmbcast )"", ""ExpressionStatement""]], ["""", [27228, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> nmbaddr )"", ""ExpressionStatement""]]]","[[[""p"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""]], [[""struct SMBDOMAIN *"", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""' '"", ""="", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""authfile""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""authshare""]], [[""fprintf"", ""FILE *"", ""\""%d\\n\"""", ""struct SMBDOMAIN *"", ""nmbcast""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""nmbaddr""]]]","[[[""char *"", ""char [ HELPER_INPUT_BUFFER ]"", ""=""], ""char *""], [[""char *"", ""char *"", ""1"", ""+"", ""=""], ""char *""], [[""FILE *"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""], ""FILE *""]]","[""\""%s\\n\""""]"
"( void ) fprintf ( p , ""%s\n"" , dom -> authfile )",227:8:6526:6566,/data/download/squid/squid-3.5.25/helpers/basic_auth/SMB/basic_smb_auth.cc,"[[""False"", [27283, ""True"", ""( p = popen ( shcmd , \""w\"" ) ) == NULL"", ""Condition""]], [""False"", [27306, ""True"", ""dom == NULL"", ""Condition""]], [""False"", [27434, ""True"", ""( s = strchr ( buf , ' ' ) ) == NULL"", ""Condition""]], [""False"", [27455, ""True"", ""( s = strchr ( buf , '\\n' ) ) == NULL"", ""Condition""]]]","[["""", [27198, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> authshare )"", ""ExpressionStatement""]], ["""", [27213, ""True"", ""( void ) fprintf ( p , \""%d\\n\"" , dom -> nmbcast )"", ""ExpressionStatement""]], ["""", [27228, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> nmbaddr )"", ""ExpressionStatement""]], ["""", [27243, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> passthrough )"", ""ExpressionStatement""]]]","[[[""p"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""]], [[""struct SMBDOMAIN *"", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""' '"", ""="", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""authshare""]], [[""fprintf"", ""FILE *"", ""\""%d\\n\"""", ""struct SMBDOMAIN *"", ""nmbcast""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""nmbaddr""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""passthrough""]]]","[[[""struct SMBDOMAIN *"", ""next"", ""NULL"", ""=""], ""* dom""], [[""FILE *"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""], ""FILE *""], [[""struct SMBDOMAIN *"", ""authfile"", ""\""proxyauth\"""", ""=""], ""dom -> authfile""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""struct SMBDOMAIN *"", ""next""], ""struct SMBDOMAIN *""]]","[""\""%s\\n\""""]"
"( void ) fprintf ( p , ""%s\n"" , dom -> authshare )",226:8:6475:6516,/data/download/squid/squid-3.5.25/helpers/basic_auth/SMB/basic_smb_auth.cc,"[[""False"", [27283, ""True"", ""( p = popen ( shcmd , \""w\"" ) ) == NULL"", ""Condition""]], [""False"", [27306, ""True"", ""dom == NULL"", ""Condition""]], [""False"", [27434, ""True"", ""( s = strchr ( buf , ' ' ) ) == NULL"", ""Condition""]], [""False"", [27455, ""True"", ""( s = strchr ( buf , '\\n' ) ) == NULL"", ""Condition""]]]","[["""", [27213, ""True"", ""( void ) fprintf ( p , \""%d\\n\"" , dom -> nmbcast )"", ""ExpressionStatement""]], ["""", [27228, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> nmbaddr )"", ""ExpressionStatement""]], ["""", [27243, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> passthrough )"", ""ExpressionStatement""]], ["""", [27258, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> name )"", ""ExpressionStatement""]]]","[[[""p"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""]], [[""struct SMBDOMAIN *"", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""' '"", ""="", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""fprintf"", ""FILE *"", ""\""%d\\n\"""", ""struct SMBDOMAIN *"", ""nmbcast""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""nmbaddr""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""passthrough""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""name""]]]","[[[""struct SMBDOMAIN *"", ""authshare"", ""\""NETLOGON\"""", ""=""], ""dom -> authshare""], [[""struct SMBDOMAIN *"", ""next"", ""NULL"", ""=""], ""* dom""], [[""FILE *"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""], ""FILE *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""struct SMBDOMAIN *"", ""next""], ""struct SMBDOMAIN *""]]","[""\""%s\\n\""""]"
"( void ) fprintf ( p , ""%d\n"" , dom -> nmbcast )",225:8:6426:6465,/data/download/squid/squid-3.5.25/helpers/basic_auth/SMB/basic_smb_auth.cc,"[[""False"", [27283, ""True"", ""( p = popen ( shcmd , \""w\"" ) ) == NULL"", ""Condition""]], [""False"", [27306, ""True"", ""dom == NULL"", ""Condition""]], [""False"", [27434, ""True"", ""( s = strchr ( buf , ' ' ) ) == NULL"", ""Condition""]], [""False"", [27455, ""True"", ""( s = strchr ( buf , '\\n' ) ) == NULL"", ""Condition""]]]","[["""", [27228, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> nmbaddr )"", ""ExpressionStatement""]], ["""", [27243, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> passthrough )"", ""ExpressionStatement""]], ["""", [27258, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> name )"", ""ExpressionStatement""]]]","[[[""p"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""]], [[""struct SMBDOMAIN *"", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""' '"", ""="", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""nmbaddr""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""passthrough""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""name""]]]","[[[""struct SMBDOMAIN *"", ""nmbcast"", ""NMB_BROADCAST"", ""=""], ""dom -> nmbcast""], [[""struct SMBDOMAIN *"", ""next"", ""NULL"", ""=""], ""* dom""], [[""FILE *"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""], ""FILE *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""struct SMBDOMAIN *"", ""next""], ""struct SMBDOMAIN *""]]","[""\""%d\\n\""""]"
"( void ) fprintf ( p , ""%s\n"" , dom -> nmbaddr )",224:8:6377:6416,/data/download/squid/squid-3.5.25/helpers/basic_auth/SMB/basic_smb_auth.cc,"[[""False"", [27283, ""True"", ""( p = popen ( shcmd , \""w\"" ) ) == NULL"", ""Condition""]], [""False"", [27306, ""True"", ""dom == NULL"", ""Condition""]], [""False"", [27434, ""True"", ""( s = strchr ( buf , ' ' ) ) == NULL"", ""Condition""]], [""False"", [27455, ""True"", ""( s = strchr ( buf , '\\n' ) ) == NULL"", ""Condition""]]]","[["""", [27243, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> passthrough )"", ""ExpressionStatement""]], ["""", [27258, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> name )"", ""ExpressionStatement""]]]","[[[""p"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""]], [[""struct SMBDOMAIN *"", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""' '"", ""="", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""passthrough""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""name""]]]","[[[""struct SMBDOMAIN *"", ""next"", ""NULL"", ""=""], ""* dom""], [[""FILE *"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""], ""FILE *""], [[""struct SMBDOMAIN *"", ""nmbaddr"", ""\""\"""", ""=""], ""dom -> nmbaddr""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""struct SMBDOMAIN *"", ""next""], ""struct SMBDOMAIN *""]]","[""\""%s\\n\""""]"
"( void ) fprintf ( p , ""%s\n"" , dom -> passthrough )",223:8:6324:6367,/data/download/squid/squid-3.5.25/helpers/basic_auth/SMB/basic_smb_auth.cc,"[[""False"", [27283, ""True"", ""( p = popen ( shcmd , \""w\"" ) ) == NULL"", ""Condition""]], [""False"", [27306, ""True"", ""dom == NULL"", ""Condition""]], [""False"", [27434, ""True"", ""( s = strchr ( buf , ' ' ) ) == NULL"", ""Condition""]], [""False"", [27455, ""True"", ""( s = strchr ( buf , '\\n' ) ) == NULL"", ""Condition""]]]","[["""", [27258, ""True"", ""( void ) fprintf ( p , \""%s\\n\"" , dom -> name )"", ""ExpressionStatement""]], ["""", [27312, ""True"", ""dom = firstdom"", ""ExpressionStatement""]], ["""", [27319, ""True"", ""break ;"", ""BreakStatement""]]]","[[[""p"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""]], [[""struct SMBDOMAIN *"", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""' '"", ""="", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""fprintf"", ""FILE *"", ""\""%s\\n\"""", ""struct SMBDOMAIN *"", ""name""]], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""]], [[]]]","[[[""struct SMBDOMAIN *"", ""passthrough"", ""\""\"""", ""=""], ""dom -> passthrough""], [[""struct SMBDOMAIN *"", ""next"", ""NULL"", ""=""], ""* dom""], [[""FILE *"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""], ""FILE *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""struct SMBDOMAIN *"", ""next""], ""struct SMBDOMAIN *""]]","[""\""%s\\n\""""]"
"( void ) fprintf ( p , ""%s\n"" , dom -> name )",222:8:6278:6314,/data/download/squid/squid-3.5.25/helpers/basic_auth/SMB/basic_smb_auth.cc,"[[""False"", [27283, ""True"", ""( p = popen ( shcmd , \""w\"" ) ) == NULL"", ""Condition""]], [""False"", [27306, ""True"", ""dom == NULL"", ""Condition""]], [""False"", [27434, ""True"", ""( s = strchr ( buf , ' ' ) ) == NULL"", ""Condition""]], [""False"", [27455, ""True"", ""( s = strchr ( buf , '\\n' ) ) == NULL"", ""Condition""]]]","[["""", [27312, ""True"", ""dom = firstdom"", ""ExpressionStatement""]], ["""", [27319, ""True"", ""break ;"", ""BreakStatement""]], ["""", [27333, ""True"", ""dom = dom -> next"", ""AssignmentExpr""]], ["""", [27342, ""True"", ""dom = firstdom ;"", ""ForInit""]]]","[[[""p"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""]], [[""struct SMBDOMAIN *"", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""' '"", ""="", ""NULL"", ""==""]], [[""s"", ""strchr"", ""char [ HELPER_INPUT_BUFFER ]"", ""'\\n'"", ""="", ""NULL"", ""==""]], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""]], [[]], [[""struct SMBDOMAIN *"", ""struct SMBDOMAIN *"", ""next""]], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""]]]","[[[""struct SMBDOMAIN *"", ""next"", ""NULL"", ""=""], ""* dom""], [[""struct SMBDOMAIN *"", ""name"", ""struct SMBDOMAIN *"", ""sname"", ""char * [ ]"", ""int"", ""="", ""=""], ""dom -> name""], [[""FILE *"", ""popen"", ""const char *"", ""\""w\"""", ""="", ""NULL"", ""==""], ""FILE *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""firstdom"", ""=""], ""struct SMBDOMAIN *""], [[""struct SMBDOMAIN *"", ""struct SMBDOMAIN *"", ""next""], ""struct SMBDOMAIN *""]]","[""\""%s\\n\""""]"
"fprintf ( stderr , ""FATAL: Unknown option: -%c\n"" , opt )",105:12:3028:3080,/data/download/squid/squid-3.5.25/helpers/basic_auth/SSPI/basic_sspi_auth.cc,"[[""case 'h'"", [28933, ""True"", ""opt"", ""Condition""]], [""True"", [28935, ""True"", ""- 1 != ( opt = getopt ( argc , argv , \""dhA:D:O:\"" ) )"", ""Condition""]]]","[["""", [28846, ""True"", ""default :"", ""Label""]], ["""", [28848, ""True"", ""opt = optopt"", ""ExpressionStatement""]], ["""", [28852, ""True"", ""case '?' :"", ""Label""]], ["""", [28853, ""True"", ""exit ( 0 )"", ""ExpressionStatement""]], ["""", [28819, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [28870, ""True"", ""break ;"", ""BreakStatement""]], ["""", [28876, ""True"", ""break ;"", ""BreakStatement""]], ["""", [28889, ""True"", ""break ;"", ""BreakStatement""]], ["""", [28911, ""True"", ""break ;"", ""BreakStatement""]], ["""", [28952, ""True"", ""int opt ;"", ""IdentifierDeclStatement""]]]","[[[""int"", ""'h'"", ""==""]], [[""-"", ""1"", ""opt"", ""getopt"", ""int"", ""char * [ ]"", ""\""dhA:D:O:\"""", ""="", ""!=""]], [[""default""]], [[""int"", ""optopt"", ""=""]], [[]], [[""exit"", ""0""]], [[""exit"", ""1""]], [[]], [[]], [[]], [[]], [[""int""]]]","[[[""-"", ""1"", ""int"", ""getopt"", ""int"", ""char * [ ]"", ""\""dhA:D:O:\"""", ""="", ""!=""], ""int""], [[""int"", ""optopt"", ""=""], ""int""]]","[""\""FATAL: Unknown option: -%c\\n\""""]"
"fprintf ( stderr , ""FATAL: can't initialize SSPI, exiting.\n"" )",127:8:3524:3583,/data/download/squid/squid-3.5.25/helpers/basic_auth/SSPI/basic_sspi_auth.cc,"[[""True"", [29261, ""True"", ""LoadSecurityDll ( SSP_BASIC , NTLM_PACKAGE_NAME ) == NULL"", ""Condition""]]]","[["""", [29272, ""True"", ""process_options ( argc , argv )"", ""ExpressionStatement""]], ["""", [29281, ""True"", ""int err = 0 ;"", ""IdentifierDeclStatement""]], ["""", [29288, ""True"", ""char * p ;"", ""IdentifierDeclStatement""]]]","[[[""LoadSecurityDll"", ""SSP_BASIC"", ""NTLM_PACKAGE_NAME"", ""NULL"", ""==""]], [[""process_options"", ""int"", ""char * *""]], [[""int"", ""int"", ""0"", ""=""]], [[""char *""]]]",[],"[""\""FATAL: can't initialize SSPI, exiting.\\n\""""]"
"vfprintf ( stderr , format , args )",88:8:2431:2461,/data/download/squid/squid-3.5.25/helpers/basic_auth/SSPI/valid.h,"[[""True"", [30056, ""True"", ""debug_enabled"", ""Condition""]]]","[["""", [30029, ""True"", ""fprintf ( stderr , \""nt_auth[%d]: \"" , getpid ( ) )"", ""ExpressionStatement""]], ["""", [30043, ""True"", ""va_start ( args , format )"", ""ExpressionStatement""]], ["""", [30052, ""True"", ""va_list args ;"", ""IdentifierDeclStatement""]]]","[[[""debug_enabled""]], [[""fprintf"", ""stderr"", ""\""nt_auth[%d]: \"""", ""getpid""]], [[""va_start"", ""va_list"", ""char *""]], [[""va_list""]]]","[[[""char *""], ""char *""], [[""va_list""], ""va_list""]]",[]
"fprintf ( stderr , ""nt_auth[%d]: "" , getpid ( ) )",87:8:2380:2421,/data/download/squid/squid-3.5.25/helpers/basic_auth/SSPI/valid.h,"[[""True"", [30056, ""True"", ""debug_enabled"", ""Condition""]]]","[["""", [30043, ""True"", ""va_start ( args , format )"", ""ExpressionStatement""]], ["""", [30052, ""True"", ""va_list args ;"", ""IdentifierDeclStatement""]], ["""", [30004, ""True"", ""char * format"", ""Parameter""]]]","[[[""debug_enabled""]], [[""va_start"", ""va_list"", ""char *""]], [[""va_list""]], [[""char *""]]]",[],"[""\""nt_auth[%d]: \""""]"
"fprintf ( stderr , ""%s: FATAL: unknown option: -%c. Exiting\n"" , program_name , opt )",82:12:2536:2615,/data/download/squid/squid-3.5.25/helpers/basic_auth/fake/fake.cc,"[[""case 'h'"", [30150, ""True"", ""opt"", ""Condition""]], [""True"", [30152, ""True"", ""- 1 != ( opt = getopt ( argc , argv , \""hd\"" ) )"", ""Condition""]]]","[["""", [30129, ""True"", ""default :"", ""Label""]], ["""", [30131, ""True"", ""exit ( 0 )"", ""ExpressionStatement""]], ["""", [30138, ""True"", ""usage ( )"", ""ExpressionStatement""]], ["""", [30143, ""True"", ""case 'h' :"", ""Label""]], ["""", [30104, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [30144, ""True"", ""break ;"", ""BreakStatement""]], ["""", [30169, ""True"", ""opterr = 0"", ""ExpressionStatement""]]]","[[[""int"", ""'h'"", ""==""]], [[""-"", ""1"", ""opt"", ""getopt"", ""int"", ""char * [ ]"", ""\""hd\"""", ""="", ""!=""]], [[""default""]], [[""exit"", ""0""]], [[""usage""]], [[]], [[""exit"", ""1""]], [[]], [[""opterr"", ""0"", ""=""]]]","[[[""-"", ""1"", ""int"", ""getopt"", ""int"", ""char * [ ]"", ""\""hd\"""", ""="", ""!=""], ""int""]]","[""\""%s: FATAL: unknown option: -%c. Exiting\\n\""""]"
"fprintf ( stderr , ""Connect timeouts not supported in your LDAP library\n"" )",149:4:3753:3825,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,[],"[["""", [31495, ""True"", ""int aTimeLimit"", ""Parameter""]], ["""", [31509, ""True"", ""ENTRY"", ""CFGEntryNode""]]]","[[[""int""]], [[""ENTRY""]]]",[],"[""\""Connect timeouts not supported in your LDAP library\\n\""""]"
"fprintf ( stderr , ""Could not Activate TLS connection\n"" )",373:16:11229:11283,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32405, ""True"", ""ldap_start_tls_s ( ld , NULL , NULL ) != LDAP_SUCCESS"", ""Condition""]], [""False"", [32435, ""True"", ""version != LDAP_VERSION3"", ""Condition""]], [""True"", [32439, ""True"", ""use_tls"", ""Condition""]], [""False"", [32657, ""True"", ""ld == NULL"", ""Condition""]]]","[["""", [32443, ""True"", ""ld = NULL"", ""ExpressionStatement""]]]","[[[""ldap_start_tls_s"", ""ld"", ""NULL"", ""NULL"", ""LDAP_SUCCESS"", ""!=""]], [[""version"", ""LDAP_VERSION3"", ""!=""]], [[""use_tls""]], [[""ld"", ""NULL"", ""==""]], [[""ld"", ""NULL"", ""=""]]]",[],"[""\""Could not Activate TLS connection\\n\""""]"
"fprintf ( stderr , ""TLS requires LDAP version 3\n"" )",370:16:11063:11111,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32435, ""True"", ""version != LDAP_VERSION3"", ""Condition""]], [""True"", [32439, ""True"", ""use_tls"", ""Condition""]], [""False"", [32657, ""True"", ""ld == NULL"", ""Condition""]]]","[["""", [32443, ""True"", ""ld = NULL"", ""ExpressionStatement""]], ["""", [32447, ""True"", ""ldap_unbind ( ld )"", ""ExpressionStatement""]], ["""", [32482, ""True"", ""version = LDAP_VERSION2"", ""ExpressionStatement""]]]","[[[""version"", ""LDAP_VERSION3"", ""!=""]], [[""use_tls""]], [[""ld"", ""NULL"", ""==""]], [[""ld"", ""NULL"", ""=""]], [[""ldap_unbind"", ""ld""]], [[""version"", ""LDAP_VERSION2"", ""=""]]]",[],"[""\""TLS requires LDAP version 3\\n\""""]"
"fprintf ( stderr , ""Could not set LDAP_OPT_PROTOCOL_VERSION %d\n"" , version )",362:12:10802:10894,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32465, ""True"", ""ldap_set_option ( ld , LDAP_OPT_PROTOCOL_VERSION , & version ) != LDAP_SUCCESS"", ""Condition""]], [""False"", [32657, ""True"", ""ld == NULL"", ""Condition""]]]","[["""", [32482, ""True"", ""version = LDAP_VERSION2"", ""ExpressionStatement""]], ["""", [32493, ""True"", ""squid_ldap_set_connect_timeout ( connect_timeout )"", ""ExpressionStatement""]], ["""", [32493, ""True"", ""squid_ldap_set_connect_timeout ( connect_timeout )"", ""ExpressionStatement""]], ["""", [32508, ""True"", ""fprintf ( stderr , \""\\nUnable to connect to LDAP server:%s port:%d\\n\"" , ldapServer , port )"", ""ExpressionStatement""]], ["""", [32537, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [32618, ""True"", ""fprintf ( stderr , \""\\nUnable to connect to LDAPURI:%s\\n\"" , ldapServer )"", ""ExpressionStatement""]]]","[[[""ldap_set_option"", ""ld"", ""LDAP_OPT_PROTOCOL_VERSION"", ""&"", ""version"", ""LDAP_SUCCESS"", ""!=""]], [[""ld"", ""NULL"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=""]], [[""squid_ldap_set_connect_timeout"", ""connect_timeout""]], [[""squid_ldap_set_connect_timeout"", ""connect_timeout""]], [[""fprintf"", ""stderr"", ""\""\\nUnable to connect to LDAP server:%s port:%d\\n\"""", ""ldapServer"", ""port""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""\\nUnable to connect to LDAPURI:%s\\n\"""", ""ldapServer""]]]","[[[""version"", ""LDAP_VERSION2"", ""=""], ""version""]]","[""\""Could not set LDAP_OPT_PROTOCOL_VERSION %d\\n\""""]"
"fprintf ( stderr , ""\nUnable to connect to LDAP server:%s port:%d\n"" , ldapServer , port )",351:20:10394:10478,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32521, ""True"", ""( ld = ldap_init ( ldapServer , port ) ) == NULL"", ""Condition""]], [""False"", [32613, ""True"", ""sslpath"", ""Condition""]], [""False"", [32646, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""True"", [32657, ""True"", ""ld == NULL"", ""Condition""]]]",[],"[[[""ld"", ""ldap_init"", ""ldapServer"", ""port"", ""="", ""NULL"", ""==""]], [[""sslpath""]], [[""strstr"", ""ldapServer"", ""\""://\"""", ""NULL"", ""!=""]], [[""ld"", ""NULL"", ""==""]]]",[],"[""\""\\nUnable to connect to LDAP server:%s port:%d\\n\""""]"
"fprintf ( stderr , ""\nUnable to connect to SSL LDAP server: %s port:%d\n"" , ldapServer , port )",344:20:10116:10233,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32557, ""True"", ""( ld = ldapssl_init ( ldapServer , port , 1 ) ) == NULL"", ""Condition""]], [""True"", [32613, ""True"", ""sslpath"", ""Condition""]], [""False"", [32646, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""True"", [32657, ""True"", ""ld == NULL"", ""Condition""]]]","[["""", [32575, ""True"", ""++ sslinit"", ""ExpressionStatement""]], ["""", [32580, ""True"", ""exit ( 1 )"", ""ExpressionStatement""]], ["""", [32587, ""True"", ""fprintf ( stderr , \""\\nUnable to initialise SSL with cert path %s\\n\"" , sslpath )"", ""ExpressionStatement""]]]","[[[""ld"", ""ldapssl_init"", ""ldapServer"", ""port"", ""1"", ""="", ""NULL"", ""==""]], [[""sslpath""]], [[""strstr"", ""ldapServer"", ""\""://\"""", ""NULL"", ""!=""]], [[""ld"", ""NULL"", ""==""]], [[""sslinit""]], [[""exit"", ""1""]], [[""fprintf"", ""stderr"", ""\""\\nUnable to initialise SSL with cert path %s\\n\"""", ""sslpath""]]]",[],"[""\""\\nUnable to connect to SSL LDAP server: %s port:%d\\n\""""]"
"fprintf ( stderr , ""\nUnable to initialise SSL with cert path %s\n"" , sslpath )",337:20:9817:9919,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32598, ""True"", ""! sslinit && ( ldapssl_client_init ( sslpath , NULL ) != LDAP_SUCCESS )"", ""Condition""]], [""True"", [32613, ""True"", ""sslpath"", ""Condition""]], [""False"", [32646, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""True"", [32657, ""True"", ""ld == NULL"", ""Condition""]]]",[],"[[[""!"", ""sslinit""]], [[""ldapssl_client_init"", ""sslpath"", ""NULL"", ""LDAP_SUCCESS"", ""!=""]], [[""sslpath""]], [[""strstr"", ""ldapServer"", ""\""://\"""", ""NULL"", ""!=""]], [[""ld"", ""NULL"", ""==""]]]",[],"[""\""\\nUnable to initialise SSL with cert path %s\\n\""""]"
"fprintf ( stderr , ""\nUnable to connect to LDAPURI:%s\n"" , ldapServer )",330:16:9561:9627,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32629, ""True"", ""rc != LDAP_SUCCESS"", ""Condition""]], [""True"", [32646, ""True"", ""strstr ( ldapServer , \""://\"" ) != NULL"", ""Condition""]], [""True"", [32657, ""True"", ""ld == NULL"", ""Condition""]]]","[["""", [32633, ""True"", ""rc = ldap_initialize ( & ld , ldapServer )"", ""ExpressionStatement""]]]","[[[""int"", ""LDAP_SUCCESS"", ""!=""]], [[""strstr"", ""ldapServer"", ""\""://\"""", ""NULL"", ""!=""]], [[""ld"", ""NULL"", ""==""]], [[""int"", ""ldap_initialize"", ""&"", ""ld"", ""ldapServer"", ""=""]]]",[],"[""\""\\nUnable to connect to LDAPURI:%s\\n\""""]"
"fprintf ( stderr , ""\tIf you need to bind as a user to perform searches then use the\n\t-D binddn -w bindpasswd or -D binddn -W secretfile options\n\n"" )",608:8:19414:19563,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]","[["""", [32781, ""True"", ""fprintf ( stderr , \""\\n\"" )"", ""ExpressionStatement""]], ["""", [32790, ""True"", ""fprintf ( stderr , \""\\t-S\\t\\t\\t\\t\\tStrip NT domain from usernames\\n\"" )"", ""ExpressionStatement""]], ["""", [32799, ""True"", ""fprintf ( stderr , \""\\t-Z\\t\\t\\t\\t\\tTLS encrypt the LDAP connection, requires\\n\\t\\t\\t\\tLDAP version 3\\n\"" )"", ""ExpressionStatement""]], ["""", [32808, ""True"", ""fprintf ( stderr , \""\\t-v 2|3\\t\\t\\t\\t\\tLDAP version\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""fprintf"", ""stderr"", ""\""\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-S\\t\\t\\t\\t\\tStrip NT domain from usernames\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-Z\\t\\t\\t\\t\\tTLS encrypt the LDAP connection, requires\\n\\t\\t\\t\\tLDAP version 3\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-v 2|3\\t\\t\\t\\t\\tLDAP version\\n\""""]]]",[],"[""\""\\tIf you need to bind as a user to perform searches then use the\\n\\t-D binddn -w bindpasswd or -D binddn -W secretfile options\\n\\n\""""]"
"fprintf ( stderr , ""\n"" )",607:8:19383:19404,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]","[["""", [32790, ""True"", ""fprintf ( stderr , \""\\t-S\\t\\t\\t\\t\\tStrip NT domain from usernames\\n\"" )"", ""ExpressionStatement""]], ["""", [32799, ""True"", ""fprintf ( stderr , \""\\t-Z\\t\\t\\t\\t\\tTLS encrypt the LDAP connection, requires\\n\\t\\t\\t\\tLDAP version 3\\n\"" )"", ""ExpressionStatement""]], ["""", [32808, ""True"", ""fprintf ( stderr , \""\\t-v 2|3\\t\\t\\t\\t\\tLDAP version\\n\"" )"", ""ExpressionStatement""]], ["""", [32817, ""True"", ""fprintf ( stderr , \""\\t-a never|always|search|find\\t\\twhen to dereference aliases\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""fprintf"", ""stderr"", ""\""\\t-S\\t\\t\\t\\t\\tStrip NT domain from usernames\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-Z\\t\\t\\t\\t\\tTLS encrypt the LDAP connection, requires\\n\\t\\t\\t\\tLDAP version 3\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-v 2|3\\t\\t\\t\\t\\tLDAP version\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-a never|always|search|find\\t\\twhen to dereference aliases\\n\""""]]]",[],"[""\""\\n\""""]"
"fprintf ( stderr , ""\t-S\t\t\t\t\tStrip NT domain from usernames\n"" )",606:8:19308:19373,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]","[["""", [32799, ""True"", ""fprintf ( stderr , \""\\t-Z\\t\\t\\t\\t\\tTLS encrypt the LDAP connection, requires\\n\\t\\t\\t\\tLDAP version 3\\n\"" )"", ""ExpressionStatement""]], ["""", [32808, ""True"", ""fprintf ( stderr , \""\\t-v 2|3\\t\\t\\t\\t\\tLDAP version\\n\"" )"", ""ExpressionStatement""]], ["""", [32817, ""True"", ""fprintf ( stderr , \""\\t-a never|always|search|find\\t\\twhen to dereference aliases\\n\"" )"", ""ExpressionStatement""]], ["""", [32826, ""True"", ""fprintf ( stderr , \""\\t-R\\t\\t\\t\\t\\tdo not follow referrals\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""fprintf"", ""stderr"", ""\""\\t-Z\\t\\t\\t\\t\\tTLS encrypt the LDAP connection, requires\\n\\t\\t\\t\\tLDAP version 3\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-v 2|3\\t\\t\\t\\t\\tLDAP version\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-a never|always|search|find\\t\\twhen to dereference aliases\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-R\\t\\t\\t\\t\\tdo not follow referrals\\n\""""]]]",[],"[""\""\\t-S\\t\\t\\t\\t\\tStrip NT domain from usernames\\n\""""]"
"fprintf ( stderr , ""\t-Z\t\t\t\t\tTLS encrypt the LDAP connection, requires\n\t\t\t\tLDAP version 3\n"" )",604:8:19191:19291,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]","[["""", [32808, ""True"", ""fprintf ( stderr , \""\\t-v 2|3\\t\\t\\t\\t\\tLDAP version\\n\"" )"", ""ExpressionStatement""]], ["""", [32817, ""True"", ""fprintf ( stderr , \""\\t-a never|always|search|find\\t\\twhen to dereference aliases\\n\"" )"", ""ExpressionStatement""]], ["""", [32826, ""True"", ""fprintf ( stderr , \""\\t-R\\t\\t\\t\\t\\tdo not follow referrals\\n\"" )"", ""ExpressionStatement""]], ["""", [32835, ""True"", ""fprintf ( stderr , \""\\t-t timelimit\\t\\t\\t\\tsearch time limit\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""fprintf"", ""stderr"", ""\""\\t-v 2|3\\t\\t\\t\\t\\tLDAP version\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-a never|always|search|find\\t\\twhen to dereference aliases\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-R\\t\\t\\t\\t\\tdo not follow referrals\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-t timelimit\\t\\t\\t\\tsearch time limit\\n\""""]]]",[],"[""\""\\t-Z\\t\\t\\t\\t\\tTLS encrypt the LDAP connection, requires\\n\\t\\t\\t\\tLDAP version 3\\n\""""]"
"fprintf ( stderr , ""\t-v 2|3\t\t\t\t\tLDAP version\n"" )",603:8:19130:19181,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]","[["""", [32817, ""True"", ""fprintf ( stderr , \""\\t-a never|always|search|find\\t\\twhen to dereference aliases\\n\"" )"", ""ExpressionStatement""]], ["""", [32826, ""True"", ""fprintf ( stderr , \""\\t-R\\t\\t\\t\\t\\tdo not follow referrals\\n\"" )"", ""ExpressionStatement""]], ["""", [32835, ""True"", ""fprintf ( stderr , \""\\t-t timelimit\\t\\t\\t\\tsearch time limit\\n\"" )"", ""ExpressionStatement""]], ["""", [32844, ""True"", ""fprintf ( stderr , \""\\t-c timeout\\t\\t\\t\\tconnect timeout\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""fprintf"", ""stderr"", ""\""\\t-a never|always|search|find\\t\\twhen to dereference aliases\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-R\\t\\t\\t\\t\\tdo not follow referrals\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-t timelimit\\t\\t\\t\\tsearch time limit\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-c timeout\\t\\t\\t\\tconnect timeout\\n\""""]]]",[],"[""\""\\t-v 2|3\\t\\t\\t\\t\\tLDAP version\\n\""""]"
"fprintf ( stderr , ""\t-a never|always|search|find\t\twhen to dereference aliases\n"" )",601:8:19018:19099,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]","[["""", [32826, ""True"", ""fprintf ( stderr , \""\\t-R\\t\\t\\t\\t\\tdo not follow referrals\\n\"" )"", ""ExpressionStatement""]], ["""", [32835, ""True"", ""fprintf ( stderr , \""\\t-t timelimit\\t\\t\\t\\tsearch time limit\\n\"" )"", ""ExpressionStatement""]], ["""", [32844, ""True"", ""fprintf ( stderr , \""\\t-c timeout\\t\\t\\t\\tconnect timeout\\n\"" )"", ""ExpressionStatement""]], ["""", [32853, ""True"", ""fprintf ( stderr , \""\\t-E sslcertpath\\t\\t\\t\\tenable LDAP over SSL\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""fprintf"", ""stderr"", ""\""\\t-R\\t\\t\\t\\t\\tdo not follow referrals\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-t timelimit\\t\\t\\t\\tsearch time limit\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-c timeout\\t\\t\\t\\tconnect timeout\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-E sslcertpath\\t\\t\\t\\tenable LDAP over SSL\\n\""""]]]",[],"[""\""\\t-a never|always|search|find\\t\\twhen to dereference aliases\\n\""""]"
"fprintf ( stderr , ""\t-R\t\t\t\t\tdo not follow referrals\n"" )",600:8:18950:19008,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]","[["""", [32835, ""True"", ""fprintf ( stderr , \""\\t-t timelimit\\t\\t\\t\\tsearch time limit\\n\"" )"", ""ExpressionStatement""]], ["""", [32844, ""True"", ""fprintf ( stderr , \""\\t-c timeout\\t\\t\\t\\tconnect timeout\\n\"" )"", ""ExpressionStatement""]], ["""", [32853, ""True"", ""fprintf ( stderr , \""\\t-E sslcertpath\\t\\t\\t\\tenable LDAP over SSL\\n\"" )"", ""ExpressionStatement""]], ["""", [32862, ""True"", ""fprintf ( stderr , \""\\t-P\\t\\t\\t\\t\\tpersistent LDAP connection\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""fprintf"", ""stderr"", ""\""\\t-t timelimit\\t\\t\\t\\tsearch time limit\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-c timeout\\t\\t\\t\\tconnect timeout\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-E sslcertpath\\t\\t\\t\\tenable LDAP over SSL\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-P\\t\\t\\t\\t\\tpersistent LDAP connection\\n\""""]]]",[],"[""\""\\t-R\\t\\t\\t\\t\\tdo not follow referrals\\n\""""]"
"fprintf ( stderr , ""\t-t timelimit\t\t\t\tsearch time limit\n"" )",599:8:18880:18940,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]","[["""", [32844, ""True"", ""fprintf ( stderr , \""\\t-c timeout\\t\\t\\t\\tconnect timeout\\n\"" )"", ""ExpressionStatement""]], ["""", [32853, ""True"", ""fprintf ( stderr , \""\\t-E sslcertpath\\t\\t\\t\\tenable LDAP over SSL\\n\"" )"", ""ExpressionStatement""]], ["""", [32862, ""True"", ""fprintf ( stderr , \""\\t-P\\t\\t\\t\\t\\tpersistent LDAP connection\\n\"" )"", ""ExpressionStatement""]], ["""", [32871, ""True"", ""fprintf ( stderr , \""\\t-p port\\t\\t\\t\\t\\tLDAP server port (defaults to %d)\\n\"" , LDAP_PORT )"", ""ExpressionStatement""]]]","[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""fprintf"", ""stderr"", ""\""\\t-c timeout\\t\\t\\t\\tconnect timeout\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-E sslcertpath\\t\\t\\t\\tenable LDAP over SSL\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-P\\t\\t\\t\\t\\tpersistent LDAP connection\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-p port\\t\\t\\t\\t\\tLDAP server port (defaults to %d)\\n\"""", ""LDAP_PORT""]]]",[],"[""\""\\t-t timelimit\\t\\t\\t\\tsearch time limit\\n\""""]"
"fprintf ( stderr , ""\t-c timeout\t\t\t\tconnect timeout\n"" )",598:8:18814:18870,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'P'"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]]]","[["""", [32853, ""True"", ""fprintf ( stderr , \""\\t-E sslcertpath\\t\\t\\t\\tenable LDAP over SSL\\n\"" )"", ""ExpressionStatement""]], ["""", [32862, ""True"", ""fprintf ( stderr , \""\\t-P\\t\\t\\t\\t\\tpersistent LDAP connection\\n\"" )"", ""ExpressionStatement""]], ["""", [32871, ""True"", ""fprintf ( stderr , \""\\t-p port\\t\\t\\t\\t\\tLDAP server port (defaults to %d)\\n\"" , LDAP_PORT )"", ""ExpressionStatement""]], ["""", [32882, ""True"", ""fprintf ( stderr , \""\\t-h server\\t\\t\\t\\tLDAP server (defaults to localhost)\\n\"" )"", ""ExpressionStatement""]]]","[[[""!"", ""userbasedn"", ""!"", ""passattr"", ""||""]], [[""int"", ""1"", "">""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""version"", ""LDAP_VERSION2"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""atoi"", ""const char *"", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""sub\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""strcmp"", ""const char *"", ""\""find\"""", ""0"", ""=="", ""'E'"", ""==""]], [[""char"", ""'E'"", ""==""]], [[""char"", ""'s'"", ""==""]], [[""char"", ""'Z'"", ""==""]], [[""char"", ""'a'"", ""==""]], [[""strcmp"", ""const char *"", ""\""always\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""base\"""", ""0"", ""==""]], [[""char"", ""'v'"", ""==""]], [[""strcmp"", ""const char *"", ""\""never\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""one\"""", ""0"", ""==""]], [[""strcmp"", ""const char *"", ""\""search\"""", ""0"", ""==""]], [[""int"", ""1"", "">"", ""'P'"", ""==""]], [[""char * *"", ""1"", ""0"", ""'-'"", ""==""]], [[""fprintf"", ""stderr"", ""\""\\t-E sslcertpath\\t\\t\\t\\tenable LDAP over SSL\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-P\\t\\t\\t\\t\\tpersistent LDAP connection\\n\""""]], [[""fprintf"", ""stderr"", ""\""\\t-p port\\t\\t\\t\\t\\tLDAP server port (defaults to %d)\\n\"""", ""LDAP_PORT""]], [[""fprintf"", ""stderr"", ""\""\\t-h server\\t\\t\\t\\tLDAP server (defaults to localhost)\\n\""""]]]",[],"[""\""\\t-c timeout\\t\\t\\t\\tconnect timeout\\n\""""]"
"fprintf ( stderr , ""\t-E sslcertpath\t\t\t\tenable LDAP over SSL\n"" )",596:8:18732:18797,/data/download/squid/squid-3.5.25/helpers/digest_auth/LDAP/ldap_backend.cc,"[[""True"", [32999, ""True"", ""! userbasedn || ! passattr"", ""Condition""]], [""False"", [33670, ""True"", ""argc > 1 && argv [ 1 ] [ 0 ] == '-'"", ""Condition""]], [""case 'E'"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'E'"", [33175, ""True"", ""version == LDAP_VERSION2"", ""Condition""]], [""case 'E'"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""case 'E'"", [33305, ""True"", ""strcmp ( value , \""search\"" ) == 0"", ""Condition""]], [""case 'E'"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""case 'E'"", [33208, ""True"", ""atoi ( value )"", ""Condition""]], [""case 'E'"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""case 'E'"", [33408, ""True"", ""strcmp ( value , \""sub\"" ) == 0"", ""Condition""]], [""case 'E'"", [33290, ""True"", ""strcmp ( value , \""find\"" ) == 0"", ""Condition""]], [""case 'E'"", [33580, ""True"", ""option"", ""Condition""]], [""case 's'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'Z'"", [33580, ""True"", ""option"", ""Condition""]], [""case 'a'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33320, ""True"", ""strcmp ( value , \""always\"" ) == 0"", ""Condition""]], [""False"", [33438, ""True"", ""strcmp ( value , \""base\"" ) == 0"", ""Condition""]], [""case 'v'"", [33580, ""True"", ""option"", ""Condition""]], [""False"", [33335, ""True"", ""strcmp ( value , \""never\"" ) == 0"", ""Condition""]], [""False"", [33423, ""True"", ""strcmp ( value , \""one\"" ) == 0"", ""Condition""]], [""False"", [