commit_sha,commit_message,file_name,change_type,log_statement,log_loc,store_name
8ef23d64a1c1cfe6345d6d59eb93a29e7d7b29d3,Merge pull request #8308 from sovrasov:fs_dmatch_kpts_update,modules/core/test/test_io.cpp,-,"FileStorage writer("""", FileStorage::WRITE + FileStorage::MEMORY + FileStorage::FORMAT_XML);",1067,download/opencv_opencv1.cpp
8ef23d64a1c1cfe6345d6d59eb93a29e7d7b29d3,Merge pull request #8308 from sovrasov:fs_dmatch_kpts_update,modules/core/test/test_io.cpp,+,"ASSERT_NO_THROW(fs_read[""d""] >> d_read);",1081,download/opencv_opencv1.cpp
8ef23d64a1c1cfe6345d6d59eb93a29e7d7b29d3,Merge pull request #8308 from sovrasov:fs_dmatch_kpts_update,modules/core/test/test_io.cpp,-,"ASSERT_EQ(matchesVec.size(), readKptsVec.size());",1089,download/opencv_opencv1.cpp
8ef23d64a1c1cfe6345d6d59eb93a29e7d7b29d3,Merge pull request #8308 from sovrasov:fs_dmatch_kpts_update,modules/core/test/test_io.cpp,+,"ASSERT_NO_THROW(fs_read[""dv""] >> dv_read);",1113,download/opencv_opencv1.cpp
8ef23d64a1c1cfe6345d6d59eb93a29e7d7b29d3,Merge pull request #8308 from sovrasov:fs_dmatch_kpts_update,modules/core/test/test_io.cpp,+,"ASSERT_EQ(dv.size(), dv_read.size());",1115,download/opencv_opencv1.cpp
8ef23d64a1c1cfe6345d6d59eb93a29e7d7b29d3,Merge pull request #8308 from sovrasov:fs_dmatch_kpts_update,modules/core/test/test_io.cpp,+,"ASSERT_NO_THROW(fs_read[""dvv""] >> dvv_read);",1160,download/opencv_opencv1.cpp
8ef23d64a1c1cfe6345d6d59eb93a29e7d7b29d3,Merge pull request #8308 from sovrasov:fs_dmatch_kpts_update,modules/core/test/test_io.cpp,+,"ASSERT_EQ(dvv.size(), dvv_read.size());",1162,download/opencv_opencv1.cpp
8ef23d64a1c1cfe6345d6d59eb93a29e7d7b29d3,Merge pull request #8308 from sovrasov:fs_dmatch_kpts_update,modules/core/test/test_io.cpp,-,"ASSERT_EQ(matchesVec[i].size(), readKptsVec[i].size());",1165,download/opencv_opencv1.cpp
8ef23d64a1c1cfe6345d6d59eb93a29e7d7b29d3,Merge pull request #8308 from sovrasov:fs_dmatch_kpts_update,modules/core/test/test_io.cpp,+,"ASSERT_EQ(dvv.size(), dvv_read.size());",1168,download/opencv_opencv1.cpp
8ef23d64a1c1cfe6345d6d59eb93a29e7d7b29d3,Merge pull request #8308 from sovrasov:fs_dmatch_kpts_update,modules/core/test/test_io.cpp,-,"ASSERT_FLOAT_EQ(matchesVec[i][j].distance, readKptsVec[i][j].distance);",1171,download/opencv_opencv1.cpp
8ef23d64a1c1cfe6345d6d59eb93a29e7d7b29d3,Merge pull request #8308 from sovrasov:fs_dmatch_kpts_update,modules/core/test/test_io.cpp,-,"ASSERT_EQ(matchesVec[i][j].imgIdx, readKptsVec[i][j].imgIdx);",1171,download/opencv_opencv1.cpp
8ef23d64a1c1cfe6345d6d59eb93a29e7d7b29d3,Merge pull request #8308 from sovrasov:fs_dmatch_kpts_update,modules/core/test/test_io.cpp,-,"ASSERT_EQ(matchesVec[i][j].queryIdx, readKptsVec[i][j].queryIdx);",1171,download/opencv_opencv1.cpp
8ef23d64a1c1cfe6345d6d59eb93a29e7d7b29d3,Merge pull request #8308 from sovrasov:fs_dmatch_kpts_update,modules/core/test/test_io.cpp,-,"ASSERT_EQ(matchesVec[i][j].trainIdx, readKptsVec[i][j].trainIdx);",1171,download/opencv_opencv1.cpp
9d593e77797d1580d8a7f88d517d8623769084b8,Merge pull request #8324 from sturkmen72:update_objectDetection_cpp,samples/cpp/tutorial_code/objectDetection/objectDetection.cpp,+,parser.printMessage();,34,download/opencv_opencv2.cpp
9d593e77797d1580d8a7f88d517d8623769084b8,Merge pull request #8324 from sturkmen72:update_objectDetection_cpp,samples/cpp/tutorial_code/objectDetection/objectDetection2.cpp,-,"if( !face_cascade.load( face_cascade_name ) ){ printf(""--(!)Error loading face cascade\n""); return -1; };",34,download/opencv_opencv3.cpp
9d593e77797d1580d8a7f88d517d8623769084b8,Merge pull request #8324 from sturkmen72:update_objectDetection_cpp,samples/cpp/tutorial_code/objectDetection/objectDetection2.cpp,-,"if( !eyes_cascade.load( eyes_cascade_name ) ){ printf(""--(!)Error loading eyes cascade\n""); return -1; };",34,download/opencv_opencv3.cpp
9d593e77797d1580d8a7f88d517d8623769084b8,Merge pull request #8324 from sturkmen72:update_objectDetection_cpp,samples/cpp/tutorial_code/objectDetection/objectDetection2.cpp,-,"if ( ! capture.isOpened() ) { printf(""--(!)Error opening video capture\n""); return -1; }",37,download/opencv_opencv3.cpp
9d593e77797d1580d8a7f88d517d8623769084b8,Merge pull request #8324 from sturkmen72:update_objectDetection_cpp,samples/cpp/tutorial_code/objectDetection/objectDetection2.cpp,-,"printf("" --(!) No captured frame -- Break!"");",42,download/opencv_opencv3.cpp
50bda8adfed1cbe7d3cae078b7353c278551052c,Update objectDetection.cpp,samples/cpp/tutorial_code/objectDetection/objectDetection.cpp,+,parser.printMessage();,34,download/opencv_opencv4.cpp
50bda8adfed1cbe7d3cae078b7353c278551052c,Update objectDetection.cpp,samples/cpp/tutorial_code/objectDetection/objectDetection2.cpp,-,"if( !face_cascade.load( face_cascade_name ) ){ printf(""--(!)Error loading face cascade\n""); return -1; };",34,download/opencv_opencv5.cpp
50bda8adfed1cbe7d3cae078b7353c278551052c,Update objectDetection.cpp,samples/cpp/tutorial_code/objectDetection/objectDetection2.cpp,-,"if( !eyes_cascade.load( eyes_cascade_name ) ){ printf(""--(!)Error loading eyes cascade\n""); return -1; };",34,download/opencv_opencv5.cpp
50bda8adfed1cbe7d3cae078b7353c278551052c,Update objectDetection.cpp,samples/cpp/tutorial_code/objectDetection/objectDetection2.cpp,-,"if ( ! capture.isOpened() ) { printf(""--(!)Error opening video capture\n""); return -1; }",37,download/opencv_opencv5.cpp
50bda8adfed1cbe7d3cae078b7353c278551052c,Update objectDetection.cpp,samples/cpp/tutorial_code/objectDetection/objectDetection2.cpp,-,"printf("" --(!) No captured frame -- Break!"");",42,download/opencv_opencv5.cpp
931b32d1022dbb999ede6143307720910177d2c3,core: add single DMatch/Keypoint I/O,modules/core/test/test_io.cpp,-,"FileStorage writer("""", FileStorage::WRITE + FileStorage::MEMORY + FileStorage::FORMAT_XML);",1065,download/opencv_opencv6.cpp
931b32d1022dbb999ede6143307720910177d2c3,core: add single DMatch/Keypoint I/O,modules/core/test/test_io.cpp,-,"ASSERT_EQ(matchesVec.size(), readKptsVec.size());",1072,download/opencv_opencv6.cpp
931b32d1022dbb999ede6143307720910177d2c3,core: add single DMatch/Keypoint I/O,modules/core/test/test_io.cpp,-,"ASSERT_EQ(matchesVec[i].size(), readKptsVec[i].size());",1075,download/opencv_opencv6.cpp
931b32d1022dbb999ede6143307720910177d2c3,core: add single DMatch/Keypoint I/O,modules/core/test/test_io.cpp,-,"ASSERT_FLOAT_EQ(matchesVec[i][j].distance, readKptsVec[i][j].distance);",1077,download/opencv_opencv6.cpp
931b32d1022dbb999ede6143307720910177d2c3,core: add single DMatch/Keypoint I/O,modules/core/test/test_io.cpp,-,"ASSERT_EQ(matchesVec[i][j].imgIdx, readKptsVec[i][j].imgIdx);",1077,download/opencv_opencv6.cpp
931b32d1022dbb999ede6143307720910177d2c3,core: add single DMatch/Keypoint I/O,modules/core/test/test_io.cpp,-,"ASSERT_EQ(matchesVec[i][j].queryIdx, readKptsVec[i][j].queryIdx);",1077,download/opencv_opencv6.cpp
931b32d1022dbb999ede6143307720910177d2c3,core: add single DMatch/Keypoint I/O,modules/core/test/test_io.cpp,-,"ASSERT_EQ(matchesVec[i][j].trainIdx, readKptsVec[i][j].trainIdx);",1077,download/opencv_opencv6.cpp
89ce2dc405075e710e09636e76ef71dc8b6d57e2,core: DMatch I/O tests,modules/core/test/test_io.cpp,+,"ASSERT_NO_THROW(fs_read[""d""] >> d_read);",1102,download/opencv_opencv7.cpp
89ce2dc405075e710e09636e76ef71dc8b6d57e2,core: DMatch I/O tests,modules/core/test/test_io.cpp,+,"ASSERT_NO_THROW(fs_read[""dv""] >> dv_read);",1142,download/opencv_opencv7.cpp
89ce2dc405075e710e09636e76ef71dc8b6d57e2,core: DMatch I/O tests,modules/core/test/test_io.cpp,+,"ASSERT_EQ(dv.size(), dv_read.size());",1144,download/opencv_opencv7.cpp
89ce2dc405075e710e09636e76ef71dc8b6d57e2,core: DMatch I/O tests,modules/core/test/test_io.cpp,+,"ASSERT_NO_THROW(fs_read[""dvv""] >> dvv_read);",1198,download/opencv_opencv7.cpp
89ce2dc405075e710e09636e76ef71dc8b6d57e2,core: DMatch I/O tests,modules/core/test/test_io.cpp,+,"ASSERT_EQ(dvv.size(), dvv_read.size());",1200,download/opencv_opencv7.cpp
89ce2dc405075e710e09636e76ef71dc8b6d57e2,core: DMatch I/O tests,modules/core/test/test_io.cpp,+,"ASSERT_EQ(dvv.size(), dvv_read.size());",1205,download/opencv_opencv7.cpp
b46364e4366129fd2e8e136d493f1028a17a90f0,Merge pull request #7996 from mshabunin:hal-filter-revert,modules/imgproc/src/filter.cpp,-,"CV_Error(Error::StsNotImplemented, ""HAL Filter returned an error"");",4542,download/opencv_opencv8.cpp
b46364e4366129fd2e8e136d493f1028a17a90f0,Merge pull request #7996 from mshabunin:hal-filter-revert,modules/imgproc/src/filter.cpp,-,"CV_Error(Error::StsNotImplemented, ""HAL Filter Free returned an error"");",4550,download/opencv_opencv8.cpp
b46364e4366129fd2e8e136d493f1028a17a90f0,Merge pull request #7996 from mshabunin:hal-filter-revert,modules/imgproc/src/filter.cpp,-,"CV_Error(Error::StsBadArg, ""Inplace IPP Filter2D is not supported"");",4756,download/opencv_opencv8.cpp
b46364e4366129fd2e8e136d493f1028a17a90f0,Merge pull request #7996 from mshabunin:hal-filter-revert,modules/imgproc/src/filter.cpp,-,"CV_Error(Error::StsNotImplemented, ""Failed to run HAL sepFilter implementation"");",4902,download/opencv_opencv8.cpp
b46364e4366129fd2e8e136d493f1028a17a90f0,Merge pull request #7996 from mshabunin:hal-filter-revert,modules/imgproc/src/filter.cpp,-,"CV_Error(Error::StsNotImplemented, ""Failed to run HAL sepFilter implementation"");",4910,download/opencv_opencv8.cpp
b46364e4366129fd2e8e136d493f1028a17a90f0,Merge pull request #7996 from mshabunin:hal-filter-revert,modules/imgproc/src/morph.cpp,-,"CV_Error(Error::StsNotImplemented, ""Failed to run HAL morph implementation"");",1121,download/opencv_opencv9.cpp
b46364e4366129fd2e8e136d493f1028a17a90f0,Merge pull request #7996 from mshabunin:hal-filter-revert,modules/imgproc/src/morph.cpp,-,"CV_Error(Error::StsNotImplemented, ""Failed to run HAL morph implementation"");",1129,download/opencv_opencv9.cpp
b46364e4366129fd2e8e136d493f1028a17a90f0,Merge pull request #7996 from mshabunin:hal-filter-revert,modules/imgproc/src/morph.cpp,-,"|| (borderType == cv::BORDER_CONSTANT && Vec<double, 4>(borderValue) == morphologyDefaultBorderValue() && kernel.size() == Size(3,3)))",1216,download/opencv_opencv9.cpp
b46364e4366129fd2e8e136d493f1028a17a90f0,Merge pull request #7996 from mshabunin:hal-filter-revert,modules/imgproc/src/morph.cpp,+,"|| (borderType == cv::BORDER_CONSTANT && Vec<double, 4>(borderValue) == morphologyDefaultBorderValue() && kernel.size() == Size(3,3)))",1285,download/opencv_opencv9.cpp
b46364e4366129fd2e8e136d493f1028a17a90f0,Merge pull request #7996 from mshabunin:hal-filter-revert,modules/imgproc/src/morph.cpp,-,"CV_Error(Error::StsBadArg, ""IPP Morph inplace is not alowed"");",1379,download/opencv_opencv9.cpp
b46364e4366129fd2e8e136d493f1028a17a90f0,Merge pull request #7996 from mshabunin:hal-filter-revert,modules/imgproc/src/morph.cpp,-,"CV_Error(Error::StsBadArg, ""Failed to run IPP morph"");",1434,download/opencv_opencv9.cpp
b46364e4366129fd2e8e136d493f1028a17a90f0,Merge pull request #7996 from mshabunin:hal-filter-revert,modules/imgproc/src/morph.cpp,+,"Ptr<FilterEngine> f = createMorphologyFilter(op, src_type, kernel, anchor, borderType, borderType, borderVal);",1492,download/opencv_opencv9.cpp
b46364e4366129fd2e8e136d493f1028a17a90f0,Merge pull request #7996 from mshabunin:hal-filter-revert,modules/imgproc/src/morph.cpp,-,"f = createMorphologyFilter(op, src_type, kernel, anchor, borderType, borderType, borderValue );",1502,download/opencv_opencv9.cpp
e0ee2f769a2ea461bca00ce16a688558af9530ad,Merge pull request #8116 from mrquorr:master,modules/ml/src/rtrees.cpp,+,CV_Assert( !roots.empty() );,354,download/opencv_opencv10.cpp
e0ee2f769a2ea461bca00ce16a688558af9530ad,Merge pull request #8116 from mrquorr:master,modules/ml/src/rtrees.cpp,+,"CV_Error(Error::StsNotImplemented, ""the class is not RTreesImpl"");",493,download/opencv_opencv10.cpp
c7049ca627f47fece7adb2c132ba118209d517e6,Merge pull request #8293 from alalek:update_rng_in_parallel_for,modules/core/test/test_rand.cpp,+,"ASSERT_EQ(0, countNonZero(dst1 != dst2));",417,download/opencv_opencv11.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/src/persistence.cpp,-,"cv::write(fs, kpt.pt.x);",7287,download/opencv_opencv12.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/src/persistence.cpp,-,"cv::write(fs, kpt.pt.y);",7287,download/opencv_opencv12.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/src/persistence.cpp,-,"cv::write(fs, kpt.size);",7287,download/opencv_opencv12.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/src/persistence.cpp,-,"cv::write(fs, kpt.angle);",7287,download/opencv_opencv12.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/src/persistence.cpp,-,"cv::write(fs, kpt.response);",7287,download/opencv_opencv12.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/src/persistence.cpp,-,"cv::write(fs, kpt.octave);",7287,download/opencv_opencv12.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/src/persistence.cpp,-,"cv::write(fs, kpt.class_id);",7287,download/opencv_opencv12.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/src/persistence.cpp,+,"write(fs, keypoints[i]);",7287,download/opencv_opencv12.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/src/persistence.cpp,-,"cv::write(fs, m.queryIdx);",7312,download/opencv_opencv12.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/src/persistence.cpp,-,"cv::write(fs, m.trainIdx);",7312,download/opencv_opencv12.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/src/persistence.cpp,-,"cv::write(fs, m.imgIdx);",7312,download/opencv_opencv12.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/src/persistence.cpp,-,"cv::write(fs, m.distance);",7312,download/opencv_opencv12.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/src/persistence.cpp,+,"write(fs, matches[i]);",7312,download/opencv_opencv12.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/test/test_io.cpp,+,"FileStorage writer("""", FileStorage::WRITE + FileStorage::MEMORY + FileStorage::FORMAT_XML);",1028,download/opencv_opencv13.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/test/test_io.cpp,+,"ASSERT_EQ(kptsVec.size(), readKptsVec.size());",1036,download/opencv_opencv13.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/test/test_io.cpp,+,"ASSERT_EQ(kptsVec[i].size(), readKptsVec[i].size());",1040,download/opencv_opencv13.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/test/test_io.cpp,+,"ASSERT_FLOAT_EQ(kptsVec[i][j].pt.x, readKptsVec[i][j].pt.x);",1043,download/opencv_opencv13.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/test/test_io.cpp,+,"ASSERT_FLOAT_EQ(kptsVec[i][j].pt.y, readKptsVec[i][j].pt.y);",1044,download/opencv_opencv13.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/test/test_io.cpp,+,"ASSERT_FLOAT_EQ(kptsVec[i][j].angle, readKptsVec[i][j].angle);",1045,download/opencv_opencv13.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/test/test_io.cpp,+,"ASSERT_FLOAT_EQ(kptsVec[i][j].size, readKptsVec[i][j].size);",1046,download/opencv_opencv13.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/test/test_io.cpp,+,"ASSERT_FLOAT_EQ(kptsVec[i][j].response, readKptsVec[i][j].response);",1047,download/opencv_opencv13.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/test/test_io.cpp,+,"ASSERT_EQ(kptsVec[i][j].octave, readKptsVec[i][j].octave);",1048,download/opencv_opencv13.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/test/test_io.cpp,+,"ASSERT_EQ(kptsVec[i][j].class_id, readKptsVec[i][j].class_id);",1049,download/opencv_opencv13.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/test/test_io.cpp,+,"FileStorage writer("""", FileStorage::WRITE + FileStorage::MEMORY + FileStorage::FORMAT_XML);",1065,download/opencv_opencv13.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/test/test_io.cpp,+,"ASSERT_EQ(matchesVec.size(), readKptsVec.size());",1073,download/opencv_opencv13.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/test/test_io.cpp,+,"ASSERT_EQ(matchesVec[i].size(), readKptsVec[i].size());",1077,download/opencv_opencv13.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/test/test_io.cpp,+,"ASSERT_FLOAT_EQ(matchesVec[i][j].distance, readKptsVec[i][j].distance);",1080,download/opencv_opencv13.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/test/test_io.cpp,+,"ASSERT_EQ(matchesVec[i][j].imgIdx, readKptsVec[i][j].imgIdx);",1081,download/opencv_opencv13.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/test/test_io.cpp,+,"ASSERT_EQ(matchesVec[i][j].queryIdx, readKptsVec[i][j].queryIdx);",1082,download/opencv_opencv13.cpp
ddfe688be68654417c82b7ce0326698ab6c2b53c,Merge pull request #8299 from sovrasov:fs_fix_kpts_dmatch_output,modules/core/test/test_io.cpp,+,"ASSERT_EQ(matchesVec[i][j].trainIdx, readKptsVec[i][j].trainIdx);",1083,download/opencv_opencv13.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/src/persistence.cpp,-,"cv::write(fs, kpt.pt.x);",7287,download/opencv_opencv14.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/src/persistence.cpp,-,"cv::write(fs, kpt.pt.y);",7287,download/opencv_opencv14.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/src/persistence.cpp,-,"cv::write(fs, kpt.size);",7287,download/opencv_opencv14.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/src/persistence.cpp,-,"cv::write(fs, kpt.angle);",7287,download/opencv_opencv14.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/src/persistence.cpp,-,"cv::write(fs, kpt.response);",7287,download/opencv_opencv14.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/src/persistence.cpp,-,"cv::write(fs, kpt.octave);",7287,download/opencv_opencv14.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/src/persistence.cpp,-,"cv::write(fs, kpt.class_id);",7287,download/opencv_opencv14.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/src/persistence.cpp,+,"write(fs, keypoints[i]);",7287,download/opencv_opencv14.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/src/persistence.cpp,-,"cv::write(fs, m.queryIdx);",7312,download/opencv_opencv14.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/src/persistence.cpp,-,"cv::write(fs, m.trainIdx);",7312,download/opencv_opencv14.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/src/persistence.cpp,-,"cv::write(fs, m.imgIdx);",7312,download/opencv_opencv14.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/src/persistence.cpp,-,"cv::write(fs, m.distance);",7312,download/opencv_opencv14.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/src/persistence.cpp,+,"write(fs, matches[i]);",7312,download/opencv_opencv14.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/test/test_io.cpp,+,"FileStorage writer("""", FileStorage::WRITE + FileStorage::MEMORY + FileStorage::FORMAT_XML);",1028,download/opencv_opencv15.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/test/test_io.cpp,+,"ASSERT_EQ(kptsVec.size(), readKptsVec.size());",1036,download/opencv_opencv15.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/test/test_io.cpp,+,"ASSERT_EQ(kptsVec[i].size(), readKptsVec[i].size());",1040,download/opencv_opencv15.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/test/test_io.cpp,+,"ASSERT_FLOAT_EQ(kptsVec[i][j].pt.x, readKptsVec[i][j].pt.x);",1043,download/opencv_opencv15.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/test/test_io.cpp,+,"ASSERT_FLOAT_EQ(kptsVec[i][j].pt.y, readKptsVec[i][j].pt.y);",1044,download/opencv_opencv15.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/test/test_io.cpp,+,"ASSERT_FLOAT_EQ(kptsVec[i][j].angle, readKptsVec[i][j].angle);",1045,download/opencv_opencv15.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/test/test_io.cpp,+,"ASSERT_FLOAT_EQ(kptsVec[i][j].size, readKptsVec[i][j].size);",1046,download/opencv_opencv15.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/test/test_io.cpp,+,"ASSERT_FLOAT_EQ(kptsVec[i][j].response, readKptsVec[i][j].response);",1047,download/opencv_opencv15.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/test/test_io.cpp,+,"ASSERT_EQ(kptsVec[i][j].octave, readKptsVec[i][j].octave);",1048,download/opencv_opencv15.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/test/test_io.cpp,+,"ASSERT_EQ(kptsVec[i][j].class_id, readKptsVec[i][j].class_id);",1049,download/opencv_opencv15.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/test/test_io.cpp,+,"FileStorage writer("""", FileStorage::WRITE + FileStorage::MEMORY + FileStorage::FORMAT_XML);",1065,download/opencv_opencv15.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/test/test_io.cpp,+,"ASSERT_EQ(matchesVec.size(), readKptsVec.size());",1073,download/opencv_opencv15.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/test/test_io.cpp,+,"ASSERT_EQ(matchesVec[i].size(), readKptsVec[i].size());",1077,download/opencv_opencv15.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/test/test_io.cpp,+,"ASSERT_FLOAT_EQ(matchesVec[i][j].distance, readKptsVec[i][j].distance);",1080,download/opencv_opencv15.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/test/test_io.cpp,+,"ASSERT_EQ(matchesVec[i][j].imgIdx, readKptsVec[i][j].imgIdx);",1081,download/opencv_opencv15.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/test/test_io.cpp,+,"ASSERT_EQ(matchesVec[i][j].queryIdx, readKptsVec[i][j].queryIdx);",1082,download/opencv_opencv15.cpp
c321d025c4eed2fcdae7d7dbff7edaa233495b24,Fix DMatch and Keypoint I/O in FileStorage,modules/core/test/test_io.cpp,+,"ASSERT_EQ(matchesVec[i][j].trainIdx, readKptsVec[i][j].trainIdx);",1083,download/opencv_opencv15.cpp
d8425d88816ef7dbc9c8e5fa4cce407c7cf7a64e,"finished for one sample

Finished with several samples support, need regression testing

Gave a more relevant name to function (getVotes)

Finished implicit implementation

Removed printf, finished regresion testing

Fixed conversion warning

Finished test for Rtrees

Fixed documentation

Initialized variable

Added doxygen documentation

Added parameter name",modules/ml/src/rtrees.cpp,+,CV_Assert( !roots.empty() );,354,download/opencv_opencv16.cpp
d8425d88816ef7dbc9c8e5fa4cce407c7cf7a64e,"finished for one sample

Finished with several samples support, need regression testing

Gave a more relevant name to function (getVotes)

Finished implicit implementation

Removed printf, finished regresion testing

Fixed conversion warning

Finished test for Rtrees

Fixed documentation

Initialized variable

Added doxygen documentation

Added parameter name",modules/ml/src/rtrees.cpp,+,"CV_Error(Error::StsNotImplemented, ""the class is not RTreesImpl"");",493,download/opencv_opencv16.cpp
ebdd74105a0c04ac16b1d6a9adc46d683cb44a07,core(test): add regression test for RNG in parallel_for_(),modules/core/test/test_rand.cpp,+,"ASSERT_EQ(0, countNonZero(dst1 != dst2));",417,download/opencv_opencv17.cpp
c4c1c4c9bbddc2541844a094a0cbdff949655997,"Replaced several hal:: classes with functions, marked old variants deprecated",modules/imgproc/src/filter.cpp,-,"CV_Error(Error::StsNotImplemented, ""HAL Filter returned an error"");",4542,download/opencv_opencv18.cpp
c4c1c4c9bbddc2541844a094a0cbdff949655997,"Replaced several hal:: classes with functions, marked old variants deprecated",modules/imgproc/src/filter.cpp,-,"CV_Error(Error::StsNotImplemented, ""HAL Filter Free returned an error"");",4550,download/opencv_opencv18.cpp
c4c1c4c9bbddc2541844a094a0cbdff949655997,"Replaced several hal:: classes with functions, marked old variants deprecated",modules/imgproc/src/filter.cpp,-,"CV_Error(Error::StsBadArg, ""Inplace IPP Filter2D is not supported"");",4756,download/opencv_opencv18.cpp
c4c1c4c9bbddc2541844a094a0cbdff949655997,"Replaced several hal:: classes with functions, marked old variants deprecated",modules/imgproc/src/filter.cpp,-,"CV_Error(Error::StsNotImplemented, ""Failed to run HAL sepFilter implementation"");",4902,download/opencv_opencv18.cpp
c4c1c4c9bbddc2541844a094a0cbdff949655997,"Replaced several hal:: classes with functions, marked old variants deprecated",modules/imgproc/src/filter.cpp,-,"CV_Error(Error::StsNotImplemented, ""Failed to run HAL sepFilter implementation"");",4910,download/opencv_opencv18.cpp
c4c1c4c9bbddc2541844a094a0cbdff949655997,"Replaced several hal:: classes with functions, marked old variants deprecated",modules/imgproc/src/morph.cpp,-,"CV_Error(Error::StsNotImplemented, ""Failed to run HAL morph implementation"");",1121,download/opencv_opencv19.cpp
c4c1c4c9bbddc2541844a094a0cbdff949655997,"Replaced several hal:: classes with functions, marked old variants deprecated",modules/imgproc/src/morph.cpp,-,"CV_Error(Error::StsNotImplemented, ""Failed to run HAL morph implementation"");",1129,download/opencv_opencv19.cpp
c4c1c4c9bbddc2541844a094a0cbdff949655997,"Replaced several hal:: classes with functions, marked old variants deprecated",modules/imgproc/src/morph.cpp,-,"|| (borderType == cv::BORDER_CONSTANT && Vec<double, 4>(borderValue) == morphologyDefaultBorderValue() && kernel.size() == Size(3,3)))",1216,download/opencv_opencv19.cpp
c4c1c4c9bbddc2541844a094a0cbdff949655997,"Replaced several hal:: classes with functions, marked old variants deprecated",modules/imgproc/src/morph.cpp,+,"|| (borderType == cv::BORDER_CONSTANT && Vec<double, 4>(borderValue) == morphologyDefaultBorderValue() && kernel.size() == Size(3,3)))",1285,download/opencv_opencv19.cpp
c4c1c4c9bbddc2541844a094a0cbdff949655997,"Replaced several hal:: classes with functions, marked old variants deprecated",modules/imgproc/src/morph.cpp,-,"CV_Error(Error::StsBadArg, ""IPP Morph inplace is not alowed"");",1379,download/opencv_opencv19.cpp
c4c1c4c9bbddc2541844a094a0cbdff949655997,"Replaced several hal:: classes with functions, marked old variants deprecated",modules/imgproc/src/morph.cpp,-,"CV_Error(Error::StsBadArg, ""Failed to run IPP morph"");",1434,download/opencv_opencv19.cpp
c4c1c4c9bbddc2541844a094a0cbdff949655997,"Replaced several hal:: classes with functions, marked old variants deprecated",modules/imgproc/src/morph.cpp,+,"Ptr<FilterEngine> f = createMorphologyFilter(op, src_type, kernel, anchor, borderType, borderType, borderVal);",1492,download/opencv_opencv19.cpp
c4c1c4c9bbddc2541844a094a0cbdff949655997,"Replaced several hal:: classes with functions, marked old variants deprecated",modules/imgproc/src/morph.cpp,-,"f = createMorphologyFilter(op, src_type, kernel, anchor, borderType, borderType, borderValue );",1502,download/opencv_opencv19.cpp
eee638fd810d5a620b73bebba12abe10b2386df3,Merge pull request #8244 from sovrasov:adjust_roi_fix,modules/core/test/test_operations.cpp,+,"ASSERT_EQ(roi.rows, rowsInROI + 1);",1251,download/opencv_opencv20.cpp
eee638fd810d5a620b73bebba12abe10b2386df3,Merge pull request #8244 from sovrasov:adjust_roi_fix,modules/core/test/test_operations.cpp,+,"ASSERT_EQ(roi.rows, m.rows);",1255,download/opencv_opencv20.cpp
eee638fd810d5a620b73bebba12abe10b2386df3,Merge pull request #8244 from sovrasov:adjust_roi_fix,modules/core/test/test_umat.cpp,+,"ASSERT_EQ(roi.rows, rowsInROI + 1);",506,download/opencv_opencv21.cpp
eee638fd810d5a620b73bebba12abe10b2386df3,Merge pull request #8244 from sovrasov:adjust_roi_fix,modules/core/test/test_umat.cpp,+,"ASSERT_EQ(roi.rows, m.rows);",510,download/opencv_opencv21.cpp
12d7429ff050920b96a26aa7ae8ee336f5ca25a3,Merge pull request #8064 from terfendail:sgbm_bigbuffer,modules/core/src/matrix.cpp,+,CV_Assert(nelems <= size_t(INT_MAX)*size_t(INT_MAX));,848,download/opencv_opencv22.cpp
14451f3f062d3c05b62f03b433423752c5fb9315,core: fix adjustROI behavior on indexes overflow,modules/core/test/test_operations.cpp,+,"ASSERT_EQ(roi.rows, rowsInROI + 1);",1251,download/opencv_opencv23.cpp
14451f3f062d3c05b62f03b433423752c5fb9315,core: fix adjustROI behavior on indexes overflow,modules/core/test/test_operations.cpp,+,"ASSERT_EQ(roi.rows, m.rows);",1255,download/opencv_opencv23.cpp
14451f3f062d3c05b62f03b433423752c5fb9315,core: fix adjustROI behavior on indexes overflow,modules/core/test/test_umat.cpp,+,"ASSERT_EQ(roi.rows, rowsInROI + 1);",506,download/opencv_opencv24.cpp
14451f3f062d3c05b62f03b433423752c5fb9315,core: fix adjustROI behavior on indexes overflow,modules/core/test/test_umat.cpp,+,"ASSERT_EQ(roi.rows, m.rows);",510,download/opencv_opencv24.cpp
3240f2a6b790bb9df086d390233c74a04ad63124,Merge pull request #8187 from hewj03:improve-MultiBandBlender-cuda,modules/stitching/test/test_blenders.cuda.cpp,+,"ASSERT_EQ(image1.rows, image2.rows); ASSERT_EQ(image1.cols, image2.cols);",70,download/opencv_opencv25.cpp
ca0b6fbb952899a1c7de91b909d3acd8e682cedf,Merge pull request #8203 from alalek:ocl_kernelarg_validate,modules/core/src/ocl.cpp,+,CV_Assert(_flags == LOCAL || _flags == CONSTANT || _m != NULL);,3158,download/opencv_opencv26.cpp
4c7aa8645abd2ce9dc1e64088febb778b175c49e,"ocl: validate arguments in KernelArgs constructor

- don't use undefined flag=0. It should be CONSTANT instead.
- don't allow 'UMat* m=NULL' argument (except LOCAL/CONSTANT flags).
  This case is not handled well to provide NULL __global pointers.
  It is better to use '-D' macro defines instead (at least for performance)",modules/core/src/ocl.cpp,+,CV_Assert(_flags == LOCAL || _flags == CONSTANT || _m != NULL);,3158,download/opencv_opencv27.cpp
272213320603052ba756e14bfe95e037df699de0,add accuracy test CUDA_MultiBandBlender,modules/stitching/test/test_blenders.cuda.cpp,+,"ASSERT_EQ(image1.rows, image2.rows); ASSERT_EQ(image1.cols, image2.cols);",70,download/opencv_opencv28.cpp
4950f542d12b133b23c7c753907874e91d5a7fa6,Fix for SGBM compute() buffer allocation failure on big images,modules/core/src/matrix.cpp,+,CV_Assert(nelems <= size_t(INT_MAX)*size_t(INT_MAX));,848,download/opencv_opencv29.cpp
ece3fac7efb07bf01a7875d82be51a69c0d8a1c2,"Merge pull request #8112 from PkLab:Fix_7898

CoInitialize/CoUninitialize in VFW classes (#8112)",modules/videoio/src/cap_vfw.cpp,-,CvVideoWriter_VFW() { init(); },684,download/opencv_opencv30.cpp
ece3fac7efb07bf01a7875d82be51a69c0d8a1c2,"Merge pull request #8112 from PkLab:Fix_7898

CoInitialize/CoUninitialize in VFW classes (#8112)",modules/videoio/src/cap_vfw.cpp,-,virtual ~CvVideoWriter_VFW() { close(); },684,download/opencv_opencv30.cpp
ece3fac7efb07bf01a7875d82be51a69c0d8a1c2,"Merge pull request #8112 from PkLab:Fix_7898

CoInitialize/CoUninitialize in VFW classes (#8112)",modules/videoio/src/cap_vfw.cpp,+,CvVideoWriter_VFW(),684,download/opencv_opencv30.cpp
ece3fac7efb07bf01a7875d82be51a69c0d8a1c2,"Merge pull request #8112 from PkLab:Fix_7898

CoInitialize/CoUninitialize in VFW classes (#8112)",modules/videoio/src/cap_vfw.cpp,+,virtual ~CvVideoWriter_VFW(),689,download/opencv_opencv30.cpp
dfb348ef0b91b13b87141ab238aec929c86ecaac,Merge pull request #8081 from mshabunin:fix-kmeans-compactness,modules/core/test/test_math.cpp,+,"ASSERT_EQ(centers.rows, K);",2829,download/opencv_opencv31.cpp
dfb348ef0b91b13b87141ab238aec929c86ecaac,Merge pull request #8081 from mshabunin:fix-kmeans-compactness,modules/core/test/test_math.cpp,+,"ASSERT_EQ(labels.rows, N);",2830,download/opencv_opencv31.cpp
dfb348ef0b91b13b87141ab238aec929c86ecaac,Merge pull request #8081 from mshabunin:fix-kmeans-compactness,modules/core/test/test_math.cpp,-,CV_Assert(0 <= l && l < K);,2836,download/opencv_opencv31.cpp
dfb348ef0b91b13b87141ab238aec929c86ecaac,Merge pull request #8081 from mshabunin:fix-kmeans-compactness,modules/core/test/test_math.cpp,+,"ASSERT_GE(l, 0);",2836,download/opencv_opencv31.cpp
dfb348ef0b91b13b87141ab238aec929c86ecaac,Merge pull request #8081 from mshabunin:fix-kmeans-compactness,modules/core/test/test_math.cpp,+,"ASSERT_LT(l, K);",2837,download/opencv_opencv31.cpp
dfb348ef0b91b13b87141ab238aec929c86ecaac,Merge pull request #8081 from mshabunin:fix-kmeans-compactness,modules/core/test/test_math.cpp,-,CV_Assert( hist.at<int>(i) != 0 );,2841,download/opencv_opencv31.cpp
dfb348ef0b91b13b87141ab238aec929c86ecaac,Merge pull request #8081 from mshabunin:fix-kmeans-compactness,modules/core/test/test_math.cpp,+,"ASSERT_GT(hist.at<int>(i), 0);",2841,download/opencv_opencv31.cpp
dfb348ef0b91b13b87141ab238aec929c86ecaac,Merge pull request #8081 from mshabunin:fix-kmeans-compactness,modules/core/test/test_math.cpp,-,"ts->printf(cvtest::TS::LOG,",2846,download/opencv_opencv31.cpp
b417b4dbee83926d627d5cbbf9472731966232dd,"KMeans improvement

- fixed returned compactness value
- added centers drawing to the example app
- added compactness test",modules/core/test/test_math.cpp,+,"ASSERT_EQ(centers.rows, K);",2829,download/opencv_opencv32.cpp
b417b4dbee83926d627d5cbbf9472731966232dd,"KMeans improvement

- fixed returned compactness value
- added centers drawing to the example app
- added compactness test",modules/core/test/test_math.cpp,+,"ASSERT_EQ(labels.rows, N);",2830,download/opencv_opencv32.cpp
b417b4dbee83926d627d5cbbf9472731966232dd,"KMeans improvement

- fixed returned compactness value
- added centers drawing to the example app
- added compactness test",modules/core/test/test_math.cpp,-,CV_Assert(0 <= l && l < K);,2836,download/opencv_opencv32.cpp
b417b4dbee83926d627d5cbbf9472731966232dd,"KMeans improvement

- fixed returned compactness value
- added centers drawing to the example app
- added compactness test",modules/core/test/test_math.cpp,+,"ASSERT_GE(l, 0);",2836,download/opencv_opencv32.cpp
b417b4dbee83926d627d5cbbf9472731966232dd,"KMeans improvement

- fixed returned compactness value
- added centers drawing to the example app
- added compactness test",modules/core/test/test_math.cpp,+,"ASSERT_LT(l, K);",2837,download/opencv_opencv32.cpp
b417b4dbee83926d627d5cbbf9472731966232dd,"KMeans improvement

- fixed returned compactness value
- added centers drawing to the example app
- added compactness test",modules/core/test/test_math.cpp,-,CV_Assert( hist.at<int>(i) != 0 );,2841,download/opencv_opencv32.cpp
b417b4dbee83926d627d5cbbf9472731966232dd,"KMeans improvement

- fixed returned compactness value
- added centers drawing to the example app
- added compactness test",modules/core/test/test_math.cpp,+,"ASSERT_GT(hist.at<int>(i), 0);",2841,download/opencv_opencv32.cpp
b417b4dbee83926d627d5cbbf9472731966232dd,"KMeans improvement

- fixed returned compactness value
- added centers drawing to the example app
- added compactness test",modules/core/test/test_math.cpp,-,"ts->printf(cvtest::TS::LOG,",2846,download/opencv_opencv32.cpp
124c4825a7adb623a57183f9932ca402cf64c51d,"Merge pull request #8089 from hrnr:estimate_convert_fix

fix wrong conversion in estimateAffine2D* functions",modules/calib3d/test/test_affine2d_estimator.cpp,+,ASSERT_FALSE(aff_est.empty());,149,download/opencv_opencv33.cpp
124c4825a7adb623a57183f9932ca402cf64c51d,"Merge pull request #8089 from hrnr:estimate_convert_fix

fix wrong conversion in estimateAffine2D* functions",modules/calib3d/test/test_affine_partial2d_estimator.cpp,+,ASSERT_FALSE(aff_est.empty());,158,download/opencv_opencv34.cpp
4ee25c7e9587155f8c498f54bbbd0509a404ca1b,"add test for convertions in estimateAffine2D* functions

test with integer points to cover conversion bugs.",modules/calib3d/test/test_affine2d_estimator.cpp,+,ASSERT_FALSE(aff_est.empty());,149,download/opencv_opencv35.cpp
4ee25c7e9587155f8c498f54bbbd0509a404ca1b,"add test for convertions in estimateAffine2D* functions

test with integer points to cover conversion bugs.",modules/calib3d/test/test_affine_partial2d_estimator.cpp,+,ASSERT_FALSE(aff_est.empty());,158,download/opencv_opencv36.cpp
3413c23b341bd6ad5283a66a0a252775e4f97bd4,Merge pull request #8061 from tomoaki0705:universalIntrinsicStereoCalib3d,modules/calib3d/src/stereobm.cpp,+,CV_Assert( _disp.type() == CV_16S || _disp.type() == CV_32S );,964,download/opencv_opencv37.cpp
b34ebc8cfef7582167fc116ff8726c7ce7e1fb73,"use universal intrinsic in stereo matching
 - check SIMD availability before executing",modules/calib3d/src/stereobm.cpp,+,CV_Assert( _disp.type() == CV_16S || _disp.type() == CV_32S );,964,download/opencv_opencv38.cpp
85ef02bc5cf873d77abe6bea515cd522b21cc428,Merge pull request #8023 from sovrasov:fs_add_full_yml_type_heading,modules/core/src/persistence.cpp,+,while( cv_isprint(d) && d != ' ' && d != '>' );,1486,download/opencv_opencv39.cpp
85ef02bc5cf873d77abe6bea515cd522b21cc428,Merge pull request #8023 from sovrasov:fs_add_full_yml_type_heading,modules/core/test/test_io.cpp,+,"ASSERT_EQ(cv::norm(inputMatrix, actualMatrix, NORM_INF), 0.);",1014,download/opencv_opencv40.cpp
896c34fab3fa49ec5d913305040b1eab15589d3a,Add support of type headings from YAML1.2,modules/core/src/persistence.cpp,+,while( cv_isprint(d) && d != ' ' && d != '>' );,1486,download/opencv_opencv41.cpp
896c34fab3fa49ec5d913305040b1eab15589d3a,Add support of type headings from YAML1.2,modules/core/test/test_io.cpp,+,"ASSERT_EQ(cv::norm(inputMatrix, actualMatrix, NORM_INF), 0.);",1014,download/opencv_opencv42.cpp
97f5d05d1f50ba947843db1e4f9bbcdaa71f4454,"Merge pull request #7960 from catree:tutorial_parallel_for_

Add OpenCV parallel_for_ tutorial.",samples/cpp/tutorial_code/core/how_to_use_OpenCV_parallel_for_/how_to_use_OpenCV_parallel_for_.cpp,+,"imwrite(""Mandelbrot_parallel.png"", mandelbrotImg);",118,download/opencv_opencv43.cpp
97f5d05d1f50ba947843db1e4f9bbcdaa71f4454,"Merge pull request #7960 from catree:tutorial_parallel_for_

Add OpenCV parallel_for_ tutorial.",samples/cpp/tutorial_code/core/how_to_use_OpenCV_parallel_for_/how_to_use_OpenCV_parallel_for_.cpp,+,"imwrite(""Mandelbrot_sequential.png"", mandelbrotImgSequential);",119,download/opencv_opencv43.cpp
e16e141c38ed53a5f9157e6768f9891f4ebf803a,Add OpenCV parallel_for_ tutorial.,samples/cpp/tutorial_code/core/how_to_use_OpenCV_parallel_for_/how_to_use_OpenCV_parallel_for_.cpp,+,"imwrite(""Mandelbrot_parallel.png"", mandelbrotImg);",118,download/opencv_opencv44.cpp
e16e141c38ed53a5f9157e6768f9891f4ebf803a,Add OpenCV parallel_for_ tutorial.,samples/cpp/tutorial_code/core/how_to_use_OpenCV_parallel_for_/how_to_use_OpenCV_parallel_for_.cpp,+,"imwrite(""Mandelbrot_sequential.png"", mandelbrotImgSequential);",119,download/opencv_opencv44.cpp
65598e407575572e9cb64df758f9904e77edc4a9,Merge pull request #7972 from catree:tutorial_brightness,samples/cpp/tutorial_code/ImgProc/changing_contrast_brightness_image/changing_contrast_brightness_image.cpp,+,CV_Assert(gamma_ >= 0);,26,download/opencv_opencv45.cpp
65598e407575572e9cb64df758f9904e77edc4a9,Merge pull request #7972 from catree:tutorial_brightness,samples/cpp/tutorial_code/ImgProc/changing_contrast_brightness_image/changing_contrast_brightness_image.cpp,+,"imwrite(""linear_transform_correction.png"", img_corrected);",87,download/opencv_opencv45.cpp
65598e407575572e9cb64df758f9904e77edc4a9,Merge pull request #7972 from catree:tutorial_brightness,samples/cpp/tutorial_code/ImgProc/changing_contrast_brightness_image/changing_contrast_brightness_image.cpp,+,"imwrite(""gamma_correction.png"", img_gamma_corrected);",88,download/opencv_opencv45.cpp
c0cde75d544122d25634241c88fc84edcb23eccb,Merge pull request #7975 from tomoaki0705:cleanupCalib3dStereo,modules/calib3d/test/test_chesscorners.cpp,-,"ts.printf( cvtest::TS::LOG, ""bad accuracy of corner guesses\n"" );",274,download/opencv_opencv46.cpp
f1aae52daf66b85e80e446aadc51ec44e935124d,clean up unused #if,modules/calib3d/test/test_chesscorners.cpp,-,"ts.printf( cvtest::TS::LOG, ""bad accuracy of corner guesses\n"" );",274,download/opencv_opencv47.cpp
a891caa755595b00f68b69462af07d3d3cbad2d2,Use directly the doxygen snippet command for the Changing the contrast and brightness of an image tutorial. Extend the tutorial with a pratical example and with a gamma correction method to adjust the brightness of an image.,samples/cpp/tutorial_code/ImgProc/changing_contrast_brightness_image/changing_contrast_brightness_image.cpp,+,CV_Assert(gamma_ >= 0);,26,download/opencv_opencv48.cpp
a891caa755595b00f68b69462af07d3d3cbad2d2,Use directly the doxygen snippet command for the Changing the contrast and brightness of an image tutorial. Extend the tutorial with a pratical example and with a gamma correction method to adjust the brightness of an image.,samples/cpp/tutorial_code/ImgProc/changing_contrast_brightness_image/changing_contrast_brightness_image.cpp,+,"imwrite(""linear_transform_correction.png"", img_corrected);",87,download/opencv_opencv48.cpp
a891caa755595b00f68b69462af07d3d3cbad2d2,Use directly the doxygen snippet command for the Changing the contrast and brightness of an image tutorial. Extend the tutorial with a pratical example and with a gamma correction method to adjust the brightness of an image.,samples/cpp/tutorial_code/ImgProc/changing_contrast_brightness_image/changing_contrast_brightness_image.cpp,+,"imwrite(""gamma_correction.png"", img_gamma_corrected);",88,download/opencv_opencv48.cpp
9be630466f8c9d6349a7bc557833fe92eb8e5cdf,Merge pull request #7948 from LorenaGdL:hitmiss_tutorial,samples/cpp/tutorial_code/ImgProc/HitMiss.cpp,+,"morphologyEx(input_image, output_image, MORPH_HITMISS, kernel);",24,download/opencv_opencv49.cpp
3650ec02be2eef242c6932611930b65521b6a2f2,HitMiss tutorial,samples/cpp/tutorial_code/ImgProc/HitMiss.cpp,+,"morphologyEx(input_image, output_image, MORPH_HITMISS, kernel);",24,download/opencv_opencv50.cpp
c3a8db6d6c7ab1abd78d9c1b5ba3de16842a65d1,"Merge pull request #7952 from mattmyne:JSONWriteFixTrailingDecimalPoint

Append zero to trailing decimal place for FileStorage JSON write of a float or double value (#7952)

* Fix for FileStorage JSON write of a float or double value that has no fractional part; appends a zero character after the trailing decimal place to meet JSON standard.

* strlen return to size_t type rather than unnecessary cast to int",modules/core/src/persistence.cpp,-,"icvJSONWrite( fs, key, icvDoubleToString( buf, value ));",4028,download/opencv_opencv51.cpp
c3a8db6d6c7ab1abd78d9c1b5ba3de16842a65d1,"Merge pull request #7952 from mattmyne:JSONWriteFixTrailingDecimalPoint

Append zero to trailing decimal place for FileStorage JSON write of a float or double value (#7952)

* Fix for FileStorage JSON write of a float or double value that has no fractional part; appends a zero character after the trailing decimal place to meet JSON standard.

* strlen return to size_t type rather than unnecessary cast to int",modules/core/src/persistence.cpp,+,"icvJSONWrite( fs, key, buf );",4035,download/opencv_opencv51.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,#define PRINT(...) printf(__VA_ARGS__),21,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,"#define PRINT_HALERR_MSG(type) PRINT(""OpenVX HAL impl ""#type"" error: %s\n"", e.what())",22,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,#define PRINT(...),24,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,#define PRINT_HALERR_MSG(type) (void)e,25,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(runtime);                                                                                  \,140,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(wrapper);                                                                                  \,145,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(runtime);,201,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(wrapper);,206,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(runtime);,245,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(wrapper);,250,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(runtime);,281,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(wrapper);,286,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(runtime);,332,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(wrapper);,337,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(runtime);,392,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(wrapper);,397,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(runtime);,452,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(wrapper);,457,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,"throw ivx::WrapperError(""Bad HAL context"");",559,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(runtime);,579,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(wrapper);,584,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,"throw ivx::WrapperError(""Bad HAL context"");",785,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(runtime);,803,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(wrapper);,808,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(runtime);,839,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(wrapper);,844,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(runtime);,872,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(wrapper);,877,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(runtime);,916,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(wrapper);,921,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,"throw ivx::WrapperError(""UV planes use variable stride"");",949,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(runtime);,964,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(wrapper);,969,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,"throw ivx::WrapperError(""UV planes use variable stride"");",1000,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(runtime);,1010,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(wrapper);,1015,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(runtime);,1047,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(wrapper);,1052,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(runtime);,1081,download/opencv_opencv52.cpp
be7d060ea4cfb8b022ae1ebe54f8296a7fd73c6b,"Merge pull request #7802 from terfendail:ovxhal_wrappers_migration

* OpenVX HAL updated to use generic OpenVX wrappers

* vxErr class from OpenVX HAL replaced with ivx::WrapperError

* reduced usage of vxImage class from OpenVX HAL replaced with ivx::Image

* vxImage class rewritten as ivx::Image subclass that calls swapHandle prior release

* Fix OpenVX HAL build

* Fix for review comments",3rdparty/openvx/hal/openvx_hal.cpp,+,PRINT_HALERR_MSG(wrapper);,1086,download/opencv_opencv52.cpp
ece08374a1d2ac64b974bab0a4d3ed0933592054,Merge pull request #7838 from khnaba:morphology-32f,modules/cudafilters/src/filtering.cpp,-,CV_Assert( srcType == CV_8UC1 || srcType == CV_8UC4 );,560,download/opencv_opencv53.cpp
ece08374a1d2ac64b974bab0a4d3ed0933592054,Merge pull request #7838 from khnaba:morphology-32f,modules/cudafilters/src/filtering.cpp,+,CV_Assert( srcType == CV_8UC1 || srcType == CV_8UC4 || srcType == CV_32FC1 || srcType == CV_32FC4 );,560,download/opencv_opencv53.cpp
c64ac42b2790f6f6953f183b6a268c926f57fb7a,Merge pull request #7852 from savuor:fix/orb_rotation,modules/features2d/test/test_orb.cpp,+,"ASSERT_NO_THROW(orb->compute(image, keypoints, descriptors));",124,download/opencv_opencv54.cpp
86bb5239917cd0c252c4daf8f4bfc8c7a670447a,Merge pull request #7871 from savuor:fix/openvx_cvt_on,modules/core/src/convert.cpp,-,CV_Assert(sstep / sizeof(T) == dstep / sizeof(DT));,4653,download/opencv_opencv55.cpp
fcdbe162527609ace078e1a9b626f1e6b40a72af,"openvx_cvt disabled for Khronos, fixed sstep and dstep usage",modules/core/src/convert.cpp,-,CV_Assert(sstep / sizeof(T) == dstep / sizeof(DT));,4653,download/opencv_opencv56.cpp
ef0811018229c584c21dafa1bf9555c9f56a1d4e,Merge pull request #7880 from sovrasov:rtrees_disable_kfold,modules/ml/src/rtrees.cpp,+,"CV_Error(Error::StsBadArg, ""Cross validation for RTrees is not implemented"");",386,download/opencv_opencv57.cpp
862c3aa6e191b7d4cfa654d21d708a3f279788f9,Merge pull request #7873 from addisonElliott:Mat_Range_InitializerList,modules/core/src/matrix.cpp,+,CV_Assert((int)ranges.size() == d);,592,download/opencv_opencv58.cpp
862c3aa6e191b7d4cfa654d21d708a3f279788f9,Merge pull request #7873 from addisonElliott:Mat_Range_InitializerList,modules/core/src/matrix.cpp,+,CV_Assert(r == Range::all() || (0 <= r.start && r.start < r.end && r.end <= m.size[i]));,596,download/opencv_opencv58.cpp
862c3aa6e191b7d4cfa654d21d708a3f279788f9,Merge pull request #7873 from addisonElliott:Mat_Range_InitializerList,modules/core/src/umatrix.cpp,+,CV_Assert((int)ranges.size() == d);,520,download/opencv_opencv59.cpp
862c3aa6e191b7d4cfa654d21d708a3f279788f9,Merge pull request #7873 from addisonElliott:Mat_Range_InitializerList,modules/core/src/umatrix.cpp,+,CV_Assert(r == Range::all() || (0 <= r.start && r.start < r.end && r.end <= m.size[i]));,524,download/opencv_opencv59.cpp
862c3aa6e191b7d4cfa654d21d708a3f279788f9,Merge pull request #7873 from addisonElliott:Mat_Range_InitializerList,modules/core/test/test_mat.cpp,+,"ASSERT_EQ(3, multi_mat.dims);",1558,download/opencv_opencv60.cpp
862c3aa6e191b7d4cfa654d21d708a3f279788f9,Merge pull request #7873 from addisonElliott:Mat_Range_InitializerList,modules/core/test/test_mat.cpp,+,"ASSERT_EQ(12, multi_mat.size[0]);",1559,download/opencv_opencv60.cpp
862c3aa6e191b7d4cfa654d21d708a3f279788f9,Merge pull request #7873 from addisonElliott:Mat_Range_InitializerList,modules/core/test/test_mat.cpp,+,"ASSERT_EQ(3, multi_mat.size[1]);",1560,download/opencv_opencv60.cpp
862c3aa6e191b7d4cfa654d21d708a3f279788f9,Merge pull request #7873 from addisonElliott:Mat_Range_InitializerList,modules/core/test/test_mat.cpp,+,"ASSERT_EQ(2, multi_mat.size[2]);",1561,download/opencv_opencv60.cpp
862c3aa6e191b7d4cfa654d21d708a3f279788f9,Merge pull request #7873 from addisonElliott:Mat_Range_InitializerList,modules/core/test/test_mat.cpp,+,"ASSERT_EQ(3, sub_mat.dims);",1569,download/opencv_opencv60.cpp
862c3aa6e191b7d4cfa654d21d708a3f279788f9,Merge pull request #7873 from addisonElliott:Mat_Range_InitializerList,modules/core/test/test_mat.cpp,+,"ASSERT_EQ(1, sub_mat.size[0]);",1570,download/opencv_opencv60.cpp
862c3aa6e191b7d4cfa654d21d708a3f279788f9,Merge pull request #7873 from addisonElliott:Mat_Range_InitializerList,modules/core/test/test_mat.cpp,+,"ASSERT_EQ(3, sub_mat.size[1]);",1571,download/opencv_opencv60.cpp
862c3aa6e191b7d4cfa654d21d708a3f279788f9,Merge pull request #7873 from addisonElliott:Mat_Range_InitializerList,modules/core/test/test_mat.cpp,+,"ASSERT_EQ(2, sub_mat.size[2]);",1572,download/opencv_opencv60.cpp
13b9dd39637aa73910fad798e0f50b759aec9b12,fixed segfault at ORB::compute() near image's border,modules/features2d/test/test_orb.cpp,+,"ASSERT_NO_THROW(orb->compute(image, keypoints, descriptors));",124,download/opencv_opencv61.cpp
0e4dde1781d6439eb5377e22208a0eb6f6cd404e,Merge pull request #7872 from alalek:merge-2.4,modules/core/test/test_dxt.cpp,+,CV_Assert(i == OUTPUT);,804,download/opencv_opencv62.cpp
0e4dde1781d6439eb5377e22208a0eb6f6cd404e,Merge pull request #7872 from alalek:merge-2.4,modules/core/test/test_dxt.cpp,+,CV_Assert(j == 0);,805,download/opencv_opencv62.cpp
0e4dde1781d6439eb5377e22208a0eb6f6cd404e,Merge pull request #7872 from alalek:merge-2.4,modules/core/test/test_dxt.cpp,-,"return ArrayTest::get_success_error_level( test_case_idx, i, j );",809,download/opencv_opencv62.cpp
0e4dde1781d6439eb5377e22208a0eb6f6cd404e,Merge pull request #7872 from alalek:merge-2.4,modules/core/test/test_dxt.cpp,-,"return ArrayTest::get_success_error_level( test_case_idx, i, j );",823,download/opencv_opencv62.cpp
0e4dde1781d6439eb5377e22208a0eb6f6cd404e,Merge pull request #7872 from alalek:merge-2.4,modules/core/test/test_dxt.cpp,+,CV_Assert(elem_depth == CV_32F || elem_depth == CV_64F);,824,download/opencv_opencv62.cpp
0e4dde1781d6439eb5377e22208a0eb6f6cd404e,Merge pull request #7872 from alalek:merge-2.4,modules/imgproc/src/phasecorr.cpp,+,CV_Assert(dst.data != srcA.data); // non-inplace check,170,download/opencv_opencv63.cpp
0e4dde1781d6439eb5377e22208a0eb6f6cd404e,Merge pull request #7872 from alalek:merge-2.4,modules/imgproc/src/phasecorr.cpp,+,CV_Assert(dst.data != srcB.data); // non-inplace check,171,download/opencv_opencv63.cpp
d2e5bea1fba96fc156bd367238bed77091bc1d5a,Disable training of RTrees when CVFolds > 0,modules/ml/src/rtrees.cpp,+,"CV_Error(Error::StsBadArg, ""Cross validation for RTrees is not implemented"");",386,download/opencv_opencv64.cpp
1e2ad7e3e32482690fb8e77cc4c2bfbaf3fbc218,rewritten for new macro use,modules/imgproc/src/featureselect.cpp,-,"CV_Error(cv::Error::StsInternal, e.what());",345,download/opencv_opencv65.cpp
1e2ad7e3e32482690fb8e77cc4c2bfbaf3fbc218,rewritten for new macro use,modules/imgproc/src/featureselect.cpp,-,"CV_Error(cv::Error::StsInternal, e.what());",350,download/opencv_opencv65.cpp
3f1734bbc7ffd2b5df489e17c4ca4a2e8b3a20e9,fixed type checks in wrappers; array downloading code simplified,modules/imgproc/src/featureselect.cpp,-,"CV_Error(CV_StsInternal, e.what());",349,download/opencv_opencv66.cpp
3f1734bbc7ffd2b5df489e17c4ca4a2e8b3a20e9,fixed type checks in wrappers; array downloading code simplified,modules/imgproc/src/featureselect.cpp,+,"CV_Error(cv::Error::StsInternal, e.what());",349,download/opencv_opencv66.cpp
3f1734bbc7ffd2b5df489e17c4ca4a2e8b3a20e9,fixed type checks in wrappers; array downloading code simplified,modules/imgproc/src/featureselect.cpp,-,"CV_Error(CV_StsInternal, e.what());",354,download/opencv_opencv66.cpp
3f1734bbc7ffd2b5df489e17c4ca4a2e8b3a20e9,fixed type checks in wrappers; array downloading code simplified,modules/imgproc/src/featureselect.cpp,+,"CV_Error(cv::Error::StsInternal, e.what());",354,download/opencv_opencv66.cpp
5f4112a1cf1cb1757d832fd03b8cdaf4a95876e7,added initial version of wrapper for Harris corner detection,modules/imgproc/src/featureselect.cpp,+,"CV_Error(CV_StsInternal, e.what());",368,download/opencv_opencv67.cpp
5f4112a1cf1cb1757d832fd03b8cdaf4a95876e7,added initial version of wrapper for Harris corner detection,modules/imgproc/src/featureselect.cpp,+,"CV_Error(CV_StsInternal, e.what());",373,download/opencv_opencv67.cpp
faefbf93bc91a9fad25bf015d3e2e47b05a35199,"Merge pull request #7793 from savuor:openvx_pyrDown

OpenVX pyrDown wrappers (#7793)

* wrappers for vx_pyramid added

* initial version of pyrDown() wrapper added

* disabled for Khronos

* rewritten for new macro use; border mode added to node",modules/imgproc/src/pyramids.cpp,+,CV_Assert(!srcMat.empty());,1268,download/opencv_opencv68.cpp
faefbf93bc91a9fad25bf015d3e2e47b05a35199,"Merge pull request #7793 from savuor:openvx_pyrDown

OpenVX pyrDown wrappers (#7793)

* wrappers for vx_pyramid added

* initial version of pyrDown() wrapper added

* disabled for Khronos

* rewritten for new macro use; border mode added to node",modules/imgproc/src/pyramids.cpp,+,CV_Assert( ssize.width > 0 && ssize.height > 0 &&,1287,download/opencv_opencv68.cpp
5372c8b331089f66f3ced664ecef0939ec96cf35,"Merge pull request #7774 from savuor:openvx_pyrlk

OpenVX optical flow PyrLK wrappers added (#7774)

* wrappers for vx_pyramid added

* initial version of Optical Flow PyrLK wrappers added

* array downloading code simplified

* disabled due to bad accuracy; fixed bugs, e.g. vendor-specific ones

* rewritten for new macro use",modules/video/src/lkpyramid.cpp,+,CV_Assert(prevImgMat.size() == nextImgMat.size());,1077,download/opencv_opencv69.cpp
5372c8b331089f66f3ced664ecef0939ec96cf35,"Merge pull request #7774 from savuor:openvx_pyrlk

OpenVX optical flow PyrLK wrappers added (#7774)

* wrappers for vx_pyramid added

* initial version of Optical Flow PyrLK wrappers added

* array downloading code simplified

* disabled due to bad accuracy; fixed bugs, e.g. vendor-specific ones

* rewritten for new macro use",modules/video/src/lkpyramid.cpp,+,CV_Assert( checkPrev >= 0 );,1080,download/opencv_opencv69.cpp
5372c8b331089f66f3ced664ecef0939ec96cf35,"Merge pull request #7774 from savuor:openvx_pyrlk

OpenVX optical flow PyrLK wrappers added (#7774)

* wrappers for vx_pyramid added

* initial version of Optical Flow PyrLK wrappers added

* array downloading code simplified

* disabled due to bad accuracy; fixed bugs, e.g. vendor-specific ones

* rewritten for new macro use",modules/video/src/lkpyramid.cpp,+,"CV_Assert( nextPtsMat.checkVector(2, CV_32F, false) == (int)npoints );",1086,download/opencv_opencv69.cpp
a615d79f2dcbce27ce0d796e186a96b4c54e995d,Merge pull request #7768 from terfendail:ovx_remap,modules/imgproc/src/imgwarp.cpp,+,"CV_Error(CV_StsInternal, e.what());",4831,download/opencv_opencv70.cpp
a615d79f2dcbce27ce0d796e186a96b4c54e995d,Merge pull request #7768 from terfendail:ovx_remap,modules/imgproc/src/imgwarp.cpp,+,"CV_Error(CV_StsInternal, e.what());",4836,download/opencv_opencv70.cpp
cc09f5a7de4147b461cccea15bb9d8d2270611c9,"Merge pull request #7854 from alalek:backports_2016

(2.4) Backports from master branch (#7854)",apps/version/opencv_version.cpp,+,parser.printParams();,17,download/opencv_opencv71.cpp
eb04b2bfa92debc6be2ca534b7d373c00c331e3c,"Added N-dim submat selection with vectors

Currently, to select a submatrix of a N-dimensional matrix, it requires
two lines of code while only one line of code is required if using a 2D
array.

I added functionality to be able to select an N-dim submatrix using a
vector list instead of a Range pointer. This allows initializer lists to
be used for a one-line selection.",modules/core/src/matrix.cpp,+,CV_Assert((int)ranges.size() == d);,592,download/opencv_opencv72.cpp
eb04b2bfa92debc6be2ca534b7d373c00c331e3c,"Added N-dim submat selection with vectors

Currently, to select a submatrix of a N-dimensional matrix, it requires
two lines of code while only one line of code is required if using a 2D
array.

I added functionality to be able to select an N-dim submatrix using a
vector list instead of a Range pointer. This allows initializer lists to
be used for a one-line selection.",modules/core/src/matrix.cpp,+,CV_Assert(r == Range::all() || (0 <= r.start && r.start < r.end && r.end <= m.size[i]));,596,download/opencv_opencv72.cpp
eb04b2bfa92debc6be2ca534b7d373c00c331e3c,"Added N-dim submat selection with vectors

Currently, to select a submatrix of a N-dimensional matrix, it requires
two lines of code while only one line of code is required if using a 2D
array.

I added functionality to be able to select an N-dim submatrix using a
vector list instead of a Range pointer. This allows initializer lists to
be used for a one-line selection.",modules/core/src/umatrix.cpp,+,CV_Assert((int)ranges.size() == d);,520,download/opencv_opencv73.cpp
eb04b2bfa92debc6be2ca534b7d373c00c331e3c,"Added N-dim submat selection with vectors

Currently, to select a submatrix of a N-dimensional matrix, it requires
two lines of code while only one line of code is required if using a 2D
array.

I added functionality to be able to select an N-dim submatrix using a
vector list instead of a Range pointer. This allows initializer lists to
be used for a one-line selection.",modules/core/src/umatrix.cpp,+,CV_Assert(r == Range::all() || (0 <= r.start && r.start < r.end && r.end <= m.size[i]));,524,download/opencv_opencv73.cpp
eb04b2bfa92debc6be2ca534b7d373c00c331e3c,"Added N-dim submat selection with vectors

Currently, to select a submatrix of a N-dimensional matrix, it requires
two lines of code while only one line of code is required if using a 2D
array.

I added functionality to be able to select an N-dim submatrix using a
vector list instead of a Range pointer. This allows initializer lists to
be used for a one-line selection.",modules/core/test/test_mat.cpp,+,"ASSERT_EQ(3, multi_mat.dims);",1558,download/opencv_opencv74.cpp
eb04b2bfa92debc6be2ca534b7d373c00c331e3c,"Added N-dim submat selection with vectors

Currently, to select a submatrix of a N-dimensional matrix, it requires
two lines of code while only one line of code is required if using a 2D
array.

I added functionality to be able to select an N-dim submatrix using a
vector list instead of a Range pointer. This allows initializer lists to
be used for a one-line selection.",modules/core/test/test_mat.cpp,+,"ASSERT_EQ(12, multi_mat.size[0]);",1559,download/opencv_opencv74.cpp
eb04b2bfa92debc6be2ca534b7d373c00c331e3c,"Added N-dim submat selection with vectors

Currently, to select a submatrix of a N-dimensional matrix, it requires
two lines of code while only one line of code is required if using a 2D
array.

I added functionality to be able to select an N-dim submatrix using a
vector list instead of a Range pointer. This allows initializer lists to
be used for a one-line selection.",modules/core/test/test_mat.cpp,+,"ASSERT_EQ(3, multi_mat.size[1]);",1560,download/opencv_opencv74.cpp
eb04b2bfa92debc6be2ca534b7d373c00c331e3c,"Added N-dim submat selection with vectors

Currently, to select a submatrix of a N-dimensional matrix, it requires
two lines of code while only one line of code is required if using a 2D
array.

I added functionality to be able to select an N-dim submatrix using a
vector list instead of a Range pointer. This allows initializer lists to
be used for a one-line selection.",modules/core/test/test_mat.cpp,+,"ASSERT_EQ(2, multi_mat.size[2]);",1561,download/opencv_opencv74.cpp
eb04b2bfa92debc6be2ca534b7d373c00c331e3c,"Added N-dim submat selection with vectors

Currently, to select a submatrix of a N-dimensional matrix, it requires
two lines of code while only one line of code is required if using a 2D
array.

I added functionality to be able to select an N-dim submatrix using a
vector list instead of a Range pointer. This allows initializer lists to
be used for a one-line selection.",modules/core/test/test_mat.cpp,+,"ASSERT_EQ(3, sub_mat.dims);",1569,download/opencv_opencv74.cpp
eb04b2bfa92debc6be2ca534b7d373c00c331e3c,"Added N-dim submat selection with vectors

Currently, to select a submatrix of a N-dimensional matrix, it requires
two lines of code while only one line of code is required if using a 2D
array.

I added functionality to be able to select an N-dim submatrix using a
vector list instead of a Range pointer. This allows initializer lists to
be used for a one-line selection.",modules/core/test/test_mat.cpp,+,"ASSERT_EQ(1, sub_mat.size[0]);",1570,download/opencv_opencv74.cpp
eb04b2bfa92debc6be2ca534b7d373c00c331e3c,"Added N-dim submat selection with vectors

Currently, to select a submatrix of a N-dimensional matrix, it requires
two lines of code while only one line of code is required if using a 2D
array.

I added functionality to be able to select an N-dim submatrix using a
vector list instead of a Range pointer. This allows initializer lists to
be used for a one-line selection.",modules/core/test/test_mat.cpp,+,"ASSERT_EQ(3, sub_mat.size[1]);",1571,download/opencv_opencv74.cpp
eb04b2bfa92debc6be2ca534b7d373c00c331e3c,"Added N-dim submat selection with vectors

Currently, to select a submatrix of a N-dimensional matrix, it requires
two lines of code while only one line of code is required if using a 2D
array.

I added functionality to be able to select an N-dim submatrix using a
vector list instead of a Range pointer. This allows initializer lists to
be used for a one-line selection.",modules/core/test/test_mat.cpp,+,"ASSERT_EQ(2, sub_mat.size[2]);",1572,download/opencv_opencv74.cpp
7d5fd6a800a790065cd934af1c7a2aa08e5349e1,Merge pull request #7812 from alalek:fix_putText,modules/imgproc/test/test_contours.cpp,-,"ASSERT_EQ( (3*rows + cols)*3 - 3*9, pixelsDrawn);",431,download/opencv_opencv75.cpp
7d5fd6a800a790065cd934af1c7a2aa08e5349e1,Merge pull request #7812 from alalek:fix_putText,modules/imgproc/test/test_contours.cpp,-,"ASSERT_EQ(cnt, 0);",439,download/opencv_opencv75.cpp
7d5fd6a800a790065cd934af1c7a2aa08e5349e1,Merge pull request #7812 from alalek:fix_putText,modules/imgproc/test/test_contours.cpp,-,"ASSERT_EQ(cnt, 21);",449,download/opencv_opencv75.cpp
7d5fd6a800a790065cd934af1c7a2aa08e5349e1,Merge pull request #7812 from alalek:fix_putText,modules/imgproc/test/test_drawing.cpp,-,"imwrite( filename, testImg );",74,download/opencv_opencv76.cpp
7d5fd6a800a790065cd934af1c7a2aa08e5349e1,Merge pull request #7812 from alalek:fix_putText,modules/imgproc/test/test_drawing.cpp,+,"ts->printf( ts->LOG, ""test image can not be read"");",77,download/opencv_opencv76.cpp
7d5fd6a800a790065cd934af1c7a2aa08e5349e1,Merge pull request #7812 from alalek:fix_putText,modules/imgproc/test/test_drawing.cpp,+,"ts->printf( ts->LOG, ""PNG image support is not available"");",81,download/opencv_opencv76.cpp
7d5fd6a800a790065cd934af1c7a2aa08e5349e1,Merge pull request #7812 from alalek:fix_putText,modules/imgproc/test/test_drawing.cpp,-,"imwrite(""/tmp/all_fonts.png"", result);",664,download/opencv_opencv76.cpp
7d5fd6a800a790065cd934af1c7a2aa08e5349e1,Merge pull request #7812 from alalek:fix_putText,modules/imgproc/test/test_drawing.cpp,+,"ASSERT_EQ( (3*rows + cols)*3 - 3*9, pixelsDrawn);",690,download/opencv_opencv76.cpp
7d5fd6a800a790065cd934af1c7a2aa08e5349e1,Merge pull request #7812 from alalek:fix_putText,modules/imgproc/test/test_drawing.cpp,+,"ASSERT_EQ(cnt, 0);",699,download/opencv_opencv76.cpp
7d5fd6a800a790065cd934af1c7a2aa08e5349e1,Merge pull request #7812 from alalek:fix_putText,modules/imgproc/test/test_drawing.cpp,+,"ASSERT_EQ(cnt, 21);",710,download/opencv_opencv76.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/core/src/convert.cpp,-,"#define VX_DbgThrow(s) CV_Error(cv::Error::StsInternal, (s))",4642,download/opencv_opencv77.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/core/src/convert.cpp,-,"CV_Error(CV_StsInternal, e.what());",5404,download/opencv_opencv77.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/core/src/convert.cpp,-,"CV_Error(CV_StsInternal, e.what());",5409,download/opencv_opencv77.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/core/src/stat.cpp,-,"CV_Error(CV_StsInternal, e.what());",1710,download/opencv_opencv78.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/core/src/stat.cpp,-,"CV_Error(CV_StsInternal, e.what());",1715,download/opencv_opencv78.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/core/src/stat.cpp,-,"CV_Error(CV_StsInternal, e.what());",2365,download/opencv_opencv78.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/core/src/stat.cpp,-,"CV_Error(CV_StsInternal, e.what());",2370,download/opencv_opencv78.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/imgproc/src/accum.cpp,-,"CV_Error(CV_StsInternal, e.what());",1992,download/opencv_opencv79.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/imgproc/src/accum.cpp,-,"CV_Error(CV_StsInternal, e.what());",1997,download/opencv_opencv79.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/imgproc/src/deriv.cpp,-,"CV_Error(CV_StsInternal, e.what());",296,download/opencv_opencv80.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/imgproc/src/deriv.cpp,-,"CV_Error(CV_StsInternal, e.what());",301,download/opencv_opencv80.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/imgproc/src/histogram.cpp,-,"CV_Error(CV_StsInternal, e.what());",1310,download/opencv_opencv81.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/imgproc/src/histogram.cpp,-,"CV_Error(CV_StsInternal, e.what());",1315,download/opencv_opencv81.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/imgproc/src/histogram.cpp,-,"CV_Error(CV_StsInternal, e.what());",3792,download/opencv_opencv81.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/imgproc/src/histogram.cpp,-,"CV_Error(CV_StsInternal, e.what());",3797,download/opencv_opencv81.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/imgproc/src/smooth.cpp,-,"CV_Error(CV_StsInternal, e.what());",1730,download/opencv_opencv82.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/imgproc/src/smooth.cpp,-,"CV_Error(CV_StsInternal, e.what());",1735,download/opencv_opencv82.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/imgproc/src/smooth.cpp,-,"CV_Error(CV_StsInternal, e.what());",2296,download/opencv_opencv82.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/imgproc/src/smooth.cpp,-,"CV_Error(CV_StsInternal, e.what());",2301,download/opencv_opencv82.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/imgproc/src/smooth.cpp,-,"CV_Error(CV_StsInternal, e.what());",3431,download/opencv_opencv82.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/imgproc/src/smooth.cpp,-,"CV_Error(CV_StsInternal, e.what());",3436,download/opencv_opencv82.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/imgproc/src/thresh.cpp,-,"CV_Error(CV_StsInternal, e.what());",1329,download/opencv_opencv83.cpp
36b5abf6b740497ab26b4b092473d7d51ac0a5f3,Merge pull request #7857 from savuor:openvx_macro_wrappers,modules/imgproc/src/thresh.cpp,-,"CV_Error(CV_StsInternal, e.what());",1334,download/opencv_opencv83.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/core/src/convert.cpp,-,"#define VX_DbgThrow(s) CV_Error(cv::Error::StsInternal, (s))",4642,download/opencv_opencv84.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/core/src/convert.cpp,-,"CV_Error(CV_StsInternal, e.what());",5404,download/opencv_opencv84.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/core/src/convert.cpp,-,"CV_Error(CV_StsInternal, e.what());",5409,download/opencv_opencv84.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/core/src/stat.cpp,-,"CV_Error(CV_StsInternal, e.what());",1710,download/opencv_opencv85.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/core/src/stat.cpp,-,"CV_Error(CV_StsInternal, e.what());",1715,download/opencv_opencv85.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/core/src/stat.cpp,-,"CV_Error(CV_StsInternal, e.what());",2365,download/opencv_opencv85.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/core/src/stat.cpp,-,"CV_Error(CV_StsInternal, e.what());",2370,download/opencv_opencv85.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/imgproc/src/accum.cpp,-,"CV_Error(CV_StsInternal, e.what());",1992,download/opencv_opencv86.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/imgproc/src/accum.cpp,-,"CV_Error(CV_StsInternal, e.what());",1997,download/opencv_opencv86.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/imgproc/src/deriv.cpp,-,"CV_Error(CV_StsInternal, e.what());",296,download/opencv_opencv87.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/imgproc/src/deriv.cpp,-,"CV_Error(CV_StsInternal, e.what());",301,download/opencv_opencv87.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/imgproc/src/histogram.cpp,-,"CV_Error(CV_StsInternal, e.what());",1310,download/opencv_opencv88.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/imgproc/src/histogram.cpp,-,"CV_Error(CV_StsInternal, e.what());",1315,download/opencv_opencv88.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/imgproc/src/histogram.cpp,-,"CV_Error(CV_StsInternal, e.what());",3792,download/opencv_opencv88.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/imgproc/src/histogram.cpp,-,"CV_Error(CV_StsInternal, e.what());",3797,download/opencv_opencv88.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/imgproc/src/smooth.cpp,-,"CV_Error(CV_StsInternal, e.what());",1730,download/opencv_opencv89.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/imgproc/src/smooth.cpp,-,"CV_Error(CV_StsInternal, e.what());",1735,download/opencv_opencv89.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/imgproc/src/smooth.cpp,-,"CV_Error(CV_StsInternal, e.what());",2296,download/opencv_opencv89.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/imgproc/src/smooth.cpp,-,"CV_Error(CV_StsInternal, e.what());",2301,download/opencv_opencv89.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/imgproc/src/smooth.cpp,-,"CV_Error(CV_StsInternal, e.what());",3431,download/opencv_opencv89.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/imgproc/src/smooth.cpp,-,"CV_Error(CV_StsInternal, e.what());",3436,download/opencv_opencv89.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/imgproc/src/thresh.cpp,-,"CV_Error(CV_StsInternal, e.what());",1329,download/opencv_opencv90.cpp
8b9422a052dd8259b1f9325c00551443da85de94,"OpenVX wrappers rewritten with CV_OVX_RUN, VX_DbgThrow",modules/imgproc/src/thresh.cpp,-,"CV_Error(CV_StsInternal, e.what());",1334,download/opencv_opencv90.cpp
f8b4d287457df7ca191c22bdbb563e78bd3908b3,Added OpenVX based processing to remap,modules/imgproc/src/imgwarp.cpp,+,"CV_Error(CV_StsInternal, e.what());",4815,download/opencv_opencv91.cpp
f8b4d287457df7ca191c22bdbb563e78bd3908b3,Added OpenVX based processing to remap,modules/imgproc/src/imgwarp.cpp,+,"CV_Error(CV_StsInternal, e.what());",4820,download/opencv_opencv91.cpp
af0ee306cfc1df8e2b464d6b17f8140fd817d351,Merge pull request #7819 from alalek:fix_mulSpectrums_inplace_2.4,modules/core/test/test_dxt.cpp,+,CV_Assert(i == OUTPUT);,804,download/opencv_opencv92.cpp
af0ee306cfc1df8e2b464d6b17f8140fd817d351,Merge pull request #7819 from alalek:fix_mulSpectrums_inplace_2.4,modules/core/test/test_dxt.cpp,+,CV_Assert(j == 0);,805,download/opencv_opencv92.cpp
af0ee306cfc1df8e2b464d6b17f8140fd817d351,Merge pull request #7819 from alalek:fix_mulSpectrums_inplace_2.4,modules/core/test/test_dxt.cpp,-,"return ArrayTest::get_success_error_level( test_case_idx, i, j );",809,download/opencv_opencv92.cpp
af0ee306cfc1df8e2b464d6b17f8140fd817d351,Merge pull request #7819 from alalek:fix_mulSpectrums_inplace_2.4,modules/core/test/test_dxt.cpp,-,"return ArrayTest::get_success_error_level( test_case_idx, i, j );",823,download/opencv_opencv92.cpp
af0ee306cfc1df8e2b464d6b17f8140fd817d351,Merge pull request #7819 from alalek:fix_mulSpectrums_inplace_2.4,modules/core/test/test_dxt.cpp,+,CV_Assert(elem_depth == CV_32F || elem_depth == CV_64F);,824,download/opencv_opencv92.cpp
af0ee306cfc1df8e2b464d6b17f8140fd817d351,Merge pull request #7819 from alalek:fix_mulSpectrums_inplace_2.4,modules/imgproc/src/phasecorr.cpp,+,CV_Assert(dst.data != srcA.data); // non-inplace check,170,download/opencv_opencv93.cpp
af0ee306cfc1df8e2b464d6b17f8140fd817d351,Merge pull request #7819 from alalek:fix_mulSpectrums_inplace_2.4,modules/imgproc/src/phasecorr.cpp,+,CV_Assert(dst.data != srcB.data); // non-inplace check,171,download/opencv_opencv93.cpp
19c8cc8f13c702b3d212bb1cf903e6e247d09435,Merge pull request #7760 from terfendail:ovx_histogram,modules/imgproc/src/histogram.cpp,+,"CV_Error(CV_StsInternal, e.what());",1310,download/opencv_opencv94.cpp
19c8cc8f13c702b3d212bb1cf903e6e247d09435,Merge pull request #7760 from terfendail:ovx_histogram,modules/imgproc/src/histogram.cpp,+,"CV_Error(CV_StsInternal, e.what());",1315,download/opencv_opencv94.cpp
2c89b39eee3de2e30b3f66cfb7bc44c87c77f6d7,Added OpenVX based processing to calcHist,modules/imgproc/src/histogram.cpp,+,"CV_Error(CV_StsInternal, e.what());",1310,download/opencv_opencv95.cpp
2c89b39eee3de2e30b3f66cfb7bc44c87c77f6d7,Added OpenVX based processing to calcHist,modules/imgproc/src/histogram.cpp,+,"CV_Error(CV_StsInternal, e.what());",1315,download/opencv_opencv95.cpp
7a3b5b308cc2e98d41235a0fab0a1a3773e39bb4,Merge pull request #7790 from sovrasov:convexity_defects_enable_small_hulls,modules/imgproc/src/convhull.cpp,-,CV_Assert( hpoints > 2 );,283,download/opencv_opencv96.cpp
7a3b5b308cc2e98d41235a0fab0a1a3773e39bb4,Merge pull request #7790 from sovrasov:convexity_defects_enable_small_hulls,modules/imgproc/src/convhull.cpp,+,CV_Assert( hpoints > 0 );,283,download/opencv_opencv96.cpp
cb1d4e692bd13ff413273baf6d3b22fabdde6e74,Merge pull request #7801 from alalek:fix_7795,modules/core/src/mathfuncs_core.cpp,+,"void log32f(const float *src, float *dst, int n)",406,download/opencv_opencv97.cpp
cb1d4e692bd13ff413273baf6d3b22fabdde6e74,Merge pull request #7801 from alalek:fix_7795,modules/core/src/mathfuncs_core.cpp,+,dst[i] = std::log(src[i]);,415,download/opencv_opencv97.cpp
cb1d4e692bd13ff413273baf6d3b22fabdde6e74,Merge pull request #7801 from alalek:fix_7795,modules/core/src/mathfuncs_core.cpp,+,"void log64f(const double *src, double *dst, int n)",418,download/opencv_opencv97.cpp
cb1d4e692bd13ff413273baf6d3b22fabdde6e74,Merge pull request #7801 from alalek:fix_7795,modules/core/src/mathfuncs_core.cpp,+,dst[i] = std::log(src[i]);,427,download/opencv_opencv97.cpp
069d51d23b547b751fbaadd2c9a2e749aeb7336d,Merge pull request #7836 from sovrasov:akaze_fix_detect_only_mode,modules/features2d/test/test_detectors_regression.cpp,+,"ASSERT_EQ(detKps.size(), detAndCompKps.size());",319,download/opencv_opencv98.cpp
069d51d23b547b751fbaadd2c9a2e749aeb7336d,Merge pull request #7836 from sovrasov:akaze_fix_detect_only_mode,modules/features2d/test/test_detectors_regression.cpp,+,"ASSERT_EQ(detKps[i].hash(), detAndCompKps[i].hash());",322,download/opencv_opencv98.cpp
12383a124be9bd9a5d8d7b8a14fa99ecf2c7a0f0,Disable error throwing in convexityDefects when hull is a line or point,modules/imgproc/src/convhull.cpp,-,CV_Assert( hpoints > 2 );,283,download/opencv_opencv99.cpp
12383a124be9bd9a5d8d7b8a14fa99ecf2c7a0f0,Disable error throwing in convexityDefects when hull is a line or point,modules/imgproc/src/convhull.cpp,+,CV_Assert( hpoints > 0 );,283,download/opencv_opencv99.cpp
34c07f6aaf254a4c46d6e6e9f56aeef28b150980,Merge pull request #7729 from apavlenko:vx-canny,modules/core/src/ovx.cpp,+,"CV_Assert(!flag && ""OpenVX support isn't enabled at compile time"");",68,download/opencv_opencv100.cpp
34c07f6aaf254a4c46d6e6e9f56aeef28b150980,Merge pull request #7729 from apavlenko:vx-canny,modules/imgproc/test/test_canny.cpp,+,"inline void PrintTo( name param, std::ostream* os) \",341,download/opencv_opencv101.cpp
34c07f6aaf254a4c46d6e6e9f56aeef28b150980,Merge pull request #7729 from apavlenko:vx-canny,modules/imgproc/test/test_canny.cpp,+,"*os << #name <<  ""("" << testing::PrintToString(static_cast< type >(param)) << "")""; \",343,download/opencv_opencv101.cpp
34c07f6aaf254a4c46d6e6e9f56aeef28b150980,Merge pull request #7729 from apavlenko:vx-canny,modules/imgproc/test/test_canny.cpp,+,"ASSERT_FALSE(src.empty()) << ""cann't load image: "" << imgPath;",368,download/opencv_opencv101.cpp
34c07f6aaf254a4c46d6e6e9f56aeef28b150980,Merge pull request #7729 from apavlenko:vx-canny,modules/imgproc/test/test_canny.cpp,+,"imwrite(outPath+"".png"", diff);",405,download/opencv_opencv101.cpp
34c07f6aaf254a4c46d6e6e9f56aeef28b150980,Merge pull request #7729 from apavlenko:vx-canny,modules/imgproc/test/test_canny.cpp,+,"ASSERT_LE(error, maxError);",407,download/opencv_opencv101.cpp
3f7cde0485fd23b8882e560ed53d6bd401e84cc3,Implement 32f support for morphology operation,modules/cudafilters/src/filtering.cpp,-,CV_Assert( srcType == CV_8UC1 || srcType == CV_8UC4 );,560,download/opencv_opencv102.cpp
3f7cde0485fd23b8882e560ed53d6bd401e84cc3,Implement 32f support for morphology operation,modules/cudafilters/src/filtering.cpp,+,CV_Assert( srcType == CV_8UC1 || srcType == CV_8UC4 || srcType == CV_32FC1 || srcType == CV_32FC4 );,560,download/opencv_opencv102.cpp
4a3da1c4ed67af8c2037cac548e2b351be080de6,Fix missing angles in AKAZE keypoints,modules/features2d/test/test_detectors_regression.cpp,+,"ASSERT_EQ(detKps.size(), detAndCompKps.size());",319,download/opencv_opencv103.cpp
4a3da1c4ed67af8c2037cac548e2b351be080de6,Fix missing angles in AKAZE keypoints,modules/features2d/test/test_detectors_regression.cpp,+,"ASSERT_EQ(detKps[i].hash(), detAndCompKps[i].hash());",322,download/opencv_opencv103.cpp
7bceef715c9d14353b134a42e236bd2782d9e511,test: fix mulSpectrums error tolerance,modules/core/test/test_dxt.cpp,+,CV_Assert(i == OUTPUT);,804,download/opencv_opencv104.cpp
7bceef715c9d14353b134a42e236bd2782d9e511,test: fix mulSpectrums error tolerance,modules/core/test/test_dxt.cpp,+,CV_Assert(j == 0);,805,download/opencv_opencv104.cpp
7bceef715c9d14353b134a42e236bd2782d9e511,test: fix mulSpectrums error tolerance,modules/core/test/test_dxt.cpp,-,"return ArrayTest::get_success_error_level( test_case_idx, i, j );",809,download/opencv_opencv104.cpp
7bceef715c9d14353b134a42e236bd2782d9e511,test: fix mulSpectrums error tolerance,modules/core/test/test_dxt.cpp,-,"return ArrayTest::get_success_error_level( test_case_idx, i, j );",823,download/opencv_opencv104.cpp
7bceef715c9d14353b134a42e236bd2782d9e511,test: fix mulSpectrums error tolerance,modules/core/test/test_dxt.cpp,+,CV_Assert(elem_depth == CV_32F || elem_depth == CV_64F);,824,download/opencv_opencv104.cpp
a99118c4c71c4552338d3410c3793eda3a836915,moving CannyVX test from ocl to cpp file,modules/imgproc/test/ocl/test_canny.cpp,-,"ASSERT_FALSE(src.empty()) << ""cann't load image: "" << imgPath;",160,download/opencv_opencv105.cpp
a99118c4c71c4552338d3410c3793eda3a836915,moving CannyVX test from ocl to cpp file,modules/imgproc/test/ocl/test_canny.cpp,-,"imwrite(outPath+"".png"", diff);",195,download/opencv_opencv105.cpp
a99118c4c71c4552338d3410c3793eda3a836915,moving CannyVX test from ocl to cpp file,modules/imgproc/test/ocl/test_canny.cpp,-,"ASSERT_LE(error, maxError);",196,download/opencv_opencv105.cpp
a99118c4c71c4552338d3410c3793eda3a836915,moving CannyVX test from ocl to cpp file,modules/imgproc/test/test_canny.cpp,+,"inline void PrintTo( name param, std::ostream* os) \",324,download/opencv_opencv106.cpp
a99118c4c71c4552338d3410c3793eda3a836915,moving CannyVX test from ocl to cpp file,modules/imgproc/test/test_canny.cpp,+,"*os << #name <<  ""("" << testing::PrintToString(static_cast< type >(param)) << "")""; \",326,download/opencv_opencv106.cpp
a99118c4c71c4552338d3410c3793eda3a836915,moving CannyVX test from ocl to cpp file,modules/imgproc/test/test_canny.cpp,+,"ASSERT_FALSE(src.empty()) << ""cann't load image: "" << imgPath;",351,download/opencv_opencv106.cpp
a99118c4c71c4552338d3410c3793eda3a836915,moving CannyVX test from ocl to cpp file,modules/imgproc/test/test_canny.cpp,+,"imwrite(outPath+"".png"", diff);",388,download/opencv_opencv106.cpp
a99118c4c71c4552338d3410c3793eda3a836915,moving CannyVX test from ocl to cpp file,modules/imgproc/test/test_canny.cpp,+,"ASSERT_LE(error, maxError);",390,download/opencv_opencv106.cpp
76c38f0c809e46904a6d8c1a10ac90e75e413607,trying to enable canny_vx adding a new test comparing canny_cv vs canny_vx,modules/imgproc/test/ocl/test_canny.cpp,+,"ASSERT_FALSE(src.empty()) << ""cann't load image: "" << imgPath;",161,download/opencv_opencv107.cpp
76c38f0c809e46904a6d8c1a10ac90e75e413607,trying to enable canny_vx adding a new test comparing canny_cv vs canny_vx,modules/imgproc/test/ocl/test_canny.cpp,+,"imwrite(outPath+"".png"", diff);",197,download/opencv_opencv107.cpp
76c38f0c809e46904a6d8c1a10ac90e75e413607,trying to enable canny_vx adding a new test comparing canny_cv vs canny_vx,modules/imgproc/test/ocl/test_canny.cpp,+,"ASSERT_LE(error, maxError);",199,download/opencv_opencv107.cpp
1e2ddc30b10f948e733344919db247e7f665a7bc,"Canny via OpenVX, Node wrapper extended (query/set attribute), some naming fixes",modules/core/src/ovx.cpp,+,"CV_Assert(!flag && ""OpenVX support isn't enabled at compile time"");",68,download/opencv_opencv108.cpp
bcbe2f123f2bbde60ecd3b35def3656570733d4d,test: move more drawing tests,modules/imgproc/test/test_contours.cpp,-,"ASSERT_EQ( (3*rows + cols)*3 - 3*9, pixelsDrawn);",431,download/opencv_opencv109.cpp
bcbe2f123f2bbde60ecd3b35def3656570733d4d,test: move more drawing tests,modules/imgproc/test/test_contours.cpp,-,"ASSERT_EQ(cnt, 0);",439,download/opencv_opencv109.cpp
bcbe2f123f2bbde60ecd3b35def3656570733d4d,test: move more drawing tests,modules/imgproc/test/test_contours.cpp,-,"ASSERT_EQ(cnt, 21);",449,download/opencv_opencv109.cpp
bcbe2f123f2bbde60ecd3b35def3656570733d4d,test: move more drawing tests,modules/imgproc/test/test_drawing.cpp,+,"ASSERT_EQ( (3*rows + cols)*3 - 3*9, pixelsDrawn);",689,download/opencv_opencv110.cpp
bcbe2f123f2bbde60ecd3b35def3656570733d4d,test: move more drawing tests,modules/imgproc/test/test_drawing.cpp,+,"ASSERT_EQ(cnt, 0);",698,download/opencv_opencv110.cpp
bcbe2f123f2bbde60ecd3b35def3656570733d4d,test: move more drawing tests,modules/imgproc/test/test_drawing.cpp,+,"ASSERT_EQ(cnt, 21);",709,download/opencv_opencv110.cpp
781ab3d481d6b2dff61ea441a00085c8659cf6ca,test: minor refactoring in test_drawing,modules/imgproc/test/test_drawing.cpp,-,"imwrite( filename, testImg );",74,download/opencv_opencv111.cpp
781ab3d481d6b2dff61ea441a00085c8659cf6ca,test: minor refactoring in test_drawing,modules/imgproc/test/test_drawing.cpp,+,"ts->printf( ts->LOG, ""test image can not be read"");",77,download/opencv_opencv111.cpp
781ab3d481d6b2dff61ea441a00085c8659cf6ca,test: minor refactoring in test_drawing,modules/imgproc/test/test_drawing.cpp,+,"ts->printf( ts->LOG, ""PNG image support is not available"");",81,download/opencv_opencv111.cpp
781ab3d481d6b2dff61ea441a00085c8659cf6ca,test: minor refactoring in test_drawing,modules/imgproc/test/test_drawing.cpp,-,"imwrite(""/tmp/all_fonts.png"", result);",664,download/opencv_opencv111.cpp
62c9ff25e59a32a740751bcbd1577565ab23bab7,core: added inplace check in 'divSpectrums',modules/imgproc/src/phasecorr.cpp,+,CV_Assert(dst.data != srcA.data); // non-inplace check,170,download/opencv_opencv112.cpp
62c9ff25e59a32a740751bcbd1577565ab23bab7,core: added inplace check in 'divSpectrums',modules/imgproc/src/phasecorr.cpp,+,CV_Assert(dst.data != srcB.data); // non-inplace check,171,download/opencv_opencv112.cpp
695b20172ba991b58c424a73d09b5321103efa22,"Merge pull request #7794 from savuor:fix/ovx_cvt_continuous

Fixed OpenVX wrapper for Mat::convertTo() (#7794)

* fixed for cases of unrolled (w*h x 1) matrices

* more error handling",modules/core/src/convert.cpp,+,"#define VX_DbgThrow(s) CV_Error(cv::Error::StsInternal, (s))",4646,download/opencv_opencv113.cpp
695b20172ba991b58c424a73d09b5321103efa22,"Merge pull request #7794 from savuor:fix/ovx_cvt_continuous

Fixed OpenVX wrapper for Mat::convertTo() (#7794)

* fixed for cases of unrolled (w*h x 1) matrices

* more error handling",modules/core/src/convert.cpp,+,CV_Assert(sstep / sizeof(T) == dstep / sizeof(DT));,4664,download/opencv_opencv113.cpp
695b20172ba991b58c424a73d09b5321103efa22,"Merge pull request #7794 from savuor:fix/ovx_cvt_continuous

Fixed OpenVX wrapper for Mat::convertTo() (#7794)

* fixed for cases of unrolled (w*h x 1) matrices

* more error handling",modules/core/src/convert.cpp,-,"CV_Error(CV_StsInternal, e.what());",4696,download/opencv_opencv113.cpp
695b20172ba991b58c424a73d09b5321103efa22,"Merge pull request #7794 from savuor:fix/ovx_cvt_continuous

Fixed OpenVX wrapper for Mat::convertTo() (#7794)

* fixed for cases of unrolled (w*h x 1) matrices

* more error handling",modules/core/src/convert.cpp,-,"CV_Error(CV_StsInternal, e.what());",4701,download/opencv_opencv113.cpp
fef94315af7eba4340c8922e32d54403be7e3b58,core: exp/log workaround for MSVS,modules/core/src/mathfuncs_core.cpp,+,"void log32f(const float *src, float *dst, int n)",406,download/opencv_opencv114.cpp
fef94315af7eba4340c8922e32d54403be7e3b58,core: exp/log workaround for MSVS,modules/core/src/mathfuncs_core.cpp,+,dst[i] = std::log(src[i]);,415,download/opencv_opencv114.cpp
fef94315af7eba4340c8922e32d54403be7e3b58,core: exp/log workaround for MSVS,modules/core/src/mathfuncs_core.cpp,+,"void log64f(const double *src, double *dst, int n)",418,download/opencv_opencv114.cpp
fef94315af7eba4340c8922e32d54403be7e3b58,core: exp/log workaround for MSVS,modules/core/src/mathfuncs_core.cpp,+,dst[i] = std::log(src[i]);,427,download/opencv_opencv114.cpp
4a095e4d66368f6798c41470e8a1dd308e176ebf,Merge pull request #7777 from alalek:test_refactor,modules/core/test/test_arithm.cpp,-,"CV_Assert( cvtest::norm(c, d1, CV_C) <= DBL_EPSILON );",1556,download/opencv_opencv115.cpp
5032dae9edc693954f4a0e38da6957b252ba738b,"test: refactor test to capture more information on failure

Core_ArithmMask.uninitialized",modules/core/test/test_arithm.cpp,-,"CV_Assert( cvtest::norm(c, d1, CV_C) <= DBL_EPSILON );",1556,download/opencv_opencv116.cpp
f84dc354f61ffdaa21372e30133f59f22c05b18a,Merge pull request #7564 from terfendail:ovx_gaussianfilter,modules/imgproc/src/smooth.cpp,+,"CV_Error(CV_StsInternal, e.what());",2288,download/opencv_opencv117.cpp
f84dc354f61ffdaa21372e30133f59f22c05b18a,Merge pull request #7564 from terfendail:ovx_gaussianfilter,modules/imgproc/src/smooth.cpp,+,"CV_Error(CV_StsInternal, e.what());",2293,download/opencv_opencv117.cpp
537db2d53f9c96c0f541cde6a6256d40c097f24a,Merge pull request #7598 from terfendail:ovx_lut,modules/core/src/convert.cpp,+,"CV_Error(CV_StsInternal, e.what());",5399,download/opencv_opencv118.cpp
537db2d53f9c96c0f541cde6a6256d40c097f24a,Merge pull request #7598 from terfendail:ovx_lut,modules/core/src/convert.cpp,+,"CV_Error(CV_StsInternal, e.what());",5404,download/opencv_opencv118.cpp
afc73969755a0820a7bf55a255cb66d64c12c0ff,Added OpenVX based processing to gaussianBlur,modules/imgproc/src/smooth.cpp,+,"CV_Error(CV_StsInternal, e.what());",2288,download/opencv_opencv119.cpp
afc73969755a0820a7bf55a255cb66d64c12c0ff,Added OpenVX based processing to gaussianBlur,modules/imgproc/src/smooth.cpp,+,"CV_Error(CV_StsInternal, e.what());",2293,download/opencv_opencv119.cpp
ced81f72bc83650b16bc6eec5584e369caa78c93,Added OpenVX based processing to LUT,modules/core/src/convert.cpp,+,"CV_Error(CV_StsInternal, e.what());",5399,download/opencv_opencv120.cpp
ced81f72bc83650b16bc6eec5584e369caa78c93,Added OpenVX based processing to LUT,modules/core/src/convert.cpp,+,"CV_Error(CV_StsInternal, e.what());",5404,download/opencv_opencv120.cpp
5e75503fc2c689640d8b7129b5b6cad8f0b19889,Merge pull request #7750 from alalek:ts_find_or_skip,modules/ts/src/ts.cpp,+,CV_Assert(subpath.empty() || subpath[0] != '/');,85,download/opencv_opencv121.cpp
5e75503fc2c689640d8b7129b5b6cad8f0b19889,Merge pull request #7750 from alalek:ts_find_or_skip,modules/ts/src/ts.cpp,-,"sprintf( buf, ""%s%s%s/"", datapath_dir, haveSlash ? """" : ""/"", modulename.c_str() );",487,download/opencv_opencv121.cpp
5e75503fc2c689640d8b7129b5b6cad8f0b19889,Merge pull request #7750 from alalek:ts_find_or_skip,modules/ts/src/ts.cpp,+,CV_Assert((copied != MAX_PATH) && (copied != (size_t)-1));,724,download/opencv_opencv121.cpp
5e75503fc2c689640d8b7129b5b6cad8f0b19889,Merge pull request #7750 from alalek:ts_find_or_skip,modules/ts/src/ts.cpp,+,"CV_ErrorNoReturn(cv::Error::StsError, cv::format(""OpenCV tests: Can't find required data file: %s"", relative_path.c_str()));",820,download/opencv_opencv121.cpp
c99097f89a201d3f32bdfe744b128be451dc6ba4,Merge pull request #7478 from terfendail:ovx_boxfilter,modules/imgproc/src/smooth.cpp,+,"CV_Error(CV_StsInternal, e.what());",1733,download/opencv_opencv122.cpp
c99097f89a201d3f32bdfe744b128be451dc6ba4,Merge pull request #7478 from terfendail:ovx_boxfilter,modules/imgproc/src/smooth.cpp,+,"CV_Error(CV_StsInternal, e.what());",1738,download/opencv_opencv122.cpp
1d45726f47c71cad64ebc3f0fe6764928b58583a,Merge pull request #7588 from terfendail:ovx_medianblur,modules/imgproc/src/smooth.cpp,+,"CV_Error(CV_StsInternal, e.what());",3204,download/opencv_opencv123.cpp
1d45726f47c71cad64ebc3f0fe6764928b58583a,Merge pull request #7588 from terfendail:ovx_medianblur,modules/imgproc/src/smooth.cpp,+,"CV_Error(CV_StsInternal, e.what());",3209,download/opencv_opencv123.cpp
e623e710be09c987cecffeadb3334783de425ecb,Merge pull request #7597 from terfendail:ovx_threshold,modules/imgproc/src/thresh.cpp,+,"CV_Error(CV_StsInternal, e.what());",1333,download/opencv_opencv124.cpp
e623e710be09c987cecffeadb3334783de425ecb,Merge pull request #7597 from terfendail:ovx_threshold,modules/imgproc/src/thresh.cpp,+,"CV_Error(CV_StsInternal, e.what());",1338,download/opencv_opencv124.cpp
32f48a8d9cb589161c1b9dc3cb9a37e16da03535,Merge pull request #7631 from savuor:openvx_accumulate,modules/imgproc/src/accum.cpp,+,"CV_Error(CV_StsInternal, e.what());",1996,download/opencv_opencv125.cpp
32f48a8d9cb589161c1b9dc3cb9a37e16da03535,Merge pull request #7631 from savuor:openvx_accumulate,modules/imgproc/src/accum.cpp,+,"CV_Error(CV_StsInternal, e.what());",2001,download/opencv_opencv125.cpp
924ac10159fd2bbbfc868cca3c61409305c4e81a,Merge pull request #7649 from terfendail:ovx_meanstddev,modules/core/src/stat.cpp,+,CV_Assert(mean.type() == CV_64F && mean.isContinuous() &&,1689,download/opencv_opencv126.cpp
924ac10159fd2bbbfc868cca3c61409305c4e81a,Merge pull request #7649 from terfendail:ovx_meanstddev,modules/core/src/stat.cpp,+,CV_Assert(stddev.type() == CV_64F && stddev.isContinuous() &&,1702,download/opencv_opencv126.cpp
924ac10159fd2bbbfc868cca3c61409305c4e81a,Merge pull request #7649 from terfendail:ovx_meanstddev,modules/core/src/stat.cpp,+,"CV_Error(CV_StsInternal, e.what());",1714,download/opencv_opencv126.cpp
924ac10159fd2bbbfc868cca3c61409305c4e81a,Merge pull request #7649 from terfendail:ovx_meanstddev,modules/core/src/stat.cpp,+,"CV_Error(CV_StsInternal, e.what());",1719,download/opencv_opencv126.cpp
0a775e43e1e6e4bf070864bcb0308b5ab6382828,Merge pull request #7659 from savuor:openvx_convert_depth,modules/core/src/convert.cpp,+,"CV_Error(CV_StsInternal, e.what());",4677,download/opencv_opencv127.cpp
0a775e43e1e6e4bf070864bcb0308b5ab6382828,Merge pull request #7659 from savuor:openvx_convert_depth,modules/core/src/convert.cpp,+,"CV_Error(CV_StsInternal, e.what());",4682,download/opencv_opencv127.cpp
8968318dfc4b59a4560b217c8ef44866499329c9,Merge pull request #7668 from savuor:openvx_equalize_hist,modules/imgproc/src/histogram.cpp,+,"CV_Error(CV_StsInternal, e.what());",3734,download/opencv_opencv128.cpp
8968318dfc4b59a4560b217c8ef44866499329c9,Merge pull request #7668 from savuor:openvx_equalize_hist,modules/imgproc/src/histogram.cpp,+,"CV_Error(CV_StsInternal, e.what());",3739,download/opencv_opencv128.cpp
ddc5155a85103ff7dd65b1e3544a0525d4842c6d,Merge pull request #7677 from terfendail:ovx_minmaxloc,modules/core/src/stat.cpp,+,"if(vxMinCount.getValue<vx_uint32>()<1) throw ivx::RuntimeError(VX_ERROR_INVALID_VALUE, std::string(__func__) + ""(): minimum value location not found"");",2280,download/opencv_opencv129.cpp
ddc5155a85103ff7dd65b1e3544a0525d4842c6d,Merge pull request #7677 from terfendail:ovx_minmaxloc,modules/core/src/stat.cpp,+,"if (vxMaxCount.getValue<vx_uint32>()<1) throw ivx::RuntimeError(VX_ERROR_INVALID_VALUE, std::string(__func__) + ""(): maximum value location not found"");",2288,download/opencv_opencv129.cpp
ddc5155a85103ff7dd65b1e3544a0525d4842c6d,Merge pull request #7677 from terfendail:ovx_minmaxloc,modules/core/src/stat.cpp,+,"CV_Error(CV_StsInternal, e.what());",2299,download/opencv_opencv129.cpp
ddc5155a85103ff7dd65b1e3544a0525d4842c6d,Merge pull request #7677 from terfendail:ovx_minmaxloc,modules/core/src/stat.cpp,+,"CV_Error(CV_StsInternal, e.what());",2304,download/opencv_opencv129.cpp
6d55e9929171f0b53b74946e18d7da1e1191377b,Added OpenVX based processing to boxFilter,modules/imgproc/src/smooth.cpp,+,"CV_Error(CV_StsInternal, e.what());",1733,download/opencv_opencv130.cpp
6d55e9929171f0b53b74946e18d7da1e1191377b,Added OpenVX based processing to boxFilter,modules/imgproc/src/smooth.cpp,+,"CV_Error(CV_StsInternal, e.what());",1738,download/opencv_opencv130.cpp
71b2409df0b4cae6ac3a1fbebaf0c7f111f20b45,ts: added findDataFile() utility function and SkipTestException,modules/ts/src/ts.cpp,+,CV_Assert(subpath.empty() || subpath[0] != '/');,85,download/opencv_opencv131.cpp
71b2409df0b4cae6ac3a1fbebaf0c7f111f20b45,ts: added findDataFile() utility function and SkipTestException,modules/ts/src/ts.cpp,-,"sprintf( buf, ""%s%s%s/"", datapath_dir, haveSlash ? """" : ""/"", modulename.c_str() );",487,download/opencv_opencv131.cpp
71b2409df0b4cae6ac3a1fbebaf0c7f111f20b45,ts: added findDataFile() utility function and SkipTestException,modules/ts/src/ts.cpp,+,CV_Assert((copied != MAX_PATH) && (copied != (size_t)-1));,724,download/opencv_opencv131.cpp
71b2409df0b4cae6ac3a1fbebaf0c7f111f20b45,ts: added findDataFile() utility function and SkipTestException,modules/ts/src/ts.cpp,+,"CV_ErrorNoReturn(cv::Error::StsError, cv::format(""OpenCV tests: Can't find required data file: %s"", relative_path.c_str()));",820,download/opencv_opencv131.cpp
57aaec1ee84f6753578f5056655fa4044747486a,Merge pull request #7610 from terfendail:ovx_sobel,modules/imgproc/src/deriv.cpp,+,"CV_Error(CV_StsInternal, e.what());",300,download/opencv_opencv132.cpp
57aaec1ee84f6753578f5056655fa4044747486a,Merge pull request #7610 from terfendail:ovx_sobel,modules/imgproc/src/deriv.cpp,+,"CV_Error(CV_StsInternal, e.what());",305,download/opencv_opencv132.cpp
0ac934d09a7345a06c1e454ee30ab9abaad02c54,added OpenVX call to equalizeHist() function,modules/imgproc/src/histogram.cpp,+,"CV_Error(CV_StsInternal, e.what());",3734,download/opencv_opencv133.cpp
0ac934d09a7345a06c1e454ee30ab9abaad02c54,added OpenVX call to equalizeHist() function,modules/imgproc/src/histogram.cpp,+,"CV_Error(CV_StsInternal, e.what());",3739,download/opencv_opencv133.cpp
7c2734ff1447ed31127801aa4ae16abb155fd68f,"added OpenVX calls to accumulate(), accumulateSquare(), accumulateWeighted()",modules/imgproc/src/accum.cpp,+,"CV_Error(CV_StsInternal, e.what());",1996,download/opencv_opencv134.cpp
7c2734ff1447ed31127801aa4ae16abb155fd68f,"added OpenVX calls to accumulate(), accumulateSquare(), accumulateWeighted()",modules/imgproc/src/accum.cpp,+,"CV_Error(CV_StsInternal, e.what());",2001,download/opencv_opencv134.cpp
0a6958813c973706e2ce631d0d65278c124bc254,added OpenVX call to Mat::convertTo() (w/o scaling),modules/core/src/convert.cpp,+,"CV_Error(CV_StsInternal, e.what());",4672,download/opencv_opencv135.cpp
0a6958813c973706e2ce631d0d65278c124bc254,added OpenVX call to Mat::convertTo() (w/o scaling),modules/core/src/convert.cpp,+,"CV_Error(CV_StsInternal, e.what());",4677,download/opencv_opencv135.cpp
a4b9eb23d1b8d9c38a1f629ddd66fe4711b68fc2,Added OpenVX based processing to meanStdDev,modules/core/src/stat.cpp,+,CV_Assert(mean.type() == CV_64F && mean.isContinuous() &&,1689,download/opencv_opencv136.cpp
a4b9eb23d1b8d9c38a1f629ddd66fe4711b68fc2,Added OpenVX based processing to meanStdDev,modules/core/src/stat.cpp,+,CV_Assert(stddev.type() == CV_64F && stddev.isContinuous() &&,1702,download/opencv_opencv136.cpp
a4b9eb23d1b8d9c38a1f629ddd66fe4711b68fc2,Added OpenVX based processing to meanStdDev,modules/core/src/stat.cpp,+,"CV_Error(CV_StsInternal, e.what());",1714,download/opencv_opencv136.cpp
a4b9eb23d1b8d9c38a1f629ddd66fe4711b68fc2,Added OpenVX based processing to meanStdDev,modules/core/src/stat.cpp,+,"CV_Error(CV_StsInternal, e.what());",1719,download/opencv_opencv136.cpp
0cd37886241ba8a5c7f3b7e46f28be195b147551,Added OpenVX based processing to threshold,modules/imgproc/src/thresh.cpp,+,"CV_Error(CV_StsInternal, e.what());",1333,download/opencv_opencv137.cpp
0cd37886241ba8a5c7f3b7e46f28be195b147551,Added OpenVX based processing to threshold,modules/imgproc/src/thresh.cpp,+,"CV_Error(CV_StsInternal, e.what());",1338,download/opencv_opencv137.cpp
e9cc0f6a4c5c547979dbbc0637c301d2a32872bd,Added OpenVX based processing to minMaxLoc,modules/core/src/stat.cpp,+,"if(vxMinCount.getValue<vx_uint32>()<1) throw ivx::RuntimeError(VX_ERROR_INVALID_VALUE, std::string(__func__) + ""(): minimum value location not found"");",2280,download/opencv_opencv138.cpp
e9cc0f6a4c5c547979dbbc0637c301d2a32872bd,Added OpenVX based processing to minMaxLoc,modules/core/src/stat.cpp,+,"if (vxMaxCount.getValue<vx_uint32>()<1) throw ivx::RuntimeError(VX_ERROR_INVALID_VALUE, std::string(__func__) + ""(): maximum value location not found"");",2288,download/opencv_opencv138.cpp
e9cc0f6a4c5c547979dbbc0637c301d2a32872bd,Added OpenVX based processing to minMaxLoc,modules/core/src/stat.cpp,+,"CV_Error(CV_StsInternal, e.what());",2299,download/opencv_opencv138.cpp
e9cc0f6a4c5c547979dbbc0637c301d2a32872bd,Added OpenVX based processing to minMaxLoc,modules/core/src/stat.cpp,+,"CV_Error(CV_StsInternal, e.what());",2304,download/opencv_opencv138.cpp
9200db778c05afa076bf472b0f2c171dfbd8f553,Added OpenVX based processing to medianBlur,modules/imgproc/src/smooth.cpp,+,"CV_Error(CV_StsInternal, e.what());",3204,download/opencv_opencv139.cpp
9200db778c05afa076bf472b0f2c171dfbd8f553,Added OpenVX based processing to medianBlur,modules/imgproc/src/smooth.cpp,+,"CV_Error(CV_StsInternal, e.what());",3209,download/opencv_opencv139.cpp
e8f3469096df0a65a8c38e57e8eb58632fb1e806,Added OpenVX based processing to Sobel,modules/imgproc/src/deriv.cpp,+,"CV_Error(CV_StsInternal, e.what());",300,download/opencv_opencv140.cpp
e8f3469096df0a65a8c38e57e8eb58632fb1e806,Added OpenVX based processing to Sobel,modules/imgproc/src/deriv.cpp,+,"CV_Error(CV_StsInternal, e.what());",305,download/opencv_opencv140.cpp
90b52cd9b869b61f9ef7956b56e63edb66927cb1,Merge pull request #7726 from pengli:warp_image,modules/imgproc/src/imgwarp.cpp,+,CV_Assert(op_type == OCL_OP_AFFINE || op_type == OCL_OP_PERSPECTIVE);,5654,download/opencv_opencv141.cpp
90b52cd9b869b61f9ef7956b56e63edb66927cb1,Merge pull request #7726 from pengli:warp_image,modules/imgproc/src/imgwarp.cpp,+,CV_Assert( (M1.type() == CV_32F || M1.type() == CV_64F) && M1.rows == matRows && M1.cols == 3 );,5694,download/opencv_opencv141.cpp
90b52cd9b869b61f9ef7956b56e63edb66927cb1,Merge pull request #7726 from pengli:warp_image,modules/imgproc/src/imgwarp.cpp,+,"k.args(ocl::KernelArg::ReadOnly(src), ocl::KernelArg::WriteOnly(dst), ocl::KernelArg::PtrReadOnly(M0),",5715,download/opencv_opencv141.cpp
b72d19675353b909ac5344e4d64495962b31fc13,"optimization for warpAffine and warpPerspective

Add new ocl kernels for warpAffine and warpPerspective,
The average performance improvemnt is about 30%. The new
ocl kernels require CV_8UC1 format and support nearest
neighbor and bilinear interpolation.

Signed-off-by: Li Peng <peng.li@intel.com>",modules/imgproc/src/imgwarp.cpp,+,CV_Assert(op_type == OCL_OP_AFFINE || op_type == OCL_OP_PERSPECTIVE);,5654,download/opencv_opencv142.cpp
b72d19675353b909ac5344e4d64495962b31fc13,"optimization for warpAffine and warpPerspective

Add new ocl kernels for warpAffine and warpPerspective,
The average performance improvemnt is about 30%. The new
ocl kernels require CV_8UC1 format and support nearest
neighbor and bilinear interpolation.

Signed-off-by: Li Peng <peng.li@intel.com>",modules/imgproc/src/imgwarp.cpp,+,CV_Assert( (M1.type() == CV_32F || M1.type() == CV_64F) && M1.rows == matRows && M1.cols == 3 );,5694,download/opencv_opencv142.cpp
b72d19675353b909ac5344e4d64495962b31fc13,"optimization for warpAffine and warpPerspective

Add new ocl kernels for warpAffine and warpPerspective,
The average performance improvemnt is about 30%. The new
ocl kernels require CV_8UC1 format and support nearest
neighbor and bilinear interpolation.

Signed-off-by: Li Peng <peng.li@intel.com>",modules/imgproc/src/imgwarp.cpp,+,"k.args(ocl::KernelArg::ReadOnly(src), ocl::KernelArg::WriteOnly(dst), ocl::KernelArg::PtrReadOnly(M0),",5715,download/opencv_opencv142.cpp
4c5c722939b3c7d942951bc6ddecbe08b3448e83,Merge pull request #7718 from guoxuedong:updateExifReader,modules/imgcodecs/src/exif.cpp,+,throw ExifParsingError();,165,download/opencv_opencv143.cpp
e69253a4fb613ddbc5797c9f4828cd9200f64777,"Update exif.cpp

 ExifReader::getExif may enter infinite loop with jpeg image which have no EOI.
For example, bytesToSkip may be set to 0 and fseek seems like fseek(f, -2 , SEEK_CUR) for image that end with RST7(FF D7) instead of EOI.",modules/imgcodecs/src/exif.cpp,+,throw ExifParsingError();,165,download/opencv_opencv144.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Invalid format"");",40,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Invalid format"");",61,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to create image"");",77,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to get valid region"");",82,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to copy image patch"");",87,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to access image patch"");",91,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to commit image patch"");",94,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to create image from handle"");",101,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to query image"");",115,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to query image"");",118,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to query image"");",121,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"if (!(width > 0 && height > 0)) throw std::runtime_error(""Invalid format"");",123,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Invalid format"");",141,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to copy image patch"");",161,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to access image patch"");",165,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to commit image patch"");",168,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to query image"");",182,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Image wasn't created from user handle"");",186,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to swap image handle"");",193,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to create image"");",295,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,parser.printMessage();,353,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/no_wrappers.cpp,+,parser.printErrors();,380,download/opencv_opencv145.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/wrappers.cpp,+,parser.printMessage();,183,download/opencv_opencv146.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/wrappers.cpp,+,parser.printErrors();,209,download/opencv_opencv146.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/wrappers_video.cpp,+,parser.printMessage();,219,download/opencv_opencv147.cpp
8151be9abc5f8e30f073f9f5bf4c97e26eb29723,Merge pull request #7163 from savuor:openvx_sample,samples/openvx/wrappers_video.cpp,+,parser.printErrors();,245,download/opencv_opencv147.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Invalid format"");",33,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Invalid format"");",54,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to create image"");",70,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to get valid region"");",75,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to copy image patch"");",80,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to access image patch"");",84,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to commit image patch"");",87,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to create image from handle"");",98,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to query image"");",112,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to query image"");",115,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to query image"");",118,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"if (!(width > 0 && height > 0)) throw std::runtime_error(""Invalid format"");",120,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Invalid format"");",138,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to copy image patch"");",158,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to access image patch"");",162,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to commit image patch"");",165,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to query image"");",179,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Image wasn't created from user handle"");",183,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to swap image handle"");",190,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,"throw std::runtime_error(""Failed to create image"");",292,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,parser.printMessage();,350,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/no_wrappers.cpp,+,parser.printErrors();,377,download/opencv_opencv148.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/wrappers.cpp,+,parser.printMessage();,185,download/opencv_opencv149.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/wrappers.cpp,+,parser.printErrors();,211,download/opencv_opencv149.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/wrappers_video.cpp,+,parser.printMessage();,222,download/opencv_opencv150.cpp
5c969d1972f6e90ede402b0cdaf108396e841e6c,interoperability OpenVX samples added,samples/openvx/wrappers_video.cpp,+,parser.printErrors();,248,download/opencv_opencv150.cpp
af8e6b06f7021b5a3e474468a671c71471f2e9a7,Merge pull request #7689 from alalek:warnings_2.4,modules/legacy/test/test_stereomatching.cpp,-,assert( trueLeftDisp.type() == CV_32FC1 && trueRightDisp.type() == CV_32FC1 );,535,download/opencv_opencv151.cpp
af8e6b06f7021b5a3e474468a671c71471f2e9a7,Merge pull request #7689 from alalek:warnings_2.4,modules/legacy/test/test_stereomatching.cpp,+,assert( trueLeftDisp.type() == CV_32FC1 && (trueRightDisp.empty() || trueRightDisp.type() == CV_32FC1) );,535,download/opencv_opencv151.cpp
af8e6b06f7021b5a3e474468a671c71471f2e9a7,Merge pull request #7689 from alalek:warnings_2.4,modules/ocl/src/mssegmentation.cpp,-,"CV_Error(-1, ""Invalid DjSets constructor\n"");",145,download/opencv_opencv152.cpp
54d215902fc8103646124ac2cec17f5c9dbb14e5,Merge pull request #7627 from sovrasov:fs_vec_of_vec,modules/core/test/test_io.cpp,+,"FileStorage writer(fileName + formats[i], FileStorage::WRITE);",975,download/opencv_opencv153.cpp
54d215902fc8103646124ac2cec17f5c9dbb14e5,Merge pull request #7627 from sovrasov:fs_vec_of_vec,modules/core/test/test_io.cpp,+,"ASSERT_EQ(testMats.size(), testMats.size());",983,download/opencv_opencv153.cpp
54d215902fc8103646124ac2cec17f5c9dbb14e5,Merge pull request #7627 from sovrasov:fs_vec_of_vec,modules/core/test/test_io.cpp,+,"ASSERT_EQ(testMats[j].size(), outputMats[j].size());",987,download/opencv_opencv153.cpp
54d215902fc8103646124ac2cec17f5c9dbb14e5,Merge pull request #7627 from sovrasov:fs_vec_of_vec,modules/core/test/test_io.cpp,+,"ASSERT_TRUE(norm(outputMats[j][k] - testMats[j][k], NORM_INF) == 0);",991,download/opencv_opencv153.cpp
511c0c2e7119ac76118b1f09abeeb64e804003f1,Merge pull request #7688 from alalek:fix_orb_test,modules/features2d/test/test_rotation_and_scale_invariance.cpp,-,"ts->printf(cvtest::TS::LOG, ""Incorrect keyPointMatchesRatio: curr = %f, min = %f.\n"",",271,download/opencv_opencv154.cpp
511c0c2e7119ac76118b1f09abeeb64e804003f1,Merge pull request #7688 from alalek:fix_orb_test,modules/features2d/test/test_rotation_and_scale_invariance.cpp,+,"ts->printf(cvtest::TS::LOG, ""Angle: %f: Incorrect keyPointMatchesRatio: curr = %f, min = %f (matched=%d total=%d - %d).\n"",",272,download/opencv_opencv154.cpp
511c0c2e7119ac76118b1f09abeeb64e804003f1,Merge pull request #7688 from alalek:fix_orb_test,modules/features2d/test/test_rotation_and_scale_invariance.cpp,-,"ts->printf(cvtest::TS::LOG, ""Incorrect angleInliersRatio: curr = %f, min = %f.\n"",",283,download/opencv_opencv154.cpp
511c0c2e7119ac76118b1f09abeeb64e804003f1,Merge pull request #7688 from alalek:fix_orb_test,modules/features2d/test/test_rotation_and_scale_invariance.cpp,+,"ts->printf(cvtest::TS::LOG, ""Angle: %f: Incorrect angleInliersRatio: curr = %f, min = %f.\n"",",284,download/opencv_opencv154.cpp
7b13550bddd3b6e2790025dc8fda7ac60c48d5fd,Merge pull request #7697 from alalek:backport_6561,modules/core/test/test_dxt.cpp,+,"double get_success_error_level( int test_case_idx, int i, int j );",782,download/opencv_opencv155.cpp
7b13550bddd3b6e2790025dc8fda7ac60c48d5fd,Merge pull request #7697 from alalek:backport_6561,modules/core/test/test_dxt.cpp,+,"double CxCore_MulSpectrumsTest::get_success_error_level( int test_case_idx, int i, int j )",792,download/opencv_opencv155.cpp
7b13550bddd3b6e2790025dc8fda7ac60c48d5fd,Merge pull request #7697 from alalek:backport_6561,modules/core/test/test_dxt.cpp,+,"return ArrayTest::get_success_error_level( test_case_idx, i, j );",797,download/opencv_opencv155.cpp
7b13550bddd3b6e2790025dc8fda7ac60c48d5fd,Merge pull request #7697 from alalek:backport_6561,modules/core/test/test_dxt.cpp,+,"return ArrayTest::get_success_error_level( test_case_idx, i, j );",812,download/opencv_opencv155.cpp
3ea4f72e35c7bd7cd866c44b43461896f2ab7c65,"fix Core_MulSpectrum test on 64bit ARM + release mode
  * fix issue 6536
  * increase threshold in particular tests due to the difference of fmsub and fsub",modules/core/test/test_dxt.cpp,+,"double get_success_error_level( int test_case_idx, int i, int j );",782,download/opencv_opencv156.cpp
3ea4f72e35c7bd7cd866c44b43461896f2ab7c65,"fix Core_MulSpectrum test on 64bit ARM + release mode
  * fix issue 6536
  * increase threshold in particular tests due to the difference of fmsub and fsub",modules/core/test/test_dxt.cpp,+,"double CxCore_MulSpectrumsTest::get_success_error_level( int test_case_idx, int i, int j )",792,download/opencv_opencv156.cpp
3ea4f72e35c7bd7cd866c44b43461896f2ab7c65,"fix Core_MulSpectrum test on 64bit ARM + release mode
  * fix issue 6536
  * increase threshold in particular tests due to the difference of fmsub and fsub",modules/core/test/test_dxt.cpp,+,"return ArrayTest::get_success_error_level( test_case_idx, i, j );",797,download/opencv_opencv156.cpp
3ea4f72e35c7bd7cd866c44b43461896f2ab7c65,"fix Core_MulSpectrum test on 64bit ARM + release mode
  * fix issue 6536
  * increase threshold in particular tests due to the difference of fmsub and fsub",modules/core/test/test_dxt.cpp,+,"return ArrayTest::get_success_error_level( test_case_idx, i, j );",812,download/opencv_opencv156.cpp
0a543c553112cd2791f56bd6bb380f77a4b3df4f,test: fix Legacy_StereoGC.regression assertion,modules/legacy/test/test_stereomatching.cpp,-,assert( trueLeftDisp.type() == CV_32FC1 && trueRightDisp.type() == CV_32FC1 );,535,download/opencv_opencv157.cpp
0a543c553112cd2791f56bd6bb380f77a4b3df4f,test: fix Legacy_StereoGC.regression assertion,modules/legacy/test/test_stereomatching.cpp,+,assert( trueLeftDisp.type() == CV_32FC1 && (trueRightDisp.empty() || trueRightDisp.type() == CV_32FC1) );,535,download/opencv_opencv157.cpp
21167b1bf1b8471101732073d9b4803b80fe0ce4,Fixed several GCC 5.x warnings,modules/ocl/src/mssegmentation.cpp,-,"CV_Error(-1, ""Invalid DjSets constructor\n"");",145,download/opencv_opencv158.cpp
dac37a0bc93e7b77f5055ef66ad531d833100c3e,"features2d: update rotation invariance test

Don't process keypoints near border, because after rotation border points
have contrast gradients with rotation border fill.",modules/features2d/test/test_rotation_and_scale_invariance.cpp,-,"ts->printf(cvtest::TS::LOG, ""Incorrect keyPointMatchesRatio: curr = %f, min = %f.\n"",",271,download/opencv_opencv159.cpp
dac37a0bc93e7b77f5055ef66ad531d833100c3e,"features2d: update rotation invariance test

Don't process keypoints near border, because after rotation border points
have contrast gradients with rotation border fill.",modules/features2d/test/test_rotation_and_scale_invariance.cpp,+,"ts->printf(cvtest::TS::LOG, ""Angle: %f: Incorrect keyPointMatchesRatio: curr = %f, min = %f (matched=%d total=%d - %d).\n"",",272,download/opencv_opencv159.cpp
dac37a0bc93e7b77f5055ef66ad531d833100c3e,"features2d: update rotation invariance test

Don't process keypoints near border, because after rotation border points
have contrast gradients with rotation border fill.",modules/features2d/test/test_rotation_and_scale_invariance.cpp,-,"ts->printf(cvtest::TS::LOG, ""Incorrect angleInliersRatio: curr = %f, min = %f.\n"",",283,download/opencv_opencv159.cpp
dac37a0bc93e7b77f5055ef66ad531d833100c3e,"features2d: update rotation invariance test

Don't process keypoints near border, because after rotation border points
have contrast gradients with rotation border fill.",modules/features2d/test/test_rotation_and_scale_invariance.cpp,+,"ts->printf(cvtest::TS::LOG, ""Angle: %f: Incorrect angleInliersRatio: curr = %f, min = %f.\n"",",284,download/opencv_opencv159.cpp
a19cb20b23aae1f858bca19716385c8e2380db2a,Merge pull request #7673 from pengli:deriv,modules/imgproc/src/deriv.cpp,+,"sprintf(build_opts, ""-D %s %s"", borderMap[borderType],",836,download/opencv_opencv160.cpp
a19cb20b23aae1f858bca19716385c8e2380db2a,Merge pull request #7673 from pengli:deriv,modules/imgproc/src/deriv.cpp,+,"idxArg = k.set(idxArg, ocl::KernelArg::PtrWriteOnly(dst));",851,download/opencv_opencv160.cpp
6cb73356b1b52947eef3a423666bcd6b68aeeab2,"laplacian ocl kernel optimization

This ocl kernel is 46%~171% faster than current laplacian 3x3
ocl kernel in the perf test, with image format ""CV_8UC1"".

Signed-off-by: Li Peng <peng.li@intel.com>",modules/imgproc/src/deriv.cpp,+,"sprintf(build_opts, ""-D %s %s"", borderMap[borderType],",836,download/opencv_opencv161.cpp
6cb73356b1b52947eef3a423666bcd6b68aeeab2,"laplacian ocl kernel optimization

This ocl kernel is 46%~171% faster than current laplacian 3x3
ocl kernel in the perf test, with image format ""CV_8UC1"".

Signed-off-by: Li Peng <peng.li@intel.com>",modules/imgproc/src/deriv.cpp,+,"idxArg = k.set(idxArg, ocl::KernelArg::PtrWriteOnly(dst));",851,download/opencv_opencv161.cpp
7c266ffffedc47cbc19aed62dfdd6851c31b8361,Add support of vector of vectors serialization to FileStorage,modules/core/test/test_io.cpp,+,"FileStorage writer(fileName + formats[i], FileStorage::WRITE);",975,download/opencv_opencv162.cpp
7c266ffffedc47cbc19aed62dfdd6851c31b8361,Add support of vector of vectors serialization to FileStorage,modules/core/test/test_io.cpp,+,"ASSERT_EQ(testMats.size(), testMats.size());",983,download/opencv_opencv162.cpp
7c266ffffedc47cbc19aed62dfdd6851c31b8361,Add support of vector of vectors serialization to FileStorage,modules/core/test/test_io.cpp,+,"ASSERT_EQ(testMats[j].size(), outputMats[j].size());",987,download/opencv_opencv162.cpp
7c266ffffedc47cbc19aed62dfdd6851c31b8361,Add support of vector of vectors serialization to FileStorage,modules/core/test/test_io.cpp,+,"ASSERT_TRUE(norm(outputMats[j][k] - testMats[j][k], NORM_INF) == 0);",991,download/opencv_opencv162.cpp
c3f0ee07685dd992278c2dae1d707fa828210e9a,Merge pull request #7675 from filnet:msys2,modules/core/src/system.cpp,-,"redirectError( CvErrorCallback errCallback, void* userdata, void** prevUserdata)",670,download/opencv_opencv163.cpp
c3f0ee07685dd992278c2dae1d707fa828210e9a,Merge pull request #7675 from filnet:msys2,modules/core/src/system.cpp,+,"redirectError( ErrorCallback errCallback, void* userdata, void** prevUserdata)",671,download/opencv_opencv163.cpp
e79f83e573ae2d5b60947d9f7964943425234b92,"calib3d: fix missing cv::redirectError symbol error

happens on msys2 with gcc 6.2.0
see also http://stackoverflow.com/questions/38552221/undefined-reference-to-cvredirecterror-while-creating-shared-build-of-opencv-3",modules/core/src/system.cpp,-,"redirectError( CvErrorCallback errCallback, void* userdata, void** prevUserdata)",670,download/opencv_opencv164.cpp
e79f83e573ae2d5b60947d9f7964943425234b92,"calib3d: fix missing cv::redirectError symbol error

happens on msys2 with gcc 6.2.0
see also http://stackoverflow.com/questions/38552221/undefined-reference-to-cvredirecterror-while-creating-shared-build-of-opencv-3",modules/core/src/system.cpp,+,"redirectError( ErrorCallback errCallback, void* userdata, void** prevUserdata)",671,download/opencv_opencv164.cpp
c93fb14dd2324f676144390d92c117019e0f8855,Merge pull request #7653 from pengli:deriv,modules/imgproc/src/deriv.cpp,+,"sprintf(build_opts, ""-D %s %s%s"", borderMap[borderType],",553,download/opencv_opencv165.cpp
c93fb14dd2324f676144390d92c117019e0f8855,Merge pull request #7653 from pengli:deriv,modules/imgproc/src/deriv.cpp,+,"idxArg = kernel.set(idxArg, ocl::KernelArg::PtrWriteOnly(dst));",569,download/opencv_opencv165.cpp
8d4a7d3dccea3de2e7e026822573f85ef25050dc,"sobel and scharr ocl kernel optimization

It improves 108%~230% performance in the perf test
with image format ""CV_8UC1"" and kernel size 3.

Signed-off-by: Li Peng <peng.li@intel.com>",modules/imgproc/src/deriv.cpp,+,"sprintf(build_opts, ""-D %s %s%s"", borderMap[borderType],",553,download/opencv_opencv166.cpp
8d4a7d3dccea3de2e7e026822573f85ef25050dc,"sobel and scharr ocl kernel optimization

It improves 108%~230% performance in the perf test
with image format ""CV_8UC1"" and kernel size 3.

Signed-off-by: Li Peng <peng.li@intel.com>",modules/imgproc/src/deriv.cpp,+,"idxArg = kernel.set(idxArg, ocl::KernelArg::PtrWriteOnly(dst));",569,download/opencv_opencv166.cpp
6b7d570c3400ec6760d96071d61035464840dfce,Merge pull request #7539 from Tetragramm:90DegreeRotations,modules/core/src/copy.cpp,+,CV_Assert(_src.dims() <= 2);,855,download/opencv_opencv167.cpp
b2e0873af1db7ce6cc1766fcc8a34415cd8daa62,Merge pull request #7629 from alalek:issue_7626,modules/imgproc/src/contours.cpp,+,CV_DbgAssert(value != 0); // undefined for zero input (https://en.wikipedia.org/wiki/Find_first_set),56,download/opencv_opencv168.cpp
f1d93cb23be1b1d9883c6dc57f5b78ffc14a0d34,Merge pull request #7624 from pengli:gaussian_blur,modules/imgproc/src/smooth.cpp,+,"sprintf(build_opts, ""-D %s %s%s"", borderMap[borderType],",2054,download/opencv_opencv169.cpp
f1d93cb23be1b1d9883c6dc57f5b78ffc14a0d34,Merge pull request #7624 from pengli:gaussian_blur,modules/imgproc/src/smooth.cpp,+,"idxArg = kernel.set(idxArg, ocl::KernelArg::PtrWriteOnly(dst));",2070,download/opencv_opencv169.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,-,"printf("" - C:%d"", pNode->m_payload.m_counter);",813,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,-,"printf("" T:%.4fms"", pNode->m_payload.getMeanMs());",813,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,+,"printf("" - TC:%d C:%d"", pNode->m_payload.m_threads, pNode->m_payload.m_counter);",813,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,+,"printf("" T:%.2fms"", pNode->m_payload.getTotalMs());",814,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,-,"printShift(pNode->m_childs[i], pRoot);",855,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,+,"printShift(pNode->m_childs[i], pRoot);",855,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,-,"printf(""\\---"");",858,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,-,"printf(""|---"");",859,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,-,"printNodeRec(pNode->m_childs[i], pRoot);",859,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,+,"printf(""\\---"");",862,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,+,"printf(""|---"");",864,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,+,"printNodeRec(pNode->m_childs[i], pRoot);",865,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,-,"printf(""[ TRACE    ]\n"");",927,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,-,"printNodeRec(cv::instr::getTrace(), cv::instr::getTrace());",927,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,+,"printf(""[ TRACE    ]\n"");",927,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,+,"printNodeRec(cv::instr::getTrace(), cv::instr::getTrace());",928,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,-,"printf(""\nIPP weight: %.1f%%"", ((double)getImplTime(cv::instr::IMPL_IPP)*100/(double)getTotalTime()));",930,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,+,"printf(""\nIPP weight: %.1f%%"", ((double)getImplTime(cv::instr::IMPL_IPP)*100/(double)getTotalTime()));",930,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,-,"printf(""\nOPENCL weight: %.1f%%"", ((double)getImplTime(cv::instr::IMPL_OPENCL)*100/(double)getTotalTime()));",933,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,+,"printf(""\nOPENCL weight: %.1f%%"", ((double)getImplTime(cv::instr::IMPL_OPENCL)*100/(double)getTotalTime()));",933,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,-,"printf(""\n[/TRACE    ]\n"");",935,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,+,"printf(""\n[/TRACE    ]\n"");",937,download/opencv_opencv170.cpp
b2fa82ffcd14798391312567c554948888cd9503,Merge pull request #7618 from lupustr3:pvlasov/instrumentation_update,modules/ts/src/ts_perf.cpp,+,InstumentData::printTree();,1854,download/opencv_opencv170.cpp
183c75358b856052453af7d3a9d4e8eecc6e9ef0,imgproc: fix trailingZeros for MSVS 2010,modules/imgproc/src/contours.cpp,+,CV_DbgAssert(value != 0); // undefined for zero input (https://en.wikipedia.org/wiki/Find_first_set),56,download/opencv_opencv171.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,-,"printf("" - C:%d"", pNode->m_payload.m_counter);",813,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,-,"printf("" T:%.4fms"", pNode->m_payload.getMeanMs());",813,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,+,"printf("" - TC:%d C:%d"", pNode->m_payload.m_threads, pNode->m_payload.m_counter);",813,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,+,"printf("" T:%.2fms"", pNode->m_payload.getTotalMs());",814,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,-,"printShift(pNode->m_childs[i], pRoot);",855,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,+,"printShift(pNode->m_childs[i], pRoot);",855,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,-,"printf(""\\---"");",858,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,-,"printf(""|---"");",859,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,-,"printNodeRec(pNode->m_childs[i], pRoot);",859,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,+,"printf(""\\---"");",862,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,+,"printf(""|---"");",864,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,+,"printNodeRec(pNode->m_childs[i], pRoot);",865,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,-,"printf(""[ TRACE    ]\n"");",927,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,-,"printNodeRec(cv::instr::getTrace(), cv::instr::getTrace());",927,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,+,"printf(""[ TRACE    ]\n"");",927,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,+,"printNodeRec(cv::instr::getTrace(), cv::instr::getTrace());",928,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,-,"printf(""\nIPP weight: %.1f%%"", ((double)getImplTime(cv::instr::IMPL_IPP)*100/(double)getTotalTime()));",930,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,+,"printf(""\nIPP weight: %.1f%%"", ((double)getImplTime(cv::instr::IMPL_IPP)*100/(double)getTotalTime()));",930,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,-,"printf(""\nOPENCL weight: %.1f%%"", ((double)getImplTime(cv::instr::IMPL_OPENCL)*100/(double)getTotalTime()));",933,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,+,"printf(""\nOPENCL weight: %.1f%%"", ((double)getImplTime(cv::instr::IMPL_OPENCL)*100/(double)getTotalTime()));",933,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,-,"printf(""\n[/TRACE    ]\n"");",935,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,+,"printf(""\n[/TRACE    ]\n"");",937,download/opencv_opencv172.cpp
349d5ba0127ac22455f22f5d49f9cfa0edd84623,"--perf_instrument parameter now has int type and 0, 1, 2 modes (1 - simple trees, 2 - expanded trees for functions with same name but different calling address);

Maximum depth limit var was added to the instrumentation structure;

Trace names output console output fix: improper tree formatting could happen;
Output in case of error was added;

Custom regions improvements;

Improved timing and weight calculation for parallel regions; New TC (threads counter) value to indicate how many different threads accessed particular node;

parallel_for, warnings fixes and ReturnAddress code from Alexander Alekhin;",modules/ts/src/ts_perf.cpp,+,InstumentData::printTree();,1854,download/opencv_opencv172.cpp
8f63f51e81ef1ed2ab07b328e58e8f68a15fa887,"gaussian blur ocl kernel optimization

This ocl kernel is for 3x3 kernel size and CV_8UC1 format
It is 115% ~ 300% faster than current ocl path in perf test

python ./modules/ts/misc/run.py -t imgproc --gtest_filter=OCL_GaussianBlurFixture*

Signed-off-by: Li Peng <peng.li@intel.com>",modules/imgproc/src/smooth.cpp,+,"sprintf(build_opts, ""-D %s %s%s"", borderMap[borderType],",2054,download/opencv_opencv173.cpp
8f63f51e81ef1ed2ab07b328e58e8f68a15fa887,"gaussian blur ocl kernel optimization

This ocl kernel is for 3x3 kernel size and CV_8UC1 format
It is 115% ~ 300% faster than current ocl path in perf test

python ./modules/ts/misc/run.py -t imgproc --gtest_filter=OCL_GaussianBlurFixture*

Signed-off-by: Li Peng <peng.li@intel.com>",modules/imgproc/src/smooth.cpp,+,"idxArg = kernel.set(idxArg, ocl::KernelArg::PtrWriteOnly(dst));",2070,download/opencv_opencv173.cpp
442380bfac197beb8c80d30390587204bafd3633,Merge pull request #7585 from pengli:morph_filter,modules/imgproc/src/morph.cpp,+,CV_Assert(actual_op <= 3 || haveExtraMat);,1490,download/opencv_opencv174.cpp
442380bfac197beb8c80d30390587204bafd3633,Merge pull request #7585 from pengli:morph_filter,modules/imgproc/src/morph.cpp,+,"idxArg = k.set(idxArg, ocl::KernelArg::PtrWriteOnly(dst));",1539,download/opencv_opencv174.cpp
35198b84a42d7af39686889efbb6af99d223722a,"morph ocl kernel for erode and dilate filter

This kernel is for CV_8UC1 format and 3x3 kernel size,
It is about 33% ~ 55% faster than current ocl kernel with below perf test

python ./modules/ts/misc/run.py -t imgproc --gtest_filter=OCL_ErodeFixture*
python ./modules/ts/misc/run.py -t imgproc --gtest_filter=OCL_DilateFixture*

Also add accuracy test cases for this kernel, the test command is

./bin/opencv_test_imgproc --gtest_filter=OCL_Filter/MorphFilter3x3*

Signed-off-by: Li Peng <peng.li@intel.com>",modules/imgproc/src/morph.cpp,+,CV_Assert(actual_op <= 3 || haveExtraMat);,1490,download/opencv_opencv175.cpp
35198b84a42d7af39686889efbb6af99d223722a,"morph ocl kernel for erode and dilate filter

This kernel is for CV_8UC1 format and 3x3 kernel size,
It is about 33% ~ 55% faster than current ocl kernel with below perf test

python ./modules/ts/misc/run.py -t imgproc --gtest_filter=OCL_ErodeFixture*
python ./modules/ts/misc/run.py -t imgproc --gtest_filter=OCL_DilateFixture*

Also add accuracy test cases for this kernel, the test command is

./bin/opencv_test_imgproc --gtest_filter=OCL_Filter/MorphFilter3x3*

Signed-off-by: Li Peng <peng.li@intel.com>",modules/imgproc/src/morph.cpp,+,"idxArg = k.set(idxArg, ocl::KernelArg::PtrWriteOnly(dst));",1539,download/opencv_opencv175.cpp
280cdb5b9441446e5dc5d3d6f3522344e8609522,Merge pull request #7595 from sovrasov:fs_utf8_bom,modules/core/src/persistence.cpp,+,"CV_Error(CV_BADARG_ERR, ""Input file is empty"");",4429,download/opencv_opencv176.cpp
280cdb5b9441446e5dc5d3d6f3522344e8609522,Merge pull request #7595 from sovrasov:fs_utf8_bom,modules/core/src/persistence.cpp,+,"CV_Error(CV_BADARG_ERR, ""Unsupported file storage format"");",4431,download/opencv_opencv176.cpp
6fceb1dd591467dadcf8fa938029c04a966337a1,Merge pull request #7601 from sovrasov:remap_big_img_assert,modules/imgproc/src/imgwarp.cpp,+,CV_Assert( dst.cols < SHRT_MAX && dst.rows < SHRT_MAX && src.cols < SHRT_MAX && src.rows < SHRT_MAX );,4859,download/opencv_opencv177.cpp
050731c4d2ad887d714b95b1e0fb95d608b10c37,Merge pull request #7552 from es0m:master,samples/cpp/dbt_face_detection.cpp,+,"printf(""Error: Cannot load %s\n"", cascadeFrontalfilename.c_str());",59,download/opencv_opencv178.cpp
050731c4d2ad887d714b95b1e0fb95d608b10c37,Merge pull request #7552 from es0m:master,samples/cpp/dbt_face_detection.cpp,+,"printf(""Error: Cannot load %s\n"", cascadeFrontalfilename.c_str());",67,download/opencv_opencv178.cpp
050731c4d2ad887d714b95b1e0fb95d608b10c37,Merge pull request #7552 from es0m:master,samples/cpp/dbt_face_detection.cpp,-,"printf(""This sample works for UNIX or ANDROID only\n"");",109,download/opencv_opencv178.cpp
050731c4d2ad887d714b95b1e0fb95d608b10c37,Merge pull request #7552 from es0m:master,samples/cpp/dbt_face_detection.cpp,+,"printf(""This sample works for UNIX or ANDROID or Visual Studio 2013+ only\n"");",109,download/opencv_opencv178.cpp
e955d17c51b0b7375739e57fcf83b90f2f400d4f,Add new error messages,modules/core/src/persistence.cpp,+,"CV_Error(CV_BADARG_ERR, ""Input file is empty"");",4429,download/opencv_opencv179.cpp
e955d17c51b0b7375739e57fcf83b90f2f400d4f,Add new error messages,modules/core/src/persistence.cpp,+,"CV_Error(CV_BADARG_ERR, ""Unsupported file storage format"");",4431,download/opencv_opencv179.cpp
af01267f23a2016232e78ceb747654a29481c02c,Add assertion to prevent processing of large images in remap,modules/imgproc/src/imgwarp.cpp,+,CV_Assert( dst.cols < SHRT_MAX && dst.rows < SHRT_MAX && src.cols < SHRT_MAX && src.rows < SHRT_MAX );,4859,download/opencv_opencv180.cpp
89448752588d0b6af2e191c0a2d4b5669a039316,Merge pull request #7526 from alalek:fix_arm_builds,modules/calib3d/test/test_cameracalibration.cpp,-,"ts->printf( cvtest::TS::LOG, ""Points reprojected with a matrix Q and points reconstructed by triangulation are different, testcase %d\n"", testcase);",1758,download/opencv_opencv181.cpp
89448752588d0b6af2e191c0a2d4b5669a039316,Merge pull request #7526 from alalek:fix_arm_builds,modules/calib3d/test/test_cameracalibration.cpp,+,"ts->printf( cvtest::TS::LOG, ""Points reprojected with a matrix Q and points reconstructed by triangulation are different (tolerance=%g, failed=%d), testcase %d\n"",",1758,download/opencv_opencv181.cpp
89448752588d0b6af2e191c0a2d4b5669a039316,Merge pull request #7526 from alalek:fix_arm_builds,modules/imgproc/perf/perf_houghLines.cpp,+,"printf(""%dx%d: %d lines\n"", image.cols, image.rows, (int)lines.size());",55,download/opencv_opencv182.cpp
89448752588d0b6af2e191c0a2d4b5669a039316,Merge pull request #7526 from alalek:fix_arm_builds,modules/photo/test/test_decolor.cpp,-,"ASSERT_FALSE(original.channels()!=3) << ""Load color input image "" << original_path;",58,download/opencv_opencv183.cpp
89448752588d0b6af2e191c0a2d4b5669a039316,Merge pull request #7526 from alalek:fix_arm_builds,modules/photo/test/test_decolor.cpp,+,"ASSERT_EQ(3, original.channels()) << ""Load color input image "" << original_path;",58,download/opencv_opencv183.cpp
049a8949865f23cac30b086e129fd5559b846593,"fixed detection_based_tracker on visual studio 2013 and later
modules/objectdetect/src/detection_based_tracker.cpp: made unique_lock<mutex> local to each function
samples/cpp/dbt_face_detection.cpp: fixed warnings on loop in Visual Studio",samples/cpp/dbt_face_detection.cpp,+,"printf(""Error: Cannot load %s\n"", cascadeFrontalfilename.c_str());",59,download/opencv_opencv184.cpp
049a8949865f23cac30b086e129fd5559b846593,"fixed detection_based_tracker on visual studio 2013 and later
modules/objectdetect/src/detection_based_tracker.cpp: made unique_lock<mutex> local to each function
samples/cpp/dbt_face_detection.cpp: fixed warnings on loop in Visual Studio",samples/cpp/dbt_face_detection.cpp,+,"printf(""Error: Cannot load %s\n"", cascadeFrontalfilename.c_str());",67,download/opencv_opencv184.cpp
049a8949865f23cac30b086e129fd5559b846593,"fixed detection_based_tracker on visual studio 2013 and later
modules/objectdetect/src/detection_based_tracker.cpp: made unique_lock<mutex> local to each function
samples/cpp/dbt_face_detection.cpp: fixed warnings on loop in Visual Studio",samples/cpp/dbt_face_detection.cpp,-,"printf(""This sample works for UNIX or ANDROID only\n"");",109,download/opencv_opencv184.cpp
049a8949865f23cac30b086e129fd5559b846593,"fixed detection_based_tracker on visual studio 2013 and later
modules/objectdetect/src/detection_based_tracker.cpp: made unique_lock<mutex> local to each function
samples/cpp/dbt_face_detection.cpp: fixed warnings on loop in Visual Studio",samples/cpp/dbt_face_detection.cpp,+,"printf(""This sample works for UNIX or ANDROID or Visual Studio 2013+ only\n"");",109,download/opencv_opencv184.cpp
4c667727839a678712f07bccefec1586df435969,Merge pull request #7516 from sovrasov:find_contours_fix,modules/imgproc/test/test_contours.cpp,+,"ASSERT_TRUE(norm(img - img_draw_contours, NORM_INF) == 0.0);",507,download/opencv_opencv185.cpp
2b7866f21bde3b2d3c0c142bfbcd7e83943a3aaa,Merge pull request #7503 from pengli:box_filter_v2,modules/imgproc/src/smooth.cpp,+,"sprintf(build_opts, ""-D %s %s"", borderMap[borderType], normalize ? ""-D NORMALIZE"" : """");",1329,download/opencv_opencv186.cpp
2b7866f21bde3b2d3c0c142bfbcd7e83943a3aaa,Merge pull request #7503 from pengli:box_filter_v2,modules/imgproc/src/smooth.cpp,+,"idxArg = kernel.set(idxArg, ocl::KernelArg::PtrWriteOnly(dst));",1343,download/opencv_opencv186.cpp
b077d6a192e0797283bb71b684817dbeeb0b57ff,Merge pull request #7549 from StevenPuttemans:add_sample_content,samples/gpu/performance/tests.cpp,-,"if (!cap.isOpened()) throw runtime_error(""can't open ../data/768x576.avi"");",1198,download/opencv_opencv187.cpp
b077d6a192e0797283bb71b684817dbeeb0b57ff,Merge pull request #7549 from StevenPuttemans:add_sample_content,samples/gpu/performance/tests.cpp,+,"if (!cap.isOpened()) throw runtime_error(""can't open ../data/vtest.avi"");",1198,download/opencv_opencv187.cpp
7f2ac764ae31dbea97e45f565f555ce60a799067,Merge pull request #7561 from paroj:winvisible,modules/highgui/src/window_QT.cpp,+,"CV_Error( CV_StsNullPtr, ""NULL guiReceiver (please create a window)"" );",143,download/opencv_opencv188.cpp
358ec04413b5796883ae0007a20539c9c3e0383d,"highgui: add property WND_PROP_VISIBLE 

checks whether the window exists and is visible. On QT closing a window
merley hides it, so the common hack for checking whether a window exists

exists = cv2.getWindowProperty(.., 0) >= 0

does not work.",modules/highgui/src/window_QT.cpp,+,"CV_Error( CV_StsNullPtr, ""NULL guiReceiver (please create a window)"" );",143,download/opencv_opencv189.cpp
5728f796f6860246134066b4338c31c612adde77,updating python tutorials + providing necessary data,samples/gpu/performance/tests.cpp,-,"if (!cap.isOpened()) throw runtime_error(""can't open ../data/768x576.avi"");",1198,download/opencv_opencv190.cpp
5728f796f6860246134066b4338c31c612adde77,updating python tutorials + providing necessary data,samples/gpu/performance/tests.cpp,+,"if (!cap.isOpened()) throw runtime_error(""can't open ../data/vtest.avi"");",1198,download/opencv_opencv190.cpp
3607da9f6b769d1e8c26c9b118747410461526de,"ocl kernel performance optimization for box filter

The optimization is for CV_8UC1 format and 3x3 box filter,
it is 15%~87% faster than current ocl kernel with below perf test

./modules/ts/misc/run.py -t imgproc --gtest_filter=OCL_BlurFixture*

Also add test cases for this ocl kernel.

Signed-off-by: Li Peng <peng.li@intel.com>",modules/imgproc/src/smooth.cpp,+,"sprintf(build_opts, ""-D %s %s"", borderMap[borderType], normalize ? ""-D NORMALIZE"" : """");",1329,download/opencv_opencv191.cpp
3607da9f6b769d1e8c26c9b118747410461526de,"ocl kernel performance optimization for box filter

The optimization is for CV_8UC1 format and 3x3 box filter,
it is 15%~87% faster than current ocl kernel with below perf test

./modules/ts/misc/run.py -t imgproc --gtest_filter=OCL_BlurFixture*

Also add test cases for this ocl kernel.

Signed-off-by: Li Peng <peng.li@intel.com>",modules/imgproc/src/smooth.cpp,+,"idxArg = kernel.set(idxArg, ocl::KernelArg::PtrWriteOnly(dst));",1343,download/opencv_opencv191.cpp
118c1b4ace2641e55d2b537c9f8515b72165dc73,fixed detection_based_tracker on visual studio 2013 and later,samples/cpp/dbt_face_detection.cpp,+,"printf(""Error: Cannot load %s\n"", cascadeFrontalfilename.c_str());",59,download/opencv_opencv192.cpp
118c1b4ace2641e55d2b537c9f8515b72165dc73,fixed detection_based_tracker on visual studio 2013 and later,samples/cpp/dbt_face_detection.cpp,+,"printf(""Error: Cannot load %s\n"", cascadeFrontalfilename.c_str());",67,download/opencv_opencv192.cpp
118c1b4ace2641e55d2b537c9f8515b72165dc73,fixed detection_based_tracker on visual studio 2013 and later,samples/cpp/dbt_face_detection.cpp,-,"printf(""This sample works for UNIX or ANDROID only\n"");",111,download/opencv_opencv192.cpp
118c1b4ace2641e55d2b537c9f8515b72165dc73,fixed detection_based_tracker on visual studio 2013 and later,samples/cpp/dbt_face_detection.cpp,+,"printf(""This sample works for UNIX or ANDROID or Visual Studio 2013+ only\n"");",111,download/opencv_opencv192.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,114,download/opencv_opencv193.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,136,download/opencv_opencv193.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,158,download/opencv_opencv193.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,180,download/opencv_opencv193.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,202,download/opencv_opencv193.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,224,download/opencv_opencv193.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/accumulate.cpp,+,internal::assertSupportedConfiguration();,52,download/opencv_opencv194.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/accumulate.cpp,+,internal::assertSupportedConfiguration();,231,download/opencv_opencv194.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/accumulate.cpp,+,internal::assertSupportedConfiguration();,376,download/opencv_opencv194.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,109,download/opencv_opencv195.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,145,download/opencv_opencv195.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,181,download/opencv_opencv195.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,231,download/opencv_opencv195.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,314,download/opencv_opencv195.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,350,download/opencv_opencv195.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,386,download/opencv_opencv195.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,422,download/opencv_opencv195.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,457,download/opencv_opencv195.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/add_weighted.cpp,+,internal::assertSupportedConfiguration();                 \,232,download/opencv_opencv196.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/add_weighted.cpp,+,internal::assertSupportedConfiguration();                 \,252,download/opencv_opencv196.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,119,download/opencv_opencv197.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,164,download/opencv_opencv197.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,186,download/opencv_opencv197.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,208,download/opencv_opencv197.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlur3x3Supported(size, border));",59,download/opencv_opencv198.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurU8Supported(size, cn, borderType));",196,download/opencv_opencv198.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurU8Supported(size, cn, borderType));",506,download/opencv_opencv198.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/blur.cpp,+,internal::assertSupportedConfiguration(false);//Unsupported channels number,745,download/opencv_opencv198.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurF32Supported(size, cn, borderType));",831,download/opencv_opencv198.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurS32Supported(size, cn, borderType));",1093,download/opencv_opencv198.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration(isCanny3x3Supported(size));,667,download/opencv_opencv199.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration(isCanny3x3Supported(size));,694,download/opencv_opencv199.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration();,721,download/opencv_opencv199.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration();,750,download/opencv_opencv199.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();,50,download/opencv_opencv200.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();,102,download/opencv_opencv200.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();,154,download/opencv_opencv200.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                           \,289,download/opencv_opencv200.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                           \,330,download/opencv_opencv200.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                           \,388,download/opencv_opencv200.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                        \,444,download/opencv_opencv200.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                        \,458,download/opencv_opencv200.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();                                                               \,137,download/opencv_opencv201.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();                                                               \,178,download/opencv_opencv201.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();                                                               \,212,download/opencv_opencv201.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();,241,download/opencv_opencv201.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();,318,download/opencv_opencv201.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/cmp.cpp,+,internal::assertSupportedConfiguration();             \,280,download/opencv_opencv202.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/cmp.cpp,+,internal::assertSupportedConfiguration();             \,296,download/opencv_opencv202.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/common.cpp,+,void assertSupportedConfiguration(bool parametersSupported),58,download/opencv_opencv203.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/common.cpp,+,internal::assertSupportedConfiguration(false);,103,download/opencv_opencv203.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/convert.cpp,+,internal::assertSupportedConfiguration();                               \,51,download/opencv_opencv204.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/convert.cpp,+,internal::assertSupportedConfiguration();                               \,87,download/opencv_opencv204.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/convert_depth.cpp,+,internal::assertSupportedConfiguration();,262,download/opencv_opencv205.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/convert_depth.cpp,+,internal::assertSupportedConfiguration();,315,download/opencv_opencv205.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/convolution.cpp,+,"internal::assertSupportedConfiguration(isConvolutionSupported(size, ksize, border));",82,download/opencv_opencv206.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,49,download/opencv_opencv207.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,115,download/opencv_opencv207.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,181,download/opencv_opencv207.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,242,download/opencv_opencv207.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,300,download/opencv_opencv207.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,148,download/opencv_opencv208.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,308,download/opencv_opencv208.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,454,download/opencv_opencv208.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,611,download/opencv_opencv208.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/dot_product.cpp,+,internal::assertSupportedConfiguration();,48,download/opencv_opencv209.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/dot_product.cpp,+,internal::assertSupportedConfiguration();,126,download/opencv_opencv209.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/dot_product.cpp,+,internal::assertSupportedConfiguration();,204,download/opencv_opencv209.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/fast.cpp,+,internal::assertSupportedConfiguration();,221,download/opencv_opencv210.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,88,download/opencv_opencv211.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,169,download/opencv_opencv211.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,249,download/opencv_opencv211.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,329,download/opencv_opencv211.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,388,download/opencv_opencv211.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/flip.cpp,+,"internal::assertSupportedConfiguration(isFlipSupported(flipMode, elemSize));",177,download/opencv_opencv212.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur3x3Supported(size, border));",58,download/opencv_opencv213.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur3x3MarginSupported(size, border, borderMargin));",183,download/opencv_opencv213.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",214,download/opencv_opencv213.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",597,download/opencv_opencv213.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",725,download/opencv_opencv213.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",939,download/opencv_opencv213.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/in_range.cpp,+,internal::assertSupportedConfiguration();                \,171,download/opencv_opencv214.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/in_range.cpp,+,internal::assertSupportedConfiguration();                \,184,download/opencv_opencv214.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/integral.cpp,+,internal::assertSupportedConfiguration();,48,download/opencv_opencv215.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/integral.cpp,+,internal::assertSupportedConfiguration();,144,download/opencv_opencv215.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacian3x3Supported(size, border));",59,download/opencv_opencv216.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacianOpenCVSupported(size, border));",202,download/opencv_opencv216.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacianOpenCVSupported(size, border));",332,download/opencv_opencv216.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacianOpenCVSupported(size, border));",466,download/opencv_opencv216.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/magnitude.cpp,+,internal::assertSupportedConfiguration();,119,download/opencv_opencv217.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/magnitude.cpp,+,internal::assertSupportedConfiguration();,142,download/opencv_opencv217.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/meanstddev.cpp,+,internal::assertSupportedConfiguration();,50,download/opencv_opencv218.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/meanstddev.cpp,+,internal::assertSupportedConfiguration();,77,download/opencv_opencv218.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/median_filter.cpp,+,"internal::assertSupportedConfiguration(isMedianFilter3x3Supported(size, numChannels));",127,download/opencv_opencv219.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/min_max.cpp,+,internal::assertSupportedConfiguration();                          \,109,download/opencv_opencv220.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/min_max.cpp,+,internal::assertSupportedConfiguration();     \,124,download/opencv_opencv220.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,124,download/opencv_opencv221.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,142,download/opencv_opencv221.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,160,download/opencv_opencv221.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,178,download/opencv_opencv221.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,196,download/opencv_opencv221.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,215,download/opencv_opencv221.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,348,download/opencv_opencv221.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,494,download/opencv_opencv221.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,626,download/opencv_opencv221.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,781,download/opencv_opencv221.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,1172,download/opencv_opencv221.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,1259,download/opencv_opencv221.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/morph.cpp,+,"internal::assertSupportedConfiguration(isMorph3x3Supported(size, border));",241,download/opencv_opencv222.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/morph.cpp,+,"internal::assertSupportedConfiguration(isMorph3x3Supported(size, border));",263,download/opencv_opencv222.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/morph.cpp,+,"inline void morphology(const Size2D &ssize, u32 cn,",511,download/opencv_opencv222.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/morph.cpp,+,internal::assertSupportedConfiguration(ssize.width > 0 && ssize.height > 0 &&,682,download/opencv_opencv222.cpp
5ebdf6cedd0ab68b3a9dc3f83c037f08c54d02c4,"Merge pull request #2 from opencv/master

update to master",3rdparty/carotene/src/morph.cpp,+,internal::assertSupportedConfiguration(ssize.width > 0 && ssize.height > 0 &&,709,download/opencv_opencv222.cpp
dc9602ee84f64eea266e1835f824fc5b7745a87e,Merge pull request #7545 from sovrasov:flood_fill_fix_mask_value,modules/imgproc/test/test_floodfill.cpp,+,"ASSERT_TRUE(norm(mask.rowRange(1, n-1).colRange(1, n-1), NORM_INF) == 1.);",542,download/opencv_opencv223.cpp
34df4ae02a02189abf87fe2486aaa03459bb4569,"Add a regression test, fix documentation",modules/imgproc/test/test_contours.cpp,+,"ASSERT_TRUE(norm(img - img_draw_contours, NORM_INF) == 0.0);",507,download/opencv_opencv224.cpp
f5592fd21b8dd881fcf31e91881ca140458ed7e8,Fix wrong default mask value in floodFill,modules/imgproc/test/test_floodfill.cpp,+,"ASSERT_TRUE(norm(mask.rowRange(1, n-1).colRange(1, n-1), NORM_INF) == 1.);",542,download/opencv_opencv225.cpp
6f7bf653f7f848619d6f37eda350cec48281212c,"Add 90 degree rotation methods. This provides a quick simple way of doing 90 degree rotations.
Also fix warnings that show up on other compilers in test builds.",modules/core/src/copy.cpp,+,CV_Assert(_src.dims() <= 2);,853,download/opencv_opencv226.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/calib3d/src/ptsetreg.cpp,+,"void computeError( InputArray _m1, InputArray _m2, InputArray _model, OutputArray _err ) const",566,download/opencv_opencv227.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/calib3d/src/ptsetreg.cpp,+,CV_Assert( count > 0 );,574,download/opencv_opencv227.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/calib3d/src/ptsetreg.cpp,+,CV_Assert( J.isContinuous() && J.cols == 6 );,673,download/opencv_opencv227.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/calib3d/src/ptsetreg.cpp,+,CV_Assert( J.isContinuous() && J.cols == 4 );,731,download/opencv_opencv227.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/calib3d/src/ptsetreg.cpp,+,CV_Assert( count >= 0 && to.checkVector(2) == count );,801,download/opencv_opencv227.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/calib3d/src/ptsetreg.cpp,+,"CV_Error(Error::StsBadArg, ""Unknown or unsupported robust estimation method"");",829,download/opencv_opencv227.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/calib3d/src/ptsetreg.cpp,+,CV_Assert( count >= 0 && to.checkVector(2) == count );,868,download/opencv_opencv227.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/calib3d/src/ptsetreg.cpp,+,"CV_Error(Error::StsBadArg, ""Unknown or unsupported robust estimation method"");",896,download/opencv_opencv227.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/stitching/src/matchers.cpp,+,CV_Assert(rois.size() == images.total());,372,download/opencv_opencv228.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/stitching/src/motion_estimators.cpp,+,CV_Assert(cameras[i].R.type() == CV_32F);,655,download/opencv_opencv229.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/stitching/src/motion_estimators.cpp,+,void BundleAdjusterAffine::calcError(Mat &err),683,download/opencv_opencv229.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/stitching/src/motion_estimators.cpp,+,calcError(err1_);,746,download/opencv_opencv229.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/stitching/src/motion_estimators.cpp,+,calcError(err2_);,748,download/opencv_opencv229.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/stitching/src/motion_estimators.cpp,+,CV_Assert(cameras[i].R.type() == CV_32F);,763,download/opencv_opencv229.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/stitching/src/motion_estimators.cpp,+,void BundleAdjusterAffinePartial::calcError(Mat &err),802,download/opencv_opencv229.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/stitching/src/motion_estimators.cpp,+,calcError(err1_);,876,download/opencv_opencv229.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/stitching/src/motion_estimators.cpp,+,calcError(err2_);,878,download/opencv_opencv229.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/stitching/src/stitcher.cpp,+,"CV_Error(Error::StsBadArg, ""Invalid stitching mode. Must be one of Stitcher::Mode"");",114,download/opencv_opencv230.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/stitching/src/warpers.cpp,+,"CV_Assert(H.size() == Size(3, 3) && H.type() == CV_32F);",261,download/opencv_opencv231.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/stitching/test/test_matchers.cpp,+,"ASSERT_EQ(countNonZero(diff_descriptors), 0);",98,download/opencv_opencv232.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/stitching/test/test_matchers.cpp,+,"ASSERT_EQ(serial_features.img_size, para_features[i].img_size);",99,download/opencv_opencv232.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",modules/stitching/test/test_matchers.cpp,+,"ASSERT_EQ(serial_features.keypoints.size(), para_features[i].keypoints.size());",100,download/opencv_opencv232.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",samples/cpp/stitching_detailed.cpp,-,"LOGLN(""Initial intrinsics #"" << indices[i]+1 << "":\n"" << cameras[i].K());",559,download/opencv_opencv233.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",samples/cpp/stitching_detailed.cpp,+,"LOGLN(""Initial camera intrinsics #"" << indices[i]+1 << "":\nK:\n"" << cameras[i].K() << ""\nR:\n"" << cameras[i].R);",559,download/opencv_opencv233.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",samples/cpp/stitching_detailed.cpp,-,"LOGLN(""Camera #"" << indices[i]+1 << "":\n"" << cameras[i].K());",591,download/opencv_opencv233.cpp
c17afe0fab61bb11452b36fb94eaeb405293e086,"Merge pull request #6933 from hrnr:gsoc_all

[GSOC] New camera model for stitching pipeline

* implement estimateAffine2D

estimates affine transformation using robust RANSAC method.

* uses RANSAC framework in calib3d
* includes accuracy test
* uses SVD decomposition for solving 3 point equation

* implement estimateAffinePartial2D

estimates limited affine transformation

* includes accuracy test

* stitching: add affine matcher

initial version of matcher that estimates affine transformation

* stitching: added affine transform estimator

initial version of estimator that simply chain transformations in homogeneous coordinates

* calib3d: rename estimateAffine3D test

test Calib3d_EstimateAffineTransform rename to Calib3d_EstimateAffine3D. This is more descriptive and prevents confusion with estimateAffine2D tests.

* added perf test for estimateAffine functions

tests both estimateAffine2D and estimateAffinePartial2D

* calib3d: compare error in square in estimateAffine2D

* incorporates fix from #6768

* rerun affine estimation on inliers

* stitching: new API for parallel feature finding

due to ABI breakage new functionality is added to `FeaturesFinder2`, `SurfFeaturesFinder2` and `OrbFeaturesFinder2`

* stitching: add tests for parallel feature find API

* perf test (about linear speed up)
* accuracy test compares results with serial version

* stitching: use dynamic_cast to overcome ABI issues

adding parallel API to FeaturesFinder breaks ABI. This commit uses dynamic_cast and hardcodes thread-safe finders to avoid breaking ABI.

This should be replaced by proper method similar to FeaturesMatcher on next ABI break.

* use estimateAffinePartial2D in AffineBestOf2NearestMatcher

* add constructor to AffineBestOf2NearestMatcher

* allows to choose between full affine transform and partial affine transform. Other params are the as for BestOf2NearestMatcher
* added protected field

* samples: stitching_detailed support affine estimator and matcher

* added new flags to choose matcher and estimator

* stitching: rework affine matcher

represent transformation in homogeneous coordinates

affine matcher: remove duplicite code
rework flow to get rid of duplicite code

affine matcher: do not center points to (0, 0)
it is not needed for affine model. it should not affect estimation in any way.

affine matcher: remove unneeded cv namespacing

* stitching: add stub bundle adjuster

* adds stub bundle adjuster that does nothing
* can be used in place of standard bundle adjusters to omit bundle adjusting step

* samples: stitching detailed, support no budle adjust

* uses new NoBundleAdjuster

* added affine warper

* uses R to get whole affine transformation and propagates rotation and translation to plane warper

* add affine warper factory class

* affine warper: compensate transformation

* samples: stitching_detailed add support for affine warper

* add Stitcher::create method

this method follows similar constructor methods and returns smart pointer. This allows constructing Stitcher according to OpenCV guidelines.

* supports multiple stitcher configurations (PANORAMA and SCANS) for convenient setup
* returns cv::Ptr

* stitcher: dynamicaly determine correct estimator

we need to use affine estimator for affine matcher

* preserves ABI (but add hints for ABI 4)
* uses dynamic_cast hack to inject correct estimator

* sample stitching: add support for multiple modes

shows how to use different configurations of stitcher easily (panorama stitching and scans affine model)

* stitcher: find features in parallel

use new FeatureFinder API to find features in parallel. Parallelized using TBB.

* stitching: disable parallel feature finding for OCL

it does not bring much speedup to run features finder in parallel when OpenCL is enabled, because finder needs to wait for OCL device.

Also, currently ORB is not thread-safe when OCL is enabled.

* stitching: move matcher tests

move matchers tests perf_stich.cpp -> perf_matchers.cpp

* stitching: add affine stiching integration test

test basic affine stitching (SCANS mode of stitcher) with images that have only translation between them

* enable surf for stitching tests

stitching.b12 test was failing with surf

investigated the issue, surf is producing good result. Transformation is only slightly different from ORB, so that resulting pano does not exactly match ORB's result. That caused sanity check to fail.

* added size checks similar to other tests
* sanity check will be applied only for ORB

* stitching: fix wrong estimator choice

if case was exactly wrong, estimators were chosen wrong

added logging for estimated transformation

* enable surf for matchers stitching tests

* enable SURF
* rework sanity checking. Check estimated transform instead of matches. Est. transform should be more stable and comparable between SURF and ORB.
* remove regression checking for VectorFeatures tests. It has a lot if data andtest is the same as previous except it test different vector size for performance, so sanity checking does not add any value here. Added basic sanity asserts instead.

* stitching tests: allow relative error for transform

* allows .01 relative error for estimated homography sanity check in stitching matchers tests
* fix VS warning

stitching tests: increase relative error

increase relative error to make it pass on all platforms (results are still good).

stitching test: allow bigger relative error

transformation can differ in small values (with small absolute difference, but large relative difference). transformation output still looks usable for all platforms. This difference affects only mac and windows, linux passes fine with small difference.

* stitching: add tests for affine matcher

uses s1, s2 images. added also new sanity data.

* stitching tests: use different data for matchers tests

this data should yeild more stable transformation (it has much more matches, especially for surf). Sanity data regenerated.

* stitching test: rework tests for matchers

* separated rotation and translations as they are different by scale.
* use appropriate absolute error for them separately. (relative error does not work for values near zero.)

* stitching: fix affine warper compensation

calculation of rotation and translation extracted for plane warper was wrong

* stitching test: enable surf for opencl integration tests

* enable SURF with correct guard (HAVE_OPENCV_XFEATURES2D)
* add OPENCL guard and correct namespace as usual for opencl tests

* stitching: add ocl accuracy test for affine warper

test consistent results with ocl on and off

* stitching: add affine warper ocl perf test

add affine warper to existing warper perf tests. Added new sanity data.

* stitching: do not overwrite inliers in affine matcher

* estimation is run second time on inliers only, inliers produces in second run will not be therefore correct for all matches

* calib3d: add Levenberg–Marquardt refining to estimateAffine2D* functions

this adds affine Levenberg–Marquardt refining to estimateAffine2D functions similar to what is done in findHomography.

implements Levenberg–Marquardt refinig for both full affine and partial affine transformations.

* stitching: remove reestimation step in affine matcher

reestimation step is not needed. estimateAffine2D* functions are running their own reestimation on inliers using the Levenberg-Marquardt algorithm, which is better than simply rerunning RANSAC on inliers.

* implement partial affine bundle adjuster

bundle adjuster that expect affine transform with 4DOF. Refines parameters for all cameras together.

stitching: fix bug in BundleAdjusterAffinePartial

* use the invers properly
* use static buffer for invers to speed it up

* samples: add affine bundle adjuster option to stitching_detailed

* add support for using affine bundle adjuster with 4DOF
* improve logging of initial intristics

* sttiching: add affine bundle adjuster test

* fix build warnings

* stitching: increase limit on sanity check

prevents spurious test failures on mac. values are still pretty fine.

* stitching: set affine bundle adjuster for SCANS mode

* fix bug with AffineBestOf2NearestMatcher (we want to select affine partial mode)
* select right bundle adjuster

* stitching: increase error bound for matcher tests

* this prevents failure on mac. tranformation is still ok.

* stitching: implement affine bundle adjuster

* implements affine bundle adjuster that is using full affine transform
* existing test case modified to test both affinePartial an full affine bundle adjuster

* add stitching tutorial

* show basic usage of stitching api (Stitcher class)

* stitching: add more integration test for affine stitching

* added new datasets to existing testcase
* removed unused include

* calib3d: move `haveCollinearPoints` to common header

* added comment to make that this also checks too close points

* calib3d: redone checkSubset for estimateAffine* callback

* use common function to check collinearity
* this also ensures that point will not be too close to each other

* calib3d: change estimateAffine* functions API

* more similar to `findHomography`, `findFundamentalMat`, `findEssentialMat` and similar
* follows standard recommended semantic INPUTS, OUTPUTS, FLAGS
* allows to disable refining
* supported LMEDS robust method (tests yet to come) along with RANSAC
* extended docs with some tips

* calib3d: rewrite estimateAffine2D test

* rewrite in googletest style
* parametrize to test both robust methods (RANSAC and LMEDS)
* get rid of boilerplate

* calib3d: rework estimateAffinePartial2D test

* rework in googletest style
* add testing for LMEDS

* calib3d: rework estimateAffine*2D perf test

* test for LMEDS speed
* test with/without Levenberg-Marquart
* remove sanity checking (this is covered by accuracy tests)

* calib3d: improve estimateAffine*2D tests

* test transformations in loop
* improves test by testing more potential transformations

* calib3d: rewrite kernels for estimateAffine*2D functions

* use analytical solution instead of SVD
* this version is faster especially for smaller amount of points

* calib3d: tune up perf of estimateAffine*2D functions

* avoid copying inliers
* avoid converting input points if not necessary
* check only `from` point for collinearity, as `to` does not affect stability of transform

* tutorials: add commands examples to stitching tutorials

* add some examples how to run stitcher sample code
* mention stitching_detailed.cpp

* calib3d: change computeError for estimateAffine*2D

* do error computing in floats instead of doubles

this have required precision + we were storing the result in float anyway. This make code faster and allows auto-vectorization by smart compilers.

* documentation: mention estimateAffine*2D function

* refer to new functions on appropriate places
* prefer estimateAffine*2D over estimateRigidTransform

* stitching: add camera models documentations

* mention camera models in module documentation to give user a better overview and reduce confusion",samples/cpp/stitching_detailed.cpp,+,"LOGLN(""Camera #"" << indices[i]+1 << "":\nK:\n"" << cameras[i].K() << ""\nR:\n"" << cameras[i].R);",591,download/opencv_opencv233.cpp
e77bc24b96d485cee86c718e386b4975e1295d32,"Merge pull request #7518 from ArkadiuszRaj:aravis-buffer-status

Aravis several updates

* Fix adressing camera with id=0

* Aravis buffer property control & status added

* Modify of autoexposure algorith, ream frame ID from aravis + new properites

* Change of macro name

* VideoCapture now returns no frame on camera disconnecion

* Allow aravis-0.4 usage, proper camera object release.",modules/videoio/src/cap_aravis.cpp,-,double ev = log( d / dmid ) / log(2);,381,download/opencv_opencv234.cpp
e77bc24b96d485cee86c718e386b4975e1295d32,"Merge pull request #7518 from ArkadiuszRaj:aravis-buffer-status

Aravis several updates

* Fix adressing camera with id=0

* Aravis buffer property control & status added

* Modify of autoexposure algorith, ream frame ID from aravis + new properites

* Change of macro name

* VideoCapture now returns no frame on camera disconnecion

* Allow aravis-0.4 usage, proper camera object release.",modules/videoio/src/cap_aravis.cpp,+,ev = log( d / dmid ) / log(2);,387,download/opencv_opencv234.cpp
ee4b78fcce8df572e5a671886b6285fcf647022f,test: change condition in Photo_Decolor,modules/photo/test/test_decolor.cpp,-,"ASSERT_FALSE(original.channels()!=3) << ""Load color input image "" << original_path;",58,download/opencv_opencv235.cpp
ee4b78fcce8df572e5a671886b6285fcf647022f,test: change condition in Photo_Decolor,modules/photo/test/test_decolor.cpp,+,"ASSERT_EQ(3, original.channels()) << ""Load color input image "" << original_path;",58,download/opencv_opencv235.cpp
4439ba09f973453b1b34f68c5d2bcbde56aac09d,test: update condition for Calib3d_StereoCalibrate,modules/calib3d/test/test_cameracalibration.cpp,-,"ts->printf( cvtest::TS::LOG, ""Points reprojected with a matrix Q and points reconstructed by triangulation are different, testcase %d\n"", testcase);",1758,download/opencv_opencv236.cpp
4439ba09f973453b1b34f68c5d2bcbde56aac09d,test: update condition for Calib3d_StereoCalibrate,modules/calib3d/test/test_cameracalibration.cpp,+,"ts->printf( cvtest::TS::LOG, ""Points reprojected with a matrix Q and points reconstructed by triangulation are different (tolerance=%g, failed=%d), testcase %d\n"",",1758,download/opencv_opencv236.cpp
7a9ed39655d192d6f9177205fbff40769b729e29,test: update HoughLines perf test,modules/imgproc/perf/perf_houghLines.cpp,+,"printf(""%dx%d: %d lines\n"", image.cols, image.rows, (int)lines.size());",55,download/opencv_opencv237.cpp
7793299e53347d4cd920c2f6e2c5bdb1514f163d,Merge pull request #7507 from vrabaud:iplimage_overflow,modules/core/src/array.cpp,+,"CV_Error( CV_StsNoMem, ""Overflow for imageSize"" );",839,download/opencv_opencv238.cpp
7793299e53347d4cd920c2f6e2c5bdb1514f163d,Merge pull request #7507 from vrabaud:iplimage_overflow,modules/core/src/array.cpp,+,"CV_Error( CV_StsNoMem, ""Overflow for imageSize"" );",951,download/opencv_opencv238.cpp
7793299e53347d4cd920c2f6e2c5bdb1514f163d,Merge pull request #7507 from vrabaud:iplimage_overflow,modules/core/src/array.cpp,+,"CV_Error( CV_StsNoMem, ""Overflow for imageSize"" );",2971,download/opencv_opencv238.cpp
a89aa8c90a625c78e40f4288d145996d9cda3599,Fix imageSize overflow in IplImage,modules/core/src/array.cpp,+,"CV_Error( CV_StsNoMem, ""Overflow for imageSize"" );",839,download/opencv_opencv239.cpp
a89aa8c90a625c78e40f4288d145996d9cda3599,Fix imageSize overflow in IplImage,modules/core/src/array.cpp,+,"CV_Error( CV_StsNoMem, ""Overflow for imageSize"" );",951,download/opencv_opencv239.cpp
a89aa8c90a625c78e40f4288d145996d9cda3599,Fix imageSize overflow in IplImage,modules/core/src/array.cpp,+,"CV_Error( CV_StsNoMem, ""Overflow for imageSize"" );",2971,download/opencv_opencv239.cpp
e15acd4fcf9419df79045c25ebac796139aaaa5a,Merge pull request #7508 from alalek:fix_optflow_test,modules/video/test/test_optflowpyrlk.cpp,+,"ts->printf( cvtest::TS::LOG, ""NAN tracking result with status != 0 (%d times)\n"", merr_nan );",209,download/opencv_opencv240.cpp
5dfb810327d23db786021e4513e02b1c3bc91515,video: fix optflow test: NAN results shouldn't bypass checks,modules/video/test/test_optflowpyrlk.cpp,+,"ts->printf( cvtest::TS::LOG, ""NAN tracking result with status != 0 (%d times)\n"", merr_nan );",209,download/opencv_opencv241.cpp
27c8f8a1d49d704baff08b49839f60d0d7612821,Merge pull request #7443 from Tytan:akaze,modules/stitching/src/matchers.cpp,+,CV_Assert((image.type() == CV_8UC3) || (image.type() == CV_8UC1));,479,download/opencv_opencv242.cpp
18327aed30a6959607d8732462f54f080b0a5c39,Merge pull request #7496 from abratchik:java.wrapper.fix.3.1,modules/features2d/src/feature2d.cpp,+,void Feature2D::write( const String& fileName ) const,157,download/opencv_opencv243.cpp
18327aed30a6959607d8732462f54f080b0a5c39,Merge pull request #7496 from abratchik:java.wrapper.fix.3.1,modules/features2d/src/feature2d.cpp,+,write(fs);,160,download/opencv_opencv243.cpp
18327aed30a6959607d8732462f54f080b0a5c39,Merge pull request #7496 from abratchik:java.wrapper.fix.3.1,modules/features2d/src/feature2d.cpp,+,void Feature2D::write( FileStorage&) const,169,download/opencv_opencv243.cpp
4ea27061eeada492f7da1e6e80d6b754c11ab155,"Merge pull request #7472 from ArkadiuszRaj:aravis-autoexposure

Aravis SDK: Basic software based autoexposure control

* Basic software based autoexposure control

* Aravis autoexposure: skip frame taken while changing exposure setup",modules/videoio/src/cap_aravis.cpp,+,double ev = log( d / dmid ) / log(2);,353,download/opencv_opencv244.cpp
adbb1471fcb55f8dbcf454d296016183fe8b078e,fix regression issues in Feature2D and DescriptorMatcher interfaces,modules/features2d/src/feature2d.cpp,+,void Feature2D::write( const String& fileName ) const,157,download/opencv_opencv245.cpp
adbb1471fcb55f8dbcf454d296016183fe8b078e,fix regression issues in Feature2D and DescriptorMatcher interfaces,modules/features2d/src/feature2d.cpp,+,write(fs);,160,download/opencv_opencv245.cpp
adbb1471fcb55f8dbcf454d296016183fe8b078e,fix regression issues in Feature2D and DescriptorMatcher interfaces,modules/features2d/src/feature2d.cpp,+,void Feature2D::write( FileStorage&) const,169,download/opencv_opencv245.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,-,"CV_Error(CV_StsNotImplemented, ""The library is compiled without QT support"");",456,download/opencv_opencv246.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",456,download/opencv_opencv246.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,-,"CV_Error(CV_StsNotImplemented, ""The library is compiled without QT support"");",462,download/opencv_opencv246.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",462,download/opencv_opencv246.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",467,download/opencv_opencv246.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,-,"CV_Error(CV_StsNotImplemented, ""The library is compiled without QT support"");",472,download/opencv_opencv246.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",472,download/opencv_opencv246.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,-,"CV_Error(CV_StsNotImplemented, ""The library is compiled without QT support"");",477,download/opencv_opencv246.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",477,download/opencv_opencv246.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,-,"CV_Error(CV_StsNotImplemented, ""The library is compiled without QT support"");",482,download/opencv_opencv246.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",482,download/opencv_opencv246.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,-,"CV_Error(CV_StsNotImplemented, ""The library is compiled without QT support"");",488,download/opencv_opencv246.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",488,download/opencv_opencv246.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,-,"CV_Error(CV_StsNotImplemented, ""The library is compiled without QT support"");",493,download/opencv_opencv246.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",493,download/opencv_opencv246.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,-,"CV_Error(CV_StsNotImplemented, ""The library is compiled without QT support"");",498,download/opencv_opencv246.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",498,download/opencv_opencv246.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,-,"CV_Error(CV_StsNotImplemented, ""The library is compiled without QT support"");",503,download/opencv_opencv246.cpp
de85680a6aa5d234c150e3c4ae9a98cc12ed484c,Merge pull request #7483 from paroj:addtext,modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",503,download/opencv_opencv246.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,-,"CV_Error(CV_StsNotImplemented, ""The library is compiled without QT support"");",456,download/opencv_opencv247.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",456,download/opencv_opencv247.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,-,"CV_Error(CV_StsNotImplemented, ""The library is compiled without QT support"");",462,download/opencv_opencv247.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",462,download/opencv_opencv247.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",467,download/opencv_opencv247.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,-,"CV_Error(CV_StsNotImplemented, ""The library is compiled without QT support"");",472,download/opencv_opencv247.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",472,download/opencv_opencv247.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,-,"CV_Error(CV_StsNotImplemented, ""The library is compiled without QT support"");",477,download/opencv_opencv247.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",477,download/opencv_opencv247.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,-,"CV_Error(CV_StsNotImplemented, ""The library is compiled without QT support"");",482,download/opencv_opencv247.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",482,download/opencv_opencv247.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,-,"CV_Error(CV_StsNotImplemented, ""The library is compiled without QT support"");",488,download/opencv_opencv247.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",488,download/opencv_opencv247.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,-,"CV_Error(CV_StsNotImplemented, ""The library is compiled without QT support"");",493,download/opencv_opencv247.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",493,download/opencv_opencv247.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,-,"CV_Error(CV_StsNotImplemented, ""The library is compiled without QT support"");",498,download/opencv_opencv247.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",498,download/opencv_opencv247.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,-,"CV_Error(CV_StsNotImplemented, ""The library is compiled without QT support"");",503,download/opencv_opencv247.cpp
8cc09f17844290b40532bf0948bd724e7db88dec,"highgui: allow wrapping cv::addText

also correctly forward spacing parameter in fontQt",modules/highgui/src/window.cpp,+,"CV_Error(CV_StsNotImplemented, NO_QT_ERR_MSG);",503,download/opencv_opencv247.cpp
4ed40fd6946269ea36c58e5c76a277e7a871c269,Merge pull request #7432 from abratchik:java.wrapper.fix.3.1,modules/features2d/src/matchers.cpp,+,"CV_Error( Error::StsBadArg, ""Specified descriptor matcher type is not supported."" );",1066,download/opencv_opencv248.cpp
4acda3f60932981665be036729137a397ef9c78b,Merge pull request #7428 from alalek:cmake_fix_compiler_flags_detection,samples/cpp/videostab.cpp,+,"CV_Assert(gpu == false && ""CUDA modules are not available"");",228,download/opencv_opencv249.cpp
4acda3f60932981665be036729137a397ef9c78b,Merge pull request #7428 from alalek:cmake_fix_compiler_flags_detection,samples/cpp/videostab.cpp,+,"CV_Assert(gpu == false && ""CUDA modules are not available"");",271,download/opencv_opencv249.cpp
994815fbd493973d0f9f9f7553a88f78d77f6374,Merge pull request #7413 from tomoaki0705:featureUniversalThreshold,modules/imgproc/src/thresh.cpp,+,"return CV_Error( CV_StsBadArg, """" );",561,download/opencv_opencv250.cpp
994815fbd493973d0f9f9f7553a88f78d77f6374,Merge pull request #7413 from tomoaki0705:featureUniversalThreshold,modules/imgproc/src/thresh.cpp,+,"return CV_Error( CV_StsBadArg, """" );",652,download/opencv_opencv250.cpp
994815fbd493973d0f9f9f7553a88f78d77f6374,Merge pull request #7413 from tomoaki0705:featureUniversalThreshold,modules/imgproc/src/thresh.cpp,-,"return CV_Error( CV_StsBadArg, """" );",656,download/opencv_opencv250.cpp
994815fbd493973d0f9f9f7553a88f78d77f6374,Merge pull request #7413 from tomoaki0705:featureUniversalThreshold,modules/imgproc/src/thresh.cpp,+,"return CV_Error( CV_StsBadArg, """" );",801,download/opencv_opencv250.cpp
994815fbd493973d0f9f9f7553a88f78d77f6374,Merge pull request #7413 from tomoaki0705:featureUniversalThreshold,modules/imgproc/src/thresh.cpp,-,"return CV_Error( CV_StsBadArg, """" );",895,download/opencv_opencv250.cpp
994815fbd493973d0f9f9f7553a88f78d77f6374,Merge pull request #7413 from tomoaki0705:featureUniversalThreshold,modules/imgproc/src/thresh.cpp,+,"return CV_Error( CV_StsBadArg, """" );",897,download/opencv_opencv250.cpp
994815fbd493973d0f9f9f7553a88f78d77f6374,Merge pull request #7413 from tomoaki0705:featureUniversalThreshold,modules/imgproc/src/thresh.cpp,+,"return CV_Error(CV_StsBadArg, """");",1016,download/opencv_opencv250.cpp
994815fbd493973d0f9f9f7553a88f78d77f6374,Merge pull request #7413 from tomoaki0705:featureUniversalThreshold,modules/imgproc/src/thresh.cpp,+,"return CV_Error(CV_StsBadArg, """");",1156,download/opencv_opencv250.cpp
994815fbd493973d0f9f9f7553a88f78d77f6374,Merge pull request #7413 from tomoaki0705:featureUniversalThreshold,modules/imgproc/src/thresh.cpp,-,"return CV_Error(CV_StsBadArg, """");",1160,download/opencv_opencv250.cpp
4e7f28811c1503e431a91d790d4998e63e80753d,"Merge pull request #7452 from reunanen:issue-7409-2.4

Fix findContours crash for very large images (v2.4)

* Cast step to size_t in order to avoid integer overflow when processing very large images

* Change assert to CV_Assert",modules/imgproc/src/contours.cpp,+,CV_Assert(step >= 0);,287,download/opencv_opencv251.cpp
4e7f28811c1503e431a91d790d4998e63e80753d,"Merge pull request #7452 from reunanen:issue-7409-2.4

Fix findContours crash for very large images (v2.4)

* Cast step to size_t in order to avoid integer overflow when processing very large images

* Change assert to CV_Assert",modules/imgproc/src/contours.cpp,+,CV_Assert(size.height >= 1);,288,download/opencv_opencv251.cpp
4e7f28811c1503e431a91d790d4998e63e80753d,"Merge pull request #7452 from reunanen:issue-7409-2.4

Fix findContours crash for very large images (v2.4)

* Cast step to size_t in order to avoid integer overflow when processing very large images

* Change assert to CV_Assert",modules/imgproc/src/contours.cpp,+,CV_Assert(scanner->img_step >= 0);,995,download/opencv_opencv251.cpp
0f387cda8f8b42c4db458ce3f8db5f2f81ccddf4,"Merge pull request #7451 from reunanen:issue-7409

Fix findContours crash for very large images (#7451)

* Cast step to size_t in order to avoid integer overflow when processing very large images

* Change assert to CV_Assert",modules/imgproc/src/contours.cpp,+,CV_Assert(step >= 0);,309,download/opencv_opencv252.cpp
0f387cda8f8b42c4db458ce3f8db5f2f81ccddf4,"Merge pull request #7451 from reunanen:issue-7409

Fix findContours crash for very large images (#7451)

* Cast step to size_t in order to avoid integer overflow when processing very large images

* Change assert to CV_Assert",modules/imgproc/src/contours.cpp,+,CV_Assert(size.height >= 1);,310,download/opencv_opencv252.cpp
0f387cda8f8b42c4db458ce3f8db5f2f81ccddf4,"Merge pull request #7451 from reunanen:issue-7409

Fix findContours crash for very large images (#7451)

* Cast step to size_t in order to avoid integer overflow when processing very large images

* Change assert to CV_Assert",modules/imgproc/src/contours.cpp,+,CV_Assert(scanner->img_step >= 0);,1011,download/opencv_opencv252.cpp
ea6410d1e74268f2fa2495ce5ef1735232857824,"use universal intrinsic in threshold
  * add performance test for 32F and 64F threshold
  * requires update of opencv_extra",modules/imgproc/src/thresh.cpp,+,"return CV_Error( CV_StsBadArg, """" );",561,download/opencv_opencv253.cpp
ea6410d1e74268f2fa2495ce5ef1735232857824,"use universal intrinsic in threshold
  * add performance test for 32F and 64F threshold
  * requires update of opencv_extra",modules/imgproc/src/thresh.cpp,+,"return CV_Error( CV_StsBadArg, """" );",652,download/opencv_opencv253.cpp
ea6410d1e74268f2fa2495ce5ef1735232857824,"use universal intrinsic in threshold
  * add performance test for 32F and 64F threshold
  * requires update of opencv_extra",modules/imgproc/src/thresh.cpp,-,"return CV_Error( CV_StsBadArg, """" );",656,download/opencv_opencv253.cpp
ea6410d1e74268f2fa2495ce5ef1735232857824,"use universal intrinsic in threshold
  * add performance test for 32F and 64F threshold
  * requires update of opencv_extra",modules/imgproc/src/thresh.cpp,+,"return CV_Error( CV_StsBadArg, """" );",801,download/opencv_opencv253.cpp
ea6410d1e74268f2fa2495ce5ef1735232857824,"use universal intrinsic in threshold
  * add performance test for 32F and 64F threshold
  * requires update of opencv_extra",modules/imgproc/src/thresh.cpp,-,"return CV_Error( CV_StsBadArg, """" );",895,download/opencv_opencv253.cpp
ea6410d1e74268f2fa2495ce5ef1735232857824,"use universal intrinsic in threshold
  * add performance test for 32F and 64F threshold
  * requires update of opencv_extra",modules/imgproc/src/thresh.cpp,+,"return CV_Error( CV_StsBadArg, """" );",897,download/opencv_opencv253.cpp
ea6410d1e74268f2fa2495ce5ef1735232857824,"use universal intrinsic in threshold
  * add performance test for 32F and 64F threshold
  * requires update of opencv_extra",modules/imgproc/src/thresh.cpp,+,"return CV_Error(CV_StsBadArg, """");",1016,download/opencv_opencv253.cpp
ea6410d1e74268f2fa2495ce5ef1735232857824,"use universal intrinsic in threshold
  * add performance test for 32F and 64F threshold
  * requires update of opencv_extra",modules/imgproc/src/thresh.cpp,+,"return CV_Error(CV_StsBadArg, """");",1156,download/opencv_opencv253.cpp
ea6410d1e74268f2fa2495ce5ef1735232857824,"use universal intrinsic in threshold
  * add performance test for 32F and 64F threshold
  * requires update of opencv_extra",modules/imgproc/src/thresh.cpp,-,"return CV_Error(CV_StsBadArg, """");",1160,download/opencv_opencv253.cpp
5da8d65371e395191708c5e3bb60bdef7118626c,eliminate compiler warnings,samples/cpp/videostab.cpp,+,"CV_Assert(gpu == false && ""CUDA modules are not available"");",228,download/opencv_opencv254.cpp
5da8d65371e395191708c5e3bb60bdef7118626c,eliminate compiler warnings,samples/cpp/videostab.cpp,+,"CV_Assert(gpu == false && ""CUDA modules are not available"");",271,download/opencv_opencv254.cpp
be028d07749079ab7a8dfc2f1157e459a426e4c2,"fix for #7420, #7421",modules/features2d/src/matchers.cpp,+,"CV_Error( Error::StsBadArg, ""Specified descriptor matcher type is not supported."" );",1066,download/opencv_opencv255.cpp
9b4cf896fd4a92817b0ffef75014a5a6372443af,Added AKAZE features in the stitcher pipeline (issue #6474),modules/stitching/src/matchers.cpp,+,CV_Assert((image.type() == CV_8UC3) || (image.type() == CV_8UC1));,479,download/opencv_opencv256.cpp
fad05986342ba2128a1f24a0e9586c889bbdc8f0,"normHamming done with AVX 2 intrinsics (ver 2) (#7405)

* normHamming done with AVX 2 intrinsics.

* fixed compiling AVX2-optimized norm hamming with MSVC",modules/core/src/stat.cpp,+,CV_DbgAssert(0 <= i && i < 8);,4082,download/opencv_opencv257.cpp
42fbfb9be0dbb677b1cc4a37617069ded8e1a79d,Merge pull request #7311 from fran6co:lsd,modules/imgproc/src/lsd.cpp,-,CV_Assert(!img.empty() && img.channels() == 1);,415,download/opencv_opencv258.cpp
42fbfb9be0dbb677b1cc4a37617069ded8e1a79d,Merge pull request #7311 from fran6co:lsd,modules/imgproc/src/lsd.cpp,+,CV_Assert(!image.empty() && image.type() == CV_8UC1);,419,download/opencv_opencv258.cpp
42fbfb9be0dbb677b1cc4a37617069ded8e1a79d,Merge pull request #7311 from fran6co:lsd,modules/imgproc/src/lsd.cpp,-,CV_Assert(scaled_image.isContinuous() &&,536,download/opencv_opencv258.cpp
a3d44d523dd4471d2c3b649a61fa6089686f4c7e,Merge pull request #7214 from mshabunin:hal_integral,modules/imgproc/src/sumpixels.cpp,+,"CV_Error( CV_StsUnsupportedFormat, """" );",509,download/opencv_opencv259.cpp
a3d44d523dd4471d2c3b649a61fa6089686f4c7e,Merge pull request #7214 from mshabunin:hal_integral,modules/imgproc/src/sumpixels.cpp,-,"CV_Error( CV_StsUnsupportedFormat, """" );",584,download/opencv_opencv259.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error_( CV_StsOutOfRange, (""The number of points in the view #%d is < 4"", i));",27,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, ""One of required vector arguments is not a valid matrix"" );",89,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange, ""image width and height must be positive"" );",91,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsUnsupportedFormat,",94,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, ""The tilted sensor model must have 14 parameters in the distortion matrix"" );",99,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, ""Thin prism model must have 12 parameters in the distortion matrix"" );",105,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, ""the output array of rotation vectors must be 3-channel """,117,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, ""the output array of translation vectors must be 3-channel """,127,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, ""the output array of standard deviations vectors must be 1-channel """,137,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg,",143,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, cvDistCoeffErr );",153,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error_( CV_StsOutOfRange, (""The number of points in the view #%d is < 4"", i));",159,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange, ""Focal length (fx and fy) must be positive"" );",199,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange, ""Principal point must be within the image"" );",201,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange, ""Non-zero skew is not supported by the function"" );",202,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange,",204,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange,",213,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg,",222,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange,",231,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"Mat allErrors(1, total, CV_64FC2);",239,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert(nimages > 0 && nimages == (int)imagePoints1.total() &&,494,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error(CV_StsUnsupportedFormat, ""objectPoints should contain vector of vectors of points of type Point3f"");",500,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error(CV_StsUnsupportedFormat, ""imagePoints1 should contain vector of vectors of points of type Point2f"");",502,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert( ni == ni1 );,502,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert( ni == ni2 );,533,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert( nimages > 0 );,554,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert(_charucoIds.total() > 0 && (_charucoIds.total() == _charucoCorners.total()));,632,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert(nCorners > 0 && nCorners == _charucoCorners.getMat(i).total()); //actually nCorners must be > 3 for calibration,638,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert(pointId >= 0 && pointId < (int)_board->chessboardCorners.size());,642,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,const double LOG10 = log(10.);,678,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert( !err );,729,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/cvCalibrationFork.cpp,-,assert( state == CHECK_ERR );,760,download/opencv_opencv260.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/linalg.cpp,-,CV_Assert( type == _src2.type() && (type == CV_32F || type == CV_64F) );,17,download/opencv_opencv261.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/linalg.cpp,-,CV_Assert( (method != DECOMP_LU && method != DECOMP_CHOLESKY) ||,19,download/opencv_opencv261.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/linalg.cpp,-,"integer nlvl = cvRound(std::log(std::max(std::min(m_,n)/25., 1.))/CV_LOG2) + 1;",55,download/opencv_opencv261.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/linalg.cpp,-,"CV_Error( Error::StsBadArg, ""Unknown method"" );",81,download/opencv_opencv261.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/linalg.cpp,-,assert(info == 0);,81,download/opencv_opencv261.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/linalg.cpp,-,assert(0);,194,download/opencv_opencv261.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/linalg.cpp,-,CV_Assert( w.isContinuous() );,230,download/opencv_opencv261.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/linalg.cpp,-,assert(info == 0);,264,download/opencv_opencv261.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/linalg.cpp,-,CV_Assert(info >= 0);,320,download/opencv_opencv261.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/linalg.cpp,-,CV_Assert( u.data && vt.data && w.data );,425,download/opencv_opencv261.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/linalg.cpp,-,CV_Assert( rhs.data == 0 || (rhs.type() == type && rhs.rows == m) );,426,download/opencv_opencv261.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/linalg.cpp,-,"CV_Error( Error::StsUnsupportedFormat, """" );",438,download/opencv_opencv261.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/interactive-calibration/linalg.cpp,-,CV_Assert(type == CV_32F || type == CV_64F);,451,download/opencv_opencv261.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,apps/version/opencv_version.cpp,+,parser.printMessage();,17,download/opencv_opencv262.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,-,"static int PRINTF( const char*, ... )",94,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,+,#define PRINTF(...),97,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,+,CV_Assert(img.channels() == 1 && img.depth() == CV_8U);,379,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""THRESHOLD SELECTED = %d, BRIGHTMAX = %d, DARKMAX = %d\n"", iThresh, iBrightMax, piMaxPos[iIdxBGMax]);",537,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""THRESHOLD SELECTED = %d, BRIGHTMAX = %d, DARKMAX = %d\n"", iThresh, iBrightMax, piMaxPos[iIdxBGMax]);",550,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,-,"CV_Error( CV_StsUnsupportedFormat, ""Only 8-bit grayscale or color images are supported"" );",466,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,+,"CV_Error( CV_StsUnsupportedFormat, ""Only 8-bit grayscale or color images are supported"" );",467,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Quad count: %d/%d\n"", quad_count, expected_corners_num);",551,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Starting ordering of inner quads\n"");",577,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Orig count: %d  After ordering: %d\n"", icount, count);",578,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  orig count: %d cleaned: %d\n"", group_idx, icount, count);",585,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  count: %d  cleaned: %d\n"", group_idx, icount, count);",587,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Quad count: %d/%d\n"", quad_count, (pattern_size.width/2+1)*(pattern_size.height/2+1));",632,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Fallback to old algorithm\n"");",643,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Quad count: %d/%d\n"", quad_count, expected_corners_num);",692,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Starting ordering of inner quads\n"");",718,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Orig count: %d  After ordering: %d\n"", icount, count);",720,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  orig count: %d cleaned: %d\n"", group_idx, icount, count);",728,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  count: %d  cleaned: %d\n"", group_idx, icount, count);",730,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Fallback to old algorithm\n"");",750,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Quad count: %d/%d\n"", quad_count, (pattern_size.width/2+1)*(pattern_size.height/2+1));",806,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Starting ordering of inner quads (%d)\n"", count);",1888,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Finished ordering of inner quads (%d)\n"", count);",1891,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d, count: %d\n"", group_idx, count);",1899,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d, count: %d\n"", group_idx, count);",1902,download/opencv_opencv263.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/checkchessboard.cpp,-,"cvError(CV_BadNumChannels, ""cvCheckChessboard"", ""supports single-channel images only"",",111,download/opencv_opencv264.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/checkchessboard.cpp,-,"cvError(CV_BadDepth, ""cvCheckChessboard"", ""supports depth=8 images only"",",121,download/opencv_opencv264.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/checkchessboard.cpp,+,CV_Assert(img.channels() == 1 && img.depth() == CV_8U);,255,download/opencv_opencv264.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/checkchessboard.cpp,-,"cvError(CV_BadNumChannels, ""cvCheckChessboard"", ""supports single-channel images only"",",205,download/opencv_opencv264.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/checkchessboard.cpp,-,"cvError(CV_BadDepth, ""cvCheckChessboard"", ""supports depth=8 images only"",",210,download/opencv_opencv264.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/src/checkchessboard.cpp,+,CV_Assert(img.channels() == 1 && img.depth() == CV_8U);,214,download/opencv_opencv264.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/calib3d/test/test_cameracalibration.cpp,+,"ts->printf( cvtest::TS::LOG, ""The camera matrix is wrong for downscaled image\n"");",1446,download/opencv_opencv265.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs.cpp,-,CV_Assert(ippFunc != 0);,528,download/opencv_opencv266.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs.cpp,+,CV_Assert(ippsPolarToCart != 0);,531,download/opencv_opencv266.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs.cpp,-,setIppErrorStatus();,641,download/opencv_opencv266.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs.cpp,-,setIppErrorStatus();,654,download/opencv_opencv266.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs.cpp,-,"static void Log_32f_ipp(const float *x, float *y, int n)",665,download/opencv_opencv266.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs.cpp,-,setIppErrorStatus();,673,download/opencv_opencv266.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs.cpp,-,"hal::log32f(x, y, n);",674,download/opencv_opencv266.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs.cpp,-,"static void Log_64f_ipp(const double *x, double *y, int n)",676,download/opencv_opencv266.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs.cpp,-,setIppErrorStatus();,684,download/opencv_opencv266.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs.cpp,-,"hal::log64f(x, y, n);",685,download/opencv_opencv266.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs.cpp,-,"Log_32f( (const float*)ptrs[0], (float*)ptrs[1], len );",686,download/opencv_opencv266.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs.cpp,+,"hal::log32f( (const float*)ptrs[0], (float*)ptrs[1], len );",686,download/opencv_opencv266.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs.cpp,-,"Log_64f( (const double*)ptrs[0], (double*)ptrs[1], len );",688,download/opencv_opencv266.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs.cpp,+,"hal::log64f( (const double*)ptrs[0], (double*)ptrs[1], len );",688,download/opencv_opencv266.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs.cpp,-,"Log_32f(x, y, bsz);",1291,download/opencv_opencv266.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs.cpp,+,"hal::log32f(x, y, bsz);",1291,download/opencv_opencv266.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs.cpp,-,"Log_64f(x, y, bsz);",1318,download/opencv_opencv266.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs.cpp,+,"hal::log64f(x, y, bsz);",1318,download/opencv_opencv266.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs_core.cpp,-,setIppErrorStatus();,242,download/opencv_opencv267.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs_core.cpp,-,setIppErrorStatus();,270,download/opencv_opencv267.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs_core.cpp,-,setIppErrorStatus();,298,download/opencv_opencv267.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs_core.cpp,-,setIppErrorStatus();,342,download/opencv_opencv267.cpp
55e3deac46a0511f53ded31fe914a226b2ece683,Merge remote-tracking branch 'upstream/master' into pr7050,modules/core/src/mathfuncs_core.cpp,-,setIppErrorStatus();,366,download/opencv_opencv267.cpp
3d5c0f1faf8223a9778faf588a75a393a6231b2e,HAL interface for cv::integral,modules/imgproc/src/sumpixels.cpp,+,"CV_Error( CV_StsUnsupportedFormat, """" );",509,download/opencv_opencv268.cpp
3d5c0f1faf8223a9778faf588a75a393a6231b2e,HAL interface for cv::integral,modules/imgproc/src/sumpixels.cpp,-,"CV_Error( CV_StsUnsupportedFormat, """" );",584,download/opencv_opencv268.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,-,"static int PRINTF( const char*, ... )",94,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,+,#define PRINTF(...),97,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,+,CV_Assert(img.channels() == 1 && img.depth() == CV_8U);,379,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""THRESHOLD SELECTED = %d, BRIGHTMAX = %d, DARKMAX = %d\n"", iThresh, iBrightMax, piMaxPos[iIdxBGMax]);",514,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""THRESHOLD SELECTED = %d, BRIGHTMAX = %d, DARKMAX = %d\n"", iThresh, iBrightMax, piMaxPos[iIdxBGMax]);",553,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,-,"CV_Error( CV_StsUnsupportedFormat, ""Only 8-bit grayscale or color images are supported"" );",466,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,+,"CV_Error( CV_StsUnsupportedFormat, ""Only 8-bit grayscale or color images are supported"" );",467,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Quad count: %d/%d\n"", quad_count, expected_corners_num);",551,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Starting ordering of inner quads\n"");",577,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Orig count: %d  After ordering: %d\n"", icount, count);",578,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  orig count: %d cleaned: %d\n"", group_idx, icount, count);",585,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  count: %d  cleaned: %d\n"", group_idx, icount, count);",587,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Quad count: %d/%d\n"", quad_count, (pattern_size.width/2+1)*(pattern_size.height/2+1));",632,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Fallback to old algorithm\n"");",643,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Quad count: %d/%d\n"", quad_count, expected_corners_num);",692,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Starting ordering of inner quads\n"");",718,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Orig count: %d  After ordering: %d\n"", icount, count);",720,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  orig count: %d cleaned: %d\n"", group_idx, icount, count);",728,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  count: %d  cleaned: %d\n"", group_idx, icount, count);",730,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Fallback to old algorithm\n"");",750,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Quad count: %d/%d\n"", quad_count, (pattern_size.width/2+1)*(pattern_size.height/2+1));",806,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Starting ordering of inner quads (%d)\n"", count);",1888,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Finished ordering of inner quads (%d)\n"", count);",1891,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d, count: %d\n"", group_idx, count);",1899,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d, count: %d\n"", group_idx, count);",1902,download/opencv_opencv269.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/checkchessboard.cpp,-,"cvError(CV_BadNumChannels, ""cvCheckChessboard"", ""supports single-channel images only"",",111,download/opencv_opencv270.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/checkchessboard.cpp,-,"cvError(CV_BadDepth, ""cvCheckChessboard"", ""supports depth=8 images only"",",121,download/opencv_opencv270.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/checkchessboard.cpp,+,CV_Assert(img.channels() == 1 && img.depth() == CV_8U);,255,download/opencv_opencv270.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/checkchessboard.cpp,-,"cvError(CV_BadNumChannels, ""cvCheckChessboard"", ""supports single-channel images only"",",205,download/opencv_opencv270.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/checkchessboard.cpp,-,"cvError(CV_BadDepth, ""cvCheckChessboard"", ""supports depth=8 images only"",",210,download/opencv_opencv270.cpp
73e1d64ae07be010a2c64e6906d0e938846c6bef,Merge pull request #6956 from mshabunin:fix-chessboard-bug,modules/calib3d/src/checkchessboard.cpp,+,CV_Assert(img.channels() == 1 && img.depth() == CV_8U);,214,download/opencv_opencv270.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,-,"static int PRINTF( const char*, ... )",94,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,+,#define PRINTF(...),97,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,+,CV_Assert(img.channels() == 1 && img.depth() == CV_8U);,379,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,-,"PRINTF(""THRESHOLD SELECTED = %d, BRIGHTMAX = %d, DARKMAX = %d\n"", iThresh, iBrightMax, piMaxPos[iIdxBGMax]);",514,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""THRESHOLD SELECTED = %d, BRIGHTMAX = %d, DARKMAX = %d\n"", iThresh, iBrightMax, piMaxPos[iIdxBGMax]);",553,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,-,"CV_Error( CV_StsUnsupportedFormat, ""Only 8-bit grayscale or color images are supported"" );",466,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,+,"CV_Error( CV_StsUnsupportedFormat, ""Only 8-bit grayscale or color images are supported"" );",467,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Quad count: %d/%d\n"", quad_count, expected_corners_num);",551,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Starting ordering of inner quads\n"");",577,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Orig count: %d  After ordering: %d\n"", icount, count);",578,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  orig count: %d cleaned: %d\n"", group_idx, icount, count);",585,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  count: %d  cleaned: %d\n"", group_idx, icount, count);",587,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Quad count: %d/%d\n"", quad_count, (pattern_size.width/2+1)*(pattern_size.height/2+1));",632,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Fallback to old algorithm\n"");",643,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Quad count: %d/%d\n"", quad_count, expected_corners_num);",692,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Starting ordering of inner quads\n"");",718,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Orig count: %d  After ordering: %d\n"", icount, count);",720,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  orig count: %d cleaned: %d\n"", group_idx, icount, count);",728,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  count: %d  cleaned: %d\n"", group_idx, icount, count);",730,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Fallback to old algorithm\n"");",750,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Quad count: %d/%d\n"", quad_count, (pattern_size.width/2+1)*(pattern_size.height/2+1));",806,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Starting ordering of inner quads (%d)\n"", count);",1888,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Finished ordering of inner quads (%d)\n"", count);",1891,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d, count: %d\n"", group_idx, count);",1899,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d, count: %d\n"", group_idx, count);",1902,download/opencv_opencv271.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/checkchessboard.cpp,-,"cvError(CV_BadNumChannels, ""cvCheckChessboard"", ""supports single-channel images only"",",111,download/opencv_opencv272.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/checkchessboard.cpp,-,"cvError(CV_BadDepth, ""cvCheckChessboard"", ""supports depth=8 images only"",",121,download/opencv_opencv272.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/checkchessboard.cpp,+,CV_Assert(img.channels() == 1 && img.depth() == CV_8U);,255,download/opencv_opencv272.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/checkchessboard.cpp,-,"cvError(CV_BadNumChannels, ""cvCheckChessboard"", ""supports single-channel images only"",",205,download/opencv_opencv272.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/checkchessboard.cpp,-,"cvError(CV_BadDepth, ""cvCheckChessboard"", ""supports depth=8 images only"",",210,download/opencv_opencv272.cpp
b8bce55270199252245b26bc4ca76a70f917e441,"Several chessboard detector improvements:
- fixed uninitialized memory access and memory leaks
- extracted several code blocks to separate functions
- updated part of algorithm to use cv::Mat instead of CvMat and IplImage",modules/calib3d/src/checkchessboard.cpp,+,CV_Assert(img.channels() == 1 && img.depth() == CV_8U);,214,download/opencv_opencv272.cpp
ee7e231e8b753185459092ce0d44460899edc95a,Merge pull request #7322 from alalek:fix_test_crash,modules/core/test/test_umat.cpp,-,ASSERT_ANY_THROW(m2 = m.getUMat(ACCESS_RW).getMat(ACCESS_RW));,1320,download/opencv_opencv273.cpp
ee7e231e8b753185459092ce0d44460899edc95a,Merge pull request #7322 from alalek:fix_test_crash,modules/core/test/test_umat.cpp,+,ASSERT_ANY_THROW({,1320,download/opencv_opencv273.cpp
f50f34016e5953ec5ce4e69547a5881e9e7024e9,test: fix test crash (exception in destructor),modules/core/test/test_umat.cpp,-,ASSERT_ANY_THROW(m2 = m.getUMat(ACCESS_RW).getMat(ACCESS_RW));,1320,download/opencv_opencv274.cpp
f50f34016e5953ec5ce4e69547a5881e9e7024e9,test: fix test crash (exception in destructor),modules/core/test/test_umat.cpp,+,ASSERT_ANY_THROW({,1320,download/opencv_opencv274.cpp
a12207c3ad16db85c9c1d6252434a001c6ad4542,"LSD: Avoid using pointers directly, image could be non continuous",modules/imgproc/src/lsd.cpp,-,CV_Assert(scaled_image.isContinuous() &&,539,download/opencv_opencv275.cpp
f5a0b226f27fcbe949a269e897d8b41265d08ed1,"LSD: Optimization, avoid converting the image to double",modules/imgproc/src/lsd.cpp,-,CV_Assert(!img.empty() && img.channels() == 1);,418,download/opencv_opencv276.cpp
f5a0b226f27fcbe949a269e897d8b41265d08ed1,"LSD: Optimization, avoid converting the image to double",modules/imgproc/src/lsd.cpp,+,CV_Assert(!image.empty() && image.type() == CV_8UC1);,422,download/opencv_opencv276.cpp
1f6cf50be3a522473bd3d1a58864093345f9f632,Merge pull request #7286 from alalek:fix_android_clang,modules/ocl/src/stereo_csbp.cpp,-,CV_DbgAssert(0 < rthis.ndisp && 0 < rthis.iters && 0 < rthis.levels && 0 < rthis.nr_plane,565,download/opencv_opencv277.cpp
1f6cf50be3a522473bd3d1a58864093345f9f632,Merge pull request #7286 from alalek:fix_android_clang,modules/ocl/src/stereo_csbp.cpp,+,CV_DbgAssert(0 < pThis->ndisp && 0 < pThis->iters && 0 < pThis->levels && 0 < pThis->nr_plane,565,download/opencv_opencv277.cpp
1f6cf50be3a522473bd3d1a58864093345f9f632,Merge pull request #7286 from alalek:fix_android_clang,modules/ocl/src/stereo_csbp.cpp,-,CV_Assert(rthis.levels <= 8 && (left.type() == CV_8UC1 || left.type() == CV_8UC3));,568,download/opencv_opencv277.cpp
1f6cf50be3a522473bd3d1a58864093345f9f632,Merge pull request #7286 from alalek:fix_android_clang,modules/ocl/src/stereo_csbp.cpp,+,CV_Assert(pThis->levels <= 8 && (left.type() == CV_8UC1 || left.type() == CV_8UC3));,568,download/opencv_opencv277.cpp
1f6cf50be3a522473bd3d1a58864093345f9f632,Merge pull request #7286 from alalek:fix_android_clang,modules/ocl/src/stereo_csbp.cpp,-,"rthis.levels = min(rthis.levels, int(log((double)rthis.ndisp) / log(2.0)));",576,download/opencv_opencv277.cpp
1f6cf50be3a522473bd3d1a58864093345f9f632,Merge pull request #7286 from alalek:fix_android_clang,modules/ocl/src/stereo_csbp.cpp,+,"pThis->levels = min(pThis->levels, int(log((double)pThis->ndisp) / log(2.0)));",577,download/opencv_opencv277.cpp
c68b9328ca85ad0be1fb756b6db4551e2ed74aae,android: workaround for Android NDK-8e clang ICE,modules/ocl/src/stereo_csbp.cpp,-,CV_DbgAssert(0 < rthis.ndisp && 0 < rthis.iters && 0 < rthis.levels && 0 < rthis.nr_plane,565,download/opencv_opencv278.cpp
c68b9328ca85ad0be1fb756b6db4551e2ed74aae,android: workaround for Android NDK-8e clang ICE,modules/ocl/src/stereo_csbp.cpp,+,CV_DbgAssert(0 < pThis->ndisp && 0 < pThis->iters && 0 < pThis->levels && 0 < pThis->nr_plane,565,download/opencv_opencv278.cpp
c68b9328ca85ad0be1fb756b6db4551e2ed74aae,android: workaround for Android NDK-8e clang ICE,modules/ocl/src/stereo_csbp.cpp,-,CV_Assert(rthis.levels <= 8 && (left.type() == CV_8UC1 || left.type() == CV_8UC3));,568,download/opencv_opencv278.cpp
c68b9328ca85ad0be1fb756b6db4551e2ed74aae,android: workaround for Android NDK-8e clang ICE,modules/ocl/src/stereo_csbp.cpp,+,CV_Assert(pThis->levels <= 8 && (left.type() == CV_8UC1 || left.type() == CV_8UC3));,568,download/opencv_opencv278.cpp
c68b9328ca85ad0be1fb756b6db4551e2ed74aae,android: workaround for Android NDK-8e clang ICE,modules/ocl/src/stereo_csbp.cpp,-,"rthis.levels = min(rthis.levels, int(log((double)rthis.ndisp) / log(2.0)));",576,download/opencv_opencv278.cpp
c68b9328ca85ad0be1fb756b6db4551e2ed74aae,android: workaround for Android NDK-8e clang ICE,modules/ocl/src/stereo_csbp.cpp,+,"pThis->levels = min(pThis->levels, int(log((double)pThis->ndisp) / log(2.0)));",577,download/opencv_opencv278.cpp
52535d3ef11762ab2fd82c0aea7bac099184c8da,Merge pull request #7278 from alalek:opencv_version,apps/version/opencv_version.cpp,+,parser.printMessage();,17,download/opencv_opencv279.cpp
2935fcea6262c66a0ce072c578727bae6b30fc73,apps: add opencv_version command line tool,apps/version/opencv_version.cpp,+,parser.printMessage();,17,download/opencv_opencv280.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error_( CV_StsOutOfRange, (""The number of points in the view #%d is < 4"", i));",27,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, ""One of required vector arguments is not a valid matrix"" );",89,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange, ""image width and height must be positive"" );",91,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsUnsupportedFormat,",94,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, ""The tilted sensor model must have 14 parameters in the distortion matrix"" );",99,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, ""Thin prism model must have 12 parameters in the distortion matrix"" );",105,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, ""the output array of rotation vectors must be 3-channel """,117,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, ""the output array of translation vectors must be 3-channel """,127,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, ""the output array of standard deviations vectors must be 1-channel """,137,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg,",143,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, cvDistCoeffErr );",153,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error_( CV_StsOutOfRange, (""The number of points in the view #%d is < 4"", i));",159,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange, ""Focal length (fx and fy) must be positive"" );",199,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange, ""Principal point must be within the image"" );",201,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange, ""Non-zero skew is not supported by the function"" );",202,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange,",204,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange,",213,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg,",222,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange,",231,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"Mat allErrors(1, total, CV_64FC2);",239,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert(nimages > 0 && nimages == (int)imagePoints1.total() &&,494,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error(CV_StsUnsupportedFormat, ""objectPoints should contain vector of vectors of points of type Point3f"");",500,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error(CV_StsUnsupportedFormat, ""imagePoints1 should contain vector of vectors of points of type Point2f"");",502,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert( ni == ni1 );,502,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert( ni == ni2 );,533,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert( nimages > 0 );,554,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert(_charucoIds.total() > 0 && (_charucoIds.total() == _charucoCorners.total()));,632,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert(nCorners > 0 && nCorners == _charucoCorners.getMat(i).total()); //actually nCorners must be > 3 for calibration,638,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert(pointId >= 0 && pointId < (int)_board->chessboardCorners.size());,642,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,const double LOG10 = log(10.);,678,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert( !err );,729,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/cvCalibrationFork.cpp,-,assert( state == CHECK_ERR );,760,download/opencv_opencv281.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/linalg.cpp,-,CV_Assert( type == _src2.type() && (type == CV_32F || type == CV_64F) );,17,download/opencv_opencv282.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/linalg.cpp,-,CV_Assert( (method != DECOMP_LU && method != DECOMP_CHOLESKY) ||,19,download/opencv_opencv282.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/linalg.cpp,-,"integer nlvl = cvRound(std::log(std::max(std::min(m_,n)/25., 1.))/CV_LOG2) + 1;",55,download/opencv_opencv282.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/linalg.cpp,-,"CV_Error( Error::StsBadArg, ""Unknown method"" );",81,download/opencv_opencv282.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/linalg.cpp,-,assert(info == 0);,81,download/opencv_opencv282.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/linalg.cpp,-,assert(0);,194,download/opencv_opencv282.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/linalg.cpp,-,CV_Assert( w.isContinuous() );,230,download/opencv_opencv282.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/linalg.cpp,-,assert(info == 0);,264,download/opencv_opencv282.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/linalg.cpp,-,CV_Assert(info >= 0);,320,download/opencv_opencv282.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/linalg.cpp,-,CV_Assert( u.data && vt.data && w.data );,425,download/opencv_opencv282.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/linalg.cpp,-,CV_Assert( rhs.data == 0 || (rhs.type() == type && rhs.rows == m) );,426,download/opencv_opencv282.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/linalg.cpp,-,"CV_Error( Error::StsUnsupportedFormat, """" );",438,download/opencv_opencv282.cpp
b632f95f8dd869258e50a3b8a2f3c4af9c26ad2d,Merge pull request #7133 from sovrasov:interactive_calibration_update,apps/interactive-calibration/linalg.cpp,-,CV_Assert(type == CV_32F || type == CV_64F);,451,download/opencv_opencv282.cpp
a9ab869800119360c0c34780ce1ab9d281b99753,"seriously improved performance of blur function, especially 3x3 and 5x5 cases (#7262)

* seriously improved performance of blur function, especially 3x3 and 5x5 cases

* trying to fix warnings and test failures

* replaced #if 0 with #if IPP_DISABLE_BLOCK",modules/imgproc/src/smooth.cpp,+,CV_Assert( sumCount == ksize-1 );,543,download/opencv_opencv283.cpp
4e918fb9872eecf1b5b08af74289b9aeb0e6e624,Merge pull request #7165 from PkLab:doc_videoio,samples/cpp/videowriter_basic.cpp,+,writer.write(src);,57,download/opencv_opencv284.cpp
be65701908370a55d73e2f86c7aacd8b4abc00f9,Large update of videoio doc and samples following mshabunin comments,samples/cpp/videowriter_basic.cpp,+,writer.write(src);,57,download/opencv_opencv285.cpp
f85e33f4af15638cdff6ffb50e7669370cdd7f5b,videoio: refactor AVFoundation code integration,modules/videoio/src/cap.cpp,-,"TRY_OPEN(result, cvCreateVideoWriter_AVFoundation_Mac(filename, fourcc, fps, frameSize, is_color))",395,download/opencv_opencv286.cpp
ca4b7e1e0fdd064ea39e14c7b9b51cae54db5dfe,Merge pull request #7171 from alalek:ocl_instrumentation,modules/ts/src/ts_perf.cpp,-,"printf("" T:%.4fms"", (double)pNode->m_payload.m_ticksMean/cv::getTickFrequency()*1000);",814,download/opencv_opencv287.cpp
ca4b7e1e0fdd064ea39e14c7b9b51cae54db5dfe,Merge pull request #7171 from alalek:ocl_instrumentation,modules/ts/src/ts_perf.cpp,+,"printf("" T:%.4fms"", pNode->m_payload.getMeanMs());",814,download/opencv_opencv287.cpp
10d18a315c99ece9fee02666afdebe42da0943a9,"instrumentation: minor refactoring, wrap OpenCL

- calculate ticksTotal instead of ticksMean
- local / global width is based on ticksTotal value
- added instrumentation for OpenCL program compilation
- added instrumentation for OpenCL kernel execution",modules/ts/src/ts_perf.cpp,-,"printf("" T:%.4fms"", (double)pNode->m_payload.m_ticksMean/cv::getTickFrequency()*1000);",814,download/opencv_opencv288.cpp
10d18a315c99ece9fee02666afdebe42da0943a9,"instrumentation: minor refactoring, wrap OpenCL

- calculate ticksTotal instead of ticksMean
- local / global width is based on ticksTotal value
- added instrumentation for OpenCL program compilation
- added instrumentation for OpenCL kernel execution",modules/ts/src/ts_perf.cpp,+,"printf("" T:%.4fms"", pNode->m_payload.getMeanMs());",814,download/opencv_opencv288.cpp
4bccd9a92a36e8740ca8eb1634df50536f232a74,Merge pull request #7239 from savuor:fix2.4/ported,modules/core/test/test_arithm.cpp,+,ASSERT_TRUE(pts.empty() && pts2.empty());,1821,download/opencv_opencv289.cpp
4bccd9a92a36e8740ca8eb1634df50536f232a74,Merge pull request #7239 from savuor:fix2.4/ported,modules/core/test/test_dxt.cpp,+,"ASSERT_LT(nrm, thresh);",886,download/opencv_opencv290.cpp
4bccd9a92a36e8740ca8eb1634df50536f232a74,Merge pull request #7239 from savuor:fix2.4/ported,modules/core/test/test_mat.cpp,+,ASSERT_TRUE(_InputArray(data).empty());,925,download/opencv_opencv291.cpp
4bccd9a92a36e8740ca8eb1634df50536f232a74,Merge pull request #7239 from savuor:fix2.4/ported,modules/core/test/test_mat.cpp,+,"ASSERT_EQ(sum(tmpDst)[0], 124 * 100 * 100);",938,download/opencv_opencv291.cpp
4bccd9a92a36e8740ca8eb1634df50536f232a74,Merge pull request #7239 from savuor:fix2.4/ported,modules/core/test/test_mat.cpp,+,"ASSERT_LT(norm(mat_U, Mat::eye(2, 2, type), NORM_INF), 1e-5);",951,download/opencv_opencv291.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error_( CV_StsOutOfRange, (""The number of points in the view #%d is < 4"", i));",27,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, ""One of required vector arguments is not a valid matrix"" );",89,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange, ""image width and height must be positive"" );",91,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsUnsupportedFormat,",94,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, ""The tilted sensor model must have 14 parameters in the distortion matrix"" );",99,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, ""Thin prism model must have 12 parameters in the distortion matrix"" );",105,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, ""the output array of rotation vectors must be 3-channel """,117,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, ""the output array of translation vectors must be 3-channel """,127,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, ""the output array of standard deviations vectors must be 1-channel """,137,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg,",143,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg, cvDistCoeffErr );",153,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error_( CV_StsOutOfRange, (""The number of points in the view #%d is < 4"", i));",159,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange, ""Focal length (fx and fy) must be positive"" );",199,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange, ""Principal point must be within the image"" );",201,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange, ""Non-zero skew is not supported by the function"" );",202,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange,",204,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange,",213,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsBadArg,",222,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error( CV_StsOutOfRange,",231,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"Mat allErrors(1, total, CV_64FC2);",239,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert(nimages > 0 && nimages == (int)imagePoints1.total() &&,494,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error(CV_StsUnsupportedFormat, ""objectPoints should contain vector of vectors of points of type Point3f"");",500,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,"CV_Error(CV_StsUnsupportedFormat, ""imagePoints1 should contain vector of vectors of points of type Point2f"");",502,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert( ni == ni1 );,502,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert( ni == ni2 );,533,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert( nimages > 0 );,554,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert(_charucoIds.total() > 0 && (_charucoIds.total() == _charucoCorners.total()));,632,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert(nCorners > 0 && nCorners == _charucoCorners.getMat(i).total()); //actually nCorners must be > 3 for calibration,638,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert(pointId >= 0 && pointId < (int)_board->chessboardCorners.size());,642,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,const double LOG10 = log(10.);,678,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,CV_Assert( !err );,729,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/cvCalibrationFork.cpp,-,assert( state == CHECK_ERR );,760,download/opencv_opencv292.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/linalg.cpp,-,CV_Assert( type == _src2.type() && (type == CV_32F || type == CV_64F) );,17,download/opencv_opencv293.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/linalg.cpp,-,CV_Assert( (method != DECOMP_LU && method != DECOMP_CHOLESKY) ||,19,download/opencv_opencv293.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/linalg.cpp,-,"integer nlvl = cvRound(std::log(std::max(std::min(m_,n)/25., 1.))/CV_LOG2) + 1;",55,download/opencv_opencv293.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/linalg.cpp,-,"CV_Error( Error::StsBadArg, ""Unknown method"" );",81,download/opencv_opencv293.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/linalg.cpp,-,assert(info == 0);,81,download/opencv_opencv293.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/linalg.cpp,-,assert(0);,194,download/opencv_opencv293.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/linalg.cpp,-,CV_Assert( w.isContinuous() );,230,download/opencv_opencv293.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/linalg.cpp,-,assert(info == 0);,264,download/opencv_opencv293.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/linalg.cpp,-,CV_Assert(info >= 0);,320,download/opencv_opencv293.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/linalg.cpp,-,CV_Assert( u.data && vt.data && w.data );,425,download/opencv_opencv293.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/linalg.cpp,-,CV_Assert( rhs.data == 0 || (rhs.type() == type && rhs.rows == m) );,426,download/opencv_opencv293.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/linalg.cpp,-,"CV_Error( Error::StsUnsupportedFormat, """" );",438,download/opencv_opencv293.cpp
d5603caa0b3011e05e31b216b010a9165ec0ac29,"Delete direct lapack calls, minor fixes in UI",apps/interactive-calibration/linalg.cpp,-,CV_Assert(type == CV_32F || type == CV_64F);,451,download/opencv_opencv293.cpp
125e2dcbbaf6d0fccc9699f948148845bb58b808,Merge pull request #7156 from sovrasov:hal_qr_decomp,modules/core/test/test_math.cpp,+,"ASSERT_FALSE(solve(A, B, solutionQR, DECOMP_QR));",3042,download/opencv_opencv294.cpp
27dd27400a5b16825741fa3c8aeb37ae5c77c51a,fixed invalid output of cv::dft when using DFT_ROWS + DFT_COMPLEX_OUTPUT (http://code.opencv.org/issues/3428),modules/core/test/test_dxt.cpp,+,"ASSERT_LT(nrm, thresh);",886,download/opencv_opencv295.cpp
6d691f2e05aa1062e3381373eba2e494d5955678,added test for http://code.opencv.org/issues/1918,modules/core/test/test_mat.cpp,+,"ASSERT_EQ(sum(tmpDst)[0], 124 * 100 * 100);",938,download/opencv_opencv296.cpp
98408257430e4f7cda150d8398be8b7024c11745,added test checking http://code.opencv.org/issues/4050,modules/core/test/test_mat.cpp,+,ASSERT_TRUE(_InputArray(data).empty());,925,download/opencv_opencv297.cpp
c16f96cb5bb6018daf530bd138a8a6807d133dbe,Merge pull request #7221 from terfendail:sepfilter_vec_kernel,modules/imgproc/src/filter.cpp,-,CV_Assert(kernelX.type() == kernelY.type());,5044,download/opencv_opencv298.cpp
c16f96cb5bb6018daf530bd138a8a6807d133dbe,Merge pull request #7221 from terfendail:sepfilter_vec_kernel,modules/imgproc/src/filter.cpp,+,CV_Assert( kernelX.type() == kernelY.type() &&,5044,download/opencv_opencv298.cpp
8b222ac0148cefac34516d1750ef1d37853b08f9,Merge pull request #7229 from catree:add_peopledetect_video_option,samples/cpp/peopledetect.cpp,+,parser.printMessage();,71,download/opencv_opencv299.cpp
8b222ac0148cefac34516d1750ef1d37853b08f9,Merge pull request #7229 from catree:add_peopledetect_video_option,samples/cpp/peopledetect.cpp,+,throw runtime_error(msg.str());,128,download/opencv_opencv299.cpp
8b222ac0148cefac34516d1750ef1d37853b08f9,Merge pull request #7229 from catree:add_peopledetect_video_option,samples/cpp/peopledetect.cpp,+,"throw runtime_error(string(""can't open video file: "" + video_filename));",135,download/opencv_opencv299.cpp
a92aed45a4bb0182f737a624331afcb7b0cd52a7,Merge pull request #7064 from DmtKats:pam,modules/imgcodecs/src/grfmt_pam.cpp,+,"bool PAMEncoder::write( const Mat& img, const std::vector<int>& params )",646,download/opencv_opencv300.cpp
a92aed45a4bb0182f737a624331afcb7b0cd52a7,Merge pull request #7064 from DmtKats:pam,modules/imgcodecs/src/grfmt_pam.cpp,+,"tmp += sprintf( buffer, ""P7\n"");",684,download/opencv_opencv300.cpp
a92aed45a4bb0182f737a624331afcb7b0cd52a7,Merge pull request #7064 from DmtKats:pam,modules/imgcodecs/src/grfmt_pam.cpp,+,"tmp += sprintf( buffer + tmp, ""WIDTH %d\n"", width);",685,download/opencv_opencv300.cpp
a92aed45a4bb0182f737a624331afcb7b0cd52a7,Merge pull request #7064 from DmtKats:pam,modules/imgcodecs/src/grfmt_pam.cpp,+,"tmp += sprintf( buffer + tmp, ""HEIGHT %d\n"", height);",686,download/opencv_opencv300.cpp
a92aed45a4bb0182f737a624331afcb7b0cd52a7,Merge pull request #7064 from DmtKats:pam,modules/imgcodecs/src/grfmt_pam.cpp,+,"tmp += sprintf( buffer + tmp, ""DEPTH %d\n"", img.channels());",687,download/opencv_opencv300.cpp
a92aed45a4bb0182f737a624331afcb7b0cd52a7,Merge pull request #7064 from DmtKats:pam,modules/imgcodecs/src/grfmt_pam.cpp,+,"tmp += sprintf( buffer + tmp, ""MAXVAL %d\n"", (1 << img.elemSize1()*8) - 1);",688,download/opencv_opencv300.cpp
a92aed45a4bb0182f737a624331afcb7b0cd52a7,Merge pull request #7064 from DmtKats:pam,modules/imgcodecs/src/grfmt_pam.cpp,+,"tmp += sprintf( buffer + tmp, ""TUPLTYPE %s\n"", fmt->name );",690,download/opencv_opencv300.cpp
a92aed45a4bb0182f737a624331afcb7b0cd52a7,Merge pull request #7064 from DmtKats:pam,modules/imgcodecs/src/grfmt_pam.cpp,+,"tmp += sprintf( buffer + tmp, ""ENDHDR\n"" );",691,download/opencv_opencv300.cpp
a92aed45a4bb0182f737a624331afcb7b0cd52a7,Merge pull request #7064 from DmtKats:pam,modules/imgcodecs/test/test_grfmt.cpp,+,ASSERT_FALSE(img.empty());,1049,download/opencv_opencv301.cpp
a92aed45a4bb0182f737a624331afcb7b0cd52a7,Merge pull request #7064 from DmtKats:pam,modules/imgcodecs/test/test_grfmt.cpp,+,"EXPECT_NO_THROW(cv::imwrite(writefile, img, params));",1056,download/opencv_opencv301.cpp
a92aed45a4bb0182f737a624331afcb7b0cd52a7,Merge pull request #7064 from DmtKats:pam,modules/imgcodecs/test/test_grfmt.cpp,+,"EXPECT_NO_THROW(cv::imwrite(writefile_no_param, img));",1060,download/opencv_opencv301.cpp
41431e11f50d70d879275f4dd4bb024fb4d89482,Imgcodecs: Implemented simple tests for PAM format,modules/imgcodecs/test/test_grfmt.cpp,+,ASSERT_FALSE(img.empty());,1029,download/opencv_opencv302.cpp
41431e11f50d70d879275f4dd4bb024fb4d89482,Imgcodecs: Implemented simple tests for PAM format,modules/imgcodecs/test/test_grfmt.cpp,+,"EXPECT_NO_THROW(cv::imwrite(writefile, img, params));",1036,download/opencv_opencv302.cpp
41431e11f50d70d879275f4dd4bb024fb4d89482,Imgcodecs: Implemented simple tests for PAM format,modules/imgcodecs/test/test_grfmt.cpp,+,"EXPECT_NO_THROW(cv::imwrite(writefile_no_param, img));",1040,download/opencv_opencv302.cpp
6172803012c679ec345c2e91207874d72ec62a89,"imgcodecs: Implementation of PAM encoder/decoder

This patch implements the PAM image format as defined at:
http://netpbm.sourceforge.net/doc/pam.html

The PAM format provides a generic means for storing 2 dimensional information.
This is useful for opencv since there are cases where data gets translated into
non standardized formats, which makes it difficult to store and load this information.",modules/imgcodecs/src/grfmt_pam.cpp,+,"bool PAMEncoder::write( const Mat& img, const std::vector<int>& params )",646,download/opencv_opencv303.cpp
6172803012c679ec345c2e91207874d72ec62a89,"imgcodecs: Implementation of PAM encoder/decoder

This patch implements the PAM image format as defined at:
http://netpbm.sourceforge.net/doc/pam.html

The PAM format provides a generic means for storing 2 dimensional information.
This is useful for opencv since there are cases where data gets translated into
non standardized formats, which makes it difficult to store and load this information.",modules/imgcodecs/src/grfmt_pam.cpp,+,"tmp += sprintf( buffer, ""P7\n"");",684,download/opencv_opencv303.cpp
6172803012c679ec345c2e91207874d72ec62a89,"imgcodecs: Implementation of PAM encoder/decoder

This patch implements the PAM image format as defined at:
http://netpbm.sourceforge.net/doc/pam.html

The PAM format provides a generic means for storing 2 dimensional information.
This is useful for opencv since there are cases where data gets translated into
non standardized formats, which makes it difficult to store and load this information.",modules/imgcodecs/src/grfmt_pam.cpp,+,"tmp += sprintf( buffer + tmp, ""WIDTH %d\n"", width);",685,download/opencv_opencv303.cpp
6172803012c679ec345c2e91207874d72ec62a89,"imgcodecs: Implementation of PAM encoder/decoder

This patch implements the PAM image format as defined at:
http://netpbm.sourceforge.net/doc/pam.html

The PAM format provides a generic means for storing 2 dimensional information.
This is useful for opencv since there are cases where data gets translated into
non standardized formats, which makes it difficult to store and load this information.",modules/imgcodecs/src/grfmt_pam.cpp,+,"tmp += sprintf( buffer + tmp, ""HEIGHT %d\n"", height);",686,download/opencv_opencv303.cpp
6172803012c679ec345c2e91207874d72ec62a89,"imgcodecs: Implementation of PAM encoder/decoder

This patch implements the PAM image format as defined at:
http://netpbm.sourceforge.net/doc/pam.html

The PAM format provides a generic means for storing 2 dimensional information.
This is useful for opencv since there are cases where data gets translated into
non standardized formats, which makes it difficult to store and load this information.",modules/imgcodecs/src/grfmt_pam.cpp,+,"tmp += sprintf( buffer + tmp, ""DEPTH %d\n"", img.channels());",687,download/opencv_opencv303.cpp
6172803012c679ec345c2e91207874d72ec62a89,"imgcodecs: Implementation of PAM encoder/decoder

This patch implements the PAM image format as defined at:
http://netpbm.sourceforge.net/doc/pam.html

The PAM format provides a generic means for storing 2 dimensional information.
This is useful for opencv since there are cases where data gets translated into
non standardized formats, which makes it difficult to store and load this information.",modules/imgcodecs/src/grfmt_pam.cpp,+,"tmp += sprintf( buffer + tmp, ""MAXVAL %d\n"", (1 << img.elemSize1()*8) - 1);",688,download/opencv_opencv303.cpp
6172803012c679ec345c2e91207874d72ec62a89,"imgcodecs: Implementation of PAM encoder/decoder

This patch implements the PAM image format as defined at:
http://netpbm.sourceforge.net/doc/pam.html

The PAM format provides a generic means for storing 2 dimensional information.
This is useful for opencv since there are cases where data gets translated into
non standardized formats, which makes it difficult to store and load this information.",modules/imgcodecs/src/grfmt_pam.cpp,+,"tmp += sprintf( buffer + tmp, ""TUPLTYPE %s\n"", fmt->name );",690,download/opencv_opencv303.cpp
6172803012c679ec345c2e91207874d72ec62a89,"imgcodecs: Implementation of PAM encoder/decoder

This patch implements the PAM image format as defined at:
http://netpbm.sourceforge.net/doc/pam.html

The PAM format provides a generic means for storing 2 dimensional information.
This is useful for opencv since there are cases where data gets translated into
non standardized formats, which makes it difficult to store and load this information.",modules/imgcodecs/src/grfmt_pam.cpp,+,"tmp += sprintf( buffer + tmp, ""ENDHDR\n"" );",691,download/opencv_opencv303.cpp
dfe4519c074da92ac7151f90fe875a9c38176ddc,Add QR decomposition to HAL,modules/core/test/test_math.cpp,+,"ASSERT_FALSE(solve(A, B, solutionQR, DECOMP_QR));",3042,download/opencv_opencv304.cpp
aaa335b617123309a89a38d74c1c71d97e8ee22c,"Add the possibility to use a video stream with the peopledetect.cpp sample.

Fixed video input argument.",samples/cpp/peopledetect.cpp,+,parser.printMessage();,71,download/opencv_opencv305.cpp
aaa335b617123309a89a38d74c1c71d97e8ee22c,"Add the possibility to use a video stream with the peopledetect.cpp sample.

Fixed video input argument.",samples/cpp/peopledetect.cpp,+,throw runtime_error(msg.str());,128,download/opencv_opencv305.cpp
aaa335b617123309a89a38d74c1c71d97e8ee22c,"Add the possibility to use a video stream with the peopledetect.cpp sample.

Fixed video input argument.",samples/cpp/peopledetect.cpp,+,"throw runtime_error(string(""can't open video file: "" + video_filename));",135,download/opencv_opencv305.cpp
0a3a2df4333bfbf6a43f96a3fa2415f17c7145b9,fixed U non-orthogonality in SVD (http://code.opencv.org/issues/3801),modules/core/test/test_mat.cpp,+,"ASSERT_LT(norm(mat_U, Mat::eye(2, 2, type), NORM_INF), 1e-5);",932,download/opencv_opencv306.cpp
b28d13430c78e9df7e6e2a50b34c0fbd717ff8d1,fixed http://code.opencv.org/issues/3828,modules/core/test/test_arithm.cpp,+,ASSERT_TRUE(pts.empty() && pts2.empty());,1821,download/opencv_opencv307.cpp
f773f45d906cd55ee8917f3bf6d3a38cd6efc27d,Updated HAL interface for separable filters to address that both kernels are vectors.,modules/imgproc/src/filter.cpp,-,CV_Assert(kernelX.type() == kernelY.type());,5044,download/opencv_opencv308.cpp
f773f45d906cd55ee8917f3bf6d3a38cd6efc27d,Updated HAL interface for separable filters to address that both kernels are vectors.,modules/imgproc/src/filter.cpp,+,CV_Assert( kernelX.type() == kernelY.type() &&,5044,download/opencv_opencv308.cpp
0a30f64f12afd5ccdc220c8660381d11e8f51683,Merge pull request #7206 from alalek:issue_7204,modules/imgproc/src/samplers.cpp,+,CV_DbgAssert(fabs(center.x - ip.x) <= 1.0f && fabs(center.y - ip.y) <= 1.0f);,395,download/opencv_opencv309.cpp
a6e5ebafcf1ba5fa4b27f23b0581dee917e3198c,calib3d: fix cornerSubPix memory error,modules/imgproc/src/samplers.cpp,+,CV_DbgAssert(fabs(center.x - ip.x) <= 1.0f && fabs(center.y - ip.y) <= 1.0f);,395,download/opencv_opencv310.cpp
40b870704edf3c89288a5cc7d81507e1103684c9,"add 2 extra methods to ml::TrainData (#7169)

* expose 2 extra methods from ml::TrainData: getNames() and getVarSymbolFlags(). The first one returns text labels from CSV (if the data has been loaded from CSV); the second one returns a matrix of boolean values; its n-th element is 1 iff the corresponding column in the CSV uses symbolic names, not numbers.

* check that the dynamic_cast succeeds",modules/ml/src/data.cpp,+,CV_Assert(vsymbolflags[i] == sflag || rowtypes[i] == VAR_MISSED);,610,download/opencv_opencv311.cpp
40b870704edf3c89288a5cc7d81507e1103684c9,"add 2 extra methods to ml::TrainData (#7169)

* expose 2 extra methods from ml::TrainData: getNames() and getVarSymbolFlags(). The first one returns text labels from CSV (if the data has been loaded from CSV); the second one returns a matrix of boolean values; its n-th element is 1 iff the corresponding column in the CSV uses symbolic names, not numbers.

* check that the dynamic_cast succeeds",modules/ml/src/data.cpp,+,CV_Assert(impl != 0);,1003,download/opencv_opencv311.cpp
40b870704edf3c89288a5cc7d81507e1103684c9,"add 2 extra methods to ml::TrainData (#7169)

* expose 2 extra methods from ml::TrainData: getNames() and getVarSymbolFlags(). The first one returns text labels from CSV (if the data has been loaded from CSV); the second one returns a matrix of boolean values; its n-th element is 1 iff the corresponding column in the CSV uses symbolic names, not numbers.

* check that the dynamic_cast succeeds",modules/ml/src/data.cpp,+,CV_Assert( label > 0 && label <= (int)n );,1013,download/opencv_opencv311.cpp
40b870704edf3c89288a5cc7d81507e1103684c9,"add 2 extra methods to ml::TrainData (#7169)

* expose 2 extra methods from ml::TrainData: getNames() and getVarSymbolFlags(). The first one returns text labels from CSV (if the data has been loaded from CSV); the second one returns a matrix of boolean values; its n-th element is 1 iff the corresponding column in the CSV uses symbolic names, not numbers.

* check that the dynamic_cast succeeds",modules/ml/src/data.cpp,+,CV_Assert(impl != 0);,1021,download/opencv_opencv311.cpp
5ddd25313fa77f033325035f16adba0068a6f018,"Add Grana's connected components algorithm for 8-way connectivity. (#6823)

* Add Grana's connected components algorithm for 8-way connectivity. That algorithm is faster than Wu's one (currently implemented in opencv). For more details see https://github.com/prittt/YACCLAB.

* New functions signature and distance transform compatibility

* Add tests to imgproc/test/test_connectedcomponents.cpp

* Change of test_connectedcomponents.cpp for c++98 support",modules/imgproc/src/connectedcomponents.cpp,+,CV_Assert(img.rows == imgLabels.rows);,346,download/opencv_opencv312.cpp
5ddd25313fa77f033325035f16adba0068a6f018,"Add Grana's connected components algorithm for 8-way connectivity. (#6823)

* Add Grana's connected components algorithm for 8-way connectivity. That algorithm is faster than Wu's one (currently implemented in opencv). For more details see https://github.com/prittt/YACCLAB.

* New functions signature and distance transform compatibility

* Add tests to imgproc/test/test_connectedcomponents.cpp

* Change of test_connectedcomponents.cpp for c++98 support",modules/imgproc/src/connectedcomponents.cpp,+,CV_Assert(img.cols == imgLabels.cols);,347,download/opencv_opencv312.cpp
5ddd25313fa77f033325035f16adba0068a6f018,"Add Grana's connected components algorithm for 8-way connectivity. (#6823)

* Add Grana's connected components algorithm for 8-way connectivity. That algorithm is faster than Wu's one (currently implemented in opencv). For more details see https://github.com/prittt/YACCLAB.

* New functions signature and distance transform compatibility

* Add tests to imgproc/test/test_connectedcomponents.cpp

* Change of test_connectedcomponents.cpp for c++98 support",modules/imgproc/src/connectedcomponents.cpp,+,CV_Assert(connectivity == 8 || connectivity == 4);,348,download/opencv_opencv312.cpp
5ddd25313fa77f033325035f16adba0068a6f018,"Add Grana's connected components algorithm for 8-way connectivity. (#6823)

* Add Grana's connected components algorithm for 8-way connectivity. That algorithm is faster than Wu's one (currently implemented in opencv). For more details see https://github.com/prittt/YACCLAB.

* New functions signature and distance transform compatibility

* Add tests to imgproc/test/test_connectedcomponents.cpp

* Change of test_connectedcomponents.cpp for c++98 support",modules/imgproc/src/connectedcomponents.cpp,+,CV_Assert(ccltype == CCL_GRANA || ccltype == CCL_WU || ccltype == CCL_DEFAULT);,1662,download/opencv_opencv312.cpp
5ddd25313fa77f033325035f16adba0068a6f018,"Add Grana's connected components algorithm for 8-way connectivity. (#6823)

* Add Grana's connected components algorithm for 8-way connectivity. That algorithm is faster than Wu's one (currently implemented in opencv). For more details see https://github.com/prittt/YACCLAB.

* New functions signature and distance transform compatibility

* Add tests to imgproc/test/test_connectedcomponents.cpp

* Change of test_connectedcomponents.cpp for c++98 support",modules/imgproc/test/test_connectedcomponents.cpp,-,"imwrite(exp_path, labelImage);",132,download/opencv_opencv313.cpp
5ddd25313fa77f033325035f16adba0068a6f018,"Add Grana's connected components algorithm for 8-way connectivity. (#6823)

* Add Grana's connected components algorithm for 8-way connectivity. That algorithm is faster than Wu's one (currently implemented in opencv). For more details see https://github.com/prittt/YACCLAB.

* New functions signature and distance transform compatibility

* Add tests to imgproc/test/test_connectedcomponents.cpp

* Change of test_connectedcomponents.cpp for c++98 support",modules/imgproc/test/test_connectedcomponents.cpp,+,"imwrite(exp_path, labelImage);",136,download/opencv_opencv313.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR(""Cannot parse dt in Base64 header"");",1363,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Invalid `dt` in Base64 header"");",1363,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR(""Cannot parse dt in Base64 header"");",2322,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Invalid `dt` in Base64 header"");",2322,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"icvXMLWriteScalar( CvFileStorage* fs, const char* key, const char* data, int len )",3018,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,check_if_write_struct_is_delayed( fs );,3019,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvXMLWriteScalar( CvFileStorage* fs, const char* key, const char* data, int len )",3021,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,check_if_write_struct_is_delayed( fs );,3023,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""Currently only Base64 data is allowed."" );",3030,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvXMLWriteTag( fs, key, CV_XML_OPENING_TAG, cvAttrList(0,0) );",3036,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"char* ptr = icvFSResizeWriteBuffer( fs, fs->buffer, len );",3037,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvXMLWriteTag( fs, key, CV_XML_CLOSING_TAG, cvAttrList(0,0) );",3040,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""elements with keys can not be written to sequence"" );",3048,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvXMLWriteInt( CvFileStorage* fs, const char* key, int value )",3067,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvXMLWriteScalar( fs, key, ptr, len );",3071,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvXMLWriteReal( CvFileStorage* fs, const char* key, double value )",3076,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvXMLWriteScalar( fs, key, buf, len );",3080,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvXMLWriteString( CvFileStorage* fs, const char* key, const char* str, int quote )",3085,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsNullPtr, ""Null string pointer"" );",3092,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""The written string is too long"" );",3096,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"else if( !cv_isprint(c) || c == '<' || c == '>' || c == '&' || c == '\'' || c == '\""' )",3112,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"sprintf( data, ""#x%02x"", (uchar)c );",3142,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvXMLWriteScalar( fs, key, data, len );",3162,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvXMLWriteComment( CvFileStorage* fs, const char* comment, int eol_comment )",3167,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsNullPtr, ""Null comment"" );",3175,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""Double hyphen \'--\' is not allowed in the comments"" );",3178,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"ptr = icvFSResizeWriteBuffer( fs, ptr, len + 9 );",3192,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"sprintf( ptr, ""<!-- %s -->"", comment );",3193,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"ptr = icvFSResizeWriteBuffer( fs, ptr, (int)(eol - comment) + 1 );",3211,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"ptr = icvFSResizeWriteBuffer( fs, ptr, len );",3220,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"sprintf( ptr, ""-->"" );",3228,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Not supported escape character"" );",3305,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,if ( !cv_isprint(*ptr) ),3322,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Invalid character in the stream"" );",3323,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Abort at parse time"" );",3340,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Key must start with \'\""\'"" );",3349,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"while( cv_isprint(*ptr) && *ptr != '""' );",3355,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Key must end with \'\""\'"" );",3358,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Missing \':\' between key and value"" );",3367,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Key is empty"" );",3371,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Unexpected End-Of-File"" );",3391,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""'\""' - right-quote of string is missing"" );",3421,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""'\""' - right-quote of string is missing"" );",3436,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""'\""' - right-quote of string is missing"" );",3448,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Invalid `dt` in Base64 header"");",3463,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Invalid Base64 data."" );",3472,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Byte size not match elememt size"");",3490,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Unrecognized Base64 header"");",3510,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"case 'u' : { CV_PARSE_ERROR( ""'\\uXXXX' currently not supported"" ); }",3538,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"default  : { CV_PARSE_ERROR( ""Invalid escape character"" ); }",3539,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""'\""' - right-quote of string is missing"" );",3552,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""'\""' - right-quote of string is missing"" );",3567,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""'\""' - right-quote of string is missing"" );",3579,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Invalid numeric value (inconsistent explicit type specification?)"" );",3611,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Value 'null' is not supported by this parser"" );",3622,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Unrecognized value"" );",3636,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""'[' - left-brace of seq is missing"" );",3650,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Unexpected character"" );",3684,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""']' - right-brace of seq is missing"" );",3688,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""'{' - left-brace of map is missing"" );",3698,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""\""type_id\"" should be of type string"" );",3732,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Unexpected character"" );",3755,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""'}' - right-brace of map is missing"" );",3759,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""left-brace of top level is missing"" );",3787,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Unexpected End-Of-File"" );",3791,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvJSONWrite( CvFileStorage* fs, const char* key, const char* data )",3800,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,check_if_write_struct_is_delayed( fs );,3804,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""At present, output Base64 data only."" );",3811,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""The key is an empty"" );",3823,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""The key is too long"" );",3825,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""An attempt to add element without a key to a map, """,3836,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""Key must start with a letter or _"" );",3879,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"ptr = icvFSResizeWriteBuffer( fs, ptr, static_cast<int>(key_len) );",3881,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""Key names may only contain alphanumeric characters [a-zA-Z0-9], '-', '_' and ' '"" );",3890,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"ptr = icvFSResizeWriteBuffer( fs, ptr, static_cast<int>(data_len) );",3901,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvJSONStartWriteStruct( CvFileStorage* fs, const char* key, int struct_flags,",3912,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg,",3920,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"CV_Error( CV_StsError, ""Currently only Base64 data is allowed."" );",3938,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"icvXMLWriteTag( fs, key, CV_XML_OPENING_TAG, cvAttrList(0,0) );",3945,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"char* ptr = icvFSResizeWriteBuffer( fs, fs->buffer, len );",3945,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"icvXMLWriteTag( fs, key, CV_XML_CLOSING_TAG, cvAttrList(0,0) );",3947,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"CV_Error( CV_StsBadArg, ""elements with keys can not be written to sequence"" );",3957,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvJSONWrite( fs, key, data );",3957,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"fs->write_string( fs, ""type_id"", type_name, 1 );",3968,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,icvJSONEndWriteStruct( CvFileStorage* fs ),3973,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""EndWriteStruct w/o matching StartWriteStruct"" );",3976,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,assert( fs->struct_indent >= 0 );,3983,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,icvJSONEndWriteStruct(fs);,4019,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"icvXMLWriteInt( CvFileStorage* fs, const char* key, int value )",4029,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvJSONWriteInt( CvFileStorage* fs, const char* key, int value )",4029,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"icvXMLWriteScalar( fs, key, ptr, len );",4033,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvJSONWrite( fs, key, icv_itoa( value, buf, 10 ));",4034,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"icvXMLWriteReal( CvFileStorage* fs, const char* key, double value )",4039,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvJSONWriteReal( CvFileStorage* fs, const char* key, double value )",4039,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"icvXMLWriteScalar( fs, key, buf, len );",4043,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvJSONWrite( fs, key, icvDoubleToString( buf, value ));",4043,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"icvXMLWriteString( CvFileStorage* fs, const char* key, const char* str, int quote )",4048,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvJSONWriteString( CvFileStorage* fs, const char* key,",4048,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"else if( !cv_isprint(c) || c == '<' || c == '>' || c == '&' || c == '\'' || c == '\""' )",4054,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"sprintf( data, ""#x%02x"", (uchar)c );",4084,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"icvXMLWriteScalar( fs, key, data, len );",4114,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvJSONWrite( fs, key, data );",4114,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"icvXMLWriteComment( CvFileStorage* fs, const char* comment, int eol_comment )",4119,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvJSONWriteComment( CvFileStorage* fs, const char* comment, int eol_comment )",4119,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"CV_Error( CV_StsBadArg, ""Double hyphen \'--\' is not allowed in the comments"" );",4130,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"ptr = icvFSResizeWriteBuffer( fs, ptr, len + 9 );",4147,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"sprintf( ptr, ""<!-- %s -->"", comment );",4147,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"ptr = icvFSResizeWriteBuffer( fs, ptr, (int)(eol - comment) + 1 );",4172,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"ptr = icvFSResizeWriteBuffer( fs, ptr, len );",4180,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"ptr = icvFSResizeWriteBuffer( fs, ptr, (int)(eol - comment) + 1 );",4186,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,-,"sprintf( ptr, ""-->"" );",4192,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"ptr = icvFSResizeWriteBuffer( fs, ptr, len );",4197,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""Could not find '}' in the end of file.\n"" );",4376,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/src/persistence.cpp,+,"icvJSONWrite( fs, 0, ptr );",4816,download/opencv_opencv314.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,-,CV_Assert( mi2.empty() );,495,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,-,CV_Assert( mv2.empty() );,495,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,-,"CV_Assert( cvtest::norm(Mat(mi3), Mat(mi4), CV_C) == 0 );",495,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,-,CV_Assert( mv4.size() == 1 );,495,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,-,CV_Assert( vudt2.empty() );,496,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,-,CV_Assert( vudt3 == vudt4 );,496,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,-,CV_Assert( n == 0 );,496,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,-,CV_Assert( op1 == p1 );,496,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,-,CV_Assert( op2 == p2 );,496,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,-,CV_Assert( os1 == s1 );,496,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,-,CV_Assert( oc1 == c1 );,496,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,-,CV_Assert( or1 == r1 );,496,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,-,CV_Assert( ov1 == v1 );,496,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,-,CV_Assert( osc1 == sc1 );,496,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,-,CV_Assert( og1 == g1 );,496,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,+,CV_Assert( mi2.empty() );,557,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,+,CV_Assert( mv2.empty() );,558,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,+,"CV_Assert( cvtest::norm(Mat(mi3), Mat(mi4), CV_C) == 0 );",559,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,+,CV_Assert( mv4.size() == 1 );,560,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,+,CV_Assert( vudt2.empty() );,562,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,+,CV_Assert( vudt3 == vudt4 );,563,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,+,CV_Assert( n == 0 );,564,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,+,CV_Assert( op1 == p1 );,565,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,+,CV_Assert( op2 == p2 );,566,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,+,CV_Assert( os1 == s1 );,567,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,+,CV_Assert( oc1 == c1 );,568,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,+,CV_Assert( or1 == r1 );,569,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,+,CV_Assert( ov1 == v1 );,570,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,+,CV_Assert( osc1 == sc1 );,571,download/opencv_opencv315.cpp
b03e3abd62568653777bd47c3471b985a5121491,Merge pull request #7088 from wiryls:FileStorageJSON,modules/core/test/test_io.cpp,+,CV_Assert( og1 == g1 );,572,download/opencv_opencv315.cpp
767780a4b28d2c75f67f00e5cce9a3a4e13d36df,add VideoCapture / VideoWriter AVFoundation implementation for Mac,modules/videoio/src/cap.cpp,+,"TRY_OPEN(result, cvCreateVideoWriter_AVFoundation_Mac(filename, fourcc, fps, frameSize, is_color))",407,download/opencv_opencv316.cpp
b3b434e221b99a237b989cfbf90ffe6e6af6fab1,Merge pull request #7141 from lupustr3:pvlasov/instrumentation_extension,modules/core/src/mathfuncs.cpp,-,CV_Assert(ippFunc != 0);,528,download/opencv_opencv317.cpp
b3b434e221b99a237b989cfbf90ffe6e6af6fab1,Merge pull request #7141 from lupustr3:pvlasov/instrumentation_extension,modules/core/src/mathfuncs.cpp,+,CV_Assert(ippsPolarToCart != 0);,531,download/opencv_opencv317.cpp
b3b434e221b99a237b989cfbf90ffe6e6af6fab1,Merge pull request #7141 from lupustr3:pvlasov/instrumentation_extension,modules/core/src/stat.cpp,-,CV_Assert(!ippFuncHint || !ippFuncNoHint);,1168,download/opencv_opencv318.cpp
b3b434e221b99a237b989cfbf90ffe6e6af6fab1,Merge pull request #7141 from lupustr3:pvlasov/instrumentation_extension,modules/core/src/stat.cpp,+,CV_Assert(!ippiSumHint || !ippiSum);,1169,download/opencv_opencv318.cpp
b3b434e221b99a237b989cfbf90ffe6e6af6fab1,Merge pull request #7141 from lupustr3:pvlasov/instrumentation_extension,modules/core/src/stat.cpp,-,CV_Assert(!ippFuncHint || !ippFuncNoHint);,1442,download/opencv_opencv318.cpp
b3b434e221b99a237b989cfbf90ffe6e6af6fab1,Merge pull request #7141 from lupustr3:pvlasov/instrumentation_extension,modules/core/src/stat.cpp,+,CV_Assert(!ippiMeanHint || !ippiMean);,1443,download/opencv_opencv318.cpp
b3b434e221b99a237b989cfbf90ffe6e6af6fab1,Merge pull request #7141 from lupustr3:pvlasov/instrumentation_extension,modules/core/src/stat.cpp,-,CV_Assert(!ippFuncHint || !ippFuncNoHint);,2838,download/opencv_opencv318.cpp
b3b434e221b99a237b989cfbf90ffe6e6af6fab1,Merge pull request #7141 from lupustr3:pvlasov/instrumentation_extension,modules/core/src/stat.cpp,+,CV_Assert(!ippiNormHint || !ippiNorm);,2839,download/opencv_opencv318.cpp
b3b434e221b99a237b989cfbf90ffe6e6af6fab1,Merge pull request #7141 from lupustr3:pvlasov/instrumentation_extension,modules/core/src/stat.cpp,-,CV_Assert(!ippFuncHint || !ippFuncNoHint);,3360,download/opencv_opencv318.cpp
b3b434e221b99a237b989cfbf90ffe6e6af6fab1,Merge pull request #7141 from lupustr3:pvlasov/instrumentation_extension,modules/core/src/stat.cpp,+,CV_Assert(!ippiNormDiffHint || !ippiNormDiff);,3361,download/opencv_opencv318.cpp
5ee2051863fb30aa6bb6d2e8d8ea3283ef64396b,Merge pull request #7142 from alalek:fix_hls_test_check,modules/imgproc/test/ocl/test_color.cpp,+,"ASSERT_EQ(dst_roi.type(), udst_roi.type());",109,download/opencv_opencv319.cpp
5ee2051863fb30aa6bb6d2e8d8ea3283ef64396b,Merge pull request #7142 from alalek:fix_hls_test_check,modules/imgproc/test/ocl/test_color.cpp,+,"ASSERT_EQ(dst_roi.size(), udst_roi.size());",110,download/opencv_opencv319.cpp
30a6cee2fe71045afd498027ecaab34647469c01,Instrumentation for OpenCV API regions and IPP functions;,modules/core/src/mathfuncs.cpp,-,CV_Assert(ippFunc != 0);,528,download/opencv_opencv320.cpp
30a6cee2fe71045afd498027ecaab34647469c01,Instrumentation for OpenCV API regions and IPP functions;,modules/core/src/mathfuncs.cpp,+,CV_Assert(ippsPolarToCart != 0);,531,download/opencv_opencv320.cpp
30a6cee2fe71045afd498027ecaab34647469c01,Instrumentation for OpenCV API regions and IPP functions;,modules/core/src/stat.cpp,-,CV_Assert(!ippFuncHint || !ippFuncNoHint);,1168,download/opencv_opencv321.cpp
30a6cee2fe71045afd498027ecaab34647469c01,Instrumentation for OpenCV API regions and IPP functions;,modules/core/src/stat.cpp,+,CV_Assert(!ippiSumHint || !ippiSum);,1169,download/opencv_opencv321.cpp
30a6cee2fe71045afd498027ecaab34647469c01,Instrumentation for OpenCV API regions and IPP functions;,modules/core/src/stat.cpp,-,CV_Assert(!ippFuncHint || !ippFuncNoHint);,1442,download/opencv_opencv321.cpp
30a6cee2fe71045afd498027ecaab34647469c01,Instrumentation for OpenCV API regions and IPP functions;,modules/core/src/stat.cpp,+,CV_Assert(!ippiMeanHint || !ippiMean);,1443,download/opencv_opencv321.cpp
30a6cee2fe71045afd498027ecaab34647469c01,Instrumentation for OpenCV API regions and IPP functions;,modules/core/src/stat.cpp,-,CV_Assert(!ippFuncHint || !ippFuncNoHint);,2838,download/opencv_opencv321.cpp
30a6cee2fe71045afd498027ecaab34647469c01,Instrumentation for OpenCV API regions and IPP functions;,modules/core/src/stat.cpp,+,CV_Assert(!ippiNormHint || !ippiNorm);,2839,download/opencv_opencv321.cpp
30a6cee2fe71045afd498027ecaab34647469c01,Instrumentation for OpenCV API regions and IPP functions;,modules/core/src/stat.cpp,-,CV_Assert(!ippFuncHint || !ippFuncNoHint);,3360,download/opencv_opencv321.cpp
30a6cee2fe71045afd498027ecaab34647469c01,Instrumentation for OpenCV API regions and IPP functions;,modules/core/src/stat.cpp,+,CV_Assert(!ippiNormDiffHint || !ippiNormDiff);,3361,download/opencv_opencv321.cpp
86a515fdae7cfd705c412192bced041e9200255c,imgproc: fix accuracy check for HLS cvtColor,modules/imgproc/test/ocl/test_color.cpp,+,"ASSERT_EQ(dst_roi.type(), udst_roi.type());",109,download/opencv_opencv322.cpp
86a515fdae7cfd705c412192bced041e9200255c,imgproc: fix accuracy check for HLS cvtColor,modules/imgproc/test/ocl/test_color.cpp,+,"ASSERT_EQ(dst_roi.size(), udst_roi.size());",110,download/opencv_opencv322.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"static void printShift(cv::instr::InstrNode *pNode, cv::instr::InstrNode* pRoot)",734,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printShift(pNode->m_pParent->m_childs[parendIdx-1]->m_childs[0], pRoot);",742,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf(""\n"");",743,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf(""    "");",760,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf(""|   "");",762,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"static void printNodeRec(cv::instr::InstrNode *pNode, cv::instr::InstrNode *pRoot)",785,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf(""%s"", (pNode->m_payload.m_funName.substr(0, 40) + ((pNode->m_payload.m_funName.size()>40)?""..."":"""")).c_str());",787,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf(""<"");",792,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf(""W"");",794,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf(""F"");",796,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf(""MARK"");",798,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf(""_"");",801,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf(""IPP"");",804,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf(""OCL"");",806,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf("">"");",808,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf("" - C:%d"", pNode->m_payload.m_counter);",813,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf("" T:%.4fms"", (double)pNode->m_payload.m_ticksMean/cv::getTickFrequency()*1000);",814,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf("" L:%.0f%% G:%.0f%%"", calcLocalWeight(pNode), calcGlobalWeight(pNode));",816,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf(""\n"");",818,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printShift(pNode->m_childs[i], pRoot);",846,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf(""\\---"");",849,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf(""|---"");",851,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printNodeRec(pNode->m_childs[i], pRoot);",852,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,void InstumentData::printTree(),929,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf(""[ TRACE    ]\n"");",933,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printNodeRec(cv::instr::getTrace(), cv::instr::getTrace());",934,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf(""\nIPP weight: %.1f%%"", ((double)getImplTime(cv::instr::IMPL_IPP)*100/(double)getTotalTime()));",936,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf(""\nOPENCL weight: %.1f%%"", ((double)getImplTime(cv::instr::IMPL_OPENCL)*100/(double)getTotalTime()));",939,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,"printf(""\n[/TRACE    ]\n"");",941,download/opencv_opencv323.cpp
93e5947f55f04ad6590cb889206a633683cb01be,Merge pull request #7101 from lupustr3:pvlasov/instrumentation,modules/ts/src/ts_perf.cpp,+,InstumentData::printTree();,1892,download/opencv_opencv323.cpp
185fe7aa1b1741603d138f0a2865137c5ae32563,Merge pull request #7094 from terfendail:MSER_fix,modules/features2d/src/mser.cpp,+,"CV_Error(Error::StsBadArg, ""Input image is too small. Expected at least 3x3"");",1031,download/opencv_opencv324.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"static void printShift(cv::instr::InstrNode *pNode, cv::instr::InstrNode* pRoot)",734,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printShift(pNode->m_pParent->m_childs[parendIdx-1]->m_childs[0], pRoot);",742,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf(""\n"");",743,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf(""    "");",760,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf(""|   "");",762,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"static void printNodeRec(cv::instr::InstrNode *pNode, cv::instr::InstrNode *pRoot)",785,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf(""%s"", (pNode->m_payload.m_funName.substr(0, 40) + ((pNode->m_payload.m_funName.size()>40)?""..."":"""")).c_str());",787,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf(""<"");",792,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf(""W"");",794,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf(""F"");",796,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf(""MARK"");",798,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf(""_"");",801,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf(""IPP"");",804,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf(""OCL"");",806,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf("">"");",808,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf("" - C:%d"", pNode->m_payload.m_counter);",813,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf("" T:%.4fms"", (double)pNode->m_payload.m_ticksMean/cv::getTickFrequency()*1000);",814,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf("" L:%.0f%% G:%.0f%%"", calcLocalWeight(pNode), calcGlobalWeight(pNode));",816,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf(""\n"");",818,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printShift(pNode->m_childs[i], pRoot);",846,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf(""\\---"");",849,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf(""|---"");",851,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printNodeRec(pNode->m_childs[i], pRoot);",852,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,void InstumentData::printTree(),929,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf(""[ TRACE    ]\n"");",933,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printNodeRec(cv::instr::getTrace(), cv::instr::getTrace());",934,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf(""\nIPP weight: %.1f%%"", ((double)getImplTime(cv::instr::IMPL_IPP)*100/(double)getTotalTime()));",936,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf(""\nOPENCL weight: %.1f%%"", ((double)getImplTime(cv::instr::IMPL_OPENCL)*100/(double)getTotalTime()));",939,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,"printf(""\n[/TRACE    ]\n"");",941,download/opencv_opencv325.cpp
a462d76a955a6e4a82f2e0f6adad8ac91afe2656,Implementations instrumentation framework for OpenCV performance system;,modules/ts/src/ts_perf.cpp,+,InstumentData::printTree();,1892,download/opencv_opencv325.cpp
45a21555c791a4f9970f2ad98f44a9734ab48115,Merge pull request #7117 from patsp:fix_tiff_imdecode_remove_temporary_file,modules/imgcodecs/src/loadsave.cpp,+,"CV_Error( CV_StsError, ""unable to remove temporary file"" );",524,download/opencv_opencv326.cpp
45a21555c791a4f9970f2ad98f44a9734ab48115,Merge pull request #7117 from patsp:fix_tiff_imdecode_remove_temporary_file,modules/imgcodecs/src/loadsave.cpp,+,"CV_Error( CV_StsError, ""unable to remove temporary file"" );",572,download/opencv_opencv326.cpp
45a21555c791a4f9970f2ad98f44a9734ab48115,Merge pull request #7117 from patsp:fix_tiff_imdecode_remove_temporary_file,modules/imgcodecs/test/test_grfmt.cpp,+,ASSERT_FALSE(img.empty());,898,download/opencv_opencv327.cpp
84e17126593c40e38305fad6a16e81545a8f687c,"Fix temporary file removal in imdecode for tiff

The TiffDecoder keeps an open file handle.
As a consequence the file cannot be removed
before the TiffDecoder closes the file.",modules/imgcodecs/src/loadsave.cpp,+,"CV_Error( CV_StsError, ""unable to remove temporary file"" );",524,download/opencv_opencv328.cpp
84e17126593c40e38305fad6a16e81545a8f687c,"Fix temporary file removal in imdecode for tiff

The TiffDecoder keeps an open file handle.
As a consequence the file cannot be removed
before the TiffDecoder closes the file.",modules/imgcodecs/src/loadsave.cpp,+,"CV_Error( CV_StsError, ""unable to remove temporary file"" );",572,download/opencv_opencv328.cpp
84e17126593c40e38305fad6a16e81545a8f687c,"Fix temporary file removal in imdecode for tiff

The TiffDecoder keeps an open file handle.
As a consequence the file cannot be removed
before the TiffDecoder closes the file.",modules/imgcodecs/test/test_grfmt.cpp,+,ASSERT_FALSE(img.empty());,898,download/opencv_opencv329.cpp
62c1a5a15232ddc9cc97b46d0d3c07a4c5b35d9e,Replaced quiet return from MSER:detectRegion function with exeption throwing to notify user in case small image is processed,modules/features2d/src/mser.cpp,+,"CV_Error(Error::StsBadArg, ""Input image is too small. Expected at least 3x3"");",1029,download/opencv_opencv330.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs.cpp,-,setIppErrorStatus();,631,download/opencv_opencv331.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs.cpp,-,setIppErrorStatus();,644,download/opencv_opencv331.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs.cpp,-,"static void Log_32f_ipp(const float *x, float *y, int n)",653,download/opencv_opencv331.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs.cpp,-,setIppErrorStatus();,661,download/opencv_opencv331.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs.cpp,-,"hal::log32f(x, y, n);",662,download/opencv_opencv331.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs.cpp,-,"static void Log_64f_ipp(const double *x, double *y, int n)",664,download/opencv_opencv331.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs.cpp,-,setIppErrorStatus();,672,download/opencv_opencv331.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs.cpp,-,"hal::log64f(x, y, n);",673,download/opencv_opencv331.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs.cpp,-,"Log_32f( (const float*)ptrs[0], (float*)ptrs[1], len );",672,download/opencv_opencv331.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs.cpp,+,"hal::log32f( (const float*)ptrs[0], (float*)ptrs[1], len );",672,download/opencv_opencv331.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs.cpp,-,"Log_64f( (const double*)ptrs[0], (double*)ptrs[1], len );",674,download/opencv_opencv331.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs.cpp,+,"hal::log64f( (const double*)ptrs[0], (double*)ptrs[1], len );",674,download/opencv_opencv331.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs.cpp,-,"Log_32f(x, y, bsz);",1275,download/opencv_opencv331.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs.cpp,+,"hal::log32f(x, y, bsz);",1275,download/opencv_opencv331.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs.cpp,-,"Log_64f(x, y, bsz);",1302,download/opencv_opencv331.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs.cpp,+,"hal::log64f(x, y, bsz);",1302,download/opencv_opencv331.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs_core.cpp,-,setIppErrorStatus();,234,download/opencv_opencv332.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs_core.cpp,-,setIppErrorStatus();,260,download/opencv_opencv332.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs_core.cpp,-,setIppErrorStatus();,286,download/opencv_opencv332.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs_core.cpp,-,setIppErrorStatus();,326,download/opencv_opencv332.cpp
cd943cc60d392cf1a56e77cc95f1b065a117b99c,Merge pull request #7106 from lupustr3:pvlasov/ipp_hal_fix,modules/core/src/mathfuncs_core.cpp,-,setIppErrorStatus();,348,download/opencv_opencv332.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs.cpp,-,setIppErrorStatus();,631,download/opencv_opencv333.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs.cpp,-,setIppErrorStatus();,644,download/opencv_opencv333.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs.cpp,-,"static void Log_32f_ipp(const float *x, float *y, int n)",653,download/opencv_opencv333.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs.cpp,-,setIppErrorStatus();,661,download/opencv_opencv333.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs.cpp,-,"hal::log32f(x, y, n);",662,download/opencv_opencv333.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs.cpp,-,"static void Log_64f_ipp(const double *x, double *y, int n)",664,download/opencv_opencv333.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs.cpp,-,setIppErrorStatus();,672,download/opencv_opencv333.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs.cpp,-,"hal::log64f(x, y, n);",673,download/opencv_opencv333.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs.cpp,-,"Log_32f( (const float*)ptrs[0], (float*)ptrs[1], len );",672,download/opencv_opencv333.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs.cpp,+,"hal::log32f( (const float*)ptrs[0], (float*)ptrs[1], len );",672,download/opencv_opencv333.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs.cpp,-,"Log_64f( (const double*)ptrs[0], (double*)ptrs[1], len );",674,download/opencv_opencv333.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs.cpp,+,"hal::log64f( (const double*)ptrs[0], (double*)ptrs[1], len );",674,download/opencv_opencv333.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs.cpp,-,"Log_32f(x, y, bsz);",1275,download/opencv_opencv333.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs.cpp,+,"hal::log32f(x, y, bsz);",1275,download/opencv_opencv333.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs.cpp,-,"Log_64f(x, y, bsz);",1302,download/opencv_opencv333.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs.cpp,+,"hal::log64f(x, y, bsz);",1302,download/opencv_opencv333.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs_core.cpp,-,setIppErrorStatus();,234,download/opencv_opencv334.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs_core.cpp,-,setIppErrorStatus();,260,download/opencv_opencv334.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs_core.cpp,-,setIppErrorStatus();,286,download/opencv_opencv334.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs_core.cpp,-,setIppErrorStatus();,326,download/opencv_opencv334.cpp
3860b8db02e93c71e1a5e9bbc5dafbbebbd81fec,"IPP was enabled in mathfuncs_core;
Exp and Log IPP implementations are changed to hal interface;",modules/core/src/mathfuncs_core.cpp,-,setIppErrorStatus();,348,download/opencv_opencv334.cpp
74e997f15b20600895896e1a837a0bb3cbf7f07b,Merge pull request #7062 from kurenai:return_if_camera_disconnected,modules/videoio/src/cap_dshow.cpp,+,"DebugPrintOut(""Event: Code: %#04x Params: %d, %d\n"", evCode, param1, param2);",2324,download/opencv_opencv335.cpp
74e997f15b20600895896e1a837a0bb3cbf7f07b,Merge pull request #7062 from kurenai:return_if_camera_disconnected,modules/videoio/src/cap_dshow.cpp,+,"DebugPrintOut(""ERROR: Device disconnected\n"");",2329,download/opencv_opencv335.cpp
74e997f15b20600895896e1a837a0bb3cbf7f07b,Merge pull request #7062 from kurenai:return_if_camera_disconnected,modules/videoio/src/cap_dshow.cpp,+,"DebugPrintOut(""ERROR - Could not create media event object\n"");",2543,download/opencv_opencv335.cpp
d99832163a028b8452f6c0da3c53ca8aea956610,solve warnings and do some cleaning.,modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR(""Cannot parse dt in Base64 header"");",1363,download/opencv_opencv336.cpp
d99832163a028b8452f6c0da3c53ca8aea956610,solve warnings and do some cleaning.,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Invalid `dt` in Base64 header"");",1363,download/opencv_opencv336.cpp
d99832163a028b8452f6c0da3c53ca8aea956610,solve warnings and do some cleaning.,modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR(""Cannot parse dt in Base64 header"");",2322,download/opencv_opencv336.cpp
d99832163a028b8452f6c0da3c53ca8aea956610,solve warnings and do some cleaning.,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Invalid `dt` in Base64 header"");",2322,download/opencv_opencv336.cpp
d99832163a028b8452f6c0da3c53ca8aea956610,solve warnings and do some cleaning.,modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR( ""Unexpected character"" );",3299,download/opencv_opencv336.cpp
d99832163a028b8452f6c0da3c53ca8aea956610,solve warnings and do some cleaning.,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Not supported escape character"" );",3299,download/opencv_opencv336.cpp
d99832163a028b8452f6c0da3c53ca8aea956610,solve warnings and do some cleaning.,modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR( ""Missing \':\'"" );",3361,download/opencv_opencv336.cpp
d99832163a028b8452f6c0da3c53ca8aea956610,solve warnings and do some cleaning.,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Missing \':\' between key and value"" );",3361,download/opencv_opencv336.cpp
d99832163a028b8452f6c0da3c53ca8aea956610,solve warnings and do some cleaning.,modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR( ""An empty key"" );",3365,download/opencv_opencv336.cpp
d99832163a028b8452f6c0da3c53ca8aea956610,solve warnings and do some cleaning.,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Key is empty"" );",3365,download/opencv_opencv336.cpp
d99832163a028b8452f6c0da3c53ca8aea956610,solve warnings and do some cleaning.,modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR(""Cannot parse dt in Base64 header"");",3457,download/opencv_opencv336.cpp
d99832163a028b8452f6c0da3c53ca8aea956610,solve warnings and do some cleaning.,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Invalid `dt` in Base64 header"");",3457,download/opencv_opencv336.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"icvXMLWriteScalar( CvFileStorage* fs, const char* key, const char* data, int len )",3016,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,check_if_write_struct_is_delayed( fs );,3017,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvXMLWriteScalar( CvFileStorage* fs, const char* key, const char* data, int len )",3019,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,check_if_write_struct_is_delayed( fs );,3021,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""Currently only Base64 data is allowed."" );",3028,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvXMLWriteTag( fs, key, CV_XML_OPENING_TAG, cvAttrList(0,0) );",3034,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"char* ptr = icvFSResizeWriteBuffer( fs, fs->buffer, len );",3035,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvXMLWriteTag( fs, key, CV_XML_CLOSING_TAG, cvAttrList(0,0) );",3038,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""elements with keys can not be written to sequence"" );",3046,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvXMLWriteInt( CvFileStorage* fs, const char* key, int value )",3065,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvXMLWriteScalar( fs, key, ptr, len );",3069,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvXMLWriteReal( CvFileStorage* fs, const char* key, double value )",3074,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvXMLWriteScalar( fs, key, buf, len );",3078,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvXMLWriteString( CvFileStorage* fs, const char* key, const char* str, int quote )",3083,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsNullPtr, ""Null string pointer"" );",3090,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""The written string is too long"" );",3094,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"else if( !cv_isprint(c) || c == '<' || c == '>' || c == '&' || c == '\'' || c == '\""' )",3110,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"sprintf( data, ""#x%02x"", (uchar)c );",3140,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvXMLWriteScalar( fs, key, data, len );",3160,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvXMLWriteComment( CvFileStorage* fs, const char* comment, int eol_comment )",3165,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsNullPtr, ""Null comment"" );",3173,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""Double hyphen \'--\' is not allowed in the comments"" );",3176,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"ptr = icvFSResizeWriteBuffer( fs, ptr, len + 9 );",3190,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"sprintf( ptr, ""<!-- %s -->"", comment );",3191,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"ptr = icvFSResizeWriteBuffer( fs, ptr, (int)(eol - comment) + 1 );",3209,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"ptr = icvFSResizeWriteBuffer( fs, ptr, len );",3218,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"sprintf( ptr, ""-->"" );",3226,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Unexpected character"" );",3300,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,if ( !cv_isprint(*ptr) ),3317,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Invalid character in the stream"" );",3318,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Abort at parse time"" );",3335,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Key must start with \'\""\'"" );",3344,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"while( cv_isprint(*ptr) && *ptr != '""' );",3350,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Key must end with \'\""\'"" );",3353,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Missing \':\'"" );",3362,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""An empty key"" );",3366,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Unexpected End-Of-File"" );",3386,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""'\""' - right-quote of string is missing"" );",3416,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""'\""' - right-quote of string is missing"" );",3431,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""'\""' - right-quote of string is missing"" );",3443,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Cannot parse dt in Base64 header"");",3458,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Invalid Base64 data."" );",3467,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Byte size not match elememt size"");",3485,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Unrecognized Base64 header"");",3505,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"case 'u' : { CV_PARSE_ERROR( ""'\\uXXXX' currently not supported"" ); }",3533,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"default  : { CV_PARSE_ERROR( ""Invalid escape character"" ); }",3534,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""'\""' - right-quote of string is missing"" );",3547,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""'\""' - right-quote of string is missing"" );",3562,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""'\""' - right-quote of string is missing"" );",3574,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Invalid numeric value (inconsistent explicit type specification?)"" );",3601,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Value 'null' is not supported by this parser"" );",3612,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Unrecognized value"" );",3626,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""'[' - left-brace of seq is missing"" );",3640,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Unexpected character"" );",3674,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""']' - right-brace of seq is missing"" );",3678,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""'{' - left-brace of map is missing"" );",3688,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""\""type_id\"" should be of type string"" );",3722,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Unexpected character"" );",3745,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""'}' - right-brace of map is missing"" );",3749,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""left-brace of top level is missing"" );",3777,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Unexpected End-Of-File"" );",3781,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvJSONWrite( CvFileStorage* fs, const char* key, const char* data )",3790,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,check_if_write_struct_is_delayed( fs );,3794,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""At present, output Base64 data only."" );",3801,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""The key is an empty"" );",3813,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""The key is too long"" );",3815,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""An attempt to add element without a key to a map, """,3826,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""Key must start with a letter or _"" );",3869,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"ptr = icvFSResizeWriteBuffer( fs, ptr, static_cast<int>(key_len) );",3871,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""Key names may only contain alphanumeric characters [a-zA-Z0-9], '-', '_' and ' '"" );",3880,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"ptr = icvFSResizeWriteBuffer( fs, ptr, static_cast<int>(data_len) );",3891,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvJSONStartWriteStruct( CvFileStorage* fs, const char* key, int struct_flags,",3902,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg,",3910,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"CV_Error( CV_StsError, ""Currently only Base64 data is allowed."" );",3928,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"icvXMLWriteTag( fs, key, CV_XML_OPENING_TAG, cvAttrList(0,0) );",3935,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"char* ptr = icvFSResizeWriteBuffer( fs, fs->buffer, len );",3935,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"icvXMLWriteTag( fs, key, CV_XML_CLOSING_TAG, cvAttrList(0,0) );",3937,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"CV_Error( CV_StsBadArg, ""elements with keys can not be written to sequence"" );",3947,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvJSONWrite( fs, key, data );",3947,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"fs->write_string( fs, ""type_id"", type_name, 1 );",3958,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,icvJSONEndWriteStruct( CvFileStorage* fs ),3963,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""EndWriteStruct w/o matching StartWriteStruct"" );",3966,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,assert( fs->struct_indent >= 0 );,3973,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,icvJSONEndWriteStruct(fs);,4009,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"icvXMLWriteInt( CvFileStorage* fs, const char* key, int value )",4019,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvJSONWriteInt( CvFileStorage* fs, const char* key, int value )",4019,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"icvXMLWriteScalar( fs, key, ptr, len );",4023,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvJSONWrite( fs, key, icv_itoa( value, buf, 10 ));",4024,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"icvXMLWriteReal( CvFileStorage* fs, const char* key, double value )",4029,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvJSONWriteReal( CvFileStorage* fs, const char* key, double value )",4029,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"icvXMLWriteScalar( fs, key, buf, len );",4033,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvJSONWrite( fs, key, icvDoubleToString( buf, value ));",4033,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"icvXMLWriteString( CvFileStorage* fs, const char* key, const char* str, int quote )",4038,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvJSONWriteString( CvFileStorage* fs, const char* key,",4038,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"else if( !cv_isprint(c) || c == '<' || c == '>' || c == '&' || c == '\'' || c == '\""' )",4044,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"sprintf( data, ""#x%02x"", (uchar)c );",4074,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"icvXMLWriteScalar( fs, key, data, len );",4104,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvJSONWrite( fs, key, data );",4104,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"icvXMLWriteComment( CvFileStorage* fs, const char* comment, int eol_comment )",4109,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvJSONWriteComment( CvFileStorage* fs, const char* comment, int eol_comment )",4109,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"CV_Error( CV_StsBadArg, ""Double hyphen \'--\' is not allowed in the comments"" );",4120,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"ptr = icvFSResizeWriteBuffer( fs, ptr, len + 9 );",4137,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"sprintf( ptr, ""<!-- %s -->"", comment );",4137,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"ptr = icvFSResizeWriteBuffer( fs, ptr, (int)(eol - comment) + 1 );",4162,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"ptr = icvFSResizeWriteBuffer( fs, ptr, len );",4170,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"ptr = icvFSResizeWriteBuffer( fs, ptr, (int)(eol - comment) + 1 );",4176,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,-,"sprintf( ptr, ""-->"" );",4182,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"ptr = icvFSResizeWriteBuffer( fs, ptr, len );",4187,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""Could not find '}' in the end of file.\n"" );",4367,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/src/persistence.cpp,+,"icvJSONWrite( fs, 0, ptr );",4807,download/opencv_opencv337.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,-,CV_Assert( mi2.empty() );,495,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,-,CV_Assert( mv2.empty() );,495,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,-,"CV_Assert( cvtest::norm(Mat(mi3), Mat(mi4), CV_C) == 0 );",495,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,-,CV_Assert( mv4.size() == 1 );,495,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,-,CV_Assert( vudt2.empty() );,496,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,-,CV_Assert( vudt3 == vudt4 );,496,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,-,CV_Assert( n == 0 );,496,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,-,CV_Assert( op1 == p1 );,496,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,-,CV_Assert( op2 == p2 );,496,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,-,CV_Assert( os1 == s1 );,496,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,-,CV_Assert( oc1 == c1 );,496,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,-,CV_Assert( or1 == r1 );,496,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,-,CV_Assert( ov1 == v1 );,496,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,-,CV_Assert( osc1 == sc1 );,496,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,-,CV_Assert( og1 == g1 );,496,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,+,CV_Assert( mi2.empty() );,557,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,+,CV_Assert( mv2.empty() );,558,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,+,"CV_Assert( cvtest::norm(Mat(mi3), Mat(mi4), CV_C) == 0 );",559,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,+,CV_Assert( mv4.size() == 1 );,560,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,+,CV_Assert( vudt2.empty() );,562,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,+,CV_Assert( vudt3 == vudt4 );,563,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,+,CV_Assert( n == 0 );,564,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,+,CV_Assert( op1 == p1 );,565,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,+,CV_Assert( op2 == p2 );,566,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,+,CV_Assert( os1 == s1 );,567,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,+,CV_Assert( oc1 == c1 );,568,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,+,CV_Assert( or1 == r1 );,569,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,+,CV_Assert( ov1 == v1 );,570,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,+,CV_Assert( osc1 == sc1 );,571,download/opencv_opencv338.cpp
8596e82d98516c846fb67b1d7d62fb6a6dcd6a5d,"Add JSON support.

a JSON emitter, a parser, tests and some basic doc.",modules/core/test/test_io.cpp,+,CV_Assert( og1 == g1 );,572,download/opencv_opencv338.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,apps/annotation/opencv_annotation.cpp,+,parser.printMessage();,243,download/opencv_opencv339.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,apps/annotation/opencv_annotation.cpp,+,parser.printMessage();,250,download/opencv_opencv339.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,apps/createsamples/createsamples.cpp,+,"printf( ""Max Scale: %g\n"", maxscale);",203,download/opencv_opencv340.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,apps/visualisation/opencv_visualisation.cpp,+,static void printLimits(){,75,download/opencv_opencv341.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,apps/visualisation/opencv_visualisation.cpp,+,printLimits();,93,download/opencv_opencv341.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,apps/visualisation/opencv_visualisation.cpp,+,printLimits();,101,download/opencv_opencv341.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,cmake/checks/fp16.cpp,+,"printf(""%d\n"", test());",31,download/opencv_opencv342.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""THRESHOLD SELECTED = %d, BRIGHTMAX = %d, DARKMAX = %d\n"", iThresh, iBrightMax, piMaxPos[iIdxBGMax]);",399,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""EX quad count: %d/%d\n"", quad_count, expected_corners_num);",513,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Quad count: %d/%d\n"", quad_count, expected_corners_num);",550,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Quad count: %d/%d\n"", quad_count, expected_corners_num);",575,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Starting ordering of inner quads\n"");",606,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Orig count: %d  After ordering: %d\n"", icount, count);",608,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d  orig count: %d cleaned: %d\n"", group_idx, icount, count);",619,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d  count: %d  cleaned: %d\n"", group_idx, icount, count);",624,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Chessboard detection result 0: %d\n"", found);",673,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Starting ordering of inner quads\n"");",677,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Orig count: %d  After ordering: %d\n"", icount, count);",679,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Fallback to old algorithm\n"");",682,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Quad count: %d/%d\n"", quad_count, expected_corners_num);",731,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  orig count: %d cleaned: %d\n"", group_idx, icount, count);",786,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Starting ordering of inner quads\n"");",788,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  count: %d  cleaned: %d\n"", group_idx, icount, count);",792,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Orig count: %d  After ordering: %d\n"", icount, count);",792,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d  orig count: %d cleaned: %d\n"", group_idx, icount, count);",819,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d  count: %d  cleaned: %d\n"", group_idx, icount, count);",824,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Chessboard detection result 1: %d\n"", found);",869,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Chessboard detection result 2: %d\n"", found);",874,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Chessboard detection result 3: %d\n"", found);",734,download/opencv_opencv343.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/checkchessboard.cpp,+,"cvError(CV_BadNumChannels, ""cvCheckChessboard"", ""supports single-channel images only"",",221,download/opencv_opencv344.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/src/checkchessboard.cpp,+,"cvError(CV_BadDepth, ""cvCheckChessboard"", ""supports depth=8 images only"",",227,download/opencv_opencv344.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/calib3d/test/test_cameracalibration.cpp,+,"ts->printf( cvtest::TS::LOG, ""The camera matrix is wrong for downscaled image\n"");",1446,download/opencv_opencv345.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/convert.cpp,+,"CV_Error(Error::StsUnsupportedFormat, ""Unsupported input depth"");",5157,download/opencv_opencv346.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/convert.cpp,+,CV_Assert( func != 0 );,5166,download/opencv_opencv346.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/matrix.cpp,-,"CV_Error(CV_StsUnmatchedSizes, """");",842,download/opencv_opencv347.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/matrix.cpp,+,"CV_Error(CV_StsUnmatchedSizes, ""Pushed vector length is not equal to matrix row length"");",842,download/opencv_opencv347.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/matrix.cpp,-,"CV_Error(CV_StsUnmatchedFormats, """");",844,download/opencv_opencv347.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/matrix.cpp,+,"CV_Error(CV_StsUnmatchedFormats, ""Pushed vector type is not the same as matrix type"");",844,download/opencv_opencv347.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,Base64Writer(::CvFileStorage * fs);,340,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,~Base64Writer();,341,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"void write(const void* _data, size_t len, const char* dt);",342,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"template<typename _to_binary_convertor_t> void write(_to_binary_convertor_t & convertor, const char* dt);",343,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt);",366,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"void cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len);",366,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,void cvEndWriteRawData_Base64(::CvFileStorage * fs);,366,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"void cvWriteRawData_Base64(::cv::FileStorage & fs, const void* _data, int len, const char* dt);",367,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"void cvWriteMat_Base64(CvFileStorage * fs, const char * name, ::cv::Mat const & mat);",367,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"void cvWriteRawDataBase64(::CvFileStorage* fs, const void* _data, int len, const char* dt);",367,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,CV_DbgAssert( fs->base64_writer == 0 );,1119,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,fs->base64_writer = new base64::Base64Writer( fs );,1120,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, err_unkonwn_state );",1127,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, err_unable_to_switch );",1136,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, err_unkonwn_state );",1143,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, err_unable_to_switch );",1152,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, err_unkonwn_state );",1157,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, err_unkonwn_state );",1162,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"static void check_if_write_struct_is_delayed( CvFileStorage* fs, bool change_type_to_base64 = false )",1170,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"fs->start_write_struct( fs, struct_key.c_str(), struct_flags, ""binary"");",1200,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"fs->start_write_struct( fs, struct_key.c_str(), struct_flags, type_name.c_str());",1207,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,static void make_write_struct_delayed(,1216,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,CV_Assert( fs->is_write_struct_delayed == false );,1222,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,CV_DbgAssert( fs->delayed_struct_key   == 0 );,1223,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,CV_DbgAssert( fs->delayed_struct_flags == 0 );,1224,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,CV_DbgAssert( fs->delayed_type_name    == 0 );,1225,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR(""Cannot parse size in Base64 header"");",1343,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Invalid Base64 data."" );",1371,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,check_if_write_struct_is_delayed( fs );,1839,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""At present, output Base64 data only."" );",1846,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,while(cv_isprint(*ptr)) /* no check for base64 string */,2274,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,while( cv_isprint(*ptr) ) /* no check for base64 string */,2274,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR(""Unexpected end of line"");",2277,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Unexpected end of line"" );",2278,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR(""Cannot parse size in Base64 header"");",2301,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Invalid Base64 data."" );",2321,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR(""Byte size not match elememt size"");",2348,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""data size not matches elememt size"");",2348,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,check_if_write_struct_is_delayed( fs );,2997,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""Currently only Base64 data is allowed."" );",3004,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"fs->start_write_struct( fs, key, struct_flags, type_name );",3520,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,check_if_write_struct_is_delayed( fs );,3520,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"make_write_struct_delayed( fs, key, struct_flags, type_name );",3534,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""must set 'struct_flags |= CV_NODE_SEQ' if using Base64."");",3540,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""function \'cvStartWriteStruct\' calls cannot be nested if using Base64."");",3542,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"fs->start_write_struct( fs, key, struct_flags, type_name );",3544,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""At the end of the output Base64, `cvEndWriteStruct` is needed."");",3554,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"fs->start_write_struct( fs, key, struct_flags, type_name );",3556,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,check_if_write_struct_is_delayed( fs );,3569,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"base64::cvWriteRawDataBase64( fs, _data, len, dt );",3754,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"fs->start_write_struct( fs, name, CV_NODE_TYPE(node->tag) +",4090,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"cvStartWriteStruct( fs, name, CV_NODE_TYPE(node->tag) +",4090,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,fs->end_write_struct( fs );,4094,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,cvEndWriteStruct( fs );,4094,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"fs->start_write_struct( fs, name, CV_NODE_SEQ, 0 );",4097,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,fs->end_write_struct( fs );,4097,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"cvStartWriteStruct( fs, name, CV_NODE_SEQ, 0 );",4097,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,cvEndWriteStruct( fs );,4098,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,CV_Assert(it.nplanes > 0U); /* make sure mats not empty */,6885,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"default:     { CV_Assert(!""mat type is invalid""); break; }",6910,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,CV_Assert(!(*this));,6915,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,CV_DbgAssert(*this);,6921,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,base64::Base64Writer::Base64Writer(::CvFileStorage * fs),7174,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"Base64Writer(::CvFileStorage * fs, const char * name, int len, const char* dt)",7183,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"void base64::Base64Writer::write(const void* _data, size_t len, const char* dt)",7189,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"cvStartWriteStruct(fs, name, CV_NODE_SEQ, ""binary"");",7193,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,emitter->write(convertor);,7197,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"void base64::Base64Writer::write(_to_binary_convertor_t & convertor, const char* dt)",7202,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,emitter->write(convertor);,7205,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,base64::Base64Writer::~Base64Writer(),7210,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""Invalid \'dt\'."" );",7219,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"emitter.write(beg, end);",7228,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"void write(const void* _data, int len)",7230,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,CV_Assert(len >= 0);,7231,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,CV_Assert(remaining_data_length >= static_cast<size_t>(len));,7231,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,emitter.write(convertor);,7234,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"void write(_to_binary_convertor_t & convertor, int data_length_of_convertor)",7237,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,CV_Assert(data_length_of_convertor >= 0);,7238,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,CV_Assert(remaining_data_length >= static_cast<size_t>(data_length_of_convertor));,7238,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,emitter.write(convertor);,7240,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,~Base64Writer(),7242,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,CV_Assert(remaining_data_length == 0U);,7243,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,cvEndWriteStruct(file_storage);,7244,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"emitter->write(beg, end);",7248,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""\'dt\' does not match."" );",7250,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"void base64::cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt)",7232,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,CV_Assert(fs);,7233,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,CV_Assert(fs->base64_writer == 0);,7234,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"fs->base64_writer = new Base64Writer(fs, name, len, dt);",7234,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"void base64::cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len)",7236,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"void base64::cvWriteRawDataBase64(::CvFileStorage* fs, const void* _data, int len, const char* dt)",7236,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,CV_Assert(fs->base64_writer != 0);,7240,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"fs->base64_writer->write(_data, len);",7240,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,void base64::cvEndWriteRawData_Base64(::CvFileStorage * fs),7242,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,CV_Assert(fs);,7243,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,CV_Assert(fs->base64_writer != 0);,7244,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"check_if_write_struct_is_delayed( fs, true );",7247,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"void base64::cvWriteRawData_Base64(::cv::FileStorage & fs, const void* _data, int len, const char* dt)",7249,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"cvStartWriteStruct(*fs, fs.elname.c_str(), CV_NODE_SEQ, ""binary"");",7250,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"emitter.write(beg, end);",7260,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,emitter.write(convert);,7263,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,cvEndWriteStruct(*fs);,7265,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"void base64::cvWriteMat_Base64(::CvFileStorage * fs, const char * name, ::cv::Mat const & mat)",7267,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"cvStartWriteStruct(fs, name, CV_NODE_MAP, CV_TYPE_NAME_MAT);",7274,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"cvWriteInt(fs, ""rows"", mat.rows );",7275,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"cvWriteInt(fs, ""cols"", mat.cols );",7275,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"cvStartWriteStruct(fs, name, CV_NODE_MAP, CV_TYPE_NAME_MATND);",7276,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"cvStartWriteStruct(fs, ""sizes"", CV_NODE_SEQ | CV_NODE_FLOW);",7277,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"cvWriteRawData(fs, mat.size.p, mat.dims, ""i"");",7277,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,cvEndWriteStruct(fs);,7277,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"cvWriteString(fs, ""dt"", ::icvEncodeFormat(CV_MAT_TYPE(mat.type()), dt ), 0 );",7278,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"cvStartWriteRawData_Base64(fs, ""data"", len, dt);",7285,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"fs->base64_writer->write(convertor, len);",7285,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,cvEndWriteRawData_Base64(fs);,7285,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""Base64 should not be used at present."" );",7287,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,cvEndWriteStruct(fs);,7291,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"fs->base64_writer->write(_data, len, dt);",7292,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"CV_IMPL void cvWriteRawDataBase64(::CvFileStorage* fs, const void* _data, int len, const char* dt)",7300,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"void cvWriteMat_Base64(::CvFileStorage* fs, const char* name, const ::CvMat* mat)",7302,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"::base64::cvWriteMat_Base64(fs, name, holder);",7304,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"void cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const ::CvMatND* mat)",7306,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"::base64::cvWriteMat_Base64(fs, name, holder);",7308,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt)",7310,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"::base64::cvStartWriteRawData_Base64(fs, name, len, dt);",7311,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"void cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len)",7313,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,"::base64::cvWriteRawData_Base64(fs, _data, len);",7314,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,void cvEndWriteRawData_Base64(::CvFileStorage * fs),7316,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,-,::base64::cvEndWriteRawData_Base64(fs);,7317,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/src/persistence.cpp,+,"::base64::cvWriteRawDataBase64(fs, _data, len, dt);",7319,download/opencv_opencv348.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_arithm.cpp,+,"ASSERT_EQ(0, cv::norm(cv::Mat(5, 5, CV_8UC3, cv::Scalar::all(250)), destImage, cv::NORM_INF));",1925,download/opencv_opencv349.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_arithm.cpp,+,"ASSERT_EQ(0, cv::norm(cv::Mat(5, 5, CV_8UC4, cv::Scalar::all(250)), destImage, cv::NORM_INF));",1934,download/opencv_opencv349.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,-,"cv::cvWriteMat_Base64(*fs, ""normal_2d_mat"", &holder);",690,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,-,"cv::cvWriteMatND_Base64(*fs, ""normal_nd_mat"", &holder_nd);",691,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,-,"cv::cvWriteMat_Base64(*fs, ""empty_2d_mat"", &holder);",692,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,-,"cv::cvStartWriteRawData_Base64(*fs, ""rawdata"", static_cast<int>(rawdata.size()), ""2u3i2di"");",693,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,-,"cv::cvWriteRawData_Base64(*fs, rawdata.data() + i * 100, 100);",694,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,-,cv::cvEndWriteRawData_Base64(*fs);,694,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,"cvStartWriteStruct( *fs, ""rawdata"", CV_NODE_SEQ | CV_NODE_FLOW, ""binary"" );",786,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,"cvWriteRawDataBase64(*fs, rawdata.data() + i * 100, 100, data_t::signature());",788,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,cvEndWriteStruct( *fs );,789,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, ""manydata"", CV_NODE_SEQ);",881,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW);",882,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,"cvWriteRawData(*fs, rawdata.data(), static_cast<int>(rawdata.size()), ""i"");",884,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,cvEndWriteStruct(*fs);,885,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,"cvWriteString(*fs, 0, str_out.c_str(), 1);",886,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,cvEndWriteStruct(*fs);,887,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, ""manydata"", CV_NODE_SEQ);",909,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,"cvWriteString(*fs, 0, str_out.c_str(), 1);",910,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW, ""binary"");",911,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,"cvWriteRawData(*fs, rawdata.data(), static_cast<int>(rawdata.size()), ""i"");",913,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,cvEndWriteStruct(*fs);,914,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,cvEndWriteStruct(*fs);,915,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, ""rawdata"", CV_NODE_SEQ, ""binary"");",954,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW);",955,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, ""rawdata"", CV_NODE_SEQ);",960,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW);",961,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_io.cpp,+,"cvWriteRawDataBase64(*fs, name, 1, ""u"");",962,download/opencv_opencv350.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_mat.cpp,+,"ASSERT_EQ(6, result.rows);",1539,download/opencv_opencv351.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_mat.cpp,+,ASSERT_NO_THROW(cloned = source.clone());,1547,download/opencv_opencv351.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_rand.cpp,+,"ASSERT_EQ(param1, -9);",382,download/opencv_opencv352.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/core/test/test_rand.cpp,+,"ASSERT_EQ(param2,  2);",383,download/opencv_opencv352.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/imgproc/src/canny.cpp,+,CV_Assert(_dx.dims() == 2);,826,download/opencv_opencv353.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/imgproc/src/canny.cpp,+,CV_Assert(_dx.type() == CV_16SC1 || _dx.type() == CV_16SC3);,827,download/opencv_opencv353.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/imgproc/src/canny.cpp,+,CV_Assert(_dy.type() == _dx.type());,828,download/opencv_opencv353.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/imgproc/src/canny.cpp,+,CV_Assert(_dx.sameSize(_dy));,829,download/opencv_opencv353.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/imgproc/src/thresh.cpp,-,"CV_Error( CV_StsBadArg, ""Unknown threshold type"" );",176,download/opencv_opencv354.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/imgproc/src/thresh.cpp,-,"return CV_Error( CV_StsBadArg, """" );",385,download/opencv_opencv354.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/imgproc/test/test_canny.cpp,+,"ts->printf(cvtest::TS::LOG, ""Canny(size = %d x %d, aperture_size = %d, threshold1 = %g, threshold2 = %g, L2 = %s) test_cpp = %s (test case #%d)\n"",",105,download/opencv_opencv355.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/ml/src/data.cpp,-,"CV_Error( CV_StsBadArg, errmsg );",752,download/opencv_opencv356.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/video/src/optflowgf.cpp,-,CV_Assert(polyN == 5 || polyN == 7);,660,download/opencv_opencv357.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/video/src/optflowgf.cpp,-,CV_Assert(!fastPyramids || std::abs(pyrScale - 0.5) < 1e-6);,660,download/opencv_opencv357.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/video/src/optflowgf.cpp,+,CV_Assert(polyN_ == 5 || polyN_ == 7);,660,download/opencv_opencv357.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/video/src/optflowgf.cpp,+,CV_Assert(!fastPyramids_ || std::abs(pyrScale_ - 0.5) < 1e-6);,661,download/opencv_opencv357.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,modules/videoio/src/cap_ffmpeg.cpp,+,if (sz > 0 && ERROR_SUCCESS == GetLastError()),137,download/opencv_opencv358.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/filestorage_base64.cpp,+,static CvFileStorage * three_same_ways_of_write_base64(),5,download/opencv_opencv359.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/filestorage_base64.cpp,+,static void two_ways_to_write_rawdata_in_base64(),32,download/opencv_opencv359.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/filestorage_base64.cpp,+,"cvStartWriteStruct(fs, ""rawdata"", CV_NODE_SEQ | CV_NODE_FLOW, ""binary"");",40,download/opencv_opencv359.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/filestorage_base64.cpp,+,"cvWriteRawDataBase64(fs, rawdata.data(), static_cast<int>(rawdata.size()), ""i"");",41,download/opencv_opencv359.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/filestorage_base64.cpp,+,cvEndWriteStruct(fs);,42,download/opencv_opencv359.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/filestorage_base64.cpp,+,"cvStartWriteStruct(fs, ""rawdata"", CV_NODE_SEQ | CV_NODE_FLOW);",51,download/opencv_opencv359.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/filestorage_base64.cpp,+,"cvWriteRawData(fs, rawdata.data(), static_cast<int>(rawdata.size()), ""i"");",52,download/opencv_opencv359.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/filestorage_base64.cpp,+,cvEndWriteStruct(fs);,53,download/opencv_opencv359.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/filestorage_base64.cpp,+,CvFileStorage * fs = three_same_ways_of_write_base64();,62,download/opencv_opencv359.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/filestorage_base64.cpp,+,two_ways_to_write_rawdata_in_base64();,67,download/opencv_opencv359.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/stitching_detailed.cpp,+,#define LOG(msg) std::cout << msg,64,download/opencv_opencv360.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/stitching_detailed.cpp,+,#define LOGLN(msg) std::cout << msg << std::endl,65,download/opencv_opencv360.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,-,"sprintf(buf, ""flags:%s%s%s%s%s%s"",",591,download/opencv_opencv361.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,-,"sprintf(buf, ""flags:%s%s%s%s"",",607,download/opencv_opencv361.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,-,"cvWriteComment(*fs, buf, 0);",622,download/opencv_opencv361.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,+,fs.writeComment(flagsStringStream.str());,622,download/opencv_opencv361.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,-,CV_Assert(rvecs[i].rows == 3 && rvecs[i].cols == 1);,639,download/opencv_opencv361.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,-,CV_Assert(tvecs[i].rows == 3 && tvecs[i].cols == 1);,639,download/opencv_opencv361.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,+,CV_Assert(rvecs[i].rows == 3 && rvecs[i].cols == 1);,647,download/opencv_opencv361.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,+,CV_Assert(tvecs[i].rows == 3 && tvecs[i].cols == 1);,655,download/opencv_opencv361.cpp
26a8c45e2376a01ffcc003ccd37bc3f44b235c0a,Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageJSON,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,+,"fs.writeComment(""a set of 6-tuples (rotation vector + translation vector) for each view"");",660,download/opencv_opencv361.cpp
8b155b1c6da6a1220fd343b2e690c1dfba300f18,Merge pull request #6955 from snosov1:fix-6836,modules/calib3d/test/test_cameracalibration.cpp,+,"ts->printf( cvtest::TS::LOG, ""The camera matrix is wrong for downscaled image\n"");",1446,download/opencv_opencv362.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,Base64Writer(::CvFileStorage * fs);,340,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,~Base64Writer();,341,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"void write(const void* _data, size_t len, const char* dt);",342,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"template<typename _to_binary_convertor_t> void write(_to_binary_convertor_t & convertor, const char* dt);",343,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt);",366,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"void cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len);",366,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,void cvEndWriteRawData_Base64(::CvFileStorage * fs);,366,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"void cvWriteRawData_Base64(::cv::FileStorage & fs, const void* _data, int len, const char* dt);",367,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"void cvWriteMat_Base64(CvFileStorage * fs, const char * name, ::cv::Mat const & mat);",367,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"void cvWriteRawDataBase64(::CvFileStorage* fs, const void* _data, int len, const char* dt);",367,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,CV_DbgAssert( fs->base64_writer == 0 );,1119,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,fs->base64_writer = new base64::Base64Writer( fs );,1120,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, err_unkonwn_state );",1127,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, err_unable_to_switch );",1136,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, err_unkonwn_state );",1143,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, err_unable_to_switch );",1152,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, err_unkonwn_state );",1157,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, err_unkonwn_state );",1162,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"static void check_if_write_struct_is_delayed( CvFileStorage* fs, bool change_type_to_base64 = false )",1170,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"fs->start_write_struct( fs, struct_key.c_str(), struct_flags, ""binary"");",1200,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"fs->start_write_struct( fs, struct_key.c_str(), struct_flags, type_name.c_str());",1207,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,static void make_write_struct_delayed(,1216,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,CV_Assert( fs->is_write_struct_delayed == false );,1222,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,CV_DbgAssert( fs->delayed_struct_key   == 0 );,1223,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,CV_DbgAssert( fs->delayed_struct_flags == 0 );,1224,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,CV_DbgAssert( fs->delayed_type_name    == 0 );,1225,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR(""Cannot parse size in Base64 header"");",1343,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Invalid Base64 data."" );",1371,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,check_if_write_struct_is_delayed( fs );,1839,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""At present, output Base64 data only."" );",1846,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,while(cv_isprint(*ptr)) /* no check for base64 string */,2274,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,while( cv_isprint(*ptr) ) /* no check for base64 string */,2274,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR(""Unexpected end of line"");",2277,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Unexpected end of line"" );",2278,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR(""Cannot parse size in Base64 header"");",2301,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Invalid Base64 data."" );",2321,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR(""Byte size not match elememt size"");",2348,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""data size not matches elememt size"");",2348,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,check_if_write_struct_is_delayed( fs );,2997,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""Currently only Base64 data is allowed."" );",3004,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"fs->start_write_struct( fs, key, struct_flags, type_name );",3520,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,check_if_write_struct_is_delayed( fs );,3520,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"make_write_struct_delayed( fs, key, struct_flags, type_name );",3534,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""must set 'struct_flags |= CV_NODE_SEQ' if using Base64."");",3540,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""function \'cvStartWriteStruct\' calls cannot be nested if using Base64."");",3542,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"fs->start_write_struct( fs, key, struct_flags, type_name );",3544,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""At the end of the output Base64, `cvEndWriteStruct` is needed."");",3554,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"fs->start_write_struct( fs, key, struct_flags, type_name );",3556,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,check_if_write_struct_is_delayed( fs );,3569,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"base64::cvWriteRawDataBase64( fs, _data, len, dt );",3754,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"fs->start_write_struct( fs, name, CV_NODE_TYPE(node->tag) +",4090,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"cvStartWriteStruct( fs, name, CV_NODE_TYPE(node->tag) +",4090,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,fs->end_write_struct( fs );,4094,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,cvEndWriteStruct( fs );,4094,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"fs->start_write_struct( fs, name, CV_NODE_SEQ, 0 );",4097,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,fs->end_write_struct( fs );,4097,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"cvStartWriteStruct( fs, name, CV_NODE_SEQ, 0 );",4097,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,cvEndWriteStruct( fs );,4098,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,CV_Assert(it.nplanes > 0U); /* make sure mats not empty */,6885,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"default:     { CV_Assert(!""mat type is invalid""); break; }",6910,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,CV_Assert(!(*this));,6915,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,CV_DbgAssert(*this);,6921,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,base64::Base64Writer::Base64Writer(::CvFileStorage * fs),7174,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"Base64Writer(::CvFileStorage * fs, const char * name, int len, const char* dt)",7183,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"void base64::Base64Writer::write(const void* _data, size_t len, const char* dt)",7189,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"cvStartWriteStruct(fs, name, CV_NODE_SEQ, ""binary"");",7193,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,emitter->write(convertor);,7197,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"void base64::Base64Writer::write(_to_binary_convertor_t & convertor, const char* dt)",7202,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,emitter->write(convertor);,7205,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,base64::Base64Writer::~Base64Writer(),7210,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""Invalid \'dt\'."" );",7219,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"emitter.write(beg, end);",7228,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"void write(const void* _data, int len)",7230,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,CV_Assert(len >= 0);,7231,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,CV_Assert(remaining_data_length >= static_cast<size_t>(len));,7231,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,emitter.write(convertor);,7234,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"void write(_to_binary_convertor_t & convertor, int data_length_of_convertor)",7237,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,CV_Assert(data_length_of_convertor >= 0);,7238,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,CV_Assert(remaining_data_length >= static_cast<size_t>(data_length_of_convertor));,7238,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,emitter.write(convertor);,7240,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,~Base64Writer(),7242,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,CV_Assert(remaining_data_length == 0U);,7243,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,cvEndWriteStruct(file_storage);,7244,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"emitter->write(beg, end);",7248,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""\'dt\' does not match."" );",7250,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"void base64::cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt)",7232,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,CV_Assert(fs);,7233,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,CV_Assert(fs->base64_writer == 0);,7234,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"fs->base64_writer = new Base64Writer(fs, name, len, dt);",7234,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"void base64::cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len)",7236,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"void base64::cvWriteRawDataBase64(::CvFileStorage* fs, const void* _data, int len, const char* dt)",7236,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,CV_Assert(fs->base64_writer != 0);,7240,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"fs->base64_writer->write(_data, len);",7240,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,void base64::cvEndWriteRawData_Base64(::CvFileStorage * fs),7242,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,CV_Assert(fs);,7243,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,CV_Assert(fs->base64_writer != 0);,7244,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"check_if_write_struct_is_delayed( fs, true );",7247,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"void base64::cvWriteRawData_Base64(::cv::FileStorage & fs, const void* _data, int len, const char* dt)",7249,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"cvStartWriteStruct(*fs, fs.elname.c_str(), CV_NODE_SEQ, ""binary"");",7250,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"emitter.write(beg, end);",7260,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,emitter.write(convert);,7263,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,cvEndWriteStruct(*fs);,7265,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"void base64::cvWriteMat_Base64(::CvFileStorage * fs, const char * name, ::cv::Mat const & mat)",7267,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"cvStartWriteStruct(fs, name, CV_NODE_MAP, CV_TYPE_NAME_MAT);",7274,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"cvWriteInt(fs, ""rows"", mat.rows );",7275,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"cvWriteInt(fs, ""cols"", mat.cols );",7275,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"cvStartWriteStruct(fs, name, CV_NODE_MAP, CV_TYPE_NAME_MATND);",7276,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"cvStartWriteStruct(fs, ""sizes"", CV_NODE_SEQ | CV_NODE_FLOW);",7277,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"cvWriteRawData(fs, mat.size.p, mat.dims, ""i"");",7277,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,cvEndWriteStruct(fs);,7277,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"cvWriteString(fs, ""dt"", ::icvEncodeFormat(CV_MAT_TYPE(mat.type()), dt ), 0 );",7278,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"cvStartWriteRawData_Base64(fs, ""data"", len, dt);",7285,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"fs->base64_writer->write(convertor, len);",7285,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,cvEndWriteRawData_Base64(fs);,7285,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""Base64 should not be used at present."" );",7287,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,cvEndWriteStruct(fs);,7291,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"fs->base64_writer->write(_data, len, dt);",7292,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"CV_IMPL void cvWriteRawDataBase64(::CvFileStorage* fs, const void* _data, int len, const char* dt)",7300,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"void cvWriteMat_Base64(::CvFileStorage* fs, const char* name, const ::CvMat* mat)",7302,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"::base64::cvWriteMat_Base64(fs, name, holder);",7304,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"void cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const ::CvMatND* mat)",7306,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"::base64::cvWriteMat_Base64(fs, name, holder);",7308,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt)",7310,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"::base64::cvStartWriteRawData_Base64(fs, name, len, dt);",7311,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"void cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len)",7313,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,"::base64::cvWriteRawData_Base64(fs, _data, len);",7314,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,void cvEndWriteRawData_Base64(::CvFileStorage * fs),7316,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,-,::base64::cvEndWriteRawData_Base64(fs);,7317,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/src/persistence.cpp,+,"::base64::cvWriteRawDataBase64(fs, _data, len, dt);",7319,download/opencv_opencv363.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,-,"cv::cvWriteMat_Base64(*fs, ""normal_2d_mat"", &holder);",690,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,-,"cv::cvWriteMatND_Base64(*fs, ""normal_nd_mat"", &holder_nd);",691,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,-,"cv::cvWriteMat_Base64(*fs, ""empty_2d_mat"", &holder);",692,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,-,"cv::cvStartWriteRawData_Base64(*fs, ""rawdata"", static_cast<int>(rawdata.size()), ""2u3i2di"");",693,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,-,"cv::cvWriteRawData_Base64(*fs, rawdata.data() + i * 100, 100);",694,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,-,cv::cvEndWriteRawData_Base64(*fs);,694,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,"cvStartWriteStruct( *fs, ""rawdata"", CV_NODE_SEQ | CV_NODE_FLOW, ""binary"" );",785,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,"cvWriteRawDataBase64(*fs, rawdata.data() + i * 100, 100, data_t::signature());",787,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,cvEndWriteStruct( *fs );,788,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, ""manydata"", CV_NODE_SEQ);",884,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW);",885,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,"cvWriteRawData(*fs, rawdata.data(), static_cast<int>(rawdata.size()), ""i"");",887,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,cvEndWriteStruct(*fs);,888,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,"cvWriteString(*fs, 0, str_out.c_str(), 1);",889,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,cvEndWriteStruct(*fs);,890,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, ""manydata"", CV_NODE_SEQ);",912,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,"cvWriteString(*fs, 0, str_out.c_str(), 1);",913,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW, ""binary"");",914,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,"cvWriteRawData(*fs, rawdata.data(), static_cast<int>(rawdata.size()), ""i"");",916,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,cvEndWriteStruct(*fs);,917,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,cvEndWriteStruct(*fs);,918,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, ""rawdata"", CV_NODE_SEQ, ""binary"");",956,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW);",957,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, ""rawdata"", CV_NODE_SEQ);",962,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW);",963,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,modules/core/test/test_io.cpp,+,"cvWriteRawDataBase64(*fs, name, 1, ""u"");",964,download/opencv_opencv364.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,samples/cpp/filestorage_base64.cpp,+,static CvFileStorage * three_same_ways_of_write_base64(),5,download/opencv_opencv365.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,samples/cpp/filestorage_base64.cpp,+,static void two_ways_to_write_rawdata_in_base64(),32,download/opencv_opencv365.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,samples/cpp/filestorage_base64.cpp,+,"cvStartWriteStruct(fs, ""rawdata"", CV_NODE_SEQ | CV_NODE_FLOW, ""binary"");",40,download/opencv_opencv365.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,samples/cpp/filestorage_base64.cpp,+,"cvWriteRawDataBase64(fs, rawdata.data(), static_cast<int>(rawdata.size()), ""i"");",41,download/opencv_opencv365.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,samples/cpp/filestorage_base64.cpp,+,cvEndWriteStruct(fs);,42,download/opencv_opencv365.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,samples/cpp/filestorage_base64.cpp,+,"cvStartWriteStruct(fs, ""rawdata"", CV_NODE_SEQ | CV_NODE_FLOW);",51,download/opencv_opencv365.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,samples/cpp/filestorage_base64.cpp,+,"cvWriteRawData(fs, rawdata.data(), static_cast<int>(rawdata.size()), ""i"");",52,download/opencv_opencv365.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,samples/cpp/filestorage_base64.cpp,+,cvEndWriteStruct(fs);,53,download/opencv_opencv365.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,samples/cpp/filestorage_base64.cpp,+,CvFileStorage * fs = three_same_ways_of_write_base64();,62,download/opencv_opencv365.cpp
5eee75765807897856689f2588cf80ceb41aa75d,Merge pull request #6949 from wiryls:FileStorageBase64DocsTests,samples/cpp/filestorage_base64.cpp,+,two_ways_to_write_rawdata_in_base64();,67,download/opencv_opencv365.cpp
c61f4e8863a56ff435f279f9575e41fbeec68f1a,return false from VideoCapture::grabFrame when camera is disconneted,modules/videoio/src/cap_dshow.cpp,+,"DebugPrintOut(""Event: Code: %#04x Params: %d, %d\n"", evCode, param1, param2);",2324,download/opencv_opencv366.cpp
c61f4e8863a56ff435f279f9575e41fbeec68f1a,return false from VideoCapture::grabFrame when camera is disconneted,modules/videoio/src/cap_dshow.cpp,+,"DebugPrintOut(""ERROR: Device disconnected\n"");",2329,download/opencv_opencv366.cpp
c61f4e8863a56ff435f279f9575e41fbeec68f1a,return false from VideoCapture::grabFrame when camera is disconneted,modules/videoio/src/cap_dshow.cpp,+,"DebugPrintOut(""ERROR - Could not create media event object\n"");",2543,download/opencv_opencv366.cpp
9c90b6271cfbf300d3d7afdff451849725658851,Merge pull request #7040 from sovrasov:calib_tutorial_code_update,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,-,"sprintf(buf, ""flags:%s%s%s%s%s%s"",",591,download/opencv_opencv367.cpp
9c90b6271cfbf300d3d7afdff451849725658851,Merge pull request #7040 from sovrasov:calib_tutorial_code_update,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,-,"sprintf(buf, ""flags:%s%s%s%s"",",607,download/opencv_opencv367.cpp
9c90b6271cfbf300d3d7afdff451849725658851,Merge pull request #7040 from sovrasov:calib_tutorial_code_update,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,-,"cvWriteComment(*fs, buf, 0);",622,download/opencv_opencv367.cpp
9c90b6271cfbf300d3d7afdff451849725658851,Merge pull request #7040 from sovrasov:calib_tutorial_code_update,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,+,fs.writeComment(flagsStringStream.str());,622,download/opencv_opencv367.cpp
9c90b6271cfbf300d3d7afdff451849725658851,Merge pull request #7040 from sovrasov:calib_tutorial_code_update,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,-,CV_Assert(rvecs[i].rows == 3 && rvecs[i].cols == 1);,639,download/opencv_opencv367.cpp
9c90b6271cfbf300d3d7afdff451849725658851,Merge pull request #7040 from sovrasov:calib_tutorial_code_update,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,-,CV_Assert(tvecs[i].rows == 3 && tvecs[i].cols == 1);,639,download/opencv_opencv367.cpp
9c90b6271cfbf300d3d7afdff451849725658851,Merge pull request #7040 from sovrasov:calib_tutorial_code_update,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,+,CV_Assert(rvecs[i].rows == 3 && rvecs[i].cols == 1);,647,download/opencv_opencv367.cpp
9c90b6271cfbf300d3d7afdff451849725658851,Merge pull request #7040 from sovrasov:calib_tutorial_code_update,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,+,CV_Assert(tvecs[i].rows == 3 && tvecs[i].cols == 1);,655,download/opencv_opencv367.cpp
9c90b6271cfbf300d3d7afdff451849725658851,Merge pull request #7040 from sovrasov:calib_tutorial_code_update,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,+,"fs.writeComment(""a set of 6-tuples (rotation vector + translation vector) for each view"");",660,download/opencv_opencv367.cpp
46c8b094530b1722bd4a56cb376a59c09c098212,Improvements in camera_calibration tutorial code,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,-,"sprintf(buf, ""flags:%s%s%s%s%s%s"",",591,download/opencv_opencv368.cpp
46c8b094530b1722bd4a56cb376a59c09c098212,Improvements in camera_calibration tutorial code,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,-,"sprintf(buf, ""flags:%s%s%s%s"",",607,download/opencv_opencv368.cpp
46c8b094530b1722bd4a56cb376a59c09c098212,Improvements in camera_calibration tutorial code,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,-,"cvWriteComment(*fs, buf, 0);",622,download/opencv_opencv368.cpp
46c8b094530b1722bd4a56cb376a59c09c098212,Improvements in camera_calibration tutorial code,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,+,fs.writeComment(flagsStringStream.str());,622,download/opencv_opencv368.cpp
46c8b094530b1722bd4a56cb376a59c09c098212,Improvements in camera_calibration tutorial code,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,-,CV_Assert(rvecs[i].rows == 3 && rvecs[i].cols == 1);,639,download/opencv_opencv368.cpp
46c8b094530b1722bd4a56cb376a59c09c098212,Improvements in camera_calibration tutorial code,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,-,CV_Assert(tvecs[i].rows == 3 && tvecs[i].cols == 1);,639,download/opencv_opencv368.cpp
46c8b094530b1722bd4a56cb376a59c09c098212,Improvements in camera_calibration tutorial code,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,+,CV_Assert(rvecs[i].rows == 3 && rvecs[i].cols == 1);,647,download/opencv_opencv368.cpp
46c8b094530b1722bd4a56cb376a59c09c098212,Improvements in camera_calibration tutorial code,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,+,CV_Assert(tvecs[i].rows == 3 && tvecs[i].cols == 1);,655,download/opencv_opencv368.cpp
46c8b094530b1722bd4a56cb376a59c09c098212,Improvements in camera_calibration tutorial code,samples/cpp/tutorial_code/calib3d/camera_calibration/camera_calibration.cpp,+,"fs.writeComment(""a set of 6-tuples (rotation vector + translation vector) for each view"");",660,download/opencv_opencv368.cpp
86238d2748c19876e10b4bc9299bc206cec0cf8a,"make some changes according to the code review.

- use `std::string` instead of `new char`;
- reserve 1 MB for buffer;",modules/core/src/persistence.cpp,-,"fs->start_write_struct( fs, struct_key, struct_flags, ""binary"");",1200,download/opencv_opencv369.cpp
86238d2748c19876e10b4bc9299bc206cec0cf8a,"make some changes according to the code review.

- use `std::string` instead of `new char`;
- reserve 1 MB for buffer;",modules/core/src/persistence.cpp,+,"fs->start_write_struct( fs, struct_key.c_str(), struct_flags, ""binary"");",1200,download/opencv_opencv369.cpp
86238d2748c19876e10b4bc9299bc206cec0cf8a,"make some changes according to the code review.

- use `std::string` instead of `new char`;
- reserve 1 MB for buffer;",modules/core/src/persistence.cpp,-,"fs->start_write_struct( fs, struct_key, struct_flags, type_name);",1207,download/opencv_opencv369.cpp
86238d2748c19876e10b4bc9299bc206cec0cf8a,"make some changes according to the code review.

- use `std::string` instead of `new char`;
- reserve 1 MB for buffer;",modules/core/src/persistence.cpp,+,"fs->start_write_struct( fs, struct_key.c_str(), struct_flags, type_name.c_str());",1207,download/opencv_opencv369.cpp
29afb83f248abc27abcacd6387cdf8f98a995feb,Merge pull request #7039 from vpisarev:2_small_fixes,modules/ml/src/data.cpp,-,"CV_Error( CV_StsBadArg, errmsg );",752,download/opencv_opencv370.cpp
d7ee62f03bff1ccc5ff4bdf6014056f6936adc71,"1. fix warning from Xcode 7.x
2. fixed parsing of ""cat[range_spec]ord[range_spec]"" type specification string when using ml::TrainData::loadFromCSV(). Thanks to A. Kaehler for reporting it",modules/ml/src/data.cpp,-,"CV_Error( CV_StsBadArg, errmsg );",752,download/opencv_opencv371.cpp
b2698f24b07f6e62a2679edbc6745e7f0527d7a1,Merge pull request #7033 from tomoaki0705:brushUpFp16,modules/core/src/convert.cpp,+,"CV_Error(Error::StsUnsupportedFormat, ""Unsupported input depth"");",5147,download/opencv_opencv372.cpp
b8d743bf50d92e6a2885c3930162f93eef5a1f06,Merge pull request #6970 from K-Shinotsuka:issue6,modules/imgproc/src/thresh.cpp,-,"CV_Error( CV_StsBadArg, ""Unknown threshold type"" );",176,download/opencv_opencv373.cpp
b8d743bf50d92e6a2885c3930162f93eef5a1f06,Merge pull request #6970 from K-Shinotsuka:issue6,modules/imgproc/src/thresh.cpp,-,"return CV_Error( CV_StsBadArg, """" );",385,download/opencv_opencv373.cpp
87ca607fd4d4b44b22d84b7fdb2c88cec3287dc8,"brush up convertFp16
  * raise an error when wrong bit depth passed
  * raise an build error when wrong depth is specified for cvtScaleHalf_
  * remove unnecessary safe check in cvtScaleHalf_
  * use intrinsic instead of direct pointer access
  * update the explanation",modules/core/src/convert.cpp,+,"CV_Error(Error::StsUnsupportedFormat, ""Unsupported input depth"");",5147,download/opencv_opencv374.cpp
5775ace5e0f1feb90fc56052b2381355954c7e33,improve thresh_8u(),modules/imgproc/src/thresh.cpp,-,"CV_Error( CV_StsBadArg, ""Unknown threshold type"" );",159,download/opencv_opencv375.cpp
5775ace5e0f1feb90fc56052b2381355954c7e33,improve thresh_8u(),modules/imgproc/src/thresh.cpp,-,"return CV_Error( CV_StsBadArg, """" );",368,download/opencv_opencv375.cpp
7429ed07be2c08b2fa3902fed1e42bfca6d31a96,solve warnings in sample file,samples/cpp/filestorage_base64.cpp,-,"cvWriteRawDataBase64(fs, rawdata.data(), rawdata.size(), ""i"");",41,download/opencv_opencv376.cpp
7429ed07be2c08b2fa3902fed1e42bfca6d31a96,solve warnings in sample file,samples/cpp/filestorage_base64.cpp,+,"cvWriteRawDataBase64(fs, rawdata.data(), static_cast<int>(rawdata.size()), ""i"");",41,download/opencv_opencv376.cpp
7429ed07be2c08b2fa3902fed1e42bfca6d31a96,solve warnings in sample file,samples/cpp/filestorage_base64.cpp,-,"cvWriteRawData(fs, rawdata.data(), rawdata.size(), ""i"");",52,download/opencv_opencv376.cpp
7429ed07be2c08b2fa3902fed1e42bfca6d31a96,solve warnings in sample file,samples/cpp/filestorage_base64.cpp,+,"cvWriteRawData(fs, rawdata.data(), static_cast<int>(rawdata.size()), ""i"");",52,download/opencv_opencv376.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",apps/annotation/opencv_annotation.cpp,+,parser.printMessage();,256,download/opencv_opencv377.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",apps/annotation/opencv_annotation.cpp,+,parser.printMessage();,263,download/opencv_opencv377.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",apps/createsamples/createsamples.cpp,+,"printf( ""Max Scale: %g\n"", maxscale);",203,download/opencv_opencv378.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",apps/visualisation/opencv_visualisation.cpp,+,static void printLimits(){,75,download/opencv_opencv379.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",apps/visualisation/opencv_visualisation.cpp,+,printLimits();,93,download/opencv_opencv379.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",apps/visualisation/opencv_visualisation.cpp,+,printLimits();,101,download/opencv_opencv379.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",cmake/checks/fp16.cpp,+,"printf(""%d\n"", test());",31,download/opencv_opencv380.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""THRESHOLD SELECTED = %d, BRIGHTMAX = %d, DARKMAX = %d\n"", iThresh, iBrightMax, piMaxPos[iIdxBGMax]);",399,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,-,"PRINTF(""EX quad count: %d/%d\n"", quad_count, expected_corners_num);",513,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Quad count: %d/%d\n"", quad_count, expected_corners_num);",550,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Quad count: %d/%d\n"", quad_count, expected_corners_num);",575,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Starting ordering of inner quads\n"");",606,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Orig count: %d  After ordering: %d\n"", icount, count);",608,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d  orig count: %d cleaned: %d\n"", group_idx, icount, count);",619,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d  count: %d  cleaned: %d\n"", group_idx, icount, count);",624,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Chessboard detection result 0: %d\n"", found);",673,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Starting ordering of inner quads\n"");",677,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Orig count: %d  After ordering: %d\n"", icount, count);",679,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Fallback to old algorithm\n"");",682,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Quad count: %d/%d\n"", quad_count, expected_corners_num);",731,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  orig count: %d cleaned: %d\n"", group_idx, icount, count);",786,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Starting ordering of inner quads\n"");",788,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  count: %d  cleaned: %d\n"", group_idx, icount, count);",792,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Orig count: %d  After ordering: %d\n"", icount, count);",792,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d  orig count: %d cleaned: %d\n"", group_idx, icount, count);",819,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d  count: %d  cleaned: %d\n"", group_idx, icount, count);",824,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Chessboard detection result 1: %d\n"", found);",869,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Chessboard detection result 2: %d\n"", found);",874,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Chessboard detection result 3: %d\n"", found);",734,download/opencv_opencv381.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/checkchessboard.cpp,+,"cvError(CV_BadNumChannels, ""cvCheckChessboard"", ""supports single-channel images only"",",221,download/opencv_opencv382.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/calib3d/src/checkchessboard.cpp,+,"cvError(CV_BadDepth, ""cvCheckChessboard"", ""supports depth=8 images only"",",227,download/opencv_opencv382.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/src/convert.cpp,+,CV_Assert( func != 0 );,5164,download/opencv_opencv383.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/src/matrix.cpp,-,"CV_Error(CV_StsUnmatchedSizes, """");",842,download/opencv_opencv384.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/src/matrix.cpp,+,"CV_Error(CV_StsUnmatchedSizes, ""Pushed vector length is not equal to matrix row length"");",842,download/opencv_opencv384.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/src/matrix.cpp,-,"CV_Error(CV_StsUnmatchedFormats, """");",844,download/opencv_opencv384.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/src/matrix.cpp,+,"CV_Error(CV_StsUnmatchedFormats, ""Pushed vector type is not the same as matrix type"");",844,download/opencv_opencv384.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_arithm.cpp,+,"ASSERT_EQ(0, cv::norm(cv::Mat(5, 5, CV_8UC3, cv::Scalar::all(250)), destImage, cv::NORM_INF));",1925,download/opencv_opencv385.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_arithm.cpp,+,"ASSERT_EQ(0, cv::norm(cv::Mat(5, 5, CV_8UC4, cv::Scalar::all(250)), destImage, cv::NORM_INF));",1934,download/opencv_opencv385.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,"cvStartWriteStruct( *fs, ""rawdata"", CV_NODE_SEQ | CV_NODE_FLOW, ""binary"" );",678,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,"cvWriteRawDataBase64(*fs, rawdata.data() + i * 100, 100, data_t::signature());",680,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,cvEndWriteStruct( *fs );,681,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, ""manydata"", CV_NODE_SEQ);",771,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW);",772,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,"cvWriteRawData(*fs, rawdata.data(), static_cast<int>(rawdata.size()), ""i"");",774,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,cvEndWriteStruct(*fs);,775,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,"cvWriteString(*fs, 0, str_out.c_str(), 1);",776,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,cvEndWriteStruct(*fs);,777,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, ""manydata"", CV_NODE_SEQ);",799,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,"cvWriteString(*fs, 0, str_out.c_str(), 1);",800,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW, ""binary"");",801,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,"cvWriteRawData(*fs, rawdata.data(), static_cast<int>(rawdata.size()), ""i"");",803,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,cvEndWriteStruct(*fs);,804,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,cvEndWriteStruct(*fs);,805,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, ""rawdata"", CV_NODE_SEQ, ""binary"");",841,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW);",842,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, ""rawdata"", CV_NODE_SEQ);",847,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW);",848,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io.cpp,+,"cvWriteRawDataBase64(*fs, name, 1, ""u"");",849,download/opencv_opencv386.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,"cvStartWriteStruct( *fs, ""rawdata"", CV_NODE_SEQ | CV_NODE_FLOW, ""binary"" );",87,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,"cvWriteRawDataBase64(*fs, rawdata.data() + i * 100, 100, data_t::signature());",88,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,cvEndWriteStruct( *fs );,88,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,"cvStartWriteStruct(*fs, ""manydata"", CV_NODE_SEQ);",178,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW);",178,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,"cvWriteRawData(*fs, rawdata.data(), static_cast<int>(rawdata.size()), ""i"");",179,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,cvEndWriteStruct(*fs);,179,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,"cvWriteString(*fs, 0, str_out.c_str(), 1);",179,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,cvEndWriteStruct(*fs);,179,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,"cvStartWriteStruct(*fs, ""manydata"", CV_NODE_SEQ);",200,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,"cvWriteString(*fs, 0, str_out.c_str(), 1);",200,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW, ""binary"");",200,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,"cvWriteRawData(*fs, rawdata.data(), static_cast<int>(rawdata.size()), ""i"");",201,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,cvEndWriteStruct(*fs);,201,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,cvEndWriteStruct(*fs);,201,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,"cvStartWriteStruct(*fs, ""rawdata"", CV_NODE_SEQ, ""binary"");",236,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW);",236,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,"cvStartWriteStruct(*fs, ""rawdata"", CV_NODE_SEQ);",240,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW);",240,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_io_base64.cpp,-,"cvWriteRawDataBase64(*fs, name, 1, ""u"");",240,download/opencv_opencv387.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_mat.cpp,+,"ASSERT_EQ(6, result.rows);",1539,download/opencv_opencv388.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_mat.cpp,+,ASSERT_NO_THROW(cloned = source.clone());,1547,download/opencv_opencv388.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_rand.cpp,+,"ASSERT_EQ(param1, -9);",382,download/opencv_opencv389.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/core/test/test_rand.cpp,+,"ASSERT_EQ(param2,  2);",383,download/opencv_opencv389.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/imgproc/src/canny.cpp,+,CV_Assert(_dx.dims() == 2);,743,download/opencv_opencv390.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/imgproc/src/canny.cpp,+,CV_Assert(_dx.type() == CV_16SC1 || _dx.type() == CV_16SC3);,744,download/opencv_opencv390.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/imgproc/src/canny.cpp,+,CV_Assert(_dy.type() == _dx.type());,745,download/opencv_opencv390.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/imgproc/src/canny.cpp,+,CV_Assert(_dx.sameSize(_dy));,746,download/opencv_opencv390.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/imgproc/test/test_canny.cpp,+,"ts->printf(cvtest::TS::LOG, ""Canny(size = %d x %d, aperture_size = %d, threshold1 = %g, threshold2 = %g, L2 = %s) test_cpp = %s (test case #%d)\n"",",105,download/opencv_opencv391.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/video/src/optflowgf.cpp,-,CV_Assert(polyN == 5 || polyN == 7);,660,download/opencv_opencv392.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/video/src/optflowgf.cpp,-,CV_Assert(!fastPyramids || std::abs(pyrScale - 0.5) < 1e-6);,660,download/opencv_opencv392.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/video/src/optflowgf.cpp,+,CV_Assert(polyN_ == 5 || polyN_ == 7);,660,download/opencv_opencv392.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/video/src/optflowgf.cpp,+,CV_Assert(!fastPyramids_ || std::abs(pyrScale_ - 0.5) < 1e-6);,661,download/opencv_opencv392.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",modules/videoio/src/cap_ffmpeg.cpp,+,if (sz > 0 && ERROR_SUCCESS == GetLastError()),137,download/opencv_opencv393.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",samples/cpp/stitching_detailed.cpp,+,#define LOG(msg) std::cout << msg,64,download/opencv_opencv394.cpp
3935855365284af19cb438ee2c7dae4d31711cf3,"Merge remote-tracking branch 'refs/remotes/opencv/master' into FileStorageBase64DocsTests

# Conflicts:
#	modules/core/test/test_io.cpp",samples/cpp/stitching_detailed.cpp,+,#define LOGLN(msg) std::cout << msg << std::endl,65,download/opencv_opencv394.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",modules/core/src/persistence.cpp,-,"void cvWriteMat_Base64(::CvFileStorage * fs, const char * name, ::cv::Mat const & mat);",366,download/opencv_opencv395.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",modules/core/src/persistence.cpp,-,CV_Assert(it.nplanes > 0U); /* make sure mats not empty */,6885,download/opencv_opencv395.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",modules/core/src/persistence.cpp,-,"default:     { CV_Assert(!""mat type is invalid""); break; }",6910,download/opencv_opencv395.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",modules/core/src/persistence.cpp,-,CV_Assert(!(*this));,6915,download/opencv_opencv395.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",modules/core/src/persistence.cpp,-,CV_DbgAssert(*this);,6921,download/opencv_opencv395.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",modules/core/src/persistence.cpp,-,"void base64::cvWriteMat_Base64(::CvFileStorage * fs, const char * name, ::cv::Mat const & mat)",7251,download/opencv_opencv395.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",modules/core/src/persistence.cpp,-,"::cvStartWriteStruct(fs, name, CV_NODE_MAP, CV_TYPE_NAME_MAT);",7258,download/opencv_opencv395.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",modules/core/src/persistence.cpp,-,"::cvWriteInt(fs, ""rows"", mat.rows );",7259,download/opencv_opencv395.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",modules/core/src/persistence.cpp,-,"::cvWriteInt(fs, ""cols"", mat.cols );",7259,download/opencv_opencv395.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",modules/core/src/persistence.cpp,-,"::cvStartWriteStruct(fs, name, CV_NODE_MAP, CV_TYPE_NAME_MATND);",7260,download/opencv_opencv395.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",modules/core/src/persistence.cpp,-,"::cvStartWriteStruct(fs, ""sizes"", CV_NODE_SEQ | CV_NODE_FLOW);",7261,download/opencv_opencv395.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",modules/core/src/persistence.cpp,-,"::cvWriteRawData(fs, mat.size.p, mat.dims, ""i"");",7261,download/opencv_opencv395.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",modules/core/src/persistence.cpp,-,::cvEndWriteStruct(fs);,7261,download/opencv_opencv395.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",modules/core/src/persistence.cpp,-,"::cvWriteString(fs, ""dt"", ::icvEncodeFormat(CV_MAT_TYPE(mat.type()), dt ), 0 );",7262,download/opencv_opencv395.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",modules/core/src/persistence.cpp,-,"::cvStartWriteStruct(fs, ""data"", CV_NODE_SEQ, ""binary"");",7267,download/opencv_opencv395.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",modules/core/src/persistence.cpp,-,"fs->base64_writer->write(convertor, dt);",7267,download/opencv_opencv395.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",modules/core/src/persistence.cpp,-,::cvEndWriteStruct(fs);,7267,download/opencv_opencv395.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",modules/core/src/persistence.cpp,-,::cvEndWriteStruct(fs);,7270,download/opencv_opencv395.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",samples/cpp/filestorage_base64.cpp,+,static CvFileStorage * three_same_ways_of_write_base64(),5,download/opencv_opencv396.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",samples/cpp/filestorage_base64.cpp,+,static void two_ways_to_write_rawdata_in_base64(),32,download/opencv_opencv396.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",samples/cpp/filestorage_base64.cpp,+,"cvStartWriteStruct(fs, ""rawdata"", CV_NODE_SEQ | CV_NODE_FLOW, ""binary"");",40,download/opencv_opencv396.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",samples/cpp/filestorage_base64.cpp,+,"cvWriteRawDataBase64(fs, rawdata.data(), rawdata.size(), ""i"");",41,download/opencv_opencv396.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",samples/cpp/filestorage_base64.cpp,+,cvEndWriteStruct(fs);,42,download/opencv_opencv396.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",samples/cpp/filestorage_base64.cpp,+,"cvStartWriteStruct(fs, ""rawdata"", CV_NODE_SEQ | CV_NODE_FLOW);",51,download/opencv_opencv396.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",samples/cpp/filestorage_base64.cpp,+,"cvWriteRawData(fs, rawdata.data(), rawdata.size(), ""i"");",52,download/opencv_opencv396.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",samples/cpp/filestorage_base64.cpp,+,cvEndWriteStruct(fs);,53,download/opencv_opencv396.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",samples/cpp/filestorage_base64.cpp,+,CvFileStorage * fs = three_same_ways_of_write_base64();,62,download/opencv_opencv396.cpp
08911cbfaef9c9a3a9c203700a3380cb880a1f6d,"change `code` to `snippet` and do some cleaning.

- use `@snippet` instead of `@code` in docs.
- remove some functions that were not used.",samples/cpp/filestorage_base64.cpp,+,two_ways_to_write_rawdata_in_base64();,67,download/opencv_opencv396.cpp
6cff909bc8a361693eb42001331039f8050752d4,Merge pull request #7004 from StevenPuttemans:cmd_parser_opencv_annotation,apps/annotation/opencv_annotation.cpp,+,parser.printMessage();,256,download/opencv_opencv397.cpp
6cff909bc8a361693eb42001331039f8050752d4,Merge pull request #7004 from StevenPuttemans:cmd_parser_opencv_annotation,apps/annotation/opencv_annotation.cpp,+,parser.printMessage();,263,download/opencv_opencv397.cpp
085ea5049b42ca04974a633126c75321b68bc506,Merge pull request #7002 from StevenPuttemans:add_extra_limits_to_help,apps/visualisation/opencv_visualisation.cpp,+,static void printLimits(){,75,download/opencv_opencv398.cpp
085ea5049b42ca04974a633126c75321b68bc506,Merge pull request #7002 from StevenPuttemans:add_extra_limits_to_help,apps/visualisation/opencv_visualisation.cpp,+,printLimits();,93,download/opencv_opencv398.cpp
085ea5049b42ca04974a633126c75321b68bc506,Merge pull request #7002 from StevenPuttemans:add_extra_limits_to_help,apps/visualisation/opencv_visualisation.cpp,+,printLimits();,101,download/opencv_opencv398.cpp
e0f19ec48aa1f27f3cb607778cfc3d9b2138206f,change parameter input to the CommandLineParser interface,apps/annotation/opencv_annotation.cpp,+,parser.printMessage();,256,download/opencv_opencv399.cpp
e0f19ec48aa1f27f3cb607778cfc3d9b2138206f,change parameter input to the CommandLineParser interface,apps/annotation/opencv_annotation.cpp,+,parser.printMessage();,263,download/opencv_opencv399.cpp
6df12a0507dbe818b4b9da80cf74ef684b149cc8,add limits of tool to help message,apps/visualisation/opencv_visualisation.cpp,+,static void printLimits(){,75,download/opencv_opencv400.cpp
6df12a0507dbe818b4b9da80cf74ef684b149cc8,add limits of tool to help message,apps/visualisation/opencv_visualisation.cpp,+,printLimits();,93,download/opencv_opencv400.cpp
6df12a0507dbe818b4b9da80cf74ef684b149cc8,add limits of tool to help message,apps/visualisation/opencv_visualisation.cpp,+,printLimits();,101,download/opencv_opencv400.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,114,download/opencv_opencv401.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,136,download/opencv_opencv401.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,158,download/opencv_opencv401.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,180,download/opencv_opencv401.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,202,download/opencv_opencv401.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,224,download/opencv_opencv401.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/accumulate.cpp,+,internal::assertSupportedConfiguration();,52,download/opencv_opencv402.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/accumulate.cpp,+,internal::assertSupportedConfiguration();,231,download/opencv_opencv402.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/accumulate.cpp,+,internal::assertSupportedConfiguration();,376,download/opencv_opencv402.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,109,download/opencv_opencv403.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,145,download/opencv_opencv403.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,181,download/opencv_opencv403.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,231,download/opencv_opencv403.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,314,download/opencv_opencv403.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,350,download/opencv_opencv403.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,386,download/opencv_opencv403.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,422,download/opencv_opencv403.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,457,download/opencv_opencv403.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/add_weighted.cpp,+,internal::assertSupportedConfiguration();                 \,232,download/opencv_opencv404.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/add_weighted.cpp,+,internal::assertSupportedConfiguration();                 \,252,download/opencv_opencv404.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,119,download/opencv_opencv405.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,164,download/opencv_opencv405.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,186,download/opencv_opencv405.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,208,download/opencv_opencv405.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlur3x3Supported(size, border));",59,download/opencv_opencv406.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurU8Supported(size, cn, borderType));",196,download/opencv_opencv406.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurU8Supported(size, cn, borderType));",506,download/opencv_opencv406.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/blur.cpp,+,internal::assertSupportedConfiguration(false);//Unsupported channels number,745,download/opencv_opencv406.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurF32Supported(size, cn, borderType));",831,download/opencv_opencv406.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurS32Supported(size, cn, borderType));",1093,download/opencv_opencv406.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration(isCanny3x3Supported(size));,667,download/opencv_opencv407.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration(isCanny3x3Supported(size));,694,download/opencv_opencv407.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration();,721,download/opencv_opencv407.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration();,750,download/opencv_opencv407.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();,50,download/opencv_opencv408.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();,102,download/opencv_opencv408.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();,154,download/opencv_opencv408.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                           \,289,download/opencv_opencv408.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                           \,330,download/opencv_opencv408.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                           \,388,download/opencv_opencv408.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                        \,444,download/opencv_opencv408.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                        \,458,download/opencv_opencv408.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();                                                               \,137,download/opencv_opencv409.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();                                                               \,178,download/opencv_opencv409.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();                                                               \,212,download/opencv_opencv409.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();,241,download/opencv_opencv409.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();,318,download/opencv_opencv409.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/cmp.cpp,+,internal::assertSupportedConfiguration();             \,280,download/opencv_opencv410.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/cmp.cpp,+,internal::assertSupportedConfiguration();             \,296,download/opencv_opencv410.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/common.cpp,+,void assertSupportedConfiguration(bool parametersSupported),58,download/opencv_opencv411.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/common.cpp,+,internal::assertSupportedConfiguration(false);,103,download/opencv_opencv411.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/convert.cpp,+,internal::assertSupportedConfiguration();                               \,51,download/opencv_opencv412.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/convert.cpp,+,internal::assertSupportedConfiguration();                               \,87,download/opencv_opencv412.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/convert_depth.cpp,+,internal::assertSupportedConfiguration();,262,download/opencv_opencv413.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/convert_depth.cpp,+,internal::assertSupportedConfiguration();,315,download/opencv_opencv413.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/convolution.cpp,+,"internal::assertSupportedConfiguration(isConvolutionSupported(size, ksize, border));",82,download/opencv_opencv414.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,49,download/opencv_opencv415.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,115,download/opencv_opencv415.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,181,download/opencv_opencv415.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,242,download/opencv_opencv415.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,300,download/opencv_opencv415.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,134,download/opencv_opencv416.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,294,download/opencv_opencv416.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,440,download/opencv_opencv416.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,597,download/opencv_opencv416.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/dot_product.cpp,+,internal::assertSupportedConfiguration();,48,download/opencv_opencv417.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/dot_product.cpp,+,internal::assertSupportedConfiguration();,126,download/opencv_opencv417.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/dot_product.cpp,+,internal::assertSupportedConfiguration();,204,download/opencv_opencv417.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/fast.cpp,+,internal::assertSupportedConfiguration();,221,download/opencv_opencv418.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,88,download/opencv_opencv419.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,169,download/opencv_opencv419.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,249,download/opencv_opencv419.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,329,download/opencv_opencv419.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,388,download/opencv_opencv419.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/flip.cpp,+,"internal::assertSupportedConfiguration(isFlipSupported(flipMode, elemSize));",177,download/opencv_opencv420.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur3x3Supported(size, border));",58,download/opencv_opencv421.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur3x3MarginSupported(size, border, borderMargin));",183,download/opencv_opencv421.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",214,download/opencv_opencv421.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",597,download/opencv_opencv421.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",725,download/opencv_opencv421.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",939,download/opencv_opencv421.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/in_range.cpp,+,internal::assertSupportedConfiguration();                \,171,download/opencv_opencv422.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/in_range.cpp,+,internal::assertSupportedConfiguration();                \,184,download/opencv_opencv422.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/integral.cpp,+,internal::assertSupportedConfiguration();,48,download/opencv_opencv423.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/integral.cpp,+,internal::assertSupportedConfiguration();,144,download/opencv_opencv423.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacian3x3Supported(size, border));",59,download/opencv_opencv424.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacianOpenCVSupported(size, border));",202,download/opencv_opencv424.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacianOpenCVSupported(size, border));",332,download/opencv_opencv424.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacianOpenCVSupported(size, border));",466,download/opencv_opencv424.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/magnitude.cpp,+,internal::assertSupportedConfiguration();,119,download/opencv_opencv425.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/magnitude.cpp,+,internal::assertSupportedConfiguration();,142,download/opencv_opencv425.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/meanstddev.cpp,+,internal::assertSupportedConfiguration();,50,download/opencv_opencv426.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/meanstddev.cpp,+,internal::assertSupportedConfiguration();,77,download/opencv_opencv426.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/median_filter.cpp,+,"internal::assertSupportedConfiguration(isMedianFilter3x3Supported(size, numChannels));",127,download/opencv_opencv427.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/min_max.cpp,+,internal::assertSupportedConfiguration();                          \,109,download/opencv_opencv428.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/min_max.cpp,+,internal::assertSupportedConfiguration();     \,124,download/opencv_opencv428.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,124,download/opencv_opencv429.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,142,download/opencv_opencv429.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,160,download/opencv_opencv429.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,178,download/opencv_opencv429.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,196,download/opencv_opencv429.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,215,download/opencv_opencv429.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,348,download/opencv_opencv429.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,494,download/opencv_opencv429.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,626,download/opencv_opencv429.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,781,download/opencv_opencv429.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,1172,download/opencv_opencv429.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,1259,download/opencv_opencv429.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/morph.cpp,+,"internal::assertSupportedConfiguration(isMorph3x3Supported(size, border));",241,download/opencv_opencv430.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/morph.cpp,+,"internal::assertSupportedConfiguration(isMorph3x3Supported(size, border));",263,download/opencv_opencv430.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/morph.cpp,+,"inline void morphology(const Size2D &ssize, u32 cn,",511,download/opencv_opencv430.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/morph.cpp,+,internal::assertSupportedConfiguration(ssize.width > 0 && ssize.height > 0 &&,682,download/opencv_opencv430.cpp
ecfabd7aacd7938dbae7d9c6b5f593764d6d4935,Merge branch 'master' of https://github.com/Itseez/opencv into linux-window-mouse-wheel-support,3rdparty/carotene/src/morph.cpp,+,internal::assertSupportedConfiguration(ssize.width > 0 && ssize.height > 0 &&,709,download/opencv_opencv430.cpp
371096493cc9908f49bb0f3d290a015b7cb02fac,Merge pull request #6962 from alalek:fix_build_log_macro,samples/cpp/stitching_detailed.cpp,+,#define LOG(msg) std::cout << msg,64,download/opencv_opencv431.cpp
371096493cc9908f49bb0f3d290a015b7cb02fac,Merge pull request #6962 from alalek:fix_build_log_macro,samples/cpp/stitching_detailed.cpp,+,#define LOGLN(msg) std::cout << msg << std::endl,65,download/opencv_opencv431.cpp
167a4e65929c830c2ed279f6215020fad937cc5b,Merge pull request #6942 from alalek:fix_android_pack,cmake/checks/fp16.cpp,+,"printf(""%d\n"", test());",31,download/opencv_opencv432.cpp
2acfb263bba135bd68fd9fe93579b3ead445ba15,Merge pull request #6910 from ilya-lavrenov:clone,modules/core/test/test_mat.cpp,+,ASSERT_NO_THROW(cloned = source.clone());,1547,download/opencv_opencv433.cpp
60676dbbe8149dc98824c8e565074d9f4e81f61a,fix build: move LOG macro from stitching public headers,samples/cpp/stitching_detailed.cpp,+,#define LOG(msg) std::cout << msg,64,download/opencv_opencv434.cpp
60676dbbe8149dc98824c8e565074d9f4e81f61a,fix build: move LOG macro from stitching public headers,samples/cpp/stitching_detailed.cpp,+,#define LOGLN(msg) std::cout << msg << std::endl,65,download/opencv_opencv434.cpp
2ec63e4dd1bd97298efebb9ab9312caff5e06c22,fix android pack build,cmake/checks/fp16.cpp,+,"printf(""%d\n"", test());",31,download/opencv_opencv435.cpp
c4cc54e5dacb689fcb6dd639e898d3a9238c4dda,Merge pull request #6953 from ilya-lavrenov:arithm,modules/core/test/test_arithm.cpp,+,"ASSERT_EQ(0, cv::norm(cv::Mat(5, 5, CV_8UC3, cv::Scalar::all(250)), destImage, cv::NORM_INF));",1920,download/opencv_opencv436.cpp
c4cc54e5dacb689fcb6dd639e898d3a9238c4dda,Merge pull request #6953 from ilya-lavrenov:arithm,modules/core/test/test_arithm.cpp,+,"ASSERT_EQ(0, cv::norm(cv::Mat(5, 5, CV_8UC4, cv::Scalar::all(250)), destImage, cv::NORM_INF));",1929,download/opencv_opencv436.cpp
a455858dd9e442e537533fd798cdfeeb8c9f85d6,Merge pull request #6878 from alalek:canny_custom_gradient,modules/imgproc/src/canny.cpp,+,CV_Assert(_dx.dims() == 2);,743,download/opencv_opencv437.cpp
a455858dd9e442e537533fd798cdfeeb8c9f85d6,Merge pull request #6878 from alalek:canny_custom_gradient,modules/imgproc/src/canny.cpp,+,CV_Assert(_dx.type() == CV_16SC1 || _dx.type() == CV_16SC3);,744,download/opencv_opencv437.cpp
a455858dd9e442e537533fd798cdfeeb8c9f85d6,Merge pull request #6878 from alalek:canny_custom_gradient,modules/imgproc/src/canny.cpp,+,CV_Assert(_dy.type() == _dx.type());,745,download/opencv_opencv437.cpp
a455858dd9e442e537533fd798cdfeeb8c9f85d6,Merge pull request #6878 from alalek:canny_custom_gradient,modules/imgproc/src/canny.cpp,+,CV_Assert(_dx.sameSize(_dy));,746,download/opencv_opencv437.cpp
a455858dd9e442e537533fd798cdfeeb8c9f85d6,Merge pull request #6878 from alalek:canny_custom_gradient,modules/imgproc/test/test_canny.cpp,+,"ts->printf(cvtest::TS::LOG, ""Canny(size = %d x %d, aperture_size = %d, threshold1 = %g, threshold2 = %g, L2 = %s) test_cpp = %s (test case #%d)\n"",",105,download/opencv_opencv438.cpp
848c66babdad7e392a456eec336d8833fe359ade,Merge pull request #6879 from savuor:fix/RNG_corrupts_stack,modules/core/test/test_rand.cpp,+,"ASSERT_EQ(param1, -9);",382,download/opencv_opencv439.cpp
848c66babdad7e392a456eec336d8833fe359ade,Merge pull request #6879 from savuor:fix/RNG_corrupts_stack,modules/core/test/test_rand.cpp,+,"ASSERT_EQ(param2,  2);",383,download/opencv_opencv439.cpp
71cbd6f02eb4480970d38ed08132e8b9e5503b05,fixed bug #5775,modules/core/test/test_arithm.cpp,+,"ASSERT_EQ(0, cv::norm(cv::Mat(5, 5, CV_8UC3, cv::Scalar::all(250)), destImage, cv::NORM_INF));",1920,download/opencv_opencv440.cpp
71cbd6f02eb4480970d38ed08132e8b9e5503b05,fixed bug #5775,modules/core/test/test_arithm.cpp,+,"ASSERT_EQ(0, cv::norm(cv::Mat(5, 5, CV_8UC4, cv::Scalar::all(250)), destImage, cv::NORM_INF));",1929,download/opencv_opencv440.cpp
96edb270a6bd856b1361dd5b50e46815386a1c74,fixed memory corruption when normal dist. params have less channels than target matrix; test added,modules/core/test/test_rand.cpp,+,"ASSERT_EQ(param1, -9);",382,download/opencv_opencv441.cpp
96edb270a6bd856b1361dd5b50e46815386a1c74,fixed memory corruption when normal dist. params have less channels than target matrix; test added,modules/core/test/test_rand.cpp,+,"ASSERT_EQ(param2,  2);",383,download/opencv_opencv441.cpp
e20a93f7d67fdf70ab19055b5e70b0c953d0175e,imgproc test: Canny with custom gradient,modules/imgproc/test/test_canny.cpp,+,"ts->printf(cvtest::TS::LOG, ""Canny(size = %d x %d, aperture_size = %d, threshold1 = %g, threshold2 = %g, L2 = %s) test_cpp = %s (test case #%d)\n"",",105,download/opencv_opencv442.cpp
460b1dc2faf030c171fc2fd43ddb113bc800596e,imgproc: Canny with custom gradient,modules/imgproc/src/canny.cpp,+,CV_Assert(_dx.dims() == 2);,717,download/opencv_opencv443.cpp
460b1dc2faf030c171fc2fd43ddb113bc800596e,imgproc: Canny with custom gradient,modules/imgproc/src/canny.cpp,+,CV_Assert(_dx.type() == CV_16SC1 || _dx.type() == CV_16SC3);,718,download/opencv_opencv443.cpp
460b1dc2faf030c171fc2fd43ddb113bc800596e,imgproc: Canny with custom gradient,modules/imgproc/src/canny.cpp,+,CV_Assert(_dy.type() == _dx.type());,719,download/opencv_opencv443.cpp
460b1dc2faf030c171fc2fd43ddb113bc800596e,imgproc: Canny with custom gradient,modules/imgproc/src/canny.cpp,+,CV_Assert(_dx.sameSize(_dy));,720,download/opencv_opencv443.cpp
d06b8c4ea9d30be7f60196cdf3c9a65f64370fa4,add test for #6836,modules/calib3d/test/test_cameracalibration.cpp,+,"ts->printf( cvtest::TS::LOG, ""The camera matrix is wrong for downscaled image\n"");",1446,download/opencv_opencv444.cpp
cf2d6f6721704e4d8e9f410f77df2f832ce748b9,"solve errors and warnings

Modified performance test and solve a problem caused by an enum type.",modules/core/src/persistence.cpp,-,"void cvWriteMatBase64(::CvFileStorage* fs, const char* name, const ::CvMat* mat)",7398,download/opencv_opencv445.cpp
cf2d6f6721704e4d8e9f410f77df2f832ce748b9,"solve errors and warnings

Modified performance test and solve a problem caused by an enum type.",modules/core/src/persistence.cpp,-,"::base64::cvWriteMat_Base64(fs, name, holder);",7400,download/opencv_opencv445.cpp
cf2d6f6721704e4d8e9f410f77df2f832ce748b9,"solve errors and warnings

Modified performance test and solve a problem caused by an enum type.",modules/core/src/persistence.cpp,-,"void cvWriteMatNDBase64(::CvFileStorage* fs, const char* name, const ::CvMatND* mat)",7402,download/opencv_opencv445.cpp
cf2d6f6721704e4d8e9f410f77df2f832ce748b9,"solve errors and warnings

Modified performance test and solve a problem caused by an enum type.",modules/core/src/persistence.cpp,-,"::base64::cvWriteMat_Base64(fs, name, holder);",7404,download/opencv_opencv445.cpp
6d9c6e9c7a536f10e520af53784f3cfada97a476,Merge pull request #6805 from sergarrido:sergarrido-fix-useextrinsicguess,modules/calib3d/src/solvepnp.cpp,+,CV_Assert( (rtype == CV_32F || rtype == CV_64F) &&,68,download/opencv_opencv446.cpp
6d9c6e9c7a536f10e520af53784f3cfada97a476,Merge pull request #6805 from sergarrido:sergarrido-fix-useextrinsicguess,modules/calib3d/src/solvepnp.cpp,+,"CV_Assert( (rsize == Size(1, 3) || rsize == Size(3, 1)) &&",70,download/opencv_opencv446.cpp
6d9c6e9c7a536f10e520af53784f3cfada97a476,Merge pull request #6805 from sergarrido:sergarrido-fix-useextrinsicguess,modules/calib3d/src/solvepnp.cpp,+,CV_Assert( (rtype == CV_32F || rtype == CV_64F) &&,350,download/opencv_opencv446.cpp
6d9c6e9c7a536f10e520af53784f3cfada97a476,Merge pull request #6805 from sergarrido:sergarrido-fix-useextrinsicguess,modules/calib3d/src/solvepnp.cpp,+,"CV_Assert( (rsize == Size(1, 3) || rsize == Size(3, 1)) &&",352,download/opencv_opencv446.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""THRESHOLD SELECTED = %d, BRIGHTMAX = %d, DARKMAX = %d\n"", iThresh, iBrightMax, piMaxPos[iIdxBGMax]);",399,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""EX quad count: %d/%d\n"", quad_count, expected_corners_num);",513,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Quad count: %d/%d\n"", quad_count, expected_corners_num);",550,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Quad count: %d/%d\n"", quad_count, expected_corners_num);",575,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Starting ordering of inner quads\n"");",606,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Orig count: %d  After ordering: %d\n"", icount, count);",608,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d  orig count: %d cleaned: %d\n"", group_idx, icount, count);",619,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d  count: %d  cleaned: %d\n"", group_idx, icount, count);",624,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Chessboard detection result 0: %d\n"", found);",673,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Starting ordering of inner quads\n"");",677,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Orig count: %d  After ordering: %d\n"", icount, count);",679,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Fallback to old algorithm\n"");",682,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Quad count: %d/%d\n"", quad_count, expected_corners_num);",731,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  orig count: %d cleaned: %d\n"", group_idx, icount, count);",786,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Starting ordering of inner quads\n"");",788,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  count: %d  cleaned: %d\n"", group_idx, icount, count);",792,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Orig count: %d  After ordering: %d\n"", icount, count);",792,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d  orig count: %d cleaned: %d\n"", group_idx, icount, count);",819,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d  count: %d  cleaned: %d\n"", group_idx, icount, count);",824,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Chessboard detection result 1: %d\n"", found);",869,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Chessboard detection result 2: %d\n"", found);",874,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Chessboard detection result 3: %d\n"", found);",734,download/opencv_opencv447.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/checkchessboard.cpp,+,"cvError(CV_BadNumChannels, ""cvCheckChessboard"", ""supports single-channel images only"",",221,download/opencv_opencv448.cpp
5d3860703d70047ee5055c6800d86cb36c03d490,Merge pull request #6895 from mshabunin:check-6851,modules/calib3d/src/checkchessboard.cpp,+,"cvError(CV_BadDepth, ""cvCheckChessboard"", ""supports depth=8 images only"",",227,download/opencv_opencv448.cpp
78ca5ddd45a25781f931125e2eebf168178b0d2b,solve errors and warnings,modules/core/src/persistence.cpp,-,"CV_IMPL void cvWriteMatBase64(::CvFileStorage* fs, const char* name, const ::CvMat* mat)",7395,download/opencv_opencv449.cpp
78ca5ddd45a25781f931125e2eebf168178b0d2b,solve errors and warnings,modules/core/src/persistence.cpp,+,"void cvWriteMatBase64(::CvFileStorage* fs, const char* name, const ::CvMat* mat)",7395,download/opencv_opencv449.cpp
78ca5ddd45a25781f931125e2eebf168178b0d2b,solve errors and warnings,modules/core/src/persistence.cpp,-,"CV_IMPL void cvWriteMatNDBase64(::CvFileStorage* fs, const char* name, const ::CvMatND* mat)",7401,download/opencv_opencv449.cpp
78ca5ddd45a25781f931125e2eebf168178b0d2b,solve errors and warnings,modules/core/src/persistence.cpp,+,"void cvWriteMatNDBase64(::CvFileStorage* fs, const char* name, const ::CvMatND* mat)",7401,download/opencv_opencv449.cpp
78ca5ddd45a25781f931125e2eebf168178b0d2b,solve errors and warnings,modules/core/test/test_io_base64.cpp,-,"cvWriteRawData(*fs, rawdata.data(), rawdata.size(), ""i"");",185,download/opencv_opencv450.cpp
78ca5ddd45a25781f931125e2eebf168178b0d2b,solve errors and warnings,modules/core/test/test_io_base64.cpp,+,"cvWriteRawData(*fs, rawdata.data(), static_cast<int>(rawdata.size()), ""i"");",185,download/opencv_opencv450.cpp
78ca5ddd45a25781f931125e2eebf168178b0d2b,solve errors and warnings,modules/core/test/test_io_base64.cpp,-,"cvWriteRawData(*fs, rawdata.data(), rawdata.size(), ""i"");",214,download/opencv_opencv450.cpp
78ca5ddd45a25781f931125e2eebf168178b0d2b,solve errors and warnings,modules/core/test/test_io_base64.cpp,+,"cvWriteRawData(*fs, rawdata.data(), static_cast<int>(rawdata.size()), ""i"");",214,download/opencv_opencv450.cpp
87ae4e0564e35fc677e86130eeddd39124b06f3c,fixed clone of empty matrix,modules/core/test/test_mat.cpp,+,ASSERT_NO_THROW(cloned = source.clone());,1547,download/opencv_opencv451.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,Base64Writer(::CvFileStorage * fs);,332,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,~Base64Writer();,333,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"void write(const void* _data, size_t len, const char* dt);",334,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"template<typename _to_binary_convertor_t> void write(_to_binary_convertor_t & convertor, const char* dt);",335,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt);",359,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"void cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len);",359,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,void cvEndWriteRawData_Base64(::CvFileStorage * fs);,359,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"void cvWriteRawDataBase64(::CvFileStorage* fs, const void* _data, int len, const char* dt);",359,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"void cvWriteRawData_Base64(::cv::FileStorage & fs, const void* _data, int len, const char* dt);",361,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"void cvWriteMat_Base64(CvFileStorage * fs, const char * name, ::cv::Mat const & mat);",361,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"void cvWriteMat_Base64(::CvFileStorage * fs, const char * name, ::cv::Mat const & mat);",361,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,CV_DbgAssert( fs->base64_writer == 0 );,1110,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,fs->base64_writer = new base64::Base64Writer( fs );,1111,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, err_unkonwn_state );",1118,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, err_unable_to_switch );",1127,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, err_unkonwn_state );",1134,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, err_unable_to_switch );",1143,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, err_unkonwn_state );",1148,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, err_unkonwn_state );",1153,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"static void check_if_write_struct_is_delayed( CvFileStorage* fs, bool change_type_to_base64 = false )",1161,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"fs->start_write_struct( fs, struct_key, struct_flags, ""binary"");",1193,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"fs->start_write_struct( fs, struct_key, struct_flags, type_name);",1200,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,static void make_write_struct_delayed(,1212,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,CV_Assert( fs->is_write_struct_delayed == false );,1218,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,CV_DbgAssert( fs->delayed_struct_key   == 0 );,1219,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,CV_DbgAssert( fs->delayed_struct_flags == 0 );,1220,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,CV_DbgAssert( fs->delayed_type_name    == 0 );,1221,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR(""Cannot parse size in Base64 header"");",1338,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Invalid Base64 data."" );",1366,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,check_if_write_struct_is_delayed( fs );,1832,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""At present, output Base64 data only."" );",1839,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,while(cv_isprint(*ptr)) /* no check for base64 string */,2264,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,while( cv_isprint(*ptr) ) /* no check for base64 string */,2264,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR(""Unexpected end of line"");",2267,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Unexpected end of line"" );",2268,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR(""Cannot parse size in Base64 header"");",2291,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR( ""Invalid Base64 data."" );",2311,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"CV_PARSE_ERROR(""Byte size not match elememt size"");",2336,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""data size not matches elememt size"");",2336,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,check_if_write_struct_is_delayed( fs );,2982,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""Currently only Base64 data is allowed."" );",2989,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"fs->start_write_struct( fs, key, struct_flags, type_name );",3501,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,check_if_write_struct_is_delayed( fs );,3501,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"make_write_struct_delayed( fs, key, struct_flags, type_name );",3515,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""must set 'struct_flags |= CV_NODE_SEQ' if using Base64."");",3521,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""function \'cvStartWriteStruct\' calls cannot be nested if using Base64."");",3523,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"fs->start_write_struct( fs, key, struct_flags, type_name );",3525,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""At the end of the output Base64, `cvEndWriteStruct` is needed."");",3535,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"fs->start_write_struct( fs, key, struct_flags, type_name );",3537,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,check_if_write_struct_is_delayed( fs );,3550,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"base64::cvWriteRawDataBase64( fs, _data, len, dt );",3735,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"fs->start_write_struct( fs, name, CV_NODE_TYPE(node->tag) +",4071,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"cvStartWriteStruct( fs, name, CV_NODE_TYPE(node->tag) +",4071,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,fs->end_write_struct( fs );,4075,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,cvEndWriteStruct( fs );,4075,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"fs->start_write_struct( fs, name, CV_NODE_SEQ, 0 );",4078,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,fs->end_write_struct( fs );,4078,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"cvStartWriteStruct( fs, name, CV_NODE_SEQ, 0 );",4078,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,cvEndWriteStruct( fs );,4079,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,base64::Base64Writer::Base64Writer(::CvFileStorage * fs),7262,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"Base64Writer(::CvFileStorage * fs, const char * name, int len, const char* dt)",7272,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"void base64::Base64Writer::write(const void* _data, size_t len, const char* dt)",7278,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"cvStartWriteStruct(fs, name, CV_NODE_SEQ, ""binary"");",7282,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,emitter->write(convertor);,7286,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"void base64::Base64Writer::write(_to_binary_convertor_t & convertor, const char* dt)",7291,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,emitter->write(convertor);,7294,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,base64::Base64Writer::~Base64Writer(),7297,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""Invalid \'dt\'."" );",7307,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"emitter.write(beg, end);",7317,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"void write(const void* _data, int len)",7319,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,CV_Assert(len >= 0);,7320,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,CV_Assert(remaining_data_length >= static_cast<size_t>(len));,7320,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,emitter.write(convertor);,7323,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"void write(_to_binary_convertor_t & convertor, int data_length_of_convertor)",7326,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,CV_Assert(data_length_of_convertor >= 0);,7327,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,CV_Assert(remaining_data_length >= static_cast<size_t>(data_length_of_convertor));,7327,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,emitter.write(convertor);,7329,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,~Base64Writer(),7331,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,CV_Assert(remaining_data_length == 0U);,7332,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,cvEndWriteStruct(file_storage);,7333,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"emitter->write(beg, end);",7335,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsBadArg, ""\'dt\' does not match."" );",7337,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"void base64::cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt)",7321,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"void base64::cvWriteRawDataBase64(::CvFileStorage* fs, const void* _data, int len, const char* dt)",7321,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,CV_Assert(fs->base64_writer == 0);,7325,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"fs->base64_writer = new Base64Writer(fs, name, len, dt);",7325,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"void base64::cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len)",7327,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,CV_Assert(fs);,7328,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,CV_Assert(fs->base64_writer != 0);,7329,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"fs->base64_writer->write(_data, len);",7329,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"check_if_write_struct_is_delayed( fs, true );",7330,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,void base64::cvEndWriteRawData_Base64(::CvFileStorage * fs),7332,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,CV_Assert(fs);,7333,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,CV_Assert(fs->base64_writer != 0);,7334,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"void base64::cvWriteRawData_Base64(::cv::FileStorage & fs, const void* _data, int len, const char* dt)",7338,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"cvStartWriteStruct(*fs, fs.elname.c_str(), CV_NODE_SEQ, ""binary"");",7339,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"emitter.write(beg, end);",7349,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,emitter.write(convert);,7352,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsError, ""Base64 should not be used at present."" );",7357,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,cvEndWriteStruct(*fs);,7359,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"fs->base64_writer->write(_data, len, dt);",7360,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"cvStartWriteStruct(fs, name, CV_NODE_MAP, CV_TYPE_NAME_MAT);",7348,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"::cvStartWriteStruct(fs, name, CV_NODE_MAP, CV_TYPE_NAME_MAT);",7348,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"cvWriteInt(fs, ""rows"", mat.rows );",7350,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"cvWriteInt(fs, ""cols"", mat.cols );",7350,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"::cvWriteInt(fs, ""rows"", mat.rows );",7350,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"::cvWriteInt(fs, ""cols"", mat.cols );",7351,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"cvStartWriteStruct(fs, name, CV_NODE_MAP, CV_TYPE_NAME_MATND);",7353,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"::cvStartWriteStruct(fs, name, CV_NODE_MAP, CV_TYPE_NAME_MATND);",7353,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"cvStartWriteStruct(fs, ""sizes"", CV_NODE_SEQ | CV_NODE_FLOW);",7355,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"cvWriteRawData(fs, mat.size.p, mat.dims, ""i"");",7355,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,cvEndWriteStruct(fs);,7355,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"::cvStartWriteStruct(fs, ""sizes"", CV_NODE_SEQ | CV_NODE_FLOW);",7355,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"::cvWriteRawData(fs, mat.size.p, mat.dims, ""i"");",7356,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,::cvEndWriteStruct(fs);,7357,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"cvWriteString(fs, ""dt"", ::icvEncodeFormat(CV_MAT_TYPE(mat.type()), dt ), 0 );",7359,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"::cvWriteString(fs, ""dt"", ::icvEncodeFormat(CV_MAT_TYPE(mat.type()), dt ), 0 );",7359,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"cvStartWriteRawData_Base64(fs, ""data"", len, dt);",7366,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"fs->base64_writer->write(convertor, len);",7366,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,cvEndWriteRawData_Base64(fs);,7366,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"::cvStartWriteStruct(fs, ""data"", CV_NODE_SEQ, ""binary"");",7366,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"fs->base64_writer->write(convertor, dt);",7367,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,::cvEndWriteStruct(fs);,7368,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,cvEndWriteStruct(fs);,7372,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,::cvEndWriteStruct(fs);,7372,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_IMPL void cvWriteMatBase64(::CvFileStorage* fs, const char* name, const ::CvMat* mat)",7381,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"void cvWriteMat_Base64(::CvFileStorage* fs, const char* name, const ::CvMat* mat)",7383,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"::base64::cvWriteMat_Base64(fs, name, holder);",7385,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"void cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const ::CvMatND* mat)",7387,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"::base64::cvWriteMat_Base64(fs, name, holder);",7389,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt)",7391,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"::base64::cvStartWriteRawData_Base64(fs, name, len, dt);",7392,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"void cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len)",7394,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,"::base64::cvWriteRawData_Base64(fs, _data, len);",7395,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,void cvEndWriteRawData_Base64(::CvFileStorage * fs),7397,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,-,::base64::cvEndWriteRawData_Base64(fs);,7398,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"::base64::cvWriteMat_Base64(fs, name, holder);",7400,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_IMPL void cvWriteMatNDBase64(::CvFileStorage* fs, const char* name, const ::CvMatND* mat)",7403,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"::base64::cvWriteMat_Base64(fs, name, holder);",7406,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"CV_IMPL void cvWriteRawDataBase64(::CvFileStorage* fs, const void* _data, int len, const char* dt)",7409,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/src/persistence.cpp,+,"::base64::cvWriteRawDataBase64(fs, _data, len, dt);",7411,download/opencv_opencv452.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io.cpp,-,"cv::cvWriteMat_Base64(*fs, ""normal_2d_mat"", &holder);",666,download/opencv_opencv453.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io.cpp,-,"cv::cvWriteMatND_Base64(*fs, ""normal_nd_mat"", &holder_nd);",667,download/opencv_opencv453.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io.cpp,-,"cv::cvWriteMat_Base64(*fs, ""empty_2d_mat"", &holder);",668,download/opencv_opencv453.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io.cpp,-,"cv::cvStartWriteRawData_Base64(*fs, ""rawdata"", static_cast<int>(rawdata.size()), ""2u3i2di"");",669,download/opencv_opencv453.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io.cpp,-,"cv::cvWriteRawData_Base64(*fs, rawdata.data() + i * 100, 100);",670,download/opencv_opencv453.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io.cpp,-,cv::cvEndWriteRawData_Base64(*fs);,670,download/opencv_opencv453.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,"cvStartWriteStruct( *fs, ""rawdata"", CV_NODE_SEQ | CV_NODE_FLOW, ""binary"" );",88,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,"cvWriteRawDataBase64(*fs, rawdata.data() + i * 100, 100, data_t::signature());",90,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,cvEndWriteStruct( *fs );,91,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,"cvStartWriteStruct(*fs, ""manydata"", CV_NODE_SEQ);",182,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW);",183,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,"cvWriteRawData(*fs, rawdata.data(), rawdata.size(), ""i"");",185,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,cvEndWriteStruct(*fs);,186,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,"cvWriteString(*fs, 0, str_out.c_str(), 1);",187,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,cvEndWriteStruct(*fs);,188,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,"cvStartWriteStruct(*fs, ""manydata"", CV_NODE_SEQ);",210,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,"cvWriteString(*fs, 0, str_out.c_str(), 1);",211,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW, ""binary"");",212,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,"cvWriteRawData(*fs, rawdata.data(), rawdata.size(), ""i"");",214,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,cvEndWriteStruct(*fs);,215,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,cvEndWriteStruct(*fs);,216,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,"cvStartWriteStruct(*fs, ""rawdata"", CV_NODE_SEQ, ""binary"");",252,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW);",253,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,"cvStartWriteStruct(*fs, ""rawdata"", CV_NODE_SEQ);",258,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,"cvStartWriteStruct(*fs, 0, CV_NODE_SEQ | CV_NODE_FLOW);",259,download/opencv_opencv454.cpp
617df091438f94d50dce8aa32d83392103bc3a5b,"Modify Base64 functions and add test and documentation

Major changes:

- modify the Base64 functions to compatible with `cvWriteRawData` and so
on.
- add a Base64 flag for FileStorage and outputs raw data in Base64
automatically.
- complete all  testing and documentation.",modules/core/test/test_io_base64.cpp,+,"cvWriteRawDataBase64(*fs, name, 1, ""u"");",260,download/opencv_opencv454.cpp
0d7c16b5fd2ba6802ea38a9bae334ea4961278d2,Merge pull request #6920 from savuor:fix2.4/RNG_Corrupts_memory,modules/core/test/test_rand.cpp,+,"ASSERT_EQ(param1, -9);",382,download/opencv_opencv455.cpp
0d7c16b5fd2ba6802ea38a9bae334ea4961278d2,Merge pull request #6920 from savuor:fix2.4/RNG_Corrupts_memory,modules/core/test/test_rand.cpp,+,"ASSERT_EQ(param2,  2);",383,download/opencv_opencv455.cpp
48b747903bdb1b57ab2cee9523ae0260edf11572,Merge pull request #6830 from tomoaki0705:featureSupportFp16,modules/core/src/convert.cpp,+,CV_Assert( func != 0 );,5160,download/opencv_opencv456.cpp
77f9bb7b76e7ea3518ecde94e65e03cc4316bd93,Merge pull request #6831 from bobpaulin:master,apps/createsamples/createsamples.cpp,+,"printf( ""Max Scale: %g\n"", maxscale);",203,download/opencv_opencv457.cpp
d62b0bd3639dccc72afb56faab1178678733c228,Merge pull request #6849 from alcinos:optflow_interface,modules/video/src/optflowgf.cpp,-,CV_Assert(polyN == 5 || polyN == 7);,660,download/opencv_opencv458.cpp
d62b0bd3639dccc72afb56faab1178678733c228,Merge pull request #6849 from alcinos:optflow_interface,modules/video/src/optflowgf.cpp,-,CV_Assert(!fastPyramids || std::abs(pyrScale - 0.5) < 1e-6);,660,download/opencv_opencv458.cpp
d62b0bd3639dccc72afb56faab1178678733c228,Merge pull request #6849 from alcinos:optflow_interface,modules/video/src/optflowgf.cpp,+,CV_Assert(polyN_ == 5 || polyN_ == 7);,660,download/opencv_opencv458.cpp
d62b0bd3639dccc72afb56faab1178678733c228,Merge pull request #6849 from alcinos:optflow_interface,modules/video/src/optflowgf.cpp,+,CV_Assert(!fastPyramids_ || std::abs(pyrScale_ - 0.5) < 1e-6);,661,download/opencv_opencv458.cpp
1efa7f4d273830ed10dac2522f4db846a646e9c2,Merge pull request #6911 from ilya-lavrenov:push_back,modules/core/src/matrix.cpp,-,"CV_Error(CV_StsUnmatchedSizes, """");",842,download/opencv_opencv459.cpp
1efa7f4d273830ed10dac2522f4db846a646e9c2,Merge pull request #6911 from ilya-lavrenov:push_back,modules/core/src/matrix.cpp,+,"CV_Error(CV_StsUnmatchedSizes, ""Pushed vector length is not equal to matrix row length"");",842,download/opencv_opencv459.cpp
1efa7f4d273830ed10dac2522f4db846a646e9c2,Merge pull request #6911 from ilya-lavrenov:push_back,modules/core/src/matrix.cpp,-,"CV_Error(CV_StsUnmatchedFormats, """");",844,download/opencv_opencv459.cpp
1efa7f4d273830ed10dac2522f4db846a646e9c2,Merge pull request #6911 from ilya-lavrenov:push_back,modules/core/src/matrix.cpp,+,"CV_Error(CV_StsUnmatchedFormats, ""Pushed vector type is not the same as matrix type"");",844,download/opencv_opencv459.cpp
1efa7f4d273830ed10dac2522f4db846a646e9c2,Merge pull request #6911 from ilya-lavrenov:push_back,modules/core/test/test_mat.cpp,+,"ASSERT_EQ(6, result.rows);",1539,download/opencv_opencv460.cpp
7b2ef647aac2ad54a5152146af5270fafea9c31b,fixed memory corruption when normal dist. params have less channels than target matrix; test added,modules/core/test/test_rand.cpp,+,"ASSERT_EQ(param1, -9);",382,download/opencv_opencv461.cpp
7b2ef647aac2ad54a5152146af5270fafea9c31b,fixed memory corruption when normal dist. params have less channels than target matrix; test added,modules/core/test/test_rand.cpp,+,"ASSERT_EQ(param2,  2);",383,download/opencv_opencv461.cpp
464aa5e5559746afc7526e423864c071897dca68,Merge pull request #6803 from alalek:issue_6720,modules/videoio/src/cap_ffmpeg.cpp,+,if (sz > 0 && ERROR_SUCCESS == GetLastError()),137,download/opencv_opencv462.cpp
957bf1452cc14e11fc74e204ae090e45f3c9b608,added some tests for push_back,modules/core/src/matrix.cpp,-,"CV_Error(CV_StsUnmatchedSizes, """");",842,download/opencv_opencv463.cpp
957bf1452cc14e11fc74e204ae090e45f3c9b608,added some tests for push_back,modules/core/src/matrix.cpp,+,"CV_Error(CV_StsUnmatchedSizes, ""Pushed vector length is not equal to matrix row length"");",842,download/opencv_opencv463.cpp
957bf1452cc14e11fc74e204ae090e45f3c9b608,added some tests for push_back,modules/core/src/matrix.cpp,-,"CV_Error(CV_StsUnmatchedFormats, """");",844,download/opencv_opencv463.cpp
957bf1452cc14e11fc74e204ae090e45f3c9b608,added some tests for push_back,modules/core/src/matrix.cpp,+,"CV_Error(CV_StsUnmatchedFormats, ""Pushed vector type is not the same as matrix type"");",844,download/opencv_opencv463.cpp
957bf1452cc14e11fc74e204ae090e45f3c9b608,added some tests for push_back,modules/core/test/test_mat.cpp,+,"ASSERT_EQ(6, result.rows);",1539,download/opencv_opencv464.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,114,download/opencv_opencv465.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,136,download/opencv_opencv465.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,158,download/opencv_opencv465.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,180,download/opencv_opencv465.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,202,download/opencv_opencv465.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,224,download/opencv_opencv465.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/accumulate.cpp,+,internal::assertSupportedConfiguration();,52,download/opencv_opencv466.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/accumulate.cpp,+,internal::assertSupportedConfiguration();,231,download/opencv_opencv466.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/accumulate.cpp,+,internal::assertSupportedConfiguration();,376,download/opencv_opencv466.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,109,download/opencv_opencv467.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,145,download/opencv_opencv467.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,181,download/opencv_opencv467.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,231,download/opencv_opencv467.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,314,download/opencv_opencv467.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,350,download/opencv_opencv467.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,386,download/opencv_opencv467.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,422,download/opencv_opencv467.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,457,download/opencv_opencv467.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/add_weighted.cpp,+,internal::assertSupportedConfiguration();                 \,232,download/opencv_opencv468.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/add_weighted.cpp,+,internal::assertSupportedConfiguration();                 \,252,download/opencv_opencv468.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,119,download/opencv_opencv469.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,164,download/opencv_opencv469.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,186,download/opencv_opencv469.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,208,download/opencv_opencv469.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlur3x3Supported(size, border));",59,download/opencv_opencv470.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurU8Supported(size, cn, borderType));",196,download/opencv_opencv470.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurU8Supported(size, cn, borderType));",506,download/opencv_opencv470.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/blur.cpp,+,internal::assertSupportedConfiguration(false);//Unsupported channels number,745,download/opencv_opencv470.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurF32Supported(size, cn, borderType));",831,download/opencv_opencv470.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurS32Supported(size, cn, borderType));",1093,download/opencv_opencv470.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration(isCanny3x3Supported(size));,667,download/opencv_opencv471.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration(isCanny3x3Supported(size));,694,download/opencv_opencv471.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration();,721,download/opencv_opencv471.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration();,750,download/opencv_opencv471.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();,50,download/opencv_opencv472.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();,102,download/opencv_opencv472.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();,154,download/opencv_opencv472.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                           \,289,download/opencv_opencv472.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                           \,330,download/opencv_opencv472.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                           \,388,download/opencv_opencv472.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                        \,444,download/opencv_opencv472.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                        \,458,download/opencv_opencv472.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();                                                               \,137,download/opencv_opencv473.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();                                                               \,178,download/opencv_opencv473.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();                                                               \,212,download/opencv_opencv473.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();,241,download/opencv_opencv473.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();,318,download/opencv_opencv473.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/cmp.cpp,+,internal::assertSupportedConfiguration();             \,280,download/opencv_opencv474.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/cmp.cpp,+,internal::assertSupportedConfiguration();             \,296,download/opencv_opencv474.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/common.cpp,+,void assertSupportedConfiguration(bool parametersSupported),58,download/opencv_opencv475.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/common.cpp,+,internal::assertSupportedConfiguration(false);,103,download/opencv_opencv475.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/convert.cpp,+,internal::assertSupportedConfiguration();                               \,51,download/opencv_opencv476.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/convert.cpp,+,internal::assertSupportedConfiguration();                               \,87,download/opencv_opencv476.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/convert_depth.cpp,+,internal::assertSupportedConfiguration();,262,download/opencv_opencv477.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/convert_depth.cpp,+,internal::assertSupportedConfiguration();,315,download/opencv_opencv477.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/convolution.cpp,+,"internal::assertSupportedConfiguration(isConvolutionSupported(size, ksize, border));",82,download/opencv_opencv478.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,49,download/opencv_opencv479.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,115,download/opencv_opencv479.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,181,download/opencv_opencv479.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,242,download/opencv_opencv479.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,300,download/opencv_opencv479.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,134,download/opencv_opencv480.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,294,download/opencv_opencv480.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,440,download/opencv_opencv480.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,597,download/opencv_opencv480.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/dot_product.cpp,+,internal::assertSupportedConfiguration();,48,download/opencv_opencv481.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/dot_product.cpp,+,internal::assertSupportedConfiguration();,126,download/opencv_opencv481.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/dot_product.cpp,+,internal::assertSupportedConfiguration();,204,download/opencv_opencv481.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/fast.cpp,+,internal::assertSupportedConfiguration();,221,download/opencv_opencv482.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,88,download/opencv_opencv483.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,169,download/opencv_opencv483.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,249,download/opencv_opencv483.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,329,download/opencv_opencv483.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,388,download/opencv_opencv483.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/flip.cpp,+,"internal::assertSupportedConfiguration(isFlipSupported(flipMode, elemSize));",177,download/opencv_opencv484.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur3x3Supported(size, border));",58,download/opencv_opencv485.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur3x3MarginSupported(size, border, borderMargin));",183,download/opencv_opencv485.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",214,download/opencv_opencv485.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",597,download/opencv_opencv485.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",725,download/opencv_opencv485.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",939,download/opencv_opencv485.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/in_range.cpp,+,internal::assertSupportedConfiguration();                \,171,download/opencv_opencv486.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/in_range.cpp,+,internal::assertSupportedConfiguration();                \,184,download/opencv_opencv486.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/integral.cpp,+,internal::assertSupportedConfiguration();,48,download/opencv_opencv487.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/integral.cpp,+,internal::assertSupportedConfiguration();,144,download/opencv_opencv487.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacian3x3Supported(size, border));",59,download/opencv_opencv488.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacianOpenCVSupported(size, border));",202,download/opencv_opencv488.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacianOpenCVSupported(size, border));",332,download/opencv_opencv488.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacianOpenCVSupported(size, border));",466,download/opencv_opencv488.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/magnitude.cpp,+,internal::assertSupportedConfiguration();,119,download/opencv_opencv489.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/magnitude.cpp,+,internal::assertSupportedConfiguration();,142,download/opencv_opencv489.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/meanstddev.cpp,+,internal::assertSupportedConfiguration();,50,download/opencv_opencv490.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/meanstddev.cpp,+,internal::assertSupportedConfiguration();,77,download/opencv_opencv490.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/median_filter.cpp,+,"internal::assertSupportedConfiguration(isMedianFilter3x3Supported(size, numChannels));",127,download/opencv_opencv491.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/min_max.cpp,+,internal::assertSupportedConfiguration();                          \,109,download/opencv_opencv492.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/min_max.cpp,+,internal::assertSupportedConfiguration();     \,124,download/opencv_opencv492.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,124,download/opencv_opencv493.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,142,download/opencv_opencv493.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,160,download/opencv_opencv493.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,178,download/opencv_opencv493.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,196,download/opencv_opencv493.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,215,download/opencv_opencv493.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,348,download/opencv_opencv493.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,494,download/opencv_opencv493.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,626,download/opencv_opencv493.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,781,download/opencv_opencv493.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,1172,download/opencv_opencv493.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,1259,download/opencv_opencv493.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/morph.cpp,+,"internal::assertSupportedConfiguration(isMorph3x3Supported(size, border));",241,download/opencv_opencv494.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/morph.cpp,+,"internal::assertSupportedConfiguration(isMorph3x3Supported(size, border));",263,download/opencv_opencv494.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/morph.cpp,+,"inline void morphology(const Size2D &ssize, u32 cn,",511,download/opencv_opencv494.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/morph.cpp,+,internal::assertSupportedConfiguration(ssize.width > 0 && ssize.height > 0 &&,682,download/opencv_opencv494.cpp
75b93b17ee8499ecae5454335b5c0158cb725354,Merge remote-tracking branch 'refs/remotes/opencv/master',3rdparty/carotene/src/morph.cpp,+,internal::assertSupportedConfiguration(ssize.width > 0 && ssize.height > 0 &&,709,download/opencv_opencv494.cpp
ea911d34c60d3868debc9dc3a5dc1179d93d5baf,remove 2-channel png encoder/decoder support,modules/imgcodecs/src/loadsave.cpp,+,CV_Assert( image.channels() == 1 || image.channels() == 3 || image.channels() == 4 );,455,download/opencv_opencv495.cpp
ea911d34c60d3868debc9dc3a5dc1179d93d5baf,remove 2-channel png encoder/decoder support,modules/imgcodecs/src/loadsave.cpp,+,CV_Assert( channels == 1 || channels == 3 || channels == 4 );,594,download/opencv_opencv495.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,114,download/opencv_opencv496.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,136,download/opencv_opencv496.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,158,download/opencv_opencv496.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,180,download/opencv_opencv496.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,202,download/opencv_opencv496.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,224,download/opencv_opencv496.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/accumulate.cpp,+,internal::assertSupportedConfiguration();,52,download/opencv_opencv497.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/accumulate.cpp,+,internal::assertSupportedConfiguration();,231,download/opencv_opencv497.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/accumulate.cpp,+,internal::assertSupportedConfiguration();,376,download/opencv_opencv497.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,109,download/opencv_opencv498.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,145,download/opencv_opencv498.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,181,download/opencv_opencv498.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,231,download/opencv_opencv498.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,314,download/opencv_opencv498.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,350,download/opencv_opencv498.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,386,download/opencv_opencv498.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,422,download/opencv_opencv498.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,457,download/opencv_opencv498.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/add_weighted.cpp,+,internal::assertSupportedConfiguration();                 \,232,download/opencv_opencv499.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/add_weighted.cpp,+,internal::assertSupportedConfiguration();                 \,252,download/opencv_opencv499.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,119,download/opencv_opencv500.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,164,download/opencv_opencv500.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,186,download/opencv_opencv500.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,208,download/opencv_opencv500.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlur3x3Supported(size, border));",59,download/opencv_opencv501.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurU8Supported(size, cn, borderType));",196,download/opencv_opencv501.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurU8Supported(size, cn, borderType));",506,download/opencv_opencv501.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/blur.cpp,+,internal::assertSupportedConfiguration(false);//Unsupported channels number,745,download/opencv_opencv501.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurF32Supported(size, cn, borderType));",831,download/opencv_opencv501.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurS32Supported(size, cn, borderType));",1093,download/opencv_opencv501.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration(isCanny3x3Supported(size));,667,download/opencv_opencv502.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration(isCanny3x3Supported(size));,694,download/opencv_opencv502.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration();,721,download/opencv_opencv502.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration();,750,download/opencv_opencv502.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();,50,download/opencv_opencv503.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();,102,download/opencv_opencv503.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();,154,download/opencv_opencv503.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                           \,289,download/opencv_opencv503.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                           \,330,download/opencv_opencv503.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                           \,388,download/opencv_opencv503.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                        \,444,download/opencv_opencv503.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                        \,458,download/opencv_opencv503.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();                                                               \,137,download/opencv_opencv504.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();                                                               \,178,download/opencv_opencv504.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();                                                               \,212,download/opencv_opencv504.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();,241,download/opencv_opencv504.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();,318,download/opencv_opencv504.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/cmp.cpp,+,internal::assertSupportedConfiguration();             \,280,download/opencv_opencv505.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/cmp.cpp,+,internal::assertSupportedConfiguration();             \,296,download/opencv_opencv505.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/common.cpp,+,void assertSupportedConfiguration(bool parametersSupported),58,download/opencv_opencv506.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/common.cpp,+,internal::assertSupportedConfiguration(false);,103,download/opencv_opencv506.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/convert.cpp,+,internal::assertSupportedConfiguration();                               \,51,download/opencv_opencv507.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/convert.cpp,+,internal::assertSupportedConfiguration();                               \,87,download/opencv_opencv507.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/convert_depth.cpp,+,internal::assertSupportedConfiguration();,262,download/opencv_opencv508.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/convert_depth.cpp,+,internal::assertSupportedConfiguration();,315,download/opencv_opencv508.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/convolution.cpp,+,"internal::assertSupportedConfiguration(isConvolutionSupported(size, ksize, border));",82,download/opencv_opencv509.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,49,download/opencv_opencv510.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,115,download/opencv_opencv510.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,181,download/opencv_opencv510.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,242,download/opencv_opencv510.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,300,download/opencv_opencv510.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,134,download/opencv_opencv511.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,294,download/opencv_opencv511.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,440,download/opencv_opencv511.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,597,download/opencv_opencv511.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/dot_product.cpp,+,internal::assertSupportedConfiguration();,48,download/opencv_opencv512.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/dot_product.cpp,+,internal::assertSupportedConfiguration();,126,download/opencv_opencv512.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/dot_product.cpp,+,internal::assertSupportedConfiguration();,204,download/opencv_opencv512.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/fast.cpp,+,internal::assertSupportedConfiguration();,221,download/opencv_opencv513.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,88,download/opencv_opencv514.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,169,download/opencv_opencv514.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,249,download/opencv_opencv514.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,329,download/opencv_opencv514.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,388,download/opencv_opencv514.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/flip.cpp,+,"internal::assertSupportedConfiguration(isFlipSupported(flipMode, elemSize));",177,download/opencv_opencv515.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur3x3Supported(size, border));",58,download/opencv_opencv516.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur3x3MarginSupported(size, border, borderMargin));",183,download/opencv_opencv516.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",214,download/opencv_opencv516.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",597,download/opencv_opencv516.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",725,download/opencv_opencv516.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",939,download/opencv_opencv516.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/in_range.cpp,+,internal::assertSupportedConfiguration();                \,171,download/opencv_opencv517.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/in_range.cpp,+,internal::assertSupportedConfiguration();                \,184,download/opencv_opencv517.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/integral.cpp,+,internal::assertSupportedConfiguration();,48,download/opencv_opencv518.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/integral.cpp,+,internal::assertSupportedConfiguration();,144,download/opencv_opencv518.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacian3x3Supported(size, border));",59,download/opencv_opencv519.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacianOpenCVSupported(size, border));",202,download/opencv_opencv519.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacianOpenCVSupported(size, border));",332,download/opencv_opencv519.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacianOpenCVSupported(size, border));",466,download/opencv_opencv519.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/magnitude.cpp,+,internal::assertSupportedConfiguration();,119,download/opencv_opencv520.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/magnitude.cpp,+,internal::assertSupportedConfiguration();,142,download/opencv_opencv520.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/meanstddev.cpp,+,internal::assertSupportedConfiguration();,50,download/opencv_opencv521.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/meanstddev.cpp,+,internal::assertSupportedConfiguration();,77,download/opencv_opencv521.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/median_filter.cpp,+,"internal::assertSupportedConfiguration(isMedianFilter3x3Supported(size, numChannels));",127,download/opencv_opencv522.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/min_max.cpp,+,internal::assertSupportedConfiguration();                          \,109,download/opencv_opencv523.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/min_max.cpp,+,internal::assertSupportedConfiguration();     \,124,download/opencv_opencv523.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,124,download/opencv_opencv524.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,142,download/opencv_opencv524.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,160,download/opencv_opencv524.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,178,download/opencv_opencv524.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,196,download/opencv_opencv524.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,215,download/opencv_opencv524.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,348,download/opencv_opencv524.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,494,download/opencv_opencv524.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,626,download/opencv_opencv524.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,781,download/opencv_opencv524.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,1172,download/opencv_opencv524.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,1259,download/opencv_opencv524.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/morph.cpp,+,"internal::assertSupportedConfiguration(isMorph3x3Supported(size, border));",241,download/opencv_opencv525.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/morph.cpp,+,"internal::assertSupportedConfiguration(isMorph3x3Supported(size, border));",263,download/opencv_opencv525.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/morph.cpp,+,"inline void morphology(const Size2D &ssize, u32 cn,",511,download/opencv_opencv525.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/morph.cpp,+,internal::assertSupportedConfiguration(ssize.width > 0 && ssize.height > 0 &&,682,download/opencv_opencv525.cpp
d40e46bc9bba0caeaada57e8c3a027960c317031,"Merge branch 'master' into better_png_transparency

* master: (468 commits)
  added suppression for TBB valgrind issue
  update CUDA architecture flags initialization
  increase minimal supported CUDA toolkit to 6.5
  check the CPU flag correctly
  opencv_visualization: check cmdline args
  provide better error messages
  stop search of markers in Exif reader to prevent infinite loop
  Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag
  clarify CUDA arithm operations usage with mask
  fixed empty image condition in resize
  fixed memory leak in flann tests
  fisheye: add CALIB_FIX_PRINCIPAL_POINT
  get/put: more type-safety and code unification using templates
  py_tutorials: fix cv2.findContours return val
  imgproc: speed up threshold of 64F version using NEON and SSE   * use NEON under aarch64 only   * check 64F version correctly
  bigdata: add test, resolve split/merge issue
  Improved Carotene library linear resize evaluation precision and enabled it as HAL implementation.
  persistence: fixing crash with space-only values
  Removed unnecessary check for Android API level and unused flags.
  Fix for median blur of 2-channel images
  ...",3rdparty/carotene/src/morph.cpp,+,internal::assertSupportedConfiguration(ssize.width > 0 && ssize.height > 0 &&,709,download/opencv_opencv525.cpp
7d007d212c02dabd7b597c01a343b7c43b077626,Merge pull request #6828 from paroj:cmatvals_cpp,modules/calib3d/src/calibration.cpp,-,"CV_Error(CV_StsUnmatchedSizes, ""Size of matrices must be 3x3!"");",1731,download/opencv_opencv526.cpp
7d007d212c02dabd7b597c01a343b7c43b077626,Merge pull request #6828 from paroj:cmatvals_cpp,modules/calib3d/src/calibration.cpp,-,assert(imgWidth != 0 && imgHeight != 0 && alphax != 0.0 && alphay != 0.0);,1734,download/opencv_opencv526.cpp
7d007d212c02dabd7b597c01a343b7c43b077626,Merge pull request #6828 from paroj:cmatvals_cpp,modules/calib3d/src/calibration.cpp,+,"CV_Error(CV_StsUnmatchedSizes, ""Size of cameraMatrix must be 3x3!"");",3481,download/opencv_opencv526.cpp
7d007d212c02dabd7b597c01a343b7c43b077626,Merge pull request #6828 from paroj:cmatvals_cpp,modules/calib3d/src/calibration.cpp,+,"CV_DbgAssert(imageSize.width != 0 && imageSize.height != 0 && K(0, 0) != 0.0 && K(1, 1) != 0.0);",3485,download/opencv_opencv526.cpp
79f8e516b8e69b0e0b520a568a0c5d02ba6d8d92,Merge pull request #6891 from snosov1:fix-5311,modules/imgproc/src/emd.cpp,-,"CV_Error(CV_StsOutOfRange, """");",390,download/opencv_opencv527.cpp
79f8e516b8e69b0e0b520a568a0c5d02ba6d8d92,Merge pull request #6891 from snosov1:fix-5311,modules/imgproc/src/emd.cpp,+,"CV_Error(CV_StsBadArg, ""signature1 must not contain negative weights"");",390,download/opencv_opencv527.cpp
79f8e516b8e69b0e0b520a568a0c5d02ba6d8d92,Merge pull request #6891 from snosov1:fix-5311,modules/imgproc/src/emd.cpp,-,"CV_Error(CV_StsOutOfRange, """");",404,download/opencv_opencv527.cpp
79f8e516b8e69b0e0b520a568a0c5d02ba6d8d92,Merge pull request #6891 from snosov1:fix-5311,modules/imgproc/src/emd.cpp,+,"CV_Error(CV_StsBadArg, ""signature2 must not contain negative weights"");",404,download/opencv_opencv527.cpp
79f8e516b8e69b0e0b520a568a0c5d02ba6d8d92,Merge pull request #6891 from snosov1:fix-5311,modules/imgproc/src/emd.cpp,-,"CV_Error(CV_StsOutOfRange, """");",408,download/opencv_opencv527.cpp
79f8e516b8e69b0e0b520a568a0c5d02ba6d8d92,Merge pull request #6891 from snosov1:fix-5311,modules/imgproc/src/emd.cpp,+,"CV_Error(CV_StsBadArg, ""signature1 must contain at least one non-zero value"");",409,download/opencv_opencv527.cpp
79f8e516b8e69b0e0b520a568a0c5d02ba6d8d92,Merge pull request #6891 from snosov1:fix-5311,modules/imgproc/src/emd.cpp,+,"CV_Error(CV_StsBadArg, ""signature2 must contain at least one non-zero value"");",411,download/opencv_opencv527.cpp
b000663a8807faff57867164d53be7630db6a218,Cleanup,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Chessboard detection result 0: %d\n"", found);",580,download/opencv_opencv528.cpp
b000663a8807faff57867164d53be7630db6a218,Cleanup,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Fallback to old algorithm\n"");",585,download/opencv_opencv528.cpp
b000663a8807faff57867164d53be7630db6a218,Cleanup,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Chessboard detection result 1: %d\n"", found);",712,download/opencv_opencv528.cpp
b000663a8807faff57867164d53be7630db6a218,Cleanup,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Chessboard detection result 2: %d\n"", found);",717,download/opencv_opencv528.cpp
b000663a8807faff57867164d53be7630db6a218,Cleanup,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Chessboard detection result 3: %d\n"", found);",734,download/opencv_opencv528.cpp
a9353ad2ecc879a231732317d24495fdc62164ae,Merge pull request #6880 from berak:fix_opencv_visualization,apps/visualisation/opencv_visualisation.cpp,+,parser.printMessage();,105,download/opencv_opencv529.cpp
a9353ad2ecc879a231732317d24495fdc62164ae,Merge pull request #6880 from berak:fix_opencv_visualization,apps/visualisation/opencv_visualisation.cpp,+,parser.printMessage();,112,download/opencv_opencv529.cpp
53f4eaa7a73781edcb02aef6849dd995450179fd,Merge pull request #6892 from ioxp:fsSpace,modules/core/test/test_io.cpp,+,"ASSERT_STREQ(values[i].c_str(), valuesRead[i].c_str());",593,download/opencv_opencv530.cpp
20b9ff4ff6efa6941a8cce29e9b92acb65485304,opencv_visualization: check cmdline args,apps/visualisation/opencv_visualisation.cpp,+,parser.printMessage();,105,download/opencv_opencv531.cpp
20b9ff4ff6efa6941a8cce29e9b92acb65485304,opencv_visualization: check cmdline args,apps/visualisation/opencv_visualisation.cpp,+,parser.printMessage();,112,download/opencv_opencv531.cpp
dce310e03cabcc4e7ffdb490eb70e8be44f3d02d,provide better error messages,modules/imgproc/src/emd.cpp,-,"CV_Error(CV_StsOutOfRange, """");",390,download/opencv_opencv532.cpp
dce310e03cabcc4e7ffdb490eb70e8be44f3d02d,provide better error messages,modules/imgproc/src/emd.cpp,+,"CV_Error(CV_StsBadArg, ""signature1 must not contain negative weights"");",390,download/opencv_opencv532.cpp
dce310e03cabcc4e7ffdb490eb70e8be44f3d02d,provide better error messages,modules/imgproc/src/emd.cpp,-,"CV_Error(CV_StsOutOfRange, """");",404,download/opencv_opencv532.cpp
dce310e03cabcc4e7ffdb490eb70e8be44f3d02d,provide better error messages,modules/imgproc/src/emd.cpp,+,"CV_Error(CV_StsBadArg, ""signature2 must not contain negative weights"");",404,download/opencv_opencv532.cpp
dce310e03cabcc4e7ffdb490eb70e8be44f3d02d,provide better error messages,modules/imgproc/src/emd.cpp,-,"CV_Error(CV_StsOutOfRange, """");",408,download/opencv_opencv532.cpp
dce310e03cabcc4e7ffdb490eb70e8be44f3d02d,provide better error messages,modules/imgproc/src/emd.cpp,+,"CV_Error(CV_StsBadArg, ""signature1 must contain at least one non-zero value"");",409,download/opencv_opencv532.cpp
dce310e03cabcc4e7ffdb490eb70e8be44f3d02d,provide better error messages,modules/imgproc/src/emd.cpp,+,"CV_Error(CV_StsBadArg, ""signature2 must contain at least one non-zero value"");",411,download/opencv_opencv532.cpp
3c1a002dab341d5167f5d9db5e19ef922cd09330,Merge pull request #6883 from ilya-lavrenov:resize,modules/imgproc/src/imgwarp.cpp,-,CV_Assert( ssize.area() > 0 );,3480,download/opencv_opencv533.cpp
3c1a002dab341d5167f5d9db5e19ef922cd09330,Merge pull request #6883 from ilya-lavrenov:resize,modules/imgproc/src/imgwarp.cpp,+,CV_Assert( ssize.width > 0 && ssize.height > 0 );,3480,download/opencv_opencv533.cpp
3c1a002dab341d5167f5d9db5e19ef922cd09330,Merge pull request #6883 from ilya-lavrenov:resize,modules/imgproc/test/test_imgwarp_strict.cpp,+,ASSERT_FALSE(src.empty());,1244,download/opencv_opencv534.cpp
3c1a002dab341d5167f5d9db5e19ef922cd09330,Merge pull request #6883 from ilya-lavrenov:resize,modules/imgproc/test/test_imgwarp_strict.cpp,+,"ASSERT_NO_THROW(cv::resize(src, dst, cv::Size(), 0.5, 0.5, inter));",1246,download/opencv_opencv534.cpp
5e94243222ca806db854faa9b763e41aec691c1d,Merge pull request #6887 from sovrasov:calib_dist_coeffs_check,modules/calib3d/src/calibration.cpp,+,CV_Assert((int)distCoeffs0.total() <= outputSize);,3196,download/opencv_opencv535.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""THRESHOLD SELECTED = %d, BRIGHTMAX = %d, DARKMAX = %d\n"", iThresh, iBrightMax, piMaxPos[iIdxBGMax]);",381,download/opencv_opencv536.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""EX quad count: %d/%d\n"", quad_count, expected_corners_num);",571,download/opencv_opencv536.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Quad count: %d/%d\n"", quad_count, expected_corners_num);",603,download/opencv_opencv536.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Quad count: %d/%d\n"", quad_count, expected_corners_num);",636,download/opencv_opencv536.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Starting ordering of inner quads\n"");",643,download/opencv_opencv536.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Orig count: %d  After ordering: %d\n"", icount, count);",646,download/opencv_opencv536.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d  orig count: %d cleaned: %d\n"", group_idx, icount, count);",654,download/opencv_opencv536.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d  count: %d  cleaned: %d\n"", group_idx, icount, count);",657,download/opencv_opencv536.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Quad count: %d/%d\n"", quad_count, expected_corners_num);",757,download/opencv_opencv536.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Starting ordering of inner quads\n"");",825,download/opencv_opencv536.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Orig count: %d  After ordering: %d\n"", icount, count);",827,download/opencv_opencv536.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Starting ordering of inner quads\n"");",829,download/opencv_opencv536.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Orig count: %d  After ordering: %d\n"", icount, count);",832,download/opencv_opencv536.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  orig count: %d cleaned: %d\n"", group_idx, icount, count);",893,download/opencv_opencv536.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d  orig count: %d cleaned: %d\n"", group_idx, icount, count);",896,download/opencv_opencv536.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/calibinit.cpp,-,"PRINTF(""Connected group: %d  count: %d  cleaned: %d\n"", group_idx, icount, count);",899,download/opencv_opencv536.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/calibinit.cpp,+,"PRINTF(""Connected group: %d  count: %d  cleaned: %d\n"", group_idx, icount, count);",900,download/opencv_opencv536.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/checkchessboard.cpp,+,"cvError(CV_BadNumChannels, ""cvCheckChessboard"", ""supports single-channel images only"",",219,download/opencv_opencv537.cpp
74b83cfce59318c90683fb5daa73fc8d4bea118e,Modified and improved the method for chessboard detection. It is now faster and detects chessboards under difficult lighting condition as well as when the chessboard has strong out of plane rotations,modules/calib3d/src/checkchessboard.cpp,+,"cvError(CV_BadDepth, ""cvCheckChessboard"", ""supports depth=8 images only"",",225,download/opencv_opencv537.cpp
ee9a42e9cdcf58991fd22e00cc9acfe055ff0c93,Fix calibration fail on python with CALIB_THIN_PRISM_MODEL flag,modules/calib3d/src/calibration.cpp,+,CV_Assert((int)distCoeffs0.total() <= outputSize);,3196,download/opencv_opencv538.cpp
1f26e7347841fa9c65729a4432cff4bb1e7d184d,ffmpeg: try to load ffmpeg wrapper dll from the current module directory,modules/videoio/src/cap_ffmpeg.cpp,+,if (sz > 0 && ERROR_SUCCESS == GetLastError()),137,download/opencv_opencv539.cpp
5bc10ef796c29563e8916ff31b5c1a262422a93f,fixed empty image condition in resize,modules/imgproc/src/imgwarp.cpp,-,CV_Assert( ssize.area() > 0 );,3480,download/opencv_opencv540.cpp
5bc10ef796c29563e8916ff31b5c1a262422a93f,fixed empty image condition in resize,modules/imgproc/src/imgwarp.cpp,+,CV_Assert( ssize.width > 0 && ssize.height > 0 );,3480,download/opencv_opencv540.cpp
5bc10ef796c29563e8916ff31b5c1a262422a93f,fixed empty image condition in resize,modules/imgproc/test/test_imgwarp_strict.cpp,+,ASSERT_FALSE(src.empty());,1244,download/opencv_opencv541.cpp
5bc10ef796c29563e8916ff31b5c1a262422a93f,fixed empty image condition in resize,modules/imgproc/test/test_imgwarp_strict.cpp,+,"ASSERT_NO_THROW(cv::resize(src, dst, cv::Size(), 0.5, 0.5, inter));",1246,download/opencv_opencv541.cpp
7176c1327e08f1d260eaa5b5d4340a6445aa3e0e,Merge pull request #6850 from alalek:bigdata_test,modules/core/src/convert.cpp,+,CV_Assert( func != 0 );,247,download/opencv_opencv542.cpp
f9ab93bf0f46615836e14a84eebad0e9b71d3295,Merge pull request #6876 from janstarzy:jni-as-template-redone,modules/java/generator/src/cpp/Mat.cpp,-,"LOGD(""%s"", method_name);",1913,download/opencv_opencv543.cpp
f9ab93bf0f46615836e14a84eebad0e9b71d3295,Merge pull request #6876 from janstarzy:jni-as-template-redone,modules/java/generator/src/cpp/Mat.cpp,-,"LOGD(""%s"", method_name);",1922,download/opencv_opencv543.cpp
f9ab93bf0f46615836e14a84eebad0e9b71d3295,Merge pull request #6876 from janstarzy:jni-as-template-redone,modules/java/generator/src/cpp/Mat.cpp,-,"LOGD(""%s"", method_name);",1931,download/opencv_opencv543.cpp
f9ab93bf0f46615836e14a84eebad0e9b71d3295,Merge pull request #6876 from janstarzy:jni-as-template-redone,modules/java/generator/src/cpp/Mat.cpp,-,"LOGD(""%s"", method_name);",2005,download/opencv_opencv543.cpp
f9ab93bf0f46615836e14a84eebad0e9b71d3295,Merge pull request #6876 from janstarzy:jni-as-template-redone,modules/java/generator/src/cpp/Mat.cpp,-,"LOGD(""%s"", method_name);",2014,download/opencv_opencv543.cpp
f9ab93bf0f46615836e14a84eebad0e9b71d3295,Merge pull request #6876 from janstarzy:jni-as-template-redone,modules/java/generator/src/cpp/Mat.cpp,-,"LOGD(""%s"", method_name);",2023,download/opencv_opencv543.cpp
f9ab93bf0f46615836e14a84eebad0e9b71d3295,Merge pull request #6876 from janstarzy:jni-as-template-redone,modules/java/generator/src/cpp/Mat.cpp,-,"LOGD(""%s"", method_name);",2032,download/opencv_opencv543.cpp
479f93397004d95da141b81b56e7c75187d142df,get/put: more type-safety and code unification using templates,modules/java/generator/src/cpp/Mat.cpp,-,"LOGD(""%s"", method_name);",1913,download/opencv_opencv544.cpp
479f93397004d95da141b81b56e7c75187d142df,get/put: more type-safety and code unification using templates,modules/java/generator/src/cpp/Mat.cpp,-,"LOGD(""%s"", method_name);",1922,download/opencv_opencv544.cpp
479f93397004d95da141b81b56e7c75187d142df,get/put: more type-safety and code unification using templates,modules/java/generator/src/cpp/Mat.cpp,-,"LOGD(""%s"", method_name);",1931,download/opencv_opencv544.cpp
479f93397004d95da141b81b56e7c75187d142df,get/put: more type-safety and code unification using templates,modules/java/generator/src/cpp/Mat.cpp,-,"LOGD(""%s"", method_name);",2005,download/opencv_opencv544.cpp
479f93397004d95da141b81b56e7c75187d142df,get/put: more type-safety and code unification using templates,modules/java/generator/src/cpp/Mat.cpp,-,"LOGD(""%s"", method_name);",2014,download/opencv_opencv544.cpp
479f93397004d95da141b81b56e7c75187d142df,get/put: more type-safety and code unification using templates,modules/java/generator/src/cpp/Mat.cpp,-,"LOGD(""%s"", method_name);",2023,download/opencv_opencv544.cpp
479f93397004d95da141b81b56e7c75187d142df,get/put: more type-safety and code unification using templates,modules/java/generator/src/cpp/Mat.cpp,-,"LOGD(""%s"", method_name);",2032,download/opencv_opencv544.cpp
5f269d08b462b96bde2b8d13afaa2b7b97a48a49,"bigdata: add test, resolve split/merge issue",modules/core/src/convert.cpp,+,CV_Assert( func != 0 );,247,download/opencv_opencv545.cpp
00112bbe104efc086fce141169e9bbe042d56a23,persistence: fixing crash with space-only values,modules/core/test/test_io.cpp,+,"ASSERT_STREQ(values[i].c_str(), valuesRead[i].c_str());",593,download/opencv_opencv546.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,114,download/opencv_opencv547.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,136,download/opencv_opencv547.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,158,download/opencv_opencv547.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,180,download/opencv_opencv547.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,202,download/opencv_opencv547.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,224,download/opencv_opencv547.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/accumulate.cpp,+,internal::assertSupportedConfiguration();,52,download/opencv_opencv548.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/accumulate.cpp,+,internal::assertSupportedConfiguration();,231,download/opencv_opencv548.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/accumulate.cpp,+,internal::assertSupportedConfiguration();,376,download/opencv_opencv548.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,109,download/opencv_opencv549.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,145,download/opencv_opencv549.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,181,download/opencv_opencv549.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,231,download/opencv_opencv549.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,314,download/opencv_opencv549.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,350,download/opencv_opencv549.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,386,download/opencv_opencv549.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,422,download/opencv_opencv549.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,457,download/opencv_opencv549.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/add_weighted.cpp,+,internal::assertSupportedConfiguration();                 \,232,download/opencv_opencv550.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/add_weighted.cpp,+,internal::assertSupportedConfiguration();                 \,252,download/opencv_opencv550.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,119,download/opencv_opencv551.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,164,download/opencv_opencv551.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,186,download/opencv_opencv551.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,208,download/opencv_opencv551.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlur3x3Supported(size, border));",59,download/opencv_opencv552.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurU8Supported(size, cn, borderType));",196,download/opencv_opencv552.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurU8Supported(size, cn, borderType));",506,download/opencv_opencv552.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/blur.cpp,+,internal::assertSupportedConfiguration(false);//Unsupported channels number,745,download/opencv_opencv552.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurF32Supported(size, cn, borderType));",831,download/opencv_opencv552.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurS32Supported(size, cn, borderType));",1093,download/opencv_opencv552.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration(isCanny3x3Supported(size));,667,download/opencv_opencv553.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration(isCanny3x3Supported(size));,694,download/opencv_opencv553.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration();,721,download/opencv_opencv553.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration();,750,download/opencv_opencv553.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();,50,download/opencv_opencv554.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();,102,download/opencv_opencv554.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();,154,download/opencv_opencv554.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                           \,289,download/opencv_opencv554.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                           \,330,download/opencv_opencv554.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                           \,388,download/opencv_opencv554.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                        \,444,download/opencv_opencv554.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                        \,458,download/opencv_opencv554.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();                                                               \,137,download/opencv_opencv555.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();                                                               \,178,download/opencv_opencv555.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();                                                               \,212,download/opencv_opencv555.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();,241,download/opencv_opencv555.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();,318,download/opencv_opencv555.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/cmp.cpp,+,internal::assertSupportedConfiguration();             \,280,download/opencv_opencv556.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/cmp.cpp,+,internal::assertSupportedConfiguration();             \,296,download/opencv_opencv556.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/common.cpp,+,void assertSupportedConfiguration(bool parametersSupported),58,download/opencv_opencv557.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/common.cpp,+,internal::assertSupportedConfiguration(false);,103,download/opencv_opencv557.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/convert.cpp,+,internal::assertSupportedConfiguration();                               \,51,download/opencv_opencv558.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/convert.cpp,+,internal::assertSupportedConfiguration();                               \,87,download/opencv_opencv558.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/convert_depth.cpp,+,internal::assertSupportedConfiguration();,262,download/opencv_opencv559.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/convert_depth.cpp,+,internal::assertSupportedConfiguration();,315,download/opencv_opencv559.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/convolution.cpp,+,"internal::assertSupportedConfiguration(isConvolutionSupported(size, ksize, border));",82,download/opencv_opencv560.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,49,download/opencv_opencv561.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,115,download/opencv_opencv561.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,181,download/opencv_opencv561.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,242,download/opencv_opencv561.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,300,download/opencv_opencv561.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,134,download/opencv_opencv562.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,294,download/opencv_opencv562.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,440,download/opencv_opencv562.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,597,download/opencv_opencv562.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/dot_product.cpp,+,internal::assertSupportedConfiguration();,48,download/opencv_opencv563.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/dot_product.cpp,+,internal::assertSupportedConfiguration();,126,download/opencv_opencv563.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/dot_product.cpp,+,internal::assertSupportedConfiguration();,204,download/opencv_opencv563.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/fast.cpp,+,internal::assertSupportedConfiguration();,221,download/opencv_opencv564.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,88,download/opencv_opencv565.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,169,download/opencv_opencv565.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,249,download/opencv_opencv565.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,329,download/opencv_opencv565.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,388,download/opencv_opencv565.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/flip.cpp,+,"internal::assertSupportedConfiguration(isFlipSupported(flipMode, elemSize));",177,download/opencv_opencv566.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur3x3Supported(size, border));",58,download/opencv_opencv567.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur3x3MarginSupported(size, border, borderMargin));",183,download/opencv_opencv567.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",214,download/opencv_opencv567.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",597,download/opencv_opencv567.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",725,download/opencv_opencv567.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",939,download/opencv_opencv567.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/in_range.cpp,+,internal::assertSupportedConfiguration();                \,171,download/opencv_opencv568.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/in_range.cpp,+,internal::assertSupportedConfiguration();                \,184,download/opencv_opencv568.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/integral.cpp,+,internal::assertSupportedConfiguration();,48,download/opencv_opencv569.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/integral.cpp,+,internal::assertSupportedConfiguration();,144,download/opencv_opencv569.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacian3x3Supported(size, border));",59,download/opencv_opencv570.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacianOpenCVSupported(size, border));",202,download/opencv_opencv570.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacianOpenCVSupported(size, border));",332,download/opencv_opencv570.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacianOpenCVSupported(size, border));",466,download/opencv_opencv570.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/magnitude.cpp,+,internal::assertSupportedConfiguration();,119,download/opencv_opencv571.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/magnitude.cpp,+,internal::assertSupportedConfiguration();,142,download/opencv_opencv571.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/meanstddev.cpp,+,internal::assertSupportedConfiguration();,50,download/opencv_opencv572.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/meanstddev.cpp,+,internal::assertSupportedConfiguration();,77,download/opencv_opencv572.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/median_filter.cpp,+,"internal::assertSupportedConfiguration(isMedianFilter3x3Supported(size, numChannels));",127,download/opencv_opencv573.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/min_max.cpp,+,internal::assertSupportedConfiguration();                          \,109,download/opencv_opencv574.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/min_max.cpp,+,internal::assertSupportedConfiguration();     \,124,download/opencv_opencv574.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,124,download/opencv_opencv575.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,142,download/opencv_opencv575.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,160,download/opencv_opencv575.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,178,download/opencv_opencv575.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,196,download/opencv_opencv575.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,215,download/opencv_opencv575.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,348,download/opencv_opencv575.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,494,download/opencv_opencv575.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,626,download/opencv_opencv575.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,781,download/opencv_opencv575.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,1172,download/opencv_opencv575.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,1259,download/opencv_opencv575.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/morph.cpp,+,"internal::assertSupportedConfiguration(isMorph3x3Supported(size, border));",241,download/opencv_opencv576.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/morph.cpp,+,"internal::assertSupportedConfiguration(isMorph3x3Supported(size, border));",263,download/opencv_opencv576.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/morph.cpp,+,"inline void morphology(const Size2D &ssize, u32 cn,",511,download/opencv_opencv576.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/morph.cpp,+,internal::assertSupportedConfiguration(ssize.width > 0 && ssize.height > 0 &&,682,download/opencv_opencv576.cpp
627e2b15b3ff6b155f7e0d5d56d5872af2a15e7e,Merge pull request #6770 from ealbuz:master,3rdparty/carotene/src/morph.cpp,+,internal::assertSupportedConfiguration(ssize.width > 0 && ssize.height > 0 &&,709,download/opencv_opencv576.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,114,download/opencv_opencv577.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,136,download/opencv_opencv577.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,158,download/opencv_opencv577.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,180,download/opencv_opencv577.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,202,download/opencv_opencv577.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/absdiff.cpp,+,internal::assertSupportedConfiguration();,224,download/opencv_opencv577.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/accumulate.cpp,+,internal::assertSupportedConfiguration();,52,download/opencv_opencv578.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/accumulate.cpp,+,internal::assertSupportedConfiguration();,231,download/opencv_opencv578.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/accumulate.cpp,+,internal::assertSupportedConfiguration();,376,download/opencv_opencv578.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,109,download/opencv_opencv579.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,145,download/opencv_opencv579.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,181,download/opencv_opencv579.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,231,download/opencv_opencv579.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,314,download/opencv_opencv579.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,350,download/opencv_opencv579.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,386,download/opencv_opencv579.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,422,download/opencv_opencv579.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/add.cpp,+,internal::assertSupportedConfiguration();,457,download/opencv_opencv579.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/add_weighted.cpp,+,internal::assertSupportedConfiguration();                 \,232,download/opencv_opencv580.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/add_weighted.cpp,+,internal::assertSupportedConfiguration();                 \,252,download/opencv_opencv580.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,119,download/opencv_opencv581.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,164,download/opencv_opencv581.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,186,download/opencv_opencv581.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/bitwise.cpp,+,internal::assertSupportedConfiguration();,208,download/opencv_opencv581.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlur3x3Supported(size, border));",59,download/opencv_opencv582.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurU8Supported(size, cn, borderType));",196,download/opencv_opencv582.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurU8Supported(size, cn, borderType));",506,download/opencv_opencv582.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/blur.cpp,+,internal::assertSupportedConfiguration(false);//Unsupported channels number,745,download/opencv_opencv582.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurF32Supported(size, cn, borderType));",831,download/opencv_opencv582.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/blur.cpp,+,"internal::assertSupportedConfiguration(isBlurS32Supported(size, cn, borderType));",1093,download/opencv_opencv582.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration(isCanny3x3Supported(size));,667,download/opencv_opencv583.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration(isCanny3x3Supported(size));,694,download/opencv_opencv583.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration();,721,download/opencv_opencv583.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/canny.cpp,+,internal::assertSupportedConfiguration();,750,download/opencv_opencv583.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();,50,download/opencv_opencv584.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();,102,download/opencv_opencv584.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();,154,download/opencv_opencv584.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                           \,289,download/opencv_opencv584.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                           \,330,download/opencv_opencv584.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                           \,388,download/opencv_opencv584.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                        \,444,download/opencv_opencv584.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/channel_extract.cpp,+,internal::assertSupportedConfiguration();                                                        \,458,download/opencv_opencv584.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();                                                               \,137,download/opencv_opencv585.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();                                                               \,178,download/opencv_opencv585.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();                                                               \,212,download/opencv_opencv585.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();,241,download/opencv_opencv585.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/channels_combine.cpp,+,internal::assertSupportedConfiguration();,318,download/opencv_opencv585.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/cmp.cpp,+,internal::assertSupportedConfiguration();             \,280,download/opencv_opencv586.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/cmp.cpp,+,internal::assertSupportedConfiguration();             \,296,download/opencv_opencv586.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/common.cpp,+,void assertSupportedConfiguration(bool parametersSupported),58,download/opencv_opencv587.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/common.cpp,+,internal::assertSupportedConfiguration(false);,103,download/opencv_opencv587.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/convert.cpp,+,internal::assertSupportedConfiguration();                               \,51,download/opencv_opencv588.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/convert.cpp,+,internal::assertSupportedConfiguration();                               \,87,download/opencv_opencv588.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/convert_depth.cpp,+,internal::assertSupportedConfiguration();,262,download/opencv_opencv589.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/convert_depth.cpp,+,internal::assertSupportedConfiguration();,315,download/opencv_opencv589.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/convolution.cpp,+,"internal::assertSupportedConfiguration(isConvolutionSupported(size, ksize, border));",82,download/opencv_opencv590.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,49,download/opencv_opencv591.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,115,download/opencv_opencv591.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,181,download/opencv_opencv591.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,242,download/opencv_opencv591.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/count_nonzero.cpp,+,internal::assertSupportedConfiguration();,300,download/opencv_opencv591.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,134,download/opencv_opencv592.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,294,download/opencv_opencv592.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,440,download/opencv_opencv592.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/div.cpp,+,internal::assertSupportedConfiguration();,597,download/opencv_opencv592.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/dot_product.cpp,+,internal::assertSupportedConfiguration();,48,download/opencv_opencv593.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/dot_product.cpp,+,internal::assertSupportedConfiguration();,126,download/opencv_opencv593.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/dot_product.cpp,+,internal::assertSupportedConfiguration();,204,download/opencv_opencv593.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/fast.cpp,+,internal::assertSupportedConfiguration();,221,download/opencv_opencv594.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,88,download/opencv_opencv595.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,169,download/opencv_opencv595.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,249,download/opencv_opencv595.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,329,download/opencv_opencv595.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/fill_minmaxloc.cpp,+,internal::assertSupportedConfiguration();,388,download/opencv_opencv595.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/flip.cpp,+,"internal::assertSupportedConfiguration(isFlipSupported(flipMode, elemSize));",177,download/opencv_opencv596.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur3x3Supported(size, border));",58,download/opencv_opencv597.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur3x3MarginSupported(size, border, borderMargin));",183,download/opencv_opencv597.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",214,download/opencv_opencv597.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",597,download/opencv_opencv597.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",725,download/opencv_opencv597.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/gaussian_blur.cpp,+,"internal::assertSupportedConfiguration(isGaussianBlur5x5Supported(size, cn, borderType));",939,download/opencv_opencv597.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/in_range.cpp,+,internal::assertSupportedConfiguration();                \,171,download/opencv_opencv598.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/in_range.cpp,+,internal::assertSupportedConfiguration();                \,184,download/opencv_opencv598.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/integral.cpp,+,internal::assertSupportedConfiguration();,48,download/opencv_opencv599.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/integral.cpp,+,internal::assertSupportedConfiguration();,144,download/opencv_opencv599.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacian3x3Supported(size, border));",59,download/opencv_opencv600.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacianOpenCVSupported(size, border));",202,download/opencv_opencv600.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacianOpenCVSupported(size, border));",332,download/opencv_opencv600.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/laplacian.cpp,+,"internal::assertSupportedConfiguration(isLaplacianOpenCVSupported(size, border));",466,download/opencv_opencv600.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/magnitude.cpp,+,internal::assertSupportedConfiguration();,119,download/opencv_opencv601.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/magnitude.cpp,+,internal::assertSupportedConfiguration();,142,download/opencv_opencv601.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/meanstddev.cpp,+,internal::assertSupportedConfiguration();,50,download/opencv_opencv602.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/meanstddev.cpp,+,internal::assertSupportedConfiguration();,77,download/opencv_opencv602.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/median_filter.cpp,+,"internal::assertSupportedConfiguration(isMedianFilter3x3Supported(size, numChannels));",127,download/opencv_opencv603.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/min_max.cpp,+,internal::assertSupportedConfiguration();                          \,109,download/opencv_opencv604.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/min_max.cpp,+,internal::assertSupportedConfiguration();     \,124,download/opencv_opencv604.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,124,download/opencv_opencv605.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,142,download/opencv_opencv605.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,160,download/opencv_opencv605.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,178,download/opencv_opencv605.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,196,download/opencv_opencv605.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,215,download/opencv_opencv605.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,348,download/opencv_opencv605.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,494,download/opencv_opencv605.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,626,download/opencv_opencv605.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,781,download/opencv_opencv605.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,1172,download/opencv_opencv605.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/minmaxloc.cpp,+,internal::assertSupportedConfiguration();,1259,download/opencv_opencv605.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/morph.cpp,+,"internal::assertSupportedConfiguration(isMorph3x3Supported(size, border));",241,download/opencv_opencv606.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/morph.cpp,+,"internal::assertSupportedConfiguration(isMorph3x3Supported(size, border));",263,download/opencv_opencv606.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/morph.cpp,+,"inline void morphology(const Size2D &ssize, u32 cn,",511,download/opencv_opencv606.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/morph.cpp,+,internal::assertSupportedConfiguration(ssize.width > 0 && ssize.height > 0 &&,682,download/opencv_opencv606.cpp
8f91529edfd3a74383a47120f574bb7de09bfe9f,Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms,3rdparty/carotene/src/morph.cpp,+,internal::assertSupportedConfiguration(ssize.width > 0 && ssize.height > 0 &&,709,download/opencv_opencv606.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt);",326,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"void cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len);",327,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,void cvEndWriteRawData_Base64(::CvFileStorage * fs);,328,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"void cvWriteRawData_Base64(::cv::FileStorage & fs, const void* _data, int len, const char* dt);",330,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"void cvWriteMat_Base64(CvFileStorage * fs, const char * name, ::cv::Mat const & mat);",331,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,while(cv_isprint(*ptr)) /* no check for base64 string */,1101,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Unexpected end of line"");",1104,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Unrecognized Base64 header"");",1125,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Cannot parse size in Base64 header"");",1132,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Cannot parse dt in Base64 header"");",1134,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Byte size not match elememt size"");",1159,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"sprintf(buf, ""!!binary |"");",1737,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,while(cv_isprint(*ptr)) /* no check for base64 string */,2044,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Unexpected end of line"");",2047,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Unrecognized Base64 header"");",2067,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Cannot parse size in Base64 header"");",2073,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Cannot parse dt in Base64 header"");",2075,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Byte size not match elememt size"");",2099,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,-,assert(0);,3508,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsUnsupportedFormat, ""Unsupported type"" );",3508,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,-,assert(0);,3630,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsUnsupportedFormat, ""Unsupported type"" );",3630,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,-,assert(0);,3680,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsUnsupportedFormat, ""Unsupported type"" );",3680,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"*        printf(""%3u, "", (i != std::string::npos ? i : 0));",6067,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(buffer.size() < HEADER_SIZE);,6319,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(flush());    /* check for base64_valid */,6377,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(len != 0);,6394,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(dst_cur + len < dst_end);,6397,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"Base64ContextEmitter & write(const uchar * beg, const uchar * end)",6444,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,Base64ContextEmitter & write(_to_binary_convertor_t & convertor),6472,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"write(beg, end);",6482,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(it.nplanes > 0U); /* make sure mats not empty */,6546,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"default:     { CV_Assert(!""mat type is invalid""); break; }",6572,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(!(*this));,6578,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_DbgAssert(*this);,6585,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(src);,6645,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(dt);,6646,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(len > 0);,6647,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_DbgAssert(*this);,6661,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(cnt > 0U);,6699,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"default: { CV_Assert(!""type not support""); break; }",6733,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(iss.eof());,6744,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(src);,6764,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(dt);,6765,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(len >= 0);,6766,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_DbgAssert(*this);,6778,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(cnt > 0U);,6857,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"default:  { CV_Assert(!""type not support""); break; }",6892,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"default:  { CV_Assert(!""type is not support""); break; }",6910,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(iss.eof());,6917,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(binary_to_funcs.size());,6918,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"Base64Writer(::CvFileStorage * fs, const char * name, int len, const char* dt)",6942,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"cvStartWriteStruct(fs, name, CV_NODE_SEQ, ""binary"");",6950,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"emitter.write(beg, end);",6962,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"void write(const void* _data, int len)",6965,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(len >= 0);,6967,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(remaining_data_length >= static_cast<size_t>(len));,6968,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,emitter.write(convertor);,6972,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"void write(_to_binary_convertor_t & convertor, int data_length_of_convertor)",6976,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(data_length_of_convertor >= 0);,6978,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(remaining_data_length >= static_cast<size_t>(data_length_of_convertor));,6979,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,emitter.write(convertor);,6982,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,~Base64Writer(),6985,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(remaining_data_length == 0U);,6987,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,cvEndWriteStruct(file_storage);,6989,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"void base64::cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt)",7012,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(fs);,7014,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(fs->base64_writer == 0);,7016,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"fs->base64_writer = new Base64Writer(fs, name, len, dt);",7017,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"void base64::cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len)",7020,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(fs);,7022,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(fs->base64_writer != 0);,7024,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"fs->base64_writer->write(_data, len);",7025,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,void base64::cvEndWriteRawData_Base64(::CvFileStorage * fs),7028,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(fs);,7030,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,CV_Assert(fs->base64_writer != 0);,7032,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"void base64::cvWriteRawData_Base64(::cv::FileStorage & fs, const void* _data, int len, const char* dt)",7037,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"cvStartWriteStruct(*fs, fs.elname.c_str(), CV_NODE_SEQ, ""binary"");",7039,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"emitter.write(beg, end);",7049,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,emitter.write(convert);,7053,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,cvEndWriteStruct(*fs);,7056,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"void base64::cvWriteMat_Base64(::CvFileStorage * fs, const char * name, ::cv::Mat const & mat)",7059,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"cvStartWriteStruct(fs, name, CV_NODE_MAP, CV_TYPE_NAME_MAT);",7067,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"cvWriteInt(fs, ""rows"", mat.rows );",7069,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"cvWriteInt(fs, ""cols"", mat.cols );",7070,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"cvStartWriteStruct(fs, name, CV_NODE_MAP, CV_TYPE_NAME_MATND);",7072,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"cvStartWriteStruct(fs, ""sizes"", CV_NODE_SEQ | CV_NODE_FLOW);",7074,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"cvWriteRawData(fs, mat.size.p, mat.dims, ""i"");",7075,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,cvEndWriteStruct(fs);,7076,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"cvWriteString(fs, ""dt"", ::icvEncodeFormat(CV_MAT_TYPE(mat.type()), dt ), 0 );",7078,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"cvStartWriteRawData_Base64(fs, ""data"", len, dt);",7085,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"fs->base64_writer->write(convertor, len);",7086,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,cvEndWriteRawData_Base64(fs);,7087,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,cvEndWriteStruct(fs);,7091,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"void cvWriteMat_Base64(::CvFileStorage* fs, const char* name, const ::CvMat* mat)",7101,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"::base64::cvWriteMat_Base64(fs, name, holder);",7104,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"void cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const ::CvMatND* mat)",7107,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"::base64::cvWriteMat_Base64(fs, name, holder);",7110,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt)",7113,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"::base64::cvStartWriteRawData_Base64(fs, name, len, dt);",7115,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"void cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len)",7118,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,"::base64::cvWriteRawData_Base64(fs, _data, len);",7120,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,void cvEndWriteRawData_Base64(::CvFileStorage * fs),7123,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/src/persistence.cpp,+,::base64::cvEndWriteRawData_Base64(fs);,7125,download/opencv_opencv607.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/test/test_io.cpp,+,"cv::cvWriteMat_Base64(*fs, ""normal_2d_mat"", &holder);",651,download/opencv_opencv608.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/test/test_io.cpp,+,"cv::cvWriteMatND_Base64(*fs, ""normal_nd_mat"", &holder_nd);",653,download/opencv_opencv608.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/test/test_io.cpp,+,"cv::cvWriteMat_Base64(*fs, ""empty_2d_mat"", &holder);",655,download/opencv_opencv608.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/test/test_io.cpp,+,"cv::cvStartWriteRawData_Base64(*fs, ""rawdata"", static_cast<int>(rawdata.size()), ""2u3i2di"");",657,download/opencv_opencv608.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/test/test_io.cpp,+,"cv::cvWriteRawData_Base64(*fs, rawdata.data() + i * 100, 100);",659,download/opencv_opencv608.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/core/test/test_io.cpp,+,cv::cvEndWriteRawData_Base64(*fs);,660,download/opencv_opencv608.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/python/src2/cv2.cpp,+,PyErr_Print();,1290,download/opencv_opencv609.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,-,CV_Assert(depth.setVideoMode(defaultDepthOutputMode()) == openni::STATUS_OK); // xn::DepthGenerator supports VGA only! (Jan 2011),259,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't start depth stream: %s\n"", openni::OpenNI::getExtendedError()));",264,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't find depth stream:: %s\n"", openni::OpenNI::getExtendedError()));",274,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Could not read cameras parameters\n""));",274,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,-,CV_Assert(color.setVideoMode(defaultColorOutputMode()) == openni::STATUS_OK);,320,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't set %s stream output mode: %s\n"",",324,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,+,openni::OpenNI::getExtendedError()));,326,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't start %s stream: %s\n"",",335,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,+,openni::OpenNI::getExtendedError()));,337,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't start color stream: %s\n"", openni::OpenNI::getExtendedError()));",346,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't find %s stream:: %s\n"",",348,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,+,openni::OpenNI::getExtendedError()));,350,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't find color stream: %s\n"", openni::OpenNI::getExtendedError()));",358,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Could not read cameras parameters\n""));",365,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,-,CV_DbgAssert(depth.isValid());,560,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,-,CV_Assert( depth.isValid() );,600,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,+,CV_Assert(streams[CV_DEPTH_STREAM].isValid());,609,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,-,CV_DbgAssert( color.isValid() );,661,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsBadArg, cv::format(""Image generator does not support such parameter (propIdx=%d) for getting.\n"", propIdx));",768,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsBadArg, ""Unsupported image generator output mode.\n"");",813,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::setImageGeneratorProperty : %s\n"", openni::OpenNI::getExtendedError()));",818,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsBadArg, cv::format(""Image generator does not support such parameter (propIdx=%d) for setting.\n"", propIdx));",824,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsUnsupportedFormat, ""Unsupported format of grabbed image\n"");",999,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,-,CV_Assert(colorFrame.getVideoMode().getPixelFormat() == openni::PIXEL_FORMAT_RGB888); // RGB,1021,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,modules/videoio/src/cap_openni2.cpp,+,CV_Assert(streamFrames[CV_COLOR_STREAM].getVideoMode().getPixelFormat() == openni::PIXEL_FORMAT_RGB888); // RGB,1021,download/opencv_opencv610.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,samples/cpp/facedetect.cpp,-,"printf( ""detection time = %g ms\n"", t/((double)cvGetTickFrequency()*1000.) );",202,download/opencv_opencv611.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,samples/cpp/facedetect.cpp,+,"printf( ""detection time = %g ms\n"", t*1000/getTickFrequency());",203,download/opencv_opencv611.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,samples/cpp/polar_transforms.cpp,-,"cvLogPolar(frame,log_polar_img,cvPoint2D32f(frame->width >> 1,frame->height >> 1),70, CV_INTER_LINEAR+CV_WARP_FILL_OUTLIERS);",95,download/opencv_opencv612.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,samples/cpp/polar_transforms.cpp,+,"logPolar(frame,log_polar_img, center, M, INTER_LINEAR + WARP_FILL_OUTLIERS);",96,download/opencv_opencv612.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,samples/cpp/polar_transforms.cpp,-,"cvLogPolar(log_polar_img,recovered_img,cvPoint2D32f(frame->width >> 1,frame->height >> 1),70, CV_WARP_INVERSE_MAP+CV_INTER_LINEAR);",100,download/opencv_opencv612.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,samples/cpp/polar_transforms.cpp,+,"logPolar(log_polar_img, recovered_log_polar, center, M, WARP_INVERSE_MAP + INTER_LINEAR);",103,download/opencv_opencv612.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,samples/cpp/tutorial_code/Histograms_Matching/compareHist_Demo.cpp,-,"printf(""** Error. Usage: ./compareHist_Demo <image_settings0> <image_setting1> <image_settings2>\n"");",28,download/opencv_opencv613.cpp
040409aac55654bfc4005c2fb50a6d3d6daf5db4,Merge branch 'master' of https://github.com/Itseez/opencv,samples/cpp/tutorial_code/Histograms_Matching/compareHist_Demo.cpp,+,"printf(""** Error. Usage: ./compareHist_Demo <image_settings0> <image_settings1> <image_settings2>\n"");",28,download/opencv_opencv613.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt);",326,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"void cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len);",327,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,void cvEndWriteRawData_Base64(::CvFileStorage * fs);,328,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"void cvWriteRawData_Base64(::cv::FileStorage & fs, const void* _data, int len, const char* dt);",330,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"void cvWriteMat_Base64(CvFileStorage * fs, const char * name, ::cv::Mat const & mat);",331,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,while(cv_isprint(*ptr)) /* no check for base64 string */,1101,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Unexpected end of line"");",1104,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Unrecognized Base64 header"");",1125,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Cannot parse size in Base64 header"");",1132,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Cannot parse dt in Base64 header"");",1134,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Byte size not match elememt size"");",1159,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"sprintf(buf, ""!!binary |"");",1737,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,while(cv_isprint(*ptr)) /* no check for base64 string */,2044,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Unexpected end of line"");",2047,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Unrecognized Base64 header"");",2067,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Cannot parse size in Base64 header"");",2073,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Cannot parse dt in Base64 header"");",2075,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Byte size not match elememt size"");",2099,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,-,assert(0);,3508,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"CV_Error( CV_StsUnsupportedFormat, ""Unsupported type"" );",3508,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,-,assert(0);,3630,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"CV_Error( CV_StsUnsupportedFormat, ""Unsupported type"" );",3630,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,-,assert(0);,3680,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"CV_Error( CV_StsUnsupportedFormat, ""Unsupported type"" );",3680,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"*        printf(""%3u, "", (i != std::string::npos ? i : 0));",6067,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(buffer.size() < HEADER_SIZE);,6319,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(flush());    /* check for base64_valid */,6377,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(len != 0);,6394,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(dst_cur + len < dst_end);,6397,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"Base64ContextEmitter & write(const uchar * beg, const uchar * end)",6444,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,Base64ContextEmitter & write(_to_binary_convertor_t & convertor),6472,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"write(beg, end);",6482,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(it.nplanes > 0U); /* make sure mats not empty */,6546,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"default:     { CV_Assert(!""mat type is invalid""); break; }",6572,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(!(*this));,6578,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_DbgAssert(*this);,6585,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(src);,6645,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(dt);,6646,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(len > 0);,6647,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_DbgAssert(*this);,6661,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(cnt > 0U);,6699,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"default: { CV_Assert(!""type not support""); break; }",6733,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(iss.eof());,6744,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(src);,6764,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(dt);,6765,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(len >= 0);,6766,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_DbgAssert(*this);,6778,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(cnt > 0U);,6857,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"default:  { CV_Assert(!""type not support""); break; }",6892,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"default:  { CV_Assert(!""type is not support""); break; }",6910,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(iss.eof());,6917,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(binary_to_funcs.size());,6918,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"Base64Writer(::CvFileStorage * fs, const char * name, int len, const char* dt)",6942,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"cvStartWriteStruct(fs, name, CV_NODE_SEQ, ""binary"");",6950,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"emitter.write(beg, end);",6962,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"void write(const void* _data, int len)",6965,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(len >= 0);,6967,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(remaining_data_length >= static_cast<size_t>(len));,6968,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,emitter.write(convertor);,6972,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"void write(_to_binary_convertor_t & convertor, int data_length_of_convertor)",6976,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(data_length_of_convertor >= 0);,6978,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(remaining_data_length >= static_cast<size_t>(data_length_of_convertor));,6979,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,emitter.write(convertor);,6982,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,~Base64Writer(),6985,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(remaining_data_length == 0U);,6987,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,cvEndWriteStruct(file_storage);,6989,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"void base64::cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt)",7012,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(fs);,7014,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(fs->base64_writer == 0);,7016,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"fs->base64_writer = new Base64Writer(fs, name, len, dt);",7017,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"void base64::cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len)",7020,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(fs);,7022,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(fs->base64_writer != 0);,7024,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"fs->base64_writer->write(_data, len);",7025,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,void base64::cvEndWriteRawData_Base64(::CvFileStorage * fs),7028,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(fs);,7030,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,CV_Assert(fs->base64_writer != 0);,7032,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"void base64::cvWriteRawData_Base64(::cv::FileStorage & fs, const void* _data, int len, const char* dt)",7037,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"cvStartWriteStruct(*fs, fs.elname.c_str(), CV_NODE_SEQ, ""binary"");",7039,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"emitter.write(beg, end);",7049,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,emitter.write(convert);,7053,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,cvEndWriteStruct(*fs);,7056,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"void base64::cvWriteMat_Base64(::CvFileStorage * fs, const char * name, ::cv::Mat const & mat)",7059,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"cvStartWriteStruct(fs, name, CV_NODE_MAP, CV_TYPE_NAME_MAT);",7067,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"cvWriteInt(fs, ""rows"", mat.rows );",7069,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"cvWriteInt(fs, ""cols"", mat.cols );",7070,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"cvStartWriteStruct(fs, name, CV_NODE_MAP, CV_TYPE_NAME_MATND);",7072,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"cvStartWriteStruct(fs, ""sizes"", CV_NODE_SEQ | CV_NODE_FLOW);",7074,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"cvWriteRawData(fs, mat.size.p, mat.dims, ""i"");",7075,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,cvEndWriteStruct(fs);,7076,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"cvWriteString(fs, ""dt"", ::icvEncodeFormat(CV_MAT_TYPE(mat.type()), dt ), 0 );",7078,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"cvStartWriteRawData_Base64(fs, ""data"", len, dt);",7085,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"fs->base64_writer->write(convertor, len);",7086,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,cvEndWriteRawData_Base64(fs);,7087,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,cvEndWriteStruct(fs);,7091,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"void cvWriteMat_Base64(::CvFileStorage* fs, const char* name, const ::CvMat* mat)",7101,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"::base64::cvWriteMat_Base64(fs, name, holder);",7104,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"void cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const ::CvMatND* mat)",7107,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"::base64::cvWriteMat_Base64(fs, name, holder);",7110,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt)",7113,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"::base64::cvStartWriteRawData_Base64(fs, name, len, dt);",7115,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"void cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len)",7118,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,"::base64::cvWriteRawData_Base64(fs, _data, len);",7120,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,void cvEndWriteRawData_Base64(::CvFileStorage * fs),7123,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/src/persistence.cpp,+,::base64::cvEndWriteRawData_Base64(fs);,7125,download/opencv_opencv614.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/test/test_io.cpp,+,"cv::cvWriteMat_Base64(*fs, ""normal_2d_mat"", &holder);",651,download/opencv_opencv615.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/test/test_io.cpp,+,"cv::cvWriteMatND_Base64(*fs, ""normal_nd_mat"", &holder_nd);",653,download/opencv_opencv615.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/test/test_io.cpp,+,"cv::cvWriteMat_Base64(*fs, ""empty_2d_mat"", &holder);",655,download/opencv_opencv615.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/test/test_io.cpp,+,"cv::cvStartWriteRawData_Base64(*fs, ""rawdata"", static_cast<int>(rawdata.size()), ""2u3i2di"");",657,download/opencv_opencv615.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/test/test_io.cpp,+,"cv::cvWriteRawData_Base64(*fs, rawdata.data() + i * 100, 100);",659,download/opencv_opencv615.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/core/test/test_io.cpp,+,cv::cvEndWriteRawData_Base64(*fs);,660,download/opencv_opencv615.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/python/src2/cv2.cpp,+,PyErr_Print();,1290,download/opencv_opencv616.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,-,CV_Assert(depth.setVideoMode(defaultDepthOutputMode()) == openni::STATUS_OK); // xn::DepthGenerator supports VGA only! (Jan 2011),259,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't start depth stream: %s\n"", openni::OpenNI::getExtendedError()));",264,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't find depth stream:: %s\n"", openni::OpenNI::getExtendedError()));",274,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Could not read cameras parameters\n""));",274,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,-,CV_Assert(color.setVideoMode(defaultColorOutputMode()) == openni::STATUS_OK);,320,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't set %s stream output mode: %s\n"",",324,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,+,openni::OpenNI::getExtendedError()));,326,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't start %s stream: %s\n"",",335,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,+,openni::OpenNI::getExtendedError()));,337,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't start color stream: %s\n"", openni::OpenNI::getExtendedError()));",346,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't find %s stream:: %s\n"",",348,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,+,openni::OpenNI::getExtendedError()));,350,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't find color stream: %s\n"", openni::OpenNI::getExtendedError()));",358,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Could not read cameras parameters\n""));",365,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,-,CV_DbgAssert(depth.isValid());,560,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,-,CV_Assert( depth.isValid() );,600,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,+,CV_Assert(streams[CV_DEPTH_STREAM].isValid());,609,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,-,CV_DbgAssert( color.isValid() );,661,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsBadArg, cv::format(""Image generator does not support such parameter (propIdx=%d) for getting.\n"", propIdx));",768,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsBadArg, ""Unsupported image generator output mode.\n"");",813,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::setImageGeneratorProperty : %s\n"", openni::OpenNI::getExtendedError()));",818,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsBadArg, cv::format(""Image generator does not support such parameter (propIdx=%d) for setting.\n"", propIdx));",824,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsUnsupportedFormat, ""Unsupported format of grabbed image\n"");",999,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,-,CV_Assert(colorFrame.getVideoMode().getPixelFormat() == openni::PIXEL_FORMAT_RGB888); // RGB,1021,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',modules/videoio/src/cap_openni2.cpp,+,CV_Assert(streamFrames[CV_COLOR_STREAM].getVideoMode().getPixelFormat() == openni::PIXEL_FORMAT_RGB888); // RGB,1021,download/opencv_opencv617.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',samples/cpp/facedetect.cpp,-,"printf( ""detection time = %g ms\n"", t/((double)cvGetTickFrequency()*1000.) );",202,download/opencv_opencv618.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',samples/cpp/facedetect.cpp,+,"printf( ""detection time = %g ms\n"", t*1000/getTickFrequency());",203,download/opencv_opencv618.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',samples/cpp/polar_transforms.cpp,-,"cvLogPolar(frame,log_polar_img,cvPoint2D32f(frame->width >> 1,frame->height >> 1),70, CV_INTER_LINEAR+CV_WARP_FILL_OUTLIERS);",95,download/opencv_opencv619.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',samples/cpp/polar_transforms.cpp,+,"logPolar(frame,log_polar_img, center, M, INTER_LINEAR + WARP_FILL_OUTLIERS);",96,download/opencv_opencv619.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',samples/cpp/polar_transforms.cpp,-,"cvLogPolar(log_polar_img,recovered_img,cvPoint2D32f(frame->width >> 1,frame->height >> 1),70, CV_WARP_INVERSE_MAP+CV_INTER_LINEAR);",100,download/opencv_opencv619.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',samples/cpp/polar_transforms.cpp,+,"logPolar(log_polar_img, recovered_log_polar, center, M, WARP_INVERSE_MAP + INTER_LINEAR);",103,download/opencv_opencv619.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',samples/cpp/tutorial_code/Histograms_Matching/compareHist_Demo.cpp,-,"printf(""** Error. Usage: ./compareHist_Demo <image_settings0> <image_setting1> <image_settings2>\n"");",28,download/opencv_opencv620.cpp
b3475cbf32adccdc6ba94ec123b4ce86270b8452,Merge remote-tracking branch 'refs/remotes/Itseez/master',samples/cpp/tutorial_code/Histograms_Matching/compareHist_Demo.cpp,+,"printf(""** Error. Usage: ./compareHist_Demo <image_settings0> <image_settings1> <image_settings2>\n"");",28,download/opencv_opencv620.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt);",326,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"void cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len);",327,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,void cvEndWriteRawData_Base64(::CvFileStorage * fs);,328,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"void cvWriteRawData_Base64(::cv::FileStorage & fs, const void* _data, int len, const char* dt);",330,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"void cvWriteMat_Base64(CvFileStorage * fs, const char * name, ::cv::Mat const & mat);",331,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,while(cv_isprint(*ptr)) /* no check for base64 string */,1101,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Unexpected end of line"");",1104,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Unrecognized Base64 header"");",1125,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Cannot parse size in Base64 header"");",1132,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Cannot parse dt in Base64 header"");",1134,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Byte size not match elememt size"");",1159,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"sprintf(buf, ""!!binary |"");",1737,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,while(cv_isprint(*ptr)) /* no check for base64 string */,2044,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Unexpected end of line"");",2047,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Unrecognized Base64 header"");",2067,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Cannot parse size in Base64 header"");",2073,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Cannot parse dt in Base64 header"");",2075,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Byte size not match elememt size"");",2099,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,-,assert(0);,3508,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsUnsupportedFormat, ""Unsupported type"" );",3508,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,-,assert(0);,3630,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsUnsupportedFormat, ""Unsupported type"" );",3630,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,-,assert(0);,3680,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"CV_Error( CV_StsUnsupportedFormat, ""Unsupported type"" );",3680,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"*        printf(""%3u, "", (i != std::string::npos ? i : 0));",6067,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(buffer.size() < HEADER_SIZE);,6319,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(flush());    /* check for base64_valid */,6377,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(len != 0);,6394,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(dst_cur + len < dst_end);,6397,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"Base64ContextEmitter & write(const uchar * beg, const uchar * end)",6444,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,Base64ContextEmitter & write(_to_binary_convertor_t & convertor),6472,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"write(beg, end);",6482,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(it.nplanes > 0U); /* make sure mats not empty */,6546,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"default:     { CV_Assert(!""mat type is invalid""); break; }",6572,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(!(*this));,6578,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_DbgAssert(*this);,6585,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(src);,6645,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(dt);,6646,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(len > 0);,6647,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_DbgAssert(*this);,6661,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(cnt > 0U);,6699,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"default: { CV_Assert(!""type not support""); break; }",6733,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(iss.eof());,6744,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(src);,6764,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(dt);,6765,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(len >= 0);,6766,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_DbgAssert(*this);,6778,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(cnt > 0U);,6857,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"default:  { CV_Assert(!""type not support""); break; }",6892,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"default:  { CV_Assert(!""type is not support""); break; }",6910,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(iss.eof());,6917,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(binary_to_funcs.size());,6918,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"Base64Writer(::CvFileStorage * fs, const char * name, int len, const char* dt)",6942,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"cvStartWriteStruct(fs, name, CV_NODE_SEQ, ""binary"");",6950,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"emitter.write(beg, end);",6962,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"void write(const void* _data, int len)",6965,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(len >= 0);,6967,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(remaining_data_length >= static_cast<size_t>(len));,6968,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,emitter.write(convertor);,6972,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"void write(_to_binary_convertor_t & convertor, int data_length_of_convertor)",6976,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(data_length_of_convertor >= 0);,6978,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(remaining_data_length >= static_cast<size_t>(data_length_of_convertor));,6979,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,emitter.write(convertor);,6982,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,~Base64Writer(),6985,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(remaining_data_length == 0U);,6987,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,cvEndWriteStruct(file_storage);,6989,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"void base64::cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt)",7012,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(fs);,7014,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(fs->base64_writer == 0);,7016,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"fs->base64_writer = new Base64Writer(fs, name, len, dt);",7017,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"void base64::cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len)",7020,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(fs);,7022,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(fs->base64_writer != 0);,7024,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"fs->base64_writer->write(_data, len);",7025,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,void base64::cvEndWriteRawData_Base64(::CvFileStorage * fs),7028,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(fs);,7030,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,CV_Assert(fs->base64_writer != 0);,7032,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"void base64::cvWriteRawData_Base64(::cv::FileStorage & fs, const void* _data, int len, const char* dt)",7037,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"cvStartWriteStruct(*fs, fs.elname.c_str(), CV_NODE_SEQ, ""binary"");",7039,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"emitter.write(beg, end);",7049,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,emitter.write(convert);,7053,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,cvEndWriteStruct(*fs);,7056,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"void base64::cvWriteMat_Base64(::CvFileStorage * fs, const char * name, ::cv::Mat const & mat)",7059,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"cvStartWriteStruct(fs, name, CV_NODE_MAP, CV_TYPE_NAME_MAT);",7067,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"cvWriteInt(fs, ""rows"", mat.rows );",7069,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"cvWriteInt(fs, ""cols"", mat.cols );",7070,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"cvStartWriteStruct(fs, name, CV_NODE_MAP, CV_TYPE_NAME_MATND);",7072,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"cvStartWriteStruct(fs, ""sizes"", CV_NODE_SEQ | CV_NODE_FLOW);",7074,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"cvWriteRawData(fs, mat.size.p, mat.dims, ""i"");",7075,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,cvEndWriteStruct(fs);,7076,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"cvWriteString(fs, ""dt"", ::icvEncodeFormat(CV_MAT_TYPE(mat.type()), dt ), 0 );",7078,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"cvStartWriteRawData_Base64(fs, ""data"", len, dt);",7085,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"fs->base64_writer->write(convertor, len);",7086,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,cvEndWriteRawData_Base64(fs);,7087,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,cvEndWriteStruct(fs);,7091,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"void cvWriteMat_Base64(::CvFileStorage* fs, const char* name, const ::CvMat* mat)",7101,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"::base64::cvWriteMat_Base64(fs, name, holder);",7104,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"void cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const ::CvMatND* mat)",7107,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"::base64::cvWriteMat_Base64(fs, name, holder);",7110,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt)",7113,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"::base64::cvStartWriteRawData_Base64(fs, name, len, dt);",7115,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"void cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len)",7118,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,"::base64::cvWriteRawData_Base64(fs, _data, len);",7120,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,void cvEndWriteRawData_Base64(::CvFileStorage * fs),7123,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/src/persistence.cpp,+,::base64::cvEndWriteRawData_Base64(fs);,7125,download/opencv_opencv621.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/test/test_io.cpp,+,"cv::cvWriteMat_Base64(*fs, ""normal_2d_mat"", &holder);",651,download/opencv_opencv622.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/test/test_io.cpp,+,"cv::cvWriteMatND_Base64(*fs, ""normal_nd_mat"", &holder_nd);",653,download/opencv_opencv622.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/test/test_io.cpp,+,"cv::cvWriteMat_Base64(*fs, ""empty_2d_mat"", &holder);",655,download/opencv_opencv622.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/test/test_io.cpp,+,"cv::cvStartWriteRawData_Base64(*fs, ""rawdata"", static_cast<int>(rawdata.size()), ""2u3i2di"");",657,download/opencv_opencv622.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/test/test_io.cpp,+,"cv::cvWriteRawData_Base64(*fs, rawdata.data() + i * 100, 100);",659,download/opencv_opencv622.cpp
7fea7e06291905796ffb4e5045e4113a1fc482c1,Merge pull request #6697 from wiryls:FileStorageBase64,modules/core/test/test_io.cpp,+,cv::cvEndWriteRawData_Base64(*fs);,660,download/opencv_opencv622.cpp
69bd6dad1f424ec40fbaa4d92e4cea2501401c79,Merge pull request #6029 from sturkmen72:patch-7,samples/cpp/facedetect.cpp,-,"printf( ""detection time = %g ms\n"", t/((double)cvGetTickFrequency()*1000.) );",202,download/opencv_opencv623.cpp
69bd6dad1f424ec40fbaa4d92e4cea2501401c79,Merge pull request #6029 from sturkmen72:patch-7,samples/cpp/facedetect.cpp,+,"printf( ""detection time = %g ms\n"", t*1000/getTickFrequency());",203,download/opencv_opencv623.cpp
69bd6dad1f424ec40fbaa4d92e4cea2501401c79,Merge pull request #6029 from sturkmen72:patch-7,samples/cpp/polar_transforms.cpp,-,"cvLogPolar(frame,log_polar_img,cvPoint2D32f(frame->width >> 1,frame->height >> 1),70, CV_INTER_LINEAR+CV_WARP_FILL_OUTLIERS);",95,download/opencv_opencv624.cpp
69bd6dad1f424ec40fbaa4d92e4cea2501401c79,Merge pull request #6029 from sturkmen72:patch-7,samples/cpp/polar_transforms.cpp,+,"logPolar(frame,log_polar_img, center, M, INTER_LINEAR + WARP_FILL_OUTLIERS);",96,download/opencv_opencv624.cpp
69bd6dad1f424ec40fbaa4d92e4cea2501401c79,Merge pull request #6029 from sturkmen72:patch-7,samples/cpp/polar_transforms.cpp,-,"cvLogPolar(log_polar_img,recovered_img,cvPoint2D32f(frame->width >> 1,frame->height >> 1),70, CV_WARP_INVERSE_MAP+CV_INTER_LINEAR);",100,download/opencv_opencv624.cpp
69bd6dad1f424ec40fbaa4d92e4cea2501401c79,Merge pull request #6029 from sturkmen72:patch-7,samples/cpp/polar_transforms.cpp,+,"logPolar(log_polar_img, recovered_log_polar, center, M, WARP_INVERSE_MAP + INTER_LINEAR);",103,download/opencv_opencv624.cpp
69bd6dad1f424ec40fbaa4d92e4cea2501401c79,Merge pull request #6029 from sturkmen72:patch-7,samples/cpp/tutorial_code/Histograms_Matching/compareHist_Demo.cpp,-,"printf(""** Error. Usage: ./compareHist_Demo <image_settings0> <image_setting1> <image_settings2>\n"");",28,download/opencv_opencv625.cpp
69bd6dad1f424ec40fbaa4d92e4cea2501401c79,Merge pull request #6029 from sturkmen72:patch-7,samples/cpp/tutorial_code/Histograms_Matching/compareHist_Demo.cpp,+,"printf(""** Error. Usage: ./compareHist_Demo <image_settings0> <image_settings1> <image_settings2>\n"");",28,download/opencv_opencv625.cpp
c7fc9dc42fb14d9bcf02d470877eea6ab5d54ef0,Merge pull request #6707 from tech2077:master,modules/python/src2/cv2.cpp,+,PyErr_Print();,1290,download/opencv_opencv626.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,-,CV_Assert(depth.setVideoMode(defaultDepthOutputMode()) == openni::STATUS_OK); // xn::DepthGenerator supports VGA only! (Jan 2011),259,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't start depth stream: %s\n"", openni::OpenNI::getExtendedError()));",264,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't find depth stream:: %s\n"", openni::OpenNI::getExtendedError()));",274,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Could not read cameras parameters\n""));",274,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,-,CV_Assert(color.setVideoMode(defaultColorOutputMode()) == openni::STATUS_OK);,320,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't set %s stream output mode: %s\n"",",324,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,+,openni::OpenNI::getExtendedError()));,326,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't start %s stream: %s\n"",",335,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,+,openni::OpenNI::getExtendedError()));,337,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't start color stream: %s\n"", openni::OpenNI::getExtendedError()));",346,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't find %s stream:: %s\n"",",348,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,+,openni::OpenNI::getExtendedError()));,350,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't find color stream: %s\n"", openni::OpenNI::getExtendedError()));",358,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Could not read cameras parameters\n""));",365,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,-,CV_DbgAssert(depth.isValid());,560,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,-,CV_Assert( depth.isValid() );,600,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,+,CV_Assert(streams[CV_DEPTH_STREAM].isValid());,609,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,-,CV_DbgAssert( color.isValid() );,661,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsBadArg, cv::format(""Image generator does not support such parameter (propIdx=%d) for getting.\n"", propIdx));",768,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsBadArg, ""Unsupported image generator output mode.\n"");",813,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::setImageGeneratorProperty : %s\n"", openni::OpenNI::getExtendedError()));",818,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsBadArg, cv::format(""Image generator does not support such parameter (propIdx=%d) for setting.\n"", propIdx));",824,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsUnsupportedFormat, ""Unsupported format of grabbed image\n"");",999,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,-,CV_Assert(colorFrame.getVideoMode().getPixelFormat() == openni::PIXEL_FORMAT_RGB888); // RGB,1021,download/opencv_opencv627.cpp
adcdab394bb82c1dca34cc37fe2ccb928172ee08,"Merge branch 'master' of git://github.com/Itseez/opencv into doc_videoio_enums

# Resolved Conflicts:
#	modules/videoio/include/opencv2/videoio.hpp",modules/videoio/src/cap_openni2.cpp,+,CV_Assert(streamFrames[CV_COLOR_STREAM].getVideoMode().getPixelFormat() == openni::PIXEL_FORMAT_RGB888); // RGB,1021,download/opencv_opencv627.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,-,CV_Assert(depth.setVideoMode(defaultDepthOutputMode()) == openni::STATUS_OK); // xn::DepthGenerator supports VGA only! (Jan 2011),259,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't start depth stream: %s\n"", openni::OpenNI::getExtendedError()));",264,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't find depth stream:: %s\n"", openni::OpenNI::getExtendedError()));",274,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Could not read cameras parameters\n""));",274,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,-,CV_Assert(color.setVideoMode(defaultColorOutputMode()) == openni::STATUS_OK);,320,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't set %s stream output mode: %s\n"",",324,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,+,openni::OpenNI::getExtendedError()));,326,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't start %s stream: %s\n"",",335,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,+,openni::OpenNI::getExtendedError()));,337,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't start color stream: %s\n"", openni::OpenNI::getExtendedError()));",346,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't find %s stream:: %s\n"",",348,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,+,openni::OpenNI::getExtendedError()));,350,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't find color stream: %s\n"", openni::OpenNI::getExtendedError()));",358,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Could not read cameras parameters\n""));",365,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,-,CV_DbgAssert(depth.isValid());,560,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,-,CV_Assert( depth.isValid() );,600,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,+,CV_Assert(streams[CV_DEPTH_STREAM].isValid());,609,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,-,CV_DbgAssert( color.isValid() );,661,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsBadArg, cv::format(""Image generator does not support such parameter (propIdx=%d) for getting.\n"", propIdx));",768,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsBadArg, ""Unsupported image generator output mode.\n"");",813,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::setImageGeneratorProperty : %s\n"", openni::OpenNI::getExtendedError()));",818,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsBadArg, cv::format(""Image generator does not support such parameter (propIdx=%d) for setting.\n"", propIdx));",824,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsUnsupportedFormat, ""Unsupported format of grabbed image\n"");",999,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,-,CV_Assert(colorFrame.getVideoMode().getPixelFormat() == openni::PIXEL_FORMAT_RGB888); // RGB,1021,download/opencv_opencv628.cpp
6b511751f5660d27955b3e328fcdffe6dd6d0e7e,Merge pull request #6619 from Slonegg:openni2_ir_stream,modules/videoio/src/cap_openni2.cpp,+,CV_Assert(streamFrames[CV_COLOR_STREAM].getVideoMode().getPixelFormat() == openni::PIXEL_FORMAT_RGB888); // RGB,1021,download/opencv_opencv628.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,-,CV_Assert(depth.setVideoMode(defaultDepthOutputMode()) == openni::STATUS_OK); // xn::DepthGenerator supports VGA only! (Jan 2011),259,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't start depth stream: %s\n"", openni::OpenNI::getExtendedError()));",264,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't find depth stream:: %s\n"", openni::OpenNI::getExtendedError()));",274,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Could not read cameras parameters\n""));",274,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,-,CV_Assert(color.setVideoMode(defaultColorOutputMode()) == openni::STATUS_OK);,320,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't set %s stream output mode: %s\n"",",324,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,+,openni::OpenNI::getExtendedError()));,326,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't start %s stream: %s\n"",",335,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,+,openni::OpenNI::getExtendedError()));,337,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't start color stream: %s\n"", openni::OpenNI::getExtendedError()));",346,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't find %s stream:: %s\n"",",348,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,+,openni::OpenNI::getExtendedError()));,350,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Couldn't find color stream: %s\n"", openni::OpenNI::getExtendedError()));",358,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,-,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::CvCapture_OpenNI2 : Could not read cameras parameters\n""));",365,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,-,CV_DbgAssert(depth.isValid());,560,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,-,CV_Assert( depth.isValid() );,600,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,+,CV_Assert(streams[CV_DEPTH_STREAM].isValid());,609,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,-,CV_DbgAssert( color.isValid() );,661,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsBadArg, cv::format(""Image generator does not support such parameter (propIdx=%d) for getting.\n"", propIdx));",768,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsBadArg, ""Unsupported image generator output mode.\n"");",813,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsError, cv::format(""CvCapture_OpenNI2::setImageGeneratorProperty : %s\n"", openni::OpenNI::getExtendedError()));",818,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsBadArg, cv::format(""Image generator does not support such parameter (propIdx=%d) for setting.\n"", propIdx));",824,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,+,"CV_Error(CV_StsUnsupportedFormat, ""Unsupported format of grabbed image\n"");",999,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,-,CV_Assert(colorFrame.getVideoMode().getPixelFormat() == openni::PIXEL_FORMAT_RGB888); // RGB,1021,download/opencv_opencv629.cpp
f9e674180708a26ad05865040ec09f87a0d5edfa,added support for OpenNI2 IR stream #4366,modules/videoio/src/cap_openni2.cpp,+,CV_Assert(streamFrames[CV_COLOR_STREAM].getVideoMode().getPixelFormat() == openni::PIXEL_FORMAT_RGB888); // RGB,1021,download/opencv_opencv629.cpp
11ca1c95f8ee86a0f38e48c19605b8f0f4791924,update cpp samples and tutorials,samples/cpp/facedetect.cpp,-,"printf( ""detection time = %g ms\n"", t/((double)cvGetTickFrequency()*1000.) );",202,download/opencv_opencv630.cpp
11ca1c95f8ee86a0f38e48c19605b8f0f4791924,update cpp samples and tutorials,samples/cpp/facedetect.cpp,+,"printf( ""detection time = %g ms\n"", t*1000/getTickFrequency());",203,download/opencv_opencv630.cpp
11ca1c95f8ee86a0f38e48c19605b8f0f4791924,update cpp samples and tutorials,samples/cpp/polar_transforms.cpp,-,"cvLogPolar(frame,log_polar_img,cvPoint2D32f(frame->width >> 1,frame->height >> 1),70, CV_INTER_LINEAR+CV_WARP_FILL_OUTLIERS);",95,download/opencv_opencv631.cpp
11ca1c95f8ee86a0f38e48c19605b8f0f4791924,update cpp samples and tutorials,samples/cpp/polar_transforms.cpp,+,"logPolar(frame,log_polar_img, center, M, INTER_LINEAR + WARP_FILL_OUTLIERS);",96,download/opencv_opencv631.cpp
11ca1c95f8ee86a0f38e48c19605b8f0f4791924,update cpp samples and tutorials,samples/cpp/polar_transforms.cpp,-,"cvLogPolar(log_polar_img,recovered_img,cvPoint2D32f(frame->width >> 1,frame->height >> 1),70, CV_WARP_INVERSE_MAP+CV_INTER_LINEAR);",100,download/opencv_opencv631.cpp
11ca1c95f8ee86a0f38e48c19605b8f0f4791924,update cpp samples and tutorials,samples/cpp/polar_transforms.cpp,+,"logPolar(log_polar_img, recovered_log_polar, center, M, WARP_INVERSE_MAP + INTER_LINEAR);",103,download/opencv_opencv631.cpp
11ca1c95f8ee86a0f38e48c19605b8f0f4791924,update cpp samples and tutorials,samples/cpp/tutorial_code/Histograms_Matching/compareHist_Demo.cpp,-,"printf(""** Error. Usage: ./compareHist_Demo <image_settings0> <image_setting1> <image_settings2>\n"");",28,download/opencv_opencv632.cpp
11ca1c95f8ee86a0f38e48c19605b8f0f4791924,update cpp samples and tutorials,samples/cpp/tutorial_code/Histograms_Matching/compareHist_Demo.cpp,+,"printf(""** Error. Usage: ./compareHist_Demo <image_settings0> <image_settings1> <image_settings2>\n"");",28,download/opencv_opencv632.cpp
959002fb96cea52b71454229e01d775fbd4c0896,solve warnings and errors in test.,modules/core/test/test_io.cpp,-,"cv::cvStartWriteRawData_Base64(*fs, ""rawdata"", rawdata.size(), ""2u3i2di"");",656,download/opencv_opencv633.cpp
959002fb96cea52b71454229e01d775fbd4c0896,solve warnings and errors in test.,modules/core/test/test_io.cpp,+,"cv::cvStartWriteRawData_Base64(*fs, ""rawdata"", static_cast<int>(rawdata.size()), ""2u3i2di"");",656,download/opencv_opencv633.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt);",326,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"void cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len);",327,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,void cvEndWriteRawData_Base64(::CvFileStorage * fs);,328,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"Base64Writer(::CvFileStorage * fs, const char * name, int len, const char* dt)",6944,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"cvStartWriteStruct(fs, name, CV_NODE_SEQ, ""binary"");",6952,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"emitter.write(beg, end);",6964,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"void write(const void* _data, int len)",6967,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,CV_Assert(len >= 0);,6969,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,CV_Assert(remaining_data_length >= static_cast<size_t>(len));,6970,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,emitter.write(convertor);,6974,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"void write(_to_binary_convertor_t & convertor, int data_length_of_convertor)",6978,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,CV_Assert(data_length_of_convertor >= 0);,6980,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,CV_Assert(remaining_data_length >= static_cast<size_t>(data_length_of_convertor));,6981,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,emitter.write(convertor);,6984,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,~Base64Writer(),6987,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,CV_Assert(remaining_data_length == 0U);,6989,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,cvEndWriteStruct(file_storage);,6991,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,-,"void base64::cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int len, const char* dt)",7012,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"void base64::cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt)",7012,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,CV_Assert(fs);,7014,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,CV_Assert(fs->base64_writer == 0);,7016,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"fs->base64_writer = new Base64Writer(fs, name, len, dt);",7017,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"void base64::cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len)",7020,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,CV_Assert(fs);,7022,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,CV_Assert(fs->base64_writer != 0);,7024,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"fs->base64_writer->write(_data, len);",7025,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,void base64::cvEndWriteRawData_Base64(::CvFileStorage * fs),7028,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,CV_Assert(fs);,7030,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,CV_Assert(fs->base64_writer != 0);,7032,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"void base64::cvWriteRawData_Base64(::cv::FileStorage & fs, const void* _data, int len, const char* dt)",7037,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,-,"void base64::cvWriteMat_Base64(CvFileStorage * fs, const char * name, cv::Mat const & mat)",7059,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"void base64::cvWriteMat_Base64(::CvFileStorage * fs, const char * name, ::cv::Mat const & mat)",7059,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,-,"cvStartWriteStruct(fs, ""data"", CV_NODE_SEQ, ""binary"");",7081,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,-,"emitter.write(beg, end);",7093,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,-,emitter.write(convertor);,7098,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"cvStartWriteRawData_Base64(fs, ""data"", len, dt);",7099,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"fs->base64_writer->write(convertor, len);",7100,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,cvEndWriteRawData_Base64(fs);,7101,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,-,cvEndWriteStruct(fs);,7103,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,-,"void cvWriteRawData_Base64(::cv::FileStorage & fs, const void* _data, int len, const char* dt)",7101,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,-,"::base64::cvWriteRawData_Base64(fs, _data, len, dt);",7102,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name, int len, const char* dt)",7113,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"::base64::cvStartWriteRawData_Base64(fs, name, len, dt);",7115,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"void cvWriteRawData_Base64(::CvFileStorage * fs, const void* _data, int len)",7118,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,"::base64::cvWriteRawData_Base64(fs, _data, len);",7120,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,void cvEndWriteRawData_Base64(::CvFileStorage * fs),7123,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/src/persistence.cpp,+,::base64::cvEndWriteRawData_Base64(fs);,7125,download/opencv_opencv634.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/test/test_io.cpp,-,"cv::cvWriteMat_Base64(*fs, ""normal_2d_mat"", &holder);",617,download/opencv_opencv635.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/test/test_io.cpp,-,"cv::cvWriteMatND_Base64(*fs, ""normal_nd_mat"", &holder_nd);",618,download/opencv_opencv635.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/test/test_io.cpp,-,"cv::cvWriteMat_Base64(*fs, ""empty_2d_mat"", &holder);",619,download/opencv_opencv635.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/test/test_io.cpp,+,"cv::cvWriteMat_Base64(*fs, ""normal_2d_mat"", &holder);",676,download/opencv_opencv635.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/test/test_io.cpp,+,"cv::cvWriteMatND_Base64(*fs, ""normal_nd_mat"", &holder_nd);",678,download/opencv_opencv635.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/test/test_io.cpp,+,"cv::cvWriteMat_Base64(*fs, ""empty_2d_mat"", &holder);",680,download/opencv_opencv635.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/test/test_io.cpp,+,"cv::cvStartWriteRawData_Base64(*fs, ""rawdata"", rawdata.size(), ""2u3i2di"");",682,download/opencv_opencv635.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/test/test_io.cpp,+,"cv::cvWriteRawData_Base64(*fs, rawdata.data() + i * 100, 100);",684,download/opencv_opencv635.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/test/test_io.cpp,+,cv::cvEndWriteRawData_Base64(*fs);,685,download/opencv_opencv635.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/test/test_io.cpp,-,"cv::cvWriteMat_Base64(*fs, ""normal_2d_mat"", &holder);",745,download/opencv_opencv635.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/test/test_io.cpp,-,"cv::cvWriteMatND_Base64(*fs, ""normal_nd_mat"", &holder_nd);",746,download/opencv_opencv635.cpp
7c92ee2e6e758d6454f5cbc13f84f60ceb36a651,"Split `cvWriteRawData_Base64` into three functions

The three new functions:

```cpp
void cvStartWriteRawData_Base64(::CvFileStorage * fs, const char* name,
int len, const char* dt);
void cvWriteRawData_Base64(::CvFileStorage *
fs, const void* _data, int len);
void
cvEndWriteRawData_Base64(::CvFileStorage * fs);
```

Test is also updated. (And it's remarkable that there is a bug in
`cvWriteReadData`.)",modules/core/test/test_io.cpp,-,"cv::cvWriteMat_Base64(*fs, ""empty_2d_mat"", &holder);",747,download/opencv_opencv635.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/calib3d/src/calibration.cpp,+,"CV_Error( CV_StsBadArg, ""the output array of standard deviations vectors must be 1-channel """,1371,download/opencv_opencv636.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/calib3d/src/calibration.cpp,+,"Mat allErrors(1, total, CV_64FC2);",1405,download/opencv_opencv636.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/calib3d/test/test_cameracalibration.cpp,+,CV_Assert(values_read == 1);,516,download/opencv_opencv637.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/calib3d/test/test_cameracalibration.cpp,+,assert( stdDevsMatInt.type() == CV_64F );,837,download/opencv_opencv637.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/calib3d/test/test_cameracalibration.cpp,+,assert( stdDevsMatInt.total() == static_cast<size_t>(CV_CALIB_NINTRINSIC) );,838,download/opencv_opencv637.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/calib3d/test/test_cameracalibration.cpp,+,assert( stdDevsMatExt.type() == CV_64F );,841,download/opencv_opencv637.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/calib3d/test/test_cameracalibration.cpp,+,assert( stdDevsMatExt.total() == static_cast<size_t>(6*imageCount) );,842,download/opencv_opencv637.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/calib3d/test/test_cameracalibration.cpp,+,assert( perViewErrorsMat.type() == CV_64F);,845,download/opencv_opencv637.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/calib3d/test/test_cameracalibration.cpp,+,assert( perViewErrorsMat.total() == static_cast<size_t>(imageCount) );,846,download/opencv_opencv637.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/core/src/matmul.cpp,-,CV_Assert( type == B.type() && (type == CV_32FC1 || type == CV_64FC1 || type == CV_32FC2 || type == CV_64FC2) );,895,download/opencv_opencv638.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/core/src/matmul.cpp,-,CV_Assert( a_size.width == len );,901,download/opencv_opencv638.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/core/src/matmul.cpp,-,CV_Assert( a_size.height == len );,905,download/opencv_opencv638.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/core/src/matmul.cpp,-,CV_Assert( a_size.width == len );,909,download/opencv_opencv638.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/core/src/matmul.cpp,-,CV_Assert( a_size.height == len );,913,download/opencv_opencv638.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/core/src/matmul.cpp,-,CV_Assert( C.type() == type &&,918,download/opencv_opencv638.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/core/src/matmul.cpp,+,"CV_StaticAssert(GEMM_1_T == CV_HAL_GEMM_1_T, ""Incompatible GEMM_1_T flag in HAL"");",1417,download/opencv_opencv638.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/core/src/matmul.cpp,+,"CV_StaticAssert(GEMM_2_T == CV_HAL_GEMM_2_T, ""Incompatible GEMM_2_T flag in HAL"");",1418,download/opencv_opencv638.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/core/src/matmul.cpp,+,"CV_StaticAssert(GEMM_3_T == CV_HAL_GEMM_3_T, ""Incompatible GEMM_3_T flag in HAL"");",1419,download/opencv_opencv638.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/core/src/matmul.cpp,+,CV_Assert( type == B.type() && (type == CV_32FC1 || type == CV_64FC1 || type == CV_32FC2 || type == CV_64FC2) );,1530,download/opencv_opencv638.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/core/src/matmul.cpp,+,CV_Assert( a_size.width == len );,1537,download/opencv_opencv638.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/core/src/matmul.cpp,+,CV_Assert( a_size.height == len );,1542,download/opencv_opencv638.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/core/src/matmul.cpp,+,CV_Assert( a_size.width == len );,1547,download/opencv_opencv638.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/core/src/matmul.cpp,+,CV_Assert( a_size.height == len );,1552,download/opencv_opencv638.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/core/src/matmul.cpp,+,CV_Assert( C.type() == type &&,1558,download/opencv_opencv638.cpp
e8bfb4849020f4187fea1ec04f0f08a037ea8ff5,"Merge branch 'master' of https://github.com/Itseez/opencv
Added python binding for createButton",modules/core/src/matmul.cpp,+,CV_Assert( type == CV_64FC2 );,1595,download/opencv_opencv638.cpp
9b959072a20ccf1af8693db04e200f72713f7971,added python binding for createButton,modules/python/src2/cv2.cpp,+,PyErr_Print();,1292,download/opencv_opencv639.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,-,"void cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name, ::cv::Mat const & mat);",323,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,+,"void cvWriteMat_Base64(CvFileStorage * fs, const char * name, ::cv::Mat const & mat);",323,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,-,"void base64::cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name, cv::Mat const & mat)",6963,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,+,"void base64::cvWriteMat_Base64(CvFileStorage * fs, const char * name, cv::Mat const & mat)",6963,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,-,"cvStartWriteStruct(*fs, name.c_str(), CV_NODE_MAP, CV_TYPE_NAME_MAT);",6971,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,+,"cvStartWriteStruct(fs, name, CV_NODE_MAP, CV_TYPE_NAME_MAT);",6971,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,-,"cvWriteInt(*fs, ""rows"", mat.rows );",6973,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,-,"cvWriteInt(*fs, ""cols"", mat.cols );",6973,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,+,"cvWriteInt(fs, ""rows"", mat.rows );",6973,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,+,"cvWriteInt(fs, ""cols"", mat.cols );",6974,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,-,"cvStartWriteStruct(*fs, name.c_str(), CV_NODE_MAP, CV_TYPE_NAME_MATND);",6976,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,+,"cvStartWriteStruct(fs, name, CV_NODE_MAP, CV_TYPE_NAME_MATND);",6976,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,-,"cvStartWriteStruct(*fs, ""sizes"", CV_NODE_SEQ | CV_NODE_FLOW);",6978,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,-,"cvWriteRawData(*fs, mat.size.p, mat.dims, ""i"");",6978,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,-,cvEndWriteStruct(*fs);,6978,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,+,"cvStartWriteStruct(fs, ""sizes"", CV_NODE_SEQ | CV_NODE_FLOW);",6978,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,+,"cvWriteRawData(fs, mat.size.p, mat.dims, ""i"");",6979,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,+,cvEndWriteStruct(fs);,6980,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,-,"cvWriteString(*fs, ""dt"", ::icvEncodeFormat(CV_MAT_TYPE(mat.type()), dt ), 0 );",6982,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,+,"cvWriteString(fs, ""dt"", ::icvEncodeFormat(CV_MAT_TYPE(mat.type()), dt ), 0 );",6982,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,-,"cvStartWriteStruct(*fs, ""data"", CV_NODE_SEQ, ""binary"");",6985,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,+,"cvStartWriteStruct(fs, ""data"", CV_NODE_SEQ, ""binary"");",6985,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,-,cvEndWriteStruct(*fs);,7005,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,+,cvEndWriteStruct(fs);,7005,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,-,cvEndWriteStruct(*fs);,7008,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,+,cvEndWriteStruct(fs);,7008,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,-,"void cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name, ::cv::Mat const & mat)",7023,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,+,"void cvWriteMat_Base64(::CvFileStorage* fs, const char* name, const ::CvMat* mat)",7023,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,+,"::base64::cvWriteMat_Base64(fs, name, holder);",7026,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,+,"void cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const ::CvMatND* mat)",7029,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,-,"::base64::cvWriteMat_Base64(fs, name, mat);",7031,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/src/persistence.cpp,+,"::base64::cvWriteMat_Base64(fs, name, holder);",7032,download/opencv_opencv640.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/test/test_io.cpp,-,"cv::cvWriteMat_Base64(fs, ""normal_2d_mat"", _2d_out);",613,download/opencv_opencv641.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/test/test_io.cpp,-,"cv::cvWriteMat_Base64(fs, ""normal_nd_mat"", _nd_out);",613,download/opencv_opencv641.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/test/test_io.cpp,-,"cv::cvWriteMat_Base64(fs, ""empty_2d_mat"", _em_out);",613,download/opencv_opencv641.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/test/test_io.cpp,+,"cv::cvWriteMat_Base64(*fs, ""normal_2d_mat"", &holder);",614,download/opencv_opencv641.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/test/test_io.cpp,+,"cv::cvWriteMatND_Base64(*fs, ""normal_nd_mat"", &holder_nd);",616,download/opencv_opencv641.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/test/test_io.cpp,+,"cv::cvWriteMat_Base64(*fs, ""empty_2d_mat"", &holder);",618,download/opencv_opencv641.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/test/test_io.cpp,-,"cv::cvWriteMat_Base64(fs, ""normal_2d_mat"", _2d_out);",678,download/opencv_opencv641.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/test/test_io.cpp,-,"cv::cvWriteMat_Base64(fs, ""normal_nd_mat"", _nd_out);",678,download/opencv_opencv641.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/test/test_io.cpp,-,"cv::cvWriteMat_Base64(fs, ""empty_2d_mat"", _em_out);",678,download/opencv_opencv641.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/test/test_io.cpp,+,"cv::cvWriteMat_Base64(*fs, ""normal_2d_mat"", &holder);",679,download/opencv_opencv641.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/test/test_io.cpp,+,"cv::cvWriteMatND_Base64(*fs, ""normal_nd_mat"", &holder_nd);",681,download/opencv_opencv641.cpp
29921d055df344b44fd5fbd92b80f58b93216886,"change the parameter to `CvMat` and `CvMatND`

```cpp
cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name,
::cv::Mat const & mat)
```
becomes:
```cpp
CV_EXPORTS void cvWriteMat_Base64(::CvFileStorage* fs, const char* name,
const ::CvMat* mat);
CV_EXPORTS void
cvWriteMatND_Base64(::CvFileStorage* fs, const char* name, const
::CvMatND* mat);
```",modules/core/test/test_io.cpp,+,"cv::cvWriteMat_Base64(*fs, ""empty_2d_mat"", &holder);",683,download/opencv_opencv641.cpp
958263d24556c5ce59d3b50df41b81276e657c14,"Solve warnings, and adjusted the test case.",modules/core/src/persistence.cpp,-,"CV_Assert(!""elem_type is not support."");",3501,download/opencv_opencv642.cpp
958263d24556c5ce59d3b50df41b81276e657c14,"Solve warnings, and adjusted the test case.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsUnsupportedFormat, ""Unsupported type"" );",3501,download/opencv_opencv642.cpp
958263d24556c5ce59d3b50df41b81276e657c14,"Solve warnings, and adjusted the test case.",modules/core/src/persistence.cpp,-,CV_Assert(0);,3623,download/opencv_opencv642.cpp
958263d24556c5ce59d3b50df41b81276e657c14,"Solve warnings, and adjusted the test case.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsUnsupportedFormat, ""Unsupported type"" );",3623,download/opencv_opencv642.cpp
958263d24556c5ce59d3b50df41b81276e657c14,"Solve warnings, and adjusted the test case.",modules/core/src/persistence.cpp,-,CV_Assert(0);,3673,download/opencv_opencv642.cpp
958263d24556c5ce59d3b50df41b81276e657c14,"Solve warnings, and adjusted the test case.",modules/core/src/persistence.cpp,+,"CV_Error( CV_StsUnsupportedFormat, ""Unsupported type"" );",3673,download/opencv_opencv642.cpp
882e4221e722c92d419d86b2b94ad8c5fc1fd574,"fix errors from test.

Two other test are still needed.

1. Verify the Base64 data.
2. Read an old YML file for compatibility test.",modules/core/src/persistence.cpp,-,assert(0);,3501,download/opencv_opencv643.cpp
882e4221e722c92d419d86b2b94ad8c5fc1fd574,"fix errors from test.

Two other test are still needed.

1. Verify the Base64 data.
2. Read an old YML file for compatibility test.",modules/core/src/persistence.cpp,+,"CV_Assert(!""elem_type is not support."");",3501,download/opencv_opencv643.cpp
882e4221e722c92d419d86b2b94ad8c5fc1fd574,"fix errors from test.

Two other test are still needed.

1. Verify the Base64 data.
2. Read an old YML file for compatibility test.",modules/core/src/persistence.cpp,-,assert(0);,3623,download/opencv_opencv643.cpp
882e4221e722c92d419d86b2b94ad8c5fc1fd574,"fix errors from test.

Two other test are still needed.

1. Verify the Base64 data.
2. Read an old YML file for compatibility test.",modules/core/src/persistence.cpp,+,CV_Assert(0);,3623,download/opencv_opencv643.cpp
882e4221e722c92d419d86b2b94ad8c5fc1fd574,"fix errors from test.

Two other test are still needed.

1. Verify the Base64 data.
2. Read an old YML file for compatibility test.",modules/core/src/persistence.cpp,-,assert(0);,3673,download/opencv_opencv643.cpp
882e4221e722c92d419d86b2b94ad8c5fc1fd574,"fix errors from test.

Two other test are still needed.

1. Verify the Base64 data.
2. Read an old YML file for compatibility test.",modules/core/src/persistence.cpp,+,CV_Assert(0);,3673,download/opencv_opencv643.cpp
882e4221e722c92d419d86b2b94ad8c5fc1fd574,"fix errors from test.

Two other test are still needed.

1. Verify the Base64 data.
2. Read an old YML file for compatibility test.",modules/core/src/persistence.cpp,-,CV_Assert(0); },6313,download/opencv_opencv643.cpp
882e4221e722c92d419d86b2b94ad8c5fc1fd574,"fix errors from test.

Two other test are still needed.

1. Verify the Base64 data.
2. Read an old YML file for compatibility test.",modules/core/src/persistence.cpp,+,CV_Assert(buffer.size() < HEADER_SIZE);,6313,download/opencv_opencv643.cpp
882e4221e722c92d419d86b2b94ad8c5fc1fd574,"fix errors from test.

Two other test are still needed.

1. Verify the Base64 data.
2. Read an old YML file for compatibility test.",modules/core/src/persistence.cpp,-,default:     { CV_Assert(0); break; },6566,download/opencv_opencv643.cpp
882e4221e722c92d419d86b2b94ad8c5fc1fd574,"fix errors from test.

Two other test are still needed.

1. Verify the Base64 data.
2. Read an old YML file for compatibility test.",modules/core/src/persistence.cpp,+,"default:     { CV_Assert(!""mat type is invalid""); break; }",6566,download/opencv_opencv643.cpp
882e4221e722c92d419d86b2b94ad8c5fc1fd574,"fix errors from test.

Two other test are still needed.

1. Verify the Base64 data.
2. Read an old YML file for compatibility test.",modules/core/src/persistence.cpp,-,default: { CV_Assert(0); break; },6727,download/opencv_opencv643.cpp
882e4221e722c92d419d86b2b94ad8c5fc1fd574,"fix errors from test.

Two other test are still needed.

1. Verify the Base64 data.
2. Read an old YML file for compatibility test.",modules/core/src/persistence.cpp,+,"default: { CV_Assert(!""type not support""); break; }",6727,download/opencv_opencv643.cpp
882e4221e722c92d419d86b2b94ad8c5fc1fd574,"fix errors from test.

Two other test are still needed.

1. Verify the Base64 data.
2. Read an old YML file for compatibility test.",modules/core/src/persistence.cpp,-,default:  { CV_Assert(0); break; },6886,download/opencv_opencv643.cpp
882e4221e722c92d419d86b2b94ad8c5fc1fd574,"fix errors from test.

Two other test are still needed.

1. Verify the Base64 data.
2. Read an old YML file for compatibility test.",modules/core/src/persistence.cpp,+,"default:  { CV_Assert(!""type not support""); break; }",6887,download/opencv_opencv643.cpp
882e4221e722c92d419d86b2b94ad8c5fc1fd574,"fix errors from test.

Two other test are still needed.

1. Verify the Base64 data.
2. Read an old YML file for compatibility test.",modules/core/src/persistence.cpp,-,default:  { CV_Assert(0); break; },6904,download/opencv_opencv643.cpp
882e4221e722c92d419d86b2b94ad8c5fc1fd574,"fix errors from test.

Two other test are still needed.

1. Verify the Base64 data.
2. Read an old YML file for compatibility test.",modules/core/src/persistence.cpp,+,"default:  { CV_Assert(!""type is not support""); break; }",6905,download/opencv_opencv643.cpp
d1b097f409bf4bb3366953ddc36f967760083e83,fix most coding style warnings and errors,modules/core/src/persistence.cpp,-,CV_Assert(0); // error! header is too long,6312,download/opencv_opencv644.cpp
d1b097f409bf4bb3366953ddc36f967760083e83,fix most coding style warnings and errors,modules/core/src/persistence.cpp,+,CV_Assert(0); },6313,download/opencv_opencv644.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"void cvWriteRawData_Base64(::cv::FileStorage & fs, const void* _data, int len, const char* dt);",323,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"void cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name, ::cv::Mat const & mat);",324,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,while(cv_isprint(*ptr)) /* no check for base64 string */,1094,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Unexpected end of line"");",1097,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Unrecognized Base64 header"");",1118,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Cannot parse size in Base64 header"");",1125,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Cannot parse dt in Base64 header"");",1127,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Byte size not match elememt size"");",1152,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"sprintf(buf, ""!!binary |"");",1730,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,while(cv_isprint(*ptr)) /* no check for base64 string */,2037,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Unexpected end of line"");",2040,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Unrecognized Base64 header"");",2060,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Cannot parse size in Base64 header"");",2066,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Cannot parse dt in Base64 header"");",2068,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"CV_PARSE_ERROR(""Byte size not match elememt size"");",2092,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"*        printf(""%3u, "", (i != std::string::npos ? i : 0));",6060,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_Assert(0); // error! header is too long,6312,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_Assert(flush());    /* check for base64_valid */,6371,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_Assert(len != 0);,6388,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_Assert(dst_cur + len < dst_end);,6391,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"Base64ContextEmitter & write(const uchar * beg, const uchar * end)",6438,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,Base64ContextEmitter & write(_to_binary_convertor_t & convertor),6466,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"write(beg, end);",6476,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_Assert(it.nplanes > 0U); /* make sure mats not empty */,6540,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,default:     { CV_Assert(0); break; },6566,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_Assert(!(*this));,6572,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_DbgAssert(*this);,6579,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_Assert(src);,6639,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_Assert(dt);,6640,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_Assert(len > 0);,6641,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_DbgAssert(*this);,6655,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_Assert(cnt > 0U);,6693,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,default: { CV_Assert(0); break; },6728,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_Assert(iss.eof());,6737,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_Assert(src);,6757,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_Assert(dt);,6758,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_Assert(len >= 0);,6759,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_DbgAssert(*this);,6771,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_Assert(cnt > 0U);,6839,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,default:  { CV_Assert(0); break; },6875,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,default:  { CV_Assert(0); break; },6893,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_Assert(iss.eof());,6898,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,CV_Assert(binary_to_funcs.size());,6899,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"void base64::cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int len, const char* dt)",6930,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"cvStartWriteStruct(*fs, fs.elname.c_str(), CV_NODE_SEQ, ""binary"");",6932,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"emitter.write(beg, end);",6942,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,emitter.write(convert);,6946,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,cvEndWriteStruct(*fs);,6949,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"void base64::cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name, cv::Mat const & mat)",6952,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"cvStartWriteStruct(*fs, name.c_str(), CV_NODE_MAP, CV_TYPE_NAME_MAT);",6960,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"cvWriteInt(*fs, ""rows"", mat.rows );",6962,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"cvWriteInt(*fs, ""cols"", mat.cols );",6963,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"cvStartWriteStruct(*fs, name.c_str(), CV_NODE_MAP, CV_TYPE_NAME_MATND);",6965,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"cvStartWriteStruct(*fs, ""sizes"", CV_NODE_SEQ | CV_NODE_FLOW);",6967,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"cvWriteRawData(*fs, mat.size.p, mat.dims, ""i"");",6968,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,cvEndWriteStruct(*fs);,6969,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"cvWriteString(*fs, ""dt"", ::icvEncodeFormat(CV_MAT_TYPE(mat.type()), dt ), 0 );",6971,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"cvStartWriteStruct(*fs, ""data"", CV_NODE_SEQ, ""binary"");",6974,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"emitter.write(beg, end);",6985,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,emitter.write(convertor);,6991,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,cvEndWriteStruct(*fs);,6994,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,cvEndWriteStruct(*fs);,6997,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"void cvWriteRawData_Base64(::cv::FileStorage & fs, const void* _data, int len, const char* dt)",7007,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"::base64::cvWriteRawData_Base64(fs, _data, len, dt);",7009,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"void cvWriteMat_Base64(::cv::FileStorage & fs, ::cv::String const & name, ::cv::Mat const & mat)",7012,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/src/persistence.cpp,+,"::base64::cvWriteMat_Base64(fs, name, mat);",7014,download/opencv_opencv645.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/test/test_io.cpp,+,"cv::cvWriteMat_Base64(fs, ""normal_2d_mat"", _2d_out);",609,download/opencv_opencv646.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/test/test_io.cpp,+,"cv::cvWriteMat_Base64(fs, ""normal_nd_mat"", _nd_out);",610,download/opencv_opencv646.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/test/test_io.cpp,+,"cv::cvWriteMat_Base64(fs, ""empty_2d_mat"", _em_out);",611,download/opencv_opencv646.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/test/test_io.cpp,+,"cv::cvWriteMat_Base64(fs, ""normal_2d_mat"", _2d_out);",667,download/opencv_opencv646.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/test/test_io.cpp,+,"cv::cvWriteMat_Base64(fs, ""normal_nd_mat"", _nd_out);",668,download/opencv_opencv646.cpp
ecd827fc8ea248ed3ebbb6e7e48f1b75e11fbd05,"Add Base64 support for FileStorage

[GSoC] FileStorage:
Add base64 support for reading and writting XML\YML file.
The two new functions:
```
void cvWriteRawData_Base64(cv::FileStorage & fs, const void* _data, int
len, const char* dt);
void cvWriteMat_Base64(cv::FileStorage & fs, cv::String const & name,
cv::Mat const & mat);
```",modules/core/test/test_io.cpp,+,"cv::cvWriteMat_Base64(fs, ""empty_2d_mat"", _em_out);",669,download/opencv_opencv646.cpp
547a2d29c3d849ab1b9b2f93c27b509a4ca958fe,Merge pull request #6535 from sovrasov:lapack-hal,modules/core/src/matmul.cpp,-,CV_Assert( type == B.type() && (type == CV_32FC1 || type == CV_64FC1 || type == CV_32FC2 || type == CV_64FC2) );,895,download/opencv_opencv647.cpp
547a2d29c3d849ab1b9b2f93c27b509a4ca958fe,Merge pull request #6535 from sovrasov:lapack-hal,modules/core/src/matmul.cpp,-,CV_Assert( a_size.width == len );,901,download/opencv_opencv647.cpp
547a2d29c3d849ab1b9b2f93c27b509a4ca958fe,Merge pull request #6535 from sovrasov:lapack-hal,modules/core/src/matmul.cpp,-,CV_Assert( a_size.height == len );,905,download/opencv_opencv647.cpp
547a2d29c3d849ab1b9b2f93c27b509a4ca958fe,Merge pull request #6535 from sovrasov:lapack-hal,modules/core/src/matmul.cpp,-,CV_Assert( a_size.width == len );,909,download/opencv_opencv647.cpp
547a2d29c3d849ab1b9b2f93c27b509a4ca958fe,Merge pull request #6535 from sovrasov:lapack-hal,modules/core/src/matmul.cpp,-,CV_Assert( a_size.height == len );,913,download/opencv_opencv647.cpp
547a2d29c3d849ab1b9b2f93c27b509a4ca958fe,Merge pull request #6535 from sovrasov:lapack-hal,modules/core/src/matmul.cpp,-,CV_Assert( C.type() == type &&,918,download/opencv_opencv647.cpp
547a2d29c3d849ab1b9b2f93c27b509a4ca958fe,Merge pull request #6535 from sovrasov:lapack-hal,modules/core/src/matmul.cpp,+,"CV_StaticAssert(GEMM_1_T == CV_HAL_GEMM_1_T, ""Incompatible GEMM_1_T flag in HAL"");",1417,download/opencv_opencv647.cpp
547a2d29c3d849ab1b9b2f93c27b509a4ca958fe,Merge pull request #6535 from sovrasov:lapack-hal,modules/core/src/matmul.cpp,+,"CV_StaticAssert(GEMM_2_T == CV_HAL_GEMM_2_T, ""Incompatible GEMM_2_T flag in HAL"");",1418,download/opencv_opencv647.cpp
547a2d29c3d849ab1b9b2f93c27b509a4ca958fe,Merge pull request #6535 from sovrasov:lapack-hal,modules/core/src/matmul.cpp,+,"CV_StaticAssert(GEMM_3_T == CV_HAL_GEMM_3_T, ""Incompatible GEMM_3_T flag in HAL"");",1419,download/opencv_opencv647.cpp
547a2d29c3d849ab1b9b2f93c27b509a4ca958fe,Merge pull request #6535 from sovrasov:lapack-hal,modules/core/src/matmul.cpp,+,CV_Assert( type == B.type() && (type == CV_32FC1 || type == CV_64FC1 || type == CV_32FC2 || type == CV_64FC2) );,1530,download/opencv_opencv647.cpp
547a2d29c3d849ab1b9b2f93c27b509a4ca958fe,Merge pull request #6535 from sovrasov:lapack-hal,modules/core/src/matmul.cpp,+,CV_Assert( a_size.width == len );,1537,download/opencv_opencv647.cpp
547a2d29c3d849ab1b9b2f93c27b509a4ca958fe,Merge pull request #6535 from sovrasov:lapack-hal,modules/core/src/matmul.cpp,+,CV_Assert( a_size.height == len );,1542,download/opencv_opencv647.cpp
547a2d29c3d849ab1b9b2f93c27b509a4ca958fe,Merge pull request #6535 from sovrasov:lapack-hal,modules/core/src/matmul.cpp,+,CV_Assert( a_size.width == len );,1547,download/opencv_opencv647.cpp
547a2d29c3d849ab1b9b2f93c27b509a4ca958fe,Merge pull request #6535 from sovrasov:lapack-hal,modules/core/src/matmul.cpp,+,CV_Assert( a_size.height == len );,1552,download/opencv_opencv647.cpp
547a2d29c3d849ab1b9b2f93c27b509a4ca958fe,Merge pull request #6535 from sovrasov:lapack-hal,modules/core/src/matmul.cpp,+,CV_Assert( C.type() == type &&,1558,download/opencv_opencv647.cpp
547a2d29c3d849ab1b9b2f93c27b509a4ca958fe,Merge pull request #6535 from sovrasov:lapack-hal,modules/core/src/matmul.cpp,+,CV_Assert( type == CV_64FC2 );,1595,download/opencv_opencv647.cpp
4142e737b0e5dfa4a33890e6a5ed0e5778a03aa4,Merge pull request #6453 from sovrasov:extend_calibrateCamera,modules/calib3d/src/calibration.cpp,+,"CV_Error( CV_StsBadArg, ""the output array of standard deviations vectors must be 1-channel """,1371,download/opencv_opencv648.cpp
4142e737b0e5dfa4a33890e6a5ed0e5778a03aa4,Merge pull request #6453 from sovrasov:extend_calibrateCamera,modules/calib3d/src/calibration.cpp,+,"Mat allErrors(1, total, CV_64FC2);",1405,download/opencv_opencv648.cpp
4142e737b0e5dfa4a33890e6a5ed0e5778a03aa4,Merge pull request #6453 from sovrasov:extend_calibrateCamera,modules/calib3d/test/test_cameracalibration.cpp,+,CV_Assert(values_read == 1);,516,download/opencv_opencv649.cpp
4142e737b0e5dfa4a33890e6a5ed0e5778a03aa4,Merge pull request #6453 from sovrasov:extend_calibrateCamera,modules/calib3d/test/test_cameracalibration.cpp,+,assert( stdDevsMatInt.type() == CV_64F );,837,download/opencv_opencv649.cpp
4142e737b0e5dfa4a33890e6a5ed0e5778a03aa4,Merge pull request #6453 from sovrasov:extend_calibrateCamera,modules/calib3d/test/test_cameracalibration.cpp,+,assert( stdDevsMatInt.total() == static_cast<size_t>(CV_CALIB_NINTRINSIC) );,838,download/opencv_opencv649.cpp
4142e737b0e5dfa4a33890e6a5ed0e5778a03aa4,Merge pull request #6453 from sovrasov:extend_calibrateCamera,modules/calib3d/test/test_cameracalibration.cpp,+,assert( stdDevsMatExt.type() == CV_64F );,841,download/opencv_opencv649.cpp
4142e737b0e5dfa4a33890e6a5ed0e5778a03aa4,Merge pull request #6453 from sovrasov:extend_calibrateCamera,modules/calib3d/test/test_cameracalibration.cpp,+,assert( stdDevsMatExt.total() == static_cast<size_t>(6*imageCount) );,842,download/opencv_opencv649.cpp
4142e737b0e5dfa4a33890e6a5ed0e5778a03aa4,Merge pull request #6453 from sovrasov:extend_calibrateCamera,modules/calib3d/test/test_cameracalibration.cpp,+,assert( perViewErrorsMat.type() == CV_64F);,845,download/opencv_opencv649.cpp
4142e737b0e5dfa4a33890e6a5ed0e5778a03aa4,Merge pull request #6453 from sovrasov:extend_calibrateCamera,modules/calib3d/test/test_cameracalibration.cpp,+,assert( perViewErrorsMat.total() == static_cast<size_t>(imageCount) );,846,download/opencv_opencv649.cpp
e5d12502c594c90aec0212b9b98b195ff3be21af,Fix useExtrinsicGuess in solvePnP,modules/calib3d/src/solvepnp.cpp,+,CV_Assert( (rtype == CV_32F || rtype == CV_64F) &&,68,download/opencv_opencv650.cpp
e5d12502c594c90aec0212b9b98b195ff3be21af,Fix useExtrinsicGuess in solvePnP,modules/calib3d/src/solvepnp.cpp,+,"CV_Assert( (rsize == Size(1, 3) || rsize == Size(3, 1)) &&",70,download/opencv_opencv650.cpp
e5d12502c594c90aec0212b9b98b195ff3be21af,Fix useExtrinsicGuess in solvePnP,modules/calib3d/src/solvepnp.cpp,+,CV_Assert( (rtype == CV_32F || rtype == CV_64F) &&,350,download/opencv_opencv650.cpp
e5d12502c594c90aec0212b9b98b195ff3be21af,Fix useExtrinsicGuess in solvePnP,modules/calib3d/src/solvepnp.cpp,+,"CV_Assert( (rsize == Size(1, 3) || rsize == Size(3, 1)) &&",352,download/opencv_opencv650.cpp
46fb46c54ed992d1f3147672c7d199589604e4ad,Add an extended version of CalibrateCamera function,modules/calib3d/src/calibration.cpp,+,"CV_Error( CV_StsBadArg, ""the output array of standard deviations vectors must be 1-channel """,1371,download/opencv_opencv651.cpp
46fb46c54ed992d1f3147672c7d199589604e4ad,Add an extended version of CalibrateCamera function,modules/calib3d/src/calibration.cpp,+,"Mat allErrors(1, total, CV_64FC2);",1405,download/opencv_opencv651.cpp
46fb46c54ed992d1f3147672c7d199589604e4ad,Add an extended version of CalibrateCamera function,modules/calib3d/test/test_cameracalibration.cpp,+,CV_Assert(values_read == 1);,516,download/opencv_opencv652.cpp
46fb46c54ed992d1f3147672c7d199589604e4ad,Add an extended version of CalibrateCamera function,modules/calib3d/test/test_cameracalibration.cpp,+,assert( stdDevsMatInt.type() == CV_64F );,837,download/opencv_opencv652.cpp
46fb46c54ed992d1f3147672c7d199589604e4ad,Add an extended version of CalibrateCamera function,modules/calib3d/test/test_cameracalibration.cpp,+,assert( stdDevsMatInt.total() == static_cast<size_t>(CV_CALIB_NINTRINSIC) );,838,download/opencv_opencv652.cpp
46fb46c54ed992d1f3147672c7d199589604e4ad,Add an extended version of CalibrateCamera function,modules/calib3d/test/test_cameracalibration.cpp,+,assert( stdDevsMatExt.type() == CV_64F );,841,download/opencv_opencv652.cpp
46fb46c54ed992d1f3147672c7d199589604e4ad,Add an extended version of CalibrateCamera function,modules/calib3d/test/test_cameracalibration.cpp,+,assert( stdDevsMatExt.total() == static_cast<size_t>(6*imageCount) );,842,download/opencv_opencv652.cpp
46fb46c54ed992d1f3147672c7d199589604e4ad,Add an extended version of CalibrateCamera function,modules/calib3d/test/test_cameracalibration.cpp,+,assert( perViewErrorsMat.type() == CV_64F);,845,download/opencv_opencv652.cpp
46fb46c54ed992d1f3147672c7d199589604e4ad,Add an extended version of CalibrateCamera function,modules/calib3d/test/test_cameracalibration.cpp,+,assert( perViewErrorsMat.total() == static_cast<size_t>(imageCount) );,846,download/opencv_opencv652.cpp
a2d0cc878cb605c771cf7ca2979dcf9974ea5897,Implement internal HAL for GEMM and matrix decompositions,modules/core/src/matmul.cpp,-,CV_Assert( type == B.type() && (type == CV_32FC1 || type == CV_64FC1 || type == CV_32FC2 || type == CV_64FC2) );,895,download/opencv_opencv653.cpp
a2d0cc878cb605c771cf7ca2979dcf9974ea5897,Implement internal HAL for GEMM and matrix decompositions,modules/core/src/matmul.cpp,-,CV_Assert( a_size.width == len );,901,download/opencv_opencv653.cpp
a2d0cc878cb605c771cf7ca2979dcf9974ea5897,Implement internal HAL for GEMM and matrix decompositions,modules/core/src/matmul.cpp,-,CV_Assert( a_size.height == len );,905,download/opencv_opencv653.cpp
a2d0cc878cb605c771cf7ca2979dcf9974ea5897,Implement internal HAL for GEMM and matrix decompositions,modules/core/src/matmul.cpp,-,CV_Assert( a_size.width == len );,909,download/opencv_opencv653.cpp
a2d0cc878cb605c771cf7ca2979dcf9974ea5897,Implement internal HAL for GEMM and matrix decompositions,modules/core/src/matmul.cpp,-,CV_Assert( a_size.height == len );,913,download/opencv_opencv653.cpp
a2d0cc878cb605c771cf7ca2979dcf9974ea5897,Implement internal HAL for GEMM and matrix decompositions,modules/core/src/matmul.cpp,-,CV_Assert( C.type() == type &&,918,download/opencv_opencv653.cpp
a2d0cc878cb605c771cf7ca2979dcf9974ea5897,Implement internal HAL for GEMM and matrix decompositions,modules/core/src/matmul.cpp,+,"CV_StaticAssert(GEMM_1_T == CV_HAL_GEMM_1_T, ""Incompatible GEMM_1_T flag in HAL"");",1417,download/opencv_opencv653.cpp
a2d0cc878cb605c771cf7ca2979dcf9974ea5897,Implement internal HAL for GEMM and matrix decompositions,modules/core/src/matmul.cpp,+,"CV_StaticAssert(GEMM_2_T == CV_HAL_GEMM_2_T, ""Incompatible GEMM_2_T flag in HAL"");",1418,download/opencv_opencv653.cpp
a2d0cc878cb605c771cf7ca2979dcf9974ea5897,Implement internal HAL for GEMM and matrix decompositions,modules/core/src/matmul.cpp,+,"CV_StaticAssert(GEMM_3_T == CV_HAL_GEMM_3_T, ""Incompatible GEMM_3_T flag in HAL"");",1419,download/opencv_opencv653.cpp
a2d0cc878cb605c771cf7ca2979dcf9974ea5897,Implement internal HAL for GEMM and matrix decompositions,modules/core/src/matmul.cpp,+,CV_Assert( type == B.type() && (type == CV_32FC1 || type == CV_64FC1 || type == CV_32FC2 || type == CV_64FC2) );,1530,download/opencv_opencv653.cpp
a2d0cc878cb605c771cf7ca2979dcf9974ea5897,Implement internal HAL for GEMM and matrix decompositions,modules/core/src/matmul.cpp,+,CV_Assert( a_size.width == len );,1537,download/opencv_opencv653.cpp
a2d0cc878cb605c771cf7ca2979dcf9974ea5897,Implement internal HAL for GEMM and matrix decompositions,modules/core/src/matmul.cpp,+,CV_Assert( a_size.height == len );,1542,download/opencv_opencv653.cpp
a2d0cc878cb605c771cf7ca2979dcf9974ea5897,Implement internal HAL for GEMM and matrix decompositions,modules/core/src/matmul.cpp,+,CV_Assert( a_size.width == len );,1547,download/opencv_opencv653.cpp
a2d0cc878cb605c771cf7ca2979dcf9974ea5897,Implement internal HAL for GEMM and matrix decompositions,modules/core/src/matmul.cpp,+,CV_Assert( a_size.height == len );,1552,download/opencv_opencv653.cpp
a2d0cc878cb605c771cf7ca2979dcf9974ea5897,Implement internal HAL for GEMM and matrix decompositions,modules/core/src/matmul.cpp,+,CV_Assert( C.type() == type &&,1558,download/opencv_opencv653.cpp
a2d0cc878cb605c771cf7ca2979dcf9974ea5897,Implement internal HAL for GEMM and matrix decompositions,modules/core/src/matmul.cpp,+,CV_Assert( type == CV_64FC2 );,1595,download/opencv_opencv653.cpp
d3930cdee1a0c7124045883b3062f25b3027fa97,Merge pull request #6482 from paroj:filestorage_py,modules/core/src/persistence.cpp,+,"void FileStorage::write( const String& name, double val )",5274,download/opencv_opencv654.cpp
d3930cdee1a0c7124045883b3062f25b3027fa97,Merge pull request #6482 from paroj:filestorage_py,modules/core/src/persistence.cpp,+,"void FileStorage::write( const String& name, const String& val )",5279,download/opencv_opencv654.cpp
d3930cdee1a0c7124045883b3062f25b3027fa97,Merge pull request #6482 from paroj:filestorage_py,modules/core/src/persistence.cpp,+,"void FileStorage::write( const String& name, InputArray val )",5284,download/opencv_opencv654.cpp
d3930cdee1a0c7124045883b3062f25b3027fa97,Merge pull request #6482 from paroj:filestorage_py,modules/core/src/persistence.cpp,+,"void FileStorage::writeComment( const String& comment, bool append )",5289,download/opencv_opencv654.cpp
d3930cdee1a0c7124045883b3062f25b3027fa97,Merge pull request #6482 from paroj:filestorage_py,modules/core/src/persistence.cpp,+,"cvWriteComment(fs, comment.c_str(), append ? 1 : 0);",5291,download/opencv_opencv654.cpp
a2d8e7fa6ee02a7bb1fb4ec0abbb0182607407d1,Merge pull request #6485 from vagran:vagran-patch-1,modules/calib3d/src/fisheye.cpp,-,CV_Assert((P.depth() == CV_32F || P.depth() == CV_64F) && (R.depth() == CV_32F || R.depth() == CV_64F));,409,download/opencv_opencv655.cpp
a2d8e7fa6ee02a7bb1fb4ec0abbb0182607407d1,Merge pull request #6485 from vagran:vagran-patch-1,modules/calib3d/src/fisheye.cpp,+,CV_Assert((P.empty() || P.depth() == CV_32F || P.depth() == CV_64F) && (R.empty() || R.depth() == CV_32F || R.depth() == CV_64F));,409,download/opencv_opencv655.cpp
bf688da50b99e7b1eb6456cf8a81d83a24d0519b,"FileStorage: add simplified API for bindings

at least it is possible to read/ write calibration files. Fixes #4282.

Also add CPP method for writing comments.",modules/core/src/persistence.cpp,+,"void FileStorage::write( const String& name, double val )",5274,download/opencv_opencv656.cpp
bf688da50b99e7b1eb6456cf8a81d83a24d0519b,"FileStorage: add simplified API for bindings

at least it is possible to read/ write calibration files. Fixes #4282.

Also add CPP method for writing comments.",modules/core/src/persistence.cpp,+,"void FileStorage::write( const String& name, const String& val )",5279,download/opencv_opencv656.cpp
bf688da50b99e7b1eb6456cf8a81d83a24d0519b,"FileStorage: add simplified API for bindings

at least it is possible to read/ write calibration files. Fixes #4282.

Also add CPP method for writing comments.",modules/core/src/persistence.cpp,+,"void FileStorage::write( const String& name, InputArray val )",5284,download/opencv_opencv656.cpp
bf688da50b99e7b1eb6456cf8a81d83a24d0519b,"FileStorage: add simplified API for bindings

at least it is possible to read/ write calibration files. Fixes #4282.

Also add CPP method for writing comments.",modules/core/src/persistence.cpp,+,"void FileStorage::writeComment( const String& comment, bool append )",5289,download/opencv_opencv656.cpp
bf688da50b99e7b1eb6456cf8a81d83a24d0519b,"FileStorage: add simplified API for bindings

at least it is possible to read/ write calibration files. Fixes #4282.

Also add CPP method for writing comments.",modules/core/src/persistence.cpp,+,"cvWriteComment(fs, comment.c_str(), append ? 1 : 0);",5291,download/opencv_opencv656.cpp
