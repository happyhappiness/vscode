file,loc,log,log_file,block,block_file,block_feature,function_file,function_loc
second/download/CMake/CMake/CMake/Utilities/cmzlib/gzio.cpp,188,"fprintf(s->file, ""%c%c%c%c%c%c%c%c%c%c"", gz_magic[0], gz_magic[1],
             Z_DEFLATED, 0 /*flags*/, 0,0,0,0 /*time*/, 0 /*xflags*/, OS_CODE);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_0.cpp,"{
        /* Write a very simple .gz header:
         */
        fprintf(s->file, ""%c%c%c%c%c%c%c%c%c%c"", gz_magic[0], gz_magic[1],
             Z_DEFLATED, 0 /*flags*/, 0,0,0,0 /*time*/, 0 /*xflags*/, OS_CODE);
        s->start = 10L;
        /* We use 10L instead of ftell(s->file) to because ftell causes an
         * fflush on some systems. This version of the library doesn't use
         * start anyway in write mode, so this initialization is not
         * necessary.
         */
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_0.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_0.cpp,188
second/download/CMake/CMake/CMake/Utilities/cmzlib/gzio.cpp,225,"sprintf(name, ""<fd:%d>"", fd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1.cpp,"{
    char name[46];      /* allow for up to 128-bit integers */

    if (fd < 0) return (gzFile)Z_NULL;
    sprintf(name, ""<fd:%d>"", fd); /* for debugging */

    return gz_open (name, mode, fd);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 13, 0, 0, 1, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 2, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1.cpp,225
second/download/CMake/CMake/CMake/Utilities/cmzlib/gzio.cpp,612,"(void)vsprintf(buf, format, va);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2.cpp,"{
    char buf[Z_PRINTF_BUFSIZE];
    va_list va;
    int len;

    buf[sizeof(buf) - 1] = 0;
    va_start(va, format);
#ifdef NO_vsnprintf
#  ifdef HAS_vsprintf_void
    (void)vsprintf(buf, format, va);
    va_end(va);
    for (len = 0; len < sizeof(buf); len++)
        if (buf[len] == 0) break;
#  else
    len = vsprintf(buf, format, va);
    va_end(va);
#  endif
#else
#  ifdef HAS_vsnprintf_void
    (void)vsnprintf(buf, sizeof(buf), format, va);
    va_end(va);
    len = strlen(buf);
#  else
    len = vsnprintf(buf, sizeof(buf), format, va);
    va_end(va);
#  endif
#endif
    if (len <= 0 || len >= (int)sizeof(buf) || buf[sizeof(buf) - 1] != 0)
        return 0;
    return gzwrite(file, buf, (unsigned)len);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2.cpp,"[2, 0, 1, 0, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 69, 0, 0, 3, 3, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 52, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 3, 2, 3, 0, 17, 0, 0, 11, 0, 30, 9, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmzlib/gzio.cpp,617,"len = vsprintf(buf, format, va);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_3.cpp,"{
    char buf[Z_PRINTF_BUFSIZE];
    va_list va;
    int len;

    buf[sizeof(buf) - 1] = 0;
    va_start(va, format);
#ifdef NO_vsnprintf
#  ifdef HAS_vsprintf_void
    (void)vsprintf(buf, format, va);
    va_end(va);
    for (len = 0; len < sizeof(buf); len++)
        if (buf[len] == 0) break;
#  else
    len = vsprintf(buf, format, va);
    va_end(va);
#  endif
#else
#  ifdef HAS_vsnprintf_void
    (void)vsnprintf(buf, sizeof(buf), format, va);
    va_end(va);
    len = strlen(buf);
#  else
    len = vsnprintf(buf, sizeof(buf), format, va);
    va_end(va);
#  endif
#endif
    if (len <= 0 || len >= (int)sizeof(buf) || buf[sizeof(buf) - 1] != 0)
        return 0;
    return gzwrite(file, buf, (unsigned)len);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_3.cpp,"[2, 0, 1, 0, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 69, 0, 0, 3, 3, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 52, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 3, 2, 3, 0, 17, 0, 0, 11, 0, 30, 9, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_3.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmzlib/gzio.cpp,622,"(void)vsnprintf(buf, sizeof(buf), format, va);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_4.cpp,"{
    char buf[Z_PRINTF_BUFSIZE];
    va_list va;
    int len;

    buf[sizeof(buf) - 1] = 0;
    va_start(va, format);
#ifdef NO_vsnprintf
#  ifdef HAS_vsprintf_void
    (void)vsprintf(buf, format, va);
    va_end(va);
    for (len = 0; len < sizeof(buf); len++)
        if (buf[len] == 0) break;
#  else
    len = vsprintf(buf, format, va);
    va_end(va);
#  endif
#else
#  ifdef HAS_vsnprintf_void
    (void)vsnprintf(buf, sizeof(buf), format, va);
    va_end(va);
    len = strlen(buf);
#  else
    len = vsnprintf(buf, sizeof(buf), format, va);
    va_end(va);
#  endif
#endif
    if (len <= 0 || len >= (int)sizeof(buf) || buf[sizeof(buf) - 1] != 0)
        return 0;
    return gzwrite(file, buf, (unsigned)len);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_4.cpp,"[2, 0, 1, 0, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 69, 0, 0, 3, 3, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 52, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 3, 2, 3, 0, 17, 0, 0, 11, 0, 30, 9, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_4.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmzlib/gzio.cpp,626,"len = vsnprintf(buf, sizeof(buf), format, va);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_5.cpp,"{
    char buf[Z_PRINTF_BUFSIZE];
    va_list va;
    int len;

    buf[sizeof(buf) - 1] = 0;
    va_start(va, format);
#ifdef NO_vsnprintf
#  ifdef HAS_vsprintf_void
    (void)vsprintf(buf, format, va);
    va_end(va);
    for (len = 0; len < sizeof(buf); len++)
        if (buf[len] == 0) break;
#  else
    len = vsprintf(buf, format, va);
    va_end(va);
#  endif
#else
#  ifdef HAS_vsnprintf_void
    (void)vsnprintf(buf, sizeof(buf), format, va);
    va_end(va);
    len = strlen(buf);
#  else
    len = vsnprintf(buf, sizeof(buf), format, va);
    va_end(va);
#  endif
#endif
    if (len <= 0 || len >= (int)sizeof(buf) || buf[sizeof(buf) - 1] != 0)
        return 0;
    return gzwrite(file, buf, (unsigned)len);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_5.cpp,"[2, 0, 1, 0, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 69, 0, 0, 3, 3, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 52, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 3, 2, 3, 0, 17, 0, 0, 11, 0, 30, 9, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_5.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmzlib/gzio.cpp,649,"sprintf(buf, format, a1, a2, a3, a4, a5, a6, a7, a8,
            a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_6.cpp,"{
    char buf[Z_PRINTF_BUFSIZE];
    int len;

    buf[sizeof(buf) - 1] = 0;
#ifdef NO_snprintf
#  ifdef HAS_sprintf_void
    sprintf(buf, format, a1, a2, a3, a4, a5, a6, a7, a8,
            a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
    for (len = 0; len < sizeof(buf); len++)
        if (buf[len] == 0) break;
#  else
    len = sprintf(buf, format, a1, a2, a3, a4, a5, a6, a7, a8,
                a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
#  endif
#else
#  ifdef HAS_snprintf_void
    snprintf(buf, sizeof(buf), format, a1, a2, a3, a4, a5, a6, a7, a8,
             a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
    len = strlen(buf);
#  else
    len = snprintf(buf, sizeof(buf), format, a1, a2, a3, a4, a5, a6, a7, a8,
                 a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
#  endif
#endif
    if (len <= 0 || len >= sizeof(buf) || buf[sizeof(buf) - 1] != 0)
        return 0;
    return gzwrite(file, buf, len);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_6.cpp,"[2, 0, 1, 0, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 128, 0, 0, 2, 2, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 117, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 3, 2, 3, 0, 12, 0, 0, 6, 0, 100, 9, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_6.cpp,649
second/download/CMake/CMake/CMake/Utilities/cmzlib/gzio.cpp,654,"len = sprintf(buf, format, a1, a2, a3, a4, a5, a6, a7, a8,
                a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_7.cpp,"{
    char buf[Z_PRINTF_BUFSIZE];
    int len;

    buf[sizeof(buf) - 1] = 0;
#ifdef NO_snprintf
#  ifdef HAS_sprintf_void
    sprintf(buf, format, a1, a2, a3, a4, a5, a6, a7, a8,
            a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
    for (len = 0; len < sizeof(buf); len++)
        if (buf[len] == 0) break;
#  else
    len = sprintf(buf, format, a1, a2, a3, a4, a5, a6, a7, a8,
                a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
#  endif
#else
#  ifdef HAS_snprintf_void
    snprintf(buf, sizeof(buf), format, a1, a2, a3, a4, a5, a6, a7, a8,
             a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
    len = strlen(buf);
#  else
    len = snprintf(buf, sizeof(buf), format, a1, a2, a3, a4, a5, a6, a7, a8,
                 a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
#  endif
#endif
    if (len <= 0 || len >= sizeof(buf) || buf[sizeof(buf) - 1] != 0)
        return 0;
    return gzwrite(file, buf, len);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_7.cpp,"[2, 0, 1, 0, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 128, 0, 0, 2, 2, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 117, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 3, 2, 3, 0, 12, 0, 0, 6, 0, 100, 9, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_7.cpp,654
second/download/CMake/CMake/CMake/Utilities/cmzlib/gzio.cpp,659,"snprintf(buf, sizeof(buf), format, a1, a2, a3, a4, a5, a6, a7, a8,
             a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_8.cpp,"{
    char buf[Z_PRINTF_BUFSIZE];
    int len;

    buf[sizeof(buf) - 1] = 0;
#ifdef NO_snprintf
#  ifdef HAS_sprintf_void
    sprintf(buf, format, a1, a2, a3, a4, a5, a6, a7, a8,
            a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
    for (len = 0; len < sizeof(buf); len++)
        if (buf[len] == 0) break;
#  else
    len = sprintf(buf, format, a1, a2, a3, a4, a5, a6, a7, a8,
                a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
#  endif
#else
#  ifdef HAS_snprintf_void
    snprintf(buf, sizeof(buf), format, a1, a2, a3, a4, a5, a6, a7, a8,
             a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
    len = strlen(buf);
#  else
    len = snprintf(buf, sizeof(buf), format, a1, a2, a3, a4, a5, a6, a7, a8,
                 a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
#  endif
#endif
    if (len <= 0 || len >= sizeof(buf) || buf[sizeof(buf) - 1] != 0)
        return 0;
    return gzwrite(file, buf, len);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_8.cpp,"[2, 0, 1, 0, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 128, 0, 0, 2, 2, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 117, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 3, 2, 3, 0, 12, 0, 0, 6, 0, 100, 9, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_8.cpp,659
second/download/CMake/CMake/CMake/Utilities/cmzlib/gzio.cpp,663,"len = snprintf(buf, sizeof(buf), format, a1, a2, a3, a4, a5, a6, a7, a8,
                 a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_9.cpp,"{
    char buf[Z_PRINTF_BUFSIZE];
    int len;

    buf[sizeof(buf) - 1] = 0;
#ifdef NO_snprintf
#  ifdef HAS_sprintf_void
    sprintf(buf, format, a1, a2, a3, a4, a5, a6, a7, a8,
            a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
    for (len = 0; len < sizeof(buf); len++)
        if (buf[len] == 0) break;
#  else
    len = sprintf(buf, format, a1, a2, a3, a4, a5, a6, a7, a8,
                a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
#  endif
#else
#  ifdef HAS_snprintf_void
    snprintf(buf, sizeof(buf), format, a1, a2, a3, a4, a5, a6, a7, a8,
             a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
    len = strlen(buf);
#  else
    len = snprintf(buf, sizeof(buf), format, a1, a2, a3, a4, a5, a6, a7, a8,
                 a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
#  endif
#endif
    if (len <= 0 || len >= sizeof(buf) || buf[sizeof(buf) - 1] != 0)
        return 0;
    return gzwrite(file, buf, len);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_9.cpp,"[2, 0, 1, 0, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 128, 0, 0, 2, 2, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 117, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 3, 2, 3, 0, 12, 0, 0, 6, 0, 100, 9, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_9.cpp,663
second/download/CMake/CMake/CMake/Utilities/cmzlib/zutil.cpp,124,"fprintf(stderr, ""%s\n"", m);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_10.cpp,"{
    fprintf(stderr, ""%s\n"", m);
    exit(1);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_10.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_10.cpp,124
second/download/CMake/CMake/CMake/Utilities/cmzlib/inflate.cpp,284,"printf(""    static const code lenfix[%u] = {"", size);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_11.cpp,"{
    unsigned low, size;
    struct inflate_state state;

    fixedtables(&state);
    puts(""    /* inffixed.h -- table for decoding fixed codes"");
    puts(""     * Generated automatically by makefixed()."");
    puts(""     */"");
    puts("""");
    puts(""    /* WARNING: this file should *not* be used by applications."");
    puts(""       It is part of the implementation of this library and is"");
    puts(""       subject to change. Applications should only use zlib.h."");
    puts(""     */"");
    puts("""");
    size = 1U << 9;
    printf(""    static const code lenfix[%u] = {"", size);
    low = 0;
    for (;;) {
        if ((low % 7) == 0) printf(""\n        "");
        printf(""{%u,%u,%d}"", state.lencode[low].op, state.lencode[low].bits,
               state.lencode[low].val);
        if (++low == size) break;
        putchar(',');
    }
    puts(""\n    };"");
    size = 1U << 5;
    printf(""\n    static const code distfix[%u] = {"", size);
    low = 0;
    for (;;) {
        if ((low % 6) == 0) printf(""\n        "");
        printf(""{%u,%u,%d}"", state.distcode[low].op, state.distcode[low].bits,
               state.distcode[low].val);
        if (++low == size) break;
        putchar(',');
    }
    puts(""\n    };"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_11.cpp,"[4, 0, 2, 0, 2, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 70, 0, 0, 2, 3, 0, 0, 2, 29, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 6, 4, 0, 0, 20, 0, 0, 24, 0, 28, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_11.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmzlib/inflate.cpp,287,((low % 7) == 0;,second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_12.cpp,"((low % 7) == 0) printf(""\n        "")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_12.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_12.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmzlib/inflate.cpp,288,"printf(""{%u,%u,%d}"", state.lencode[low].op, state.lencode[low].bits,
               state.lencode[low].val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_13.cpp,"{
        if ((low % 7) == 0) printf(""\n        "");
        printf(""{%u,%u,%d}"", state.lencode[low].op, state.lencode[low].bits,
               state.lencode[low].val);
        if (++low == size) break;
        putchar(',');
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_13.cpp,"[2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 2, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_13.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmzlib/inflate.cpp,295,"printf(""\n    static const code distfix[%u] = {"", size);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_14.cpp,"{
    unsigned low, size;
    struct inflate_state state;

    fixedtables(&state);
    puts(""    /* inffixed.h -- table for decoding fixed codes"");
    puts(""     * Generated automatically by makefixed()."");
    puts(""     */"");
    puts("""");
    puts(""    /* WARNING: this file should *not* be used by applications."");
    puts(""       It is part of the implementation of this library and is"");
    puts(""       subject to change. Applications should only use zlib.h."");
    puts(""     */"");
    puts("""");
    size = 1U << 9;
    printf(""    static const code lenfix[%u] = {"", size);
    low = 0;
    for (;;) {
        if ((low % 7) == 0) printf(""\n        "");
        printf(""{%u,%u,%d}"", state.lencode[low].op, state.lencode[low].bits,
               state.lencode[low].val);
        if (++low == size) break;
        putchar(',');
    }
    puts(""\n    };"");
    size = 1U << 5;
    printf(""\n    static const code distfix[%u] = {"", size);
    low = 0;
    for (;;) {
        if ((low % 6) == 0) printf(""\n        "");
        printf(""{%u,%u,%d}"", state.distcode[low].op, state.distcode[low].bits,
               state.distcode[low].val);
        if (++low == size) break;
        putchar(',');
    }
    puts(""\n    };"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_14.cpp,"[4, 0, 2, 0, 2, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 70, 0, 0, 2, 3, 0, 0, 2, 29, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 6, 4, 0, 0, 20, 0, 0, 24, 0, 28, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_14.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmzlib/inflate.cpp,298,((low % 6) == 0;,second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_15.cpp,"((low % 6) == 0) printf(""\n        "")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_15.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_15.cpp,30
second/download/CMake/CMake/CMake/Utilities/cmzlib/inflate.cpp,299,"printf(""{%u,%u,%d}"", state.distcode[low].op, state.distcode[low].bits,
               state.distcode[low].val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_16.cpp,"{
        if ((low % 6) == 0) printf(""\n        "");
        printf(""{%u,%u,%d}"", state.distcode[low].op, state.distcode[low].bits,
               state.distcode[low].val);
        if (++low == size) break;
        putchar(',');
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_16.cpp,"[2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 2, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_16.cpp,31
second/download/CMake/CMake/CMake/Utilities/cmzlib/deflate.cpp,1246,"fprintf(stderr, "" start %u, match %u, length %d\n"",
                start, match, length);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_17.cpp,"{
        fprintf(stderr, "" start %u, match %u, length %d\n"",
                start, match, length);
        do {
            fprintf(stderr, ""%c%c"", s->window[match++], s->window[start++]);
        } while (--length != 0);
        z_error(""invalid match"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_17.cpp,"[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 3, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_17.cpp,1246
second/download/CMake/CMake/CMake/Utilities/cmzlib/deflate.cpp,1249,"fprintf(stderr, ""%c%c"", s->window[match++], s->window[start++]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_18.cpp,"{
            fprintf(stderr, ""%c%c"", s->window[match++], s->window[start++]);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_18.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_18.cpp,1249
second/download/CMake/CMake/CMake/Utilities/cmzlib/deflate.cpp,1254,"fprintf(stderr,""\\[%d,%d]"", start-match, length);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_19.cpp,"{
        fprintf(stderr,""\\[%d,%d]"", start-match, length);
        do { putc(s->window[start++], stderr); } while (--length != 0);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_19.cpp,"[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 2, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_19.cpp,1254
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2recover.cpp,322,"fprintf(stderr, 
                    ""\trestrictions on size of recovered file: None\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_20.cpp,"{
         case 8:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: None\n"");
            break;
         case 4:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: 512 MB\n"");
            fprintf(stderr, 
                    ""\tto circumvent, recompile with MaybeUInt64 as an\n""
                    ""\tunsigned 64-bit int.\n"");
            break;
         default:
            fprintf(stderr, 
                    ""\tsizeof(MaybeUInt64) is not 4 or 8 -- ""
                    ""configuration error.\n"");
            break;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_20.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_20.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2recover.cpp,326,"fprintf(stderr, 
                    ""\trestrictions on size of recovered file: 512 MB\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_21.cpp,"{
         case 8:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: None\n"");
            break;
         case 4:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: 512 MB\n"");
            fprintf(stderr, 
                    ""\tto circumvent, recompile with MaybeUInt64 as an\n""
                    ""\tunsigned 64-bit int.\n"");
            break;
         default:
            fprintf(stderr, 
                    ""\tsizeof(MaybeUInt64) is not 4 or 8 -- ""
                    ""configuration error.\n"");
            break;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_21.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_21.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2recover.cpp,328,"fprintf(stderr, 
                    ""\tto circumvent, recompile with MaybeUInt64 as an\n""
                    ""\tunsigned 64-bit int.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_22.cpp,"{
         case 8:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: None\n"");
            break;
         case 4:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: 512 MB\n"");
            fprintf(stderr, 
                    ""\tto circumvent, recompile with MaybeUInt64 as an\n""
                    ""\tunsigned 64-bit int.\n"");
            break;
         default:
            fprintf(stderr, 
                    ""\tsizeof(MaybeUInt64) is not 4 or 8 -- ""
                    ""configuration error.\n"");
            break;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_22.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_22.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2recover.cpp,333,"fprintf(stderr, 
                    ""\tsizeof(MaybeUInt64) is not 4 or 8 -- ""
                    ""configuration error.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_23.cpp,"{
         case 8:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: None\n"");
            break;
         case 4:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: 512 MB\n"");
            fprintf(stderr, 
                    ""\tto circumvent, recompile with MaybeUInt64 as an\n""
                    ""\tunsigned 64-bit int.\n"");
            break;
         default:
            fprintf(stderr, 
                    ""\tsizeof(MaybeUInt64) is not 4 or 8 -- ""
                    ""configuration error.\n"");
            break;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_23.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_23.cpp,33
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,32,"fprintf(stderr,""Can't load %s\n"",BZ2_LIBNAME);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_24.cpp,"){
      fprintf(stderr,""Can't load %s\n"",BZ2_LIBNAME);
      return -1;
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_24.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_24.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,47,"fprintf(stderr,""GetProcAddress failed.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_25.cpp,"{
      fprintf(stderr,""GetProcAddress failed.\n"");
      return -1;
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_25.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_25.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,77,"fprintf(stderr,""Loading of %s failed.  Giving up.\n"", BZ2_LIBNAME);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_26.cpp,"){
      fprintf(stderr,""Loading of %s failed.  Giving up.\n"", BZ2_LIBNAME);
      exit(1);
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_26.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_26.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,80,"printf(""Loading of %s succeeded.  Library version is %s.\n"",
          BZ2_LIBNAME, BZ2_bzlibVersion() );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_27.cpp,"{
   int decompress = 0;
   int level = 9;
   char *fn_r = NULL;
   char *fn_w = NULL;

#ifdef _WIN32
   if(BZ2DLLLoadLibrary()<0){
      fprintf(stderr,""Loading of %s failed.  Giving up.\n"", BZ2_LIBNAME);
      exit(1);
   }
   printf(""Loading of %s succeeded.  Library version is %s.\n"",
          BZ2_LIBNAME, BZ2_bzlibVersion() );
#endif
   while(++argv,--argc){
      if(**argv =='-' || **argv=='/'){
         char *p;

         for(p=*argv+1;*p;p++){
            if(*p=='d'){
               decompress = 1;
            }else if('1'<=*p && *p<='9'){
               level = *p - '0';
            }else{
               usage();
               exit(1);
            }
         }
      }else{
         break;
      }
   }
   if(argc>=1){
      fn_r = *argv;
      argc--;argv++;
   }else{
      fn_r = NULL;
   }
   if(argc>=1){
      fn_w = *argv;
      argc--;argv++;
   }else{
      fn_w = NULL;
   }
   {
      int len;
      char buff[0x1000];
      char mode[10];

      if(decompress){
         BZFILE *BZ2fp_r = NULL;
         FILE *fp_w = NULL;

         if(fn_w){
            if((fp_w = fopen(fn_w,""wb""))==NULL){
               printf(""can't open [%s]\n"",fn_w);
               perror(""reason:"");
               exit(1);
            }
         }else{
            fp_w = stdout;
         }
         if((fn_r == NULL && (BZ2fp_r = BZ2_bzdopen(fileno(stdin),""rb""))==NULL)
            || (fn_r != NULL && (BZ2fp_r = BZ2_bzopen(fn_r,""rb""))==NULL)){
            printf(""can't bz2openstream\n"");
            exit(1);
         }
         while((len=BZ2_bzread(BZ2fp_r,buff,0x1000))>0){
            fwrite(buff,1,len,fp_w);
         }
         BZ2_bzclose(BZ2fp_r);
         if(fp_w != stdout) fclose(fp_w);
      }else{
         BZFILE *BZ2fp_w = NULL;
         FILE *fp_r = NULL;

         if(fn_r){
            if((fp_r = fopen(fn_r,""rb""))==NULL){
               printf(""can't open [%s]\n"",fn_r);
               perror(""reason:"");
               exit(1);
            }
         }else{
            fp_r = stdin;
         }
         mode[0]='w';
         mode[1] = '0' + level;
         mode[2] = '\0';

         if((fn_w == NULL && (BZ2fp_w = BZ2_bzdopen(fileno(stdout),mode))==NULL)
            || (fn_w !=NULL && (BZ2fp_w = BZ2_bzopen(fn_w,mode))==NULL)){
            printf(""can't bz2openstream\n"");
            exit(1);
         }
         while((len=fread(buff,1,0x1000,fp_r))>0){
            BZ2_bzwrite(BZ2fp_w,buff,len);
         }
         BZ2_bzclose(BZ2fp_w);
         if(fp_r!=stdin)fclose(fp_r);
      }
   }
#ifdef _WIN32
   BZ2DLLFreeLibrary();
#endif
   return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_27.cpp,"[15, 3, 1, 0, 1, 0, 1, 0, 0, 0, 28, 0, 0, 0, 0, 163, 0, 0, 12, 12, 0, 0, 9, 46, 0, 0, 0, 0, 7, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 5, 0, 19, 15, 7, 0, 34, 0, 0, 37, 1, 52, 4, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_27.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,124,"printf(""can't open [%s]\n"",fn_w);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_28.cpp,"){
               printf(""can't open [%s]\n"",fn_w);
               perror(""reason:"");
               exit(1);
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_28.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_28.cpp,56
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,133,"printf(""can't bz2openstream\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_29.cpp,"){
            printf(""can't bz2openstream\n"");
            exit(1);
         }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_29.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_29.cpp,65
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,147,"printf(""can't open [%s]\n"",fn_r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_30.cpp,"){
               printf(""can't open [%s]\n"",fn_r);
               perror(""reason:"");
               exit(1);
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_30.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_30.cpp,79
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,160,"printf(""can't bz2openstream\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_31.cpp,"){
            printf(""can't bz2openstream\n"");
            exit(1);
         }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_31.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_31.cpp,92
second/download/CMake/CMake/CMake/Utilities/cmbzip2/unzcrash.cpp,113,"fprintf(stderr, ""nIn/nOut mismatch %d %d\n"", nIn, nOut );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_32.cpp,"{
           fprintf(stderr, ""nIn/nOut mismatch %d %d\n"", nIn, nOut );
           return 1;
         }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_32.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_32.cpp,40
second/download/CMake/CMake/CMake/Utilities/cmbzip2/unzcrash.cpp,118,"fprintf(stderr, ""mismatch at %d\n"", i );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_33.cpp,"{ 
                fprintf(stderr, ""mismatch at %d\n"", i ); 
                return 1; 
           }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_33.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_33.cpp,45
second/download/CMake/CMake/CMake/Utilities/cmbzip2/unzcrash.cpp,121,(i == nOut;,second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_34.cpp,"(i == nOut) fprintf(stderr, ""really ok!\n"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_34.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_34.cpp,48
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2.cpp,1186,"fprintf( stderr,
                  ""%s: Input file %s is a directory.\n"",
                  progName,inName);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_35.cpp,"{
         fprintf( stderr,
                  ""%s: Input file %s is a directory.\n"",
                  progName,inName);
         setExit(1);
         return;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_35.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_35.cpp,55
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2.cpp,1365,"fprintf( stderr,
                  ""%s: Input file %s is a directory.\n"",
                  progName,inName);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_36.cpp,"{
         fprintf( stderr,
                  ""%s: Input file %s is a directory.\n"",
                  progName,inName);
         setExit(1);
         return;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_36.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_36.cpp,53
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2.cpp,1545,"fprintf( stderr,
                  ""%s: Input file %s is a directory.\n"",
                  progName,inName);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_37.cpp,"{
         fprintf( stderr,
                  ""%s: Input file %s is a directory.\n"",
                  progName,inName);
         setExit(1);
         return;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_37.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_37.cpp,35
second/download/CMake/CMake/CMake/Utilities/cmcurl/curltest.cpp,23,"printf(""Error fetching: ftp://public.kitware.com/pub/cmake/cygwin/setup.hint\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_38.cpp,"{
      printf(""Error fetching: ftp://public.kitware.com/pub/cmake/cygwin/setup.hint\n"");
      retVal = 1;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_38.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_38.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmcurl/curltest.cpp,32,"printf(""Cannot create curl object\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_39.cpp,"{
    printf(""Cannot create curl object\n"");
    retVal = 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_39.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_39.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmcurl/curltest.cpp,52,"sprintf(proxy, ""%s:%s"", getenv(""HTTP_PROXY""), getenv(""HTTP_PROXY_PORT""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_40.cpp,"{
      sprintf(proxy, ""%s:%s"", getenv(""HTTP_PROXY""), getenv(""HTTP_PROXY_PORT""));
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_40.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_40.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmcurl/curltest.cpp,56,"sprintf(proxy, ""%s"", getenv(""HTTP_PROXY""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_41.cpp,"{
      sprintf(proxy, ""%s"", getenv(""HTTP_PROXY""));
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_41.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_41.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmcurl/curltest.cpp,104,"printf(""Error fetching: %s\n"", url1);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_42.cpp,"{
      printf(""Error fetching: %s\n"", url1);
      retVal = 1;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_42.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_42.cpp,66
second/download/CMake/CMake/CMake/Utilities/cmcurl/curltest.cpp,127,"printf(""Cannot create curl object\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_43.cpp,"{
    printf(""Cannot create curl object\n"");
    retVal = 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_43.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_43.cpp,89
second/download/CMake/CMake/CMake/Utilities/cmcurl/curltest.cpp,147,"printf(""error: first argument should be a url to download\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_44.cpp,"{
    printf(""error: first argument should be a url to download\n"");
    retVal = 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_44.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_44.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/http_digest.cpp,146,"path = (unsigned char *) aprintf(""%.*s"", urilen, uripath);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_45.cpp,"{
      size_t urilen = tmp - (char *)uripath;
      path = (unsigned char *) aprintf(""%.*s"", urilen, uripath);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_45.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_45.cpp,77
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/http_digest.cpp,161,"*allocuserpwd = aprintf(""%sAuthorization: Digest %s\r\n"",
                          proxy ? ""Proxy-"" : """",
                          response);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_46.cpp,"{
  CURLcode result;
  struct Curl_easy *data = conn->data;
  unsigned char *path = NULL;
  char *tmp = NULL;
  char *response;
  size_t len;
  bool have_chlg;

  /* Point to the address of the pointer that holds the string to send to the
     server, which is for a plain host or for a HTTP proxy */
  char **allocuserpwd;

  /* Point to the name and password for this */
  const char *userp;
  const char *passwdp;

  /* Point to the correct struct with this */
  struct digestdata *digest;
  struct auth *authp;

  if(proxy) {
    digest = &data->state.proxydigest;
    allocuserpwd = &conn->allocptr.proxyuserpwd;
    userp = conn->http_proxy.user;
    passwdp = conn->http_proxy.passwd;
    authp = &data->state.authproxy;
  }
  else {
    digest = &data->state.digest;
    allocuserpwd = &conn->allocptr.userpwd;
    userp = conn->user;
    passwdp = conn->passwd;
    authp = &data->state.authhost;
  }

  Curl_safefree(*allocuserpwd);

  /* not set means empty */
  if(!userp)
    userp = """";

  if(!passwdp)
    passwdp = """";

#if defined(USE_WINDOWS_SSPI)
  have_chlg = digest->input_token ? TRUE : FALSE;
#else
  have_chlg = digest->nonce ? TRUE : FALSE;
#endif

  if(!have_chlg) {
    authp->done = FALSE;
    return CURLE_OK;
  }

  /* So IE browsers < v7 cut off the URI part at the query part when they
     evaluate the MD5 and some (IIS?) servers work with them so we may need to
     do the Digest IE-style. Note that the different ways cause different MD5
     sums to get sent.

     Apache servers can be set to do the Digest IE-style automatically using
     the BrowserMatch feature:
     https://httpd.apache.org/docs/2.2/mod/mod_auth_digest.html#msie

     Further details on Digest implementation differences:
     http://www.fngtps.com/2006/09/http-authentication
  */

  if(authp->iestyle) {
    tmp = strchr((char *)uripath, '?');
    if(tmp) {
      size_t urilen = tmp - (char *)uripath;
      path = (unsigned char *) aprintf(""%.*s"", urilen, uripath);
    }
  }
  if(!tmp)
    path = (unsigned char *) strdup((char *) uripath);

  if(!path)
    return CURLE_OUT_OF_MEMORY;

  result = Curl_auth_create_digest_http_message(data, userp, passwdp, request,
                                                path, digest, &response, &len);
  free(path);
  if(result)
    return result;

  *allocuserpwd = aprintf(""%sAuthorization: Digest %s\r\n"",
                          proxy ? ""Proxy-"" : """",
                          response);
  free(response);
  if(!*allocuserpwd)
    return CURLE_OUT_OF_MEMORY;

  authp->done = TRUE;

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_46.cpp,"[11, 0, 0, 0, 0, 0, 5, 0, 0, 0, 12, 0, 0, 0, 2, 166, 0, 0, 13, 13, 0, 0, 4, 7, 0, 0, 0, 0, 10, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 3, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 13, 13, 5, 0, 9, 0, 0, 24, 0, 21, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_46.cpp,92
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/krb5.cpp,196,"stringp = aprintf(""%s@%s"", service, host);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_47.cpp,"{
    /* this really shouldn't be repeated here, but can't help it */
    if(service == srv_host) {
      result = Curl_ftpsend(conn, ""AUTH GSSAPI"");
      if(result)
        return -2;

      if(Curl_GetFTPResponse(&nread, conn, NULL))
        return -1;

      if(data->state.buffer[0] != '3')
        return -1;
    }

    stringp = aprintf(""%s@%s"", service, host);
    if(!stringp)
      return -2;

    input_buffer.value = stringp;
    input_buffer.length = strlen(stringp);
    maj = gss_import_name(&min, &input_buffer, GSS_C_NT_HOSTBASED_SERVICE,
                          &gssname);
    free(stringp);
    if(maj != GSS_S_COMPLETE) {
      gss_release_name(&min, &gssname);
      if(service == srv_host) {
        Curl_failf(data, ""Error importing service name %s@%s"", service, host);
        return AUTH_ERROR;
      }
      service = srv_host;
      continue;
    }
    /* We pass NULL as |output_name_type| to avoid a leak. */
    gss_display_name(&min, gssname, &output_buffer, NULL);
    Curl_infof(data, ""Trying against %s\n"", output_buffer.value);
    gssresp = GSS_C_NO_BUFFER;
    *context = GSS_C_NO_CONTEXT;

    do {
      /* Release the buffer at each iteration to avoid leaking: the first time
         we are releasing the memory from gss_display_name. The last item is
         taken care by a final gss_release_buffer. */
      gss_release_buffer(&min, &output_buffer);
      ret = AUTH_OK;
      maj = Curl_gss_init_sec_context(data,
                                      &min,
                                      context,
                                      gssname,
                                      &Curl_krb5_mech_oid,
                                      &chan,
                                      gssresp,
                                      &output_buffer,
                                      TRUE,
                                      NULL);

      if(gssresp) {
        free(_gssresp.value);
        gssresp = NULL;
      }

      if(GSS_ERROR(maj)) {
        Curl_infof(data, ""Error creating security context\n"");
        ret = AUTH_ERROR;
        break;
      }

      if(output_buffer.length != 0) {
        char *cmd;

        result = Curl_base64_encode(data, (char *)output_buffer.value,
                                    output_buffer.length, &p, &base64_sz);
        if(result) {
          Curl_infof(data, ""base64-encoding: %s\n"",
                     curl_easy_strerror(result));
          ret = AUTH_ERROR;
          break;
        }

        cmd = aprintf(""ADAT %s"", p);
        if(cmd)
          result = Curl_ftpsend(conn, cmd);
        else
          result = CURLE_OUT_OF_MEMORY;

        free(p);

        if(result) {
          ret = -2;
          break;
        }

        if(Curl_GetFTPResponse(&nread, conn, NULL)) {
          ret = -1;
          break;
        }

        if(data->state.buffer[0] != '2' && data->state.buffer[0] != '3') {
          Curl_infof(data, ""Server didn't accept auth data\n"");
          ret = AUTH_ERROR;
          break;
        }

        p = data->state.buffer + 4;
        p = strstr(p, ""ADAT="");
        if(p) {
          result = Curl_base64_decode(p + 5,
                                      (unsigned char **)&_gssresp.value,
                                      &_gssresp.length);
          if(result) {
            Curl_failf(data, ""base64-decoding: %s"",
                       curl_easy_strerror(result));
            ret = AUTH_CONTINUE;
            break;
          }
        }

        gssresp = &_gssresp;
      }
    } while(maj == GSS_S_CONTINUE_NEEDED);

    gss_release_name(&min, &gssname);
    gss_release_buffer(&min, &output_buffer);

    if(gssresp)
      free(_gssresp.value);

    if(ret == AUTH_OK || service == srv_host)
      return ret;

    service = srv_host;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_47.cpp,"[19, 0, 0, 1, 6, 1, 6, 0, 0, 0, 22, 0, 0, 0, 0, 198, 0, 0, 1, 1, 0, 0, 0, 25, 0, 0, 0, 0, 1, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 20, 19, 1, 0, 30, 0, 0, 41, 0, 76, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_47.cpp,52
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/krb5.cpp,208,"Curl_failf(data, ""Error importing service name %s@%s"", service, host);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_48.cpp,"{
        Curl_failf(data, ""Error importing service name %s@%s"", service, host);
        return AUTH_ERROR;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_48.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_48.cpp,64
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/krb5.cpp,260,"cmd = aprintf(""ADAT %s"", p);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_49.cpp,"{
        char *cmd;

        result = Curl_base64_encode(data, (char *)output_buffer.value,
                                    output_buffer.length, &p, &base64_sz);
        if(result) {
          Curl_infof(data, ""base64-encoding: %s\n"",
                     curl_easy_strerror(result));
          ret = AUTH_ERROR;
          break;
        }

        cmd = aprintf(""ADAT %s"", p);
        if(cmd)
          result = Curl_ftpsend(conn, cmd);
        else
          result = CURLE_OUT_OF_MEMORY;

        free(p);

        if(result) {
          ret = -2;
          break;
        }

        if(Curl_GetFTPResponse(&nread, conn, NULL)) {
          ret = -1;
          break;
        }

        if(data->state.buffer[0] != '2' && data->state.buffer[0] != '3') {
          Curl_infof(data, ""Server didn't accept auth data\n"");
          ret = AUTH_ERROR;
          break;
        }

        p = data->state.buffer + 4;
        p = strstr(p, ""ADAT="");
        if(p) {
          result = Curl_base64_decode(p + 5,
                                      (unsigned char **)&_gssresp.value,
                                      &_gssresp.length);
          if(result) {
            Curl_failf(data, ""base64-decoding: %s"",
                       curl_easy_strerror(result));
            ret = AUTH_CONTINUE;
            break;
          }
        }

        gssresp = &_gssresp;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_49.cpp,"[7, 0, 0, 0, 5, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 81, 0, 0, 1, 1, 0, 0, 0, 13, 0, 0, 0, 0, 1, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 7, 7, 1, 0, 12, 0, 0, 17, 0, 28, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_49.cpp,116
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/krb5.cpp,291,"Curl_failf(data, ""base64-decoding: %s"",
                       curl_easy_strerror(result));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_50.cpp,"{
            Curl_failf(data, ""base64-decoding: %s"",
                       curl_easy_strerror(result));
            ret = AUTH_CONTINUE;
            break;
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_50.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_50.cpp,147
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/http2.cpp,230,"snprintf(p, len, "" nghttp2/%s"", h2->version_str);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_51.cpp,"{
  nghttp2_info *h2 = nghttp2_version(0);
  return snprintf(p, len, "" nghttp2/%s"", h2->version_str);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_51.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_51.cpp,3
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/http2.cpp,874,"h = aprintf(""%s:%s"", name, value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_52.cpp,"{
    char *h;

    if(!stream->push_headers) {
      stream->push_headers_alloc = 10;
      stream->push_headers = malloc(stream->push_headers_alloc *
                                    sizeof(char *));
      stream->push_headers_used = 0;
    }
    else if(stream->push_headers_used ==
            stream->push_headers_alloc) {
      char **headp;
      stream->push_headers_alloc *= 2;
      headp = Curl_saferealloc(stream->push_headers,
                               stream->push_headers_alloc * sizeof(char *));
      if(!headp) {
        stream->push_headers = NULL;
        return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;
      }
      stream->push_headers = headp;
    }
    h = aprintf(""%s:%s"", name, value);
    if(h)
      stream->push_headers[stream->push_headers_used++] = h;
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_52.cpp,"[4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 0, 61, 0, 0, 2, 2, 0, 0, 0, 5, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 24, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 4, 4, 0, 0, 5, 0, 0, 9, 1, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_52.cpp,50
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/if2ip.cpp,169,"snprintf(scope, sizeof(scope), ""%%%u"", scopeid);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_53.cpp,"snprintf(scope, sizeof(scope), ""%%%u"", scopeid)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_53.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_53.cpp,55
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/if2ip.cpp,177,"snprintf(buf, buf_size, ""%s%s"", ip, scope);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_54.cpp,"{
            void *addr;
            char *ip;
            char scope[12] = """";
            char ipstr[64];
#ifdef ENABLE_IPV6
            if(af == AF_INET6) {
              unsigned int scopeid = 0;
              unsigned int ifscope = Curl_ipv6_scope(iface->ifa_addr);

              if(ifscope != remote_scope) {
                /* We are interested only in interface addresses whose
                   scope matches the remote address we want to
                   connect to: global for global, link-local for
                   link-local, etc... */
                if(res == IF2IP_NOT_FOUND) res = IF2IP_AF_NOT_SUPPORTED;
                continue;
              }

              addr =
                &((struct sockaddr_in6 *)(void *)iface->ifa_addr)->sin6_addr;
#ifdef HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID
              /* Include the scope of this interface as part of the address */
              scopeid = ((struct sockaddr_in6 *)(void *)iface->ifa_addr)
                            ->sin6_scope_id;

              /* If given, scope id should match. */
              if(remote_scope_id && scopeid != remote_scope_id) {
                if(res == IF2IP_NOT_FOUND)
                  res = IF2IP_AF_NOT_SUPPORTED;

                continue;
              }
#endif
              if(scopeid)
                snprintf(scope, sizeof(scope), ""%%%u"", scopeid);
            }
            else
#endif
              addr =
                  &((struct sockaddr_in *)(void *)iface->ifa_addr)->sin_addr;
            res = IF2IP_FOUND;
            ip = (char *) Curl_inet_ntop(af, addr, ipstr, sizeof(ipstr));
            snprintf(buf, buf_size, ""%s%s"", ip, scope);
            break;
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_54.cpp,"[6, 0, 0, 0, 1, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0, 77, 0, 0, 6, 6, 0, 0, 3, 6, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 36, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 2, 0, 6, 6, 1, 0, 6, 0, 0, 9, 0, 16, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_54.cpp,63
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/asyn-thread.cpp,272,"snprintf(service, sizeof(service), ""%d"", tsd->port);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_55.cpp,"{
  struct thread_sync_data *tsd = (struct thread_sync_data*)arg;
  struct thread_data *td = tsd->td;
  char service[12];
  int rc;

  snprintf(service, sizeof(service), ""%d"", tsd->port);

  rc = Curl_getaddrinfo_ex(tsd->hostname, service, &tsd->hints, &tsd->res);

  if(rc != 0) {
    tsd->sock_error = SOCKERRNO?SOCKERRNO:rc;
    if(tsd->sock_error == 0)
      tsd->sock_error = RESOLVER_ENOMEM;
  }
  else {
    Curl_addrinfo_set_port(tsd->res, tsd->port);
  }

  Curl_mutex_acquire(tsd->mtx);
  if(tsd->done) {
    /* too late, gotta clean up the mess */
    Curl_mutex_release(tsd->mtx);
    destroy_thread_sync_data(tsd);
    free(td);
  }
  else {
    tsd->done = 1;
    Curl_mutex_release(tsd->mtx);
  }

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_55.cpp,"[3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 79, 0, 0, 4, 4, 0, 0, 2, 6, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 1, 37, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 4, 4, 3, 0, 9, 0, 0, 11, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_55.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/asyn-thread.cpp,646,"snprintf(sbuf, sizeof(sbuf), ""%d"", port);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_56.cpp,"{
  struct addrinfo hints;
  struct in_addr in;
  Curl_addrinfo *res;
  int error;
  char sbuf[12];
  int pf = PF_INET;
#ifdef CURLRES_IPV6
  struct in6_addr in6;
#endif /* CURLRES_IPV6 */

  *waitp = 0; /* default to synchronous response */

#ifndef USE_RESOLVE_ON_IPS
  /* First check if this is an IPv4 address string */
  if(Curl_inet_pton(AF_INET, hostname, &in) > 0)
    /* This is a dotted IP address 123.123.123.123-style */
    return Curl_ip2addr(AF_INET, &in, hostname, port);

#ifdef CURLRES_IPV6
  /* check if this is an IPv6 address string */
  if(Curl_inet_pton(AF_INET6, hostname, &in6) > 0)
    /* This is an IPv6 address literal */
    return Curl_ip2addr(AF_INET6, &in6, hostname, port);
#endif /* CURLRES_IPV6 */
#endif /* !USE_RESOLVE_ON_IPS */

#ifdef CURLRES_IPV6
  /*
   * Check if a limited name resolve has been requested.
   */
  switch(conn->ip_version) {
  case CURL_IPRESOLVE_V4:
    pf = PF_INET;
    break;
  case CURL_IPRESOLVE_V6:
    pf = PF_INET6;
    break;
  default:
    pf = PF_UNSPEC;
    break;
  }

  if((pf != PF_INET) && !Curl_ipv6works())
    /* The stack seems to be a non-IPv6 one */
    pf = PF_INET;
#endif /* CURLRES_IPV6 */

  memset(&hints, 0, sizeof(hints));
  hints.ai_family = pf;
  hints.ai_socktype = conn->socktype;

  snprintf(sbuf, sizeof(sbuf), ""%d"", port);

  /* fire up a new resolver thread! */
  if(init_resolve_thread(conn, hostname, port, &hints)) {
    *waitp = 1; /* expect asynchronous response */
    return NULL;
  }

  /* fall-back to blocking version */
  infof(conn->data, ""init_resolve_thread() failed for %s; %s\n"",
        hostname, Curl_strerror(conn, ERRNO));

  error = Curl_getaddrinfo_ex(hostname, sbuf, &hints, &res);
  if(error) {
    infof(conn->data, ""getaddrinfo() failed for %s:%d; %s\n"",
          hostname, port, Curl_strerror(conn, SOCKERRNO));
    return NULL;
  }
  else {
    Curl_addrinfo_set_port(res, port);
  }

  return res;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_56.cpp,"[5, 0, 0, 0, 3, 0, 5, 1, 2, 1, 8, 0, 0, 0, 0, 114, 0, 0, 7, 7, 0, 0, 1, 9, 0, 0, 0, 0, 1, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 75, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 1, 0, 6, 5, 1, 0, 16, 0, 0, 14, 0, 46, 8, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_56.cpp,56
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/smtp.cpp,560,"from = aprintf(""%s"", data->set.str[STRING_MAIL_FROM]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_57.cpp,"from = aprintf(""%s"", data->set.str[STRING_MAIL_FROM])",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_57.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_57.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/smtp.cpp,562,"from = aprintf(""<%s>"", data->set.str[STRING_MAIL_FROM]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_58.cpp,"from = aprintf(""<%s>"", data->set.str[STRING_MAIL_FROM])",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_58.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_58.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/smtp.cpp,570,"auth = aprintf(""%s"", data->set.str[STRING_MAIL_AUTH]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_59.cpp,"auth = aprintf(""%s"", data->set.str[STRING_MAIL_AUTH])",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_59.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_59.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/smtp.cpp,584,"size = aprintf(""%"" CURL_FORMAT_CURL_OFF_T, data->state.infilesize);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_60.cpp,"{
    size = aprintf(""%"" CURL_FORMAT_CURL_OFF_T, data->state.infilesize);

    if(!size) {
      free(from);
      free(auth);

      return CURLE_OUT_OF_MEMORY;
    }
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_60.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_60.cpp,37
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/hostip4.cpp,146,"snprintf(sbuf, sizeof(sbuf), ""%d"", port);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_61.cpp,"{
      snprintf(sbuf, sizeof(sbuf), ""%d"", port);
      sbufptr = sbuf;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_61.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_61.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/multi.cpp,3104,"fprintf(stderr, ""* Multi status: %d handles, %d alive\n"",
          multi->num_easy, multi->num_alive);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_62.cpp,"{
  struct Curl_easy *data;
  int i;
  fprintf(stderr, ""* Multi status: %d handles, %d alive\n"",
          multi->num_easy, multi->num_alive);
  for(data=multi->easyp; data; data = data->next) {
    if(data->mstate < CURLM_STATE_COMPLETED) {
      /* only display handles that are not completed */
      fprintf(stderr, ""handle %p, state %s, %d sockets\n"",
              (void *)data,
              statename[data->mstate], data->numsocks);
      for(i=0; i < data->numsocks; i++) {
        curl_socket_t s = data->sockets[i];
        struct Curl_sh_entry *entry = sh_getentry(&multi->sockhash, s);

        fprintf(stderr, ""%d "", (int)s);
        if(!entry) {
          fprintf(stderr, ""INTERNAL CONFUSION\n"");
          continue;
        }
        fprintf(stderr, ""[%s %s] "",
                entry->action&CURL_POLL_IN?""RECVING"":"""",
                entry->action&CURL_POLL_OUT?""SENDING"":"""");
      }
      if(data->numsocks)
        fprintf(stderr, ""\n"");
    }
  }
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_62.cpp,"[3, 0, 2, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 82, 0, 0, 4, 4, 0, 0, 4, 11, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 2, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 7, 5, 2, 0, 7, 0, 0, 6, 0, 22, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_62.cpp,4
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/multi.cpp,3109,"fprintf(stderr, ""handle %p, state %s, %d sockets\n"",
              (void *)data,
              statename[data->mstate], data->numsocks);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_63.cpp,"{
      /* only display handles that are not completed */
      fprintf(stderr, ""handle %p, state %s, %d sockets\n"",
              (void *)data,
              statename[data->mstate], data->numsocks);
      for(i=0; i < data->numsocks; i++) {
        curl_socket_t s = data->sockets[i];
        struct Curl_sh_entry *entry = sh_getentry(&multi->sockhash, s);

        fprintf(stderr, ""%d "", (int)s);
        if(!entry) {
          fprintf(stderr, ""INTERNAL CONFUSION\n"");
          continue;
        }
        fprintf(stderr, ""[%s %s] "",
                entry->action&CURL_POLL_IN?""RECVING"":"""",
                entry->action&CURL_POLL_OUT?""SENDING"":"""");
      }
      if(data->numsocks)
        fprintf(stderr, ""\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_63.cpp,"[2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 55, 0, 0, 2, 2, 0, 0, 3, 10, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 5, 4, 2, 0, 6, 0, 0, 5, 0, 18, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_63.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/multi.cpp,3116,"fprintf(stderr, ""%d "", (int)s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_64.cpp,"{
        curl_socket_t s = data->sockets[i];
        struct Curl_sh_entry *entry = sh_getentry(&multi->sockhash, s);

        fprintf(stderr, ""%d "", (int)s);
        if(!entry) {
          fprintf(stderr, ""INTERNAL CONFUSION\n"");
          continue;
        }
        fprintf(stderr, ""[%s %s] "",
                entry->action&CURL_POLL_IN?""RECVING"":"""",
                entry->action&CURL_POLL_OUT?""SENDING"":"""");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_64.cpp,"[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 32, 0, 0, 2, 2, 0, 0, 2, 7, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 2, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 3, 3, 2, 0, 4, 0, 0, 3, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_64.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/multi.cpp,3118,"fprintf(stderr, ""INTERNAL CONFUSION\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_65.cpp,"{
          fprintf(stderr, ""INTERNAL CONFUSION\n"");
          continue;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_65.cpp,"[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_65.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/multi.cpp,3121,"fprintf(stderr, ""[%s %s] "",
                entry->action&CURL_POLL_IN?""RECVING"":"""",
                entry->action&CURL_POLL_OUT?""SENDING"":"""");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_66.cpp,"{
        curl_socket_t s = data->sockets[i];
        struct Curl_sh_entry *entry = sh_getentry(&multi->sockhash, s);

        fprintf(stderr, ""%d "", (int)s);
        if(!entry) {
          fprintf(stderr, ""INTERNAL CONFUSION\n"");
          continue;
        }
        fprintf(stderr, ""[%s %s] "",
                entry->action&CURL_POLL_IN?""RECVING"":"""",
                entry->action&CURL_POLL_OUT?""SENDING"":"""");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_66.cpp,"[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 32, 0, 0, 2, 2, 0, 0, 2, 7, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 2, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 3, 3, 2, 0, 4, 0, 0, 3, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_66.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/multi.cpp,3126,"fprintf(stderr, ""\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_67.cpp,"fprintf(stderr, ""\n"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_67.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_67.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/hostip.cpp,201,"char *id = aprintf(""%s:%d"", name, port);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_68.cpp,"{
  /* create and return the new allocated entry */
  char *id = aprintf(""%s:%d"", name, port);
  char *ptr = id;
  if(ptr) {
    /* lower case the name part */
    while(*ptr && (*ptr != ':')) {
      *ptr = (char)TOLOWER(*ptr);
      ptr++;
    }
  }
  return id;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_68.cpp,"[1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 17, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_68.cpp,4
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/base64.cpp,236,"snprintf(output, 5, ""%c%c=="",
               table64[obuf[0]],
               table64[obuf[1]]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_69.cpp,"{
    case 1: /* only one byte read */
      snprintf(output, 5, ""%c%c=="",
               table64[obuf[0]],
               table64[obuf[1]]);
      break;

    case 2: /* two bytes read */
      snprintf(output, 5, ""%c%c%c="",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]]);
      break;

    default:
      snprintf(output, 5, ""%c%c%c%c"",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]],
               table64[obuf[3]]);
      break;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_69.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_69.cpp,66
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/base64.cpp,242,"snprintf(output, 5, ""%c%c%c="",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_70.cpp,"{
    case 1: /* only one byte read */
      snprintf(output, 5, ""%c%c=="",
               table64[obuf[0]],
               table64[obuf[1]]);
      break;

    case 2: /* two bytes read */
      snprintf(output, 5, ""%c%c%c="",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]]);
      break;

    default:
      snprintf(output, 5, ""%c%c%c%c"",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]],
               table64[obuf[3]]);
      break;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_70.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_70.cpp,72
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/base64.cpp,249,"snprintf(output, 5, ""%c%c%c%c"",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]],
               table64[obuf[3]]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_71.cpp,"{
    case 1: /* only one byte read */
      snprintf(output, 5, ""%c%c=="",
               table64[obuf[0]],
               table64[obuf[1]]);
      break;

    case 2: /* two bytes read */
      snprintf(output, 5, ""%c%c%c="",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]]);
      break;

    default:
      snprintf(output, 5, ""%c%c%c%c"",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]],
               table64[obuf[3]]);
      break;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_71.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_71.cpp,79
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,645,"DEBUGF(fprintf(stderr, ""Error: calloc of Curl_easy failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_72.cpp,"{
    /* this is a very serious error */
    DEBUGF(fprintf(stderr, ""Error: calloc of Curl_easy failed\n""));
    return CURLE_OUT_OF_MEMORY;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_72.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_72.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,653,"DEBUGF(fprintf(stderr, ""Error: resolver_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_73.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: resolver_init failed\n""));
    free(data);
    return result;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_73.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_73.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,662,"DEBUGF(fprintf(stderr, ""Error: malloc of buffer failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_74.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: malloc of buffer failed\n""));
    result = CURLE_OUT_OF_MEMORY;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_74.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_74.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,668,"DEBUGF(fprintf(stderr, ""Error: malloc of headerbuff failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_75.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: malloc of headerbuff failed\n""));
    result = CURLE_OUT_OF_MEMORY;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_75.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_75.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,2319,"DEBUGF(fprintf(stderr, ""Error: realloc of buffer failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_76.cpp,"{
        DEBUGF(fprintf(stderr, ""Error: realloc of buffer failed\n""));
        result = CURLE_OUT_OF_MEMORY;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_76.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_76.cpp,1611
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,3061,"DEBUGF(fprintf(stderr, ""DISCONNECT without easy handle, ignoring\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_77.cpp,"{
    DEBUGF(fprintf(stderr, ""DISCONNECT without easy handle, ignoring\n""));
    return CURLE_OK;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_77.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_77.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,4543,"data->change.url = aprintf(""%s://%s%s"",
                                   protobuf, conn->host.name, path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_78.cpp,"{
        infof(data, ""Unwillingly accepted illegal URL using %d slash%s!\n"",
              s, s>1?""es"":"""");

        if(data->change.url_alloc)
          free(data->change.url);
        /* repair the URL to use two slashes */
        data->change.url = aprintf(""%s://%s%s"",
                                   protobuf, conn->host.name, path);
        if(!data->change.url)
          return CURLE_OUT_OF_MEMORY;
        data->change.url_alloc = TRUE;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_78.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 1, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 3, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_78.cpp,218
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,4783,"s->range = aprintf(""%"" CURL_FORMAT_CURL_OFF_TU ""-"", s->resume_from);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_79.cpp,"s->range = aprintf(""%"" CURL_FORMAT_CURL_OFF_TU ""-"", s->resume_from)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_79.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_79.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,5710,"snprintf(type, sizeof(type), "";type=%c"",
                 data->set.prefer_ascii?'A':
                 (data->set.ftp_list_only?'D':'I'));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_80.cpp,"snprintf(type, sizeof(type), "";type=%c"",
                 data->set.prefer_ascii?'A':
                 (data->set.ftp_list_only?'D':'I'))",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_80.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_80.cpp,49
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,5719,"url = aprintf(""%s://%s%s%s:%hu%s%s%s"", conn->given->scheme,
                    conn->bits.ipv6_ip?""["":"""", conn->host.name,
                    conn->bits.ipv6_ip?""]"":"""", conn->remote_port,
                    data->state.slash_removed?""/"":"""", data->state.path,
                    type);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_81.cpp,"{
      /* we need to create new URL with the new port number */
      char *url;
      char type[12]="""";

      if(conn->bits.type_set)
        snprintf(type, sizeof(type), "";type=%c"",
                 data->set.prefer_ascii?'A':
                 (data->set.ftp_list_only?'D':'I'));

      /*
       * This synthesized URL isn't always right--suffixes like ;type=A are
       * stripped off. It would be better to work directly from the original
       * URL and simply replace the port part of it.
       */
      url = aprintf(""%s://%s%s%s:%hu%s%s%s"", conn->given->scheme,
                    conn->bits.ipv6_ip?""["":"""", conn->host.name,
                    conn->bits.ipv6_ip?""]"":"""", conn->remote_port,
                    data->state.slash_removed?""/"":"""", data->state.path,
                    type);
      if(!url)
        return CURLE_OUT_OF_MEMORY;

      if(data->change.url_alloc) {
        Curl_safefree(data->change.url);
        data->change.url_alloc = FALSE;
      }

      data->change.url = url;
      data->change.url_alloc = TRUE;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_81.cpp,"[3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 76, 0, 0, 2, 2, 0, 0, 1, 13, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 5, 42, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 8, 8, 5, 0, 4, 0, 0, 6, 0, 15, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_81.cpp,58
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,5999,"char *hostname_to_match = aprintf(""%s%s%s"",
                                      conn->bits.ipv6_ip ? ""["" : """",
                                      conn->host.name,
                                      conn->bits.ipv6_ip ? ""]"" : """");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_82.cpp,"{
    /* check whether the URL's hostname matches */
    size_t hostname_to_match_len;
    char *hostname_to_match = aprintf(""%s%s%s"",
                                      conn->bits.ipv6_ip ? ""["" : """",
                                      conn->host.name,
                                      conn->bits.ipv6_ip ? ""]"" : """");
    if(!hostname_to_match)
      return CURLE_OUT_OF_MEMORY;
    hostname_to_match_len = strlen(hostname_to_match);
    host_match = strncasecompare(ptr, hostname_to_match,
                                 hostname_to_match_len);
    free(hostname_to_match);
    ptr += hostname_to_match_len;

    host_match = host_match && *ptr == ':';
    ptr++;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_82.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 35, 0, 0, 2, 2, 0, 0, 1, 6, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 2, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 3, 2, 0, 4, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_82.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,6418,"reurl = aprintf(""%s://%s"", conn->handler->scheme, data->change.url);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_83.cpp,"{
    /* We're guessing prefixes here and if we're told to use a proxy or if
       we're gonna follow a Location: later or... then we need the protocol
       part added so that we have a valid URL. */
    char *reurl;
    char *ch_lower;

    reurl = aprintf(""%s://%s"", conn->handler->scheme, data->change.url);

    if(!reurl) {
      result = CURLE_OUT_OF_MEMORY;
      goto out;
    }

    /* Change protocol prefix to lower-case */
    for(ch_lower = reurl; *ch_lower != ':'; ch_lower++)
      *ch_lower = (char)TOLOWER(*ch_lower);

    if(data->change.url_alloc) {
      Curl_safefree(data->change.url);
      data->change.url_alloc = FALSE;
    }

    data->change.url = reurl;
    data->change.url_alloc = TRUE; /* free this later */
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_83.cpp,"[2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 50, 0, 0, 2, 2, 0, 0, 1, 2, 0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 2, 0, 0, 3, 0, 0, 7, 0, 5, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_83.cpp,109
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,6888,"(""User-Agent: %s\r\n"";",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_84.cpp,"{
    Curl_safefree(conn->allocptr.uagent);
    conn->allocptr.uagent =
      aprintf(""User-Agent: %s\r\n"", data->set.str[STRING_USERAGENT]);
    if(!conn->allocptr.uagent)
      return CURLE_OUT_OF_MEMORY;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_84.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_84.cpp,29
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/socks_sspi.cpp,109,"snprintf(service_name, service_length +
             strlen(conn->socks_proxy.host.name)+2, ""%s/%s"",
             service, conn->socks_proxy.host.name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_85.cpp,"{
    service_name = malloc(service_length +
                          strlen(conn->socks_proxy.host.name) + 2);
    if(!service_name)
      return CURLE_OUT_OF_MEMORY;
    snprintf(service_name, service_length +
             strlen(conn->socks_proxy.host.name)+2, ""%s/%s"",
             service, conn->socks_proxy.host.name);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_85.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_85.cpp,48
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/security.cpp,122,"vsnprintf(print_buffer, sizeof(print_buffer), message, args);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_86.cpp,"{
  int ftp_code;
  ssize_t nread=0;
  va_list args;
  char print_buffer[50];

  va_start(args, message);
  vsnprintf(print_buffer, sizeof(print_buffer), message, args);
  va_end(args);

  if(Curl_ftpsend(conn, print_buffer)) {
    ftp_code = -1;
  }
  else {
    if(Curl_GetFTPResponse(&nread, conn, &ftp_code))
      ftp_code = -1;
  }

  (void)nread; /* Unused */
  return ftp_code;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_86.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 31, 0, 0, 4, 4, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 24, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 2, 2, 1, 0, 6, 0, 0, 6, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_86.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/hostip6.cpp,134,"printf(""dump_addrinfo:\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_87.cpp,"{
  printf(""dump_addrinfo:\n"");
  for(; ai; ai = ai->ai_next) {
    char  buf[INET6_ADDRSTRLEN];

    printf(""    fam %2d, CNAME %s, "",
           ai->ai_family, ai->ai_canonname ? ai->ai_canonname : ""<none>"");
    if(Curl_printable_address(ai, buf, sizeof(buf)))
      printf(""%s\n"", buf);
    else
      printf(""failed; %s\n"", Curl_strerror(conn, SOCKERRNO));
  }
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_87.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 30, 0, 0, 1, 1, 0, 0, 1, 5, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 25, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 3, 2, 2, 0, 7, 0, 0, 4, 0, 14, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_87.cpp,2
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/hostip6.cpp,138,"printf(""    fam %2d, CNAME %s, "",
           ai->ai_family, ai->ai_canonname ? ai->ai_canonname : ""<none>"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_88.cpp,"{
    char  buf[INET6_ADDRSTRLEN];

    printf(""    fam %2d, CNAME %s, "",
           ai->ai_family, ai->ai_canonname ? ai->ai_canonname : ""<none>"");
    if(Curl_printable_address(ai, buf, sizeof(buf)))
      printf(""%s\n"", buf);
    else
      printf(""failed; %s\n"", Curl_strerror(conn, SOCKERRNO));
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_88.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 24, 0, 0, 1, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 21, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 2, 2, 0, 6, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_88.cpp,6
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/hostip6.cpp,141,"printf(""%s\n"", buf);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_89.cpp,"printf(""%s\n"", buf)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_89.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_89.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/hostip6.cpp,143,"printf(""failed; %s\n"", Curl_strerror(conn, SOCKERRNO));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_90.cpp,"printf(""failed; %s\n"", Curl_strerror(conn, SOCKERRNO))",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_90.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_90.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/hostip6.cpp,213,"snprintf(sbuf, sizeof(sbuf), ""%d"", port);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_91.cpp,"{
    snprintf(sbuf, sizeof(sbuf), ""%d"", port);
    sbufptr=sbuf;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_91.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_91.cpp,54
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/ldap.cpp,766,"vfprintf(stderr, fmt, args);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_92.cpp,"{
  static int do_trace = -1;
  va_list args;

  if(do_trace == -1) {
    const char *env = getenv(""CURL_TRACE"");
    do_trace = (env && strtol(env, NULL, 10) > 0);
  }
  if(!do_trace)
    return;

  va_start(args, fmt);
  vfprintf(stderr, fmt, args);
  va_end(args);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_92.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 2, 23, 0, 0, 3, 3, 0, 0, 2, 5, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 2, 0, 0, 5, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_92.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/socks_gssapi.cpp,152,"snprintf(service.value, service.length+1, ""%s@%s"",
             serviceptr, conn->socks_proxy.host.name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_93.cpp,"{
    service.value = malloc(serviceptr_length +
                           strlen(conn->socks_proxy.host.name)+2);
    if(!service.value)
      return CURLE_OUT_OF_MEMORY;
    service.length = serviceptr_length + strlen(conn->socks_proxy.host.name)+1;
    snprintf(service.value, service.length+1, ""%s@%s"",
             serviceptr, conn->socks_proxy.host.name);

    gss_major_status = gss_import_name(&gss_minor_status, &service,
                                       GSS_C_NT_HOSTBASED_SERVICE, &server);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_93.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 4, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_93.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,103,"len = snprintf(ptr, left, "" zlib/%s"", zlibVersion());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_94.cpp,"{
  static bool initialized;
  static char version[200];
  char *ptr = version;
  size_t len;
  size_t left = sizeof(version);

  if(initialized)
    return version;

  strcpy(ptr, LIBCURL_NAME ""/"" LIBCURL_VERSION);
  len = strlen(ptr);
  left -= len;
  ptr += len;

  if(left > 1) {
    len = Curl_ssl_version(ptr + 1, left - 1);

    if(len > 0) {
      *ptr = ' ';
      left -= ++len;
      ptr += len;
    }
  }

#ifdef HAVE_LIBZ
  len = snprintf(ptr, left, "" zlib/%s"", zlibVersion());
  left -= len;
  ptr += len;
#endif
#ifdef USE_ARES
  /* this function is only present in c-ares, not in the original ares */
  len = snprintf(ptr, left, "" c-ares/%s"", ares_version(NULL));
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBIDN2
  if(idn2_check_version(IDN2_VERSION)) {
    len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));
    left -= len;
    ptr += len;
  }
#endif
#ifdef USE_LIBPSL
  len = snprintf(ptr, left, "" libpsl/%s"", psl_get_version());
  left -= len;
  ptr += len;
#endif
#ifdef USE_WIN32_IDN
  len = snprintf(ptr, left, "" WinIDN"");
  left -= len;
  ptr += len;
#endif
#if defined(HAVE_ICONV) && defined(CURL_DOES_CONVERSIONS)
#ifdef _LIBICONV_VERSION
  len = snprintf(ptr, left, "" iconv/%d.%d"",
                 _LIBICONV_VERSION >> 8, _LIBICONV_VERSION & 255);
#else
  /* version unknown */
  len = snprintf(ptr, left, "" iconv"");
#endif /* _LIBICONV_VERSION */
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBSSH2
  len = snprintf(ptr, left, "" libssh2/%s"", CURL_LIBSSH2_VERSION);
  left -= len;
  ptr += len;
#endif
#ifdef USE_NGHTTP2
  len = Curl_http2_ver(ptr, left);
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBRTMP
  {
    char suff[2];
    if(RTMP_LIB_VERSION & 0xff) {
      suff[0] = (RTMP_LIB_VERSION & 0xff) + 'a' - 1;
      suff[1] = '\0';
    }
    else
      suff[0] = '\0';

    snprintf(ptr, left, "" librtmp/%d.%d%s"",
             RTMP_LIB_VERSION >> 16, (RTMP_LIB_VERSION >> 8) & 0xff,
             suff);
/*
  If another lib version is added below this one, this code would
  also have to do:

    len = what snprintf() returned

    left -= len;
    ptr += len;
*/
  }
#endif

  initialized = true;
  return version;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_94.cpp,"[6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 2, 148, 0, 0, 6, 6, 0, 0, 2, 32, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 103, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 5, 5, 2, 0, 21, 0, 0, 38, 0, 50, 21, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_94.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,109,"len = snprintf(ptr, left, "" c-ares/%s"", ares_version(NULL));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_95.cpp,"{
  static bool initialized;
  static char version[200];
  char *ptr = version;
  size_t len;
  size_t left = sizeof(version);

  if(initialized)
    return version;

  strcpy(ptr, LIBCURL_NAME ""/"" LIBCURL_VERSION);
  len = strlen(ptr);
  left -= len;
  ptr += len;

  if(left > 1) {
    len = Curl_ssl_version(ptr + 1, left - 1);

    if(len > 0) {
      *ptr = ' ';
      left -= ++len;
      ptr += len;
    }
  }

#ifdef HAVE_LIBZ
  len = snprintf(ptr, left, "" zlib/%s"", zlibVersion());
  left -= len;
  ptr += len;
#endif
#ifdef USE_ARES
  /* this function is only present in c-ares, not in the original ares */
  len = snprintf(ptr, left, "" c-ares/%s"", ares_version(NULL));
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBIDN2
  if(idn2_check_version(IDN2_VERSION)) {
    len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));
    left -= len;
    ptr += len;
  }
#endif
#ifdef USE_LIBPSL
  len = snprintf(ptr, left, "" libpsl/%s"", psl_get_version());
  left -= len;
  ptr += len;
#endif
#ifdef USE_WIN32_IDN
  len = snprintf(ptr, left, "" WinIDN"");
  left -= len;
  ptr += len;
#endif
#if defined(HAVE_ICONV) && defined(CURL_DOES_CONVERSIONS)
#ifdef _LIBICONV_VERSION
  len = snprintf(ptr, left, "" iconv/%d.%d"",
                 _LIBICONV_VERSION >> 8, _LIBICONV_VERSION & 255);
#else
  /* version unknown */
  len = snprintf(ptr, left, "" iconv"");
#endif /* _LIBICONV_VERSION */
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBSSH2
  len = snprintf(ptr, left, "" libssh2/%s"", CURL_LIBSSH2_VERSION);
  left -= len;
  ptr += len;
#endif
#ifdef USE_NGHTTP2
  len = Curl_http2_ver(ptr, left);
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBRTMP
  {
    char suff[2];
    if(RTMP_LIB_VERSION & 0xff) {
      suff[0] = (RTMP_LIB_VERSION & 0xff) + 'a' - 1;
      suff[1] = '\0';
    }
    else
      suff[0] = '\0';

    snprintf(ptr, left, "" librtmp/%d.%d%s"",
             RTMP_LIB_VERSION >> 16, (RTMP_LIB_VERSION >> 8) & 0xff,
             suff);
/*
  If another lib version is added below this one, this code would
  also have to do:

    len = what snprintf() returned

    left -= len;
    ptr += len;
*/
  }
#endif

  initialized = true;
  return version;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_95.cpp,"[6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 2, 148, 0, 0, 6, 6, 0, 0, 2, 32, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 103, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 5, 5, 2, 0, 21, 0, 0, 38, 0, 50, 21, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_95.cpp,33
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,115,"len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_96.cpp,"{
    len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));
    left -= len;
    ptr += len;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_96.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_96.cpp,39
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,121,"len = snprintf(ptr, left, "" libpsl/%s"", psl_get_version());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_97.cpp,"{
  static bool initialized;
  static char version[200];
  char *ptr = version;
  size_t len;
  size_t left = sizeof(version);

  if(initialized)
    return version;

  strcpy(ptr, LIBCURL_NAME ""/"" LIBCURL_VERSION);
  len = strlen(ptr);
  left -= len;
  ptr += len;

  if(left > 1) {
    len = Curl_ssl_version(ptr + 1, left - 1);

    if(len > 0) {
      *ptr = ' ';
      left -= ++len;
      ptr += len;
    }
  }

#ifdef HAVE_LIBZ
  len = snprintf(ptr, left, "" zlib/%s"", zlibVersion());
  left -= len;
  ptr += len;
#endif
#ifdef USE_ARES
  /* this function is only present in c-ares, not in the original ares */
  len = snprintf(ptr, left, "" c-ares/%s"", ares_version(NULL));
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBIDN2
  if(idn2_check_version(IDN2_VERSION)) {
    len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));
    left -= len;
    ptr += len;
  }
#endif
#ifdef USE_LIBPSL
  len = snprintf(ptr, left, "" libpsl/%s"", psl_get_version());
  left -= len;
  ptr += len;
#endif
#ifdef USE_WIN32_IDN
  len = snprintf(ptr, left, "" WinIDN"");
  left -= len;
  ptr += len;
#endif
#if defined(HAVE_ICONV) && defined(CURL_DOES_CONVERSIONS)
#ifdef _LIBICONV_VERSION
  len = snprintf(ptr, left, "" iconv/%d.%d"",
                 _LIBICONV_VERSION >> 8, _LIBICONV_VERSION & 255);
#else
  /* version unknown */
  len = snprintf(ptr, left, "" iconv"");
#endif /* _LIBICONV_VERSION */
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBSSH2
  len = snprintf(ptr, left, "" libssh2/%s"", CURL_LIBSSH2_VERSION);
  left -= len;
  ptr += len;
#endif
#ifdef USE_NGHTTP2
  len = Curl_http2_ver(ptr, left);
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBRTMP
  {
    char suff[2];
    if(RTMP_LIB_VERSION & 0xff) {
      suff[0] = (RTMP_LIB_VERSION & 0xff) + 'a' - 1;
      suff[1] = '\0';
    }
    else
      suff[0] = '\0';

    snprintf(ptr, left, "" librtmp/%d.%d%s"",
             RTMP_LIB_VERSION >> 16, (RTMP_LIB_VERSION >> 8) & 0xff,
             suff);
/*
  If another lib version is added below this one, this code would
  also have to do:

    len = what snprintf() returned

    left -= len;
    ptr += len;
*/
  }
#endif

  initialized = true;
  return version;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_97.cpp,"[6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 2, 148, 0, 0, 6, 6, 0, 0, 2, 32, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 103, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 5, 5, 2, 0, 21, 0, 0, 38, 0, 50, 21, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_97.cpp,45
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,126,"len = snprintf(ptr, left, "" WinIDN"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_98.cpp,"{
  static bool initialized;
  static char version[200];
  char *ptr = version;
  size_t len;
  size_t left = sizeof(version);

  if(initialized)
    return version;

  strcpy(ptr, LIBCURL_NAME ""/"" LIBCURL_VERSION);
  len = strlen(ptr);
  left -= len;
  ptr += len;

  if(left > 1) {
    len = Curl_ssl_version(ptr + 1, left - 1);

    if(len > 0) {
      *ptr = ' ';
      left -= ++len;
      ptr += len;
    }
  }

#ifdef HAVE_LIBZ
  len = snprintf(ptr, left, "" zlib/%s"", zlibVersion());
  left -= len;
  ptr += len;
#endif
#ifdef USE_ARES
  /* this function is only present in c-ares, not in the original ares */
  len = snprintf(ptr, left, "" c-ares/%s"", ares_version(NULL));
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBIDN2
  if(idn2_check_version(IDN2_VERSION)) {
    len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));
    left -= len;
    ptr += len;
  }
#endif
#ifdef USE_LIBPSL
  len = snprintf(ptr, left, "" libpsl/%s"", psl_get_version());
  left -= len;
  ptr += len;
#endif
#ifdef USE_WIN32_IDN
  len = snprintf(ptr, left, "" WinIDN"");
  left -= len;
  ptr += len;
#endif
#if defined(HAVE_ICONV) && defined(CURL_DOES_CONVERSIONS)
#ifdef _LIBICONV_VERSION
  len = snprintf(ptr, left, "" iconv/%d.%d"",
                 _LIBICONV_VERSION >> 8, _LIBICONV_VERSION & 255);
#else
  /* version unknown */
  len = snprintf(ptr, left, "" iconv"");
#endif /* _LIBICONV_VERSION */
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBSSH2
  len = snprintf(ptr, left, "" libssh2/%s"", CURL_LIBSSH2_VERSION);
  left -= len;
  ptr += len;
#endif
#ifdef USE_NGHTTP2
  len = Curl_http2_ver(ptr, left);
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBRTMP
  {
    char suff[2];
    if(RTMP_LIB_VERSION & 0xff) {
      suff[0] = (RTMP_LIB_VERSION & 0xff) + 'a' - 1;
      suff[1] = '\0';
    }
    else
      suff[0] = '\0';

    snprintf(ptr, left, "" librtmp/%d.%d%s"",
             RTMP_LIB_VERSION >> 16, (RTMP_LIB_VERSION >> 8) & 0xff,
             suff);
/*
  If another lib version is added below this one, this code would
  also have to do:

    len = what snprintf() returned

    left -= len;
    ptr += len;
*/
  }
#endif

  initialized = true;
  return version;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_98.cpp,"[6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 2, 148, 0, 0, 6, 6, 0, 0, 2, 32, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 103, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 5, 5, 2, 0, 21, 0, 0, 38, 0, 50, 21, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_98.cpp,50
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,132,"len = snprintf(ptr, left, "" iconv/%d.%d"",
                 _LIBICONV_VERSION >> 8, _LIBICONV_VERSION & 255);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_99.cpp,"{
  static bool initialized;
  static char version[200];
  char *ptr = version;
  size_t len;
  size_t left = sizeof(version);

  if(initialized)
    return version;

  strcpy(ptr, LIBCURL_NAME ""/"" LIBCURL_VERSION);
  len = strlen(ptr);
  left -= len;
  ptr += len;

  if(left > 1) {
    len = Curl_ssl_version(ptr + 1, left - 1);

    if(len > 0) {
      *ptr = ' ';
      left -= ++len;
      ptr += len;
    }
  }

#ifdef HAVE_LIBZ
  len = snprintf(ptr, left, "" zlib/%s"", zlibVersion());
  left -= len;
  ptr += len;
#endif
#ifdef USE_ARES
  /* this function is only present in c-ares, not in the original ares */
  len = snprintf(ptr, left, "" c-ares/%s"", ares_version(NULL));
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBIDN2
  if(idn2_check_version(IDN2_VERSION)) {
    len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));
    left -= len;
    ptr += len;
  }
#endif
#ifdef USE_LIBPSL
  len = snprintf(ptr, left, "" libpsl/%s"", psl_get_version());
  left -= len;
  ptr += len;
#endif
#ifdef USE_WIN32_IDN
  len = snprintf(ptr, left, "" WinIDN"");
  left -= len;
  ptr += len;
#endif
#if defined(HAVE_ICONV) && defined(CURL_DOES_CONVERSIONS)
#ifdef _LIBICONV_VERSION
  len = snprintf(ptr, left, "" iconv/%d.%d"",
                 _LIBICONV_VERSION >> 8, _LIBICONV_VERSION & 255);
#else
  /* version unknown */
  len = snprintf(ptr, left, "" iconv"");
#endif /* _LIBICONV_VERSION */
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBSSH2
  len = snprintf(ptr, left, "" libssh2/%s"", CURL_LIBSSH2_VERSION);
  left -= len;
  ptr += len;
#endif
#ifdef USE_NGHTTP2
  len = Curl_http2_ver(ptr, left);
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBRTMP
  {
    char suff[2];
    if(RTMP_LIB_VERSION & 0xff) {
      suff[0] = (RTMP_LIB_VERSION & 0xff) + 'a' - 1;
      suff[1] = '\0';
    }
    else
      suff[0] = '\0';

    snprintf(ptr, left, "" librtmp/%d.%d%s"",
             RTMP_LIB_VERSION >> 16, (RTMP_LIB_VERSION >> 8) & 0xff,
             suff);
/*
  If another lib version is added below this one, this code would
  also have to do:

    len = what snprintf() returned

    left -= len;
    ptr += len;
*/
  }
#endif

  initialized = true;
  return version;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_99.cpp,"[6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 2, 148, 0, 0, 6, 6, 0, 0, 2, 32, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 103, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 5, 5, 2, 0, 21, 0, 0, 38, 0, 50, 21, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_99.cpp,56
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,136,"len = snprintf(ptr, left, "" iconv"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_100.cpp,"{
  static bool initialized;
  static char version[200];
  char *ptr = version;
  size_t len;
  size_t left = sizeof(version);

  if(initialized)
    return version;

  strcpy(ptr, LIBCURL_NAME ""/"" LIBCURL_VERSION);
  len = strlen(ptr);
  left -= len;
  ptr += len;

  if(left > 1) {
    len = Curl_ssl_version(ptr + 1, left - 1);

    if(len > 0) {
      *ptr = ' ';
      left -= ++len;
      ptr += len;
    }
  }

#ifdef HAVE_LIBZ
  len = snprintf(ptr, left, "" zlib/%s"", zlibVersion());
  left -= len;
  ptr += len;
#endif
#ifdef USE_ARES
  /* this function is only present in c-ares, not in the original ares */
  len = snprintf(ptr, left, "" c-ares/%s"", ares_version(NULL));
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBIDN2
  if(idn2_check_version(IDN2_VERSION)) {
    len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));
    left -= len;
    ptr += len;
  }
#endif
#ifdef USE_LIBPSL
  len = snprintf(ptr, left, "" libpsl/%s"", psl_get_version());
  left -= len;
  ptr += len;
#endif
#ifdef USE_WIN32_IDN
  len = snprintf(ptr, left, "" WinIDN"");
  left -= len;
  ptr += len;
#endif
#if defined(HAVE_ICONV) && defined(CURL_DOES_CONVERSIONS)
#ifdef _LIBICONV_VERSION
  len = snprintf(ptr, left, "" iconv/%d.%d"",
                 _LIBICONV_VERSION >> 8, _LIBICONV_VERSION & 255);
#else
  /* version unknown */
  len = snprintf(ptr, left, "" iconv"");
#endif /* _LIBICONV_VERSION */
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBSSH2
  len = snprintf(ptr, left, "" libssh2/%s"", CURL_LIBSSH2_VERSION);
  left -= len;
  ptr += len;
#endif
#ifdef USE_NGHTTP2
  len = Curl_http2_ver(ptr, left);
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBRTMP
  {
    char suff[2];
    if(RTMP_LIB_VERSION & 0xff) {
      suff[0] = (RTMP_LIB_VERSION & 0xff) + 'a' - 1;
      suff[1] = '\0';
    }
    else
      suff[0] = '\0';

    snprintf(ptr, left, "" librtmp/%d.%d%s"",
             RTMP_LIB_VERSION >> 16, (RTMP_LIB_VERSION >> 8) & 0xff,
             suff);
/*
  If another lib version is added below this one, this code would
  also have to do:

    len = what snprintf() returned

    left -= len;
    ptr += len;
*/
  }
#endif

  initialized = true;
  return version;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_100.cpp,"[6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 2, 148, 0, 0, 6, 6, 0, 0, 2, 32, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 103, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 5, 5, 2, 0, 21, 0, 0, 38, 0, 50, 21, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_100.cpp,60
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,142,"len = snprintf(ptr, left, "" libssh2/%s"", CURL_LIBSSH2_VERSION);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_101.cpp,"{
  static bool initialized;
  static char version[200];
  char *ptr = version;
  size_t len;
  size_t left = sizeof(version);

  if(initialized)
    return version;

  strcpy(ptr, LIBCURL_NAME ""/"" LIBCURL_VERSION);
  len = strlen(ptr);
  left -= len;
  ptr += len;

  if(left > 1) {
    len = Curl_ssl_version(ptr + 1, left - 1);

    if(len > 0) {
      *ptr = ' ';
      left -= ++len;
      ptr += len;
    }
  }

#ifdef HAVE_LIBZ
  len = snprintf(ptr, left, "" zlib/%s"", zlibVersion());
  left -= len;
  ptr += len;
#endif
#ifdef USE_ARES
  /* this function is only present in c-ares, not in the original ares */
  len = snprintf(ptr, left, "" c-ares/%s"", ares_version(NULL));
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBIDN2
  if(idn2_check_version(IDN2_VERSION)) {
    len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));
    left -= len;
    ptr += len;
  }
#endif
#ifdef USE_LIBPSL
  len = snprintf(ptr, left, "" libpsl/%s"", psl_get_version());
  left -= len;
  ptr += len;
#endif
#ifdef USE_WIN32_IDN
  len = snprintf(ptr, left, "" WinIDN"");
  left -= len;
  ptr += len;
#endif
#if defined(HAVE_ICONV) && defined(CURL_DOES_CONVERSIONS)
#ifdef _LIBICONV_VERSION
  len = snprintf(ptr, left, "" iconv/%d.%d"",
                 _LIBICONV_VERSION >> 8, _LIBICONV_VERSION & 255);
#else
  /* version unknown */
  len = snprintf(ptr, left, "" iconv"");
#endif /* _LIBICONV_VERSION */
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBSSH2
  len = snprintf(ptr, left, "" libssh2/%s"", CURL_LIBSSH2_VERSION);
  left -= len;
  ptr += len;
#endif
#ifdef USE_NGHTTP2
  len = Curl_http2_ver(ptr, left);
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBRTMP
  {
    char suff[2];
    if(RTMP_LIB_VERSION & 0xff) {
      suff[0] = (RTMP_LIB_VERSION & 0xff) + 'a' - 1;
      suff[1] = '\0';
    }
    else
      suff[0] = '\0';

    snprintf(ptr, left, "" librtmp/%d.%d%s"",
             RTMP_LIB_VERSION >> 16, (RTMP_LIB_VERSION >> 8) & 0xff,
             suff);
/*
  If another lib version is added below this one, this code would
  also have to do:

    len = what snprintf() returned

    left -= len;
    ptr += len;
*/
  }
#endif

  initialized = true;
  return version;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_101.cpp,"[6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 2, 148, 0, 0, 6, 6, 0, 0, 2, 32, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 103, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 5, 5, 2, 0, 21, 0, 0, 38, 0, 50, 21, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_101.cpp,66
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,161,"snprintf(ptr, left, "" librtmp/%d.%d%s"",
             RTMP_LIB_VERSION >> 16, (RTMP_LIB_VERSION >> 8) & 0xff,
             suff);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_102.cpp,"{
    char suff[2];
    if(RTMP_LIB_VERSION & 0xff) {
      suff[0] = (RTMP_LIB_VERSION & 0xff) + 'a' - 1;
      suff[1] = '\0';
    }
    else
      suff[0] = '\0';

    snprintf(ptr, left, "" librtmp/%d.%d%s"",
             RTMP_LIB_VERSION >> 16, (RTMP_LIB_VERSION >> 8) & 0xff,
             suff);
/*
  If another lib version is added below this one, this code would
  also have to do:

    len = what snprintf() returned

    left -= len;
    ptr += len;
*/
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_102.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 17, 0, 0, 1, 1, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_102.cpp,85
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,390,"snprintf(ssh_buffer, sizeof(ssh_buffer), ""libssh2/%s"", LIBSSH2_VERSION);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_103.cpp,"{
  static bool initialized;
#ifdef USE_LIBSSH2
  static char ssh_buffer[80];
#endif
#ifdef USE_SSL
  static char ssl_buffer[80];
#endif

  if(initialized)
    return &version_info;

#ifdef USE_SSL
  Curl_ssl_version(ssl_buffer, sizeof(ssl_buffer));
  version_info.ssl_version = ssl_buffer;
#endif

#ifdef HAVE_LIBZ
  version_info.libz_version = zlibVersion();
  /* libz left NULL if non-existing */
#endif
#ifdef USE_ARES
  {
    int aresnum;
    version_info.ares = ares_version(&aresnum);
    version_info.ares_num = aresnum;
  }
#endif
#ifdef USE_LIBIDN2
  /* This returns a version string if we use the given version or later,
     otherwise it returns NULL */
  version_info.libidn = idn2_check_version(IDN2_VERSION);
  if(version_info.libidn)
    version_info.features |= CURL_VERSION_IDN;
#elif defined(USE_WIN32_IDN)
  version_info.features |= CURL_VERSION_IDN;
#endif

#if defined(HAVE_ICONV) && defined(CURL_DOES_CONVERSIONS)
#ifdef _LIBICONV_VERSION
  version_info.iconv_ver_num = _LIBICONV_VERSION;
#else
  /* version unknown */
  version_info.iconv_ver_num = -1;
#endif /* _LIBICONV_VERSION */
#endif

#ifdef USE_LIBSSH2
  snprintf(ssh_buffer, sizeof(ssh_buffer), ""libssh2/%s"", LIBSSH2_VERSION);
  version_info.libssh_version = ssh_buffer;
#endif

  (void)stamp; /* avoid compiler warnings, we don't use this */

  initialized = true;
  return &version_info;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_103.cpp,"[3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 3, 81, 0, 0, 4, 4, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 35, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 2, 2, 1, 0, 10, 0, 0, 14, 0, 13, 20, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_103.cpp,49
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/telnet.cpp,833,"snprintf(option_arg, sizeof(option_arg), ""USER,%s"", conn->user);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_104.cpp,"{
    snprintf(option_arg, sizeof(option_arg), ""USER,%s"", conn->user);
    beg = curl_slist_append(tn->telnet_vars, option_arg);
    if(!beg) {
      curl_slist_free_all(tn->telnet_vars);
      tn->telnet_vars = NULL;
      return CURLE_OUT_OF_MEMORY;
    }
    tn->telnet_vars = beg;
    tn->us_preferred[CURL_TELOPT_NEW_ENVIRON] = CURL_YES;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_104.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 17, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 4, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_104.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/telnet.cpp,940,"snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_TTYPE,
               CURL_TELQUAL_IS, tn->subopt_ttype, CURL_IAC, CURL_SE);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_105.cpp,"{
    case CURL_TELOPT_TTYPE:
      len = strlen(tn->subopt_ttype) + 4 + 2;
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_TTYPE,
               CURL_TELQUAL_IS, tn->subopt_ttype, CURL_IAC, CURL_SE);
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
    case CURL_TELOPT_XDISPLOC:
      len = strlen(tn->subopt_xdisploc) + 4 + 2;
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_XDISPLOC,
               CURL_TELQUAL_IS, tn->subopt_xdisploc, CURL_IAC, CURL_SE);
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
    case CURL_TELOPT_NEW_ENVIRON:
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_NEW_ENVIRON,
               CURL_TELQUAL_IS);
      len = 4;

      for(v = tn->telnet_vars;v;v = v->next) {
        tmplen = (strlen(v->data) + 1);
        /* Add the variable only if it fits */
        if(len + tmplen < (int)sizeof(temp)-6) {
          if(sscanf(v->data, ""%127[^,],%127s"", varname, varval)) {
            snprintf((char *)&temp[len], sizeof(temp) - len,
                     ""%c%s%c%s"", CURL_NEW_ENV_VAR, varname,
                     CURL_NEW_ENV_VALUE, varval);
            len += tmplen;
          }
        }
      }
      snprintf((char *)&temp[len], sizeof(temp) - len,
               ""%c%c"", CURL_IAC, CURL_SE);
      len += 2;
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_105.cpp,"[5, 0, 1, 0, 3, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 1, 29, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 124, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 6, 5, 0, 0, 24, 0, 0, 23, 0, 82, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_105.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/telnet.cpp,952,"snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_XDISPLOC,
               CURL_TELQUAL_IS, tn->subopt_xdisploc, CURL_IAC, CURL_SE);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_106.cpp,"{
    case CURL_TELOPT_TTYPE:
      len = strlen(tn->subopt_ttype) + 4 + 2;
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_TTYPE,
               CURL_TELQUAL_IS, tn->subopt_ttype, CURL_IAC, CURL_SE);
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
    case CURL_TELOPT_XDISPLOC:
      len = strlen(tn->subopt_xdisploc) + 4 + 2;
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_XDISPLOC,
               CURL_TELQUAL_IS, tn->subopt_xdisploc, CURL_IAC, CURL_SE);
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
    case CURL_TELOPT_NEW_ENVIRON:
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_NEW_ENVIRON,
               CURL_TELQUAL_IS);
      len = 4;

      for(v = tn->telnet_vars;v;v = v->next) {
        tmplen = (strlen(v->data) + 1);
        /* Add the variable only if it fits */
        if(len + tmplen < (int)sizeof(temp)-6) {
          if(sscanf(v->data, ""%127[^,],%127s"", varname, varval)) {
            snprintf((char *)&temp[len], sizeof(temp) - len,
                     ""%c%s%c%s"", CURL_NEW_ENV_VAR, varname,
                     CURL_NEW_ENV_VALUE, varval);
            len += tmplen;
          }
        }
      }
      snprintf((char *)&temp[len], sizeof(temp) - len,
               ""%c%c"", CURL_IAC, CURL_SE);
      len += 2;
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_106.cpp,"[5, 0, 1, 0, 3, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 1, 29, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 124, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 6, 5, 0, 0, 24, 0, 0, 23, 0, 82, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_106.cpp,29
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/telnet.cpp,963,"snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_NEW_ENVIRON,
               CURL_TELQUAL_IS);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_107.cpp,"{
    case CURL_TELOPT_TTYPE:
      len = strlen(tn->subopt_ttype) + 4 + 2;
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_TTYPE,
               CURL_TELQUAL_IS, tn->subopt_ttype, CURL_IAC, CURL_SE);
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
    case CURL_TELOPT_XDISPLOC:
      len = strlen(tn->subopt_xdisploc) + 4 + 2;
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_XDISPLOC,
               CURL_TELQUAL_IS, tn->subopt_xdisploc, CURL_IAC, CURL_SE);
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
    case CURL_TELOPT_NEW_ENVIRON:
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_NEW_ENVIRON,
               CURL_TELQUAL_IS);
      len = 4;

      for(v = tn->telnet_vars;v;v = v->next) {
        tmplen = (strlen(v->data) + 1);
        /* Add the variable only if it fits */
        if(len + tmplen < (int)sizeof(temp)-6) {
          if(sscanf(v->data, ""%127[^,],%127s"", varname, varval)) {
            snprintf((char *)&temp[len], sizeof(temp) - len,
                     ""%c%s%c%s"", CURL_NEW_ENV_VAR, varname,
                     CURL_NEW_ENV_VALUE, varval);
            len += tmplen;
          }
        }
      }
      snprintf((char *)&temp[len], sizeof(temp) - len,
               ""%c%c"", CURL_IAC, CURL_SE);
      len += 2;
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_107.cpp,"[5, 0, 1, 0, 3, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 1, 29, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 124, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 6, 5, 0, 0, 24, 0, 0, 23, 0, 82, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_107.cpp,40
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/telnet.cpp,973,"snprintf((char *)&temp[len], sizeof(temp) - len,
                     ""%c%s%c%s"", CURL_NEW_ENV_VAR, varname,
                     CURL_NEW_ENV_VALUE, varval);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_108.cpp,"{
            snprintf((char *)&temp[len], sizeof(temp) - len,
                     ""%c%s%c%s"", CURL_NEW_ENV_VAR, varname,
                     CURL_NEW_ENV_VALUE, varval);
            len += tmplen;
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_108.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 11, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_108.cpp,50
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/telnet.cpp,980,"snprintf((char *)&temp[len], sizeof(temp) - len,
               ""%c%c"", CURL_IAC, CURL_SE);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_109.cpp,"{
    case CURL_TELOPT_TTYPE:
      len = strlen(tn->subopt_ttype) + 4 + 2;
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_TTYPE,
               CURL_TELQUAL_IS, tn->subopt_ttype, CURL_IAC, CURL_SE);
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
    case CURL_TELOPT_XDISPLOC:
      len = strlen(tn->subopt_xdisploc) + 4 + 2;
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_XDISPLOC,
               CURL_TELQUAL_IS, tn->subopt_xdisploc, CURL_IAC, CURL_SE);
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
    case CURL_TELOPT_NEW_ENVIRON:
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_NEW_ENVIRON,
               CURL_TELQUAL_IS);
      len = 4;

      for(v = tn->telnet_vars;v;v = v->next) {
        tmplen = (strlen(v->data) + 1);
        /* Add the variable only if it fits */
        if(len + tmplen < (int)sizeof(temp)-6) {
          if(sscanf(v->data, ""%127[^,],%127s"", varname, varval)) {
            snprintf((char *)&temp[len], sizeof(temp) - len,
                     ""%c%s%c%s"", CURL_NEW_ENV_VAR, varname,
                     CURL_NEW_ENV_VALUE, varval);
            len += tmplen;
          }
        }
      }
      snprintf((char *)&temp[len], sizeof(temp) - len,
               ""%c%c"", CURL_IAC, CURL_SE);
      len += 2;
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_109.cpp,"[5, 0, 1, 0, 3, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 1, 29, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 124, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 6, 5, 0, 0, 24, 0, 0, 23, 0, 82, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_109.cpp,57
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,218,"DEBUGF(fprintf(stderr, ""Error: Curl_ssl_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_110.cpp,"{
      DEBUGF(fprintf(stderr, ""Error: Curl_ssl_init failed\n""));
      return CURLE_FAILED_INIT;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_110.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_110.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,224,"DEBUGF(fprintf(stderr, ""Error: win32_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_111.cpp,"{
      DEBUGF(fprintf(stderr, ""Error: win32_init failed\n""));
      return CURLE_FAILED_INIT;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_111.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_111.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,230,"DEBUGF(fprintf(stderr, ""Error: Curl_amiga_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_112.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: Curl_amiga_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_112.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_112.cpp,31
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,237,"DEBUGF(fprintf(stderr, ""Warning: LONG namespace not available\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_113.cpp,"{
    DEBUGF(fprintf(stderr, ""Warning: LONG namespace not available\n""));
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_113.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_113.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,242,"DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_114.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_114.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_114.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,250,"DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_115.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_115.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_115.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,352,"DEBUGF(fprintf(stderr, ""Error: curl_global_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_116.cpp,"{
      /* something in the global init failed, return nothing */
      DEBUGF(fprintf(stderr, ""Error: curl_global_init failed\n""));
      return NULL;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_116.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_116.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,360,"DEBUGF(fprintf(stderr, ""Error: Curl_open failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_117.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: Curl_open failed\n""));
    return NULL;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_117.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_117.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/pingpong.cpp,180,"fmt_crlf = aprintf(""%s\r\n"", fmt);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_118.cpp,"{
  ssize_t bytes_written;
  size_t write_len;
  char *fmt_crlf;
  char *s;
  CURLcode result;
  struct connectdata *conn = pp->conn;
  struct Curl_easy *data = conn->data;

#ifdef HAVE_GSSAPI
  enum protection_level data_sec = conn->data_prot;
#endif

  DEBUGASSERT(pp->sendleft == 0);
  DEBUGASSERT(pp->sendsize == 0);
  DEBUGASSERT(pp->sendthis == NULL);

  fmt_crlf = aprintf(""%s\r\n"", fmt); /* append a trailing CRLF */
  if(!fmt_crlf)
    return CURLE_OUT_OF_MEMORY;

  s = vaprintf(fmt_crlf, args); /* trailing CRLF appended */
  free(fmt_crlf);
  if(!s)
    return CURLE_OUT_OF_MEMORY;

  bytes_written = 0;
  write_len = strlen(s);

  Curl_pp_init(pp);

  result = Curl_convert_to_network(data, s, write_len);
  /* Curl_convert_to_network calls failf if unsuccessful */
  if(result) {
    free(s);
    return result;
  }

#ifdef HAVE_GSSAPI
  conn->data_prot = PROT_CMD;
#endif
  result = Curl_write(conn, conn->sock[FIRSTSOCKET], s, write_len,
                     &bytes_written);
#ifdef HAVE_GSSAPI
  DEBUGASSERT(data_sec > PROT_NONE && data_sec < PROT_LAST);
  conn->data_prot = data_sec;
#endif

  if(result) {
    free(s);
    return result;
  }

  if(conn->data->set.verbose)
    Curl_debug(conn->data, CURLINFO_HEADER_OUT,
               s, (size_t)bytes_written, conn);

  if(bytes_written != (ssize_t)write_len) {
    /* the whole chunk was not sent, keep it around and adjust sizes */
    pp->sendthis = s;
    pp->sendsize = write_len;
    pp->sendleft = write_len - bytes_written;
  }
  else {
    free(s);
    pp->sendthis = NULL;
    pp->sendleft = pp->sendsize = 0;
    pp->response = Curl_tvnow();
  }

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_118.cpp,"[6, 0, 0, 0, 0, 0, 5, 0, 0, 0, 8, 0, 0, 0, 0, 149, 0, 0, 8, 8, 0, 0, 3, 5, 0, 0, 0, 0, 4, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 1, 0, 6, 6, 1, 0, 16, 0, 0, 24, 0, 27, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_118.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/pingpong.cpp,184,"s = vaprintf(fmt_crlf, args);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_119.cpp,"{
  ssize_t bytes_written;
  size_t write_len;
  char *fmt_crlf;
  char *s;
  CURLcode result;
  struct connectdata *conn = pp->conn;
  struct Curl_easy *data = conn->data;

#ifdef HAVE_GSSAPI
  enum protection_level data_sec = conn->data_prot;
#endif

  DEBUGASSERT(pp->sendleft == 0);
  DEBUGASSERT(pp->sendsize == 0);
  DEBUGASSERT(pp->sendthis == NULL);

  fmt_crlf = aprintf(""%s\r\n"", fmt); /* append a trailing CRLF */
  if(!fmt_crlf)
    return CURLE_OUT_OF_MEMORY;

  s = vaprintf(fmt_crlf, args); /* trailing CRLF appended */
  free(fmt_crlf);
  if(!s)
    return CURLE_OUT_OF_MEMORY;

  bytes_written = 0;
  write_len = strlen(s);

  Curl_pp_init(pp);

  result = Curl_convert_to_network(data, s, write_len);
  /* Curl_convert_to_network calls failf if unsuccessful */
  if(result) {
    free(s);
    return result;
  }

#ifdef HAVE_GSSAPI
  conn->data_prot = PROT_CMD;
#endif
  result = Curl_write(conn, conn->sock[FIRSTSOCKET], s, write_len,
                     &bytes_written);
#ifdef HAVE_GSSAPI
  DEBUGASSERT(data_sec > PROT_NONE && data_sec < PROT_LAST);
  conn->data_prot = data_sec;
#endif

  if(result) {
    free(s);
    return result;
  }

  if(conn->data->set.verbose)
    Curl_debug(conn->data, CURLINFO_HEADER_OUT,
               s, (size_t)bytes_written, conn);

  if(bytes_written != (ssize_t)write_len) {
    /* the whole chunk was not sent, keep it around and adjust sizes */
    pp->sendthis = s;
    pp->sendsize = write_len;
    pp->sendleft = write_len - bytes_written;
  }
  else {
    free(s);
    pp->sendthis = NULL;
    pp->sendleft = pp->sendsize = 0;
    pp->response = Curl_tvnow();
  }

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_119.cpp,"[6, 0, 0, 0, 0, 0, 5, 0, 0, 0, 8, 0, 0, 0, 0, 149, 0, 0, 8, 8, 0, 0, 3, 5, 0, 0, 0, 0, 4, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 1, 0, 6, 6, 1, 0, 16, 0, 0, 24, 0, 27, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_119.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/x509asn1.cpp,212,"snprintf(buf + n, 4, ""%02x:"", *(const unsigned char *) beg++);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_120.cpp,"snprintf(buf + n, 4, ""%02x:"", *(const unsigned char *) beg++)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_120.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_120.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/x509asn1.cpp,249,"curl_maprintf(""%s%lx"", (val < 0 || val >= 10)? ""0x"": """", val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_121.cpp,"{
  long val = 0;
  size_t n = end - beg;

  /* Convert an ASN.1 integer value into its string representation.
     Return the dynamically allocated string, or NULL if source is not an
     ASN.1 integer value. */

  if(!n)
    return (const char *) NULL;

  if(n > 4)
    return octet2str(beg, end);

  /* Represent integers <= 32-bit as a single value. */
  if(*beg & 0x80)
    val = ~val;

  do
    val = (val << 8) | *(const unsigned char *) beg++;
  while(beg < end);
  return curl_maprintf(""%s%lx"", (val < 0 || val >= 10)? ""0x"": """", val);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_121.cpp,"[3, 0, 0, 1, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 2, 27, 0, 0, 2, 2, 0, 0, 2, 9, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 1, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 4, 1, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_121.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/x509asn1.cpp,502,"curl_maprintf(""%.4s-%.2s-%.2s %.2s:%.2s:%c%c%s%.*s%s%.*s"",
                       beg, beg + 4, beg + 6,
                       beg + 8, beg + 10, sec1, sec2,
                       fracl? ""."": """", fracl, fracp,
                       sep, tzl, tzp);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_122.cpp,"{
  const char *tzp;
  const char *fracp;
  char sec1, sec2;
  size_t fracl;
  size_t tzl;
  const char *sep = """";

  /* Convert an ASN.1 Generalized time to a printable string.
     Return the dynamically allocated string, or NULL if an error occurs. */

  for(fracp = beg; fracp < end && *fracp >= '0' && *fracp <= '9'; fracp++)
    ;

  /* Get seconds digits. */
  sec1 = '0';
  switch(fracp - beg - 12) {
  case 0:
    sec2 = '0';
    break;
  case 2:
    sec1 = fracp[-2];
    /* FALLTHROUGH */
  case 1:
    sec2 = fracp[-1];
    break;
  default:
    return (const char *) NULL;
  }

  /* Scan for timezone, measure fractional seconds. */
  tzp = fracp;
  fracl = 0;
  if(fracp < end && (*fracp == '.' || *fracp == ',')) {
    fracp++;
    do
      tzp++;
    while(tzp < end && *tzp >= '0' && *tzp <= '9');
    /* Strip leading zeroes in fractional seconds. */
    for(fracl = tzp - fracp - 1; fracl && fracp[fracl - 1] == '0'; fracl--)
      ;
  }

  /* Process timezone. */
  if(tzp >= end)
    ;           /* Nothing to do. */
  else if(*tzp == 'Z') {
    tzp = "" GMT"";
    end = tzp + 4;
  }
  else {
    sep = "" "";
    tzp++;
  }

  tzl = end - tzp;
  return curl_maprintf(""%.4s-%.2s-%.2s %.2s:%.2s:%c%c%s%.*s%s%.*s"",
                       beg, beg + 4, beg + 6,
                       beg + 8, beg + 10, sec1, sec2,
                       fracl? ""."": """", fracl, fracp,
                       sep, tzl, tzp);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_122.cpp,"[3, 0, 2, 1, 2, 0, 2, 1, 3, 1, 9, 0, 0, 3, 4, 78, 0, 0, 6, 7, 0, 0, 3, 30, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 0, 8, 4, 2, 0, 1, 0, 0, 13, 1, 14, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_122.cpp,57
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/x509asn1.cpp,542,"curl_maprintf(""%u%.2s-%.2s-%.2s %.2s:%.2s:%.2s %.*s"",
                       20 - (*beg >= '5'), beg, beg + 2, beg + 4,
                       beg + 6, beg + 8, sec,
                       tzl, tzp);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_123.cpp,"{
  const char *tzp;
  size_t tzl;
  const char *sec;

  /* Convert an ASN.1 UTC time to a printable string.
     Return the dynamically allocated string, or NULL if an error occurs. */

  for(tzp = beg; tzp < end && *tzp >= '0' && *tzp <= '9'; tzp++)
    ;
  /* Get the seconds. */
  sec = beg + 10;
  switch(tzp - sec) {
  case 0:
    sec = ""00"";
  case 2:
    break;
  default:
    return (const char *) NULL;
  }

  /* Process timezone. */
  if(tzp >= end)
    return (const char *) NULL;
  if(*tzp == 'Z') {
    tzp = ""GMT"";
    end = tzp + 3;
  }
  else
    tzp++;

  tzl = end - tzp;
  return curl_maprintf(""%u%.2s-%.2s-%.2s %.2s:%.2s:%.2s %.*s"",
                       20 - (*beg >= '5'), beg, beg + 2, beg + 4,
                       beg + 6, beg + 8, sec,
                       tzl, tzp);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_123.cpp,"[2, 0, 1, 0, 1, 0, 3, 1, 2, 1, 6, 0, 0, 1, 4, 42, 0, 0, 3, 3, 0, 0, 1, 16, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 2, 1, 0, 1, 0, 0, 6, 0, 10, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_123.cpp,33
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/x509asn1.cpp,843,"q = curl_maprintf(""%lu"", len);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_124.cpp,"{
      q = curl_maprintf(""%lu"", len);
      if(q) {
        Curl_ssl_push_certinfo(data, certnum, ""RSA Public Key"", q);
        free((char *) q);
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_124.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_124.cpp,30
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/x509asn1.cpp,929,"ccp = curl_maprintf(""%lx"", version);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_125.cpp,"{
    ccp = curl_maprintf(""%lx"", version);
    if(!ccp)
      return CURLE_OUT_OF_MEMORY;
    Curl_ssl_push_certinfo(data, certnum, ""Version"", ccp);
    free((char *) ccp);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_125.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_125.cpp,52
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/cookie.cpp,1303,"aprintf(
    ""%s""     /* httponly preamble */
    ""%s%s\t"" /* domain */
    ""%s\t""   /* tailmatch */
    ""%s\t""   /* path */
    ""%s\t""   /* secure */
    ""%"" CURL_FORMAT_CURL_OFF_T ""\t""   /* expires */
    ""%s\t""   /* name */
    ""%s"",    /* value */
    co->httponly?""#HttpOnly_"":"""",
    /* Make sure all domains are prefixed with a dot if they allow
       tailmatching. This is Mozilla-style. */
    (co->tailmatch && co->domain && co->domain[0] != '.')? ""."":"""",
    co->domain?co->domain:""unknown"",
    co->tailmatch?""TRUE"":""FALSE"",
    co->path?co->path:""/"",
    co->secure?""TRUE"":""FALSE"",
    co->expires,
    co->name,
    co->value?co->value:"""");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_126.cpp,"{
  return aprintf(
    ""%s""     /* httponly preamble */
    ""%s%s\t"" /* domain */
    ""%s\t""   /* tailmatch */
    ""%s\t""   /* path */
    ""%s\t""   /* secure */
    ""%"" CURL_FORMAT_CURL_OFF_T ""\t""   /* expires */
    ""%s\t""   /* name */
    ""%s"",    /* value */
    co->httponly?""#HttpOnly_"":"""",
    /* Make sure all domains are prefixed with a dot if they allow
       tailmatching. This is Mozilla-style. */
    (co->tailmatch && co->domain && co->domain[0] != '.')? ""."":"""",
    co->domain?co->domain:""unknown"",
    co->tailmatch?""TRUE"":""FALSE"",
    co->path?co->path:""/"",
    co->secure?""TRUE"":""FALSE"",
    co->expires,
    co->name,
    co->value?co->value:"""");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_126.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 7, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 7, 7, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_126.cpp,2
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/cookie.cpp,1369,"fprintf(out, ""#\n# Fatal libcurl error\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_127.cpp,"{
      fprintf(out, ""#\n# Fatal libcurl error\n"");
      if(!use_stdout)
        fclose(out);
      return 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_127.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_127.cpp,36
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/cookie.cpp,1374,"fprintf(out, ""%s\n"", format_ptr);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_128.cpp,"{
    if(!co->domain)
      continue;
    format_ptr = get_netscape_format(co);
    if(format_ptr == NULL) {
      fprintf(out, ""#\n# Fatal libcurl error\n"");
      if(!use_stdout)
        fclose(out);
      return 1;
    }
    fprintf(out, ""%s\n"", format_ptr);
    free(format_ptr);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_128.cpp,"[3, 0, 0, 0, 0, 1, 1, 0, 0, 0, 4, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 5, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_128.cpp,41
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/mprintf.cpp,918,"len = curl_msnprintf(fptr, left, ""%ld"", width);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_129.cpp,"{
          if(width >= (long)sizeof(work))
            width = sizeof(work)-1;
          /* RECURSIVE USAGE */
          len = curl_msnprintf(fptr, left, ""%ld"", width);
          fptr += len;
          left -= len;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_129.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_129.cpp,361
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/mprintf.cpp,935,"len = curl_msnprintf(fptr, left, "".%ld"", prec);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_130.cpp,"{
          /* for each digit in the integer part, we can have one less
             precision */
          size_t maxprec = sizeof(work) - 2;
          double val = p->data.dnum;
          while(val >= 10.0) {
            val /= 10;
            maxprec--;
          }

          if(prec > (long)maxprec)
            prec = (long)maxprec-1;
          /* RECURSIVE USAGE */
          len = curl_msnprintf(fptr, left, "".%ld"", prec);
          fptr += len;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_130.cpp,"[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 25, 0, 0, 2, 2, 0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 14, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_130.cpp,378
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/mprintf.cpp,1026,"retcode = curl_mvsnprintf(buffer, maxlength, format, ap_save);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_131.cpp,"{
  int retcode;
  va_list ap_save; /* argument pointer */
  va_start(ap_save, format);
  retcode = curl_mvsnprintf(buffer, maxlength, format, ap_save);
  va_end(ap_save);
  return retcode;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_131.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_131.cpp,5
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/strerror.cpp,660,"snprintf(buf, max, ""Unknown error %d (%#x)"", err, err);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_132.cpp,"snprintf(buf, max, ""Unknown error %d (%#x)"", err, err)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_132.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_132.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/strerror.cpp,674,"snprintf(buf, max, ""Unknown error %d"", err);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_133.cpp,"snprintf(buf, max, ""Unknown error %d"", err)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_133.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_133.cpp,46
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/strerror.cpp,688,"snprintf(buf, max, ""Unknown error %d"", err);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_134.cpp,"snprintf(buf, max, ""Unknown error %d"", err)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_134.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_134.cpp,60
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/strerror.cpp,700,"snprintf(buf, max, ""Unknown error %d"", err);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_135.cpp,"snprintf(buf, max, ""Unknown error %d"", err)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_135.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_135.cpp,72
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/strerror.cpp,708,"snprintf(buf, max, ""Unknown error %d"", err);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_136.cpp,"snprintf(buf, max, ""Unknown error %d"", err)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_136.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_136.cpp,80
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/strerror.cpp,1005,"snprintf(outbuf, outmax,
             ""SEC_E_ILLEGAL_MESSAGE (0x%08X) - This error usually occurs ""
             ""when a fatal SSL/TLS alert is received (e.g. handshake failed). ""
             ""More detail may be available in the Windows System event log."",
             err);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_137.cpp,"snprintf(outbuf, outmax,
             ""SEC_E_ILLEGAL_MESSAGE (0x%08X) - This error usually occurs ""
             ""when a fatal SSL/TLS alert is received (e.g. handshake failed). ""
             ""More detail may be available in the Windows System event log."",
             err)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_137.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_137.cpp,274
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/strerror.cpp,1012,"snprintf(txtbuf, sizeof(txtbuf), ""%s (0x%08X)"", txt, err);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_138.cpp,"{
    str = txtbuf;
    snprintf(txtbuf, sizeof(txtbuf), ""%s (0x%08X)"", txt, err);
    txtbuf[sizeof(txtbuf)-1] = '\0';

#ifdef _WIN32_WCE
    {
      wchar_t wbuf[256];
      wbuf[0] = L'\0';

      if(FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM |
                       FORMAT_MESSAGE_IGNORE_INSERTS,
                       NULL, err, LANG_NEUTRAL,
                       wbuf, sizeof(wbuf)/sizeof(wchar_t), NULL)) {
        wcstombs(msgbuf, wbuf, sizeof(msgbuf)-1);
        msg_formatted = TRUE;
      }
    }
#else
    if(FormatMessageA(FORMAT_MESSAGE_FROM_SYSTEM |
                      FORMAT_MESSAGE_IGNORE_INSERTS,
                      NULL, err, LANG_NEUTRAL,
                      msgbuf, sizeof(msgbuf)-1, NULL)) {
      msg_formatted = TRUE;
    }
#endif
    if(msg_formatted) {
      msgbuf[sizeof(msgbuf)-1] = '\0';
      /* strip trailing '\r\n' or '\n' */
      p = strrchr(msgbuf, '\n');
      if(p && (p - msgbuf) >= 2)
        *p = '\0';
      p = strrchr(msgbuf, '\r');
      if(p && (p - msgbuf) >= 1)
        *p = '\0';
      msg = msgbuf;
    }
    if(msg)
      snprintf(outbuf, outmax, ""%s - %s"", str, msg);
    else
      strncpy(outbuf, str, outmax);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_138.cpp,"[6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 73, 0, 0, 1, 1, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 66, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 6, 6, 2, 0, 15, 0, 0, 15, 0, 41, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_138.cpp,281
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/strerror.cpp,1048,"snprintf(outbuf, outmax, ""%s - %s"", str, msg);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_139.cpp,"snprintf(outbuf, outmax, ""%s - %s"", str, msg)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_139.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_139.cpp,317
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/curl_ntlm_core.cpp,720,"snprintf((char *)ptr + NTLM_HMAC_MD5_LEN, NTLMv2_BLOB_LEN,
           ""%c%c%c%c""   /* NTLMv2_BLOB_SIGNATURE */
           ""%c%c%c%c"",  /* Reserved = 0 */
           NTLMv2_BLOB_SIGNATURE[0], NTLMv2_BLOB_SIGNATURE[1],
           NTLMv2_BLOB_SIGNATURE[2], NTLMv2_BLOB_SIGNATURE[3],
           0, 0, 0, 0);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_140.cpp,"{
/* NTLMv2 response structure :
------------------------------------------------------------------------------
0     HMAC MD5         16 bytes
------BLOB--------------------------------------------------------------------
16    Signature        0x01010000
20    Reserved         long (0x00000000)
24    Timestamp        LE, 64-bit signed value representing the number of
                       tenths of a microsecond since January 1, 1601.
32    Client Nonce     8 bytes
40    Unknown          4 bytes
44    Target Info      N bytes (from the type-2 message)
44+N  Unknown          4 bytes
------------------------------------------------------------------------------
*/

  unsigned int len = 0;
  unsigned char *ptr = NULL;
  unsigned char hmac_output[NTLM_HMAC_MD5_LEN];
  curl_off_t tw;

  CURLcode result = CURLE_OK;

#if CURL_SIZEOF_CURL_OFF_T < 8
#error ""this section needs 64bit support to work""
#endif

  /* Calculate the timestamp */
#ifdef DEBUGBUILD
  char *force_timestamp = getenv(""CURL_FORCETIME"");
  if(force_timestamp)
    tw = CURL_OFF_T_C(11644473600) * 10000000;
  else
#endif
    tw = ((curl_off_t)time(NULL) + CURL_OFF_T_C(11644473600)) * 10000000;

  /* Calculate the response len */
  len = NTLM_HMAC_MD5_LEN + NTLMv2_BLOB_LEN;

  /* Allocate the response */
  ptr = malloc(len);
  if(!ptr)
    return CURLE_OUT_OF_MEMORY;

  memset(ptr, 0, len);

  /* Create the BLOB structure */
  snprintf((char *)ptr + NTLM_HMAC_MD5_LEN, NTLMv2_BLOB_LEN,
           ""%c%c%c%c""   /* NTLMv2_BLOB_SIGNATURE */
           ""%c%c%c%c"",  /* Reserved = 0 */
           NTLMv2_BLOB_SIGNATURE[0], NTLMv2_BLOB_SIGNATURE[1],
           NTLMv2_BLOB_SIGNATURE[2], NTLMv2_BLOB_SIGNATURE[3],
           0, 0, 0, 0);

  Curl_write64_le(tw, ptr + 24);
  memcpy(ptr + 32, challenge_client, 8);
  memcpy(ptr + 44, ntlm->target_info, ntlm->target_info_len);

  /* Concatenate the Type 2 challenge with the BLOB and do HMAC MD5 */
  memcpy(ptr + 8, &ntlm->nonce[0], 8);
  result = Curl_hmac_md5(ntlmv2hash, NTLM_HMAC_MD5_LEN, ptr + 8,
                         NTLMv2_BLOB_LEN + 8, hmac_output);
  if(result) {
    free(ptr);
    return result;
  }

  /* Concatenate the HMAC MD5 output  with the BLOB */
  memcpy(ptr, hmac_output, NTLM_HMAC_MD5_LEN);

  /* Return the response */
  *ntresp = ptr;
  *ntresp_len = len;

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_140.cpp,"[4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 0, 93, 0, 0, 6, 6, 0, 0, 4, 28, 0, 0, 0, 0, 2, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 3, 3, 1, 0, 14, 0, 0, 15, 0, 39, 5, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_140.cpp,52
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/http_proxy.cpp,185,"host_port = aprintf(""%s:%hu"", hostname, remote_port);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_141.cpp,"{
      /* BEGIN CONNECT PHASE */
      char *host_port;
      Curl_send_buffer *req_buffer;

      infof(data, ""Establish HTTP proxy tunnel to %s:%hu\n"",
            hostname, remote_port);

        /* This only happens if we've looped here due to authentication
           reasons, and we don't really use the newly cloned URL here
           then. Just free() it. */
      free(data->req.newurl);
      data->req.newurl = NULL;

      /* initialize a dynamic send-buffer */
      req_buffer = Curl_add_buffer_init();

      if(!req_buffer)
        return CURLE_OUT_OF_MEMORY;

      host_port = aprintf(""%s:%hu"", hostname, remote_port);
      if(!host_port) {
        Curl_add_buffer_free(req_buffer);
        return CURLE_OUT_OF_MEMORY;
      }

      /* Setup the proxy-authorization header, if any */
      result = Curl_http_output_auth(conn, ""CONNECT"", host_port, TRUE);

      free(host_port);

      if(!result) {
        char *host = NULL;
        const char *proxyconn="""";
        const char *useragent="""";
        const char *http = (conn->http_proxy.proxytype == CURLPROXY_HTTP_1_0) ?
          ""1.0"" : ""1.1"";
        bool ipv6_ip = conn->bits.ipv6_ip;
        char *hostheader;

        /* the hostname may be different */
        if(hostname != conn->host.name)
          ipv6_ip = (strchr(hostname, ':') != NULL);
        hostheader= /* host:port with IPv6 support */
          aprintf(""%s%s%s:%hu"", ipv6_ip?""["":"""", hostname, ipv6_ip?""]"":"""",
                  remote_port);
        if(!hostheader) {
          Curl_add_buffer_free(req_buffer);
          return CURLE_OUT_OF_MEMORY;
        }

        if(!Curl_checkProxyheaders(conn, ""Host:"")) {
          host = aprintf(""Host: %s\r\n"", hostheader);
          if(!host) {
            free(hostheader);
            Curl_add_buffer_free(req_buffer);
            return CURLE_OUT_OF_MEMORY;
          }
        }
        if(!Curl_checkProxyheaders(conn, ""Proxy-Connection:""))
          proxyconn = ""Proxy-Connection: Keep-Alive\r\n"";

        if(!Curl_checkProxyheaders(conn, ""User-Agent:"") &&
           data->set.str[STRING_USERAGENT])
          useragent = conn->allocptr.uagent;

        result =
          Curl_add_bufferf(req_buffer,
                           ""CONNECT %s HTTP/%s\r\n""
                           ""%s""  /* Host: */
                           ""%s""  /* Proxy-Authorization */
                           ""%s""  /* User-Agent */
                           ""%s"", /* Proxy-Connection */
                           hostheader,
                           http,
                           host?host:"""",
                           conn->allocptr.proxyuserpwd?
                           conn->allocptr.proxyuserpwd:"""",
                           useragent,
                           proxyconn);

        if(host)
          free(host);
        free(hostheader);

        if(!result)
          result = Curl_add_custom_headers(conn, TRUE, req_buffer);

        if(!result)
          /* CRLF terminate the request */
          result = Curl_add_bufferf(req_buffer, ""\r\n"");

        if(!result) {
          /* Send the connect request to the proxy */
          /* BLOCKING */
          result =
            Curl_add_buffer_send(req_buffer, conn,
                                 &data->info.request_size, 0, sockindex);
        }
        req_buffer = NULL;
        if(result)
          failf(data, ""Failed sending CONNECT to proxy"");
      }

      Curl_add_buffer_free(req_buffer);
      if(result)
        return result;

      conn->tunnel_state[sockindex] = TUNNEL_CONNECT;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_141.cpp,"[15, 0, 0, 0, 0, 0, 5, 0, 0, 0, 16, 0, 0, 0, 3, 161, 0, 0, 8, 8, 0, 0, 5, 28, 0, 0, 0, 0, 7, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 5, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 2, 0, 20, 20, 5, 0, 24, 0, 0, 26, 0, 55, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_141.cpp,46
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/http_proxy.cpp,209,"(""%s%s%s:%hu"";",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_142.cpp,"{
        char *host = NULL;
        const char *proxyconn="""";
        const char *useragent="""";
        const char *http = (conn->http_proxy.proxytype == CURLPROXY_HTTP_1_0) ?
          ""1.0"" : ""1.1"";
        bool ipv6_ip = conn->bits.ipv6_ip;
        char *hostheader;

        /* the hostname may be different */
        if(hostname != conn->host.name)
          ipv6_ip = (strchr(hostname, ':') != NULL);
        hostheader= /* host:port with IPv6 support */
          aprintf(""%s%s%s:%hu"", ipv6_ip?""["":"""", hostname, ipv6_ip?""]"":"""",
                  remote_port);
        if(!hostheader) {
          Curl_add_buffer_free(req_buffer);
          return CURLE_OUT_OF_MEMORY;
        }

        if(!Curl_checkProxyheaders(conn, ""Host:"")) {
          host = aprintf(""Host: %s\r\n"", hostheader);
          if(!host) {
            free(hostheader);
            Curl_add_buffer_free(req_buffer);
            return CURLE_OUT_OF_MEMORY;
          }
        }
        if(!Curl_checkProxyheaders(conn, ""Proxy-Connection:""))
          proxyconn = ""Proxy-Connection: Keep-Alive\r\n"";

        if(!Curl_checkProxyheaders(conn, ""User-Agent:"") &&
           data->set.str[STRING_USERAGENT])
          useragent = conn->allocptr.uagent;

        result =
          Curl_add_bufferf(req_buffer,
                           ""CONNECT %s HTTP/%s\r\n""
                           ""%s""  /* Host: */
                           ""%s""  /* Proxy-Authorization */
                           ""%s""  /* User-Agent */
                           ""%s"", /* Proxy-Connection */
                           hostheader,
                           http,
                           host?host:"""",
                           conn->allocptr.proxyuserpwd?
                           conn->allocptr.proxyuserpwd:"""",
                           useragent,
                           proxyconn);

        if(host)
          free(host);
        free(hostheader);

        if(!result)
          result = Curl_add_custom_headers(conn, TRUE, req_buffer);

        if(!result)
          /* CRLF terminate the request */
          result = Curl_add_bufferf(req_buffer, ""\r\n"");

        if(!result) {
          /* Send the connect request to the proxy */
          /* BLOCKING */
          result =
            Curl_add_buffer_send(req_buffer, conn,
                                 &data->info.request_size, 0, sockindex);
        }
        req_buffer = NULL;
        if(result)
          failf(data, ""Failed sending CONNECT to proxy"");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_142.cpp,"[11, 0, 0, 0, 0, 0, 2, 0, 0, 0, 12, 0, 0, 0, 3, 114, 0, 0, 6, 6, 0, 0, 5, 25, 0, 0, 0, 0, 5, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 5, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 16, 16, 5, 0, 16, 0, 0, 16, 0, 40, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_142.cpp,70
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/http_proxy.cpp,217,"host = aprintf(""Host: %s\r\n"", hostheader);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_143.cpp,"{
          host = aprintf(""Host: %s\r\n"", hostheader);
          if(!host) {
            free(hostheader);
            Curl_add_buffer_free(req_buffer);
            return CURLE_OUT_OF_MEMORY;
          }
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_143.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_143.cpp,78
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/openldap.cpp,201,"snprintf(ptr, sizeof(hosturl)-(ptr-hosturl), ""://%s:%d"",
    conn->host.name, conn->remote_port);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_144.cpp,"{
  ldapconninfo *li = conn->proto.generic;
  struct Curl_easy *data = conn->data;
  int rc, proto = LDAP_VERSION3;
  char hosturl[1024];
  char *ptr;

  (void)done;

  strcpy(hosturl, ""ldap"");
  ptr = hosturl+4;
  if(conn->handler->flags & PROTOPT_SSL)
    *ptr++ = 's';
  snprintf(ptr, sizeof(hosturl)-(ptr-hosturl), ""://%s:%d"",
    conn->host.name, conn->remote_port);

  rc = ldap_init_fd(conn->sock[FIRSTSOCKET], li->proto, hosturl, &li->ld);
  if(rc) {
    failf(data, ""LDAP local: Cannot connect to %s, %s"",
          hosturl, ldap_err2string(rc));
    return CURLE_COULDNT_CONNECT;
  }

  ldap_set_option(li->ld, LDAP_OPT_PROTOCOL_VERSION, &proto);

#ifdef USE_SSL
  if(conn->handler->flags & PROTOPT_SSL) {
    CURLcode result;
    result = Curl_ssl_connect_nonblocking(conn, FIRSTSOCKET, &li->ssldone);
    if(result)
      return result;
  }
#endif

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_144.cpp,"[4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 0, 90, 0, 0, 6, 7, 0, 0, 3, 6, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 44, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 2, 0, 4, 4, 0, 0, 8, 0, 0, 9, 0, 23, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_144.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/vauth.cpp,59,"spn = aprintf(""%s/%s@%s"", service, host, realm);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_145.cpp,"spn = aprintf(""%s/%s@%s"", service, host, realm)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_145.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_145.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/vauth.cpp,61,"spn = aprintf(""%s/%s"", service, host);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_146.cpp,"spn = aprintf(""%s/%s"", service, host)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_146.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_146.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/vauth.cpp,63,"spn = aprintf(""%s@%s"", service, realm);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_147.cpp,"spn = aprintf(""%s@%s"", service, realm)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_147.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_147.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/vauth.cpp,85,"utf8_spn = aprintf(""%s/%s"", service, host);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_148.cpp,"{
  char *utf8_spn = NULL;
  TCHAR *tchar_spn = NULL;

  (void) realm;

  /* Note: We could use DsMakeSPN() or DsClientMakeSpnForTargetServer() rather
     than doing this ourselves but the first is only available in Windows XP
     and Windows Server 2003 and the latter is only available in Windows 2000
     but not Windows95/98/ME or Windows NT4.0 unless the Active Directory
     Client Extensions are installed. As such it is far simpler for us to
     formulate the SPN instead. */

  /* Generate our UTF8 based SPN */
  utf8_spn = aprintf(""%s/%s"", service, host);
  if(!utf8_spn) {
    return NULL;
  }

  /* Allocate our TCHAR based SPN */
  tchar_spn = Curl_convert_UTF8_to_tchar(utf8_spn);
  if(!tchar_spn) {
    free(utf8_spn);

    return NULL;
  }

  /* Release the UTF8 variant when operating with Unicode */
  Curl_unicodefree(utf8_spn);

  /* Return our newly allocated SPN */
  return tchar_spn;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_148.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 24, 0, 0, 2, 2, 0, 0, 2, 1, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 4, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_148.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/cram.cpp,121,"response = aprintf(
    ""%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"",
    userp, digest[0], digest[1], digest[2], digest[3], digest[4],
    digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
    digest[11], digest[12], digest[13], digest[14], digest[15]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_149.cpp,"{
  CURLcode result = CURLE_OK;
  size_t chlglen = 0;
  HMAC_context *ctxt;
  unsigned char digest[MD5_DIGEST_LEN];
  char *response;

  if(chlg)
    chlglen = strlen(chlg);

  /* Compute the digest using the password as the key */
  ctxt = Curl_HMAC_init(Curl_HMAC_MD5,
                        (const unsigned char *) passwdp,
                        curlx_uztoui(strlen(passwdp)));
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  /* Update the digest with the given challenge */
  if(chlglen > 0)
    Curl_HMAC_update(ctxt, (const unsigned char *) chlg,
                     curlx_uztoui(chlglen));

  /* Finalise the digest */
  Curl_HMAC_final(ctxt, digest);

  /* Generate the response */
  response = aprintf(
    ""%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"",
    userp, digest[0], digest[1], digest[2], digest[3], digest[4],
    digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
    digest[11], digest[12], digest[13], digest[14], digest[15]);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_149.cpp,"[4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 2, 86, 0, 0, 5, 5, 0, 0, 2, 20, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 17, 0, 4, 4, 0, 0, 10, 0, 0, 7, 0, 36, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_149.cpp,31
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/oauth2.cpp,69,"oauth = aprintf(""user=%s\1auth=Bearer %s\1\1"", user, bearer);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_150.cpp,"oauth = aprintf(""user=%s\1auth=Bearer %s\1\1"", user, bearer)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_150.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_150.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/oauth2.cpp,71,"oauth = aprintf(""user=%s\1host=%s\1auth=Bearer %s\1\1"", user, host,
                    bearer);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_151.cpp,"oauth = aprintf(""user=%s\1host=%s\1auth=Bearer %s\1\1"", user, host,
                    bearer)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_151.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_151.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/oauth2.cpp,74,"oauth = aprintf(""user=%s\1host=%s\1port=%ld\1auth=Bearer %s\1\1"", user,
                    host, port, bearer);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_152.cpp,"oauth = aprintf(""user=%s\1host=%s\1port=%ld\1auth=Bearer %s\1\1"", user,
                    host, port, bearer)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_152.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_152.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/schannel.cpp,1565,"size = snprintf(buffer, size, ""WinSSL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_153.cpp,"{
  size = snprintf(buffer, size, ""WinSSL"");

  return size;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_153.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_153.cpp,2
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/darwinssl.cpp,1698,"(""%s:%d:%d:%s:%hu"";",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_154.cpp,"{
      CURLcode result;
      ssl_sessionid =
        aprintf(""%s:%d:%d:%s:%hu"", ssl_cafile,
                verifypeer, SSL_CONN_CONFIG(verifyhost), hostname, port);
      ssl_sessionid_len = strlen(ssl_sessionid);

      err = SSLSetPeerID(connssl->ssl_ctx, ssl_sessionid, ssl_sessionid_len);
      if(err != noErr) {
        Curl_ssl_sessionid_unlock(conn);
        failf(data, ""SSL: SSLSetPeerID() failed: OSStatus %d"", err);
        return CURLE_SSL_CONNECT_ERROR;
      }

      result = Curl_ssl_addsessionid(conn, ssl_sessionid, ssl_sessionid_len,
                                     sockindex);
      Curl_ssl_sessionid_unlock(conn);
      if(result) {
        failf(data, ""failed to store ssl session"");
        return result;
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_154.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 40, 0, 0, 1, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 0, 9, 0, 0, 8, 0, 22, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_154.cpp,519
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/darwinssl.cpp,2652,"snprintf(buffer, size, ""SecureTransport"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_155.cpp,"{
  return snprintf(buffer, size, ""SecureTransport"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_155.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_155.cpp,2
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/vtls.cpp,686,"snprintf(output, outlen, ""%s:"", label);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_156.cpp,"{
  struct curl_certinfo *ci = &data->info.certs;
  char *output;
  struct curl_slist *nl;
  CURLcode result = CURLE_OK;
  size_t labellen = strlen(label);
  size_t outlen = labellen + 1 + valuelen + 1; /* label:value\0 */

  output = malloc(outlen);
  if(!output)
    return CURLE_OUT_OF_MEMORY;

  /* sprintf the label and colon */
  snprintf(output, outlen, ""%s:"", label);

  /* memcpy the value (it might not be zero terminated) */
  memcpy(&output[labellen+1], value, valuelen);

  /* zero terminate the output */
  output[labellen + 1 + valuelen] = 0;

  nl = Curl_slist_append_nodup(ci->certinfo[certnum], output);
  if(!nl) {
    free(output);
    curl_slist_free_all(ci->certinfo[certnum]);
    result = CURLE_OUT_OF_MEMORY;
  }

  ci->certinfo[certnum] = nl;
  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_156.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 67, 0, 0, 6, 6, 0, 0, 4, 6, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 2, 2, 0, 0, 7, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_156.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/polarssl.cpp,708,"snprintf(buffer, size, ""%s/%d.%d.%d"",
                  version >= 0x01030A00?""mbedTLS"":""PolarSSL"",
                  version>>24, (version>>16)&0xff, (version>>8)&0xff);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_157.cpp,"{
  unsigned int version = version_get_number();
  return snprintf(buffer, size, ""%s/%d.%d.%d"",
                  version >= 0x01030A00?""mbedTLS"":""PolarSSL"",
                  version>>24, (version>>16)&0xff, (version>>8)&0xff);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_157.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 1, 1, 0, 0, 1, 9, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_157.cpp,3
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/nss.cpp,413,"char *slot_name = aprintf(""PEM Token #%d"", slot_id);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_158.cpp,"{
  PK11SlotInfo *slot;
  PK11GenericObject *obj;
  CK_BBOOL cktrue = CK_TRUE;
  CK_BBOOL ckfalse = CK_FALSE;
  CK_ATTRIBUTE attrs[/* max count of attributes */ 4];
  int attr_cnt = 0;
  CURLcode result = (cacert)
    ? CURLE_SSL_CACERT_BADFILE
    : CURLE_SSL_CERTPROBLEM;

  const int slot_id = (cacert) ? 0 : 1;
  char *slot_name = aprintf(""PEM Token #%d"", slot_id);
  if(!slot_name)
    return CURLE_OUT_OF_MEMORY;

  slot = nss_find_slot_by_name(slot_name);
  free(slot_name);
  if(!slot)
    return result;

  PK11_SETATTRS(attrs, attr_cnt, CKA_CLASS, &obj_class, sizeof(obj_class));
  PK11_SETATTRS(attrs, attr_cnt, CKA_TOKEN, &cktrue, sizeof(CK_BBOOL));
  PK11_SETATTRS(attrs, attr_cnt, CKA_LABEL, (unsigned char *)filename,
                (CK_ULONG)strlen(filename) + 1);

  if(CKO_CERTIFICATE == obj_class) {
    CK_BBOOL *pval = (cacert) ? (&cktrue) : (&ckfalse);
    PK11_SETATTRS(attrs, attr_cnt, CKA_TRUST, pval, sizeof(*pval));
  }

  obj = PK11_CreateGenericObject(slot, attrs, attr_cnt, PR_FALSE);
  PK11_FreeSlot(slot);
  if(!obj)
    return result;

  if(insert_wrapped_ptr(&ssl->obj_list, obj) != CURLE_OK) {
    PK11_DestroyGenericObject(obj);
    return CURLE_OUT_OF_MEMORY;
  }

  if(!cacert && CKO_CERTIFICATE == obj_class)
    /* store reference to a client certificate */
    ssl->obj_clicert = obj;

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_158.cpp,"[6, 0, 0, 0, 0, 0, 5, 0, 0, 0, 7, 0, 0, 0, 1, 98, 0, 0, 10, 10, 0, 0, 7, 6, 0, 0, 0, 0, 4, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 3, 74, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 1, 0, 9, 9, 3, 0, 15, 0, 0, 10, 0, 36, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_158.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/nss.cpp,495,"nickname = aprintf(""PEM Token #1:%s"", n);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_159.cpp,"{
    /* we have successfully loaded a client certificate */
    CERTCertificate *cert;
    char *nickname = NULL;
    char *n = strrchr(filename, '/');
    if(n)
      n++;

    /* The following undocumented magic helps to avoid a SIGSEGV on call
     * of PK11_ReadRawAttribute() from SelectClientCert() when using an
     * immature version of libnsspem.so.  For more details, go to
     * <https://bugzilla.redhat.com/733685>. */
    nickname = aprintf(""PEM Token #1:%s"", n);
    if(nickname) {
      cert = PK11_FindCertFromNickname(nickname, NULL);
      if(cert)
        CERT_DestroyCertificate(cert);

      free(nickname);
    }
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_159.cpp,"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 24, 0, 0, 3, 3, 0, 0, 2, 2, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 3, 0, 0, 5, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_159.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/nss.cpp,1218,"config_string = aprintf(""library=%s name=%s"", library, name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_160.cpp,"{
  char *config_string;
  SECMODModule *module = *pmod;
  if(module)
    /* already loaded */
    return CURLE_OK;

  config_string = aprintf(""library=%s name=%s"", library, name);
  if(!config_string)
    return CURLE_OUT_OF_MEMORY;

  module = SECMOD_LoadUserModule(config_string, NULL, PR_FALSE);
  free(config_string);

  if(module && module->loaded) {
    /* loaded successfully */
    *pmod = module;
    return CURLE_OK;
  }

  if(module)
    SECMOD_DestroyModule(module);
  return CURLE_FAILED_INIT;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_160.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 0, 31, 0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_160.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/nss.cpp,1264,"char *certpath = aprintf(""sql:%s"", cert_dir);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_161.cpp,"{
    char *certpath = aprintf(""sql:%s"", cert_dir);
    if(!certpath)
      return CURLE_OUT_OF_MEMORY;

    infof(data, ""Initializing NSS with certpath: %s\n"", certpath);
    nss_context = NSS_InitContext(certpath, """", """", """", &initparams,
            NSS_INIT_READONLY | NSS_INIT_PK11RELOAD);
    free(certpath);

    if(nss_context != NULL)
      return CURLE_OK;

    infof(data, ""Unable to initialize NSS database\n"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_161.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 22, 0, 0, 1, 1, 0, 0, 1, 6, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 0, 5, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_161.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/nss.cpp,1587,"char *fullpath = aprintf(""%s/%s"", capath, entry->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_162.cpp,"{
        char *fullpath = aprintf(""%s/%s"", capath, entry->name);
        if(!fullpath) {
          PR_CloseDir(dir);
          return CURLE_OUT_OF_MEMORY;
        }

        if(CURLE_OK != nss_load_cert(&conn->ssl[sockindex], fullpath, PR_TRUE))
          /* This is purposefully tolerant of errors so non-PEM files can
           * be in the same directory */
          infof(data, ""failed to load '%s' from CURLOPT_CAPATH\n"", fullpath);

        free(fullpath);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_162.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 24, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 2, 0, 0, 5, 0, 0, 3, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_162.cpp,57
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/nss.cpp,2242,"snprintf(buffer, size, ""NSS/%s"", NSS_VERSION);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_163.cpp,"{
  return snprintf(buffer, size, ""NSS/%s"", NSS_VERSION);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_163.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_163.cpp,2
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/gtls.cpp,79,"fprintf(stderr, ""|<%d>| %s"", level, str);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_164.cpp,"{
    fprintf(stderr, ""|<%d>| %s"", level, str);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_164.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_164.cpp,2
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/gtls.cpp,225,"snprintf(str,
           sizeof(str),
           ""\t %s: %s, %02d %s %4d %02d:%02d:%02d GMT"",
           text,
           Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
           tm->tm_mday,
           Curl_month[tm->tm_mon],
           tm->tm_year + 1900,
           tm->tm_hour,
           tm->tm_min,
           tm->tm_sec);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_165.cpp,"{
  struct tm buffer;
  const struct tm *tm = &buffer;
  char str[96];
  CURLcode result = Curl_gmtime(stamp, &buffer);
  if(result)
    return;

  snprintf(str,
           sizeof(str),
           ""\t %s: %s, %02d %s %4d %02d:%02d:%02d GMT"",
           text,
           Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
           tm->tm_mday,
           Curl_month[tm->tm_mon],
           tm->tm_year + 1900,
           tm->tm_hour,
           tm->tm_min,
           tm->tm_sec);
  infof(data, ""%s\n"", str);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_165.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 53, 0, 0, 4, 4, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 1, 28, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 0, 2, 2, 1, 0, 4, 0, 0, 2, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_165.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/gtls.cpp,1697,"snprintf(buffer, size, ""GnuTLS/%s"", gnutls_check_version(NULL));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_166.cpp,"{
  return snprintf(buffer, size, ""GnuTLS/%s"", gnutls_check_version(NULL));
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_166.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_166.cpp,2
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/polarssl_threadlock.cpp,109,"DEBUGF(fprintf(stderr,
                     ""Error: polarsslthreadlock_lock_function failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_167.cpp,"{
      DEBUGF(fprintf(stderr,
                     ""Error: polarsslthreadlock_lock_function failed\n""));
      return 0; /* pthread_mutex_lock failed */
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_167.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_167.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/polarssl_threadlock.cpp,118,"DEBUGF(fprintf(stderr,
                     ""Error: polarsslthreadlock_lock_function failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_168.cpp,"{
      DEBUGF(fprintf(stderr,
                     ""Error: polarsslthreadlock_lock_function failed\n""));
      return 0; /* pthread_mutex_lock failed */
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_168.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_168.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/polarssl_threadlock.cpp,134,"DEBUGF(fprintf(stderr,
                     ""Error: polarsslthreadlock_unlock_function failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_169.cpp,"{
      DEBUGF(fprintf(stderr,
                     ""Error: polarsslthreadlock_unlock_function failed\n""));
      return 0; /* pthread_mutex_unlock failed */
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_169.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_169.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/polarssl_threadlock.cpp,143,"DEBUGF(fprintf(stderr,
                     ""Error: polarsslthreadlock_unlock_function failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_170.cpp,"{
      DEBUGF(fprintf(stderr,
                     ""Error: polarsslthreadlock_unlock_function failed\n""));
      return 0; /* pthread_mutex_lock failed */
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_170.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_170.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmexpat/lib/xmlparse.cpp,797,"fprintf(stderr, ""Entropy: %s --> 0x%0*lx (%lu bytes)\n"",
        label,
        (int)sizeof(entropy) * 2, entropy,
        (unsigned long)sizeof(entropy));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_171.cpp,"{
    fprintf(stderr, ""Entropy: %s --> 0x%0*lx (%lu bytes)\n"",
        label,
        (int)sizeof(entropy) * 2, entropy,
        (unsigned long)sizeof(entropy));
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_171.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_171.cpp,4
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,139,"addError(
          ""A valid JSON document must be either an array or an object value."",
          token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_172.cpp,"{
      // Set error location to start of doc, ideally should be first token found
      // in doc
      token.type_ = tokenError;
      token.start_ = beginDoc;
      token.end_ = endDoc;
      addError(
          ""A valid JSON document must be either an array or an object value."",
          token);
      return false;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_172.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_172.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,210,"addError(""Syntax error: value, object or array expected."", token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_173.cpp,"{
  case tokenObjectBegin:
    successful = readObject(token);
    currentValue().setOffsetLimit(current_ - begin_);
    break;
  case tokenArrayBegin:
    successful = readArray(token);
    currentValue().setOffsetLimit(current_ - begin_);
    break;
  case tokenNumber:
    successful = decodeNumber(token);
    break;
  case tokenString:
    successful = decodeString(token);
    break;
  case tokenTrue:
    currentValue() = true;
    currentValue().setOffsetStart(token.start_ - begin_);
    currentValue().setOffsetLimit(token.end_ - begin_);
    break;
  case tokenFalse:
    currentValue() = false;
    currentValue().setOffsetStart(token.start_ - begin_);
    currentValue().setOffsetLimit(token.end_ - begin_);
    break;
  case tokenNull:
    currentValue() = Value();
    currentValue().setOffsetStart(token.start_ - begin_);
    currentValue().setOffsetLimit(token.end_ - begin_);
    break;
  case tokenArraySeparator:
    if (features_.allowDroppedNullPlaceholders_) {
      // ""Un-read"" the current token and mark the current value as a null
      // token.
      current_--;
      currentValue() = Value();
      currentValue().setOffsetStart(current_ - begin_ - 1);
      currentValue().setOffsetLimit(current_ - begin_);
      break;
    }
  // Else, fall through...
  default:
    currentValue().setOffsetStart(token.start_ - begin_);
    currentValue().setOffsetLimit(token.end_ - begin_);
    return addError(""Syntax error: value, object or array expected."", token);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_173.cpp,"[1, 0, 0, 0, 8, 0, 1, 0, 8, 1, 2, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 35, 0, 0, 21, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_173.cpp,62
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,234,"addError(message, token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_174.cpp,"return addError(message, token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_174.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_174.cpp,3
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,431,"addErrorAndRecover(
          ""Missing ':' after object member name"", colon, tokenObjectEnd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_175.cpp,"{
      return addErrorAndRecover(
          ""Missing ':' after object member name"", colon, tokenObjectEnd);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_175.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_175.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,445,"addErrorAndRecover(
          ""Missing ',' or '}' in object declaration"", comma, tokenObjectEnd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_176.cpp,"{
      return addErrorAndRecover(
          ""Missing ',' or '}' in object declaration"", comma, tokenObjectEnd);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_176.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_176.cpp,42
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,454,"addErrorAndRecover(
      ""Missing '}' or object member name"", tokenName, tokenObjectEnd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_177.cpp,"{
  Token tokenName;
  std::string name;
  currentValue() = Value(objectValue);
  currentValue().setOffsetStart(tokenStart.start_ - begin_);
  while (readToken(tokenName)) {
    bool initialTokenOk = true;
    while (tokenName.type_ == tokenComment && initialTokenOk)
      initialTokenOk = readToken(tokenName);
    if (!initialTokenOk)
      break;
    if (tokenName.type_ == tokenObjectEnd && name.empty()) // empty object
      return true;
    name = """";
    if (tokenName.type_ == tokenString) {
      if (!decodeString(tokenName, name))
        return recoverFromError(tokenObjectEnd);
    } else if (tokenName.type_ == tokenNumber && features_.allowNumericKeys_) {
      Value numberName;
      if (!decodeNumber(tokenName, numberName))
        return recoverFromError(tokenObjectEnd);
      name = numberName.asString();
    } else {
      break;
    }

    Token colon;
    if (!readToken(colon) || colon.type_ != tokenMemberSeparator) {
      return addErrorAndRecover(
          ""Missing ':' after object member name"", colon, tokenObjectEnd);
    }
    Value& value = currentValue()[name];
    nodes_.push(&value);
    bool ok = readValue();
    nodes_.pop();
    if (!ok) // error already set
      return recoverFromError(tokenObjectEnd);

    Token comma;
    if (!readToken(comma) ||
        (comma.type_ != tokenObjectEnd && comma.type_ != tokenArraySeparator &&
         comma.type_ != tokenComment)) {
      return addErrorAndRecover(
          ""Missing ',' or '}' in object declaration"", comma, tokenObjectEnd);
    }
    bool finalizeTokenOk = true;
    while (comma.type_ == tokenComment && finalizeTokenOk)
      finalizeTokenOk = readToken(comma);
    if (comma.type_ == tokenObjectEnd)
      return true;
  }
  return addErrorAndRecover(
      ""Missing '}' or object member name"", tokenName, tokenObjectEnd);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_177.cpp,"[10, 3, 0, 0, 2, 0, 8, 0, 0, 0, 15, 0, 0, 0, 0, 127, 0, 0, 9, 9, 0, 0, 4, 8, 0, 0, 0, 0, 1, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 1, 0, 13, 10, 1, 0, 23, 0, 0, 8, 1, 24, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_177.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,486,"addErrorAndRecover(
          ""Missing ',' or ']' in array declaration"", token, tokenArrayEnd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_178.cpp,"{
      return addErrorAndRecover(
          ""Missing ',' or ']' in array declaration"", token, tokenArrayEnd);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_178.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_178.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,528,"addError(""'"" + std::string(token.start_, token.end_) +
                          ""' is not a number."",
                      token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_179.cpp,"return addError(""'"" + std::string(token.start_, token.end_) +
                          ""' is not a number."",
                      token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_179.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_179.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,571,"addError(""Unable to parse token length"", token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_180.cpp,"{
    return addError(""Unable to parse token length"", token);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_180.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_180.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,592,"addError(""'"" + std::string(token.start_, token.end_) +
                        ""' is not a number."",
                    token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_181.cpp,"return addError(""'"" + std::string(token.start_, token.end_) +
                        ""' is not a number."",
                    token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_181.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_181.cpp,29
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,619,"addError(""Empty escape sequence in string"", token, current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_182.cpp,"return addError(""Empty escape sequence in string"", token, current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_182.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_182.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,653,"addError(""Bad escape sequence in string"", token, current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_183.cpp,"{
      case '""':
        decoded += '""';
        break;
      case '/':
        decoded += '/';
        break;
      case '\\':
        decoded += '\\';
        break;
      case 'b':
        decoded += '\b';
        break;
      case 'f':
        decoded += '\f';
        break;
      case 'n':
        decoded += '\n';
        break;
      case 'r':
        decoded += '\r';
        break;
      case 't':
        decoded += '\t';
        break;
      case 'u': {
        unsigned int unicode;
        if (!decodeUnicodeCodePoint(token, current, end, unicode))
          return false;
        decoded += codePointToUTF8(unicode);
      } break;
      default:
        return addError(""Bad escape sequence in string"", token, current);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_183.cpp,"[1, 0, 0, 0, 9, 0, 2, 0, 9, 1, 3, 0, 0, 0, 0, 22, 0, 0, 1, 1, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 9, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_183.cpp,44
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,672,"addError(
          ""additional six characters expected to parse unicode surrogate pair."",
          token,
          current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_184.cpp,"return addError(
          ""additional six characters expected to parse unicode surrogate pair."",
          token,
          current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_184.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_184.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,683,"addError(""expecting another \\u token to begin the second half of ""
                      ""a unicode surrogate pair"",
                      token,
                      current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_185.cpp,"return addError(""expecting another \\u token to begin the second half of ""
                      ""a unicode surrogate pair"",
                      token,
                      current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_185.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_185.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,696,"addError(
        ""Bad unicode escape sequence in string: four digits expected."",
        token,
        current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_186.cpp,"return addError(
        ""Bad unicode escape sequence in string: four digits expected."",
        token,
        current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_186.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_186.cpp,5
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,711,"addError(
          ""Bad unicode escape sequence in string: hexadecimal digit expected."",
          token,
          current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_187.cpp,"return addError(
          ""Bad unicode escape sequence in string: hexadecimal digit expected."",
          token,
          current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_187.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_187.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,745,"addError(message, token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_188.cpp,"{
  addError(message, token);
  return recoverFromError(skipUntilToken);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_188.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_188.cpp,3
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,786,"_snprintf(buffer, sizeof(buffer), ""Line %d, Column %d"", line, column);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_189.cpp,"{
  int line, column;
  getLocationLineAndColumn(location, line, column);
  char buffer[18 + 16 + 16 + 1];
#if defined(_MSC_VER) && defined(__STDC_SECURE_LIB__)
#if defined(WINCE)
  _snprintf(buffer, sizeof(buffer), ""Line %d, Column %d"", line, column);
#else
  sprintf_s(buffer, sizeof(buffer), ""Line %d, Column %d"", line, column);
#endif
#else
  snprintf(buffer, sizeof(buffer), ""Line %d, Column %d"", line, column);
#endif
  return buffer;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_189.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 32, 0, 0, 2, 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 32, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 2, 0, 10, 0, 0, 4, 0, 24, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_189.cpp,6
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,791,"snprintf(buffer, sizeof(buffer), ""Line %d, Column %d"", line, column);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_190.cpp,"{
  int line, column;
  getLocationLineAndColumn(location, line, column);
  char buffer[18 + 16 + 16 + 1];
#if defined(_MSC_VER) && defined(__STDC_SECURE_LIB__)
#if defined(WINCE)
  _snprintf(buffer, sizeof(buffer), ""Line %d, Column %d"", line, column);
#else
  sprintf_s(buffer, sizeof(buffer), ""Line %d, Column %d"", line, column);
#endif
#else
  snprintf(buffer, sizeof(buffer), ""Line %d, Column %d"", line, column);
#endif
  return buffer;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_190.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 32, 0, 0, 2, 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 32, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 2, 0, 10, 0, 0, 4, 0, 24, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_190.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,875,"fprintf(stderr,
            ""Error from reader: %s"",
            reader.getFormattedErrorMessages().c_str());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_191.cpp,"{
    fprintf(stderr,
            ""Error from reader: %s"",
            reader.getFormattedErrorMessages().c_str());

    JSON_FAIL_MESSAGE(""reader error"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_191.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_191.cpp,4
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp,118,"len = _snprintf(buffer, sizeof(buffer), ""%.16g"", value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_192.cpp,"{
  // Allocate a buffer that is more than large enough to store the 16 digits of
  // precision requested below.
  char buffer[32];
  int len = -1;

// Print into the buffer. We need not request the alternative representation
// that always has a decimal point because JSON doesn't distingish the
// concepts of reals and integers.
#if defined(_MSC_VER) && defined(__STDC_SECURE_LIB__) // Use secure version with
                                                      // visual studio 2005 to
                                                      // avoid warning.
#if defined(WINCE)
  len = _snprintf(buffer, sizeof(buffer), ""%.16g"", value);
#else
  len = sprintf_s(buffer, sizeof(buffer), ""%.16g"", value);
#endif
#else
  if (isfinite(value)) {
    len = snprintf(buffer, sizeof(buffer), ""%.16g"", value);
  } else {
    // IEEE standard states that NaN values will not compare to themselves
    if (value != value) {
      len = snprintf(buffer, sizeof(buffer), ""null"");
    } else if (value < 0) {
      len = snprintf(buffer, sizeof(buffer), ""-1e+9999"");
    } else {
      len = snprintf(buffer, sizeof(buffer), ""1e+9999"");
    }
    // For those, we do not need to call fixNumLoc, but it is fast.
  }
#endif
  assert(len >= 0);
  fixNumericLocale(buffer, buffer + len);
  return buffer;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_192.cpp,"[5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 50, 0, 0, 2, 2, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 50, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 3, 3, 4, 0, 18, 0, 0, 8, 1, 34, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_192.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp,124,"len = snprintf(buffer, sizeof(buffer), ""%.16g"", value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_193.cpp,"{
    len = snprintf(buffer, sizeof(buffer), ""%.16g"", value);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_193.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_193.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp,128,"len = snprintf(buffer, sizeof(buffer), ""null"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_194.cpp,"{
      len = snprintf(buffer, sizeof(buffer), ""null"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_194.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_194.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp,130,"len = snprintf(buffer, sizeof(buffer), ""-1e+9999"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_195.cpp,"{
      len = snprintf(buffer, sizeof(buffer), ""-1e+9999"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_195.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_195.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp,132,"len = snprintf(buffer, sizeof(buffer), ""1e+9999"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_196.cpp,"{
      len = snprintf(buffer, sizeof(buffer), ""1e+9999"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_196.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_196.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/include/json/reader.cpp,213,0;,second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_197.cpp,"private:
  enum TokenType {
    tokenEndOfStream = 0,
    tokenObjectBegin,
    tokenObjectEnd,
    tokenArrayBegin,
    tokenArrayEnd,
    tokenString,
    tokenNumber,
    tokenTrue,
    tokenFalse,
    tokenNull,
    tokenArraySeparator,
    tokenMemberSeparator,
    tokenComment,
    tokenError
  };

  class Token {
  public:
    TokenType type_;
    Location start_;
    Location end_;
  };

  class ErrorInfo {
  public:
    Token token_;
    std::string message_;
    Location extra_;
  };

  typedef std::deque<ErrorInfo> Errors;

  bool expectToken(TokenType type, Token& token, const char* message);
  bool readToken(Token& token);
  void skipSpaces();
  bool match(Location pattern, int patternLength);
  bool readComment();
  bool readCStyleComment();
  bool readCppStyleComment();
  bool readString();
  void readNumber();
  bool readValue();
  bool readObject(Token& token);
  bool readArray(Token& token);
  bool decodeNumber(Token& token);
  bool decodeNumber(Token& token, Value& decoded);
  bool decodeString(Token& token);
  bool decodeString(Token& token, std::string& decoded);
  bool decodeDouble(Token& token);
  bool decodeDouble(Token& token, Value& decoded);
  bool decodeUnicodeCodePoint(Token& token,
                              Location& current,
                              Location end,
                              unsigned int& unicode);
  bool decodeUnicodeEscapeSequence(Token& token,
                                   Location& current,
                                   Location end,
                                   unsigned int& unicode);
  bool addError(const std::string& message, Token& token, Location extra = 0);
  bool recoverFromError(TokenType skipUntilToken);
  bool addErrorAndRecover(const std::string& message,
                          Token& token,
                          TokenType skipUntilToken);
  void skipUntilSpace();
  Value& currentValue();
  Char getNextChar();
  void
  getLocationLineAndColumn(Location location, int& line, int& column) const;
  std::string getLocationLineAndColumn(Location location) const;
  void addComment(Location begin, Location end, CommentPlacement placement);
  void skipCommentTokens(Token& token);

  typedef std::stack<Value*> Nodes;
  Nodes nodes_;
  Errors errors_;
  std::string document_;
  Location begin_;
  Location end_;
  Location current_;
  Location lastValueEnd_;
  Value* lastValue_;
  std::string commentsBefore_;
  Features features_;
  bool collectComments_;",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_197.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 219, 0, 0, 17, 71, 30, 0, 2, 2, 0, 0, 0, 2, 30, 0, 0, 2, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 2, 40, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_197.cpp,213
second/download/CMake/CMake/CMake/Utilities/KWIML/test/test_abi_endian.cpp,23,"printf(LANG ""KWIML_ABI_ENDIAN_ID: expected [%d], got [%d]"",
         expect, KWIML_ABI_ENDIAN_ID);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_198.cpp,"{
#if defined(KWIML_ABI_ENDIAN_ID)
  int expect;
  union { short s; unsigned char c[sizeof(short)]; } x;
  x.s = 1;
  expect = (x.c[0] == 1 ?
            KWIML_ABI_ENDIAN_ID_LITTLE : KWIML_ABI_ENDIAN_ID_BIG);
  printf(LANG ""KWIML_ABI_ENDIAN_ID: expected [%d], got [%d]"",
         expect, KWIML_ABI_ENDIAN_ID);
  if(KWIML_ABI_ENDIAN_ID == expect)
    {
    printf("", PASSED\n"");
    }
  else
    {
    printf("", FAILED\n"");
    result = 0;
    }
#else
  printf(LANG ""KWIML_ABI_ENDIAN_ID: unknown, FAILED\n"");
  result = 0;
#endif
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_198.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 33, 0, 0, 3, 4, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 1, 23, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 2, 2, 3, 0, 6, 0, 0, 8, 0, 8, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_198.cpp,10
second/download/CMake/CMake/CMake/Utilities/KWIML/test/test_abi_endian.cpp,27,"printf("", PASSED\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_199.cpp,"{
    printf("", PASSED\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_199.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_199.cpp,14
second/download/CMake/CMake/CMake/Utilities/KWIML/test/test_abi_endian.cpp,31,"printf("", FAILED\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_200.cpp,"{
    printf("", FAILED\n"");
    result = 0;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_200.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_200.cpp,18
second/download/CMake/CMake/CMake/Utilities/KWIML/test/test_abi_endian.cpp,35,"printf(LANG ""KWIML_ABI_ENDIAN_ID: unknown, FAILED\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_201.cpp,"{
#if defined(KWIML_ABI_ENDIAN_ID)
  int expect;
  union { short s; unsigned char c[sizeof(short)]; } x;
  x.s = 1;
  expect = (x.c[0] == 1 ?
            KWIML_ABI_ENDIAN_ID_LITTLE : KWIML_ABI_ENDIAN_ID_BIG);
  printf(LANG ""KWIML_ABI_ENDIAN_ID: expected [%d], got [%d]"",
         expect, KWIML_ABI_ENDIAN_ID);
  if(KWIML_ABI_ENDIAN_ID == expect)
    {
    printf("", PASSED\n"");
    }
  else
    {
    printf("", FAILED\n"");
    result = 0;
    }
#else
  printf(LANG ""KWIML_ABI_ENDIAN_ID: unknown, FAILED\n"");
  result = 0;
#endif
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_201.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 33, 0, 0, 3, 4, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 1, 23, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 2, 2, 3, 0, 6, 0, 0, 8, 0, 8, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_201.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,532,"archive_string_sprintf(&setstr, "" uid=%jd"",
		    (intmax_t)mtree->set.uid);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_202.cpp,"{
		mtree->set.uid = acs->uid_list->m_entry->uid;
		archive_string_sprintf(&setstr, "" uid=%jd"",
		    (intmax_t)mtree->set.uid);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_202.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_202.cpp,81
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,547,"archive_string_sprintf(&setstr, "" gid=%jd"",
		    (intmax_t)mtree->set.gid);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_203.cpp,"{
		mtree->set.gid = acs->gid_list->m_entry->gid;
		archive_string_sprintf(&setstr, "" gid=%jd"",
		    (intmax_t)mtree->set.gid);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_203.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_203.cpp,96
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,552,"archive_string_sprintf(&setstr, "" mode=%o"",
		    (unsigned int)mtree->set.mode);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_204.cpp,"{
		mtree->set.mode = acs->mode_list->m_entry->mode;
		archive_string_sprintf(&setstr, "" mode=%o"",
		    (unsigned int)mtree->set.mode);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_204.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_204.cpp,101
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,572,"archive_string_sprintf(&mtree->buf, ""/unset%s\n"", unsetstr.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_205.cpp,"archive_string_sprintf(&mtree->buf, ""/unset%s\n"", unsetstr.s)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_205.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_205.cpp,121
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,575,"archive_string_sprintf(&mtree->buf, ""/set%s\n"", setstr.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_206.cpp,"archive_string_sprintf(&mtree->buf, ""/set%s\n"", setstr.s)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_206.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_206.cpp,124
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,802,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for a mtree entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_207.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for a mtree entry"");
		*m_entry = NULL;
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_207.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_207.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,841,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for a mtree entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_208.cpp,"{
			mtree_entry_free(me);
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for a mtree entry"");
			*m_entry = NULL;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_208.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_208.cpp,52
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,854,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for a mtree entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_209.cpp,"{
			mtree_entry_free(me);
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for a mtree entry"");
			*m_entry = NULL;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_209.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_209.cpp,65
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,938,"archive_string_sprintf(&mtree->buf,
				    ""# %s/%s\n"",
				    me->parentdir.s, me->basename.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_210.cpp,"archive_string_sprintf(&mtree->buf,
				    ""# %s/%s\n"",
				    me->parentdir.s, me->basename.s)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_210.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_210.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,942,"archive_string_sprintf(&mtree->buf,
				    ""# %s\n"",
				    me->basename.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_211.cpp,"archive_string_sprintf(&mtree->buf,
				    ""# %s\n"",
				    me->basename.s)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_211.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_211.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,965,"archive_string_sprintf(str, "" nlink=%u"", me->nlink);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_212.cpp,"archive_string_sprintf(str, "" nlink=%u"", me->nlink)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_212.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_212.cpp,44
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,985,"archive_string_sprintf(str, "" time=%jd.%jd"",
		    (intmax_t)me->mtime, (intmax_t)me->mtime_nsec);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_213.cpp,"archive_string_sprintf(str, "" time=%jd.%jd"",
		    (intmax_t)me->mtime, (intmax_t)me->mtime_nsec)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_213.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_213.cpp,64
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,988,"archive_string_sprintf(str, "" mode=%o"", (unsigned int)me->mode);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_214.cpp,"archive_string_sprintf(str, "" mode=%o"", (unsigned int)me->mode)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_214.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_214.cpp,67
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,990,"archive_string_sprintf(str, "" gid=%jd"", (intmax_t)me->gid);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_215.cpp,"archive_string_sprintf(str, "" gid=%jd"", (intmax_t)me->gid)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_215.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_215.cpp,69
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,992,"archive_string_sprintf(str, "" uid=%jd"", (intmax_t)me->uid);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_216.cpp,"archive_string_sprintf(str, "" uid=%jd"", (intmax_t)me->uid)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_216.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_216.cpp,71
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,995,"archive_string_sprintf(str, "" inode=%jd"", (intmax_t)me->ino);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_217.cpp,"archive_string_sprintf(str, "" inode=%jd"", (intmax_t)me->ino)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_217.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_217.cpp,74
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,997,"archive_string_sprintf(str,
		    "" resdevice=native,%ju,%ju"",
		    (uintmax_t)me->devmajor,
		    (uintmax_t)me->devminor);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_218.cpp,"{
		archive_string_sprintf(str,
		    "" resdevice=native,%ju,%ju"",
		    (uintmax_t)me->devmajor,
		    (uintmax_t)me->devminor);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_218.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_218.cpp,76
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1020,"archive_string_sprintf(str,
			    "" device=native,%ju,%ju"",
			    (uintmax_t)me->rdevmajor,
			    (uintmax_t)me->rdevminor);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_219.cpp,"{
			archive_string_sprintf(str,
			    "" device=native,%ju,%ju"",
			    (uintmax_t)me->rdevmajor,
			    (uintmax_t)me->rdevminor);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_219.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_219.cpp,99
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1030,"archive_string_sprintf(str,
			    "" device=native,%ju,%ju"",
			    (uintmax_t)me->rdevmajor,
			    (uintmax_t)me->rdevminor);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_220.cpp,"{
			archive_string_sprintf(str,
			    "" device=native,%ju,%ju"",
			    (uintmax_t)me->rdevmajor,
			    (uintmax_t)me->rdevminor);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_220.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_220.cpp,109
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1049,"archive_string_sprintf(str, "" size=%jd"",
			    (intmax_t)me->size);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_221.cpp,"archive_string_sprintf(str, "" size=%jd"",
			    (intmax_t)me->size)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_221.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_221.cpp,128
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1083,"archive_string_sprintf(&mtree->buf, ""# %s/%s\n"",
			n->parentdir.s, n->basename.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_222.cpp,"{
		if (mtree->indent) {
			int i, pd = mtree->depth * 4;
			for (i = 0; i < pd; i++)
				archive_strappend_char(&mtree->buf, ' ');
		}
		archive_string_sprintf(&mtree->buf, ""# %s/%s\n"",
			n->parentdir.s, n->basename.s);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_222.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 29, 0, 0, 1, 2, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 0, 0, 2, 0, 6, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_222.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1124,"archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_223.cpp,"{
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory"");
					return (ARCHIVE_FATAL);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_223.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_223.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1402,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate mtree data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_224.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate mtree data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_224.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_224.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1620,"archive_string_sprintf(str, "" cksum=%ju"",
		    (uintmax_t)reg->crc);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_225.cpp,"{
		archive_string_sprintf(str, "" cksum=%ju"",
		    (uintmax_t)reg->crc);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_225.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_225.cpp,5
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1747,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_226.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_226.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_226.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1897,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_227.cpp,"{
		*m_entry = NULL;
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_227.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_227.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1909,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_228.cpp,"{
		*m_entry = NULL;
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_228.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_228.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,2025,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal programing error ""
		    ""in generating canonical name for %s"",
		    file->pathname.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_229.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal programing error ""
		    ""in generating canonical name for %s"",
		    file->pathname.s);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_229.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_229.cpp,29
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,2064,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""A name buffer is too small"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_230.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""A name buffer is too small"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_230.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_230.cpp,68
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,2084,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""`%s' is not directory, we cannot insert `%s' "",
			    np->pathname.s, file->pathname.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_231.cpp,"{
			/* NOT Directory! */
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""`%s' is not directory, we cannot insert `%s' "",
			    np->pathname.s, file->pathname.s);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_231.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_231.cpp,88
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,2132,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""A name buffer is too small"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_232.cpp,"{
				archive_string_free(&as);
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""A name buffer is too small"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_232.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_232.cpp,136
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,2194,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Found duplicate entries `%s' and its file type is ""
		    ""different"",
		    np->pathname.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_233.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Found duplicate entries `%s' and its file type is ""
		    ""different"",
		    np->pathname.s);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_233.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_233.cpp,6
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,77,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Xar not supported on this platform"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_234.cpp,"{
	struct archive_read *a = (struct archive_read *)_a;
	archive_check_magic(_a, ARCHIVE_READ_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_read_support_format_xar"");

	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Xar not supported on this platform"");
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_234.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_234.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,452,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate xar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_235.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate xar data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_235.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_235.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,542,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated archive header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_236.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated archive header"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_236.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_236.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,549,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Invalid header magic"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_237.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Invalid header magic"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_237.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_237.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,555,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported header version(%d)"",
		    archive_be16dec(b+6));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_238.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported header version(%d)"",
		    archive_be16dec(b+6));
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_238.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_238.cpp,34
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,591,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""TOC uncompressed size error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_239.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""TOC uncompressed size error"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_239.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_239.cpp,70
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,608,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated archive file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_240.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated archive file"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_240.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_240.cpp,87
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,705,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Gname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_241.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Gname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_241.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_241.cpp,50
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,709,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Gname cannot be converted from %s to current locale."",
		    archive_string_conversion_charset_name(xar->sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_242.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Gname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Gname cannot be converted from %s to current locale."",
		    archive_string_conversion_charset_name(xar->sconv));
		r = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_242.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_242.cpp,54
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,720,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Uname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_243.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Uname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_243.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_243.cpp,65
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,724,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Uname cannot be converted from %s to current locale."",
		    archive_string_conversion_charset_name(xar->sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_244.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Uname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Uname cannot be converted from %s to current locale."",
		    archive_string_conversion_charset_name(xar->sconv));
		r = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_244.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_244.cpp,69
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,734,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_245.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_245.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_245.cpp,79
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,738,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted from %s to current locale."",
		    archive_string_conversion_charset_name(xar->sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_246.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted from %s to current locale."",
		    archive_string_conversion_charset_name(xar->sconv));
		r = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_246.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_246.cpp,83
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,750,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_247.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_247.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_247.cpp,95
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,754,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Linkname cannot be converted from %s to current locale."",
		    archive_string_conversion_charset_name(xar->sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_248.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Linkname cannot be converted from %s to current locale."",
		    archive_string_conversion_charset_name(xar->sconv));
		r = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_248.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_248.cpp,99
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,805,"archive_set_error(&(a->archive), ARCHIVE_ERRNO_MISC,
			    ""Decompressed size error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_249.cpp,"{
			archive_set_error(&(a->archive), ARCHIVE_ERRNO_MISC,
			    ""Decompressed size error"");
			r = ARCHIVE_FATAL;
			break;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_249.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_249.cpp,150
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,879,"archive_set_error(&(a->archive), ARCHIVE_ERRNO_MISC,
			    ""Decompressed size error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_250.cpp,"{
			archive_set_error(&(a->archive), ARCHIVE_ERRNO_MISC,
			    ""Decompressed size error"");
			r = ARCHIVE_FATAL;
			goto abort_read_data;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_250.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_250.cpp,44
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,971,"archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Cannot seek."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_251.cpp,"{
				archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Cannot seek."");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_251.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_251.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1008,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Truncated archive file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_252.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Truncated archive file"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_252.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_252.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1203,"archive_set_error(&a->archive,
			    ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_253.cpp,"{
			archive_set_error(&a->archive,
			    ENOMEM, ""Out of memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_253.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_253.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1210,"archive_set_error(&a->archive,
			    ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_254.cpp,"{
			archive_set_error(&a->archive,
			    ENOMEM, ""Out of memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_254.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_254.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1306,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_255.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_255.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_255.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1408,"archive_set_error(&(a->archive), ARCHIVE_ERRNO_MISC,
		    ""Sumcheck error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_256.cpp,"archive_set_error(&(a->archive), ARCHIVE_ERRNO_MISC,
		    ""Sumcheck error"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_256.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_256.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1431,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_257.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_257.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_257.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1463,"archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail == NULL ? ""??"" : detail);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_258.cpp,"{
			int err = ARCHIVE_ERRNO_MISC;
			detail = NULL;
			switch (r) {
			case BZ_PARAM_ERROR:
				detail = ""invalid setup parameter"";
				break;
			case BZ_MEM_ERROR:
				err = ENOMEM;
				detail = ""out of memory"";
				break;
			case BZ_CONFIG_ERROR:
				detail = ""mis-compiled library"";
				break;
			}
			archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail == NULL ? ""??"" : detail);
			xar->bzstream_valid = 0;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_258.cpp,"[0, 0, 0, 0, 3, 0, 1, 1, 3, 0, 2, 0, 0, 0, 0, 26, 0, 0, 1, 1, 0, 0, 1, 6, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0, 1, 0, 0, 7, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_258.cpp,50
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1500,"archive_set_error(&a->archive,
				    ENOMEM,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Cannot allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_259.cpp,"{
			case LZMA_MEM_ERROR:
				archive_set_error(&a->archive,
				    ENOMEM,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Cannot allocate memory"");
				break;
			case LZMA_OPTIONS_ERROR:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Invalid or unsupported options"");
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""lzma library"");
				break;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_259.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_259.cpp,87
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1507,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Invalid or unsupported options"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_260.cpp,"{
			case LZMA_MEM_ERROR:
				archive_set_error(&a->archive,
				    ENOMEM,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Cannot allocate memory"");
				break;
			case LZMA_OPTIONS_ERROR:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Invalid or unsupported options"");
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""lzma library"");
				break;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_260.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_260.cpp,94
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1514,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""lzma library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_261.cpp,"{
			case LZMA_MEM_ERROR:
				archive_set_error(&a->archive,
				    ENOMEM,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Cannot allocate memory"");
				break;
			case LZMA_OPTIONS_ERROR:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Invalid or unsupported options"");
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""lzma library"");
				break;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_261.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_261.cpp,101
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1544,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""%s compression not supported on this platform"",
		    detail);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_262.cpp,"{
	case NONE:
		break;
	case GZIP:
		if (xar->stream_valid)
			r = inflateReset(&(xar->stream));
		else
			r = inflateInit(&(xar->stream));
		if (r != Z_OK) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");
			return (ARCHIVE_FATAL);
		}
		xar->stream_valid = 1;
		xar->stream.total_in = 0;
		xar->stream.total_out = 0;
		break;
#if defined(HAVE_BZLIB_H) && defined(BZ_CONFIG_ERROR)
	case BZIP2:
		if (xar->bzstream_valid) {
			BZ2_bzDecompressEnd(&(xar->bzstream));
			xar->bzstream_valid = 0;
		}
		r = BZ2_bzDecompressInit(&(xar->bzstream), 0, 0);
		if (r == BZ_MEM_ERROR)
			r = BZ2_bzDecompressInit(&(xar->bzstream), 0, 1);
		if (r != BZ_OK) {
			int err = ARCHIVE_ERRNO_MISC;
			detail = NULL;
			switch (r) {
			case BZ_PARAM_ERROR:
				detail = ""invalid setup parameter"";
				break;
			case BZ_MEM_ERROR:
				err = ENOMEM;
				detail = ""out of memory"";
				break;
			case BZ_CONFIG_ERROR:
				detail = ""mis-compiled library"";
				break;
			}
			archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail == NULL ? ""??"" : detail);
			xar->bzstream_valid = 0;
			return (ARCHIVE_FATAL);
		}
		xar->bzstream_valid = 1;
		xar->bzstream.total_in_lo32 = 0;
		xar->bzstream.total_in_hi32 = 0;
		xar->bzstream.total_out_lo32 = 0;
		xar->bzstream.total_out_hi32 = 0;
		break;
#endif
#if defined(HAVE_LZMA_H) && defined(HAVE_LIBLZMA)
#if LZMA_VERSION_MAJOR >= 5
/* Effectively disable the limiter. */
#define LZMA_MEMLIMIT   UINT64_MAX
#else
/* NOTE: This needs to check memory size which running system has. */
#define LZMA_MEMLIMIT   (1U << 30)
#endif
	case XZ:
	case LZMA:
		if (xar->lzstream_valid) {
			lzma_end(&(xar->lzstream));
			xar->lzstream_valid = 0;
		}
		if (xar->entry_encoding == XZ)
			r = lzma_stream_decoder(&(xar->lzstream),
			    LZMA_MEMLIMIT,/* memlimit */
			    LZMA_CONCATENATED);
		else
			r = lzma_alone_decoder(&(xar->lzstream),
			    LZMA_MEMLIMIT);/* memlimit */
		if (r != LZMA_OK) {
			switch (r) {
			case LZMA_MEM_ERROR:
				archive_set_error(&a->archive,
				    ENOMEM,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Cannot allocate memory"");
				break;
			case LZMA_OPTIONS_ERROR:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Invalid or unsupported options"");
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""lzma library"");
				break;
			}
			return (ARCHIVE_FATAL);
		}
		xar->lzstream_valid = 1;
		xar->lzstream.total_in = 0;
		xar->lzstream.total_out = 0;
		break;
#endif
	/*
	 * Unsupported compression.
	 */
	default:
#if !defined(HAVE_BZLIB_H) || !defined(BZ_CONFIG_ERROR)
	case BZIP2:
#endif
#if !defined(HAVE_LZMA_H) || !defined(HAVE_LIBLZMA)
	case LZMA:
	case XZ:
#endif
		switch (xar->entry_encoding) {
		case BZIP2: detail = ""bzip2""; break;
		case LZMA: detail = ""lzma""; break;
		case XZ: detail = ""xz""; break;
		default: detail = ""??""; break;
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""%s compression not supported on this platform"",
		    detail);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_262.cpp,"[13, 0, 0, 0, 14, 0, 4, 3, 16, 3, 14, 0, 0, 0, 0, 204, 0, 0, 1, 1, 0, 0, 1, 38, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 1, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 9, 4, 0, 22, 0, 0, 37, 0, 43, 13, 0, 2, 2, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_262.cpp,131
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1568,"archive_set_error(&a->archive, ENOMEM,
				    ""Couldn't allocate memory for out buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_263.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Couldn't allocate memory for out buffer"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_263.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_263.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1590,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""File decompression failed (%d)"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_264.cpp,"{
		case Z_OK: /* Decompressor made some progress.*/
		case Z_STREAM_END: /* Found end of stream. */
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""File decompression failed (%d)"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_264.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_264.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1610,"archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to clean up decompressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_265.cpp,"{
			case BZ_OK:
				break;
			default:
				archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to clean up decompressor"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_265.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_265.cpp,58
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1620,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""bzip decompression failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_266.cpp,"{
		case BZ_STREAM_END: /* Found end of stream. */
			switch (BZ2_bzDecompressEnd(&(xar->bzstream))) {
			case BZ_OK:
				break;
			default:
				archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to clean up decompressor"");
				return (ARCHIVE_FATAL);
			}
			xar->bzstream_valid = 0;
			/* FALLTHROUGH */
		case BZ_OK: /* Decompressor made some progress. */
			break;
		default:
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""bzip decompression failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_266.cpp,"[0, 0, 0, 0, 2, 0, 2, 1, 3, 2, 2, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_266.cpp,68
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1645,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""%s decompression failed(%d)"",
			    (xar->entry_encoding == XZ)?""xz"":""lzma"",
			    r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_267.cpp,"{
		case LZMA_STREAM_END: /* Found end of stream. */
			lzma_end(&(xar->lzstream));
			xar->lzstream_valid = 0;
			/* FALLTHROUGH */
		case LZMA_OK: /* Decompressor made some progress. */
			break;
		default:
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""%s decompression failed(%d)"",
			    (xar->entry_encoding == XZ)?""xz"":""lzma"",
			    r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_267.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 1, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_267.cpp,93
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1691,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up zlib decompressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_268.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up zlib decompressor"");
			r = ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_268.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_268.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1700,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up bzip2 decompressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_269.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up bzip2 decompressor"");
			r = ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_269.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_269.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1713,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up lzmadec decompressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_270.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up lzmadec decompressor"");
			r = ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_270.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_270.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1758,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_271.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_271.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_271.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1807,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_272.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_272.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_272.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1887,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_273.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_273.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_273.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1895,"fprintf(stderr, ""UNKNOWNTAG_START:%s\n"", name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_274.cpp,"{
#if DEBUG
		fprintf(stderr, ""UNKNOWNTAG_START:%s\n"", name);
#endif
		xar->xmlsts_unknown = xar->xmlsts;
		xar->xmlsts = UNKNOWN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_274.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_274.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1918,"fprintf(stderr, ""UNKNOWNTAG_END:%s\n"", name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_275.cpp,"{
#if DEBUG
			fprintf(stderr, ""UNKNOWNTAG_END:%s\n"", name);
#endif
			xar->xmlsts = xar->xmlsts_unknown;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_275.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_275.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1934,"fprintf(stderr, ""xml_sta:[%s]\n"", name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_276.cpp,"{
	struct xar *xar;
	struct xmlattr *attr;

	xar = (struct xar *)(a->format->data);

#if DEBUG
	fprintf(stderr, ""xml_sta:[%s]\n"", name);
	for (attr = list->first; attr != NULL; attr = attr->next)
		fprintf(stderr, ""    attr:\""%s\""=\""%s\""\n"",
		    attr->name, attr->value);
#endif
	xar->base64text = 0;
	switch (xar->xmlsts) {
	case INIT:
		if (strcmp(name, ""xar"") == 0)
			xar->xmlsts = XAR;
		else
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case XAR:
		if (strcmp(name, ""toc"") == 0)
			xar->xmlsts = TOC;
		else
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case TOC:
		if (strcmp(name, ""creation-time"") == 0)
			xar->xmlsts = TOC_CREATION_TIME;
		else if (strcmp(name, ""checksum"") == 0)
			xar->xmlsts = TOC_CHECKSUM;
		else if (strcmp(name, ""file"") == 0) {
			if (file_new(a, xar, list) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
			xar->xmlsts = TOC_FILE;
		}
		else
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case TOC_CHECKSUM:
		if (strcmp(name, ""offset"") == 0)
			xar->xmlsts = TOC_CHECKSUM_OFFSET;
		else if (strcmp(name, ""size"") == 0)
			xar->xmlsts = TOC_CHECKSUM_SIZE;
		else
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case TOC_FILE:
		if (strcmp(name, ""file"") == 0) {
			if (file_new(a, xar, list) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		}
		else if (strcmp(name, ""data"") == 0)
			xar->xmlsts = FILE_DATA;
		else if (strcmp(name, ""ea"") == 0) {
			if (xattr_new(a, xar, list) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
			xar->xmlsts = FILE_EA;
		}
		else if (strcmp(name, ""ctime"") == 0)
			xar->xmlsts = FILE_CTIME;
		else if (strcmp(name, ""mtime"") == 0)
			xar->xmlsts = FILE_MTIME;
		else if (strcmp(name, ""atime"") == 0)
			xar->xmlsts = FILE_ATIME;
		else if (strcmp(name, ""group"") == 0)
			xar->xmlsts = FILE_GROUP;
		else if (strcmp(name, ""gid"") == 0)
			xar->xmlsts = FILE_GID;
		else if (strcmp(name, ""user"") == 0)
			xar->xmlsts = FILE_USER;
		else if (strcmp(name, ""uid"") == 0)
			xar->xmlsts = FILE_UID;
		else if (strcmp(name, ""mode"") == 0)
			xar->xmlsts = FILE_MODE;
		else if (strcmp(name, ""device"") == 0)
			xar->xmlsts = FILE_DEVICE;
		else if (strcmp(name, ""deviceno"") == 0)
			xar->xmlsts = FILE_DEVICENO;
		else if (strcmp(name, ""inode"") == 0)
			xar->xmlsts = FILE_INODE;
		else if (strcmp(name, ""link"") == 0)
			xar->xmlsts = FILE_LINK;
		else if (strcmp(name, ""type"") == 0) {
			xar->xmlsts = FILE_TYPE;
			for (attr = list->first; attr != NULL;
			    attr = attr->next) {
				if (strcmp(attr->name, ""link"") != 0)
					continue;
				if (strcmp(attr->value, ""original"") == 0) {
					xar->file->hdnext = xar->hdlink_orgs;
					xar->hdlink_orgs = xar->file;
				} else {
					xar->file->link = (unsigned)atol10(attr->value,
					    strlen(attr->value));
					if (xar->file->link > 0)
						if (add_link(a, xar, xar->file) != ARCHIVE_OK) {
							return (ARCHIVE_FATAL);
						};
				}
			}
		}
		else if (strcmp(name, ""name"") == 0) {
			xar->xmlsts = FILE_NAME;
			for (attr = list->first; attr != NULL;
			    attr = attr->next) {
				if (strcmp(attr->name, ""enctype"") == 0 &&
				    strcmp(attr->value, ""base64"") == 0)
					xar->base64text = 1;
			}
		}
		else if (strcmp(name, ""acl"") == 0)
			xar->xmlsts = FILE_ACL;
		else if (strcmp(name, ""flags"") == 0)
			xar->xmlsts = FILE_FLAGS;
		else if (strcmp(name, ""ext2"") == 0)
			xar->xmlsts = FILE_EXT2;
		else
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case FILE_DATA:
		if (strcmp(name, ""length"") == 0)
			xar->xmlsts = FILE_DATA_LENGTH;
		else if (strcmp(name, ""offset"") == 0)
			xar->xmlsts = FILE_DATA_OFFSET;
		else if (strcmp(name, ""size"") == 0)
			xar->xmlsts = FILE_DATA_SIZE;
		else if (strcmp(name, ""encoding"") == 0) {
			xar->xmlsts = FILE_DATA_ENCODING;
			xar->file->encoding = getencoding(list);
		}
		else if (strcmp(name, ""archived-checksum"") == 0) {
			xar->xmlsts = FILE_DATA_A_CHECKSUM;
			xar->file->a_sum.alg = getsumalgorithm(list);
		}
		else if (strcmp(name, ""extracted-checksum"") == 0) {
			xar->xmlsts = FILE_DATA_E_CHECKSUM;
			xar->file->e_sum.alg = getsumalgorithm(list);
		}
		else if (strcmp(name, ""content"") == 0)
			xar->xmlsts = FILE_DATA_CONTENT;
		else
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case FILE_DEVICE:
		if (strcmp(name, ""major"") == 0)
			xar->xmlsts = FILE_DEVICE_MAJOR;
		else if (strcmp(name, ""minor"") == 0)
			xar->xmlsts = FILE_DEVICE_MINOR;
		else
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case FILE_DATA_CONTENT:
		if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
			return (ARCHIVE_FATAL);
		break;
	case FILE_EA:
		if (strcmp(name, ""length"") == 0)
			xar->xmlsts = FILE_EA_LENGTH;
		else if (strcmp(name, ""offset"") == 0)
			xar->xmlsts = FILE_EA_OFFSET;
		else if (strcmp(name, ""size"") == 0)
			xar->xmlsts = FILE_EA_SIZE;
		else if (strcmp(name, ""encoding"") == 0) {
			xar->xmlsts = FILE_EA_ENCODING;
			xar->xattr->encoding = getencoding(list);
		} else if (strcmp(name, ""archived-checksum"") == 0)
			xar->xmlsts = FILE_EA_A_CHECKSUM;
		else if (strcmp(name, ""extracted-checksum"") == 0)
			xar->xmlsts = FILE_EA_E_CHECKSUM;
		else if (strcmp(name, ""name"") == 0)
			xar->xmlsts = FILE_EA_NAME;
		else if (strcmp(name, ""fstype"") == 0)
			xar->xmlsts = FILE_EA_FSTYPE;
		else
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case FILE_ACL:
		if (strcmp(name, ""appleextended"") == 0)
			xar->xmlsts = FILE_ACL_APPLEEXTENDED;
		else if (strcmp(name, ""default"") == 0)
			xar->xmlsts = FILE_ACL_DEFAULT;
		else if (strcmp(name, ""access"") == 0)
			xar->xmlsts = FILE_ACL_ACCESS;
		else
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case FILE_FLAGS:
		if (!xml_parse_file_flags(xar, name))
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case FILE_EXT2:
		if (!xml_parse_file_ext2(xar, name))
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case TOC_CREATION_TIME:
	case TOC_CHECKSUM_OFFSET:
	case TOC_CHECKSUM_SIZE:
	case FILE_DATA_LENGTH:
	case FILE_DATA_OFFSET:
	case FILE_DATA_SIZE:
	case FILE_DATA_ENCODING:
	case FILE_DATA_A_CHECKSUM:
	case FILE_DATA_E_CHECKSUM:
	case FILE_EA_LENGTH:
	case FILE_EA_OFFSET:
	case FILE_EA_SIZE:
	case FILE_EA_ENCODING:
	case FILE_EA_A_CHECKSUM:
	case FILE_EA_E_CHECKSUM:
	case FILE_EA_NAME:
	case FILE_EA_FSTYPE:
	case FILE_CTIME:
	case FILE_MTIME:
	case FILE_ATIME:
	case FILE_GROUP:
	case FILE_GID:
	case FILE_USER:
	case FILE_UID:
	case FILE_INODE:
	case FILE_DEVICE_MAJOR:
	case FILE_DEVICE_MINOR:
	case FILE_DEVICENO:
	case FILE_MODE:
	case FILE_TYPE:
	case FILE_LINK:
	case FILE_NAME:
	case FILE_ACL_DEFAULT:
	case FILE_ACL_ACCESS:
	case FILE_ACL_APPLEEXTENDED:
	case FILE_FLAGS_USER_NODUMP:
	case FILE_FLAGS_USER_IMMUTABLE:
	case FILE_FLAGS_USER_APPEND:
	case FILE_FLAGS_USER_OPAQUE:
	case FILE_FLAGS_USER_NOUNLINK:
	case FILE_FLAGS_SYS_ARCHIVED:
	case FILE_FLAGS_SYS_IMMUTABLE:
	case FILE_FLAGS_SYS_APPEND:
	case FILE_FLAGS_SYS_NOUNLINK:
	case FILE_FLAGS_SYS_SNAPSHOT:
	case FILE_EXT2_SecureDeletion:
	case FILE_EXT2_Undelete:
	case FILE_EXT2_Compress:
	case FILE_EXT2_Synchronous:
	case FILE_EXT2_Immutable:
	case FILE_EXT2_AppendOnly:
	case FILE_EXT2_NoDump:
	case FILE_EXT2_NoAtime:
	case FILE_EXT2_CompDirty:
	case FILE_EXT2_CompBlock:
	case FILE_EXT2_NoCompBlock:
	case FILE_EXT2_CompError:
	case FILE_EXT2_BTree:
	case FILE_EXT2_HashIndexed:
	case FILE_EXT2_iMagic:
	case FILE_EXT2_Journaled:
	case FILE_EXT2_NoTail:
	case FILE_EXT2_DirSync:
	case FILE_EXT2_TopDir:
	case FILE_EXT2_Reserved:
	case UNKNOWN:
		if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
			return (ARCHIVE_FATAL);
		break;
	}
	return (ARCHIVE_OK);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_276.cpp,"[71, 0, 3, 0, 13, 1, 18, 1, 78, 0, 76, 0, 0, 1, 0, 604, 0, 0, 2, 2, 0, 0, 3, 107, 0, 0, 0, 0, 2, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 74, 70, 1, 0, 78, 0, 0, 58, 47, 171, 2, 3, 0, 0, 3, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_276.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1936,"fprintf(stderr, ""    attr:\""%s\""=\""%s\""\n"",
		    attr->name, attr->value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_277.cpp,"fprintf(stderr, ""    attr:\""%s\""=\""%s\""\n"",
		    attr->name, attr->value)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_277.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_277.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,2216,"fprintf(stderr, ""xml_end:[%s]\n"", name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_278.cpp,"{
	struct archive_read *a;
	struct xar *xar;

	a = (struct archive_read *)userData;
	xar = (struct xar *)(a->format->data);

#if DEBUG
	fprintf(stderr, ""xml_end:[%s]\n"", name);
#endif
	switch (xar->xmlsts) {
	case INIT:
		break;
	case XAR:
		if (strcmp(name, ""xar"") == 0)
			xar->xmlsts = INIT;
		break;
	case TOC:
		if (strcmp(name, ""toc"") == 0)
			xar->xmlsts = XAR;
		break;
	case TOC_CREATION_TIME:
		if (strcmp(name, ""creation-time"") == 0)
			xar->xmlsts = TOC;
		break;
	case TOC_CHECKSUM:
		if (strcmp(name, ""checksum"") == 0)
			xar->xmlsts = TOC;
		break;
	case TOC_CHECKSUM_OFFSET:
		if (strcmp(name, ""offset"") == 0)
			xar->xmlsts = TOC_CHECKSUM;
		break;
	case TOC_CHECKSUM_SIZE:
		if (strcmp(name, ""size"") == 0)
			xar->xmlsts = TOC_CHECKSUM;
		break;
	case TOC_FILE:
		if (strcmp(name, ""file"") == 0) {
			if (xar->file->parent != NULL &&
			    ((xar->file->mode & AE_IFMT) == AE_IFDIR))
				xar->file->parent->subdirs++;
			xar->file = xar->file->parent;
			if (xar->file == NULL)
				xar->xmlsts = TOC;
		}
		break;
	case FILE_DATA:
		if (strcmp(name, ""data"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_DATA_LENGTH:
		if (strcmp(name, ""length"") == 0)
			xar->xmlsts = FILE_DATA;
		break;
	case FILE_DATA_OFFSET:
		if (strcmp(name, ""offset"") == 0)
			xar->xmlsts = FILE_DATA;
		break;
	case FILE_DATA_SIZE:
		if (strcmp(name, ""size"") == 0)
			xar->xmlsts = FILE_DATA;
		break;
	case FILE_DATA_ENCODING:
		if (strcmp(name, ""encoding"") == 0)
			xar->xmlsts = FILE_DATA;
		break;
	case FILE_DATA_A_CHECKSUM:
		if (strcmp(name, ""archived-checksum"") == 0)
			xar->xmlsts = FILE_DATA;
		break;
	case FILE_DATA_E_CHECKSUM:
		if (strcmp(name, ""extracted-checksum"") == 0)
			xar->xmlsts = FILE_DATA;
		break;
	case FILE_DATA_CONTENT:
		if (strcmp(name, ""content"") == 0)
			xar->xmlsts = FILE_DATA;
		break;
	case FILE_EA:
		if (strcmp(name, ""ea"") == 0) {
			xar->xmlsts = TOC_FILE;
			xar->xattr = NULL;
		}
		break;
	case FILE_EA_LENGTH:
		if (strcmp(name, ""length"") == 0)
			xar->xmlsts = FILE_EA;
		break;
	case FILE_EA_OFFSET:
		if (strcmp(name, ""offset"") == 0)
			xar->xmlsts = FILE_EA;
		break;
	case FILE_EA_SIZE:
		if (strcmp(name, ""size"") == 0)
			xar->xmlsts = FILE_EA;
		break;
	case FILE_EA_ENCODING:
		if (strcmp(name, ""encoding"") == 0)
			xar->xmlsts = FILE_EA;
		break;
	case FILE_EA_A_CHECKSUM:
		if (strcmp(name, ""archived-checksum"") == 0)
			xar->xmlsts = FILE_EA;
		break;
	case FILE_EA_E_CHECKSUM:
		if (strcmp(name, ""extracted-checksum"") == 0)
			xar->xmlsts = FILE_EA;
		break;
	case FILE_EA_NAME:
		if (strcmp(name, ""name"") == 0)
			xar->xmlsts = FILE_EA;
		break;
	case FILE_EA_FSTYPE:
		if (strcmp(name, ""fstype"") == 0)
			xar->xmlsts = FILE_EA;
		break;
	case FILE_CTIME:
		if (strcmp(name, ""ctime"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_MTIME:
		if (strcmp(name, ""mtime"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_ATIME:
		if (strcmp(name, ""atime"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_GROUP:
		if (strcmp(name, ""group"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_GID:
		if (strcmp(name, ""gid"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_USER:
		if (strcmp(name, ""user"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_UID:
		if (strcmp(name, ""uid"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_MODE:
		if (strcmp(name, ""mode"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_DEVICE:
		if (strcmp(name, ""device"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_DEVICE_MAJOR:
		if (strcmp(name, ""major"") == 0)
			xar->xmlsts = FILE_DEVICE;
		break;
	case FILE_DEVICE_MINOR:
		if (strcmp(name, ""minor"") == 0)
			xar->xmlsts = FILE_DEVICE;
		break;
	case FILE_DEVICENO:
		if (strcmp(name, ""deviceno"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_INODE:
		if (strcmp(name, ""inode"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_LINK:
		if (strcmp(name, ""link"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_TYPE:
		if (strcmp(name, ""type"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_NAME:
		if (strcmp(name, ""name"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_ACL:
		if (strcmp(name, ""acl"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_ACL_DEFAULT:
		if (strcmp(name, ""default"") == 0)
			xar->xmlsts = FILE_ACL;
		break;
	case FILE_ACL_ACCESS:
		if (strcmp(name, ""access"") == 0)
			xar->xmlsts = FILE_ACL;
		break;
	case FILE_ACL_APPLEEXTENDED:
		if (strcmp(name, ""appleextended"") == 0)
			xar->xmlsts = FILE_ACL;
		break;
	case FILE_FLAGS:
		if (strcmp(name, ""flags"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_FLAGS_USER_NODUMP:
		if (strcmp(name, ""UserNoDump"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_FLAGS_USER_IMMUTABLE:
		if (strcmp(name, ""UserImmutable"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_FLAGS_USER_APPEND:
		if (strcmp(name, ""UserAppend"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_FLAGS_USER_OPAQUE:
		if (strcmp(name, ""UserOpaque"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_FLAGS_USER_NOUNLINK:
		if (strcmp(name, ""UserNoUnlink"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_FLAGS_SYS_ARCHIVED:
		if (strcmp(name, ""SystemArchived"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_FLAGS_SYS_IMMUTABLE:
		if (strcmp(name, ""SystemImmutable"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_FLAGS_SYS_APPEND:
		if (strcmp(name, ""SystemAppend"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_FLAGS_SYS_NOUNLINK:
		if (strcmp(name, ""SystemNoUnlink"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_FLAGS_SYS_SNAPSHOT:
		if (strcmp(name, ""SystemSnapshot"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_EXT2:
		if (strcmp(name, ""ext2"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_EXT2_SecureDeletion:
		if (strcmp(name, ""SecureDeletion"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_Undelete:
		if (strcmp(name, ""Undelete"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_Compress:
		if (strcmp(name, ""Compress"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_Synchronous:
		if (strcmp(name, ""Synchronous"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_Immutable:
		if (strcmp(name, ""Immutable"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_AppendOnly:
		if (strcmp(name, ""AppendOnly"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_NoDump:
		if (strcmp(name, ""NoDump"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_NoAtime:
		if (strcmp(name, ""NoAtime"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_CompDirty:
		if (strcmp(name, ""CompDirty"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_CompBlock:
		if (strcmp(name, ""CompBlock"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_NoCompBlock:
		if (strcmp(name, ""NoCompBlock"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_CompError:
		if (strcmp(name, ""CompError"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_BTree:
		if (strcmp(name, ""BTree"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_HashIndexed:
		if (strcmp(name, ""HashIndexed"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_iMagic:
		if (strcmp(name, ""iMagic"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_Journaled:
		if (strcmp(name, ""Journaled"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_NoTail:
		if (strcmp(name, ""NoTail"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_DirSync:
		if (strcmp(name, ""DirSync"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_TopDir:
		if (strcmp(name, ""TopDir"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_Reserved:
		if (strcmp(name, ""Reserved"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case UNKNOWN:
		unknowntag_end(xar, name);
		break;
	}
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_278.cpp,"[79, 0, 0, 0, 78, 0, 0, 1, 78, 0, 80, 0, 0, 0, 0, 592, 0, 0, 2, 2, 0, 0, 0, 153, 0, 0, 0, 0, 2, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 398, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 79, 78, 0, 0, 78, 0, 0, 83, 0, 157, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_278.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,2641,"fprintf(stderr, ""\tlen=%d:\""%s\""\n"", len, buff);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_279.cpp,"{
		char buff[1024];
		if (len > (int)(sizeof(buff)-1))
			len = (int)(sizeof(buff)-1);
		strncpy(buff, s, len);
		buff[len] = 0;
		fprintf(stderr, ""\tlen=%d:\""%s\""\n"", len, buff);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_279.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 20, 0, 0, 1, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 18, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 6, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_279.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3029,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_280.cpp,"{
			archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_280.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_280.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3036,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_281.cpp,"{
			free(attr);
			archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_281.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_281.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3044,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_282.cpp,"{
			free(attr->name);
			free(attr);
			archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_282.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_282.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3103,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""XML Parsing error: %s"", msg);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_283.cpp,"{
	case XML_PARSER_SEVERITY_VALIDITY_WARNING:
	case XML_PARSER_SEVERITY_WARNING:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""XML Parsing error: %s"", msg);
		break;
	case XML_PARSER_SEVERITY_VALIDITY_ERROR:
	case XML_PARSER_SEVERITY_ERROR:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""XML Parsing error: %s"", msg);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_283.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_283.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3108,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""XML Parsing error: %s"", msg);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_284.cpp,"{
	case XML_PARSER_SEVERITY_VALIDITY_WARNING:
	case XML_PARSER_SEVERITY_WARNING:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""XML Parsing error: %s"", msg);
		break;
	case XML_PARSER_SEVERITY_VALIDITY_ERROR:
	case XML_PARSER_SEVERITY_ERROR:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""XML Parsing error: %s"", msg);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_284.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_284.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3123,"archive_set_error(&a->archive, ENOMEM,
		    ""Couldn't allocate memory for xml parser"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_285.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Couldn't allocate memory for xml parser"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_285.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_285.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3185,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_286.cpp,"{
			archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
			free(attr);
			free(name);
			free(value);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_286.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_286.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3247,"archive_set_error(&a->archive, ENOMEM,
		    ""Couldn't allocate memory for xml parser"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_287.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Couldn't allocate memory for xml parser"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_287.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_287.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3276,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""XML Parsing failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_288.cpp,"{
			XML_ParserFree(parser);
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""XML Parsing failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_288.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_288.cpp,44
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,231,"archive_set_error(&a->archive, ENOMEM, ""Can't allocate cpio data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_289.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Can't allocate cpio data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_289.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_289.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,333,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""cpio: hdrcharset option needs a character-set name"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_290.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""cpio: hdrcharset option needs a character-set name"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_290.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_290.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,388,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_291.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_291.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_291.cpp,35
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,392,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname can't be converted from %s to current locale."",
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_292.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname can't be converted from %s to current locale."",
		    archive_string_conversion_charset_name(sconv));
		r = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_292.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_292.cpp,39
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,404,"archive_set_error(&a->archive, ENOMEM,
			    ""Rejecting malformed cpio archive: symlink contents exceed 1 megabyte"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_293.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Rejecting malformed cpio archive: symlink contents exceed 1 megabyte"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_293.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_293.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,415,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_294.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_294.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_294.cpp,62
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,419,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Linkname can't be converted from %s to ""
			    ""current locale."",
			    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_295.cpp,"{
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Linkname can't be converted from %s to ""
			    ""current locale."",
			    archive_string_conversion_charset_name(sconv));
			r = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_295.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_295.cpp,66
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,560,"archive_set_error(&a->archive,
						    0,
						    ""Skipped %d bytes before ""
						    ""finding valid header"",
						    (int)skipped);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_296.cpp,"{
						archive_set_error(&a->archive,
						    0,
						    ""Skipped %d bytes before ""
						    ""finding valid header"",
						    (int)skipped);
						return (ARCHIVE_WARN);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_296.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_296.cpp,35
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,728,"archive_set_error(&a->archive,
						    0,
						    ""Skipped %d bytes before ""
						    ""finding valid header"",
						    (int)skipped);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_297.cpp,"{
						archive_set_error(&a->archive,
						    0,
						    ""Skipped %d bytes before ""
						    ""finding valid header"",
						    (int)skipped);
						return (ARCHIVE_WARN);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_297.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_297.cpp,41
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,875,"archive_set_error(&a->archive, 0,
		""End of file trying to read next cpio header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_298.cpp,"{
	    archive_set_error(&a->archive, 0,
		""End of file trying to read next cpio header"");
	    return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_298.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_298.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,914,"archive_set_error(&a->archive, 0,
		""End of file trying to read next cpio header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_299.cpp,"{
	    archive_set_error(&a->archive, 0,
		""End of file trying to read next cpio header"");
	    return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_299.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_299.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,1059,"archive_set_error(&a->archive,
		    ENOMEM, ""Out of memory adding file to list"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_300.cpp,"{
		archive_set_error(&a->archive,
		    ENOMEM, ""Out of memory adding file to list"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_300.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_300.cpp,39
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,1073,"archive_set_error(&a->archive,
		    ENOMEM, ""Out of memory adding file to list"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_301.cpp,"{
		archive_set_error(&a->archive,
		    ENOMEM, ""Out of memory adding file to list"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_301.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_301.cpp,53
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,423,"archive_set_error(&a->archive, errno, ""Couldn't stat file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_302.cpp,"{
	if (a->pst != NULL) {
		/* Already have stat() data available. */
		return (ARCHIVE_OK);
	}
#ifdef HAVE_FSTAT
	if (a->fd >= 0 && fstat(a->fd, &a->st) == 0) {
		a->pst = &a->st;
		return (ARCHIVE_OK);
	}
#endif
	/*
	 * XXX At this point, symlinks should not be hit, otherwise
	 * XXX a race occurred.  Do we want to check explicitly for that?
	 */
	if (lstat(a->name, &a->st) == 0) {
		a->pst = &a->st;
		return (ARCHIVE_OK);
	}
	archive_set_error(&a->archive, errno, ""Couldn't stat file"");
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_302.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 0, 0, 3, 0, 7, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_302.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,671,"archive_set_error(&a->archive, errno,
			    ""chdir() failure"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_303.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""chdir() failure"");
			ret = ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_303.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_303.cpp,192
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,801,"archive_set_error(&a->archive, 0,
		    ""Attempt to write to an empty file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_304.cpp,"{
		archive_set_error(&a->archive, 0,
		    ""Attempt to write to an empty file"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_304.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_304.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,856,"archive_set_error(&a->archive, errno,
				    ""Seek failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_305.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Seek failed"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_305.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_305.cpp,66
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,864,"archive_set_error(&a->archive, errno, ""Write failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_306.cpp,"{
			archive_set_error(&a->archive, errno, ""Write failed"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_306.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_306.cpp,74
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,894,"archive_set_error(&a->archive, errno,
		    ""Failed to set UF_COMPRESSED file flag"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_307.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to set UF_COMPRESSED file flag"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_307.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_307.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,932,"archive_set_error(&a->archive, errno,
		    ""Cannot restore xattr:%s"", DECMPFS_XATTR_NAME);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_308.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Cannot restore xattr:%s"", DECMPFS_XATTR_NAME);
		compression_type = archive_le32dec(
		    &a->decmpfs_header_p[DECMPFS_COMPRESSION_TYPE]);
		if (compression_type == CMP_RESOURCE_FORK)
			fremovexattr(a->fd, XATTR_RESOURCEFORK_NAME,
			    XATTR_SHOWCOMPRESSION);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_308.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_308.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,989,"archive_set_error(&a->archive, errno,
		    ""Cannot restore xattr: %s at %u pos %u bytes"",
		    XATTR_RESOURCEFORK_NAME,
		    (unsigned)position,
		    (unsigned)bytes);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_309.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Cannot restore xattr: %s at %u pos %u bytes"",
		    XATTR_RESOURCEFORK_NAME,
		    (unsigned)position,
		    (unsigned)bytes);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_309.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_309.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1066,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_310.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize compressor"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_310.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_310.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1093,"archive_set_error(&a->archive,
			    (r < 0)?errno:ARCHIVE_ERRNO_MISC,
			    ""Failed to read resource fork"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_311.cpp,"{
			archive_set_error(&a->archive,
			    (r < 0)?errno:ARCHIVE_ERRNO_MISC,
			    ""Failed to read resource fork"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_311.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_311.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1108,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to decompress resource fork"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_312.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to decompress resource fork"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_312.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_312.cpp,33
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1119,"archive_set_error(&a->archive, errno,
				    ""Write failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_313.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Write failed"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_313.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_313.cpp,44
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1129,"archive_set_error(&a->archive, errno,
		    ""Failed to remove resource fork"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_314.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to remove resource fork"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_314.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_314.cpp,54
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1156,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Resource Fork"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_315.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Resource Fork"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_315.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_315.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1177,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Failed to compress data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_316.cpp,"{
		case Z_OK:
		case Z_STREAM_END:
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Failed to compress data"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_316.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_316.cpp,41
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1304,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for decmpfs"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_317.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for decmpfs"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_317.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_317.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1334,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ResourceFork"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_318.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ResourceFork"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_318.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_318.cpp,47
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1346,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for decmpfs"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_319.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for decmpfs"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_319.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_319.cpp,59
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1425,"archive_set_error(&a->archive, 0,
		    ""Attempt to write to an empty file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_320.cpp,"{
		archive_set_error(&a->archive, 0,
		    ""Attempt to write to an empty file"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_320.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_320.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1440,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Seek failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_321.cpp,"{
			/* Can't support backward move. */
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Seek failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_321.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_321.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1456,"archive_set_error(&a->archive, errno,
					    ""Write failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_322.cpp,"{
					archive_set_error(&a->archive, errno,
					    ""Write failed"");
					return (ARCHIVE_WARN);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_322.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_322.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1504,"archive_set_error(&a->archive, 0,
		    ""Too much data: Truncating file at %ju bytes"",
		    (uintmax_t)a->filesize);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_323.cpp,"{
		archive_set_error(&a->archive, 0,
		    ""Too much data: Truncating file at %ju bytes"",
		    (uintmax_t)a->filesize);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_323.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_323.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1572,"archive_set_error(&a->archive, errno,
			    ""File size could not be restored"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_324.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""File size could not be restored"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_324.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_324.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1590,"archive_set_error(&a->archive, errno,
				    ""Seek failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_325.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Seek failed"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_325.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_325.cpp,61
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1595,"archive_set_error(&a->archive, errno,
				    ""Write to restore size failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_326.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Write to restore size failed"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_326.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_326.cpp,66
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1912,"archive_set_error(&a->archive, errno,
			    ""Could not unlink"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_327.cpp,"{
			/* We tried, but couldn't get rid of it. */
			archive_set_error(&a->archive, errno,
			    ""Could not unlink"");
			return(ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_327.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_327.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1930,"archive_set_error(&a->archive, en,
		    ""Hard-link target '%s' does not exist."",
		    archive_entry_hardlink(a->entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_328.cpp,"{
		archive_set_error(&a->archive, en,
		    ""Hard-link target '%s' does not exist."",
		    archive_entry_hardlink(a->entry));
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_328.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_328.cpp,44
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1953,"archive_set_error(&a->archive, errno,
			    ""Can't remove already-existing dir"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_329.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't remove already-existing dir"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_329.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_329.cpp,67
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1980,"archive_set_error(&a->archive, errno,
			    ""Can't stat existing object"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_330.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't stat existing object"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_330.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_330.cpp,94
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2000,"archive_set_error(&a->archive, 0,
			    ""Refusing to overwrite archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_331.cpp,"{
			archive_set_error(&a->archive, 0,
			    ""Refusing to overwrite archive"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_331.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_331.cpp,114
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2010,"archive_set_error(&a->archive, errno,
				    ""Can't unlink already-existing object"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_332.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't unlink already-existing object"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_332.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_332.cpp,124
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2022,"archive_set_error(&a->archive, errno,
				    ""Can't replace existing directory with non-directory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_333.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't replace existing directory with non-directory"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_333.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_333.cpp,136
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2047,"archive_set_error(&a->archive, en, ""Can't create '%s'"",
			    a->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_334.cpp,"archive_set_error(&a->archive, en, ""Can't create '%s'"",
			    a->name)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_334.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_334.cpp,161
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2093,"archive_set_error(&a->archive, error_number, ""%s"",
			    error_string.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_335.cpp,"{
			archive_set_error(&a->archive, error_number, ""%s"",
			    error_string.s);
			free(linkname_copy);
			archive_string_free(&error_string);
			/*
			 * EPERM is more appropriate than error_number for our
			 * callers
			 */
			return (EPERM);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_335.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_335.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2106,"archive_set_error(&a->archive, error_number, ""%s"",
			    error_string.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_336.cpp,"{
			archive_set_error(&a->archive, error_number, ""%s"",
			    error_string.s);
			free(linkname_copy);
			archive_string_free(&error_string);
			/*
			 * EPERM is more appropriate than error_number for our
			 * callers
			 */
			return (EPERM);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_336.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_336.cpp,45
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2350,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_337.cpp,"{
		case Z_OK:
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up compressor"");
			ret = ARCHIVE_FATAL;
			break;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_337.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_337.cpp,31
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2439,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for a fixup"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_338.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for a fixup"");
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_338.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_338.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2469,"archive_string_sprintf(a_estr, errstr, path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_339.cpp,"archive_string_sprintf(a_estr, errstr, path)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_339.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_339.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2574,"fsobj_error(a_eno, a_estr, errno,
				    ""Could not stat %s"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_340.cpp,"{
				/*
				 * Treat any other error as fatal - best to be
				 * paranoid here.
				 * Note: This effectively disables deep
				 * directory support when security checks are
				 * enabled. Otherwise, very long pathnames that
				 * trigger an error here could evade the
				 * sandbox.
				 * TODO: We could do better, but it would
				 * probably require merging the symlink checks
				 * with the deep-directory editing.
				 */
				fsobj_error(a_eno, a_estr, errno,
				    ""Could not stat %s"", path);
				res = ARCHIVE_FAILED;
				break;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_340.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_340.cpp,91
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2583,"fsobj_error(a_eno, a_estr, errno,
					    ""Could not chdir %s"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_341.cpp,"{
					tail[0] = c;
					fsobj_error(a_eno, a_estr, errno,
					    ""Could not chdir %s"", path);
					res = (ARCHIVE_FATAL);
					break;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_341.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_341.cpp,100
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2600,"fsobj_error(a_eno, a_estr, errno,
					    ""Could not remove symlink %s"",
					    path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_342.cpp,"{
					tail[0] = c;
					fsobj_error(a_eno, a_estr, errno,
					    ""Could not remove symlink %s"",
					    path);
					res = ARCHIVE_FAILED;
					break;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_342.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_342.cpp,117
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2630,"fsobj_error(a_eno, a_estr, 0,
					    ""Cannot remove intervening ""
					    ""symlink %s"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_343.cpp,"{
					tail[0] = c;
					fsobj_error(a_eno, a_estr, 0,
					    ""Cannot remove intervening ""
					    ""symlink %s"", path);
					res = ARCHIVE_FAILED;
					break;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_343.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_343.cpp,147
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2652,"fsobj_error(a_eno, a_estr,
						    errno,
						    ""Could not stat %s"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_344.cpp,"{
						fsobj_error(a_eno, a_estr,
						    errno,
						    ""Could not stat %s"", path);
						res = (ARCHIVE_FAILED);
						break;
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_344.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_344.cpp,169
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2661,"fsobj_error(a_eno, a_estr,
						    errno,
						    ""Could not chdir %s"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_345.cpp,"{
						tail[0] = c;
						fsobj_error(a_eno, a_estr,
						    errno,
						    ""Could not chdir %s"", path);
						res = (ARCHIVE_FATAL);
						break;
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_345.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_345.cpp,178
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2674,"fsobj_error(a_eno, a_estr, 0,
					    ""Cannot extract through ""
					    ""symlink %s"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_346.cpp,"{
					tail[0] = c;
					fsobj_error(a_eno, a_estr, 0,
					    ""Cannot extract through ""
					    ""symlink %s"", path);
					res = ARCHIVE_FAILED;
					break;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_346.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_346.cpp,191
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2682,"fsobj_error(a_eno, a_estr, 0,
				    ""Cannot extract through symlink %s"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_347.cpp,"{
				tail[0] = c;
				fsobj_error(a_eno, a_estr, 0,
				    ""Cannot extract through symlink %s"", path);
				res = ARCHIVE_FAILED;
				break;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_347.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_347.cpp,199
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2700,"fsobj_error(a_eno, a_estr, errno,
			    ""chdir() failure"", """");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_348.cpp,"{
			fsobj_error(a_eno, a_estr, errno,
			    ""chdir() failure"", """");
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_348.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_348.cpp,217
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2729,"archive_set_error(&a->archive, error_number, ""%s"",
		    error_string.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_349.cpp,"{
		archive_set_error(&a->archive, error_number, ""%s"",
		    error_string.s);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_349.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_349.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2819,"fsobj_error(a_eno, a_estr, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty "", ""pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_350.cpp,"{
		fsobj_error(a_eno, a_estr, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty "", ""pathname"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_350.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_350.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2830,"fsobj_error(a_eno, a_estr, ARCHIVE_ERRNO_MISC,
			    ""Path is "", ""absolute"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_351.cpp,"{
			fsobj_error(a_eno, a_estr, ARCHIVE_ERRNO_MISC,
			    ""Path is "", ""absolute"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_351.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_351.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2860,"fsobj_error(a_eno, a_estr,
						    ARCHIVE_ERRNO_MISC,
						    ""Path contains "", ""'..'"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_352.cpp,"{
						fsobj_error(a_eno, a_estr,
						    ARCHIVE_ERRNO_MISC,
						    ""Path contains "", ""'..'"");
						return (ARCHIVE_FAILED);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_352.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_352.cpp,50
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2918,"archive_set_error(&a->archive, error_number, ""%s"",
		    error_string.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_353.cpp,"{
		archive_set_error(&a->archive, error_number, ""%s"",
		    error_string.s);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_353.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_353.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2990,"archive_set_error(&a->archive, EEXIST,
			    ""Can't create directory '%s'"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_354.cpp,"{
			archive_set_error(&a->archive, EEXIST,
			    ""Can't create directory '%s'"", path);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_354.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_354.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2995,"archive_set_error(&a->archive, errno,
			    ""Can't create directory '%s': ""
			    ""Conflicting file cannot be removed"",
			    path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_355.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't create directory '%s': ""
			    ""Conflicting file cannot be removed"",
			    path);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_355.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_355.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3003,"archive_set_error(&a->archive, errno,
		    ""Can't test directory '%s'"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_356.cpp,"{
		/* Stat failed? */
		archive_set_error(&a->archive, errno,
		    ""Can't test directory '%s'"", path);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_356.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_356.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3047,"archive_set_error(&a->archive, errno, ""Failed to create dir '%s'"",
	    path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_357.cpp,"{
	struct stat st;
	struct fixup_entry *le;
	char *slash, *base;
	mode_t mode_final, mode;
	int r;

	/* Check for special names and just skip them. */
	slash = strrchr(path, '/');
	if (slash == NULL)
		base = path;
	else
		base = slash + 1;

	if (base[0] == '\0' ||
	    (base[0] == '.' && base[1] == '\0') ||
	    (base[0] == '.' && base[1] == '.' && base[2] == '\0')) {
		/* Don't bother trying to create null path, '.', or '..'. */
		if (slash != NULL) {
			*slash = '\0';
			r = create_dir(a, path);
			*slash = '/';
			return (r);
		}
		return (ARCHIVE_OK);
	}

	/*
	 * Yes, this should be stat() and not lstat().  Using lstat()
	 * here loses the ability to extract through symlinks.  Also note
	 * that this should not use the a->st cache.
	 */
	if (stat(path, &st) == 0) {
		if (S_ISDIR(st.st_mode))
			return (ARCHIVE_OK);
		if ((a->flags & ARCHIVE_EXTRACT_NO_OVERWRITE)) {
			archive_set_error(&a->archive, EEXIST,
			    ""Can't create directory '%s'"", path);
			return (ARCHIVE_FAILED);
		}
		if (unlink(path) != 0) {
			archive_set_error(&a->archive, errno,
			    ""Can't create directory '%s': ""
			    ""Conflicting file cannot be removed"",
			    path);
			return (ARCHIVE_FAILED);
		}
	} else if (errno != ENOENT && errno != ENOTDIR) {
		/* Stat failed? */
		archive_set_error(&a->archive, errno,
		    ""Can't test directory '%s'"", path);
		return (ARCHIVE_FAILED);
	} else if (slash != NULL) {
		*slash = '\0';
		r = create_dir(a, path);
		*slash = '/';
		if (r != ARCHIVE_OK)
			return (r);
	}

	/*
	 * Mode we want for the final restored directory.  Per POSIX,
	 * implicitly-created dirs must be created obeying the umask.
	 * There's no mention whether this is different for privileged
	 * restores (which the rest of this code handles by pretending
	 * umask=0).  I've chosen here to always obey the user's umask for
	 * implicit dirs, even if _EXTRACT_PERM was specified.
	 */
	mode_final = DEFAULT_DIR_MODE & ~a->user_umask;
	/* Mode we want on disk during the restore process. */
	mode = mode_final;
	mode |= MINIMUM_DIR_MODE;
	mode &= MAXIMUM_DIR_MODE;
	if (mkdir(path, mode) == 0) {
		if (mode != mode_final) {
			le = new_fixup(a, path);
			if (le == NULL)
				return (ARCHIVE_FATAL);
			le->fixup |=TODO_MODE_BASE;
			le->mode = mode_final;
		}
		return (ARCHIVE_OK);
	}

	/*
	 * Without the following check, a/b/../b/c/d fails at the
	 * second visit to 'b', so 'd' can't be created.  Note that we
	 * don't add it to the fixup list here, as it's already been
	 * added.
	 */
	if (stat(path, &st) == 0 && S_ISDIR(st.st_mode))
		return (ARCHIVE_OK);

	archive_set_error(&a->archive, errno, ""Failed to create dir '%s'"",
	    path);
	return (ARCHIVE_FAILED);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_357.cpp,"[14, 0, 0, 0, 0, 0, 11, 0, 0, 0, 16, 0, 0, 0, 0, 144, 0, 0, 5, 7, 0, 0, 0, 27, 0, 0, 0, 0, 3, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 14, 14, 1, 0, 14, 0, 0, 20, 2, 33, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_357.cpp,95
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3071,"archive_set_error(&a->archive, errno,
		    ""Can't set UID=%jd"", (intmax_t)a->uid);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_358.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Can't set UID=%jd"", (intmax_t)a->uid);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_358.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_358.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3102,"archive_set_error(&a->archive, errno,
	    ""Can't set user=%jd/group=%jd for %s"",
	    (intmax_t)a->uid, (intmax_t)a->gid, a->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_359.cpp,"{
#ifndef __CYGWIN__
/* unfortunately, on win32 there is no 'root' user with uid 0,
   so we just have to try the chown and see if it works */

	/* If we know we can't change it, don't bother trying. */
	if (a->user_uid != 0  &&  a->user_uid != a->uid) {
		archive_set_error(&a->archive, errno,
		    ""Can't set UID=%jd"", (intmax_t)a->uid);
		return (ARCHIVE_WARN);
	}
#endif

#ifdef HAVE_FCHOWN
	/* If we have an fd, we can avoid a race. */
	if (a->fd >= 0 && fchown(a->fd, a->uid, a->gid) == 0) {
		/* We've set owner and know uid/gid are correct. */
		a->todo &= ~(TODO_OWNER | TODO_SGID_CHECK | TODO_SUID_CHECK);
		return (ARCHIVE_OK);
	}
#endif

	/* We prefer lchown() but will use chown() if that's all we have. */
	/* Of course, if we have neither, this will always fail. */
#ifdef HAVE_LCHOWN
	if (lchown(a->name, a->uid, a->gid) == 0) {
		/* We've set owner and know uid/gid are correct. */
		a->todo &= ~(TODO_OWNER | TODO_SGID_CHECK | TODO_SUID_CHECK);
		return (ARCHIVE_OK);
	}
#elif HAVE_CHOWN
	if (!S_ISLNK(a->mode) && chown(a->name, a->uid, a->gid) == 0) {
		/* We've set owner and know uid/gid are correct. */
		a->todo &= ~(TODO_OWNER | TODO_SGID_CHECK | TODO_SUID_CHECK);
		return (ARCHIVE_OK);
	}
#endif

	archive_set_error(&a->archive, errno,
	    ""Can't set user=%jd/group=%jd for %s"",
	    (intmax_t)a->uid, (intmax_t)a->gid, a->name);
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_359.cpp,"[4, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 6, 0, 0, 5, 0, 20, 7, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_359.cpp,40
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3266,"archive_set_error(&a->archive, errno,
				  ""Can't restore time"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_360.cpp,"{
		archive_set_error(&a->archive, errno,
				  ""Can't restore time"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_360.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_360.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3340,"archive_set_error(&a->archive, -1,
				    ""Can't restore SGID bit"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_361.cpp,"{
				/*
				 * This is only an error if you
				 * requested owner restore.  If you
				 * didn't, we'll try to restore
				 * sgid/suid, but won't consider it a
				 * problem if we can't.
				 */
				archive_set_error(&a->archive, -1,
				    ""Can't restore SGID bit"");
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_361.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_361.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3350,"archive_set_error(&a->archive, -1,
				    ""Can't restore SUID bit"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_362.cpp,"{
				archive_set_error(&a->archive, -1,
				    ""Can't restore SUID bit"");
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_362.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_362.cpp,35
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3366,"archive_set_error(&a->archive, -1,
				    ""Can't make file SUID"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_363.cpp,"{
				archive_set_error(&a->archive, -1,
				    ""Can't make file SUID"");
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_363.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_363.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3398,"archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_364.cpp,"{
			case ENOTSUP:
			case ENOSYS:
#if ENOTSUP != EOPNOTSUPP
			case EOPNOTSUPP:
#endif
				/*
				 * if lchmod is defined but the platform
				 * doesn't support it, silently ignore
				 * error
				 */
				break;
			default:
				archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_364.cpp,"[1, 0, 0, 0, 1, 0, 0, 0, 3, 1, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_364.cpp,83
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3414,"archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_365.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_365.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_365.cpp,99
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3423,"archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_366.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_366.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_366.cpp,108
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3581,"archive_set_error(&a->archive, errno,
		    ""Can't set file flags on symlink."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_367.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Can't set file flags on symlink."");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_367.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_367.cpp,36
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3588,"archive_set_error(&a->archive, errno,
	    ""Failed to set file flags"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_368.cpp,"{
	int r;

	(void)mode; /* UNUSED */
	if (set == 0  && clear == 0)
		return (ARCHIVE_OK);

	/*
	 * XXX Is the stat here really necessary?  Or can I just use
	 * the 'set' flags directly?  In particular, I'm not sure
	 * about the correct approach if we're overwriting an existing
	 * file that already has flags on it. XXX
	 */
	if ((r = lazy_stat(a)) != ARCHIVE_OK)
		return (r);

	a->st.st_flags &= ~clear;
	a->st.st_flags |= set;
#ifdef HAVE_FCHFLAGS
	/* If platform has fchflags() and we were given an fd, use it. */
	if (fd >= 0 && fchflags(fd, a->st.st_flags) == 0)
		return (ARCHIVE_OK);
#endif
	/*
	 * If we can't use the fd to set the flags, we'll use the
	 * pathname to set flags.  We prefer lchflags() but will use
	 * chflags() if we must.
	 */
#ifdef HAVE_LCHFLAGS
	if (lchflags(name, a->st.st_flags) == 0)
		return (ARCHIVE_OK);
#elif defined(HAVE_CHFLAGS)
	if (S_ISLNK(a->st.st_mode)) {
		archive_set_error(&a->archive, errno,
		    ""Can't set file flags on symlink."");
		return (ARCHIVE_WARN);
	}
	if (chflags(name, a->st.st_flags) == 0)
		return (ARCHIVE_OK);
#endif
	archive_set_error(&a->archive, errno,
	    ""Failed to set file flags"");
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_368.cpp,"[6, 0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0, 65, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 6, 0, 0, 8, 0, 0, 5, 0, 15, 5, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_368.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3687,"archive_set_error(&a->archive, errno,
	    ""Failed to set file flags"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_369.cpp,"{
	int		 ret;
	int		 myfd = fd;
	int newflags, oldflags;
	int sf_mask = 0;

	if (set == 0 && clear == 0)
		return (ARCHIVE_OK);
	/* Only regular files and dirs can have flags. */
	if (!S_ISREG(mode) && !S_ISDIR(mode))
		return (ARCHIVE_OK);

	/* If we weren't given an fd, open it ourselves. */
	if (myfd < 0) {
		myfd = open(name, O_RDONLY | O_NONBLOCK | O_BINARY | O_CLOEXEC);
		__archive_ensure_cloexec_flag(myfd);
	}
	if (myfd < 0)
		return (ARCHIVE_OK);

	/*
	 * Linux has no define for the flags that are only settable by
	 * the root user.  This code may seem a little complex, but
	 * there seem to be some Linux systems that lack these
	 * defines. (?)  The code below degrades reasonably gracefully
	 * if sf_mask is incomplete.
	 */
#if defined(FS_IMMUTABLE_FL)
	sf_mask |= FS_IMMUTABLE_FL;
#elif defined(EXT2_IMMUTABLE_FL)
	sf_mask |= EXT2_IMMUTABLE_FL;
#endif
#if defined(FS_APPEND_FL)
	sf_mask |= FS_APPEND_FL;
#elif defined(EXT2_APPEND_FL)
	sf_mask |= EXT2_APPEND_FL;
#endif
#if defined(FS_JOURNAL_DATA_FL)
	sf_mask |= FS_JOURNAL_DATA_FL;
#endif
	/*
	 * XXX As above, this would be way simpler if we didn't have
	 * to read the current flags from disk. XXX
	 */
	ret = ARCHIVE_OK;

	/* Read the current file flags. */
	if (ioctl(myfd,
#ifdef FS_IOC_GETFLAGS
	    FS_IOC_GETFLAGS,
#else
	    EXT2_IOC_GETFLAGS,
#endif
	    &oldflags) < 0)
		goto fail;

	/* Try setting the flags as given. */
	newflags = (oldflags & ~clear) | set;
	if (ioctl(myfd,
#ifdef FS_IOC_SETFLAGS
	    FS_IOC_SETFLAGS,
#else
	    EXT2_IOC_SETFLAGS,
#endif
	    &newflags) >= 0)
		goto cleanup;
	if (errno != EPERM)
		goto fail;

	/* If we couldn't set all the flags, try again with a subset. */
	newflags &= ~sf_mask;
	oldflags &= sf_mask;
	newflags |= oldflags;
	if (ioctl(myfd,
#ifdef FS_IOC_SETFLAGS
	    FS_IOC_SETFLAGS,
#else
	    EXT2_IOC_SETFLAGS,
#endif
	    &newflags) >= 0)
		goto cleanup;

	/* We couldn't set the flags, so report the failure. */
fail:
	archive_set_error(&a->archive, errno,
	    ""Failed to set file flags"");
	ret = ARCHIVE_WARN;
cleanup:
	if (fd < 0)
		close(myfd);
	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_369.cpp,"[12, 0, 0, 0, 0, 0, 4, 0, 0, 0, 10, 2, 4, 0, 0, 99, 0, 0, 4, 5, 0, 0, 2, 10, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 9, 9, 3, 0, 14, 0, 0, 15, 0, 26, 17, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_369.cpp,87
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3754,"archive_set_error(&a->archive, errno,
		    ""Failed to read metadata(xattr)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_370.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to read metadata(xattr)"");
		ret = ARCHIVE_WARN;
		goto exit_xattr;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_370.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_370.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3761,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for metadata(xattr)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_371.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for metadata(xattr)"");
		ret = ARCHIVE_FATAL;
		goto exit_xattr;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_371.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_371.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3768,"archive_set_error(&a->archive, errno,
		    ""Failed to read metadata(xattr)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_372.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to read metadata(xattr)"");
		ret = ARCHIVE_WARN;
		goto exit_xattr;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_372.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_372.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3781,"archive_set_error(&a->archive, errno,
			    ""Failed to get metadata(xattr)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_373.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to get metadata(xattr)"");
			ret = ARCHIVE_WARN;
			goto exit_xattr;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_373.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_373.cpp,36
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3789,"archive_set_error(&a->archive, ENOMEM,
			    ""Failed to get metadata(xattr)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_374.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Failed to get metadata(xattr)"");
			ret = ARCHIVE_WARN;
			free(xattr_val_saved);
			goto exit_xattr;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_374.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_374.cpp,44
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3797,"archive_set_error(&a->archive, errno,
			    ""Failed to get metadata(xattr)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_375.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to get metadata(xattr)"");
			ret = ARCHIVE_WARN;
			goto exit_xattr;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_375.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_375.cpp,52
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3804,"archive_set_error(&a->archive, errno,
			    ""Failed to get metadata(xattr)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_376.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to get metadata(xattr)"");
			ret = ARCHIVE_WARN;
			goto exit_xattr;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_376.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_376.cpp,59
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3831,"archive_set_error(&a->archive, errno,
		    ""Failed to get metadata(acl)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_377.cpp,"{
		if (errno == ENOENT)
			/* There are not any ACLs. */
			return (ret);
		archive_set_error(&a->archive, errno,
		    ""Failed to get metadata(acl)"");
		ret = ARCHIVE_WARN;
		goto exit_acl;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_377.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 1, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_377.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3839,"archive_set_error(&a->archive, errno,
		    ""Failed to get metadata(acl)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_378.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to get metadata(acl)"");
		ret = ARCHIVE_WARN;
		goto exit_acl;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_378.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_378.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3863,"archive_set_error(&a->archive, errno,
		    ""Failed to mkstemp"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_379.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to mkstemp"");
		archive_string_free(&tmpdatafork);
		return (-1);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_379.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_379.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3871,"archive_set_error(&a->archive, errno,
		    ""Failed to restore metadata"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_380.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to restore metadata"");
		close(tmpfd);
		tmpfd = -1;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_380.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_380.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3901,"archive_set_error(&a->archive, errno,
			    ""Failed to open the data fork for metadata"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_381.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to open the data fork for metadata"");
			close(tmpfd);
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_381.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_381.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3918,"archive_set_error(&a->archive, errno,
			    ""Failed to restore metadata"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_382.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to restore metadata"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_382.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_382.cpp,37
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3945,"archive_set_error(&a->archive, errno,
				  ""Failed to restore metadata"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_383.cpp,"{
		archive_set_error(&a->archive, errno,
				  ""Failed to restore metadata"");
		archive_string_free(&tmp);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_383.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_383.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3953,"archive_set_error(&a->archive, errno,
				  ""Failed to restore metadata"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_384.cpp,"{
		archive_set_error(&a->archive, errno,
				  ""Failed to restore metadata"");
		ret = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_384.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_384.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4010,"archive_set_error(&a->archive, errno,
		    ""Failed to open a restoring file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_385.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to open a restoring file"");
		ret = ARCHIVE_WARN;
		goto skip_appledouble;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_385.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_385.cpp,37
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4016,"archive_set_error(&a->archive, errno,
		    ""Failed to read a restoring file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_386.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to read a restoring file"");
		close(fd);
		ret = ARCHIVE_WARN;
		goto skip_appledouble;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_386.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_386.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4090,"archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_387.cpp,"{
						warning_done = 1;
						archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_387.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_387.cpp,39
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4097,"archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_388.cpp,"archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_388.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_388.cpp,46
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4102,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid extended attribute encountered"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_389.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid extended attribute encountered"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_389.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_389.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4137,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Can't restore extended attribute ``%s''"",
				    name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_390.cpp,"{
				/* Warn about other extended attributes. */
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Can't restore extended attribute ``%s''"",
				    name);
				ret = ARCHIVE_WARN;
				continue;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_390.cpp,"[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_390.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4161,"archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_391.cpp,"{
						warning_done = 1;
						archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_391.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_391.cpp,47
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4168,"archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_392.cpp,"{
					archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_392.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_392.cpp,54
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4191,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Cannot restore extended attributes on this system"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_393.cpp,"{
		warning_done = 1;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Cannot restore extended attributes on this system"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_393.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_393.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_b64encode.cpp,91,"archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for b64encode filter"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_394.cpp,"{
		archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for b64encode filter"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_394.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_394.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_b64encode.cpp,121,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""mode option requires octal digits"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_395.cpp,"{
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""mode option requires octal digits"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_395.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_395.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_b64encode.cpp,129,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""name option requires a string"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_396.cpp,"{
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""name option requires a string"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_396.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_396.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_b64encode.cpp,169,"archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for b64encode buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_397.cpp,"{
		archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for b64encode buffer"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_397.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_397.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_b64encode.cpp,174,"archive_string_sprintf(&state->encoded_buff, ""begin-base64 %o %s\n"",
	    state->mode, state->name.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_398.cpp,"{
	struct private_b64encode *state = (struct private_b64encode *)f->data;
	size_t bs = 65536, bpb;
	int ret;

	ret = __archive_write_open_filter(f->next_filter);
	if (ret != ARCHIVE_OK)
		return (ret);

	if (f->archive->magic == ARCHIVE_WRITE_MAGIC) {
		/* Buffer size should be a multiple number of the of bytes
		 * per block for performance. */
		bpb = archive_write_get_bytes_per_block(f->archive);
		if (bpb > bs)
			bs = bpb;
		else if (bpb != 0)
			bs -= bs % bpb;
	}

	state->bs = bs;
	if (archive_string_ensure(&state->encoded_buff, bs + 512) == NULL) {
		archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for b64encode buffer"");
		return (ARCHIVE_FATAL);
	}

	archive_string_sprintf(&state->encoded_buff, ""begin-base64 %o %s\n"",
	    state->mode, state->name.s);

	f->data = state;
	return (0);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_398.cpp,"[5, 0, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 0, 70, 0, 0, 3, 4, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 5, 0, 0, 5, 0, 0, 8, 1, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_398.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_b64encode.cpp,273,"archive_string_sprintf(&state->encoded_buff, ""====\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_399.cpp,"{
	struct private_b64encode *state = (struct private_b64encode *)f->data;
	int ret, ret2;

	/* Flush remaining bytes. */
	if (state->hold_len != 0)
		b64_encode(&state->encoded_buff, state->hold, state->hold_len);
	archive_string_sprintf(&state->encoded_buff, ""====\n"");
	/* Write the last block */
	archive_write_set_bytes_in_last_block(f->archive, 1);
	ret = __archive_write_filter(f->next_filter,
	    state->encoded_buff.s, archive_strlen(&state->encoded_buff));
	ret2 = __archive_write_close_filter(f->next_filter);
	if (ret > ret2)
		ret = ret2;
	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_399.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 55, 0, 0, 2, 3, 0, 0, 1, 3, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 2, 0, 0, 6, 0, 0, 6, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_399.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_extract.cpp,51,"archive_set_error(&a->archive, ENOMEM, ""Can't extract"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_400.cpp,"{
			archive_set_error(&a->archive, ENOMEM, ""Can't extract"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_400.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_400.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lrzip.cpp,68,"archive_set_error(_a, ENOMEM, ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_401.cpp,"{
		archive_set_error(_a, ENOMEM, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_401.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_401.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lrzip.cpp,74,"archive_set_error(_a, ENOMEM, ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_402.cpp,"{
		free(data);
		archive_set_error(_a, ENOMEM, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_402.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_402.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lrzip.cpp,89,"archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external lrzip program for lrzip compression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_403.cpp,"{
	struct archive_write_filter *f = __archive_write_allocate_filter(_a);
	struct write_lrzip *data;

	archive_check_magic(_a, ARCHIVE_WRITE_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_write_add_filter_lrzip"");

	data = calloc(1, sizeof(*data));
	if (data == NULL) {
		archive_set_error(_a, ENOMEM, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}
	data->pdata = __archive_write_program_allocate(""lrzip"");
	if (data->pdata == NULL) {
		free(data);
		archive_set_error(_a, ENOMEM, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}

	f->name = ""lrzip"";
	f->code = ARCHIVE_FILTER_LRZIP;
	f->data = data;
	f->open = archive_write_lrzip_open;
	f->options = archive_write_lrzip_options;
	f->write = archive_write_lrzip_write;
	f->close = archive_write_lrzip_close;
	f->free = archive_write_lrzip_free;

	/* Note: This filter always uses an external program, so we
	 * return ""warn"" to inform of the fact. */
	archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external lrzip program for lrzip compression"");
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_403.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 72, 0, 0, 2, 2, 0, 0, 1, 7, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 40, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 9, 0, 0, 15, 0, 19, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_403.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,301,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate 7-Zip data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_404.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate 7-Zip data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_404.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_404.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,385,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unknown compression name: `%s'"",
			    value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_405.cpp,"{
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unknown compression name: `%s'"",
			    value);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_405.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_405.cpp,48
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,392,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""`%s' compression not supported ""
			    ""on this platform"",
			    name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_406.cpp,"{
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""`%s' compression not supported ""
			    ""on this platform"",
			    name);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_406.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_406.cpp,55
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,405,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Illegal value `%s'"",
			    value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_407.cpp,"{
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Illegal value `%s'"",
			    value);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_407.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_407.cpp,68
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,532,"archive_set_error(&a->archive, errno,
			    ""Couldn't create temporary file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_408.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Couldn't create temporary file"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_408.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_408.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,542,"archive_set_error(&(a->archive), errno,
			    ""fwrite function failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_409.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""fwrite function failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_409.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_409.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,672,"archive_set_error(&(a->archive), errno, ""lseek failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_410.cpp,"{
		archive_set_error(&(a->archive), errno, ""lseek failed"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_410.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_410.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,687,"archive_set_error(&(a->archive), errno,
			    ""Can't read temporary file(%jd)"",
			    (intmax_t)rs);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_411.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Can't read temporary file(%jd)"",
			    (intmax_t)rs);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_411.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_411.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,693,"archive_set_error(&(a->archive), 0,
			    ""Truncated 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_412.cpp,"{
			archive_set_error(&(a->archive), 0,
			    ""Truncated 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_412.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_412.cpp,30
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1499,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_413.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_413.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_413.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1507,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for UTF-16LE"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_414.cpp,"{
			free(file);
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for UTF-16LE"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_414.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_414.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1511,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""A filename cannot be converted to UTF-16LE;""
		    ""You should disable making Joliet extension"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_415.cpp,"{
		if (errno == ENOMEM) {
			free(file);
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for UTF-16LE"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""A filename cannot be converted to UTF-16LE;""
		    ""You should disable making Joliet extension"");
		ret = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_415.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_415.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1519,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for Name"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_416.cpp,"{
		free(file);
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for Name"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_416.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_416.cpp,35
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1613,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
	    ""%s compression not supported on this platform"", name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_417.cpp,"{

	archive_set_error(a, ARCHIVE_ERRNO_MISC,
	    ""%s compression not supported on this platform"", name);
	lastrm->valid = 0;
	lastrm->real_stream = NULL;
	return (ARCHIVE_FAILED);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_417.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_417.cpp,5
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1683,"archive_set_error(a, ENOMEM,
		    ""Can't allocate memory for gzip stream"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_418.cpp,"{
		archive_set_error(a, ENOMEM,
		    ""Can't allocate memory for gzip stream"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_418.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_418.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1701,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_419.cpp,"{
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_419.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_419.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1743,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""GZip compression failed:""
		    "" deflate() call returned status %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_420.cpp,"{
	case Z_OK:
		return (ARCHIVE_OK);
	case Z_STREAM_END:
		return (ARCHIVE_EOF);
	default:
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""GZip compression failed:""
		    "" deflate() call returned status %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_420.cpp,"[0, 0, 0, 0, 0, 0, 3, 0, 2, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_420.cpp,31
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1762,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_421.cpp,"{
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_421.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_421.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1796,"archive_set_error(a, ENOMEM,
		    ""Can't allocate memory for bzip2 stream"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_422.cpp,"{
		archive_set_error(a, ENOMEM,
		    ""Can't allocate memory for bzip2 stream"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_422.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_422.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1814,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_423.cpp,"{
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_423.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_423.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1865,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Bzip2 compression failed:""
		    "" BZ2_bzCompress() call returned status %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_424.cpp,"{
	case BZ_RUN_OK:     /* Non-finishing */
	case BZ_FINISH_OK:  /* Finishing: There's more work to do */
		return (ARCHIVE_OK);
	case BZ_STREAM_END: /* Finishing: all done */
		/* Only occurs in finishing case */
		return (ARCHIVE_EOF);
	default:
		/* Any other return value indicates an error */
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Bzip2 compression failed:""
		    "" BZ2_bzCompress() call returned status %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_424.cpp,"[0, 0, 0, 0, 0, 0, 3, 0, 3, 1, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_424.cpp,40
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1884,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_425.cpp,"{
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_425.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_425.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1922,"archive_set_error(a, ENOMEM,
		    ""Can't allocate memory for lzma stream"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_426.cpp,"{
		archive_set_error(a, ENOMEM,
		    ""Can't allocate memory for lzma stream"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_426.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_426.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1932,"archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_427.cpp,"{
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_427.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_427.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1944,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""lzma_properties_size failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_428.cpp,"{
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""lzma_properties_size failed"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_428.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_428.cpp,36
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1953,"archive_set_error(a, ENOMEM,
			    ""Cannot allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_429.cpp,"{
			free(strm);
			lastrm->real_stream = NULL;
			archive_set_error(a, ENOMEM,
			    ""Cannot allocate memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_429.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_429.cpp,45
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1961,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""lzma_properties_encode failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_430.cpp,"{
			free(strm);
			lastrm->real_stream = NULL;
			archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""lzma_properties_encode failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_430.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_430.cpp,53
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1980,"archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_431.cpp,"{
	case LZMA_OK:
		lastrm->real_stream = strm;
		lastrm->valid = 1;
		lastrm->code = compression_code_lzma;
		lastrm->end = compression_end_lzma;
		r = ARCHIVE_OK;
		break;
	case LZMA_MEM_ERROR:
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");
		r =  ARCHIVE_FATAL;
		break;
        default:
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""It's a bug in liblzma"");
		r =  ARCHIVE_FATAL;
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_431.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_431.cpp,72
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,1988,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""It's a bug in liblzma"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_432.cpp,"{
	case LZMA_OK:
		lastrm->real_stream = strm;
		lastrm->valid = 1;
		lastrm->code = compression_code_lzma;
		lastrm->end = compression_end_lzma;
		r = ARCHIVE_OK;
		break;
	case LZMA_MEM_ERROR:
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");
		r =  ARCHIVE_FATAL;
		break;
        default:
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""It's a bug in liblzma"");
		r =  ARCHIVE_FATAL;
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_432.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_432.cpp,80
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,2043,"archive_set_error(a, ENOMEM,
		    ""lzma compression error:""
		    "" %ju MiB would have been needed"",
		    (uintmax_t)((lzma_memusage(strm) + 1024 * 1024 -1)
			/ (1024 * 1024)));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_433.cpp,"{
	case LZMA_OK:
		/* Non-finishing case */
		return (ARCHIVE_OK);
	case LZMA_STREAM_END:
		/* This return can only occur in finishing case. */
		return (ARCHIVE_EOF);
	case LZMA_MEMLIMIT_ERROR:
		archive_set_error(a, ENOMEM,
		    ""lzma compression error:""
		    "" %ju MiB would have been needed"",
		    (uintmax_t)((lzma_memusage(strm) + 1024 * 1024 -1)
			/ (1024 * 1024)));
		return (ARCHIVE_FATAL);
	default:
		/* Any other return value indicates an error */
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""lzma compression failed:""
		    "" lzma_code() call returned status %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_433.cpp,"[0, 0, 0, 0, 0, 0, 4, 0, 3, 1, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_433.cpp,30
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,2051,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""lzma compression failed:""
		    "" lzma_code() call returned status %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_434.cpp,"{
	case LZMA_OK:
		/* Non-finishing case */
		return (ARCHIVE_OK);
	case LZMA_STREAM_END:
		/* This return can only occur in finishing case. */
		return (ARCHIVE_EOF);
	case LZMA_MEMLIMIT_ERROR:
		archive_set_error(a, ENOMEM,
		    ""lzma compression error:""
		    "" %ju MiB would have been needed"",
		    (uintmax_t)((lzma_memusage(strm) + 1024 * 1024 -1)
			/ (1024 * 1024)));
		return (ARCHIVE_FATAL);
	default:
		/* Any other return value indicates an error */
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""lzma compression failed:""
		    "" lzma_code() call returned status %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_434.cpp,"[0, 0, 0, 0, 0, 0, 4, 0, 3, 1, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_434.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,2143,"archive_set_error(a, ENOMEM,
		    ""Can't allocate memory for PPMd"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_435.cpp,"{
		archive_set_error(a, ENOMEM,
		    ""Can't allocate memory for PPMd"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_435.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_435.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,2150,"archive_set_error(a, ENOMEM,
		    ""Can't allocate memory for PPMd"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_436.cpp,"{
		free(strm);
		archive_set_error(a, ENOMEM,
		    ""Can't allocate memory for PPMd"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_436.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_436.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,2161,"archive_set_error(a, ENOMEM,
		    ""Coludn't allocate memory for PPMd"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_437.cpp,"{
		free(strm->buff);
		free(strm);
		archive_set_error(a, ENOMEM,
		    ""Coludn't allocate memory for PPMd"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_437.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_437.cpp,30
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.cpp,2174,"archive_set_error(a, ENOMEM,
		    ""Coludn't allocate memory for PPMd"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_438.cpp,"{
		free(strm->buff);
		free(strm);
		free(props);
		archive_set_error(a, ENOMEM,
		    ""Coludn't allocate memory for PPMd"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_438.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_438.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_add_passphrase.cpp,68,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_439.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_439.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_439.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_add_passphrase.cpp,75,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_440.cpp,"{
		free(p);
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_440.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_440.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_add_passphrase.cpp,92,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Empty passphrase is unacceptable"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_441.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Empty passphrase is unacceptable"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_441.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_441.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,233,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate mtree data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_442.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate mtree data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_442.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_442.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,765,"archive_set_error(&a->archive, errno, ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_443.cpp,"{
		archive_set_error(&a->archive, errno, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_443.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_443.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,770,"archive_set_error(&a->archive, errno, ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_444.cpp,"{
		free(opt);
		archive_set_error(&a->archive, errno, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_444.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_444.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,841,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""/unset shall not contain `='"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_445.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""/unset shall not contain `='"");
		return ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_445.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_445.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,877,"archive_set_error(&a->archive, errno, ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_446.cpp,"{
		archive_set_error(&a->archive, errno, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_446.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_446.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,932,"archive_set_error(&a->archive, errno, ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_447.cpp,"{
		archive_set_error(&a->archive, errno, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_447.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_447.cpp,68
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1038,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Can't parse line %ju"", counter);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_448.cpp,"{
	ssize_t len;
	uintmax_t counter;
	char *p;
	struct mtree_option *global;
	struct mtree_entry *last_entry;
	int r, is_form_d;

	mtree->archive_format = ARCHIVE_FORMAT_MTREE;
	mtree->archive_format_name = ""mtree"";

	global = NULL;
	last_entry = NULL;

	(void)detect_form(a, &is_form_d);

	for (counter = 1; ; ++counter) {
		len = readline(a, mtree, &p, 65536);
		if (len == 0) {
			mtree->this_entry = mtree->entries;
			free_options(global);
			return (ARCHIVE_OK);
		}
		if (len < 0) {
			free_options(global);
			return ((int)len);
		}
		/* Leading whitespace is never significant, ignore it. */
		while (*p == ' ' || *p == '\t') {
			++p;
			--len;
		}
		/* Skip content lines and blank lines. */
		if (*p == '#')
			continue;
		if (*p == '\r' || *p == '\n' || *p == '\0')
			continue;
		if (*p != '/') {
			r = process_add_entry(a, mtree, &global, p, len,
			    &last_entry, is_form_d);
		} else if (len > 4 && strncmp(p, ""/set"", 4) == 0) {
			if (p[4] != ' ' && p[4] != '\t')
				break;
			r = process_global_set(a, &global, p);
		} else if (len > 6 && strncmp(p, ""/unset"", 6) == 0) {
			if (p[6] != ' ' && p[6] != '\t')
				break;
			r = process_global_unset(a, &global, p);
		} else
			break;

		if (r != ARCHIVE_OK) {
			free_options(global);
			return r;
		}
	}

	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Can't parse line %ju"", counter);
	free_options(global);
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_448.cpp,"[10, 1, 1, 0, 3, 2, 4, 0, 0, 0, 14, 0, 0, 0, 0, 110, 0, 0, 6, 7, 0, 0, 1, 29, 0, 0, 0, 0, 3, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 0, 12, 10, 1, 0, 12, 0, 0, 17, 2, 33, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_448.cpp,59
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1194,"archive_set_error(&a->archive, errno,
						""Can't open %s"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_449.cpp,"{
				archive_set_error(&a->archive, errno,
						""Can't open %s"", path);
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_449.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_449.cpp,85
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1203,"archive_set_error(&a->archive, errno,
						""Could not fstat %s"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_450.cpp,"{
				archive_set_error(&a->archive, errno,
						""Could not fstat %s"", path);
				r = ARCHIVE_WARN;
				/* If we can't stat it, don't keep it open. */
				close(mtree->fd);
				mtree->fd = -1;
				st = NULL;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_450.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_450.cpp,94
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1256,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""mtree specification has different""
					    "" type for %s"",
					    archive_entry_pathname(entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_451.cpp,"{
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""mtree specification has different""
					    "" type for %s"",
					    archive_entry_pathname(entry));
					r = ARCHIVE_WARN;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_451.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_451.cpp,147
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1355,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Missing type keyword in mtree specification"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_452.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Missing type keyword in mtree specification"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_452.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_452.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1404,"archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Unknown format `%s'"", val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_453.cpp,"{
			archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Unknown format `%s'"", val);
			return ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_453.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_453.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1411,"archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Missing number"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_454.cpp,"{
				archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Missing number"");
				return ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_454.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_454.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1416,"archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Too many arguments"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_455.cpp,"{
				archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Too many arguments"");
				return ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_455.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_455.cpp,31
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1423,"archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Not enough arguments"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_456.cpp,"{
			archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Not enough arguments"");
			return ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_456.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_456.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1429,"archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""%s"", error);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_457.cpp,"{
			archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""%s"", error);
			return ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_457.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_457.cpp,44
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1475,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Malformed attribute \""%s\"" (%d)"", key, key[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_458.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Malformed attribute \""%s\"" (%d)"", key, key[0]);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_458.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_458.cpp,30
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1542,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symbolic mode \""%s\"" unsupported"", val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_459.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symbolic mode \""%s\"" unsupported"", val);
				return ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_459.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_459.cpp,97
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1659,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Unrecognized file type \""%s\""; ""
				    ""assuming \""file\"""", val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_460.cpp,"{
			case 'b':
				if (strcmp(val, ""block"") == 0) {
					archive_entry_set_filetype(entry, AE_IFBLK);
					break;
				}
			case 'c':
				if (strcmp(val, ""char"") == 0) {
					archive_entry_set_filetype(entry,
						AE_IFCHR);
					break;
				}
			case 'd':
				if (strcmp(val, ""dir"") == 0) {
					archive_entry_set_filetype(entry,
						AE_IFDIR);
					break;
				}
			case 'f':
				if (strcmp(val, ""fifo"") == 0) {
					archive_entry_set_filetype(entry,
						AE_IFIFO);
					break;
				}
				if (strcmp(val, ""file"") == 0) {
					archive_entry_set_filetype(entry,
						AE_IFREG);
					break;
				}
			case 'l':
				if (strcmp(val, ""link"") == 0) {
					archive_entry_set_filetype(entry,
						AE_IFLNK);
					break;
				}
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Unrecognized file type \""%s\""; ""
				    ""assuming \""file\"""", val);
				archive_entry_set_filetype(entry, AE_IFREG);
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_460.cpp,"[6, 0, 0, 0, 6, 0, 1, 0, 5, 1, 7, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 14, 0, 0, 8, 0, 30, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_460.cpp,214
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1681,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unrecognized key %s=%s"", key, val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_461.cpp,"{
	case 'c':
		if (strcmp(key, ""content"") == 0
		    || strcmp(key, ""contents"") == 0) {
			parse_escapes(val, NULL);
			archive_strcpy(&mtree->contents_name, val);
			break;
		}
		if (strcmp(key, ""cksum"") == 0)
			break;
	case 'd':
		if (strcmp(key, ""device"") == 0) {
			/* stat(2) st_rdev field, e.g. the major/minor IDs
			 * of a char/block special file */
			int r;
			dev_t dev;

			*parsed_kws |= MTREE_HAS_DEVICE;
			r = parse_device(&dev, &a->archive, val);
			if (r == ARCHIVE_OK)
				archive_entry_set_rdev(entry, dev);
			return r;
		}
	case 'f':
		if (strcmp(key, ""flags"") == 0) {
			*parsed_kws |= MTREE_HAS_FFLAGS;
			archive_entry_copy_fflags_text(entry, val);
			break;
		}
	case 'g':
		if (strcmp(key, ""gid"") == 0) {
			*parsed_kws |= MTREE_HAS_GID;
			archive_entry_set_gid(entry, mtree_atol10(&val));
			break;
		}
		if (strcmp(key, ""gname"") == 0) {
			*parsed_kws |= MTREE_HAS_GNAME;
			archive_entry_copy_gname(entry, val);
			break;
		}
	case 'i':
		if (strcmp(key, ""inode"") == 0) {
			archive_entry_set_ino(entry, mtree_atol10(&val));
			break;
		}
	case 'l':
		if (strcmp(key, ""link"") == 0) {
			archive_entry_copy_symlink(entry, val);
			break;
		}
	case 'm':
		if (strcmp(key, ""md5"") == 0 || strcmp(key, ""md5digest"") == 0)
			break;
		if (strcmp(key, ""mode"") == 0) {
			if (val[0] >= '0' && val[0] <= '9') {
				*parsed_kws |= MTREE_HAS_PERM;
				archive_entry_set_perm(entry,
				    (mode_t)mtree_atol8(&val));
			} else {
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symbolic mode \""%s\"" unsupported"", val);
				return ARCHIVE_WARN;
			}
			break;
		}
	case 'n':
		if (strcmp(key, ""nlink"") == 0) {
			*parsed_kws |= MTREE_HAS_NLINK;
			archive_entry_set_nlink(entry,
				(unsigned int)mtree_atol10(&val));
			break;
		}
	case 'r':
		if (strcmp(key, ""resdevice"") == 0) {
			/* stat(2) st_dev field, e.g. the device ID where the
			 * inode resides */
			int r;
			dev_t dev;

			r = parse_device(&dev, &a->archive, val);
			if (r == ARCHIVE_OK)
				archive_entry_set_dev(entry, dev);
			return r;
		}
		if (strcmp(key, ""rmd160"") == 0 ||
		    strcmp(key, ""rmd160digest"") == 0)
			break;
	case 's':
		if (strcmp(key, ""sha1"") == 0 || strcmp(key, ""sha1digest"") == 0)
			break;
		if (strcmp(key, ""sha256"") == 0 ||
		    strcmp(key, ""sha256digest"") == 0)
			break;
		if (strcmp(key, ""sha384"") == 0 ||
		    strcmp(key, ""sha384digest"") == 0)
			break;
		if (strcmp(key, ""sha512"") == 0 ||
		    strcmp(key, ""sha512digest"") == 0)
			break;
		if (strcmp(key, ""size"") == 0) {
			archive_entry_set_size(entry, mtree_atol10(&val));
			break;
		}
	case 't':
		if (strcmp(key, ""tags"") == 0) {
			/*
			 * Comma delimited list of tags.
			 * Ignore the tags for now, but the interface
			 * should be extended to allow inclusion/exclusion.
			 */
			break;
		}
		if (strcmp(key, ""time"") == 0) {
			int64_t m;
			int64_t my_time_t_max = get_time_t_max();
			int64_t my_time_t_min = get_time_t_min();
			long ns = 0;

			*parsed_kws |= MTREE_HAS_MTIME;
			m = mtree_atol10(&val);
			/* Replicate an old mtree bug:
			 * 123456789.1 represents 123456789
			 * seconds and 1 nanosecond. */
			if (*val == '.') {
				++val;
				ns = (long)mtree_atol10(&val);
				if (ns < 0)
					ns = 0;
				else if (ns > 999999999)
					ns = 999999999;
			}
			if (m > my_time_t_max)
				m = my_time_t_max;
			else if (m < my_time_t_min)
				m = my_time_t_min;
			archive_entry_set_mtime(entry, (time_t)m, ns);
			break;
		}
		if (strcmp(key, ""type"") == 0) {
			switch (val[0]) {
			case 'b':
				if (strcmp(val, ""block"") == 0) {
					archive_entry_set_filetype(entry, AE_IFBLK);
					break;
				}
			case 'c':
				if (strcmp(val, ""char"") == 0) {
					archive_entry_set_filetype(entry,
						AE_IFCHR);
					break;
				}
			case 'd':
				if (strcmp(val, ""dir"") == 0) {
					archive_entry_set_filetype(entry,
						AE_IFDIR);
					break;
				}
			case 'f':
				if (strcmp(val, ""fifo"") == 0) {
					archive_entry_set_filetype(entry,
						AE_IFIFO);
					break;
				}
				if (strcmp(val, ""file"") == 0) {
					archive_entry_set_filetype(entry,
						AE_IFREG);
					break;
				}
			case 'l':
				if (strcmp(val, ""link"") == 0) {
					archive_entry_set_filetype(entry,
						AE_IFLNK);
					break;
				}
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Unrecognized file type \""%s\""; ""
				    ""assuming \""file\"""", val);
				archive_entry_set_filetype(entry, AE_IFREG);
				return (ARCHIVE_WARN);
			}
			*parsed_kws |= MTREE_HAS_TYPE;
			break;
		}
	case 'u':
		if (strcmp(key, ""uid"") == 0) {
			*parsed_kws |= MTREE_HAS_UID;
			archive_entry_set_uid(entry, mtree_atol10(&val));
			break;
		}
		if (strcmp(key, ""uname"") == 0) {
			*parsed_kws |= MTREE_HAS_UNAME;
			archive_entry_copy_uname(entry, val);
			break;
		}
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unrecognized key %s=%s"", key, val);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_461.cpp,"[37, 0, 0, 0, 27, 0, 5, 1, 17, 2, 40, 0, 0, 0, 0, 258, 0, 0, 8, 8, 0, 0, 3, 104, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 3, 0, 38, 37, 1, 0, 73, 0, 0, 44, 2, 144, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_461.cpp,236
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1707,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_462.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_462.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_462.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1721,"archive_set_error(&a->archive, errno, ""Can't read"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_463.cpp,"{
		archive_set_error(&a->archive, errno, ""Can't read"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_463.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_463.cpp,33
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1981,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Line too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_464.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Line too long"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_464.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_464.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.cpp,1988,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate working buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_465.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate working buffer"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_465.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_465.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,500,"archive_set_error(&a->archive,
          ARCHIVE_ERRNO_FILE_FORMAT,
          ""Truncated RAR file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_466.cpp,"{
      archive_set_error(&a->archive,
          ARCHIVE_ERRNO_FILE_FORMAT,
          ""Truncated RAR file data"");
      return (ARCHIVE_FATAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_466.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_466.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,629,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Truncated RAR file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_467.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Truncated RAR file data"");
    rar->valid = 0;
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_467.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_467.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,652,"archive_set_error(&a->archive, ENOMEM, ""Can't allocate rar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_468.cpp,"{
    archive_set_error(&a->archive, ENOMEM, ""Can't allocate rar data"");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_468.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_468.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,783,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
      ""Couldn't find out RAR header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_469.cpp,"{
  const void *h;
  const char *p, *q;
  size_t skip, total;
  ssize_t bytes, window;

  total = 0;
  window = 4096;
  while (total + window <= (1024 * 128)) {
    h = __archive_read_ahead(a, window, &bytes);
    if (h == NULL) {
      /* Remaining bytes are less than window. */
      window >>= 1;
      if (window < 0x40)
      	goto fatal;
      continue;
    }
    if (bytes < 0x40)
      goto fatal;
    p = h;
    q = p + bytes;

    /*
     * Scan ahead until we find something that looks
     * like the RAR header.
     */
    while (p + 7 < q) {
      if (memcmp(p, RAR_SIGNATURE, 7) == 0) {
      	skip = p - (const char *)h;
      	__archive_read_consume(a, skip);
      	return (ARCHIVE_OK);
      }
      p += 0x10;
    }
    skip = p - (const char *)h;
    __archive_read_consume(a, skip);
	total += skip;
  }
fatal:
  archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
      ""Couldn't find out RAR header"");
  return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_469.cpp,"[4, 2, 0, 0, 0, 1, 2, 0, 0, 0, 7, 1, 2, 0, 4, 62, 0, 0, 4, 7, 0, 0, 0, 12, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 6, 4, 0, 0, 5, 0, 0, 13, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_469.cpp,41
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,798,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
          ""rar: hdrcharset option needs a character-set name"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_470.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
          ""rar: hdrcharset option needs a character-set name"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_470.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_470.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,877,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
          ""Invalid marker header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_471.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
          ""Invalid marker header"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_471.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_471.cpp,59
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,888,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
          ""Invalid header size"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_472.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
          ""Invalid header size"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_472.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_472.cpp,70
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,900,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
            ""Invalid header size"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_473.cpp,"{
          archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
            ""Invalid header size"");
          return (ARCHIVE_FATAL);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_473.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_473.cpp,82
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,915,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""RAR encryption support unavailable."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_474.cpp,"{
        archive_entry_set_is_metadata_encrypted(entry, 1);
        archive_entry_set_is_data_encrypted(entry, 1);
        rar->has_encrypted_entries = 1;
         archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""RAR encryption support unavailable."");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_474.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_474.cpp,97
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,922,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
          ""Header CRC error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_475.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
          ""Header CRC error"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_475.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_475.cpp,104
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,941,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
          ""Invalid header size too small"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_476.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
          ""Invalid header size too small"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_476.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_476.cpp,123
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,948,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
            ""Invalid header size too small"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_477.cpp,"{
          archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
            ""Invalid header size too small"");
          return (ARCHIVE_FATAL);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_477.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_477.cpp,130
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,980,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		  ""Header CRC error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_478.cpp,"{
	      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		  ""Header CRC error"");
	      return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_478.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_478.cpp,162
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,994,"archive_set_error(&a->archive,  ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_479.cpp,"{
    case MARK_HEAD:
      if (memcmp(p, RAR_SIGNATURE, 7) != 0) {
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
          ""Invalid marker header"");
        return (ARCHIVE_FATAL);
      }
      __archive_read_consume(a, 7);
      break;

    case MAIN_HEAD:
      rar->main_flags = archive_le16dec(p + 3);
      skip = archive_le16dec(p + 5);
      if (skip < 7 + sizeof(rar->reserved1) + sizeof(rar->reserved2)) {
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
          ""Invalid header size"");
        return (ARCHIVE_FATAL);
      }
      if ((h = __archive_read_ahead(a, skip, NULL)) == NULL)
        return (ARCHIVE_FATAL);
      p = h;
      memcpy(rar->reserved1, p + 7, sizeof(rar->reserved1));
      memcpy(rar->reserved2, p + 7 + sizeof(rar->reserved1),
             sizeof(rar->reserved2));
      if (rar->main_flags & MHD_ENCRYPTVER) {
        if (skip < 7 + sizeof(rar->reserved1) + sizeof(rar->reserved2)+1) {
          archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
            ""Invalid header size"");
          return (ARCHIVE_FATAL);
        }
        rar->encryptver = *(p + 7 + sizeof(rar->reserved1) +
                            sizeof(rar->reserved2));
      }

      /* Main header is password encrypted, so we cannot read any
         file names or any other info about files from the header. */
      if (rar->main_flags & MHD_PASSWORD)
      {
        archive_entry_set_is_metadata_encrypted(entry, 1);
        archive_entry_set_is_data_encrypted(entry, 1);
        rar->has_encrypted_entries = 1;
         archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""RAR encryption support unavailable."");
        return (ARCHIVE_FATAL);
      }

      crc32_val = crc32(0, (const unsigned char *)p + 2, (unsigned)skip - 2);
      if ((crc32_val & 0xffff) != archive_le16dec(p)) {
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
          ""Header CRC error"");
        return (ARCHIVE_FATAL);
      }
      __archive_read_consume(a, skip);
      break;

    case FILE_HEAD:
      return read_header(a, entry, head_type);

    case COMM_HEAD:
    case AV_HEAD:
    case SUB_HEAD:
    case PROTECT_HEAD:
    case SIGN_HEAD:
    case ENDARC_HEAD:
      flags = archive_le16dec(p + 3);
      skip = archive_le16dec(p + 5);
      if (skip < 7) {
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
          ""Invalid header size too small"");
        return (ARCHIVE_FATAL);
      }
      if (flags & HD_ADD_SIZE_PRESENT)
      {
        if (skip < 7 + 4) {
          archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
            ""Invalid header size too small"");
          return (ARCHIVE_FATAL);
        }
        if ((h = __archive_read_ahead(a, skip, NULL)) == NULL)
          return (ARCHIVE_FATAL);
        p = h;
        skip += archive_le32dec(p + 7);
      }

      /* Skip over the 2-byte CRC at the beginning of the header. */
      crc32_expected = archive_le16dec(p);
      __archive_read_consume(a, 2);
      skip -= 2;

      /* Skim the entire header and compute the CRC. */
      crc32_val = 0;
      while (skip > 0) {
	      size_t to_read = skip;
	      ssize_t did_read;
	      if (to_read > 32 * 1024) {
		      to_read = 32 * 1024;
	      }
	      if ((h = __archive_read_ahead(a, to_read, &did_read)) == NULL) {
		      return (ARCHIVE_FATAL);
	      }
	      p = h;
	      crc32_val = crc32(crc32_val, (const unsigned char *)p, (unsigned)did_read);
	      __archive_read_consume(a, did_read);
	      skip -= did_read;
      }
      if ((crc32_val & 0xffff) != crc32_expected) {
	      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		  ""Header CRC error"");
	      return (ARCHIVE_FATAL);
      }
      if (head_type == ENDARC_HEAD)
	      return (ARCHIVE_EOF);
      break;

    case NEWSUB_HEAD:
      if ((ret = read_header(a, entry, head_type)) < ARCHIVE_WARN)
        return ret;
      break;

    default:
      archive_set_error(&a->archive,  ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file"");
      return (ARCHIVE_FATAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_479.cpp,"[16, 1, 0, 0, 4, 0, 15, 0, 10, 1, 18, 0, 0, 0, 2, 232, 0, 0, 2, 2, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147, 0, 162, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 17, 16, 0, 0, 41, 0, 0, 34, 0, 85, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_479.cpp,176
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1044,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Unsupported compression method for RAR file."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_480.cpp,"{
  case COMPRESS_METHOD_STORE:
    ret = read_data_stored(a, buff, size, offset);
    break;

  case COMPRESS_METHOD_FASTEST:
  case COMPRESS_METHOD_FAST:
  case COMPRESS_METHOD_NORMAL:
  case COMPRESS_METHOD_GOOD:
  case COMPRESS_METHOD_BEST:
    ret = read_data_compressed(a, buff, size, offset);
    if (ret != ARCHIVE_OK && ret != ARCHIVE_WARN)
      __archive_ppmd7_functions.Ppmd7_Free(&rar->ppmd7_context, &g_szalloc);
    break;

  default:
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Unsupported compression method for RAR file."");
    ret = ARCHIVE_FATAL;
    break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_480.cpp,"[1, 0, 0, 0, 3, 0, 0, 0, 6, 1, 2, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 5, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_480.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1146,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
              ""Attempt to seek past beginning of RAR data block"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_481.cpp,"{
            archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
              ""Attempt to seek past beginning of RAR data block"");
            return (ARCHIVE_FAILED);
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_481.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_481.cpp,57
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1162,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
              ""Error during seek of RAR file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_482.cpp,"{
            archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
              ""Error during seek of RAR file"");
            return (ARCHIVE_FAILED);
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_482.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_482.cpp,73
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1194,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
              ""Error during seek of RAR file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_483.cpp,"{
            archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
              ""Error during seek of RAR file"");
            return (ARCHIVE_FAILED);
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_483.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_483.cpp,105
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1237,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
      ""Seeking of compressed RAR files is unsupported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_484.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
      ""Seeking of compressed RAR files is unsupported"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_484.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_484.cpp,148
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1303,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
      ""Invalid header size"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_485.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
      ""Invalid header size"");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_485.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_485.cpp,42
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1332,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""RAR solid archive support unavailable."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_486.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""RAR solid archive support unavailable."");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_486.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_486.cpp,71
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1343,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
      ""Header CRC error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_487.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
      ""Header CRC error"");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_487.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_487.cpp,82
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1364,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""RAR encryption support unavailable."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_488.cpp,"{
	archive_entry_set_is_data_encrypted(entry, 1);
	rar->has_encrypted_entries = 1;
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""RAR encryption support unavailable."");
    /* Since it is only the data part itself that is encrypted we can at least
       extract information about the currently processed entry and don't need
       to return ARCHIVE_FATAL here. */
    /*return (ARCHIVE_FATAL);*/
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_488.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_488.cpp,103
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1391,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Invalid sizes specified."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_489.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Invalid sizes specified."");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_489.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_489.cpp,130
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1414,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
      ""Invalid filename size"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_490.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
      ""Invalid filename size"");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_490.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_490.cpp,153
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1423,"archive_set_error(&a->archive, ENOMEM,
                        ""Couldn't allocate memory."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_491.cpp,"{
      archive_set_error(&a->archive, ENOMEM,
                        ""Couldn't allocate memory."");
      return (ARCHIVE_FATAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_491.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_491.cpp,162
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1493,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
          ""Invalid filename"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_492.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
          ""Invalid filename"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_492.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_492.cpp,232
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1557,"archive_set_error(&a->archive, ENOMEM, ""Couldn't allocate memory."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_493.cpp,"{
        archive_set_error(&a->archive, ENOMEM, ""Couldn't allocate memory."");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_493.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_493.cpp,296
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1582,"archive_set_error(&a->archive, ENOMEM, ""Couldn't allocate memory."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_494.cpp,"{
    archive_set_error(&a->archive, ENOMEM, ""Couldn't allocate memory."");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_494.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_494.cpp,321
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1594,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
        ""Invalid header size"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_495.cpp,"{
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
        ""Invalid header size"");
      return (ARCHIVE_FATAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_495.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_495.cpp,333
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1604,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
        ""Invalid header size"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_496.cpp,"{
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
        ""Invalid header size"");
      return (ARCHIVE_FATAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_496.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_496.cpp,343
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1634,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Unknown file attributes from RAR file's host OS"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_497.cpp,"{
  case OS_MSDOS:
  case OS_OS2:
  case OS_WIN32:
    rar->mode = archive_le32dec(file_header.file_attr);
    if (rar->mode & FILE_ATTRIBUTE_DIRECTORY)
      rar->mode = AE_IFDIR | S_IXUSR | S_IXGRP | S_IXOTH;
    else
      rar->mode = AE_IFREG;
    rar->mode |= S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH;
    break;

  case OS_UNIX:
  case OS_MAC_OS:
  case OS_BEOS:
    rar->mode = archive_le32dec(file_header.file_attr);
    break;

  default:
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Unknown file attributes from RAR file's host OS"");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_497.cpp,"[1, 0, 0, 0, 2, 0, 1, 0, 6, 1, 3, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_497.cpp,373
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1673,"archive_set_error(&a->archive, ENOMEM,
                        ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_498.cpp,"{
      archive_set_error(&a->archive, ENOMEM,
                        ""Can't allocate memory for Pathname"");
      return (ARCHIVE_FATAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_498.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_498.cpp,412
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1677,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Pathname cannot be converted from %s to current locale."",
                      archive_string_conversion_charset_name(fn_sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_499.cpp,"{
    if (errno == ENOMEM)
    {
      archive_set_error(&a->archive, ENOMEM,
                        ""Can't allocate memory for Pathname"");
      return (ARCHIVE_FATAL);
    }
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Pathname cannot be converted from %s to current locale."",
                      archive_string_conversion_charset_name(fn_sconv));
    ret = (ARCHIVE_WARN);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_499.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_499.cpp,416
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1806,"archive_set_error(&a->archive, ENOMEM,
                        ""Can't allocate memory for link"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_500.cpp,"{
      archive_set_error(&a->archive, ENOMEM,
                        ""Can't allocate memory for link"");
      return (ARCHIVE_FATAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_500.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_500.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1810,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""link cannot be converted from %s to current locale."",
                      archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_501.cpp,"{
    if (errno == ENOMEM)
    {
      archive_set_error(&a->archive, ENOMEM,
                        ""Can't allocate memory for link"");
      return (ARCHIVE_FATAL);
    }
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""link cannot be converted from %s to current locale."",
                      archive_string_conversion_charset_name(sconv));
    ret = (ARCHIVE_WARN);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_501.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_501.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1834,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""File CRC error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_502.cpp,"{
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""File CRC error"");
      return (ARCHIVE_FATAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_502.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_502.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1845,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Truncated RAR file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_503.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Truncated RAR file data"");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_503.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_503.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1897,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""File CRC error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_504.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""File CRC error"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_504.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_504.cpp,35
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1940,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Invalid symbol"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_505.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Invalid symbol"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_505.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_505.cpp,78
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1954,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                            ""Invalid symbol"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_506.cpp,"{
          archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                            ""Invalid symbol"");
          return (ARCHIVE_FATAL);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_506.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_506.cpp,92
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1970,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                              ""Parsing filters is unsupported."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_507.cpp,"{
          case 0:
            rar->start_new_table = 1;
            return read_data_compressed(a, buff, size, offset);

          case 2:
            rar->ppmd_eod = 1;/* End Of ppmd Data. */
            continue;

          case 3:
            archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                              ""Parsing filters is unsupported."");
            return (ARCHIVE_FAILED);

          case 4:
            lzss_offset = 0;
            for (i = 2; i >= 0; i--)
            {
              if ((code = __archive_ppmd7_functions.Ppmd7_DecodeSymbol(
                &rar->ppmd7_context, &rar->range_dec.p)) < 0)
              {
                archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                                  ""Invalid symbol"");
                return (ARCHIVE_FATAL);
              }
              lzss_offset |= code << (i * 8);
            }
            if ((length = __archive_ppmd7_functions.Ppmd7_DecodeSymbol(
              &rar->ppmd7_context, &rar->range_dec.p)) < 0)
            {
              archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                                ""Invalid symbol"");
              return (ARCHIVE_FATAL);
            }
            lzss_emit_match(rar, lzss_offset + 2, length + 32);
            rar->bytes_uncopied += length + 32;
            break;

          case 5:
            if ((length = __archive_ppmd7_functions.Ppmd7_DecodeSymbol(
              &rar->ppmd7_context, &rar->range_dec.p)) < 0)
            {
              archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                                ""Invalid symbol"");
              return (ARCHIVE_FATAL);
            }
            lzss_emit_match(rar, 1, length + 4);
            rar->bytes_uncopied += length + 4;
            break;

         default:
           lzss_emit_literal(rar, sym);
           rar->bytes_uncopied++;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_507.cpp,"[3, 0, 1, 0, 2, 1, 5, 0, 5, 1, 5, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 1, 24, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 0, 0, 11, 0, 0, 14, 0, 30, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_507.cpp,108
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1981,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                                  ""Invalid symbol"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_508.cpp,"{
                archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                                  ""Invalid symbol"");
                return (ARCHIVE_FATAL);
              }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_508.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_508.cpp,119
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,1990,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                                ""Invalid symbol"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_509.cpp,"{
              archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                                ""Invalid symbol"");
              return (ARCHIVE_FATAL);
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_509.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_509.cpp,128
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2002,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                                ""Invalid symbol"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_510.cpp,"{
              archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                                ""Invalid symbol"");
              return (ARCHIVE_FATAL);
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_510.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_510.cpp,140
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2031,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                            ""Internal error extracting RAR file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_511.cpp,"{
          /* Broken RAR files cause this case.
          * NOTE: If this case were possible on a normal RAR file
          * we would find out where it was actually bad and
          * what we would do to solve it. */
          archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                            ""Internal error extracting RAR file"");
          return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_511.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_511.cpp,169
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2113,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Truncated RAR file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_512.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Truncated RAR file data"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_512.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_512.cpp,53
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2129,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Invalid zero dictionary size"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_513.cpp,"{
	      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Invalid zero dictionary size"");
	      return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_513.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_513.cpp,69
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2137,"archive_set_error(&a->archive, ENOMEM,
                          ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_514.cpp,"{
        archive_set_error(&a->archive, ENOMEM,
                          ""Out of memory"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_514.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_514.cpp,77
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2143,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Unable to initialize PPMd range decoder"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_515.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Unable to initialize PPMd range decoder"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_515.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_515.cpp,83
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2153,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Invalid PPMd sequence"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_516.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Invalid PPMd sequence"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_516.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_516.cpp,93
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2159,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Unable to initialize PPMd range decoder"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_517.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Unable to initialize PPMd range decoder"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_517.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_517.cpp,99
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2224,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                            ""Internal error extracting RAR file."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_518.cpp,"{
          free(precode.tree);
          free(precode.table);
          archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                            ""Internal error extracting RAR file."");
          return (ARCHIVE_FATAL);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_518.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_518.cpp,164
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2314,"archive_set_error(&a->archive, ENOMEM,
                        ""Unable to allocate memory for uncompressed data."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_519.cpp,"{
      archive_set_error(&a->archive, ENOMEM,
                        ""Unable to allocate memory for uncompressed data."");
      return (ARCHIVE_FATAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_519.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_519.cpp,254
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2327,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                    ""Truncated RAR file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_520.cpp,"{
  int i, j, val, n, r;
  unsigned char bitlengths[MAX_SYMBOLS], zerocount, ppmd_flags;
  unsigned int maxorder;
  struct huffman_code precode;
  struct rar *rar = (struct rar *)(a->format->data);
  struct rar_br *br = &(rar->br);

  free_codes(a);

  /* Skip to the next byte */
  rar_br_consume_unalined_bits(br);

  /* PPMd block flag */
  if (!rar_br_read_ahead(a, br, 1))
    goto truncated_data;
  if ((rar->is_ppmd_block = rar_br_bits(br, 1)) != 0)
  {
    rar_br_consume(br, 1);
    if (!rar_br_read_ahead(a, br, 7))
      goto truncated_data;
    ppmd_flags = rar_br_bits(br, 7);
    rar_br_consume(br, 7);

    /* Memory is allocated in MB */
    if (ppmd_flags & 0x20)
    {
      if (!rar_br_read_ahead(a, br, 8))
        goto truncated_data;
      rar->dictionary_size = (rar_br_bits(br, 8) + 1) << 20;
      rar_br_consume(br, 8);
    }

    if (ppmd_flags & 0x40)
    {
      if (!rar_br_read_ahead(a, br, 8))
        goto truncated_data;
      rar->ppmd_escape = rar->ppmd7_context.InitEsc = rar_br_bits(br, 8);
      rar_br_consume(br, 8);
    }
    else
      rar->ppmd_escape = 2;

    if (ppmd_flags & 0x20)
    {
      maxorder = (ppmd_flags & 0x1F) + 1;
      if(maxorder > 16)
        maxorder = 16 + (maxorder - 16) * 3;

      if (maxorder == 1)
      {
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Truncated RAR file data"");
        return (ARCHIVE_FATAL);
      }

      /* Make sure ppmd7_contest is freed before Ppmd7_Construct
       * because reading a broken file cause this abnormal sequence. */
      __archive_ppmd7_functions.Ppmd7_Free(&rar->ppmd7_context, &g_szalloc);

      rar->bytein.a = a;
      rar->bytein.Read = &ppmd_read;
      __archive_ppmd7_functions.PpmdRAR_RangeDec_CreateVTable(&rar->range_dec);
      rar->range_dec.Stream = &rar->bytein;
      __archive_ppmd7_functions.Ppmd7_Construct(&rar->ppmd7_context);

      if (rar->dictionary_size == 0) {
	      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Invalid zero dictionary size"");
	      return (ARCHIVE_FATAL);
      }

      if (!__archive_ppmd7_functions.Ppmd7_Alloc(&rar->ppmd7_context,
        rar->dictionary_size, &g_szalloc))
      {
        archive_set_error(&a->archive, ENOMEM,
                          ""Out of memory"");
        return (ARCHIVE_FATAL);
      }
      if (!__archive_ppmd7_functions.PpmdRAR_RangeDec_Init(&rar->range_dec))
      {
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Unable to initialize PPMd range decoder"");
        return (ARCHIVE_FATAL);
      }
      __archive_ppmd7_functions.Ppmd7_Init(&rar->ppmd7_context, maxorder);
      rar->ppmd_valid = 1;
    }
    else
    {
      if (!rar->ppmd_valid) {
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Invalid PPMd sequence"");
        return (ARCHIVE_FATAL);
      }
      if (!__archive_ppmd7_functions.PpmdRAR_RangeDec_Init(&rar->range_dec))
      {
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Unable to initialize PPMd range decoder"");
        return (ARCHIVE_FATAL);
      }
    }
  }
  else
  {
    rar_br_consume(br, 1);

    /* Keep existing table flag */
    if (!rar_br_read_ahead(a, br, 1))
      goto truncated_data;
    if (!rar_br_bits(br, 1))
      memset(rar->lengthtable, 0, sizeof(rar->lengthtable));
    rar_br_consume(br, 1);

    memset(&bitlengths, 0, sizeof(bitlengths));
    for (i = 0; i < MAX_SYMBOLS;)
    {
      if (!rar_br_read_ahead(a, br, 4))
        goto truncated_data;
      bitlengths[i++] = rar_br_bits(br, 4);
      rar_br_consume(br, 4);
      if (bitlengths[i-1] == 0xF)
      {
        if (!rar_br_read_ahead(a, br, 4))
          goto truncated_data;
        zerocount = rar_br_bits(br, 4);
        rar_br_consume(br, 4);
        if (zerocount)
        {
          i--;
          for (j = 0; j < zerocount + 2 && i < MAX_SYMBOLS; j++)
            bitlengths[i++] = 0;
        }
      }
    }

    memset(&precode, 0, sizeof(precode));
    r = create_code(a, &precode, bitlengths, MAX_SYMBOLS, MAX_SYMBOL_LENGTH);
    if (r != ARCHIVE_OK) {
      free(precode.tree);
      free(precode.table);
      return (r);
    }

    for (i = 0; i < HUFFMAN_TABLE_SIZE;)
    {
      if ((val = read_next_symbol(a, &precode)) < 0) {
        free(precode.tree);
        free(precode.table);
        return (ARCHIVE_FATAL);
      }
      if (val < 16)
      {
        rar->lengthtable[i] = (rar->lengthtable[i] + val) & 0xF;
        i++;
      }
      else if (val < 18)
      {
        if (i == 0)
        {
          free(precode.tree);
          free(precode.table);
          archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                            ""Internal error extracting RAR file."");
          return (ARCHIVE_FATAL);
        }

        if(val == 16) {
          if (!rar_br_read_ahead(a, br, 3)) {
            free(precode.tree);
            free(precode.table);
            goto truncated_data;
          }
          n = rar_br_bits(br, 3) + 3;
          rar_br_consume(br, 3);
        } else {
          if (!rar_br_read_ahead(a, br, 7)) {
            free(precode.tree);
            free(precode.table);
            goto truncated_data;
          }
          n = rar_br_bits(br, 7) + 11;
          rar_br_consume(br, 7);
        }

        for (j = 0; j < n && i < HUFFMAN_TABLE_SIZE; j++)
        {
          rar->lengthtable[i] = rar->lengthtable[i-1];
          i++;
        }
      }
      else
      {
        if(val == 18) {
          if (!rar_br_read_ahead(a, br, 3)) {
            free(precode.tree);
            free(precode.table);
            goto truncated_data;
          }
          n = rar_br_bits(br, 3) + 3;
          rar_br_consume(br, 3);
        } else {
          if (!rar_br_read_ahead(a, br, 7)) {
            free(precode.tree);
            free(precode.table);
            goto truncated_data;
          }
          n = rar_br_bits(br, 7) + 11;
          rar_br_consume(br, 7);
        }

        for(j = 0; j < n && i < HUFFMAN_TABLE_SIZE; j++)
          rar->lengthtable[i++] = 0;
      }
    }
    free(precode.tree);
    free(precode.table);

    r = create_code(a, &rar->maincode, &rar->lengthtable[0], MAINCODE_SIZE,
                MAX_SYMBOL_LENGTH);
    if (r != ARCHIVE_OK)
      return (r);
    r = create_code(a, &rar->offsetcode, &rar->lengthtable[MAINCODE_SIZE],
                OFFSETCODE_SIZE, MAX_SYMBOL_LENGTH);
    if (r != ARCHIVE_OK)
      return (r);
    r = create_code(a, &rar->lowoffsetcode,
                &rar->lengthtable[MAINCODE_SIZE + OFFSETCODE_SIZE],
                LOWOFFSETCODE_SIZE, MAX_SYMBOL_LENGTH);
    if (r != ARCHIVE_OK)
      return (r);
    r = create_code(a, &rar->lengthcode,
                &rar->lengthtable[MAINCODE_SIZE + OFFSETCODE_SIZE +
                LOWOFFSETCODE_SIZE], LENGTHCODE_SIZE, MAX_SYMBOL_LENGTH);
    if (r != ARCHIVE_OK)
      return (r);
  }

  if (!rar->dictionary_size || !rar->lzss.window)
  {
    /* Seems as though dictionary sizes are not used. Even so, minimize
     * memory usage as much as possible.
     */
    void *new_window;
    unsigned int new_size;

    if (rar->unp_size >= DICTIONARY_MAX_SIZE)
      new_size = DICTIONARY_MAX_SIZE;
    else
      new_size = rar_fls((unsigned int)rar->unp_size) << 1;
    new_window = realloc(rar->lzss.window, new_size);
    if (new_window == NULL) {
      archive_set_error(&a->archive, ENOMEM,
                        ""Unable to allocate memory for uncompressed data."");
      return (ARCHIVE_FATAL);
    }
    rar->lzss.window = (unsigned char *)new_window;
    rar->dictionary_size = new_size;
    memset(rar->lzss.window, 0, rar->dictionary_size);
    rar->lzss.mask = rar->dictionary_size - 1;
  }

  rar->start_new_table = 0;
  return (ARCHIVE_OK);
truncated_data:
  archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                    ""Truncated RAR file data"");
  rar->valid = 0;
  return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_520.cpp,"[39, 0, 5, 0, 0, 0, 16, 0, 0, 0, 52, 1, 11, 0, 0, 574, 0, 0, 8, 14, 0, 0, 7, 90, 0, 0, 0, 0, 3, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 346, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 13, 0, 44, 39, 7, 0, 83, 0, 0, 83, 1, 180, 0, 5, 0, 0, 5, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_520.cpp,267
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2372,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Truncated RAR file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_521.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Truncated RAR file data"");
    rar->valid = 0;
    return -1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_521.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_521.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2384,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Invalid prefix code in bitstream"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_522.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Invalid prefix code in bitstream"");
    return -1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_522.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_522.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2404,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Truncated RAR file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_523.cpp,"{
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Truncated RAR file data"");
      rar->valid = 0;
      return -1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_523.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_523.cpp,52
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2414,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Invalid prefix code in bitstream"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_524.cpp,"{
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Invalid prefix code in bitstream"");
      return -1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_524.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_524.cpp,62
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2433,"archive_set_error(&a->archive, ENOMEM,
                      ""Unable to allocate memory for node data."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_525.cpp,"{
    archive_set_error(&a->archive, ENOMEM,
                      ""Unable to allocate memory for node data."");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_525.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_525.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2475,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Invalid repeat position"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_526.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Invalid repeat position"");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_526.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_526.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2489,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Prefix found"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_527.cpp,"{
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Prefix found"");
      return (ARCHIVE_FATAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_527.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_527.cpp,33
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2499,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Invalid repeating code"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_528.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Invalid repeating code"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_528.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_528.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2505,"archive_set_error(&a->archive, ENOMEM,
                          ""Unable to allocate memory for node data."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_529.cpp,"{
        archive_set_error(&a->archive, ENOMEM,
                          ""Unable to allocate memory for node data."");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_529.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_529.cpp,49
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2510,"archive_set_error(&a->archive, ENOMEM,
                          ""Unable to allocate memory for node data."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_530.cpp,"{
        archive_set_error(&a->archive, ENOMEM,
                          ""Unable to allocate memory for node data."");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_530.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_530.cpp,54
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2529,"archive_set_error(&a->archive, ENOMEM,
                            ""Unable to allocate memory for node data."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_531.cpp,"{
          archive_set_error(&a->archive, ENOMEM,
                            ""Unable to allocate memory for node data."");
          return (ARCHIVE_FATAL);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_531.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_531.cpp,73
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2544,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Prefix found"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_532.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Prefix found"");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_532.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_532.cpp,88
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2600,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Huffman tree was not created."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_533.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Huffman tree was not created."");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_533.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_533.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2606,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Invalid location to Huffman tree specified."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_534.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                      ""Invalid location to Huffman tree specified."");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_534.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_534.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2735,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""Parsing filters is unsupported."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_535.cpp,"{
      archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""Parsing filters is unsupported."");
      return (ARCHIVE_FAILED);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_535.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_535.cpp,90
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2863,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                    ""Truncated RAR file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_536.cpp,"{
  static const unsigned char lengthbases[] =
    {   0,   1,   2,   3,   4,   5,   6,
        7,   8,  10,  12,  14,  16,  20,
       24,  28,  32,  40,  48,  56,  64,
       80,  96, 112, 128, 160, 192, 224 };
  static const unsigned char lengthbits[] =
    { 0, 0, 0, 0, 0, 0, 0,
      0, 1, 1, 1, 1, 2, 2,
      2, 2, 3, 3, 3, 3, 4,
      4, 4, 4, 5, 5, 5, 5 };
  static const unsigned int offsetbases[] =
    {       0,       1,       2,       3,       4,       6,
            8,      12,      16,      24,      32,      48,
           64,      96,     128,     192,     256,     384,
          512,     768,    1024,    1536,    2048,    3072,
         4096,    6144,    8192,   12288,   16384,   24576,
        32768,   49152,   65536,   98304,  131072,  196608,
       262144,  327680,  393216,  458752,  524288,  589824,
       655360,  720896,  786432,  851968,  917504,  983040,
      1048576, 1310720, 1572864, 1835008, 2097152, 2359296,
      2621440, 2883584, 3145728, 3407872, 3670016, 3932160 };
  static const unsigned char offsetbits[] =
    {  0,  0,  0,  0,  1,  1,  2,  2,  3,  3,  4,  4,
       5,  5,  6,  6,  7,  7,  8,  8,  9,  9, 10, 10,
      11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16,
      16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
      18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
  static const unsigned char shortbases[] =
    { 0, 4, 8, 16, 32, 64, 128, 192 };
  static const unsigned char shortbits[] =
    { 2, 2, 3, 4, 5, 6, 6, 6 };

  int symbol, offs, len, offsindex, lensymbol, i, offssymbol, lowoffsetsymbol;
  unsigned char newfile;
  struct rar *rar = (struct rar *)(a->format->data);
  struct rar_br *br = &(rar->br);

  if (rar->filterstart < end)
    end = rar->filterstart;

  while (1)
  {
    if (rar->output_last_match &&
      lzss_position(&rar->lzss) + rar->lastlength <= end)
    {
      lzss_emit_match(rar, rar->lastoffset, rar->lastlength);
      rar->output_last_match = 0;
    }

    if(rar->is_ppmd_block || rar->output_last_match ||
      lzss_position(&rar->lzss) >= end)
      return lzss_position(&rar->lzss);

    if ((symbol = read_next_symbol(a, &rar->maincode)) < 0)
      return (ARCHIVE_FATAL);
    rar->output_last_match = 0;

    if (symbol < 256)
    {
      lzss_emit_literal(rar, symbol);
      continue;
    }
    else if (symbol == 256)
    {
      if (!rar_br_read_ahead(a, br, 1))
        goto truncated_data;
      newfile = !rar_br_bits(br, 1);
      rar_br_consume(br, 1);

      if(newfile)
      {
        rar->start_new_block = 1;
        if (!rar_br_read_ahead(a, br, 1))
          goto truncated_data;
        rar->start_new_table = rar_br_bits(br, 1);
        rar_br_consume(br, 1);
        return lzss_position(&rar->lzss);
      }
      else
      {
        if (parse_codes(a) != ARCHIVE_OK)
          return (ARCHIVE_FATAL);
        continue;
      }
    }
    else if(symbol==257)
    {
      archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""Parsing filters is unsupported."");
      return (ARCHIVE_FAILED);
    }
    else if(symbol==258)
    {
      if(rar->lastlength == 0)
        continue;

      offs = rar->lastoffset;
      len = rar->lastlength;
    }
    else if (symbol <= 262)
    {
      offsindex = symbol - 259;
      offs = rar->oldoffset[offsindex];

      if ((lensymbol = read_next_symbol(a, &rar->lengthcode)) < 0)
        goto bad_data;
      if (lensymbol > (int)(sizeof(lengthbases)/sizeof(lengthbases[0])))
        goto bad_data;
      if (lensymbol > (int)(sizeof(lengthbits)/sizeof(lengthbits[0])))
        goto bad_data;
      len = lengthbases[lensymbol] + 2;
      if (lengthbits[lensymbol] > 0) {
        if (!rar_br_read_ahead(a, br, lengthbits[lensymbol]))
          goto truncated_data;
        len += rar_br_bits(br, lengthbits[lensymbol]);
        rar_br_consume(br, lengthbits[lensymbol]);
      }

      for (i = offsindex; i > 0; i--)
        rar->oldoffset[i] = rar->oldoffset[i-1];
      rar->oldoffset[0] = offs;
    }
    else if(symbol<=270)
    {
      offs = shortbases[symbol-263] + 1;
      if(shortbits[symbol-263] > 0) {
        if (!rar_br_read_ahead(a, br, shortbits[symbol-263]))
          goto truncated_data;
        offs += rar_br_bits(br, shortbits[symbol-263]);
        rar_br_consume(br, shortbits[symbol-263]);
      }

      len = 2;

      for(i = 3; i > 0; i--)
        rar->oldoffset[i] = rar->oldoffset[i-1];
      rar->oldoffset[0] = offs;
    }
    else
    {
      if (symbol-271 > (int)(sizeof(lengthbases)/sizeof(lengthbases[0])))
        goto bad_data;
      if (symbol-271 > (int)(sizeof(lengthbits)/sizeof(lengthbits[0])))
        goto bad_data;
      len = lengthbases[symbol-271]+3;
      if(lengthbits[symbol-271] > 0) {
        if (!rar_br_read_ahead(a, br, lengthbits[symbol-271]))
          goto truncated_data;
        len += rar_br_bits(br, lengthbits[symbol-271]);
        rar_br_consume(br, lengthbits[symbol-271]);
      }

      if ((offssymbol = read_next_symbol(a, &rar->offsetcode)) < 0)
        goto bad_data;
      if (offssymbol > (int)(sizeof(offsetbases)/sizeof(offsetbases[0])))
        goto bad_data;
      if (offssymbol > (int)(sizeof(offsetbits)/sizeof(offsetbits[0])))
        goto bad_data;
      offs = offsetbases[offssymbol]+1;
      if(offsetbits[offssymbol] > 0)
      {
        if(offssymbol > 9)
        {
          if(offsetbits[offssymbol] > 4) {
            if (!rar_br_read_ahead(a, br, offsetbits[offssymbol] - 4))
              goto truncated_data;
            offs += rar_br_bits(br, offsetbits[offssymbol] - 4) << 4;
            rar_br_consume(br, offsetbits[offssymbol] - 4);
	  }

          if(rar->numlowoffsetrepeats > 0)
          {
            rar->numlowoffsetrepeats--;
            offs += rar->lastlowoffset;
          }
          else
          {
            if ((lowoffsetsymbol =
              read_next_symbol(a, &rar->lowoffsetcode)) < 0)
              return (ARCHIVE_FATAL);
            if(lowoffsetsymbol == 16)
            {
              rar->numlowoffsetrepeats = 15;
              offs += rar->lastlowoffset;
            }
            else
            {
              offs += lowoffsetsymbol;
              rar->lastlowoffset = lowoffsetsymbol;
            }
          }
        }
        else {
          if (!rar_br_read_ahead(a, br, offsetbits[offssymbol]))
            goto truncated_data;
          offs += rar_br_bits(br, offsetbits[offssymbol]);
          rar_br_consume(br, offsetbits[offssymbol]);
        }
      }

      if (offs >= 0x40000)
        len++;
      if (offs >= 0x2000)
        len++;

      for(i = 3; i > 0; i--)
        rar->oldoffset[i] = rar->oldoffset[i-1];
      rar->oldoffset[0] = offs;
    }

    rar->lastoffset = offs;
    rar->lastlength = len;
    rar->output_last_match = 1;
  }
truncated_data:
  archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                    ""Truncated RAR file data"");
  rar->valid = 0;
  return (ARCHIVE_FATAL);
bad_data:
  archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                    ""Bad RAR file data"");
  return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_536.cpp,"[39, 1, 3, 0, 0, 3, 8, 0, 0, 0, 55, 2, 15, 0, 12, 454, 0, 0, 10, 17, 0, 0, 11, 268, 0, 0, 0, 0, 2, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 0, 441, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 46, 0, 43, 39, 5, 0, 53, 0, 0, 50, 5, 94, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_536.cpp,218
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2868,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                    ""Bad RAR file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_537.cpp,"{
  static const unsigned char lengthbases[] =
    {   0,   1,   2,   3,   4,   5,   6,
        7,   8,  10,  12,  14,  16,  20,
       24,  28,  32,  40,  48,  56,  64,
       80,  96, 112, 128, 160, 192, 224 };
  static const unsigned char lengthbits[] =
    { 0, 0, 0, 0, 0, 0, 0,
      0, 1, 1, 1, 1, 2, 2,
      2, 2, 3, 3, 3, 3, 4,
      4, 4, 4, 5, 5, 5, 5 };
  static const unsigned int offsetbases[] =
    {       0,       1,       2,       3,       4,       6,
            8,      12,      16,      24,      32,      48,
           64,      96,     128,     192,     256,     384,
          512,     768,    1024,    1536,    2048,    3072,
         4096,    6144,    8192,   12288,   16384,   24576,
        32768,   49152,   65536,   98304,  131072,  196608,
       262144,  327680,  393216,  458752,  524288,  589824,
       655360,  720896,  786432,  851968,  917504,  983040,
      1048576, 1310720, 1572864, 1835008, 2097152, 2359296,
      2621440, 2883584, 3145728, 3407872, 3670016, 3932160 };
  static const unsigned char offsetbits[] =
    {  0,  0,  0,  0,  1,  1,  2,  2,  3,  3,  4,  4,
       5,  5,  6,  6,  7,  7,  8,  8,  9,  9, 10, 10,
      11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16,
      16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
      18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
  static const unsigned char shortbases[] =
    { 0, 4, 8, 16, 32, 64, 128, 192 };
  static const unsigned char shortbits[] =
    { 2, 2, 3, 4, 5, 6, 6, 6 };

  int symbol, offs, len, offsindex, lensymbol, i, offssymbol, lowoffsetsymbol;
  unsigned char newfile;
  struct rar *rar = (struct rar *)(a->format->data);
  struct rar_br *br = &(rar->br);

  if (rar->filterstart < end)
    end = rar->filterstart;

  while (1)
  {
    if (rar->output_last_match &&
      lzss_position(&rar->lzss) + rar->lastlength <= end)
    {
      lzss_emit_match(rar, rar->lastoffset, rar->lastlength);
      rar->output_last_match = 0;
    }

    if(rar->is_ppmd_block || rar->output_last_match ||
      lzss_position(&rar->lzss) >= end)
      return lzss_position(&rar->lzss);

    if ((symbol = read_next_symbol(a, &rar->maincode)) < 0)
      return (ARCHIVE_FATAL);
    rar->output_last_match = 0;

    if (symbol < 256)
    {
      lzss_emit_literal(rar, symbol);
      continue;
    }
    else if (symbol == 256)
    {
      if (!rar_br_read_ahead(a, br, 1))
        goto truncated_data;
      newfile = !rar_br_bits(br, 1);
      rar_br_consume(br, 1);

      if(newfile)
      {
        rar->start_new_block = 1;
        if (!rar_br_read_ahead(a, br, 1))
          goto truncated_data;
        rar->start_new_table = rar_br_bits(br, 1);
        rar_br_consume(br, 1);
        return lzss_position(&rar->lzss);
      }
      else
      {
        if (parse_codes(a) != ARCHIVE_OK)
          return (ARCHIVE_FATAL);
        continue;
      }
    }
    else if(symbol==257)
    {
      archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""Parsing filters is unsupported."");
      return (ARCHIVE_FAILED);
    }
    else if(symbol==258)
    {
      if(rar->lastlength == 0)
        continue;

      offs = rar->lastoffset;
      len = rar->lastlength;
    }
    else if (symbol <= 262)
    {
      offsindex = symbol - 259;
      offs = rar->oldoffset[offsindex];

      if ((lensymbol = read_next_symbol(a, &rar->lengthcode)) < 0)
        goto bad_data;
      if (lensymbol > (int)(sizeof(lengthbases)/sizeof(lengthbases[0])))
        goto bad_data;
      if (lensymbol > (int)(sizeof(lengthbits)/sizeof(lengthbits[0])))
        goto bad_data;
      len = lengthbases[lensymbol] + 2;
      if (lengthbits[lensymbol] > 0) {
        if (!rar_br_read_ahead(a, br, lengthbits[lensymbol]))
          goto truncated_data;
        len += rar_br_bits(br, lengthbits[lensymbol]);
        rar_br_consume(br, lengthbits[lensymbol]);
      }

      for (i = offsindex; i > 0; i--)
        rar->oldoffset[i] = rar->oldoffset[i-1];
      rar->oldoffset[0] = offs;
    }
    else if(symbol<=270)
    {
      offs = shortbases[symbol-263] + 1;
      if(shortbits[symbol-263] > 0) {
        if (!rar_br_read_ahead(a, br, shortbits[symbol-263]))
          goto truncated_data;
        offs += rar_br_bits(br, shortbits[symbol-263]);
        rar_br_consume(br, shortbits[symbol-263]);
      }

      len = 2;

      for(i = 3; i > 0; i--)
        rar->oldoffset[i] = rar->oldoffset[i-1];
      rar->oldoffset[0] = offs;
    }
    else
    {
      if (symbol-271 > (int)(sizeof(lengthbases)/sizeof(lengthbases[0])))
        goto bad_data;
      if (symbol-271 > (int)(sizeof(lengthbits)/sizeof(lengthbits[0])))
        goto bad_data;
      len = lengthbases[symbol-271]+3;
      if(lengthbits[symbol-271] > 0) {
        if (!rar_br_read_ahead(a, br, lengthbits[symbol-271]))
          goto truncated_data;
        len += rar_br_bits(br, lengthbits[symbol-271]);
        rar_br_consume(br, lengthbits[symbol-271]);
      }

      if ((offssymbol = read_next_symbol(a, &rar->offsetcode)) < 0)
        goto bad_data;
      if (offssymbol > (int)(sizeof(offsetbases)/sizeof(offsetbases[0])))
        goto bad_data;
      if (offssymbol > (int)(sizeof(offsetbits)/sizeof(offsetbits[0])))
        goto bad_data;
      offs = offsetbases[offssymbol]+1;
      if(offsetbits[offssymbol] > 0)
      {
        if(offssymbol > 9)
        {
          if(offsetbits[offssymbol] > 4) {
            if (!rar_br_read_ahead(a, br, offsetbits[offssymbol] - 4))
              goto truncated_data;
            offs += rar_br_bits(br, offsetbits[offssymbol] - 4) << 4;
            rar_br_consume(br, offsetbits[offssymbol] - 4);
	  }

          if(rar->numlowoffsetrepeats > 0)
          {
            rar->numlowoffsetrepeats--;
            offs += rar->lastlowoffset;
          }
          else
          {
            if ((lowoffsetsymbol =
              read_next_symbol(a, &rar->lowoffsetcode)) < 0)
              return (ARCHIVE_FATAL);
            if(lowoffsetsymbol == 16)
            {
              rar->numlowoffsetrepeats = 15;
              offs += rar->lastlowoffset;
            }
            else
            {
              offs += lowoffsetsymbol;
              rar->lastlowoffset = lowoffsetsymbol;
            }
          }
        }
        else {
          if (!rar_br_read_ahead(a, br, offsetbits[offssymbol]))
            goto truncated_data;
          offs += rar_br_bits(br, offsetbits[offssymbol]);
          rar_br_consume(br, offsetbits[offssymbol]);
        }
      }

      if (offs >= 0x40000)
        len++;
      if (offs >= 0x2000)
        len++;

      for(i = 3; i > 0; i--)
        rar->oldoffset[i] = rar->oldoffset[i-1];
      rar->oldoffset[0] = offs;
    }

    rar->lastoffset = offs;
    rar->lastlength = len;
    rar->output_last_match = 1;
  }
truncated_data:
  archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                    ""Truncated RAR file data"");
  rar->valid = 0;
  return (ARCHIVE_FATAL);
bad_data:
  archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                    ""Bad RAR file data"");
  return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_537.cpp,"[39, 1, 3, 0, 0, 3, 8, 0, 0, 0, 55, 2, 15, 0, 12, 454, 0, 0, 10, 17, 0, 0, 11, 268, 0, 0, 0, 0, 2, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 0, 441, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 46, 0, 43, 39, 5, 0, 53, 0, 0, 50, 5, 94, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_537.cpp,223
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2884,"archive_set_error(&a->archive, ENOMEM,
                        ""Unable to allocate memory for uncompressed data."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_538.cpp,"{
      archive_set_error(&a->archive, ENOMEM,
                        ""Unable to allocate memory for uncompressed data."");
      return (ARCHIVE_FATAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_538.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_538.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2897,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_539.cpp,"{
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");
      return (ARCHIVE_FATAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_539.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_539.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.cpp,2911,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_540.cpp,"{
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");
      return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_540.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_540.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_raw.cpp,66,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate raw_info data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_541.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate raw_info data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_541.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_541.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_file.cpp,64,"archive_set_error(a, ENOMEM, ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_542.cpp,"{
		archive_set_error(a, ENOMEM, ""No memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_542.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_542.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_file.cpp,93,"archive_set_error(a, errno, ""Write error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_543.cpp,"{
			if (errno == EINTR)
				continue;
			archive_set_error(a, errno, ""Write error"");
			return (-1);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_543.cpp,"[1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_543.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_filter_by_ext.cpp,112,"archive_set_error(a, EINVAL, ""No such format '%s'"", filename);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_544.cpp,"{
  int names_index = get_array_index(filename);
  
  if (names_index >= 0)
  {  
    int format_state = (names[names_index].format)(a);
    if (format_state == ARCHIVE_OK)
      return ((names[names_index].filter)(a));
    else
      return format_state;
  }    

  archive_set_error(a, EINVAL, ""No such format '%s'"", filename);
  a->state = ARCHIVE_STATE_FATAL;
  return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_544.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 29, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 2, 1, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_544.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_filter_by_ext.cpp,134,"archive_set_error(a, EINVAL, ""No such format '%s'"", filename);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_545.cpp,"{
  int names_index = get_array_index(filename);
  
  if (names_index < 0)
    names_index = get_array_index(def_ext);
  
  if (names_index >= 0)
  {  
    int format_state = (names[names_index].format)(a);
    if (format_state == ARCHIVE_OK)
      return ((names[names_index].filter)(a));
    else
      return format_state;
  }    

  archive_set_error(a, EINVAL, ""No such format '%s'"", filename);
  a->state = ARCHIVE_STATE_FATAL;
  return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_545.cpp,"[3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 0, 33, 0, 0, 2, 2, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 3, 1, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_545.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_by_name.cpp,88,"archive_set_error(a, EINVAL, ""No such format '%s'"", name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_546.cpp,"{
	int i;

	for (i = 0; names[i].name != NULL; i++) {
		if (strcmp(name, names[i].name) == 0)
			return ((names[i].setter)(a));
	}

	archive_set_error(a, EINVAL, ""No such format '%s'"", name);
	a->state = ARCHIVE_STATE_FATAL;
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_546.cpp,"[1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 29, 0, 0, 1, 1, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 1, 0, 0, 2, 0, 0, 2, 0, 6, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_546.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_xz.cpp,77,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
	    ""xz compression not supported on this platform"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_547.cpp,"{
	archive_set_error(a, ARCHIVE_ERRNO_MISC,
	    ""xz compression not supported on this platform"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_547.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_547.cpp,3
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_xz.cpp,85,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
	    ""lzma compression not supported on this platform"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_548.cpp,"{
	archive_set_error(a, ARCHIVE_ERRNO_MISC,
	    ""lzma compression not supported on this platform"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_548.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_548.cpp,3
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_xz.cpp,93,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
	    ""lzma compression not supported on this platform"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_549.cpp,"{
	archive_set_error(a, ARCHIVE_ERRNO_MISC,
	    ""lzma compression not supported on this platform"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_549.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_549.cpp,3
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_xz.cpp,149,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_550.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_550.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_550.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_xz.cpp,254,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""Unacceptable dictionary size for lzip: %d"",
			    dict_size);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_551.cpp,"{
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""Unacceptable dictionary size for lzip: %d"",
			    dict_size);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_551.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_551.cpp,35
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_xz.cpp,289,"archive_set_error(f->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_552.cpp,"{
	case LZMA_MEM_ERROR:
		archive_set_error(f->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");
		break;
	default:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""It's a bug in liblzma"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_552.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_552.cpp,70
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_xz.cpp,294,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""It's a bug in liblzma"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_553.cpp,"{
	case LZMA_MEM_ERROR:
		archive_set_error(f->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");
		break;
	default:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""It's a bug in liblzma"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_553.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_553.cpp,75
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_xz.cpp,330,"archive_set_error(f->archive, ENOMEM,
			    ""Can't allocate data for compression buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_554.cpp,"{
			archive_set_error(f->archive, ENOMEM,
			    ""Can't allocate data for compression buffer"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_554.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_554.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_xz.cpp,359,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""Internal error initializing compression library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_555.cpp,"{
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""Internal error initializing compression library"");
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_555.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_555.cpp,54
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_xz.cpp,524,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""lzma compression data error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_556.cpp,"{
		case LZMA_OK:
			/* In non-finishing case, check if compressor
			 * consumed everything */
			if (!finishing && data->stream.avail_in == 0)
				return (ARCHIVE_OK);
			/* In finishing case, this return always means
			 * there's more work */
			break;
		case LZMA_STREAM_END:
			/* This return can only occur in finishing case. */
			if (finishing)
				return (ARCHIVE_OK);
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""lzma compression data error"");
			return (ARCHIVE_FATAL);
		case LZMA_MEMLIMIT_ERROR:
			archive_set_error(f->archive, ENOMEM,
			    ""lzma compression error: ""
			    ""%ju MiB would have been needed"",
			    (uintmax_t)((lzma_memusage(&(data->stream))
				    + 1024 * 1024 -1)
				/ (1024 * 1024)));
			return (ARCHIVE_FATAL);
		default:
			/* Any other return value indicates an error. */
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""lzma compression failed:""
			    "" lzma_code() call returned status %d"",
			    ret);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_556.cpp,"[2, 0, 0, 0, 1, 0, 5, 0, 3, 1, 3, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_556.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_xz.cpp,528,"archive_set_error(f->archive, ENOMEM,
			    ""lzma compression error: ""
			    ""%ju MiB would have been needed"",
			    (uintmax_t)((lzma_memusage(&(data->stream))
				    + 1024 * 1024 -1)
				/ (1024 * 1024)));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_557.cpp,"{
		case LZMA_OK:
			/* In non-finishing case, check if compressor
			 * consumed everything */
			if (!finishing && data->stream.avail_in == 0)
				return (ARCHIVE_OK);
			/* In finishing case, this return always means
			 * there's more work */
			break;
		case LZMA_STREAM_END:
			/* This return can only occur in finishing case. */
			if (finishing)
				return (ARCHIVE_OK);
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""lzma compression data error"");
			return (ARCHIVE_FATAL);
		case LZMA_MEMLIMIT_ERROR:
			archive_set_error(f->archive, ENOMEM,
			    ""lzma compression error: ""
			    ""%ju MiB would have been needed"",
			    (uintmax_t)((lzma_memusage(&(data->stream))
				    + 1024 * 1024 -1)
				/ (1024 * 1024)));
			return (ARCHIVE_FATAL);
		default:
			/* Any other return value indicates an error. */
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""lzma compression failed:""
			    "" lzma_code() call returned status %d"",
			    ret);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_557.cpp,"[2, 0, 0, 0, 1, 0, 5, 0, 3, 1, 3, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_557.cpp,42
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_xz.cpp,537,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""lzma compression failed:""
			    "" lzma_code() call returned status %d"",
			    ret);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_558.cpp,"{
		case LZMA_OK:
			/* In non-finishing case, check if compressor
			 * consumed everything */
			if (!finishing && data->stream.avail_in == 0)
				return (ARCHIVE_OK);
			/* In finishing case, this return always means
			 * there's more work */
			break;
		case LZMA_STREAM_END:
			/* This return can only occur in finishing case. */
			if (finishing)
				return (ARCHIVE_OK);
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""lzma compression data error"");
			return (ARCHIVE_FATAL);
		case LZMA_MEMLIMIT_ERROR:
			archive_set_error(f->archive, ENOMEM,
			    ""lzma compression error: ""
			    ""%ju MiB would have been needed"",
			    (uintmax_t)((lzma_memusage(&(data->stream))
				    + 1024 * 1024 -1)
				/ (1024 * 1024)));
			return (ARCHIVE_FATAL);
		default:
			/* Any other return value indicates an error. */
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""lzma compression failed:""
			    "" lzma_code() call returned status %d"",
			    ret);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_558.cpp,"[2, 0, 0, 0, 1, 0, 5, 0, 3, 1, 3, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_558.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_memory.cpp,57,"archive_set_error(a, ENOMEM, ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_559.cpp,"{
		archive_set_error(a, ENOMEM, ""No memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_559.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_559.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_memory.cpp,94,"archive_set_error(a, ENOMEM, ""Buffer exhausted"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_560.cpp,"{
		archive_set_error(a, ENOMEM, ""Buffer exhausted"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_560.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_560.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_bzip2.cpp,104,"archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external bzip2 program"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_561.cpp,"{
	struct archive_read *a = (struct archive_read *)_a;
	struct archive_read_filter_bidder *reader;

	archive_check_magic(_a, ARCHIVE_READ_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_read_support_filter_bzip2"");

	if (__archive_read_get_bidder(a, &reader) != ARCHIVE_OK)
		return (ARCHIVE_FATAL);

	reader->data = NULL;
	reader->name = ""bzip2"";
	reader->bid = bzip2_reader_bid;
	reader->init = bzip2_reader_init;
	reader->options = NULL;
	reader->free = bzip2_reader_free;
#if defined(HAVE_BZLIB_H) && defined(BZ_CONFIG_ERROR)
	return (ARCHIVE_OK);
#else
	archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external bzip2 program"");
	return (ARCHIVE_WARN);
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_561.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 51, 0, 0, 2, 2, 0, 0, 1, 3, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 5, 0, 0, 8, 0, 11, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_561.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_bzip2.cpp,201,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for bzip2 decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_562.cpp,"{
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for bzip2 decompression"");
		free(out_block);
		free(state);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_562.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_562.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_bzip2.cpp,276,"archive_set_error(&self->archive->archive, err,
				    ""Internal error initializing decompressor%s%s"",
				    detail == NULL ? """" : "": "",
				    detail);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_563.cpp,"{
				const char *detail = NULL;
				int err = ARCHIVE_ERRNO_MISC;
				switch (ret) {
				case BZ_PARAM_ERROR:
					detail = ""invalid setup parameter"";
					break;
				case BZ_MEM_ERROR:
					err = ENOMEM;
					detail = ""out of memory"";
					break;
				case BZ_CONFIG_ERROR:
					detail = ""mis-compiled library"";
					break;
				}
				archive_set_error(&self->archive->archive, err,
				    ""Internal error initializing decompressor%s%s"",
				    detail == NULL ? """" : "": "",
				    detail);
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_563.cpp,"[0, 0, 0, 0, 3, 0, 1, 1, 3, 0, 2, 0, 0, 0, 1, 25, 0, 0, 2, 2, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 1, 0, 1, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_563.cpp,55
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_bzip2.cpp,290,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated bzip2 input"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_564.cpp,"{
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated bzip2 input"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_564.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_564.cpp,69
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_bzip2.cpp,317,"archive_set_error(&(self->archive->archive),
					  ARCHIVE_ERRNO_MISC,
					  ""Failed to clean up decompressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_565.cpp,"{
			case BZ_OK:
				break;
			default:
				archive_set_error(&(self->archive->archive),
					  ARCHIVE_ERRNO_MISC,
					  ""Failed to clean up decompressor"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_565.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_565.cpp,96
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_bzip2.cpp,334,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC, ""bzip decompression failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_566.cpp,"{
		case BZ_STREAM_END: /* Found end of stream. */
			switch (BZ2_bzDecompressEnd(&(state->stream))) {
			case BZ_OK:
				break;
			default:
				archive_set_error(&(self->archive->archive),
					  ARCHIVE_ERRNO_MISC,
					  ""Failed to clean up decompressor"");
				return (ARCHIVE_FATAL);
			}
			state->valid = 0;
			/* FALLTHROUGH */
		case BZ_OK: /* Decompressor made some progress. */
			/* If we filled our buffer, update stats and return. */
			if (state->stream.avail_out == 0) {
				*p = state->out_block;
				decompressed = state->stream.next_out
				    - state->out_block;
				return (decompressed);
			}
			break;
		default: /* Return an error. */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC, ""bzip decompression failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_566.cpp,"[1, 0, 0, 0, 2, 0, 3, 1, 3, 2, 3, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 3, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_566.cpp,113
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_bzip2.cpp,357,"archive_set_error(&self->archive->archive,
					  ARCHIVE_ERRNO_MISC,
					  ""Failed to clean up decompressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_567.cpp,"{
		case BZ_OK:
			break;
		default:
			archive_set_error(&self->archive->archive,
					  ARCHIVE_ERRNO_MISC,
					  ""Failed to clean up decompressor"");
			ret = ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_567.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_567.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_string_sprintf.cpp,81,"archive_string_vsprintf(as, fmt, ap);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_568.cpp,"{
	va_list ap;

	va_start(ap, fmt);
	archive_string_vsprintf(as, fmt, ap);
	va_end(ap);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_568.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_568.cpp,6
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_options.cpp,55,"archive_set_error(a, ARCHIVE_ERRNO_MISC, ""Empty option"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_569.cpp,"{
		archive_set_error(a, ARCHIVE_ERRNO_MISC, ""Empty option"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_569.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_569.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_options.cpp,61,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Unknown module name: `%s'"", mp);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_570.cpp,"{
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Unknown module name: `%s'"", mp);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_570.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_570.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_options.cpp,66,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Undefined option: `%s%s%s%s%s%s'"",
		    vp?"""":""!"", mp?mp:"""", mp?"":"":"""", op, vp?""="":"""", vp?vp:"""");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_571.cpp,"{
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Undefined option: `%s%s%s%s%s%s'"",
		    vp?"""":""!"", mp?mp:"""", mp?"":"":"""", op, vp?""="":"""", vp?vp:"""");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_571.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 1, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_571.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_options.cpp,112,"archive_set_error(a,
		    ENOMEM, ""Out of memory adding file to list"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_572.cpp,"{
		archive_set_error(a,
		    ENOMEM, ""Out of memory adding file to list"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_572.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_572.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_options.cpp,145,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""Unknown module name: `%s'"", mod);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_573.cpp,"{
			if (ignore_mod_err)
				continue;
			/* The module name is wrong. */
			archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""Unknown module name: `%s'"", mod);
			free(data);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_573.cpp,"[1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_573.cpp,47
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_options.cpp,152,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""Undefined option: `%s%s%s'"",
			    mod?mod:"""", mod?"":"":"""", opt);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_574.cpp,"{
			/* The option name is wrong. No-one used this. */
			archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""Undefined option: `%s%s%s'"",
			    mod?mod:"""", mod?"":"":"""", opt);
			free(data);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_574.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_574.cpp,54
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,125,"archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external lzop program for lzop decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_575.cpp,"{
	struct archive_read *a = (struct archive_read *)_a;
	struct archive_read_filter_bidder *reader;

	archive_check_magic(_a, ARCHIVE_READ_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_read_support_filter_lzop"");

	if (__archive_read_get_bidder(a, &reader) != ARCHIVE_OK)
		return (ARCHIVE_FATAL);

	reader->data = NULL;
	reader->bid = lzop_bidder_bid;
	reader->init = lzop_bidder_init;
	reader->options = NULL;
	reader->free = NULL;
	/* Signal the extent of lzop support with the return value here. */
#if defined(HAVE_LZO_LZOCONF_H) && defined(HAVE_LZO_LZO1X_H)
	return (ARCHIVE_OK);
#else
	/* Return ARCHIVE_WARN since this always uses an external program. */
	archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external lzop program for lzop decompression"");
	return (ARCHIVE_WARN);
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_575.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 48, 0, 0, 2, 2, 0, 0, 1, 2, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 5, 0, 0, 7, 0, 11, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_575.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,186,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for lzop decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_576.cpp,"{
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for lzop decompression"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_576.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_576.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,229,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC, ""Invalid required version"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_577.cpp,"{
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC, ""Invalid required version"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_577.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_577.cpp,30
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,237,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Unsupported method"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_578.cpp,"{
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Unsupported method"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_578.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_578.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,256,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC, ""Invalid level"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_579.cpp,"{
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC, ""Invalid level"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_579.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_579.cpp,57
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,296,"archive_set_error(&self->archive->archive,
	    ARCHIVE_ERRNO_FILE_FORMAT, ""Truncated lzop data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_580.cpp,"{
	struct read_lzop *state = (struct read_lzop *)self->data;
	const unsigned char *p, *_p;
	unsigned checksum, flags, len, method, version;

	/*
	 * Check LZOP magic code.
	 */
	p = __archive_read_filter_ahead(self->upstream,
		LZOP_HEADER_MAGIC_LEN, NULL);
	if (p == NULL)
		return (ARCHIVE_EOF);

	if (memcmp(p, LZOP_HEADER_MAGIC, LZOP_HEADER_MAGIC_LEN))
		return (ARCHIVE_EOF);
	__archive_read_filter_consume(self->upstream,
	    LZOP_HEADER_MAGIC_LEN);

	p = __archive_read_filter_ahead(self->upstream, 29, NULL);
	if (p == NULL)
		goto truncated;
	_p = p;
	version = archive_be16dec(p);
	p += 4;/* version(2 bytes) + library version(2 bytes) */

	if (version >= 0x940) {
		unsigned reqversion = archive_be16dec(p); p += 2;
		if (reqversion < 0x900) {
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC, ""Invalid required version"");
			return (ARCHIVE_FAILED);
		}
	}

	method = *p++;
	if (method < 1 || method > 3) {
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Unsupported method"");
		return (ARCHIVE_FAILED);
	}

	if (version >= 0x940) {
		unsigned level = *p++;
#if 0
		unsigned default_level[] = {0, 3, 1, 9};
#endif
		if (level == 0)
			/* Method is 1..3 here due to check above. */
#if 0	/* Avoid an error Clang Static Analyzer claims
	  ""Value stored to 'level' is never read"". */
			level = default_level[method];
#else
			;/* NOP */
#endif
		else if (level > 9) {
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC, ""Invalid level"");
			return (ARCHIVE_FAILED);
		}
	}

	flags = archive_be32dec(p); p += 4;

	if (flags & FILTER)
		p += 4; /* Skip filter */
	p += 4; /* Skip mode */
	if (version >= 0x940)
		p += 8; /* Skip mtime */
	else
		p += 4; /* Skip mtime */
	len = *p++; /* Read filename length */
	len += p - _p;
	/* Make sure we have all bytes we need to calculate checksum. */
	p = __archive_read_filter_ahead(self->upstream, len + 4, NULL);
	if (p == NULL)
		goto truncated;
	if (flags & CRC32_HEADER)
		checksum = crc32(crc32(0, NULL, 0), p, len);
	else
		checksum = adler32(adler32(0, NULL, 0), p, len);
	if (archive_be32dec(p + len) != checksum)
		goto corrupted;
	__archive_read_filter_consume(self->upstream, len + 4);
	if (flags & EXTRA_FIELD) {
		/* Skip extra field */
		p = __archive_read_filter_ahead(self->upstream, 4, NULL);
		if (p == NULL)
			goto truncated;
		len = archive_be32dec(p);
		__archive_read_filter_consume(self->upstream, len + 4 + 4);
	}
	state->flags = flags;
	state->in_stream = 1;
	return (ARCHIVE_OK);
truncated:
	archive_set_error(&self->archive->archive,
	    ARCHIVE_ERRNO_FILE_FORMAT, ""Truncated lzop data"");
	return (ARCHIVE_FAILED);
corrupted:
	archive_set_error(&self->archive->archive,
	    ARCHIVE_ERRNO_FILE_FORMAT, ""Corrupted lzop header"");
	return (ARCHIVE_FAILED);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_580.cpp,"[18, 0, 0, 0, 0, 0, 8, 0, 0, 0, 19, 2, 4, 1, 1, 185, 0, 0, 5, 10, 0, 0, 3, 33, 0, 0, 0, 0, 3, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 16, 16, 3, 0, 23, 0, 0, 30, 1, 54, 5, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_580.cpp,97
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,300,"archive_set_error(&self->archive->archive,
	    ARCHIVE_ERRNO_FILE_FORMAT, ""Corrupted lzop header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_581.cpp,"{
	struct read_lzop *state = (struct read_lzop *)self->data;
	const unsigned char *p, *_p;
	unsigned checksum, flags, len, method, version;

	/*
	 * Check LZOP magic code.
	 */
	p = __archive_read_filter_ahead(self->upstream,
		LZOP_HEADER_MAGIC_LEN, NULL);
	if (p == NULL)
		return (ARCHIVE_EOF);

	if (memcmp(p, LZOP_HEADER_MAGIC, LZOP_HEADER_MAGIC_LEN))
		return (ARCHIVE_EOF);
	__archive_read_filter_consume(self->upstream,
	    LZOP_HEADER_MAGIC_LEN);

	p = __archive_read_filter_ahead(self->upstream, 29, NULL);
	if (p == NULL)
		goto truncated;
	_p = p;
	version = archive_be16dec(p);
	p += 4;/* version(2 bytes) + library version(2 bytes) */

	if (version >= 0x940) {
		unsigned reqversion = archive_be16dec(p); p += 2;
		if (reqversion < 0x900) {
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC, ""Invalid required version"");
			return (ARCHIVE_FAILED);
		}
	}

	method = *p++;
	if (method < 1 || method > 3) {
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Unsupported method"");
		return (ARCHIVE_FAILED);
	}

	if (version >= 0x940) {
		unsigned level = *p++;
#if 0
		unsigned default_level[] = {0, 3, 1, 9};
#endif
		if (level == 0)
			/* Method is 1..3 here due to check above. */
#if 0	/* Avoid an error Clang Static Analyzer claims
	  ""Value stored to 'level' is never read"". */
			level = default_level[method];
#else
			;/* NOP */
#endif
		else if (level > 9) {
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC, ""Invalid level"");
			return (ARCHIVE_FAILED);
		}
	}

	flags = archive_be32dec(p); p += 4;

	if (flags & FILTER)
		p += 4; /* Skip filter */
	p += 4; /* Skip mode */
	if (version >= 0x940)
		p += 8; /* Skip mtime */
	else
		p += 4; /* Skip mtime */
	len = *p++; /* Read filename length */
	len += p - _p;
	/* Make sure we have all bytes we need to calculate checksum. */
	p = __archive_read_filter_ahead(self->upstream, len + 4, NULL);
	if (p == NULL)
		goto truncated;
	if (flags & CRC32_HEADER)
		checksum = crc32(crc32(0, NULL, 0), p, len);
	else
		checksum = adler32(adler32(0, NULL, 0), p, len);
	if (archive_be32dec(p + len) != checksum)
		goto corrupted;
	__archive_read_filter_consume(self->upstream, len + 4);
	if (flags & EXTRA_FIELD) {
		/* Skip extra field */
		p = __archive_read_filter_ahead(self->upstream, 4, NULL);
		if (p == NULL)
			goto truncated;
		len = archive_be32dec(p);
		__archive_read_filter_consume(self->upstream, len + 4 + 4);
	}
	state->flags = flags;
	state->in_stream = 1;
	return (ARCHIVE_OK);
truncated:
	archive_set_error(&self->archive->archive,
	    ARCHIVE_ERRNO_FILE_FORMAT, ""Truncated lzop data"");
	return (ARCHIVE_FAILED);
corrupted:
	archive_set_error(&self->archive->archive,
	    ARCHIVE_ERRNO_FILE_FORMAT, ""Corrupted lzop header"");
	return (ARCHIVE_FAILED);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_581.cpp,"[18, 0, 0, 0, 0, 0, 8, 0, 0, 0, 19, 2, 4, 1, 1, 185, 0, 0, 5, 10, 0, 0, 3, 33, 0, 0, 0, 0, 3, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 16, 16, 3, 0, 23, 0, 0, 30, 1, 54, 5, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_581.cpp,101
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,348,"archive_set_error(&self->archive->archive,
	    ARCHIVE_ERRNO_FILE_FORMAT, ""Truncated lzop data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_582.cpp,"{
	struct read_lzop *state = (struct read_lzop *)self->data;
	const unsigned char *p;
	unsigned flags = state->flags;

	p = __archive_read_filter_ahead(self->upstream, 4, NULL);
	if (p == NULL)
		goto truncated;
	state->uncompressed_size = archive_be32dec(p);
	__archive_read_filter_consume(self->upstream, 4);
	if (state->uncompressed_size == 0)
		return (ARCHIVE_EOF);
	if (state->uncompressed_size > MAX_BLOCK_SIZE)
		goto corrupted;

	p = __archive_read_filter_ahead(self->upstream, 4, NULL);
	if (p == NULL)
		goto truncated;
	state->compressed_size = archive_be32dec(p);
	__archive_read_filter_consume(self->upstream, 4);
	if (state->compressed_size > state->uncompressed_size)
		goto corrupted;

	if (flags & (CRC32_UNCOMPRESSED | ADLER32_UNCOMPRESSED)) {
		p = __archive_read_filter_ahead(self->upstream, 4, NULL);
		if (p == NULL)
			goto truncated;
		state->compressed_cksum = state->uncompressed_cksum =
		    archive_be32dec(p);
		__archive_read_filter_consume(self->upstream, 4);
	}
	if ((flags & (CRC32_COMPRESSED | ADLER32_COMPRESSED)) &&
	    state->compressed_size < state->uncompressed_size) {
		p = __archive_read_filter_ahead(self->upstream, 4, NULL);
		if (p == NULL)
			goto truncated;
		state->compressed_cksum = archive_be32dec(p);
		__archive_read_filter_consume(self->upstream, 4);
	}
	return (ARCHIVE_OK);
truncated:
	archive_set_error(&self->archive->archive,
	    ARCHIVE_ERRNO_FILE_FORMAT, ""Truncated lzop data"");
	return (ARCHIVE_FAILED);
corrupted:
	archive_set_error(&self->archive->archive,
	    ARCHIVE_ERRNO_FILE_FORMAT, ""Corrupted lzop header"");
	return (ARCHIVE_FAILED);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_582.cpp,"[9, 0, 0, 0, 0, 0, 4, 0, 0, 0, 10, 2, 6, 0, 1, 136, 0, 0, 3, 3, 0, 0, 2, 11, 0, 0, 0, 0, 2, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 9, 9, 0, 0, 14, 0, 0, 14, 0, 30, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_582.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,352,"archive_set_error(&self->archive->archive,
	    ARCHIVE_ERRNO_FILE_FORMAT, ""Corrupted lzop header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_583.cpp,"{
	struct read_lzop *state = (struct read_lzop *)self->data;
	const unsigned char *p;
	unsigned flags = state->flags;

	p = __archive_read_filter_ahead(self->upstream, 4, NULL);
	if (p == NULL)
		goto truncated;
	state->uncompressed_size = archive_be32dec(p);
	__archive_read_filter_consume(self->upstream, 4);
	if (state->uncompressed_size == 0)
		return (ARCHIVE_EOF);
	if (state->uncompressed_size > MAX_BLOCK_SIZE)
		goto corrupted;

	p = __archive_read_filter_ahead(self->upstream, 4, NULL);
	if (p == NULL)
		goto truncated;
	state->compressed_size = archive_be32dec(p);
	__archive_read_filter_consume(self->upstream, 4);
	if (state->compressed_size > state->uncompressed_size)
		goto corrupted;

	if (flags & (CRC32_UNCOMPRESSED | ADLER32_UNCOMPRESSED)) {
		p = __archive_read_filter_ahead(self->upstream, 4, NULL);
		if (p == NULL)
			goto truncated;
		state->compressed_cksum = state->uncompressed_cksum =
		    archive_be32dec(p);
		__archive_read_filter_consume(self->upstream, 4);
	}
	if ((flags & (CRC32_COMPRESSED | ADLER32_COMPRESSED)) &&
	    state->compressed_size < state->uncompressed_size) {
		p = __archive_read_filter_ahead(self->upstream, 4, NULL);
		if (p == NULL)
			goto truncated;
		state->compressed_cksum = archive_be32dec(p);
		__archive_read_filter_consume(self->upstream, 4);
	}
	return (ARCHIVE_OK);
truncated:
	archive_set_error(&self->archive->archive,
	    ARCHIVE_ERRNO_FILE_FORMAT, ""Truncated lzop data"");
	return (ARCHIVE_FAILED);
corrupted:
	archive_set_error(&self->archive->archive,
	    ARCHIVE_ERRNO_FILE_FORMAT, ""Corrupted lzop header"");
	return (ARCHIVE_FAILED);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_583.cpp,"[9, 0, 0, 0, 0, 0, 4, 0, 0, 0, 10, 2, 6, 0, 1, 136, 0, 0, 3, 3, 0, 0, 2, 11, 0, 0, 0, 0, 2, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 9, 9, 0, 0, 14, 0, 0, 14, 0, 30, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_583.cpp,47
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,399,"archive_set_error(&self->archive->archive, ENOMEM,
			    ""Can't allocate data for lzop decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_584.cpp,"{
			archive_set_error(&self->archive->archive, ENOMEM,
			    ""Can't allocate data for lzop decompression"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_584.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_584.cpp,42
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,410,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT, ""Truncated lzop data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_585.cpp,"{
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT, ""Truncated lzop data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_585.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_585.cpp,53
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,421,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Corrupted data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_586.cpp,"{
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Corrupted data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_586.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_586.cpp,64
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,447,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Corrupted data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_587.cpp,"{
	case LZO_E_OK:
		if (out_size == state->uncompressed_size)
			break;
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Corrupted data"");
		return (ARCHIVE_FATAL);
	case LZO_E_OUT_OF_MEMORY:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""lzop decompression failed: out of memory"");
		return (ARCHIVE_FATAL);
	default:
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""lzop decompression failed: %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_587.cpp,"[1, 0, 0, 0, 1, 0, 3, 0, 2, 1, 2, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_587.cpp,90
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,451,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""lzop decompression failed: out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_588.cpp,"{
	case LZO_E_OK:
		if (out_size == state->uncompressed_size)
			break;
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Corrupted data"");
		return (ARCHIVE_FATAL);
	case LZO_E_OUT_OF_MEMORY:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""lzop decompression failed: out of memory"");
		return (ARCHIVE_FATAL);
	default:
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""lzop decompression failed: %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_588.cpp,"[1, 0, 0, 0, 1, 0, 3, 0, 2, 1, 2, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_588.cpp,94
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,455,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""lzop decompression failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_589.cpp,"{
	case LZO_E_OK:
		if (out_size == state->uncompressed_size)
			break;
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Corrupted data"");
		return (ARCHIVE_FATAL);
	case LZO_E_OUT_OF_MEMORY:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""lzop decompression failed: out of memory"");
		return (ARCHIVE_FATAL);
	default:
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""lzop decompression failed: %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_589.cpp,"[1, 0, 0, 0, 1, 0, 3, 0, 2, 1, 2, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_589.cpp,98
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.cpp,469,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Corrupted data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_590.cpp,"{
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Corrupted data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_590.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_590.cpp,112
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.cpp,149,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate warc data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_591.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate warc data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_591.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_591.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.cpp,237,"archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Bad record header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_592.cpp,"{
		/* no good */
		archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Bad record header"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_592.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_592.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.cpp,252,"archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Bad record header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_593.cpp,"{
		/* still no good, the header end might be beyond the
		 * probe we've requested, but then again who'd cram
		 * so much stuff into the header *and* be 28500-compliant */
		archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Bad record header"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_593.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_593.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.cpp,260,"archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Invalid record version"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_594.cpp,"{
		archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Invalid record version"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_594.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_594.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.cpp,265,"archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Unsupported record version: %u.%u"",
			ver / 10000, (ver % 10000) / 100);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_595.cpp,"{
		archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Unsupported record version: %u.%u"",
			ver / 10000, (ver % 10000) / 100);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_595.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_595.cpp,56
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.cpp,275,"archive_set_error(
			&a->archive, EINVAL,
			""Bad content length"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_596.cpp,"{
		/* nightmare!  the specs say content-length is mandatory
		 * so I don't feel overly bad stopping the reader here */
		archive_set_error(
			&a->archive, EINVAL,
			""Bad content length"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_596.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_596.cpp,66
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.cpp,284,"archive_set_error(
			&a->archive, EINVAL,
			""Bad record time"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_597.cpp,"{
		/* record time is mandatory as per WARC/1.0,
		 * so just barf here, fast and loud */
		archive_set_error(
			&a->archive, EINVAL,
			""Bad record time"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_597.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_597.cpp,75
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.cpp,294,"archive_string_sprintf(&w->sver,
			""WARC/%u.%u"", ver / 10000, (ver % 10000) / 100);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_598.cpp,"{
		/* stringify this entry's version */
		archive_string_sprintf(&w->sver,
			""WARC/%u.%u"", ver / 10000, (ver % 10000) / 100);
		/* remember the version */
		w->pver = ver;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_598.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_598.cpp,85
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_bzip2.cpp,92,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_599.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_599.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_599.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_bzip2.cpp,110,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_600.cpp,"{
		free(data);
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_600.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_600.cpp,30
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_bzip2.cpp,114,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Using external bzip2 program"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_601.cpp,"{
	struct archive_write *a = (struct archive_write *)_a;
	struct archive_write_filter *f = __archive_write_allocate_filter(_a);
	struct private_data *data;

	archive_check_magic(&a->archive, ARCHIVE_WRITE_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_write_add_filter_bzip2"");

	data = calloc(1, sizeof(*data));
	if (data == NULL) {
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}
	data->compression_level = 9; /* default */

	f->data = data;
	f->options = &archive_compressor_bzip2_options;
	f->close = &archive_compressor_bzip2_close;
	f->free = &archive_compressor_bzip2_free;
	f->open = &archive_compressor_bzip2_open;
	f->code = ARCHIVE_FILTER_BZIP2;
	f->name = ""bzip2"";
#if defined(HAVE_BZLIB_H) && defined(BZ_CONFIG_ERROR)
	return (ARCHIVE_OK);
#else
	data->pdata = __archive_write_program_allocate(""bzip2"");
	if (data->pdata == NULL) {
		free(data);
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}
	data->compression_level = 0;
	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Using external bzip2 program"");
	return (ARCHIVE_WARN);
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_601.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 0, 93, 0, 0, 3, 3, 0, 0, 2, 9, 0, 0, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 46, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 2, 1, 0, 11, 0, 0, 16, 0, 21, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_601.cpp,34
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_bzip2.cpp,188,"archive_set_error(f->archive, ENOMEM,
			    ""Can't allocate data for compression buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_602.cpp,"{
			archive_set_error(f->archive, ENOMEM,
			    ""Can't allocate data for compression buffer"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_602.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_602.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_bzip2.cpp,208,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
	    ""Internal error initializing compression library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_603.cpp,"{
	struct private_data *data = (struct private_data *)f->data;
	int ret;

	ret = __archive_write_open_filter(f->next_filter);
	if (ret != 0)
		return (ret);

	if (data->compressed == NULL) {
		size_t bs = 65536, bpb;
		if (f->archive->magic == ARCHIVE_WRITE_MAGIC) {
			/* Buffer size should be a multiple number of the of bytes
			 * per block for performance. */
			bpb = archive_write_get_bytes_per_block(f->archive);
			if (bpb > bs)
				bs = bpb;
			else if (bpb != 0)
				bs -= bs % bpb;
		}
		data->compressed_buffer_size = bs;
		data->compressed
		    = (char *)malloc(data->compressed_buffer_size);
		if (data->compressed == NULL) {
			archive_set_error(f->archive, ENOMEM,
			    ""Can't allocate data for compression buffer"");
			return (ARCHIVE_FATAL);
		}
	}

	memset(&data->stream, 0, sizeof(data->stream));
	data->stream.next_out = data->compressed;
	data->stream.avail_out = data->compressed_buffer_size;
	f->write = archive_compressor_bzip2_write;

	/* Initialize compression library */
	ret = BZ2_bzCompressInit(&(data->stream),
	    data->compression_level, 0, 30);
	if (ret == BZ_OK) {
		f->data = data;
		return (ARCHIVE_OK);
	}

	/* Library setup failed: clean up. */
	archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
	    ""Internal error initializing compression library"");

	/* Override the error message if we know what really went wrong. */
	switch (ret) {
	case BZ_PARAM_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid setup parameter"");
		break;
	case BZ_MEM_ERROR:
		archive_set_error(f->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	case BZ_CONFIG_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""mis-compiled library"");
		break;
	}

	return (ARCHIVE_FATAL);

}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_603.cpp,"[7, 0, 0, 0, 3, 0, 4, 1, 3, 0, 9, 0, 0, 0, 0, 129, 0, 0, 3, 4, 0, 0, 2, 14, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 60, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 7, 0, 0, 11, 0, 0, 17, 1, 26, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_603.cpp,45
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_bzip2.cpp,214,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid setup parameter"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_604.cpp,"{
	case BZ_PARAM_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid setup parameter"");
		break;
	case BZ_MEM_ERROR:
		archive_set_error(f->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	case BZ_CONFIG_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""mis-compiled library"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_604.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_604.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_bzip2.cpp,219,"archive_set_error(f->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_605.cpp,"{
	case BZ_PARAM_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid setup parameter"");
		break;
	case BZ_MEM_ERROR:
		archive_set_error(f->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	case BZ_CONFIG_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""mis-compiled library"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_605.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_605.cpp,56
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_bzip2.cpp,224,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""mis-compiled library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_606.cpp,"{
	case BZ_PARAM_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid setup parameter"");
		break;
	case BZ_MEM_ERROR:
		archive_set_error(f->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	case BZ_CONFIG_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""mis-compiled library"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_606.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_606.cpp,61
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_bzip2.cpp,279,"archive_set_error(f->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Failed to clean up compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_607.cpp,"{
	case BZ_OK:
		break;
	default:
		archive_set_error(f->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Failed to clean up compressor"");
		ret = ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_607.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_607.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_bzip2.cpp,345,"archive_set_error(f->archive,
			    ARCHIVE_ERRNO_PROGRAMMER,
			    ""Bzip2 compression failed;""
			    "" BZ2_bzCompress() returned %d"",
			    ret);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_608.cpp,"{
		case BZ_RUN_OK:
			/* In non-finishing case, did compressor
			 * consume everything? */
			if (!finishing && data->stream.avail_in == 0)
				return (ARCHIVE_OK);
			break;
		case BZ_FINISH_OK:  /* Finishing: There's more work to do */
			break;
		case BZ_STREAM_END: /* Finishing: all done */
			/* Only occurs in finishing case */
			return (ARCHIVE_OK);
		default:
			/* Any other return value indicates an error */
			archive_set_error(f->archive,
			    ARCHIVE_ERRNO_PROGRAMMER,
			    ""Bzip2 compression failed;""
			    "" BZ2_bzCompress() returned %d"",
			    ret);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_608.cpp,"[1, 0, 0, 0, 2, 0, 3, 0, 3, 1, 2, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_608.cpp,40
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lzop.cpp,146,"archive_set_error(_a, ENOMEM, ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_609.cpp,"{
		archive_set_error(_a, ENOMEM, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_609.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_609.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lzop.cpp,161,"archive_set_error(_a, ARCHIVE_ERRNO_MISC,
		    ""lzo_init(type check) failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_610.cpp,"{
		free(data);
		archive_set_error(_a, ARCHIVE_ERRNO_MISC,
		    ""lzo_init(type check) failed"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_610.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_610.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lzop.cpp,167,"archive_set_error(_a, ARCHIVE_ERRNO_MISC,
		    ""liblzo library is too old(%s < 0.940)"",
		    lzo_version_string());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_611.cpp,"{
		free(data);
		archive_set_error(_a, ARCHIVE_ERRNO_MISC,
		    ""liblzo library is too old(%s < 0.940)"",
		    lzo_version_string());
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_611.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_611.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lzop.cpp,178,"archive_set_error(_a, ENOMEM, ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_612.cpp,"{
		free(data);
		archive_set_error(_a, ENOMEM, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_612.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_612.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lzop.cpp,184,"archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external lzop program for lzop compression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_613.cpp,"{
	struct archive_write_filter *f = __archive_write_allocate_filter(_a);
	struct write_lzop *data;

	archive_check_magic(_a, ARCHIVE_WRITE_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_write_add_filter_lzop"");

	data = calloc(1, sizeof(*data));
	if (data == NULL) {
		archive_set_error(_a, ENOMEM, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}

	f->name = ""lzop"";
	f->code = ARCHIVE_FILTER_LZOP;
	f->data = data;
	f->open = archive_write_lzop_open;
	f->options = archive_write_lzop_options;
	f->write = archive_write_lzop_write;
	f->close = archive_write_lzop_close;
	f->free = archive_write_lzop_free;
#if defined(HAVE_LZO_LZOCONF_H) && defined(HAVE_LZO_LZO1X_H)
	if (lzo_init() != LZO_E_OK) {
		free(data);
		archive_set_error(_a, ARCHIVE_ERRNO_MISC,
		    ""lzo_init(type check) failed"");
		return (ARCHIVE_FATAL);
	}
	if (lzo_version() < 0x940) {
		free(data);
		archive_set_error(_a, ARCHIVE_ERRNO_MISC,
		    ""liblzo library is too old(%s < 0.940)"",
		    lzo_version_string());
		return (ARCHIVE_FATAL);
	}
	data->compression_level = 5;
	return (ARCHIVE_OK);
#else
	data->pdata = __archive_write_program_allocate(""lzop"");
	if (data->pdata == NULL) {
		free(data);
		archive_set_error(_a, ENOMEM, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}
	data->compression_level = 0;
	/* Note: We return ""warn"" to inform of using an external lzop
	 * program. */
	archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external lzop program for lzop compression"");
	return (ARCHIVE_WARN);
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_613.cpp,"[5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 5, 0, 0, 0, 0, 99, 0, 0, 2, 2, 0, 0, 1, 12, 0, 0, 0, 0, 2, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 63, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 4, 1, 0, 18, 0, 0, 21, 0, 30, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_613.cpp,49
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lzop.cpp,260,"archive_set_error(f->archive, ENOMEM,
			    ""Can't allocate data for compression buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_614.cpp,"{
			archive_set_error(f->archive, ENOMEM,
			    ""Can't allocate data for compression buffer"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_614.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_614.cpp,34
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lzop.cpp,271,"archive_set_error(f->archive, ENOMEM,
			    ""Can't allocate data for compression buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_615.cpp,"{
			archive_set_error(f->archive, ENOMEM,
			    ""Can't allocate data for compression buffer"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_615.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_615.cpp,45
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lzop.cpp,281,"archive_set_error(f->archive, ENOMEM,
			    ""Can't allocate data for compression buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_616.cpp,"{
			archive_set_error(f->archive, ENOMEM,
			    ""Can't allocate data for compression buffer"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_616.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_616.cpp,55
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lzop.cpp,358,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzop compression failed: returned status %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_617.cpp,"{
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzop compression failed: returned status %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_617.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_617.cpp,39
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_compress.cpp,161,"archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for compression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_618.cpp,"{
		archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for compression"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_618.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_618.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_compress.cpp,179,"archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for compression buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_619.cpp,"{
		archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for compression buffer"");
		free(state);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_619.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_619.cpp,34
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,536,"fprintf(stderr, ""Can't load kernel32.dll?!\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_620.cpp,"{
		fprintf(stderr, ""Can't load kernel32.dll?!\n"");
		exit(1);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_620.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_620.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,621,"archive_set_error(&a->archive, errno, ""Couldn't stat file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_621.cpp,"{
	if (a->pst != NULL) {
		/* Already have stat() data available. */
		return (ARCHIVE_OK);
	}
	if (a->fh != INVALID_HANDLE_VALUE &&
	    GetFileInformationByHandle(a->fh, &a->st) == 0) {
		a->pst = &a->st;
		return (ARCHIVE_OK);
	}

	/*
	 * XXX At this point, symlinks should not be hit, otherwise
	 * XXX a race occurred.  Do we want to check explicitly for that?
	 */
	if (file_information(a, a->name, &a->st, NULL, 1) == 0) {
		a->pst = &a->st;
		return (ARCHIVE_OK);
	}
	archive_set_error(&a->archive, errno, ""Couldn't stat file"");
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_621.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_621.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,931,"archive_set_error(&a->archive, 0,
		    ""Attempt to write to an empty file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_622.cpp,"{
		archive_set_error(&a->archive, 0,
		    ""Attempt to write to an empty file"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_622.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_622.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,988,"archive_set_error(&a->archive, errno, ""Write failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_623.cpp,"{
			DWORD lasterr;

			lasterr = GetLastError();
			if (lasterr == ERROR_ACCESS_DENIED)
				errno = EBADF;
			else
				la_dosmaperr(lasterr);
			archive_set_error(&a->archive, errno, ""Write failed"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_623.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 16, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_623.cpp,69
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1015,"archive_set_error(&a->archive, 0,
		    ""Write request too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_624.cpp,"{
		archive_set_error(&a->archive, 0,
		    ""Write request too large"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_624.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_624.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1060,"archive_set_error(&a->archive, errno,
			    ""File size could not be restored"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_625.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""File size could not be restored"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_625.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_625.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1297,"archive_set_error(&a->archive, errno,
			    ""Could not unlink"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_626.cpp,"{
			/* We tried, but couldn't get rid of it. */
			archive_set_error(&a->archive, errno,
			    ""Could not unlink"");
			return(ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_626.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_626.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1341,"archive_set_error(&a->archive, errno,
			    ""Can't remove already-existing dir"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_627.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't remove already-existing dir"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_627.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_627.cpp,68
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1369,"archive_set_error(&a->archive, errno,
			    ""Can't stat existing object"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_628.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't stat existing object"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_628.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_628.cpp,96
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1389,"archive_set_error(&a->archive, 0,
			    ""Refusing to overwrite archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_629.cpp,"{
			archive_set_error(&a->archive, 0,
			    ""Refusing to overwrite archive"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_629.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_629.cpp,116
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1397,"archive_set_error(&a->archive, errno,
				    ""Can't unlink already-existing object"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_630.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't unlink already-existing object"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_630.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_630.cpp,124
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1407,"archive_set_error(&a->archive, errno,
				    ""Can't remove already-existing dir"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_631.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't remove already-existing dir"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_631.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_631.cpp,134
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1431,"archive_set_error(&a->archive, en, ""Can't create '%ls'"",
		    a->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_632.cpp,"{
		/* Everything failed; give up here. */
		archive_set_error(&a->archive, en, ""Can't create '%ls'"",
		    a->name);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_632.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_632.cpp,158
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1840,"archive_set_error(&a->archive, errno,
					    ""Could not remove symlink %ls"",
					    a->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_633.cpp,"{
					archive_set_error(&a->archive, errno,
					    ""Could not remove symlink %ls"",
					    a->name);
					pn[0] = c;
					return (ARCHIVE_FAILED);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_633.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_633.cpp,40
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1854,"archive_set_error(&a->archive, 0,
					    ""Removing symlink %ls"",
					    a->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_634.cpp,"{
					archive_set_error(&a->archive, 0,
					    ""Removing symlink %ls"",
					    a->name);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_634.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_634.cpp,54
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1864,"archive_set_error(&a->archive, 0,
					    ""Cannot remove intervening ""
					    ""symlink %ls"", a->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_635.cpp,"{
					archive_set_error(&a->archive, 0,
					    ""Cannot remove intervening ""
					    ""symlink %ls"", a->name);
					pn[0] = c;
					return (ARCHIVE_FAILED);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_635.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_635.cpp,64
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1872,"archive_set_error(&a->archive, 0,
				    ""Cannot extract through symlink %ls"",
				    a->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_636.cpp,"{
				archive_set_error(&a->archive, 0,
				    ""Cannot extract through symlink %ls"",
				    a->name);
				pn[0] = c;
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_636.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_636.cpp,72
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1916,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_637.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty pathname"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_637.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_637.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1976,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Path is a physical drive name"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_638.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Path is a physical drive name"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_638.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_638.cpp,68
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,1989,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Path is a drive name"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_639.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Path is a drive name"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_639.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_639.cpp,81
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,2030,"archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Path contains '..'"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_640.cpp,"{
						archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Path contains '..'"");
						return (ARCHIVE_FAILED);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_640.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_640.cpp,122
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,2143,"archive_set_error(&a->archive, EEXIST,
			    ""Can't create directory '%ls'"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_641.cpp,"{
			archive_set_error(&a->archive, EEXIST,
			    ""Can't create directory '%ls'"", path);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_641.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_641.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,2148,"archive_set_error(&a->archive, errno,
			    ""Can't create directory '%ls': ""
			    ""Conflicting file cannot be removed"",
			    path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_642.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't create directory '%ls': ""
			    ""Conflicting file cannot be removed"",
			    path);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_642.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_642.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,2156,"archive_set_error(&a->archive, errno,
		    ""Can't test directory '%ls'"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_643.cpp,"{
		/* Stat failed? */
		archive_set_error(&a->archive, errno,
		    ""Can't test directory '%ls'"", path);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_643.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_643.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,2210,"archive_set_error(&a->archive, errno, ""Failed to create dir '%ls'"",
	    path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_644.cpp,"{
	BY_HANDLE_FILE_INFORMATION st;
	struct fixup_entry *le;
	wchar_t *slash, *base, *full;
	mode_t mode_final, mode, st_mode;
	int r;

	/* Check for special names and just skip them. */
	slash = wcsrchr(path, L'\\');
	if (slash == NULL)
		base = path;
	else
		base = slash + 1;

	if (base[0] == L'\0' ||
	    (base[0] == L'.' && base[1] == L'\0') ||
	    (base[0] == L'.' && base[1] == L'.' && base[2] == L'\0')) {
		/* Don't bother trying to create null path, '.', or '..'. */
		if (slash != NULL) {
			*slash = L'\0';
			r = create_dir(a, path);
			*slash = L'\\';
			return (r);
		}
		return (ARCHIVE_OK);
	}

	/*
	 * Yes, this should be stat() and not lstat().  Using lstat()
	 * here loses the ability to extract through symlinks.  Also note
	 * that this should not use the a->st cache.
	 */
	if (file_information(a, path, &st, &st_mode, 0) == 0) {
		if (S_ISDIR(st_mode))
			return (ARCHIVE_OK);
		if ((a->flags & ARCHIVE_EXTRACT_NO_OVERWRITE)) {
			archive_set_error(&a->archive, EEXIST,
			    ""Can't create directory '%ls'"", path);
			return (ARCHIVE_FAILED);
		}
		if (disk_unlink(path) != 0) {
			archive_set_error(&a->archive, errno,
			    ""Can't create directory '%ls': ""
			    ""Conflicting file cannot be removed"",
			    path);
			return (ARCHIVE_FAILED);
		}
	} else if (errno != ENOENT && errno != ENOTDIR) {
		/* Stat failed? */
		archive_set_error(&a->archive, errno,
		    ""Can't test directory '%ls'"", path);
		return (ARCHIVE_FAILED);
	} else if (slash != NULL) {
		*slash = '\0';
		r = create_dir(a, path);
		*slash = '\\';
		if (r != ARCHIVE_OK)
			return (r);
	}

	/*
	 * Mode we want for the final restored directory.  Per POSIX,
	 * implicitly-created dirs must be created obeying the umask.
	 * There's no mention whether this is different for privileged
	 * restores (which the rest of this code handles by pretending
	 * umask=0).  I've chosen here to always obey the user's umask for
	 * implicit dirs, even if _EXTRACT_PERM was specified.
	 */
	mode_final = DEFAULT_DIR_MODE & ~a->user_umask;
	/* Mode we want on disk during the restore process. */
	mode = mode_final;
	mode |= MINIMUM_DIR_MODE;
	mode &= MAXIMUM_DIR_MODE;
	/*
	 * Apply __la_win_permissive_name_w to path in order to
	 * remove '../' path string.
	 */
	full = __la_win_permissive_name_w(path);
	if (full == NULL)
		errno = EINVAL;
	else if (CreateDirectoryW(full, NULL) != 0) {
		if (mode != mode_final) {
			le = new_fixup(a, path);
			le->fixup |=TODO_MODE_BASE;
			le->mode = mode_final;
		}
		free(full);
		return (ARCHIVE_OK);
	} else {
		la_dosmaperr(GetLastError());
	}
	free(full);

	/*
	 * Without the following check, a/b/../b/c/d fails at the
	 * second visit to 'b', so 'd' can't be created.  Note that we
	 * don't add it to the fixup list here, as it's already been
	 * added.
	 */
	if (file_information(a, path, &st, &st_mode, 0) == 0 &&
	    S_ISDIR(st_mode))
		return (ARCHIVE_OK);

	archive_set_error(&a->archive, errno, ""Failed to create dir '%ls'"",
	    path);
	return (ARCHIVE_FAILED);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_644.cpp,"[14, 0, 0, 0, 0, 0, 10, 0, 0, 0, 17, 0, 0, 0, 0, 154, 0, 0, 5, 9, 0, 0, 0, 29, 0, 0, 0, 0, 4, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 6, 0, 14, 14, 2, 0, 19, 0, 0, 25, 3, 43, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_644.cpp,105
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,2233,"archive_set_error(&a->archive, errno,
		    ""Can't set UID=%jd"", (intmax_t)a->uid);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_645.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Can't set UID=%jd"", (intmax_t)a->uid);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_645.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_645.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,2238,"archive_set_error(&a->archive, errno,
	    ""Can't set user=%jd/group=%jd for %ls"",
	    (intmax_t)a->uid, (intmax_t)a->gid, a->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_646.cpp,"{
/* unfortunately, on win32 there is no 'root' user with uid 0,
   so we just have to try the chown and see if it works */

	/* If we know we can't change it, don't bother trying. */
	if (a->user_uid != 0  &&  a->user_uid != a->uid) {
		archive_set_error(&a->archive, errno,
		    ""Can't set UID=%jd"", (intmax_t)a->uid);
		return (ARCHIVE_WARN);
	}

	archive_set_error(&a->archive, errno,
	    ""Can't set user=%jd/group=%jd for %ls"",
	    (intmax_t)a->uid, (intmax_t)a->gid, a->name);
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_646.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_646.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,2305,"archive_set_error(&a->archive, EINVAL, ""Can't restore time"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_647.cpp,"{
#define EPOC_TIME ARCHIVE_LITERAL_ULL(116444736000000000)
#define WINTIME(sec, nsec) ((Int32x32To64(sec, 10000000) + EPOC_TIME)\
	 + (((nsec)/1000)*10))

	HANDLE hw = 0;
	ULARGE_INTEGER wintm;
	FILETIME *pfbtime;
	FILETIME fatime, fbtime, fmtime;

	(void)ctime_sec; /* UNUSED */
	(void)ctime_nanos; /* UNUSED */

	if (h != INVALID_HANDLE_VALUE) {
		hw = NULL;
	} else {
		wchar_t *ws;

		if (S_ISLNK(mode))
			return (ARCHIVE_OK);
		ws = __la_win_permissive_name_w(name);
		if (ws == NULL)
			goto settimes_failed;
		hw = CreateFileW(ws, FILE_WRITE_ATTRIBUTES,
		    0, NULL, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, NULL);
		free(ws);
		if (hw == INVALID_HANDLE_VALUE)
			goto settimes_failed;
		h = hw;
	}

	wintm.QuadPart = WINTIME(atime, atime_nanos);
	fatime.dwLowDateTime = wintm.LowPart;
	fatime.dwHighDateTime = wintm.HighPart;
	wintm.QuadPart = WINTIME(mtime, mtime_nanos);
	fmtime.dwLowDateTime = wintm.LowPart;
	fmtime.dwHighDateTime = wintm.HighPart;
	/*
	 * SetFileTime() supports birthtime.
	 */
	if (birthtime > 0 || birthtime_nanos > 0) {
		wintm.QuadPart = WINTIME(birthtime, birthtime_nanos);
		fbtime.dwLowDateTime = wintm.LowPart;
		fbtime.dwHighDateTime = wintm.HighPart;
		pfbtime = &fbtime;
	} else
		pfbtime = NULL;
	if (SetFileTime(h, pfbtime, &fatime, &fmtime) == 0)
		goto settimes_failed;
	CloseHandle(hw);
	return (ARCHIVE_OK);

settimes_failed:
	CloseHandle(hw);
	archive_set_error(&a->archive, EINVAL, ""Can't restore time"");
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_647.cpp,"[6, 0, 0, 0, 0, 0, 3, 0, 0, 0, 9, 1, 3, 0, 0, 126, 0, 0, 5, 7, 0, 0, 1, 6, 0, 0, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 6, 6, 2, 0, 11, 2, 0, 21, 0, 25, 2, 0, 2, 2, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_647.cpp,61
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,2397,"archive_set_error(&a->archive, errno,
			    ""Can't set permissions to 0%o"", (int)mode);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_648.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't set permissions to 0%o"", (int)mode);
			r = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_648.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_648.cpp,48
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,2412,"archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_649.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_649.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_649.cpp,63
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,2421,"archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_650.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_650.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_650.cpp,72
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_windows.cpp,2460,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Cannot restore extended attributes on this system"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_651.cpp,"{
		warning_done = 1;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Cannot restore extended attributes on this system"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_651.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_651.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_fd.cpp,67,"archive_set_error(a, ENOMEM, ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_652.cpp,"{
		archive_set_error(a, ENOMEM, ""No memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_652.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_652.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_fd.cpp,87,"archive_set_error(a, errno, ""Couldn't stat fd %d"", mine->fd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_653.cpp,"{
		archive_set_error(a, errno, ""Couldn't stat fd %d"", mine->fd);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_653.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_653.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_fd.cpp,128,"archive_set_error(a, errno, ""Write error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_654.cpp,"{
			if (errno == EINTR)
				continue;
			archive_set_error(a, errno, ""Write error"");
			return (-1);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_654.cpp,"[1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_654.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_program.cpp,174,"archive_set_error(_a, ENOMEM, ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_655.cpp,"{
	struct archive_read *a = (struct archive_read *)_a;
	struct archive_read_filter_bidder *bidder;
	struct program_bidder *state;

	/*
	 * Get a bidder object from the read core.
	 */
	if (__archive_read_get_bidder(a, &bidder) != ARCHIVE_OK)
		return (ARCHIVE_FATAL);

	/*
	 * Allocate our private state.
	 */
	state = (struct program_bidder *)calloc(1, sizeof (*state));
	if (state == NULL)
		goto memerr;
	state->cmd = strdup(cmd);
	if (state->cmd == NULL)
		goto memerr;

	return set_bidder_signature(bidder, state, signature, signature_len);
memerr:
	free_state(state);
	archive_set_error(_a, ENOMEM, ""Can't allocate memory"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_655.cpp,"[3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 1, 2, 0, 0, 48, 0, 0, 3, 3, 0, 0, 1, 2, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 25, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 3, 0, 0, 7, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_655.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_program.cpp,264,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Child process exited badly"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_656.cpp,"{
		/* waitpid() failed?  This is ugly. */
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Child process exited badly"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_656.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_656.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_program.cpp,281,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Child process exited with signal %d"",
		    WTERMSIG(state->exit_status));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_657.cpp,"{
#ifdef SIGPIPE
		/* If the child died because we stopped reading before
		 * it was done, that's okay.  Some archive formats
		 * have padding at the end that we routinely ignore. */
		/* The alternative to this would be to add a step
		 * before close(child_stdout) above to read from the
		 * child until the child has no more to write. */
		if (WTERMSIG(state->exit_status) == SIGPIPE)
			return (ARCHIVE_OK);
#endif
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Child process exited with signal %d"",
		    WTERMSIG(state->exit_status));
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_657.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 1, 0, 6, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_657.cpp,44
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_program.cpp,292,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Child process exited with status %d"",
		    WEXITSTATUS(state->exit_status));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_658.cpp,"{
		if (WEXITSTATUS(state->exit_status) == 0)
			return (ARCHIVE_OK);

		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Child process exited with status %d"",
		    WEXITSTATUS(state->exit_status));
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_658.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_658.cpp,55
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_program.cpp,410,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate input data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_659.cpp,"{
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate input data"");
		if (state != NULL) {
			archive_string_free(&state->description);
			free(state);
		}
		free(out_buf);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_659.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_659.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_program.cpp,434,"archive_set_error(&self->archive->archive, EINVAL,
		    ""Can't initialize filter; unable to run program \""%s\"""",
		    cmd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_660.cpp,"{
		free(state->out_buf);
		archive_string_free(&state->description);
		free(state);
		archive_set_error(&self->archive->archive, EINVAL,
		    ""Can't initialize filter; unable to run program \""%s\"""",
		    cmd);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_660.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_660.cpp,39
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_program.cpp,446,"archive_set_error(&self->archive->archive, EINVAL,
		    ""Can't initialize filter; unable to run program \""%s\"""",
		    cmd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_661.cpp,"{
		child_stop(self, state);
		free(state->out_buf);
		archive_string_free(&state->description);
		free(state);
		archive_set_error(&self->archive->archive, EINVAL,
		    ""Can't initialize filter; unable to run program \""%s\"""",
		    cmd);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_661.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_661.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_gzip.cpp,111,"archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external gzip program"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_662.cpp,"{
	struct archive_read *a = (struct archive_read *)_a;
	struct archive_read_filter_bidder *bidder;

	archive_check_magic(_a, ARCHIVE_READ_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_read_support_filter_gzip"");

	if (__archive_read_get_bidder(a, &bidder) != ARCHIVE_OK)
		return (ARCHIVE_FATAL);

	bidder->data = NULL;
	bidder->name = ""gzip"";
	bidder->bid = gzip_bidder_bid;
	bidder->init = gzip_bidder_init;
	bidder->options = NULL;
	bidder->free = NULL; /* No data, so no cleanup necessary. */
	/* Signal the extent of gzip support with the return value here. */
#if HAVE_ZLIB_H
	return (ARCHIVE_OK);
#else
	archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external gzip program"");
	return (ARCHIVE_WARN);
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_662.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 48, 0, 0, 2, 2, 0, 0, 1, 3, 0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 8, 0, 9, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_662.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_gzip.cpp,263,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for gzip decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_663.cpp,"{
		free(out_block);
		free(state);
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for gzip decompression"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_663.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_663.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_gzip.cpp,312,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid setup parameter"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_664.cpp,"{
	case Z_OK:
		state->in_stream = 1;
		return (ARCHIVE_OK);
	case Z_STREAM_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid setup parameter"");
		break;
	case Z_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	case Z_VERSION_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid library version"");
		break;
	default:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    "" Zlib error %d"", ret);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_664.cpp,"[0, 0, 0, 0, 4, 0, 1, 0, 4, 1, 1, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_664.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_gzip.cpp,318,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_665.cpp,"{
	case Z_OK:
		state->in_stream = 1;
		return (ARCHIVE_OK);
	case Z_STREAM_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid setup parameter"");
		break;
	case Z_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	case Z_VERSION_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid library version"");
		break;
	default:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    "" Zlib error %d"", ret);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_665.cpp,"[0, 0, 0, 0, 4, 0, 1, 0, 4, 1, 1, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_665.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_gzip.cpp,323,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid library version"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_666.cpp,"{
	case Z_OK:
		state->in_stream = 1;
		return (ARCHIVE_OK);
	case Z_STREAM_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid setup parameter"");
		break;
	case Z_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	case Z_VERSION_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid library version"");
		break;
	default:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    "" Zlib error %d"", ret);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_666.cpp,"[0, 0, 0, 0, 4, 0, 1, 0, 4, 1, 1, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_666.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_gzip.cpp,329,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    "" Zlib error %d"", ret);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_667.cpp,"{
	case Z_OK:
		state->in_stream = 1;
		return (ARCHIVE_OK);
	case Z_STREAM_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid setup parameter"");
		break;
	case Z_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	case Z_VERSION_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid library version"");
		break;
	default:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    "" Zlib error %d"", ret);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_667.cpp,"[0, 0, 0, 0, 4, 0, 1, 0, 4, 1, 1, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_667.cpp,49
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_gzip.cpp,352,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up gzip decompressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_668.cpp,"{
	case Z_OK:
		break;
	default:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up gzip decompressor"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_668.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_668.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_gzip.cpp,405,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated gzip input"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_669.cpp,"{
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated gzip input"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_669.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_669.cpp,34
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_gzip.cpp,430,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""gzip decompression failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_670.cpp,"{
		case Z_OK: /* Decompressor made some progress. */
			__archive_read_filter_consume(self->upstream,
			    avail_in - state->stream.avail_in);
			break;
		case Z_STREAM_END: /* Found end of stream. */
			__archive_read_filter_consume(self->upstream,
			    avail_in - state->stream.avail_in);
			/* Consume the stream trailer; release the
			 * decompression library. */
			ret = consume_trailer(self);
			if (ret < ARCHIVE_OK)
				return (ret);
			break;
		default:
			/* Return an error. */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""gzip decompression failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_670.cpp,"[1, 0, 0, 0, 2, 0, 2, 0, 2, 1, 2, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_670.cpp,59
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_gzip.cpp,464,"archive_set_error(&(self->archive->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up gzip compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_671.cpp,"{
		case Z_OK:
			break;
		default:
			archive_set_error(&(self->archive->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up gzip compressor"");
			ret = ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_671.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_671.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1064,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate iso9660 data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_672.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate iso9660 data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_672.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_672.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1162,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_673.cpp,"{
		free(iso9660);
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_673.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_673.cpp,113
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1194,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Value is longer than %zu characters ""
		    ""for option ``%s''"", maxsize, key);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_674.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Value is longer than %zu characters ""
		    ""for option ``%s''"", maxsize, key);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_674.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_674.cpp,6
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1212,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid value(empty) for option ``%s''"", key);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_675.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid value(empty) for option ``%s''"", key);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_675.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_675.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1224,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid value for option ``%s''"", key);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_676.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid value for option ``%s''"", key);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_676.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_676.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1229,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid value(over %d) for ""
			    ""option ``%s''"", high, key);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_677.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid value(over %d) for ""
			    ""option ``%s''"", high, key);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_677.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_677.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1235,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid value(under %d) for ""
			    ""option ``%s''"", low, key);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_678.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid value(under %d) for ""
			    ""option ``%s''"", low, key);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_678.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_678.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1329,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Invalid value(over 0xffff) for ""
					    ""option ``%s''"", key);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_679.cpp,"{
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Invalid value(over 0xffff) for ""
					    ""option ``%s''"", key);
					return (ARCHIVE_FATAL);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_679.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_679.cpp,80
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1375,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Option ``%s'' ""
			    ""is not supported on this platform."", key);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_680.cpp,"{
#ifdef HAVE_ZLIB_H
			if (value == NULL ||
			    !(value[0] >= '0' && value[0] <= '9') ||
			    value[1] != '\0')
				goto invalid_value;
                	iso9660->zisofs.compression_level = value[0] - '0';
			iso9660->opt.compression_level = 1;
                	return (ARCHIVE_OK);
#else
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Option ``%s'' ""
			    ""is not supported on this platform."", key);
			return (ARCHIVE_FATAL);
#endif
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_680.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 1, 1, 0, 1, 0, 0, 3, 0, 4, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_680.cpp,126
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1497,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""``zisofs'' ""
				    ""is not supported on this platform."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_681.cpp,"{
#ifdef HAVE_ZLIB_H
				iso9660->opt.zisofs = OPT_ZISOFS_DIRECT;
#else
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""``zisofs'' ""
				    ""is not supported on this platform."");
				return (ARCHIVE_FATAL);
#endif
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_681.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 0, 3, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_681.cpp,248
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1515,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Invalid value for option ``%s''"", key);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_682.cpp,"{
	struct iso9660 *iso9660 = a->format_data;
	const char *p;
	int r;

	switch (key[0]) {
	case 'a':
		if (strcmp(key, ""abstract-file"") == 0) {
			r = get_str_opt(a,
			    &(iso9660->abstract_file_identifier),
			    ABSTRACT_FILE_SIZE, key, value);
			iso9660->opt.abstract_file = r == ARCHIVE_OK;
			return (r);
		}
		if (strcmp(key, ""application-id"") == 0) {
			r = get_str_opt(a,
			    &(iso9660->application_identifier),
			    APPLICATION_IDENTIFIER_SIZE, key, value);
			iso9660->opt.application_id = r == ARCHIVE_OK;
			return (r);
		}
		if (strcmp(key, ""allow-vernum"") == 0) {
			iso9660->opt.allow_vernum = value != NULL;
			return (ARCHIVE_OK);
		}
		break;
	case 'b':
		if (strcmp(key, ""biblio-file"") == 0) {
			r = get_str_opt(a,
			    &(iso9660->bibliographic_file_identifier),
			    BIBLIO_FILE_SIZE, key, value);
			iso9660->opt.biblio_file = r == ARCHIVE_OK;
			return (r);
		}
		if (strcmp(key, ""boot"") == 0) {
			if (value == NULL)
				iso9660->opt.boot = 0;
			else {
				iso9660->opt.boot = 1;
				archive_strcpy(
				    &(iso9660->el_torito.boot_filename),
				    value);
			}
			return (ARCHIVE_OK);
		}
		if (strcmp(key, ""boot-catalog"") == 0) {
			r = get_str_opt(a,
			    &(iso9660->el_torito.catalog_filename),
			    1024, key, value);
			iso9660->opt.boot_catalog = r == ARCHIVE_OK;
			return (r);
		}
		if (strcmp(key, ""boot-info-table"") == 0) {
			iso9660->opt.boot_info_table = value != NULL;
			return (ARCHIVE_OK);
		}
		if (strcmp(key, ""boot-load-seg"") == 0) {
			uint32_t seg;

			iso9660->opt.boot_load_seg = 0;
			if (value == NULL)
				goto invalid_value;
			seg = 0;
			p = value;
			if (p[0] == '0' && (p[1] == 'x' || p[1] == 'X'))
				p += 2;
			while (*p) {
				if (seg)
					seg <<= 4;
				if (*p >= 'A' && *p <= 'F')
					seg += *p - 'A' + 0x0a;
				else if (*p >= 'a' && *p <= 'f')
					seg += *p - 'a' + 0x0a;
				else if (*p >= '0' && *p <= '9')
					seg += *p - '0';
				else
					goto invalid_value;
				if (seg > 0xffff) {
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Invalid value(over 0xffff) for ""
					    ""option ``%s''"", key);
					return (ARCHIVE_FATAL);
				}
				p++;
			}
			iso9660->el_torito.boot_load_seg = (uint16_t)seg;
			iso9660->opt.boot_load_seg = 1;
			return (ARCHIVE_OK);
		}
		if (strcmp(key, ""boot-load-size"") == 0) {
			int num = 0;
			r = get_num_opt(a, &num, 0xffff, 1, key, value);
			iso9660->opt.boot_load_size = r == ARCHIVE_OK;
			if (r != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
			iso9660->el_torito.boot_load_size = (uint16_t)num;
			return (ARCHIVE_OK);
		}
		if (strcmp(key, ""boot-type"") == 0) {
			if (value == NULL)
				goto invalid_value;
			if (strcmp(value, ""no-emulation"") == 0)
				iso9660->opt.boot_type = OPT_BOOT_TYPE_NO_EMU;
			else if (strcmp(value, ""fd"") == 0)
				iso9660->opt.boot_type = OPT_BOOT_TYPE_FD;
			else if (strcmp(value, ""hard-disk"") == 0)
				iso9660->opt.boot_type = OPT_BOOT_TYPE_HARD_DISK;
			else
				goto invalid_value;
			return (ARCHIVE_OK);
		}
		break;
	case 'c':
		if (strcmp(key, ""compression-level"") == 0) {
#ifdef HAVE_ZLIB_H
			if (value == NULL ||
			    !(value[0] >= '0' && value[0] <= '9') ||
			    value[1] != '\0')
				goto invalid_value;
                	iso9660->zisofs.compression_level = value[0] - '0';
			iso9660->opt.compression_level = 1;
                	return (ARCHIVE_OK);
#else
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Option ``%s'' ""
			    ""is not supported on this platform."", key);
			return (ARCHIVE_FATAL);
#endif
		}
		if (strcmp(key, ""copyright-file"") == 0) {
			r = get_str_opt(a,
			    &(iso9660->copyright_file_identifier),
			    COPYRIGHT_FILE_SIZE, key, value);
			iso9660->opt.copyright_file = r == ARCHIVE_OK;
			return (r);
		}
#ifdef DEBUG
		/* Specifies Volume creation date and time;
		 * year(4),month(2),day(2),hour(2),minute(2),second(2).
		 * e.g. ""20090929033757""
		 */
		if (strcmp(key, ""creation"") == 0) {
			struct tm tm;
			char buf[5];

			p = value;
			if (p == NULL || strlen(p) < 14)
				goto invalid_value;
			memset(&tm, 0, sizeof(tm));
			memcpy(buf, p, 4); buf[4] = '\0'; p += 4;
			tm.tm_year = strtol(buf, NULL, 10) - 1900;
			memcpy(buf, p, 2); buf[2] = '\0'; p += 2;
			tm.tm_mon = strtol(buf, NULL, 10) - 1;
			memcpy(buf, p, 2); buf[2] = '\0'; p += 2;
			tm.tm_mday = strtol(buf, NULL, 10);
			memcpy(buf, p, 2); buf[2] = '\0'; p += 2;
			tm.tm_hour = strtol(buf, NULL, 10);
			memcpy(buf, p, 2); buf[2] = '\0'; p += 2;
			tm.tm_min = strtol(buf, NULL, 10);
			memcpy(buf, p, 2); buf[2] = '\0';
			tm.tm_sec = strtol(buf, NULL, 10);
			iso9660->birth_time = mktime(&tm);
			return (ARCHIVE_OK);
		}
#endif
		break;
	case 'i':
		if (strcmp(key, ""iso-level"") == 0) {
			if (value != NULL && value[1] == '\0' &&
			    (value[0] >= '1' && value[0] <= '4')) {
				iso9660->opt.iso_level = value[0]-'0';
				return (ARCHIVE_OK);
			}
			goto invalid_value;
		}
		break;
	case 'j':
		if (strcmp(key, ""joliet"") == 0) {
			if (value == NULL)
				iso9660->opt.joliet = OPT_JOLIET_DISABLE;
			else if (strcmp(value, ""1"") == 0)
				iso9660->opt.joliet = OPT_JOLIET_ENABLE;
			else if (strcmp(value, ""long"") == 0)
				iso9660->opt.joliet = OPT_JOLIET_LONGNAME;
			else
				goto invalid_value;
			return (ARCHIVE_OK);
		}
		break;
	case 'l':
		if (strcmp(key, ""limit-depth"") == 0) {
			iso9660->opt.limit_depth = value != NULL;
			return (ARCHIVE_OK);
		}
		if (strcmp(key, ""limit-dirs"") == 0) {
			iso9660->opt.limit_dirs = value != NULL;
			return (ARCHIVE_OK);
		}
		break;
	case 'p':
		if (strcmp(key, ""pad"") == 0) {
			iso9660->opt.pad = value != NULL;
			return (ARCHIVE_OK);
		}
		if (strcmp(key, ""publisher"") == 0) {
			r = get_str_opt(a,
			    &(iso9660->publisher_identifier),
			    PUBLISHER_IDENTIFIER_SIZE, key, value);
			iso9660->opt.publisher = r == ARCHIVE_OK;
			return (r);
		}
		break;
	case 'r':
		if (strcmp(key, ""rockridge"") == 0 ||
		    strcmp(key, ""Rockridge"") == 0) {
			if (value == NULL)
				iso9660->opt.rr = OPT_RR_DISABLED;
			else if (strcmp(value, ""1"") == 0)
				iso9660->opt.rr = OPT_RR_USEFUL;
			else if (strcmp(value, ""strict"") == 0)
				iso9660->opt.rr = OPT_RR_STRICT;
			else if (strcmp(value, ""useful"") == 0)
				iso9660->opt.rr = OPT_RR_USEFUL;
			else
				goto invalid_value;
			return (ARCHIVE_OK);
		}
		break;
	case 'v':
		if (strcmp(key, ""volume-id"") == 0) {
			r = get_str_opt(a, &(iso9660->volume_identifier),
			    VOLUME_IDENTIFIER_SIZE, key, value);
			iso9660->opt.volume_id = r == ARCHIVE_OK;
			return (r);
		}
		break;
	case 'z':
		if (strcmp(key, ""zisofs"") == 0) {
			if (value == NULL)
				iso9660->opt.zisofs = OPT_ZISOFS_DISABLED;
			else {
#ifdef HAVE_ZLIB_H
				iso9660->opt.zisofs = OPT_ZISOFS_DIRECT;
#else
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""``zisofs'' ""
				    ""is not supported on this platform."");
				return (ARCHIVE_FATAL);
#endif
			}
			return (ARCHIVE_OK);
		}
		break;
	}

	/* Note: The ""warn"" return is just to inform the options
	 * supervisor that we didn't handle it.  It will generate
	 * a suitable error if no one used this option. */
	return (ARCHIVE_WARN);

invalid_value:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Invalid value for option ``%s''"", key);
	return (ARCHIVE_FAILED);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_682.cpp,"[46, 1, 0, 0, 10, 0, 28, 1, 10, 0, 55, 1, 9, 0, 1, 549, 0, 0, 7, 7, 0, 0, 2, 160, 0, 0, 0, 0, 2, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 360, 0, 350, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 19, 0, 48, 46, 8, 0, 60, 0, 0, 81, 9, 162, 8, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_682.cpp,266
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1535,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Ignore symlink file."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_683.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Ignore symlink file."");
		iso9660->cur_file = NULL;
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_683.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_683.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1543,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Ignore over %lld bytes file. ""
			    ""This file too large."",
			    MULTI_EXTENT_SIZE);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_684.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Ignore over %lld bytes file. ""
			    ""This file too large."",
			    MULTI_EXTENT_SIZE);
				iso9660->cur_file = NULL;
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_684.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_684.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1556,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_685.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_685.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_685.cpp,36
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1581,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_686.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_686.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_686.cpp,61
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1621,"archive_set_error(&a->archive, errno,
			    ""Couldn't create temporary file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_687.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Couldn't create temporary file"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_687.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_687.cpp,101
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1649,"archive_set_error(&a->archive, errno,
			    ""Can't write to temporary file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_688.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't write to temporary file"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_688.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_688.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1715,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Couldn't create temporary file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_689.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Couldn't create temporary file"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_689.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_689.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,1760,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate content data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_690.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate content data"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_690.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_690.cpp,52
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,2099,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""%s: Directories too deep."",
		    archive_entry_pathname(
			iso9660->directories_too_deep->file->entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_691.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""%s: Directories too deep."",
		    archive_entry_pathname(
			iso9660->directories_too_deep->file->entry));
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_691.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_691.cpp,249
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,2248,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for UTF-16BE"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_692.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for UTF-16BE"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_692.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_692.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,3651,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal Programing error: iso9660:wb_consume()""
		    "" size=%jd, wbuff_remaining=%jd"",
		    (intmax_t)size, (intmax_t)iso9660->wbuff_remaining);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_693.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal Programing error: iso9660:wb_consume()""
		    "" size=%jd, wbuff_remaining=%jd"",
		    (intmax_t)size, (intmax_t)iso9660->wbuff_remaining);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_693.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_693.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,3672,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal Programing error: iso9660:wb_set_offset()"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_694.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal Programing error: iso9660:wb_set_offset()"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_694.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_694.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,3795,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Not Found %s `%s'."",
			    label, ids);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_695.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Not Found %s `%s'."",
			    label, ids);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_695.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_695.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,4023,"archive_string_sprintf(info, ""%c%s%s"",
		    prefix, (d == 0)?""!"":"""", key);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_696.cpp,"{
	case KEY_FLG:
		d = va_arg(ap, int);
		archive_string_sprintf(info, ""%c%s%s"",
		    prefix, (d == 0)?""!"":"""", key);
		break;
	case KEY_STR:
		s = va_arg(ap, const char *);
		archive_string_sprintf(info, ""%c%s=%s"",
		    prefix, key, s);
		break;
	case KEY_INT:
		d = va_arg(ap, int);
		archive_string_sprintf(info, ""%c%s=%d"",
		    prefix, key, d);
		break;
	case KEY_HEX:
		d = va_arg(ap, int);
		archive_string_sprintf(info, ""%c%s=%x"",
		    prefix, key, d);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_696.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 1, 0, 0, 0, 1, 40, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 8, 0, 0, 8, 0, 28, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_696.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,4028,"archive_string_sprintf(info, ""%c%s=%s"",
		    prefix, key, s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_697.cpp,"{
	case KEY_FLG:
		d = va_arg(ap, int);
		archive_string_sprintf(info, ""%c%s%s"",
		    prefix, (d == 0)?""!"":"""", key);
		break;
	case KEY_STR:
		s = va_arg(ap, const char *);
		archive_string_sprintf(info, ""%c%s=%s"",
		    prefix, key, s);
		break;
	case KEY_INT:
		d = va_arg(ap, int);
		archive_string_sprintf(info, ""%c%s=%d"",
		    prefix, key, d);
		break;
	case KEY_HEX:
		d = va_arg(ap, int);
		archive_string_sprintf(info, ""%c%s=%x"",
		    prefix, key, d);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_697.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 1, 0, 0, 0, 1, 40, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 8, 0, 0, 8, 0, 28, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_697.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,4033,"archive_string_sprintf(info, ""%c%s=%d"",
		    prefix, key, d);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_698.cpp,"{
	case KEY_FLG:
		d = va_arg(ap, int);
		archive_string_sprintf(info, ""%c%s%s"",
		    prefix, (d == 0)?""!"":"""", key);
		break;
	case KEY_STR:
		s = va_arg(ap, const char *);
		archive_string_sprintf(info, ""%c%s=%s"",
		    prefix, key, s);
		break;
	case KEY_INT:
		d = va_arg(ap, int);
		archive_string_sprintf(info, ""%c%s=%d"",
		    prefix, key, d);
		break;
	case KEY_HEX:
		d = va_arg(ap, int);
		archive_string_sprintf(info, ""%c%s=%x"",
		    prefix, key, d);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_698.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 1, 0, 0, 0, 1, 40, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 8, 0, 0, 8, 0, 28, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_698.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,4038,"archive_string_sprintf(info, ""%c%s=%x"",
		    prefix, key, d);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_699.cpp,"{
	case KEY_FLG:
		d = va_arg(ap, int);
		archive_string_sprintf(info, ""%c%s%s"",
		    prefix, (d == 0)?""!"":"""", key);
		break;
	case KEY_STR:
		s = va_arg(ap, const char *);
		archive_string_sprintf(info, ""%c%s=%s"",
		    prefix, key, s);
		break;
	case KEY_INT:
		d = va_arg(ap, int);
		archive_string_sprintf(info, ""%c%s=%d"",
		    prefix, key, d);
		break;
	case KEY_HEX:
		d = va_arg(ap, int);
		archive_string_sprintf(info, ""%c%s=%x"",
		    prefix, key, d);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_699.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 1, 0, 0, 0, 1, 40, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 8, 0, 0, 8, 0, 28, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_699.cpp,29
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,4069,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_700.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_700.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_700.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,4086,"archive_string_sprintf(&info,
	    ""INFO %s%s"", buf, archive_version_string());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_701.cpp,"{
	struct iso9660 *iso9660;
	char buf[128];
	const char *v;
	int opt, r;
	struct archive_string info;
	size_t info_size = LOGICAL_BLOCK_SIZE *
			       NON_ISO_FILE_SYSTEM_INFORMATION_BLOCK;

	iso9660 = (struct iso9660 *)a->format_data;
	if (info_size > wb_remaining(a)) {
		r = wb_write_out(a);
		if (r != ARCHIVE_OK)
			return (r);
	}
	archive_string_init(&info);
	if (archive_string_ensure(&info, info_size) == NULL) {
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}
	memset(info.s, 0, info_size);
	opt = 0;
#if defined(HAVE__CTIME64_S)
	{
		__time64_t iso9660_birth_time_tmp = (__time64_t) iso9660->birth_time; //time_t may be shorter than 64 bits
		_ctime64_s(buf, sizeof(buf), &(iso9660_birth_time_tmp));
	}
#elif defined(HAVE_CTIME_R)
	ctime_r(&(iso9660->birth_time), buf);
#else
	strncpy(buf, ctime(&(iso9660->birth_time)), sizeof(buf)-1);
	buf[sizeof(buf)-1] = '\0';
#endif
	archive_string_sprintf(&info,
	    ""INFO %s%s"", buf, archive_version_string());
	if (iso9660->opt.abstract_file != OPT_ABSTRACT_FILE_DEFAULT)
		set_option_info(&info, &opt, ""abstract-file"",
		    KEY_STR, iso9660->abstract_file_identifier.s);
	if (iso9660->opt.application_id != OPT_APPLICATION_ID_DEFAULT)
		set_option_info(&info, &opt, ""application-id"",
		    KEY_STR, iso9660->application_identifier.s);
	if (iso9660->opt.allow_vernum != OPT_ALLOW_VERNUM_DEFAULT)
		set_option_info(&info, &opt, ""allow-vernum"",
		    KEY_FLG, iso9660->opt.allow_vernum);
	if (iso9660->opt.biblio_file != OPT_BIBLIO_FILE_DEFAULT)
		set_option_info(&info, &opt, ""biblio-file"",
		    KEY_STR, iso9660->bibliographic_file_identifier.s);
	if (iso9660->opt.boot != OPT_BOOT_DEFAULT)
		set_option_info(&info, &opt, ""boot"",
		    KEY_STR, iso9660->el_torito.boot_filename.s);
	if (iso9660->opt.boot_catalog != OPT_BOOT_CATALOG_DEFAULT)
		set_option_info(&info, &opt, ""boot-catalog"",
		    KEY_STR, iso9660->el_torito.catalog_filename.s);
	if (iso9660->opt.boot_info_table != OPT_BOOT_INFO_TABLE_DEFAULT)
		set_option_info(&info, &opt, ""boot-info-table"",
		    KEY_FLG, iso9660->opt.boot_info_table);
	if (iso9660->opt.boot_load_seg != OPT_BOOT_LOAD_SEG_DEFAULT)
		set_option_info(&info, &opt, ""boot-load-seg"",
		    KEY_HEX, iso9660->el_torito.boot_load_seg);
	if (iso9660->opt.boot_load_size != OPT_BOOT_LOAD_SIZE_DEFAULT)
		set_option_info(&info, &opt, ""boot-load-size"",
		    KEY_INT, iso9660->el_torito.boot_load_size);
	if (iso9660->opt.boot_type != OPT_BOOT_TYPE_DEFAULT) {
		v = ""no-emulation"";
		if (iso9660->opt.boot_type == OPT_BOOT_TYPE_FD)
			v = ""fd"";
		if (iso9660->opt.boot_type == OPT_BOOT_TYPE_HARD_DISK)
			v = ""hard-disk"";
		set_option_info(&info, &opt, ""boot-type"",
		    KEY_STR, v);
	}
#ifdef HAVE_ZLIB_H
	if (iso9660->opt.compression_level != OPT_COMPRESSION_LEVEL_DEFAULT)
		set_option_info(&info, &opt, ""compression-level"",
		    KEY_INT, iso9660->zisofs.compression_level);
#endif
	if (iso9660->opt.copyright_file != OPT_COPYRIGHT_FILE_DEFAULT)
		set_option_info(&info, &opt, ""copyright-file"",
		    KEY_STR, iso9660->copyright_file_identifier.s);
	if (iso9660->opt.iso_level != OPT_ISO_LEVEL_DEFAULT)
		set_option_info(&info, &opt, ""iso-level"",
		    KEY_INT, iso9660->opt.iso_level);
	if (iso9660->opt.joliet != OPT_JOLIET_DEFAULT) {
		if (iso9660->opt.joliet == OPT_JOLIET_LONGNAME)
			set_option_info(&info, &opt, ""joliet"",
			    KEY_STR, ""long"");
		else
			set_option_info(&info, &opt, ""joliet"",
			    KEY_FLG, iso9660->opt.joliet);
	}
	if (iso9660->opt.limit_depth != OPT_LIMIT_DEPTH_DEFAULT)
		set_option_info(&info, &opt, ""limit-depth"",
		    KEY_FLG, iso9660->opt.limit_depth);
	if (iso9660->opt.limit_dirs != OPT_LIMIT_DIRS_DEFAULT)
		set_option_info(&info, &opt, ""limit-dirs"",
		    KEY_FLG, iso9660->opt.limit_dirs);
	if (iso9660->opt.pad != OPT_PAD_DEFAULT)
		set_option_info(&info, &opt, ""pad"",
		    KEY_FLG, iso9660->opt.pad);
	if (iso9660->opt.publisher != OPT_PUBLISHER_DEFAULT)
		set_option_info(&info, &opt, ""publisher"",
		    KEY_STR, iso9660->publisher_identifier.s);
	if (iso9660->opt.rr != OPT_RR_DEFAULT) {
		if (iso9660->opt.rr == OPT_RR_DISABLED)
			set_option_info(&info, &opt, ""rockridge"",
			    KEY_FLG, iso9660->opt.rr);
		else if (iso9660->opt.rr == OPT_RR_STRICT)
			set_option_info(&info, &opt, ""rockridge"",
			    KEY_STR, ""strict"");
		else if (iso9660->opt.rr == OPT_RR_USEFUL)
			set_option_info(&info, &opt, ""rockridge"",
			    KEY_STR, ""useful"");
	}
	if (iso9660->opt.volume_id != OPT_VOLUME_ID_DEFAULT)
		set_option_info(&info, &opt, ""volume-id"",
		    KEY_STR, iso9660->volume_identifier.s);
	if (iso9660->opt.zisofs != OPT_ZISOFS_DEFAULT)
		set_option_info(&info, &opt, ""zisofs"",
		    KEY_FLG, iso9660->opt.zisofs);

	memcpy(wb_buffptr(a), info.s, info_size);
	archive_string_free(&info);
	return (wb_consume(a, info_size));
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_701.cpp,"[31, 0, 0, 0, 0, 0, 3, 0, 0, 0, 33, 0, 0, 0, 1, 415, 0, 0, 7, 8, 0, 0, 2, 38, 0, 0, 0, 0, 2, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 0, 235, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 2, 0, 30, 30, 2, 0, 45, 0, 0, 40, 2, 156, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_701.cpp,36
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,4497,"archive_set_error(&a->archive, errno,
			    ""Can't read temporary file(%jd)"", (intmax_t)rs);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_702.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't read temporary file(%jd)"", (intmax_t)rs);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_702.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_702.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,4759,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for UTF-16BE"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_703.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for UTF-16BE"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_703.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_703.cpp,50
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,4763,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""A filename cannot be converted to UTF-16BE;""
			    ""You should disable making Joliet extension"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_704.cpp,"{
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for UTF-16BE"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""A filename cannot be converted to UTF-16BE;""
			    ""You should disable making Joliet extension"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_704.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_704.cpp,54
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,4808,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for UTF-16BE"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_705.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for UTF-16BE"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_705.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_705.cpp,99
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,4839,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_706.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_706.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_706.cpp,130
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,4955,"archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_707.cpp,"{
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory"");
					return (ARCHIVE_FATAL);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_707.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_707.cpp,246
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,5009,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_708.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_708.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_708.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,5324,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_709.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_709.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_709.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,5595,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""A name buffer is too small"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_710.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""A name buffer is too small"");
			_isoent_free(isoent);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_710.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_710.cpp,47
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,5609,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""`%s' is not directory, we cannot insert `%s' "",
			    archive_entry_pathname(np->file->entry),
			    archive_entry_pathname(isoent->file->entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_711.cpp,"{
			/* NOT Directory! */
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""`%s' is not directory, we cannot insert `%s' "",
			    archive_entry_pathname(np->file->entry),
			    archive_entry_pathname(isoent->file->entry));
			_isoent_free(isoent);
			*isoentpp = NULL;
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_711.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_711.cpp,61
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,5640,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_712.cpp,"{
				archive_string_free(&as);
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory"");
				_isoent_free(isoent);
				*isoentpp = NULL;
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_712.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_712.cpp,92
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,5659,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""A name buffer is too small"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_713.cpp,"{
				archive_string_free(&as);
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""A name buffer is too small"");
				_isoent_free(isoent);
				*isoentpp = NULL;
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_713.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_713.cpp,111
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,5709,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Found duplicate entries `%s' and its file type is ""
		    ""different"",
		    archive_entry_pathname(f1->entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_714.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Found duplicate entries `%s' and its file type is ""
		    ""different"",
		    archive_entry_pathname(f1->entry));
		_isoent_free(isoent);
		*isoentpp = NULL;
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_714.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_714.cpp,161
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,5842,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_715.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_715.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_715.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,6037,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_716.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_716.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_716.cpp,65
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,6263,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_717.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_717.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_717.cpp,41
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,6296,"archive_set_error(&a->archive, errno,
				    ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_718.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""No memory"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_718.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_718.cpp,74
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,6311,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""The regulation of Joliet extensions;""
			    "" A length of a full-pathname of `%s' is ""
			    ""longer than 240 bytes, (p=%d, b=%d)"",
			    archive_entry_pathname(np->file->entry),
			    (int)parent_len, (int)np->mb_len);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_719.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""The regulation of Joliet extensions;""
			    "" A length of a full-pathname of `%s' is ""
			    ""longer than 240 bytes, (p=%d, b=%d)"",
			    archive_entry_pathname(np->file->entry),
			    (int)parent_len, (int)np->mb_len);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_719.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_719.cpp,89
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,6530,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_720.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_720.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_720.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,6671,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_721.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_721.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_721.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,6690,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_722.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_722.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_722.cpp,33
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,6924,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_723.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_723.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_723.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,6969,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_724.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_724.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_724.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7073,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Too many directories(%d) over 65535."", dir_number);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_725.cpp,"{
		/*
		 * Maximum number of directories is 65535(0xffff)
		 * doe to size(16bit) of Parent Directory Number of
		 * the Path Table.
		 * See also ISO9660 Standard 9.4.
		 */
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Too many directories(%d) over 65535."", dir_number);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_725.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_725.cpp,88
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7095,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't find the boot image file ``%s''"",
		    iso9660->el_torito.boot_filename.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_726.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't find the boot image file ``%s''"",
		    iso9660->el_torito.boot_filename.s);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_726.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_726.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7118,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_727.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_727.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_727.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7143,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_728.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_728.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_728.cpp,39
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7195,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Boot image file(``%s'') size is too big ""
			    ""for fd type."",
			    iso9660->el_torito.boot_filename.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_729.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Boot image file(``%s'') size is too big ""
			    ""for fd type."",
			    iso9660->el_torito.boot_filename.s);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_729.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_729.cpp,91
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7325,"archive_set_error(&a->archive, errno,
		    ""Boot file(%jd) is too small"", (intmax_t)size + 64);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_730.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Boot file(%jd) is too small"", (intmax_t)size + 64);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_730.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_730.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7341,"archive_set_error(&a->archive, errno,
			    ""Can't read temporary file(%jd)"",
			    (intmax_t)rs);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_731.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't read temporary file(%jd)"",
			    (intmax_t)rs);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_731.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_731.cpp,30
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7394,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid setup parameter"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_732.cpp,"{
	case Z_OK:
		break;
	default:
	case Z_STREAM_ERROR:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid setup parameter"");
		return (ARCHIVE_FATAL);
	case Z_MEM_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Internal error initializing ""
		    ""compression library"");
		return (ARCHIVE_FATAL);
	case Z_VERSION_ERROR:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid library version"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_732.cpp,"[0, 0, 0, 0, 1, 0, 3, 0, 4, 1, 1, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_732.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7399,"archive_set_error(&a->archive, ENOMEM,
		    ""Internal error initializing ""
		    ""compression library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_733.cpp,"{
	case Z_OK:
		break;
	default:
	case Z_STREAM_ERROR:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid setup parameter"");
		return (ARCHIVE_FATAL);
	case Z_MEM_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Internal error initializing ""
		    ""compression library"");
		return (ARCHIVE_FATAL);
	case Z_VERSION_ERROR:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid library version"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_733.cpp,"[0, 0, 0, 0, 1, 0, 3, 0, 4, 1, 1, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_733.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7404,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid library version"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_734.cpp,"{
	case Z_OK:
		break;
	default:
	case Z_STREAM_ERROR:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid setup parameter"");
		return (ARCHIVE_FATAL);
	case Z_MEM_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Internal error initializing ""
		    ""compression library"");
		return (ARCHIVE_FATAL);
	case Z_VERSION_ERROR:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid library version"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_734.cpp,"[0, 0, 0, 0, 1, 0, 3, 0, 4, 1, 1, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_734.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7471,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_735.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate data"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_735.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_735.cpp,57
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7680,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Compression failed:""
				    "" deflate() call returned status %d"",
				    r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_736.cpp,"{
			case Z_OK:
			case Z_STREAM_END:
				csize = zstrm->total_out - csize;
				if (wb_consume(a, csize) != ARCHIVE_OK)
					return (ARCHIVE_FATAL);
				iso9660->zisofs.total_size += csize;
				iso9660->cur_file->cur_content->size += csize;
				zstrm->next_out = wb_buffptr(a);
				zstrm->avail_out = (uInt)wb_remaining(a);
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Compression failed:""
				    "" deflate() call returned status %d"",
				    r);
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_736.cpp,"[1, 0, 0, 0, 1, 0, 2, 0, 2, 1, 2, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_736.cpp,85
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7789,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_737.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");
		ret = ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_737.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_737.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7833,"archive_set_error(&a->archive, ENOMEM,
			    ""No memory for zisofs decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_738.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""No memory for zisofs decompression"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_738.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_738.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7849,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Illegal zisofs file body"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_739.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Illegal zisofs file body"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_739.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_739.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7862,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Illegal zisofs file body"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_740.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Illegal zisofs file body"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_740.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_740.cpp,45
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7927,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Illegal zisofs block pointers"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_741.cpp,"{
			/* There isn't a pair of offsets. */
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Illegal zisofs block pointers"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_741.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_741.cpp,29
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7935,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Illegal zisofs block pointers(cannot seek)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_742.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Illegal zisofs block pointers(cannot seek)"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_742.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_742.cpp,37
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7943,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Illegal zisofs block pointers"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_743.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Illegal zisofs block pointers"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_743.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_743.cpp,45
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,7957,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize zisofs decompression."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_744.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize zisofs decompression."");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_744.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_744.cpp,59
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,8004,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""zisofs decompression failed (%d)"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_745.cpp,"{
		case Z_OK: /* Decompressor made some progress.*/
		case Z_STREAM_END: /* Found end of stream. */
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""zisofs decompression failed (%d)"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_745.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_745.cpp,106
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,8056,"archive_set_error(&a->archive, ENOMEM, ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_746.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_746.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_746.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,8074,"archive_set_error(&a->archive, errno,
			    ""Can't read temporary file(%jd)"", (intmax_t)rs);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_747.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't read temporary file(%jd)"", (intmax_t)rs);
			ret = ARCHIVE_FATAL;
			break;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_747.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_747.cpp,56
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,8115,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_748.cpp,"{
        	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");
		ret = ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_748.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_748.cpp,97
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,8130,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC, ""Programing error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_749.cpp,"{
	(void)buff; /* UNUSED */
	(void)s; /* UNUSED */
	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC, ""Programing error"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_749.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_749.cpp,5
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.cpp,8140,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""We cannot extract the zisofs imaged boot file;""
		    "" this may not boot in being zisofs imaged"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_750.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""We cannot extract the zisofs imaged boot file;""
		    "" this may not boot in being zisofs imaged"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_750.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_750.cpp,6
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,263,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: compression option needs a compression name"",
			    a->format_name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_751.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: compression option needs a compression name"",
			    a->format_name);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_751.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_751.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,271,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""deflate compression not supported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_752.cpp,"{
#ifdef HAVE_ZLIB_H
			zip->requested_compression = COMPRESSION_DEFLATE;
			ret = ARCHIVE_OK;
#else
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""deflate compression not supported"");
#endif
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_752.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 3, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_752.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,293,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""deflate compression not supported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_753.cpp,"{
#ifdef HAVE_ZLIB_H
			zip->requested_compression = COMPRESSION_DEFLATE;
			zip->deflate_compression_level = val[0] - '0';
			return ARCHIVE_OK;
#else
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""deflate compression not supported"");
#endif
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_753.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 3, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_753.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,308,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_754.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_754.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_754.cpp,58
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,318,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_755.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_755.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_755.cpp,68
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,328,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_756.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_756.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_756.cpp,78
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,333,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: unknown encryption '%s'"",
			    a->format_name, val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_757.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: unknown encryption '%s'"",
			    a->format_name, val);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_757.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_757.cpp,83
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,361,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: hdrcharset option needs a character-set name"",
			    a->format_name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_758.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: hdrcharset option needs a character-set name"",
			    a->format_name);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_758.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_758.cpp,111
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,406,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		""Can only use archive_write_zip_set_compression_deflate""
		"" with zip format"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_759.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		""Can only use archive_write_zip_set_compression_deflate""
		"" with zip format"");
		ret = ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_759.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_759.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,416,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			""deflate compression not supported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_760.cpp,"{
#ifdef HAVE_ZLIB_H
		struct zip *zip = a->format_data;
		zip->requested_compression = COMPRESSION_DEFLATE;
		ret = ARCHIVE_OK;
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			""deflate compression not supported"");
		ret = ARCHIVE_FAILED;
#endif
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_760.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 0, 3, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_760.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,435,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			""Can only use archive_write_zip_set_compression_store""
			"" with zip format"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_761.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			""Can only use archive_write_zip_set_compression_store""
			"" with zip format"");
		ret = ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_761.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_761.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,461,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate zip data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_762.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate zip data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_762.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_762.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,478,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate compression buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_763.cpp,"{
		free(zip);
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate compression buffer"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_763.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_763.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,528,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Filetype not supported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_764.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Filetype not supported"");
		return ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_764.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_764.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,538,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Files > 4GB require Zip64 extensions"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_765.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Files > 4GB require Zip64 extensions"");
			return ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_765.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_765.cpp,29
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,544,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Archives > 4GB require Zip64 extensions"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_766.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Archives > 4GB require Zip64 extensions"");
			return ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_766.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_766.cpp,35
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,603,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate zip header data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_767.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate zip header data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_767.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_767.cpp,94
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,614,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_768.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Pathname"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_768.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_768.cpp,105
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,618,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate Pathname '%s' to %s"",
			    archive_entry_pathname(entry),
			    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_769.cpp,"{
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Pathname"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate Pathname '%s' to %s"",
			    archive_entry_pathname(entry),
			    archive_string_conversion_charset_name(sconv));
			ret2 = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_769.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_769.cpp,109
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,636,"archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory ""
					    "" for Symlink"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_770.cpp,"{
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory ""
					    "" for Symlink"");
					return (ARCHIVE_FATAL);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_770.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_770.cpp,127
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,990,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't init deflate compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_771.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't init deflate compressor"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_771.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_771.cpp,481
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,1056,"archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Failed to encrypt file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_772.cpp,"{
						archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Failed to encrypt file"");
						return (ARCHIVE_FAILED);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_772.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_772.cpp,56
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,1099,"archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Failed to encrypt file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_773.cpp,"{
						archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Failed to encrypt file"");
						return (ARCHIVE_FAILED);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_773.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_773.cpp,99
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,1121,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid ZIP compression type"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_774.cpp,"{
	case COMPRESSION_STORE:
		if (zip->tctx_valid || zip->cctx_valid) {
			const uint8_t *rb = (const uint8_t *)buff;
			const uint8_t * const re = rb + s;

			while (rb < re) {
				size_t l;

				if (zip->tctx_valid) {
					l = trad_enc_encrypt_update(&zip->tctx,
					    rb, re - rb,
					    zip->buf, zip->len_buf);
				} else {
					l = zip->len_buf;
					ret = archive_encrypto_aes_ctr_update(
					    &zip->cctx,
					    rb, re - rb, zip->buf, &l);
					if (ret < 0) {
						archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Failed to encrypt file"");
						return (ARCHIVE_FAILED);
					}
					archive_hmac_sha1_update(&zip->hctx,
					    zip->buf, l);
				}
				ret = __archive_write_output(a, zip->buf, l);
				if (ret != ARCHIVE_OK)
					return (ret);
				zip->entry_compressed_written += l;
				zip->written_bytes += l;
				rb += l;
			}
		} else {
			ret = __archive_write_output(a, buff, s);
			if (ret != ARCHIVE_OK)
				return (ret);
			zip->written_bytes += s;
			zip->entry_compressed_written += s;
		}
		break;
#if HAVE_ZLIB_H
	case COMPRESSION_DEFLATE:
		zip->stream.next_in = (unsigned char*)(uintptr_t)buff;
		zip->stream.avail_in = (uInt)s;
		do {
			ret = deflate(&zip->stream, Z_NO_FLUSH);
			if (ret == Z_STREAM_ERROR)
				return (ARCHIVE_FATAL);
			if (zip->stream.avail_out == 0) {
				if (zip->tctx_valid) {
					trad_enc_encrypt_update(&zip->tctx,
					    zip->buf, zip->len_buf,
					    zip->buf, zip->len_buf);
				} else if (zip->cctx_valid) {
					size_t outl = zip->len_buf;
					ret = archive_encrypto_aes_ctr_update(
					    &zip->cctx,
					    zip->buf, zip->len_buf,
					    zip->buf, &outl);
					if (ret < 0) {
						archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Failed to encrypt file"");
						return (ARCHIVE_FAILED);
					}
					archive_hmac_sha1_update(&zip->hctx,
					    zip->buf, zip->len_buf);
				}
				ret = __archive_write_output(a, zip->buf,
					zip->len_buf);
				if (ret != ARCHIVE_OK)
					return (ret);
				zip->entry_compressed_written += zip->len_buf;
				zip->written_bytes += zip->len_buf;
				zip->stream.next_out = zip->buf;
				zip->stream.avail_out = (uInt)zip->len_buf;
			}
		} while (zip->stream.avail_in != 0);
		break;
#endif

	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid ZIP compression type"");
		return ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_774.cpp,"[12, 1, 0, 1, 2, 0, 7, 0, 2, 1, 16, 0, 0, 0, 4, 240, 0, 0, 4, 4, 0, 0, 3, 7, 0, 0, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 13, 11, 2, 0, 13, 0, 0, 25, 1, 46, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_774.cpp,121
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,1158,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Failed to encrypt file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_775.cpp,"{
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Failed to encrypt file"");
					return (ARCHIVE_FAILED);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_775.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_775.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,1241,"archive_set_error(&a->archive, ENOMEM,
				""Can't allocate zip data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_776.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
				""Can't allocate zip data"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_776.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_776.cpp,107
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,1557,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Encryption needs passphrase"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_777.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Encryption needs passphrase"");
		return ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_777.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_777.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,1562,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't generate random number for encryption"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_778.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't generate random number for encryption"");
		return ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_778.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_778.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,1593,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Encryption needs passphrase"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_779.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Encryption needs passphrase"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_779.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_779.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,1606,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't generate random number for encryption"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_780.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't generate random number for encryption"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_780.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_780.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,1615,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Decryption is unsupported due to lack of crypto library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_781.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Decryption is unsupported due to lack of crypto library"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_781.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_781.cpp,34
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.cpp,1623,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize HMAC-SHA1"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_782.cpp,"{
		archive_encrypto_aes_ctr_release(&zip->cctx);
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize HMAC-SHA1"");
		return (ARCHIVE_FAILED);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_782.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_782.cpp,42
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_uuencode.cpp,80,"archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for uuencode filter"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_783.cpp,"{
		archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for uuencode filter"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_783.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_783.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_uuencode.cpp,110,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""mode option requires octal digits"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_784.cpp,"{
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""mode option requires octal digits"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_784.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_784.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_uuencode.cpp,118,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""name option requires a string"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_785.cpp,"{
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""name option requires a string"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_785.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_785.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_uuencode.cpp,158,"archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for uuencode buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_786.cpp,"{
		archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for uuencode buffer"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_786.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_786.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_uuencode.cpp,163,"archive_string_sprintf(&state->encoded_buff, ""begin %o %s\n"",
	    state->mode, state->name.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_787.cpp,"{
	struct private_uuencode *state = (struct private_uuencode *)f->data;
	size_t bs = 65536, bpb;
	int ret;

	ret = __archive_write_open_filter(f->next_filter);
	if (ret != ARCHIVE_OK)
		return (ret);

	if (f->archive->magic == ARCHIVE_WRITE_MAGIC) {
		/* Buffer size should be a multiple number of the of bytes
		 * per block for performance. */
		bpb = archive_write_get_bytes_per_block(f->archive);
		if (bpb > bs)
			bs = bpb;
		else if (bpb != 0)
			bs -= bs % bpb;
	}

	state->bs = bs;
	if (archive_string_ensure(&state->encoded_buff, bs + 512) == NULL) {
		archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for uuencode buffer"");
		return (ARCHIVE_FATAL);
	}

	archive_string_sprintf(&state->encoded_buff, ""begin %o %s\n"",
	    state->mode, state->name.s);

	f->data = state;
	return (0);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_787.cpp,"[5, 0, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 0, 70, 0, 0, 3, 4, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 5, 0, 0, 5, 0, 0, 8, 1, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_787.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_uuencode.cpp,264,"archive_string_sprintf(&state->encoded_buff, ""`\nend\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_788.cpp,"{
	struct private_uuencode *state = (struct private_uuencode *)f->data;
	int ret, ret2;

	/* Flush remaining bytes. */
	if (state->hold_len != 0)
		uu_encode(&state->encoded_buff, state->hold, state->hold_len);
	archive_string_sprintf(&state->encoded_buff, ""`\nend\n"");
	/* Write the last block */
	archive_write_set_bytes_in_last_block(f->archive, 1);
	ret = __archive_write_filter(f->next_filter,
	    state->encoded_buff.s, archive_strlen(&state->encoded_buff));
	ret2 = __archive_write_close_filter(f->next_filter);
	if (ret > ret2)
		ret = ret2;
	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_788.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 55, 0, 0, 2, 3, 0, 0, 1, 3, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 2, 0, 0, 6, 0, 0, 6, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_788.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,413,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate 7zip data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_789.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate 7zip data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_789.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_789.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,603,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Couldn't find out 7-Zip header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_790.cpp,"{
	const void *h;
	const char *p, *q;
	size_t skip, offset;
	ssize_t bytes, window;

	/*
	 * If bytes_avail > SFX_MIN_ADDR we do not have to call
	 * __archive_read_seek() at this time since we have
	 * already had enough data.
	 */
	if (bytes_avail > SFX_MIN_ADDR)
		__archive_read_consume(a, SFX_MIN_ADDR);
	else if (__archive_read_seek(a, SFX_MIN_ADDR, SEEK_SET) < 0)
		return (ARCHIVE_FATAL);

	offset = 0;
	window = 1;
	while (offset + window <= SFX_MAX_ADDR - SFX_MIN_ADDR) {
		h = __archive_read_ahead(a, window, &bytes);
		if (h == NULL) {
			/* Remaining bytes are less than window. */
			window >>= 1;
			if (window < 0x40)
				goto fatal;
			continue;
		}
		if (bytes < 6) {
			/* This case might happen when window == 1. */
			window = 4096;
			continue;
		}
		p = (const char *)h;
		q = p + bytes;

		/*
		 * Scan ahead until we find something that looks
		 * like the 7-Zip header.
		 */
		while (p + 32 < q) {
			int step = check_7zip_header_in_sfx(p);
			if (step == 0) {
				struct _7zip *zip =
				    (struct _7zip *)a->format->data;
				skip = p - (const char *)h;
				__archive_read_consume(a, skip);
				zip->seek_base = SFX_MIN_ADDR + offset + skip;
				return (ARCHIVE_OK);
			}
			p += step;
		}
		skip = p - (const char *)h;
		__archive_read_consume(a, skip);
		offset += skip;
		if (window == 1)
			window = 4096;
	}
fatal:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Couldn't find out 7-Zip header"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_790.cpp,"[7, 2, 0, 0, 0, 2, 3, 0, 0, 0, 10, 1, 1, 0, 5, 95, 0, 0, 6, 9, 0, 0, 2, 12, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 9, 7, 0, 0, 7, 0, 0, 17, 1, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_790.cpp,60
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,694,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_791.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_791.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_791.cpp,86
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,698,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(zip->sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_792.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(zip->sconv));
		ret = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_792.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_792.cpp,90
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,753,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Symname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_793.cpp,"{
				free(symname);
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Symname"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_793.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_793.cpp,145
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,777,"sprintf(zip->format_name, ""7-Zip"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_794.cpp,"{
	struct _7zip *zip = (struct _7zip *)a->format->data;
	struct _7zip_entry *zip_entry;
	int r, ret = ARCHIVE_OK;
	struct _7z_folder *folder = 0;
	uint64_t fidx = 0;

	/*
	 * It should be sufficient to call archive_read_next_header() for
	 * a reader to determine if an entry is encrypted or not. If the
	 * encryption of an entry is only detectable when calling
	 * archive_read_data(), so be it. We'll do the same check there
	 * as well.
	 */
	if (zip->has_encrypted_entries == ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW) {
		zip->has_encrypted_entries = 0;
	}

	a->archive.archive_format = ARCHIVE_FORMAT_7ZIP;
	if (a->archive.archive_format_name == NULL)
		a->archive.archive_format_name = ""7-Zip"";

	if (zip->entries == NULL) {
		struct _7z_header_info header;

		memset(&header, 0, sizeof(header));
		r = slurp_central_directory(a, zip, &header);
		free_Header(&header);
		if (r != ARCHIVE_OK)
			return (r);
		zip->entries_remaining = (size_t)zip->numFiles;
		zip->entry = zip->entries;
	} else {
		++zip->entry;
	}
	zip_entry = zip->entry;

	if (zip->entries_remaining <= 0 || zip_entry == NULL)
		return ARCHIVE_EOF;
	--zip->entries_remaining;

	zip->entry_offset = 0;
	zip->end_of_entry = 0;
	zip->entry_crc32 = crc32(0, NULL, 0);

	/* Setup a string conversion for a filename. */
	if (zip->sconv == NULL) {
		zip->sconv = archive_string_conversion_from_charset(
		    &a->archive, ""UTF-16LE"", 1);
		if (zip->sconv == NULL)
			return (ARCHIVE_FATAL);
	}

	/* Figure out if the entry is encrypted by looking at the folder
	   that is associated to the current 7zip entry. If the folder
	   has a coder with a _7Z_CRYPTO codec then the folder is encrypted.
	   Hence the entry must also be encrypted. */
	if (zip_entry && zip_entry->folderIndex < zip->si.ci.numFolders) {
		folder = &(zip->si.ci.folders[zip_entry->folderIndex]);
		for (fidx=0; folder && fidx<folder->numCoders; fidx++) {
			switch(folder->coders[fidx].codec) {
				case _7Z_CRYPTO_MAIN_ZIP:
				case _7Z_CRYPTO_RAR_29:
				case _7Z_CRYPTO_AES_256_SHA_256: {
					archive_entry_set_is_data_encrypted(entry, 1);
					zip->has_encrypted_entries = 1;
					break;
				}
			}
		}
	}

	/* Now that we've checked for encryption, if there were still no
	 * encrypted entries found we can say for sure that there are none.
	 */
	if (zip->has_encrypted_entries == ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW) {
		zip->has_encrypted_entries = 0;
	}

	if (archive_entry_copy_pathname_l(entry,
	    (const char *)zip_entry->utf16name,
	    zip_entry->name_len, zip->sconv) != 0) {
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(zip->sconv));
		ret = ARCHIVE_WARN;
	}

	/* Populate some additional entry fields: */
	archive_entry_set_mode(entry, zip_entry->mode);
	if (zip_entry->flg & MTIME_IS_SET)
		archive_entry_set_mtime(entry, zip_entry->mtime,
			zip_entry->mtime_ns);
	if (zip_entry->flg & CTIME_IS_SET)
		archive_entry_set_ctime(entry, zip_entry->ctime,
		    zip_entry->ctime_ns);
	if (zip_entry->flg & ATIME_IS_SET)
		archive_entry_set_atime(entry, zip_entry->atime,
		    zip_entry->atime_ns);
	if (zip_entry->ssIndex != (uint32_t)-1) {
		zip->entry_bytes_remaining =
		    zip->si.ss.unpackSizes[zip_entry->ssIndex];
		archive_entry_set_size(entry, zip->entry_bytes_remaining);
	} else {
		zip->entry_bytes_remaining = 0;
		archive_entry_set_size(entry, 0);
	}

	/* If there's no body, force read_data() to return EOF immediately. */
	if (zip->entry_bytes_remaining < 1)
		zip->end_of_entry = 1;

	if ((zip_entry->mode & AE_IFMT) == AE_IFLNK) {
		unsigned char *symname = NULL;
		size_t symsize = 0;

		/*
		 * Symbolic-name is recorded as its contents. We have to
		 * read the contents at this time.
		 */
		while (zip->entry_bytes_remaining > 0) {
			const void *buff;
			unsigned char *mem;
			size_t size;
			int64_t offset;

			r = archive_read_format_7zip_read_data(a, &buff,
				&size, &offset);
			if (r < ARCHIVE_WARN) {
				free(symname);
				return (r);
			}
			mem = realloc(symname, symsize + size + 1);
			if (mem == NULL) {
				free(symname);
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Symname"");
				return (ARCHIVE_FATAL);
			}
			symname = mem;
			memcpy(symname+symsize, buff, size);
			symsize += size;
		}
		if (symsize == 0) {
			/* If there is no symname, handle it as a regular
			 * file. */
			zip_entry->mode &= ~AE_IFMT;
			zip_entry->mode |= AE_IFREG;
			archive_entry_set_mode(entry, zip_entry->mode);
		} else {
			symname[symsize] = '\0';
			archive_entry_copy_symlink(entry,
			    (const char *)symname);
		}
		free(symname);
		archive_entry_set_size(entry, 0);
	}

	/* Set up a more descriptive format name. */
	sprintf(zip->format_name, ""7-Zip"");
	a->archive.archive_format_name = zip->format_name;

	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_794.cpp,"[20, 1, 1, 0, 1, 0, 7, 1, 3, 0, 28, 0, 0, 0, 3, 364, 0, 0, 12, 13, 0, 0, 7, 33, 0, 0, 0, 0, 6, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 0, 159, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 0, 23, 20, 3, 0, 28, 0, 0, 48, 0, 66, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_794.cpp,169
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,815,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated 7-Zip file body"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_795.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated 7-Zip file body"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_795.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_795.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,835,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""7-Zip bad CRC: 0x%lx should be 0x%lx"",
			    (unsigned long)zip->entry_crc32,
			    (unsigned long)zip->si.ss.digests[
			    		zip->entry->ssIndex]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_796.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""7-Zip bad CRC: 0x%lx should be 0x%lx"",
			    (unsigned long)zip->entry_crc32,
			    (unsigned long)zip->si.ss.digests[
			    		zip->entry->ssIndex]);
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_796.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_796.cpp,52
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,926,"archive_set_error(&a->archive, ENOMEM,
		    ""Lzma library error: Cannot allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_797.cpp,"{
	case LZMA_STREAM_END: /* Found end of stream. */
	case LZMA_OK: /* Decompressor made some progress. */
		break;
	case LZMA_MEM_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Lzma library error: Cannot allocate memory"");
		break;
	case LZMA_MEMLIMIT_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Lzma library error: Out of memory"");
		break;
	case LZMA_FORMAT_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: format not recognized"");
		break;
	case LZMA_OPTIONS_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Invalid options"");
		break;
	case LZMA_DATA_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Corrupted input data"");
		break;
	case LZMA_BUF_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error:  No progress is possible"");
		break;
	default:
		/* Return an error. */
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma decompression failed:  Unknown error"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_797.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 1, 1, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 21, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_797.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,930,"archive_set_error(&a->archive, ENOMEM,
		    ""Lzma library error: Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_798.cpp,"{
	case LZMA_STREAM_END: /* Found end of stream. */
	case LZMA_OK: /* Decompressor made some progress. */
		break;
	case LZMA_MEM_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Lzma library error: Cannot allocate memory"");
		break;
	case LZMA_MEMLIMIT_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Lzma library error: Out of memory"");
		break;
	case LZMA_FORMAT_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: format not recognized"");
		break;
	case LZMA_OPTIONS_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Invalid options"");
		break;
	case LZMA_DATA_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Corrupted input data"");
		break;
	case LZMA_BUF_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error:  No progress is possible"");
		break;
	default:
		/* Return an error. */
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma decompression failed:  Unknown error"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_798.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 1, 1, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 21, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_798.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,934,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: format not recognized"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_799.cpp,"{
	case LZMA_STREAM_END: /* Found end of stream. */
	case LZMA_OK: /* Decompressor made some progress. */
		break;
	case LZMA_MEM_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Lzma library error: Cannot allocate memory"");
		break;
	case LZMA_MEMLIMIT_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Lzma library error: Out of memory"");
		break;
	case LZMA_FORMAT_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: format not recognized"");
		break;
	case LZMA_OPTIONS_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Invalid options"");
		break;
	case LZMA_DATA_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Corrupted input data"");
		break;
	case LZMA_BUF_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error:  No progress is possible"");
		break;
	default:
		/* Return an error. */
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma decompression failed:  Unknown error"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_799.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 1, 1, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 21, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_799.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,939,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Invalid options"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_800.cpp,"{
	case LZMA_STREAM_END: /* Found end of stream. */
	case LZMA_OK: /* Decompressor made some progress. */
		break;
	case LZMA_MEM_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Lzma library error: Cannot allocate memory"");
		break;
	case LZMA_MEMLIMIT_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Lzma library error: Out of memory"");
		break;
	case LZMA_FORMAT_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: format not recognized"");
		break;
	case LZMA_OPTIONS_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Invalid options"");
		break;
	case LZMA_DATA_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Corrupted input data"");
		break;
	case LZMA_BUF_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error:  No progress is possible"");
		break;
	default:
		/* Return an error. */
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma decompression failed:  Unknown error"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_800.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 1, 1, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 21, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_800.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,944,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Corrupted input data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_801.cpp,"{
	case LZMA_STREAM_END: /* Found end of stream. */
	case LZMA_OK: /* Decompressor made some progress. */
		break;
	case LZMA_MEM_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Lzma library error: Cannot allocate memory"");
		break;
	case LZMA_MEMLIMIT_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Lzma library error: Out of memory"");
		break;
	case LZMA_FORMAT_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: format not recognized"");
		break;
	case LZMA_OPTIONS_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Invalid options"");
		break;
	case LZMA_DATA_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Corrupted input data"");
		break;
	case LZMA_BUF_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error:  No progress is possible"");
		break;
	default:
		/* Return an error. */
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma decompression failed:  Unknown error"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_801.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 1, 1, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 21, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_801.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,949,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error:  No progress is possible"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_802.cpp,"{
	case LZMA_STREAM_END: /* Found end of stream. */
	case LZMA_OK: /* Decompressor made some progress. */
		break;
	case LZMA_MEM_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Lzma library error: Cannot allocate memory"");
		break;
	case LZMA_MEMLIMIT_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Lzma library error: Out of memory"");
		break;
	case LZMA_FORMAT_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: format not recognized"");
		break;
	case LZMA_OPTIONS_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Invalid options"");
		break;
	case LZMA_DATA_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Corrupted input data"");
		break;
	case LZMA_BUF_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error:  No progress is possible"");
		break;
	default:
		/* Return an error. */
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma decompression failed:  Unknown error"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_802.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 1, 1, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 21, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_802.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,955,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma decompression failed:  Unknown error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_803.cpp,"{
	case LZMA_STREAM_END: /* Found end of stream. */
	case LZMA_OK: /* Decompressor made some progress. */
		break;
	case LZMA_MEM_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Lzma library error: Cannot allocate memory"");
		break;
	case LZMA_MEMLIMIT_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Lzma library error: Out of memory"");
		break;
	case LZMA_FORMAT_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: format not recognized"");
		break;
	case LZMA_OPTIONS_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Invalid options"");
		break;
	case LZMA_DATA_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Corrupted input data"");
		break;
	case LZMA_BUF_ERROR:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error:  No progress is possible"");
		break;
	default:
		/* Return an error. */
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma decompression failed:  Unknown error"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_803.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 1, 1, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 21, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_803.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,997,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated RAR file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_804.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated RAR file data"");
		zip->ppstream.overconsumed = 1;
		return (0);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_804.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_804.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1027,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Unsupported filter %lx for %lx"",
				    coder2->codec, coder1->codec);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_805.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Unsupported filter %lx for %lx"",
				    coder2->codec, coder1->codec);
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_805.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_805.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1131,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Unexpected codec ID: %lX"", zip->codec2);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_806.cpp,"{
			case _7Z_X86:
				if (zip->codec == _7Z_LZMA2) {
					filters[fi].id = LZMA_FILTER_X86;
					fi++;
				} else
					/* Use our filter. */
					x86_Init(zip);
				break;
			case _7Z_X86_BCJ2:
				/* Use our filter. */
				zip->bcj_state = 0;
				break;
			case _7Z_DELTA:
				filters[fi].id = LZMA_FILTER_DELTA;
				memset(&delta_opt, 0, sizeof(delta_opt));
				delta_opt.type = LZMA_DELTA_TYPE_BYTE;
				delta_opt.dist = 1;
				filters[fi].options = &delta_opt;
				fi++;
				break;
			/* Following filters have not been tested yet. */
			case _7Z_POWERPC:
				filters[fi].id = LZMA_FILTER_POWERPC;
				fi++;
				break;
			case _7Z_IA64:
				filters[fi].id = LZMA_FILTER_IA64;
				fi++;
				break;
			case _7Z_ARM:
				filters[fi].id = LZMA_FILTER_ARM;
				fi++;
				break;
			case _7Z_ARMTHUMB:
				filters[fi].id = LZMA_FILTER_ARMTHUMB;
				fi++;
				break;
			case _7Z_SPARC:
				filters[fi].id = LZMA_FILTER_SPARC;
				fi++;
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Unexpected codec ID: %lX"", zip->codec2);
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_806.cpp,"[1, 0, 0, 0, 8, 0, 1, 0, 8, 1, 3, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 48, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 1, 1, 1, 0, 4, 0, 0, 21, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_806.cpp,121
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1166,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""LZMA codec is unsupported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_807.cpp,"{
	case _7Z_COPY:
		break;

	case _7Z_LZMA: case _7Z_LZMA2:
#ifdef HAVE_LZMA_H
#if LZMA_VERSION_MAJOR >= 5
/* Effectively disable the limiter. */
#define LZMA_MEMLIMIT   UINT64_MAX
#else
/* NOTE: This needs to check memory size which running system has. */
#define LZMA_MEMLIMIT   (1U << 30)
#endif
	{
		lzma_options_delta delta_opt;
		lzma_filter filters[LZMA_FILTERS_MAX], *ff;
		int fi = 0;

		if (zip->lzstream_valid) {
			lzma_end(&(zip->lzstream));
			zip->lzstream_valid = 0;
		}

		/*
		 * NOTE: liblzma incompletely handle the BCJ+LZMA compressed
		 * data made by 7-Zip because 7-Zip does not add End-Of-
		 * Payload Marker(EOPM) at the end of LZMA compressed data,
		 * and so liblzma cannot know the end of the compressed data
		 * without EOPM. So consequently liblzma will not return last
		 * three or four bytes of uncompressed data because
		 * LZMA_FILTER_X86 filter does not handle input data if its
		 * data size is less than five bytes. If liblzma detect EOPM
		 * or know the uncompressed data size, liblzma will flush out
		 * the remaining that three or four bytes of uncompressed
		 * data. That is why we have to use our converting program
		 * for BCJ+LZMA. If we were able to tell the uncompressed
		 * size to liblzma when using lzma_raw_decoder() liblzma
		 * could correctly deal with BCJ+LZMA. But unfortunately
		 * there is no way to do that.
		 * Discussion about this can be found at XZ Utils forum.
		 */
		if (coder2 != NULL) {
			zip->codec2 = coder2->codec;

			filters[fi].options = NULL;
			switch (zip->codec2) {
			case _7Z_X86:
				if (zip->codec == _7Z_LZMA2) {
					filters[fi].id = LZMA_FILTER_X86;
					fi++;
				} else
					/* Use our filter. */
					x86_Init(zip);
				break;
			case _7Z_X86_BCJ2:
				/* Use our filter. */
				zip->bcj_state = 0;
				break;
			case _7Z_DELTA:
				filters[fi].id = LZMA_FILTER_DELTA;
				memset(&delta_opt, 0, sizeof(delta_opt));
				delta_opt.type = LZMA_DELTA_TYPE_BYTE;
				delta_opt.dist = 1;
				filters[fi].options = &delta_opt;
				fi++;
				break;
			/* Following filters have not been tested yet. */
			case _7Z_POWERPC:
				filters[fi].id = LZMA_FILTER_POWERPC;
				fi++;
				break;
			case _7Z_IA64:
				filters[fi].id = LZMA_FILTER_IA64;
				fi++;
				break;
			case _7Z_ARM:
				filters[fi].id = LZMA_FILTER_ARM;
				fi++;
				break;
			case _7Z_ARMTHUMB:
				filters[fi].id = LZMA_FILTER_ARMTHUMB;
				fi++;
				break;
			case _7Z_SPARC:
				filters[fi].id = LZMA_FILTER_SPARC;
				fi++;
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Unexpected codec ID: %lX"", zip->codec2);
				return (ARCHIVE_FAILED);
			}
		}

		if (zip->codec == _7Z_LZMA2)
			filters[fi].id = LZMA_FILTER_LZMA2;
		else
			filters[fi].id = LZMA_FILTER_LZMA1;
		filters[fi].options = NULL;
		ff = &filters[fi];
		r = lzma_properties_decode(&filters[fi], NULL,
		    coder1->properties, (size_t)coder1->propertiesSize);
		if (r != LZMA_OK) {
			set_error(a, r);
			return (ARCHIVE_FAILED);
		}
		fi++;

		filters[fi].id = LZMA_VLI_UNKNOWN;
		filters[fi].options = NULL;
		r = lzma_raw_decoder(&(zip->lzstream), filters);
		free(ff->options);
		if (r != LZMA_OK) {
			set_error(a, r);
			return (ARCHIVE_FAILED);
		}
		zip->lzstream_valid = 1;
		zip->lzstream.total_in = 0;
		zip->lzstream.total_out = 0;
		break;
	}
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""LZMA codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_BZ2:
#if defined(HAVE_BZLIB_H) && defined(BZ_CONFIG_ERROR)
		if (zip->bzstream_valid) {
			BZ2_bzDecompressEnd(&(zip->bzstream));
			zip->bzstream_valid = 0;
		}
		r = BZ2_bzDecompressInit(&(zip->bzstream), 0, 0);
		if (r == BZ_MEM_ERROR)
			r = BZ2_bzDecompressInit(&(zip->bzstream), 0, 1);
		if (r != BZ_OK) {
			int err = ARCHIVE_ERRNO_MISC;
			const char *detail = NULL;
			switch (r) {
			case BZ_PARAM_ERROR:
				detail = ""invalid setup parameter"";
				break;
			case BZ_MEM_ERROR:
				err = ENOMEM;
				detail = ""out of memory"";
				break;
			case BZ_CONFIG_ERROR:
				detail = ""mis-compiled library"";
				break;
			}
			archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail != NULL ? detail : ""??"");
			zip->bzstream_valid = 0;
			return (ARCHIVE_FAILED);
		}
		zip->bzstream_valid = 1;
		zip->bzstream.total_in_lo32 = 0;
		zip->bzstream.total_in_hi32 = 0;
		zip->bzstream.total_out_lo32 = 0;
		zip->bzstream.total_out_hi32 = 0;
		break;
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""BZ2 codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_DEFLATE:
#ifdef HAVE_ZLIB_H
		if (zip->stream_valid)
			r = inflateReset(&(zip->stream));
		else
			r = inflateInit2(&(zip->stream),
			    -15 /* Don't check for zlib header */);
		if (r != Z_OK) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");
			return (ARCHIVE_FAILED);
		}
		zip->stream_valid = 1;
		zip->stream.total_in = 0;
		zip->stream.total_out = 0;
		break;
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""DEFLATE codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_PPMD:
	{
		unsigned order;
		uint32_t msize;

		if (zip->ppmd7_valid) {
			__archive_ppmd7_functions.Ppmd7_Free(
			    &zip->ppmd7_context, &g_szalloc);
			zip->ppmd7_valid = 0;
		}

		if (coder1->propertiesSize < 5) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}
		order = coder1->properties[0];
		msize = archive_le32dec(&(coder1->properties[1]));
		if (order < PPMD7_MIN_ORDER || order > PPMD7_MAX_ORDER ||
		    msize < PPMD7_MIN_MEM_SIZE || msize > PPMD7_MAX_MEM_SIZE) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}
		__archive_ppmd7_functions.Ppmd7_Construct(&zip->ppmd7_context);
		r = __archive_ppmd7_functions.Ppmd7_Alloc(
			&zip->ppmd7_context, msize, &g_szalloc);
		if (r == 0) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Coludn't allocate memory for PPMd"");
			return (ARCHIVE_FATAL);
		}
		__archive_ppmd7_functions.Ppmd7_Init(
			&zip->ppmd7_context, order);
		__archive_ppmd7_functions.Ppmd7z_RangeDec_CreateVTable(
			&zip->range_dec);
		zip->ppmd7_valid = 1;
		zip->ppmd7_stat = 0;
		zip->ppstream.overconsumed = 0;
		zip->ppstream.total_in = 0;
		zip->ppstream.total_out = 0;
		break;
	}
	case _7Z_X86:
	case _7Z_X86_BCJ2:
	case _7Z_POWERPC:
	case _7Z_IA64:
	case _7Z_ARM:
	case _7Z_ARMTHUMB:
	case _7Z_SPARC:
	case _7Z_DELTA:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unexpected codec ID: %lX"", zip->codec);
		return (ARCHIVE_FAILED);
	case _7Z_CRYPTO_MAIN_ZIP:
	case _7Z_CRYPTO_RAR_29:
	case _7Z_CRYPTO_AES_256_SHA_256:
		if (a->entry) {
			archive_entry_set_is_metadata_encrypted(a->entry, 1);
			archive_entry_set_is_data_encrypted(a->entry, 1);
			zip->has_encrypted_entries = 1;
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Crypto codec not supported yet (ID: 0x%lX)"", zip->codec);
		return (ARCHIVE_FAILED);
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown codec ID: %lX"", zip->codec);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_807.cpp,"[18, 0, 0, 0, 16, 0, 14, 2, 28, 2, 24, 0, 0, 0, 1, 489, 0, 0, 7, 8, 0, 0, 3, 53, 0, 0, 0, 0, 2, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 1, 259, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 19, 0, 19, 17, 8, 0, 38, 0, 0, 86, 0, 86, 14, 0, 2, 2, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_807.cpp,156
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1194,"archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail != NULL ? detail : ""??"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_808.cpp,"{
			int err = ARCHIVE_ERRNO_MISC;
			const char *detail = NULL;
			switch (r) {
			case BZ_PARAM_ERROR:
				detail = ""invalid setup parameter"";
				break;
			case BZ_MEM_ERROR:
				err = ENOMEM;
				detail = ""out of memory"";
				break;
			case BZ_CONFIG_ERROR:
				detail = ""mis-compiled library"";
				break;
			}
			archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail != NULL ? detail : ""??"");
			zip->bzstream_valid = 0;
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_808.cpp,"[0, 0, 0, 0, 3, 0, 1, 1, 3, 0, 2, 0, 0, 0, 1, 27, 0, 0, 2, 2, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 1, 0, 1, 0, 0, 6, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_808.cpp,184
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1207,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""BZ2 codec is unsupported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_809.cpp,"{
	case _7Z_COPY:
		break;

	case _7Z_LZMA: case _7Z_LZMA2:
#ifdef HAVE_LZMA_H
#if LZMA_VERSION_MAJOR >= 5
/* Effectively disable the limiter. */
#define LZMA_MEMLIMIT   UINT64_MAX
#else
/* NOTE: This needs to check memory size which running system has. */
#define LZMA_MEMLIMIT   (1U << 30)
#endif
	{
		lzma_options_delta delta_opt;
		lzma_filter filters[LZMA_FILTERS_MAX], *ff;
		int fi = 0;

		if (zip->lzstream_valid) {
			lzma_end(&(zip->lzstream));
			zip->lzstream_valid = 0;
		}

		/*
		 * NOTE: liblzma incompletely handle the BCJ+LZMA compressed
		 * data made by 7-Zip because 7-Zip does not add End-Of-
		 * Payload Marker(EOPM) at the end of LZMA compressed data,
		 * and so liblzma cannot know the end of the compressed data
		 * without EOPM. So consequently liblzma will not return last
		 * three or four bytes of uncompressed data because
		 * LZMA_FILTER_X86 filter does not handle input data if its
		 * data size is less than five bytes. If liblzma detect EOPM
		 * or know the uncompressed data size, liblzma will flush out
		 * the remaining that three or four bytes of uncompressed
		 * data. That is why we have to use our converting program
		 * for BCJ+LZMA. If we were able to tell the uncompressed
		 * size to liblzma when using lzma_raw_decoder() liblzma
		 * could correctly deal with BCJ+LZMA. But unfortunately
		 * there is no way to do that.
		 * Discussion about this can be found at XZ Utils forum.
		 */
		if (coder2 != NULL) {
			zip->codec2 = coder2->codec;

			filters[fi].options = NULL;
			switch (zip->codec2) {
			case _7Z_X86:
				if (zip->codec == _7Z_LZMA2) {
					filters[fi].id = LZMA_FILTER_X86;
					fi++;
				} else
					/* Use our filter. */
					x86_Init(zip);
				break;
			case _7Z_X86_BCJ2:
				/* Use our filter. */
				zip->bcj_state = 0;
				break;
			case _7Z_DELTA:
				filters[fi].id = LZMA_FILTER_DELTA;
				memset(&delta_opt, 0, sizeof(delta_opt));
				delta_opt.type = LZMA_DELTA_TYPE_BYTE;
				delta_opt.dist = 1;
				filters[fi].options = &delta_opt;
				fi++;
				break;
			/* Following filters have not been tested yet. */
			case _7Z_POWERPC:
				filters[fi].id = LZMA_FILTER_POWERPC;
				fi++;
				break;
			case _7Z_IA64:
				filters[fi].id = LZMA_FILTER_IA64;
				fi++;
				break;
			case _7Z_ARM:
				filters[fi].id = LZMA_FILTER_ARM;
				fi++;
				break;
			case _7Z_ARMTHUMB:
				filters[fi].id = LZMA_FILTER_ARMTHUMB;
				fi++;
				break;
			case _7Z_SPARC:
				filters[fi].id = LZMA_FILTER_SPARC;
				fi++;
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Unexpected codec ID: %lX"", zip->codec2);
				return (ARCHIVE_FAILED);
			}
		}

		if (zip->codec == _7Z_LZMA2)
			filters[fi].id = LZMA_FILTER_LZMA2;
		else
			filters[fi].id = LZMA_FILTER_LZMA1;
		filters[fi].options = NULL;
		ff = &filters[fi];
		r = lzma_properties_decode(&filters[fi], NULL,
		    coder1->properties, (size_t)coder1->propertiesSize);
		if (r != LZMA_OK) {
			set_error(a, r);
			return (ARCHIVE_FAILED);
		}
		fi++;

		filters[fi].id = LZMA_VLI_UNKNOWN;
		filters[fi].options = NULL;
		r = lzma_raw_decoder(&(zip->lzstream), filters);
		free(ff->options);
		if (r != LZMA_OK) {
			set_error(a, r);
			return (ARCHIVE_FAILED);
		}
		zip->lzstream_valid = 1;
		zip->lzstream.total_in = 0;
		zip->lzstream.total_out = 0;
		break;
	}
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""LZMA codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_BZ2:
#if defined(HAVE_BZLIB_H) && defined(BZ_CONFIG_ERROR)
		if (zip->bzstream_valid) {
			BZ2_bzDecompressEnd(&(zip->bzstream));
			zip->bzstream_valid = 0;
		}
		r = BZ2_bzDecompressInit(&(zip->bzstream), 0, 0);
		if (r == BZ_MEM_ERROR)
			r = BZ2_bzDecompressInit(&(zip->bzstream), 0, 1);
		if (r != BZ_OK) {
			int err = ARCHIVE_ERRNO_MISC;
			const char *detail = NULL;
			switch (r) {
			case BZ_PARAM_ERROR:
				detail = ""invalid setup parameter"";
				break;
			case BZ_MEM_ERROR:
				err = ENOMEM;
				detail = ""out of memory"";
				break;
			case BZ_CONFIG_ERROR:
				detail = ""mis-compiled library"";
				break;
			}
			archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail != NULL ? detail : ""??"");
			zip->bzstream_valid = 0;
			return (ARCHIVE_FAILED);
		}
		zip->bzstream_valid = 1;
		zip->bzstream.total_in_lo32 = 0;
		zip->bzstream.total_in_hi32 = 0;
		zip->bzstream.total_out_lo32 = 0;
		zip->bzstream.total_out_hi32 = 0;
		break;
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""BZ2 codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_DEFLATE:
#ifdef HAVE_ZLIB_H
		if (zip->stream_valid)
			r = inflateReset(&(zip->stream));
		else
			r = inflateInit2(&(zip->stream),
			    -15 /* Don't check for zlib header */);
		if (r != Z_OK) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");
			return (ARCHIVE_FAILED);
		}
		zip->stream_valid = 1;
		zip->stream.total_in = 0;
		zip->stream.total_out = 0;
		break;
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""DEFLATE codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_PPMD:
	{
		unsigned order;
		uint32_t msize;

		if (zip->ppmd7_valid) {
			__archive_ppmd7_functions.Ppmd7_Free(
			    &zip->ppmd7_context, &g_szalloc);
			zip->ppmd7_valid = 0;
		}

		if (coder1->propertiesSize < 5) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}
		order = coder1->properties[0];
		msize = archive_le32dec(&(coder1->properties[1]));
		if (order < PPMD7_MIN_ORDER || order > PPMD7_MAX_ORDER ||
		    msize < PPMD7_MIN_MEM_SIZE || msize > PPMD7_MAX_MEM_SIZE) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}
		__archive_ppmd7_functions.Ppmd7_Construct(&zip->ppmd7_context);
		r = __archive_ppmd7_functions.Ppmd7_Alloc(
			&zip->ppmd7_context, msize, &g_szalloc);
		if (r == 0) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Coludn't allocate memory for PPMd"");
			return (ARCHIVE_FATAL);
		}
		__archive_ppmd7_functions.Ppmd7_Init(
			&zip->ppmd7_context, order);
		__archive_ppmd7_functions.Ppmd7z_RangeDec_CreateVTable(
			&zip->range_dec);
		zip->ppmd7_valid = 1;
		zip->ppmd7_stat = 0;
		zip->ppstream.overconsumed = 0;
		zip->ppstream.total_in = 0;
		zip->ppstream.total_out = 0;
		break;
	}
	case _7Z_X86:
	case _7Z_X86_BCJ2:
	case _7Z_POWERPC:
	case _7Z_IA64:
	case _7Z_ARM:
	case _7Z_ARMTHUMB:
	case _7Z_SPARC:
	case _7Z_DELTA:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unexpected codec ID: %lX"", zip->codec);
		return (ARCHIVE_FAILED);
	case _7Z_CRYPTO_MAIN_ZIP:
	case _7Z_CRYPTO_RAR_29:
	case _7Z_CRYPTO_AES_256_SHA_256:
		if (a->entry) {
			archive_entry_set_is_metadata_encrypted(a->entry, 1);
			archive_entry_set_is_data_encrypted(a->entry, 1);
			zip->has_encrypted_entries = 1;
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Crypto codec not supported yet (ID: 0x%lX)"", zip->codec);
		return (ARCHIVE_FAILED);
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown codec ID: %lX"", zip->codec);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_809.cpp,"[18, 0, 0, 0, 16, 0, 14, 2, 28, 2, 24, 0, 0, 0, 1, 489, 0, 0, 7, 8, 0, 0, 3, 53, 0, 0, 0, 0, 2, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 1, 259, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 19, 0, 19, 17, 8, 0, 38, 0, 0, 86, 0, 86, 14, 0, 2, 2, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_809.cpp,197
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1219,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_810.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_810.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_810.cpp,209
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1228,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""DEFLATE codec is unsupported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_811.cpp,"{
	case _7Z_COPY:
		break;

	case _7Z_LZMA: case _7Z_LZMA2:
#ifdef HAVE_LZMA_H
#if LZMA_VERSION_MAJOR >= 5
/* Effectively disable the limiter. */
#define LZMA_MEMLIMIT   UINT64_MAX
#else
/* NOTE: This needs to check memory size which running system has. */
#define LZMA_MEMLIMIT   (1U << 30)
#endif
	{
		lzma_options_delta delta_opt;
		lzma_filter filters[LZMA_FILTERS_MAX], *ff;
		int fi = 0;

		if (zip->lzstream_valid) {
			lzma_end(&(zip->lzstream));
			zip->lzstream_valid = 0;
		}

		/*
		 * NOTE: liblzma incompletely handle the BCJ+LZMA compressed
		 * data made by 7-Zip because 7-Zip does not add End-Of-
		 * Payload Marker(EOPM) at the end of LZMA compressed data,
		 * and so liblzma cannot know the end of the compressed data
		 * without EOPM. So consequently liblzma will not return last
		 * three or four bytes of uncompressed data because
		 * LZMA_FILTER_X86 filter does not handle input data if its
		 * data size is less than five bytes. If liblzma detect EOPM
		 * or know the uncompressed data size, liblzma will flush out
		 * the remaining that three or four bytes of uncompressed
		 * data. That is why we have to use our converting program
		 * for BCJ+LZMA. If we were able to tell the uncompressed
		 * size to liblzma when using lzma_raw_decoder() liblzma
		 * could correctly deal with BCJ+LZMA. But unfortunately
		 * there is no way to do that.
		 * Discussion about this can be found at XZ Utils forum.
		 */
		if (coder2 != NULL) {
			zip->codec2 = coder2->codec;

			filters[fi].options = NULL;
			switch (zip->codec2) {
			case _7Z_X86:
				if (zip->codec == _7Z_LZMA2) {
					filters[fi].id = LZMA_FILTER_X86;
					fi++;
				} else
					/* Use our filter. */
					x86_Init(zip);
				break;
			case _7Z_X86_BCJ2:
				/* Use our filter. */
				zip->bcj_state = 0;
				break;
			case _7Z_DELTA:
				filters[fi].id = LZMA_FILTER_DELTA;
				memset(&delta_opt, 0, sizeof(delta_opt));
				delta_opt.type = LZMA_DELTA_TYPE_BYTE;
				delta_opt.dist = 1;
				filters[fi].options = &delta_opt;
				fi++;
				break;
			/* Following filters have not been tested yet. */
			case _7Z_POWERPC:
				filters[fi].id = LZMA_FILTER_POWERPC;
				fi++;
				break;
			case _7Z_IA64:
				filters[fi].id = LZMA_FILTER_IA64;
				fi++;
				break;
			case _7Z_ARM:
				filters[fi].id = LZMA_FILTER_ARM;
				fi++;
				break;
			case _7Z_ARMTHUMB:
				filters[fi].id = LZMA_FILTER_ARMTHUMB;
				fi++;
				break;
			case _7Z_SPARC:
				filters[fi].id = LZMA_FILTER_SPARC;
				fi++;
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Unexpected codec ID: %lX"", zip->codec2);
				return (ARCHIVE_FAILED);
			}
		}

		if (zip->codec == _7Z_LZMA2)
			filters[fi].id = LZMA_FILTER_LZMA2;
		else
			filters[fi].id = LZMA_FILTER_LZMA1;
		filters[fi].options = NULL;
		ff = &filters[fi];
		r = lzma_properties_decode(&filters[fi], NULL,
		    coder1->properties, (size_t)coder1->propertiesSize);
		if (r != LZMA_OK) {
			set_error(a, r);
			return (ARCHIVE_FAILED);
		}
		fi++;

		filters[fi].id = LZMA_VLI_UNKNOWN;
		filters[fi].options = NULL;
		r = lzma_raw_decoder(&(zip->lzstream), filters);
		free(ff->options);
		if (r != LZMA_OK) {
			set_error(a, r);
			return (ARCHIVE_FAILED);
		}
		zip->lzstream_valid = 1;
		zip->lzstream.total_in = 0;
		zip->lzstream.total_out = 0;
		break;
	}
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""LZMA codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_BZ2:
#if defined(HAVE_BZLIB_H) && defined(BZ_CONFIG_ERROR)
		if (zip->bzstream_valid) {
			BZ2_bzDecompressEnd(&(zip->bzstream));
			zip->bzstream_valid = 0;
		}
		r = BZ2_bzDecompressInit(&(zip->bzstream), 0, 0);
		if (r == BZ_MEM_ERROR)
			r = BZ2_bzDecompressInit(&(zip->bzstream), 0, 1);
		if (r != BZ_OK) {
			int err = ARCHIVE_ERRNO_MISC;
			const char *detail = NULL;
			switch (r) {
			case BZ_PARAM_ERROR:
				detail = ""invalid setup parameter"";
				break;
			case BZ_MEM_ERROR:
				err = ENOMEM;
				detail = ""out of memory"";
				break;
			case BZ_CONFIG_ERROR:
				detail = ""mis-compiled library"";
				break;
			}
			archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail != NULL ? detail : ""??"");
			zip->bzstream_valid = 0;
			return (ARCHIVE_FAILED);
		}
		zip->bzstream_valid = 1;
		zip->bzstream.total_in_lo32 = 0;
		zip->bzstream.total_in_hi32 = 0;
		zip->bzstream.total_out_lo32 = 0;
		zip->bzstream.total_out_hi32 = 0;
		break;
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""BZ2 codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_DEFLATE:
#ifdef HAVE_ZLIB_H
		if (zip->stream_valid)
			r = inflateReset(&(zip->stream));
		else
			r = inflateInit2(&(zip->stream),
			    -15 /* Don't check for zlib header */);
		if (r != Z_OK) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");
			return (ARCHIVE_FAILED);
		}
		zip->stream_valid = 1;
		zip->stream.total_in = 0;
		zip->stream.total_out = 0;
		break;
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""DEFLATE codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_PPMD:
	{
		unsigned order;
		uint32_t msize;

		if (zip->ppmd7_valid) {
			__archive_ppmd7_functions.Ppmd7_Free(
			    &zip->ppmd7_context, &g_szalloc);
			zip->ppmd7_valid = 0;
		}

		if (coder1->propertiesSize < 5) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}
		order = coder1->properties[0];
		msize = archive_le32dec(&(coder1->properties[1]));
		if (order < PPMD7_MIN_ORDER || order > PPMD7_MAX_ORDER ||
		    msize < PPMD7_MIN_MEM_SIZE || msize > PPMD7_MAX_MEM_SIZE) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}
		__archive_ppmd7_functions.Ppmd7_Construct(&zip->ppmd7_context);
		r = __archive_ppmd7_functions.Ppmd7_Alloc(
			&zip->ppmd7_context, msize, &g_szalloc);
		if (r == 0) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Coludn't allocate memory for PPMd"");
			return (ARCHIVE_FATAL);
		}
		__archive_ppmd7_functions.Ppmd7_Init(
			&zip->ppmd7_context, order);
		__archive_ppmd7_functions.Ppmd7z_RangeDec_CreateVTable(
			&zip->range_dec);
		zip->ppmd7_valid = 1;
		zip->ppmd7_stat = 0;
		zip->ppstream.overconsumed = 0;
		zip->ppstream.total_in = 0;
		zip->ppstream.total_out = 0;
		break;
	}
	case _7Z_X86:
	case _7Z_X86_BCJ2:
	case _7Z_POWERPC:
	case _7Z_IA64:
	case _7Z_ARM:
	case _7Z_ARMTHUMB:
	case _7Z_SPARC:
	case _7Z_DELTA:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unexpected codec ID: %lX"", zip->codec);
		return (ARCHIVE_FAILED);
	case _7Z_CRYPTO_MAIN_ZIP:
	case _7Z_CRYPTO_RAR_29:
	case _7Z_CRYPTO_AES_256_SHA_256:
		if (a->entry) {
			archive_entry_set_is_metadata_encrypted(a->entry, 1);
			archive_entry_set_is_data_encrypted(a->entry, 1);
			zip->has_encrypted_entries = 1;
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Crypto codec not supported yet (ID: 0x%lX)"", zip->codec);
		return (ARCHIVE_FAILED);
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown codec ID: %lX"", zip->codec);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_811.cpp,"[18, 0, 0, 0, 16, 0, 14, 2, 28, 2, 24, 0, 0, 0, 1, 489, 0, 0, 7, 8, 0, 0, 3, 53, 0, 0, 0, 0, 2, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 1, 259, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 19, 0, 19, 17, 8, 0, 38, 0, 0, 86, 0, 86, 14, 0, 2, 2, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_811.cpp,218
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1244,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_812.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_812.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_812.cpp,234
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1252,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_813.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_813.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_813.cpp,242
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1260,"archive_set_error(&a->archive, ENOMEM,
			    ""Coludn't allocate memory for PPMd"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_814.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Coludn't allocate memory for PPMd"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_814.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_814.cpp,250
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1283,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unexpected codec ID: %lX"", zip->codec);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_815.cpp,"{
	case _7Z_COPY:
		break;

	case _7Z_LZMA: case _7Z_LZMA2:
#ifdef HAVE_LZMA_H
#if LZMA_VERSION_MAJOR >= 5
/* Effectively disable the limiter. */
#define LZMA_MEMLIMIT   UINT64_MAX
#else
/* NOTE: This needs to check memory size which running system has. */
#define LZMA_MEMLIMIT   (1U << 30)
#endif
	{
		lzma_options_delta delta_opt;
		lzma_filter filters[LZMA_FILTERS_MAX], *ff;
		int fi = 0;

		if (zip->lzstream_valid) {
			lzma_end(&(zip->lzstream));
			zip->lzstream_valid = 0;
		}

		/*
		 * NOTE: liblzma incompletely handle the BCJ+LZMA compressed
		 * data made by 7-Zip because 7-Zip does not add End-Of-
		 * Payload Marker(EOPM) at the end of LZMA compressed data,
		 * and so liblzma cannot know the end of the compressed data
		 * without EOPM. So consequently liblzma will not return last
		 * three or four bytes of uncompressed data because
		 * LZMA_FILTER_X86 filter does not handle input data if its
		 * data size is less than five bytes. If liblzma detect EOPM
		 * or know the uncompressed data size, liblzma will flush out
		 * the remaining that three or four bytes of uncompressed
		 * data. That is why we have to use our converting program
		 * for BCJ+LZMA. If we were able to tell the uncompressed
		 * size to liblzma when using lzma_raw_decoder() liblzma
		 * could correctly deal with BCJ+LZMA. But unfortunately
		 * there is no way to do that.
		 * Discussion about this can be found at XZ Utils forum.
		 */
		if (coder2 != NULL) {
			zip->codec2 = coder2->codec;

			filters[fi].options = NULL;
			switch (zip->codec2) {
			case _7Z_X86:
				if (zip->codec == _7Z_LZMA2) {
					filters[fi].id = LZMA_FILTER_X86;
					fi++;
				} else
					/* Use our filter. */
					x86_Init(zip);
				break;
			case _7Z_X86_BCJ2:
				/* Use our filter. */
				zip->bcj_state = 0;
				break;
			case _7Z_DELTA:
				filters[fi].id = LZMA_FILTER_DELTA;
				memset(&delta_opt, 0, sizeof(delta_opt));
				delta_opt.type = LZMA_DELTA_TYPE_BYTE;
				delta_opt.dist = 1;
				filters[fi].options = &delta_opt;
				fi++;
				break;
			/* Following filters have not been tested yet. */
			case _7Z_POWERPC:
				filters[fi].id = LZMA_FILTER_POWERPC;
				fi++;
				break;
			case _7Z_IA64:
				filters[fi].id = LZMA_FILTER_IA64;
				fi++;
				break;
			case _7Z_ARM:
				filters[fi].id = LZMA_FILTER_ARM;
				fi++;
				break;
			case _7Z_ARMTHUMB:
				filters[fi].id = LZMA_FILTER_ARMTHUMB;
				fi++;
				break;
			case _7Z_SPARC:
				filters[fi].id = LZMA_FILTER_SPARC;
				fi++;
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Unexpected codec ID: %lX"", zip->codec2);
				return (ARCHIVE_FAILED);
			}
		}

		if (zip->codec == _7Z_LZMA2)
			filters[fi].id = LZMA_FILTER_LZMA2;
		else
			filters[fi].id = LZMA_FILTER_LZMA1;
		filters[fi].options = NULL;
		ff = &filters[fi];
		r = lzma_properties_decode(&filters[fi], NULL,
		    coder1->properties, (size_t)coder1->propertiesSize);
		if (r != LZMA_OK) {
			set_error(a, r);
			return (ARCHIVE_FAILED);
		}
		fi++;

		filters[fi].id = LZMA_VLI_UNKNOWN;
		filters[fi].options = NULL;
		r = lzma_raw_decoder(&(zip->lzstream), filters);
		free(ff->options);
		if (r != LZMA_OK) {
			set_error(a, r);
			return (ARCHIVE_FAILED);
		}
		zip->lzstream_valid = 1;
		zip->lzstream.total_in = 0;
		zip->lzstream.total_out = 0;
		break;
	}
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""LZMA codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_BZ2:
#if defined(HAVE_BZLIB_H) && defined(BZ_CONFIG_ERROR)
		if (zip->bzstream_valid) {
			BZ2_bzDecompressEnd(&(zip->bzstream));
			zip->bzstream_valid = 0;
		}
		r = BZ2_bzDecompressInit(&(zip->bzstream), 0, 0);
		if (r == BZ_MEM_ERROR)
			r = BZ2_bzDecompressInit(&(zip->bzstream), 0, 1);
		if (r != BZ_OK) {
			int err = ARCHIVE_ERRNO_MISC;
			const char *detail = NULL;
			switch (r) {
			case BZ_PARAM_ERROR:
				detail = ""invalid setup parameter"";
				break;
			case BZ_MEM_ERROR:
				err = ENOMEM;
				detail = ""out of memory"";
				break;
			case BZ_CONFIG_ERROR:
				detail = ""mis-compiled library"";
				break;
			}
			archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail != NULL ? detail : ""??"");
			zip->bzstream_valid = 0;
			return (ARCHIVE_FAILED);
		}
		zip->bzstream_valid = 1;
		zip->bzstream.total_in_lo32 = 0;
		zip->bzstream.total_in_hi32 = 0;
		zip->bzstream.total_out_lo32 = 0;
		zip->bzstream.total_out_hi32 = 0;
		break;
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""BZ2 codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_DEFLATE:
#ifdef HAVE_ZLIB_H
		if (zip->stream_valid)
			r = inflateReset(&(zip->stream));
		else
			r = inflateInit2(&(zip->stream),
			    -15 /* Don't check for zlib header */);
		if (r != Z_OK) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");
			return (ARCHIVE_FAILED);
		}
		zip->stream_valid = 1;
		zip->stream.total_in = 0;
		zip->stream.total_out = 0;
		break;
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""DEFLATE codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_PPMD:
	{
		unsigned order;
		uint32_t msize;

		if (zip->ppmd7_valid) {
			__archive_ppmd7_functions.Ppmd7_Free(
			    &zip->ppmd7_context, &g_szalloc);
			zip->ppmd7_valid = 0;
		}

		if (coder1->propertiesSize < 5) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}
		order = coder1->properties[0];
		msize = archive_le32dec(&(coder1->properties[1]));
		if (order < PPMD7_MIN_ORDER || order > PPMD7_MAX_ORDER ||
		    msize < PPMD7_MIN_MEM_SIZE || msize > PPMD7_MAX_MEM_SIZE) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}
		__archive_ppmd7_functions.Ppmd7_Construct(&zip->ppmd7_context);
		r = __archive_ppmd7_functions.Ppmd7_Alloc(
			&zip->ppmd7_context, msize, &g_szalloc);
		if (r == 0) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Coludn't allocate memory for PPMd"");
			return (ARCHIVE_FATAL);
		}
		__archive_ppmd7_functions.Ppmd7_Init(
			&zip->ppmd7_context, order);
		__archive_ppmd7_functions.Ppmd7z_RangeDec_CreateVTable(
			&zip->range_dec);
		zip->ppmd7_valid = 1;
		zip->ppmd7_stat = 0;
		zip->ppstream.overconsumed = 0;
		zip->ppstream.total_in = 0;
		zip->ppstream.total_out = 0;
		break;
	}
	case _7Z_X86:
	case _7Z_X86_BCJ2:
	case _7Z_POWERPC:
	case _7Z_IA64:
	case _7Z_ARM:
	case _7Z_ARMTHUMB:
	case _7Z_SPARC:
	case _7Z_DELTA:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unexpected codec ID: %lX"", zip->codec);
		return (ARCHIVE_FAILED);
	case _7Z_CRYPTO_MAIN_ZIP:
	case _7Z_CRYPTO_RAR_29:
	case _7Z_CRYPTO_AES_256_SHA_256:
		if (a->entry) {
			archive_entry_set_is_metadata_encrypted(a->entry, 1);
			archive_entry_set_is_data_encrypted(a->entry, 1);
			zip->has_encrypted_entries = 1;
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Crypto codec not supported yet (ID: 0x%lX)"", zip->codec);
		return (ARCHIVE_FAILED);
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown codec ID: %lX"", zip->codec);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_815.cpp,"[18, 0, 0, 0, 16, 0, 14, 2, 28, 2, 24, 0, 0, 0, 1, 489, 0, 0, 7, 8, 0, 0, 3, 53, 0, 0, 0, 0, 2, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 1, 259, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 19, 0, 19, 17, 8, 0, 38, 0, 0, 86, 0, 86, 14, 0, 2, 2, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_815.cpp,273
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1294,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Crypto codec not supported yet (ID: 0x%lX)"", zip->codec);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_816.cpp,"{
	case _7Z_COPY:
		break;

	case _7Z_LZMA: case _7Z_LZMA2:
#ifdef HAVE_LZMA_H
#if LZMA_VERSION_MAJOR >= 5
/* Effectively disable the limiter. */
#define LZMA_MEMLIMIT   UINT64_MAX
#else
/* NOTE: This needs to check memory size which running system has. */
#define LZMA_MEMLIMIT   (1U << 30)
#endif
	{
		lzma_options_delta delta_opt;
		lzma_filter filters[LZMA_FILTERS_MAX], *ff;
		int fi = 0;

		if (zip->lzstream_valid) {
			lzma_end(&(zip->lzstream));
			zip->lzstream_valid = 0;
		}

		/*
		 * NOTE: liblzma incompletely handle the BCJ+LZMA compressed
		 * data made by 7-Zip because 7-Zip does not add End-Of-
		 * Payload Marker(EOPM) at the end of LZMA compressed data,
		 * and so liblzma cannot know the end of the compressed data
		 * without EOPM. So consequently liblzma will not return last
		 * three or four bytes of uncompressed data because
		 * LZMA_FILTER_X86 filter does not handle input data if its
		 * data size is less than five bytes. If liblzma detect EOPM
		 * or know the uncompressed data size, liblzma will flush out
		 * the remaining that three or four bytes of uncompressed
		 * data. That is why we have to use our converting program
		 * for BCJ+LZMA. If we were able to tell the uncompressed
		 * size to liblzma when using lzma_raw_decoder() liblzma
		 * could correctly deal with BCJ+LZMA. But unfortunately
		 * there is no way to do that.
		 * Discussion about this can be found at XZ Utils forum.
		 */
		if (coder2 != NULL) {
			zip->codec2 = coder2->codec;

			filters[fi].options = NULL;
			switch (zip->codec2) {
			case _7Z_X86:
				if (zip->codec == _7Z_LZMA2) {
					filters[fi].id = LZMA_FILTER_X86;
					fi++;
				} else
					/* Use our filter. */
					x86_Init(zip);
				break;
			case _7Z_X86_BCJ2:
				/* Use our filter. */
				zip->bcj_state = 0;
				break;
			case _7Z_DELTA:
				filters[fi].id = LZMA_FILTER_DELTA;
				memset(&delta_opt, 0, sizeof(delta_opt));
				delta_opt.type = LZMA_DELTA_TYPE_BYTE;
				delta_opt.dist = 1;
				filters[fi].options = &delta_opt;
				fi++;
				break;
			/* Following filters have not been tested yet. */
			case _7Z_POWERPC:
				filters[fi].id = LZMA_FILTER_POWERPC;
				fi++;
				break;
			case _7Z_IA64:
				filters[fi].id = LZMA_FILTER_IA64;
				fi++;
				break;
			case _7Z_ARM:
				filters[fi].id = LZMA_FILTER_ARM;
				fi++;
				break;
			case _7Z_ARMTHUMB:
				filters[fi].id = LZMA_FILTER_ARMTHUMB;
				fi++;
				break;
			case _7Z_SPARC:
				filters[fi].id = LZMA_FILTER_SPARC;
				fi++;
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Unexpected codec ID: %lX"", zip->codec2);
				return (ARCHIVE_FAILED);
			}
		}

		if (zip->codec == _7Z_LZMA2)
			filters[fi].id = LZMA_FILTER_LZMA2;
		else
			filters[fi].id = LZMA_FILTER_LZMA1;
		filters[fi].options = NULL;
		ff = &filters[fi];
		r = lzma_properties_decode(&filters[fi], NULL,
		    coder1->properties, (size_t)coder1->propertiesSize);
		if (r != LZMA_OK) {
			set_error(a, r);
			return (ARCHIVE_FAILED);
		}
		fi++;

		filters[fi].id = LZMA_VLI_UNKNOWN;
		filters[fi].options = NULL;
		r = lzma_raw_decoder(&(zip->lzstream), filters);
		free(ff->options);
		if (r != LZMA_OK) {
			set_error(a, r);
			return (ARCHIVE_FAILED);
		}
		zip->lzstream_valid = 1;
		zip->lzstream.total_in = 0;
		zip->lzstream.total_out = 0;
		break;
	}
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""LZMA codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_BZ2:
#if defined(HAVE_BZLIB_H) && defined(BZ_CONFIG_ERROR)
		if (zip->bzstream_valid) {
			BZ2_bzDecompressEnd(&(zip->bzstream));
			zip->bzstream_valid = 0;
		}
		r = BZ2_bzDecompressInit(&(zip->bzstream), 0, 0);
		if (r == BZ_MEM_ERROR)
			r = BZ2_bzDecompressInit(&(zip->bzstream), 0, 1);
		if (r != BZ_OK) {
			int err = ARCHIVE_ERRNO_MISC;
			const char *detail = NULL;
			switch (r) {
			case BZ_PARAM_ERROR:
				detail = ""invalid setup parameter"";
				break;
			case BZ_MEM_ERROR:
				err = ENOMEM;
				detail = ""out of memory"";
				break;
			case BZ_CONFIG_ERROR:
				detail = ""mis-compiled library"";
				break;
			}
			archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail != NULL ? detail : ""??"");
			zip->bzstream_valid = 0;
			return (ARCHIVE_FAILED);
		}
		zip->bzstream_valid = 1;
		zip->bzstream.total_in_lo32 = 0;
		zip->bzstream.total_in_hi32 = 0;
		zip->bzstream.total_out_lo32 = 0;
		zip->bzstream.total_out_hi32 = 0;
		break;
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""BZ2 codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_DEFLATE:
#ifdef HAVE_ZLIB_H
		if (zip->stream_valid)
			r = inflateReset(&(zip->stream));
		else
			r = inflateInit2(&(zip->stream),
			    -15 /* Don't check for zlib header */);
		if (r != Z_OK) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");
			return (ARCHIVE_FAILED);
		}
		zip->stream_valid = 1;
		zip->stream.total_in = 0;
		zip->stream.total_out = 0;
		break;
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""DEFLATE codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_PPMD:
	{
		unsigned order;
		uint32_t msize;

		if (zip->ppmd7_valid) {
			__archive_ppmd7_functions.Ppmd7_Free(
			    &zip->ppmd7_context, &g_szalloc);
			zip->ppmd7_valid = 0;
		}

		if (coder1->propertiesSize < 5) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}
		order = coder1->properties[0];
		msize = archive_le32dec(&(coder1->properties[1]));
		if (order < PPMD7_MIN_ORDER || order > PPMD7_MAX_ORDER ||
		    msize < PPMD7_MIN_MEM_SIZE || msize > PPMD7_MAX_MEM_SIZE) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}
		__archive_ppmd7_functions.Ppmd7_Construct(&zip->ppmd7_context);
		r = __archive_ppmd7_functions.Ppmd7_Alloc(
			&zip->ppmd7_context, msize, &g_szalloc);
		if (r == 0) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Coludn't allocate memory for PPMd"");
			return (ARCHIVE_FATAL);
		}
		__archive_ppmd7_functions.Ppmd7_Init(
			&zip->ppmd7_context, order);
		__archive_ppmd7_functions.Ppmd7z_RangeDec_CreateVTable(
			&zip->range_dec);
		zip->ppmd7_valid = 1;
		zip->ppmd7_stat = 0;
		zip->ppstream.overconsumed = 0;
		zip->ppstream.total_in = 0;
		zip->ppstream.total_out = 0;
		break;
	}
	case _7Z_X86:
	case _7Z_X86_BCJ2:
	case _7Z_POWERPC:
	case _7Z_IA64:
	case _7Z_ARM:
	case _7Z_ARMTHUMB:
	case _7Z_SPARC:
	case _7Z_DELTA:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unexpected codec ID: %lX"", zip->codec);
		return (ARCHIVE_FAILED);
	case _7Z_CRYPTO_MAIN_ZIP:
	case _7Z_CRYPTO_RAR_29:
	case _7Z_CRYPTO_AES_256_SHA_256:
		if (a->entry) {
			archive_entry_set_is_metadata_encrypted(a->entry, 1);
			archive_entry_set_is_data_encrypted(a->entry, 1);
			zip->has_encrypted_entries = 1;
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Crypto codec not supported yet (ID: 0x%lX)"", zip->codec);
		return (ARCHIVE_FAILED);
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown codec ID: %lX"", zip->codec);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_816.cpp,"[18, 0, 0, 0, 16, 0, 14, 2, 28, 2, 24, 0, 0, 0, 1, 489, 0, 0, 7, 8, 0, 0, 3, 53, 0, 0, 0, 0, 2, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 1, 259, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 19, 0, 19, 17, 8, 0, 38, 0, 0, 86, 0, 86, 14, 0, 2, 2, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_816.cpp,284
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1298,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown codec ID: %lX"", zip->codec);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_817.cpp,"{
	case _7Z_COPY:
		break;

	case _7Z_LZMA: case _7Z_LZMA2:
#ifdef HAVE_LZMA_H
#if LZMA_VERSION_MAJOR >= 5
/* Effectively disable the limiter. */
#define LZMA_MEMLIMIT   UINT64_MAX
#else
/* NOTE: This needs to check memory size which running system has. */
#define LZMA_MEMLIMIT   (1U << 30)
#endif
	{
		lzma_options_delta delta_opt;
		lzma_filter filters[LZMA_FILTERS_MAX], *ff;
		int fi = 0;

		if (zip->lzstream_valid) {
			lzma_end(&(zip->lzstream));
			zip->lzstream_valid = 0;
		}

		/*
		 * NOTE: liblzma incompletely handle the BCJ+LZMA compressed
		 * data made by 7-Zip because 7-Zip does not add End-Of-
		 * Payload Marker(EOPM) at the end of LZMA compressed data,
		 * and so liblzma cannot know the end of the compressed data
		 * without EOPM. So consequently liblzma will not return last
		 * three or four bytes of uncompressed data because
		 * LZMA_FILTER_X86 filter does not handle input data if its
		 * data size is less than five bytes. If liblzma detect EOPM
		 * or know the uncompressed data size, liblzma will flush out
		 * the remaining that three or four bytes of uncompressed
		 * data. That is why we have to use our converting program
		 * for BCJ+LZMA. If we were able to tell the uncompressed
		 * size to liblzma when using lzma_raw_decoder() liblzma
		 * could correctly deal with BCJ+LZMA. But unfortunately
		 * there is no way to do that.
		 * Discussion about this can be found at XZ Utils forum.
		 */
		if (coder2 != NULL) {
			zip->codec2 = coder2->codec;

			filters[fi].options = NULL;
			switch (zip->codec2) {
			case _7Z_X86:
				if (zip->codec == _7Z_LZMA2) {
					filters[fi].id = LZMA_FILTER_X86;
					fi++;
				} else
					/* Use our filter. */
					x86_Init(zip);
				break;
			case _7Z_X86_BCJ2:
				/* Use our filter. */
				zip->bcj_state = 0;
				break;
			case _7Z_DELTA:
				filters[fi].id = LZMA_FILTER_DELTA;
				memset(&delta_opt, 0, sizeof(delta_opt));
				delta_opt.type = LZMA_DELTA_TYPE_BYTE;
				delta_opt.dist = 1;
				filters[fi].options = &delta_opt;
				fi++;
				break;
			/* Following filters have not been tested yet. */
			case _7Z_POWERPC:
				filters[fi].id = LZMA_FILTER_POWERPC;
				fi++;
				break;
			case _7Z_IA64:
				filters[fi].id = LZMA_FILTER_IA64;
				fi++;
				break;
			case _7Z_ARM:
				filters[fi].id = LZMA_FILTER_ARM;
				fi++;
				break;
			case _7Z_ARMTHUMB:
				filters[fi].id = LZMA_FILTER_ARMTHUMB;
				fi++;
				break;
			case _7Z_SPARC:
				filters[fi].id = LZMA_FILTER_SPARC;
				fi++;
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Unexpected codec ID: %lX"", zip->codec2);
				return (ARCHIVE_FAILED);
			}
		}

		if (zip->codec == _7Z_LZMA2)
			filters[fi].id = LZMA_FILTER_LZMA2;
		else
			filters[fi].id = LZMA_FILTER_LZMA1;
		filters[fi].options = NULL;
		ff = &filters[fi];
		r = lzma_properties_decode(&filters[fi], NULL,
		    coder1->properties, (size_t)coder1->propertiesSize);
		if (r != LZMA_OK) {
			set_error(a, r);
			return (ARCHIVE_FAILED);
		}
		fi++;

		filters[fi].id = LZMA_VLI_UNKNOWN;
		filters[fi].options = NULL;
		r = lzma_raw_decoder(&(zip->lzstream), filters);
		free(ff->options);
		if (r != LZMA_OK) {
			set_error(a, r);
			return (ARCHIVE_FAILED);
		}
		zip->lzstream_valid = 1;
		zip->lzstream.total_in = 0;
		zip->lzstream.total_out = 0;
		break;
	}
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""LZMA codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_BZ2:
#if defined(HAVE_BZLIB_H) && defined(BZ_CONFIG_ERROR)
		if (zip->bzstream_valid) {
			BZ2_bzDecompressEnd(&(zip->bzstream));
			zip->bzstream_valid = 0;
		}
		r = BZ2_bzDecompressInit(&(zip->bzstream), 0, 0);
		if (r == BZ_MEM_ERROR)
			r = BZ2_bzDecompressInit(&(zip->bzstream), 0, 1);
		if (r != BZ_OK) {
			int err = ARCHIVE_ERRNO_MISC;
			const char *detail = NULL;
			switch (r) {
			case BZ_PARAM_ERROR:
				detail = ""invalid setup parameter"";
				break;
			case BZ_MEM_ERROR:
				err = ENOMEM;
				detail = ""out of memory"";
				break;
			case BZ_CONFIG_ERROR:
				detail = ""mis-compiled library"";
				break;
			}
			archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail != NULL ? detail : ""??"");
			zip->bzstream_valid = 0;
			return (ARCHIVE_FAILED);
		}
		zip->bzstream_valid = 1;
		zip->bzstream.total_in_lo32 = 0;
		zip->bzstream.total_in_hi32 = 0;
		zip->bzstream.total_out_lo32 = 0;
		zip->bzstream.total_out_hi32 = 0;
		break;
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""BZ2 codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_DEFLATE:
#ifdef HAVE_ZLIB_H
		if (zip->stream_valid)
			r = inflateReset(&(zip->stream));
		else
			r = inflateInit2(&(zip->stream),
			    -15 /* Don't check for zlib header */);
		if (r != Z_OK) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");
			return (ARCHIVE_FAILED);
		}
		zip->stream_valid = 1;
		zip->stream.total_in = 0;
		zip->stream.total_out = 0;
		break;
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""DEFLATE codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_PPMD:
	{
		unsigned order;
		uint32_t msize;

		if (zip->ppmd7_valid) {
			__archive_ppmd7_functions.Ppmd7_Free(
			    &zip->ppmd7_context, &g_szalloc);
			zip->ppmd7_valid = 0;
		}

		if (coder1->propertiesSize < 5) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}
		order = coder1->properties[0];
		msize = archive_le32dec(&(coder1->properties[1]));
		if (order < PPMD7_MIN_ORDER || order > PPMD7_MAX_ORDER ||
		    msize < PPMD7_MIN_MEM_SIZE || msize > PPMD7_MAX_MEM_SIZE) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}
		__archive_ppmd7_functions.Ppmd7_Construct(&zip->ppmd7_context);
		r = __archive_ppmd7_functions.Ppmd7_Alloc(
			&zip->ppmd7_context, msize, &g_szalloc);
		if (r == 0) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Coludn't allocate memory for PPMd"");
			return (ARCHIVE_FATAL);
		}
		__archive_ppmd7_functions.Ppmd7_Init(
			&zip->ppmd7_context, order);
		__archive_ppmd7_functions.Ppmd7z_RangeDec_CreateVTable(
			&zip->range_dec);
		zip->ppmd7_valid = 1;
		zip->ppmd7_stat = 0;
		zip->ppstream.overconsumed = 0;
		zip->ppstream.total_in = 0;
		zip->ppstream.total_out = 0;
		break;
	}
	case _7Z_X86:
	case _7Z_X86_BCJ2:
	case _7Z_POWERPC:
	case _7Z_IA64:
	case _7Z_ARM:
	case _7Z_ARMTHUMB:
	case _7Z_SPARC:
	case _7Z_DELTA:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unexpected codec ID: %lX"", zip->codec);
		return (ARCHIVE_FAILED);
	case _7Z_CRYPTO_MAIN_ZIP:
	case _7Z_CRYPTO_RAR_29:
	case _7Z_CRYPTO_AES_256_SHA_256:
		if (a->entry) {
			archive_entry_set_is_metadata_encrypted(a->entry, 1);
			archive_entry_set_is_data_encrypted(a->entry, 1);
			zip->has_encrypted_entries = 1;
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Crypto codec not supported yet (ID: 0x%lX)"", zip->codec);
		return (ARCHIVE_FAILED);
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown codec ID: %lX"", zip->codec);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_817.cpp,"[18, 0, 0, 0, 16, 0, 14, 2, 28, 2, 24, 0, 0, 0, 1, 489, 0, 0, 7, 8, 0, 0, 3, 53, 0, 0, 0, 0, 2, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 1, 259, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 19, 0, 19, 17, 8, 0, 38, 0, 0, 86, 0, 86, 14, 0, 2, 2, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_817.cpp,288
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1358,"archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""BCJ2 conversion Failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_818.cpp,"{
				archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""BCJ2 conversion Failed"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_818.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_818.cpp,52
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1412,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
				""Decompression failed(%d)"",
			    r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_819.cpp,"{
		case LZMA_STREAM_END: /* Found end of stream. */
			lzma_end(&(zip->lzstream));
			zip->lzstream_valid = 0;
			ret = ARCHIVE_EOF;
			break;
		case LZMA_OK: /* Decompressor made some progress. */
			break;
		default:
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
				""Decompression failed(%d)"",
			    r);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_819.cpp,"[0, 0, 0, 0, 2, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_819.cpp,106
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1435,"archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to clean up decompressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_820.cpp,"{
			case BZ_OK:
				break;
			default:
				archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to clean up decompressor"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_820.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_820.cpp,129
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1446,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""bzip decompression failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_821.cpp,"{
		case BZ_STREAM_END: /* Found end of stream. */
			switch (BZ2_bzDecompressEnd(&(zip->bzstream))) {
			case BZ_OK:
				break;
			default:
				archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to clean up decompressor"");
				return (ARCHIVE_FAILED);
			}
			zip->bzstream_valid = 0;
			ret = ARCHIVE_EOF;
			break;
		case BZ_OK: /* Decompressor made some progress. */
			break;
		default:
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""bzip decompression failed"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_821.cpp,"[0, 0, 0, 0, 3, 0, 2, 1, 3, 2, 2, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_821.cpp,140
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1469,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""File decompression failed (%d)"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_822.cpp,"{
		case Z_STREAM_END: /* Found end of stream. */
			ret = ARCHIVE_EOF;
			break;
		case Z_OK: /* Decompressor made some progress.*/
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""File decompression failed (%d)"", r);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_822.cpp,"[0, 0, 0, 0, 2, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_822.cpp,163
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1483,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Decompression internal error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_823.cpp,"{
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Decompression internal error"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_823.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_823.cpp,177
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1500,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to initialize PPMd range decorder"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_824.cpp,"{
				zip->ppmd7_stat = -1;
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to initialize PPMd range decorder"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_824.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_824.cpp,194
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1525,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Failed to decode PPMd"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_825.cpp,"{
				zip->ppmd7_stat = -1;
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Failed to decode PPMd"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_825.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_825.cpp,219
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1547,"archive_set_error(&(a->archive), ARCHIVE_ERRNO_MISC,
		    ""Decompression internal error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_826.cpp,"{
	case _7Z_COPY:
	{
		size_t bytes =
		    (t_avail_in > t_avail_out)?t_avail_out:t_avail_in;

		memcpy(t_next_out, t_next_in, bytes);
		t_avail_in -= bytes;
		t_avail_out -= bytes;
		if (o_avail_in == 0)
			ret = ARCHIVE_EOF;
		break;
	}
#ifdef HAVE_LZMA_H
	case _7Z_LZMA: case _7Z_LZMA2:
		zip->lzstream.next_in = t_next_in;
		zip->lzstream.avail_in = t_avail_in;
		zip->lzstream.next_out = t_next_out;
		zip->lzstream.avail_out = t_avail_out;

		r = lzma_code(&(zip->lzstream), LZMA_RUN);
		switch (r) {
		case LZMA_STREAM_END: /* Found end of stream. */
			lzma_end(&(zip->lzstream));
			zip->lzstream_valid = 0;
			ret = ARCHIVE_EOF;
			break;
		case LZMA_OK: /* Decompressor made some progress. */
			break;
		default:
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
				""Decompression failed(%d)"",
			    r);
			return (ARCHIVE_FAILED);
		}
		t_avail_in = zip->lzstream.avail_in;
		t_avail_out = zip->lzstream.avail_out;
		break;
#endif
#if defined(HAVE_BZLIB_H) && defined(BZ_CONFIG_ERROR)
	case _7Z_BZ2:
		zip->bzstream.next_in = (char *)(uintptr_t)t_next_in;
		zip->bzstream.avail_in = t_avail_in;
		zip->bzstream.next_out = (char *)(uintptr_t)t_next_out;
		zip->bzstream.avail_out = t_avail_out;
		r = BZ2_bzDecompress(&(zip->bzstream));
		switch (r) {
		case BZ_STREAM_END: /* Found end of stream. */
			switch (BZ2_bzDecompressEnd(&(zip->bzstream))) {
			case BZ_OK:
				break;
			default:
				archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to clean up decompressor"");
				return (ARCHIVE_FAILED);
			}
			zip->bzstream_valid = 0;
			ret = ARCHIVE_EOF;
			break;
		case BZ_OK: /* Decompressor made some progress. */
			break;
		default:
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""bzip decompression failed"");
			return (ARCHIVE_FAILED);
		}
		t_avail_in = zip->bzstream.avail_in;
		t_avail_out = zip->bzstream.avail_out;
		break;
#endif
#ifdef HAVE_ZLIB_H
	case _7Z_DEFLATE:
		zip->stream.next_in = (Bytef *)(uintptr_t)t_next_in;
		zip->stream.avail_in = (uInt)t_avail_in;
		zip->stream.next_out = t_next_out;
		zip->stream.avail_out = (uInt)t_avail_out;
		r = inflate(&(zip->stream), 0);
		switch (r) {
		case Z_STREAM_END: /* Found end of stream. */
			ret = ARCHIVE_EOF;
			break;
		case Z_OK: /* Decompressor made some progress.*/
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""File decompression failed (%d)"", r);
			return (ARCHIVE_FAILED);
		}
		t_avail_in = zip->stream.avail_in;
		t_avail_out = zip->stream.avail_out;
		break;
#endif
	case _7Z_PPMD:
	{
		uint64_t flush_bytes;

		if (!zip->ppmd7_valid || zip->ppmd7_stat < 0 ||
		    t_avail_out <= 0) {
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Decompression internal error"");
			return (ARCHIVE_FAILED);
		}
		zip->ppstream.next_in = t_next_in;
		zip->ppstream.avail_in = t_avail_in;
		zip->ppstream.next_out = t_next_out;
		zip->ppstream.avail_out = t_avail_out;
		if (zip->ppmd7_stat == 0) {
			zip->bytein.a = a;
			zip->bytein.Read = &ppmd_read;
			zip->range_dec.Stream = &zip->bytein;
			r = __archive_ppmd7_functions.Ppmd7z_RangeDec_Init(
				&(zip->range_dec));
			if (r == 0) {
				zip->ppmd7_stat = -1;
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to initialize PPMd range decorder"");
				return (ARCHIVE_FAILED);
			}
			if (zip->ppstream.overconsumed) {
				zip->ppmd7_stat = -1;
				return (ARCHIVE_FAILED);
			}
			zip->ppmd7_stat = 1;
		}

		if (t_avail_in == 0)
			/* XXX Flush out remaining decoded data XXX */
			flush_bytes = zip->folder_outbytes_remaining;
		else
			flush_bytes = 0;

		do {
			int sym;

			sym = __archive_ppmd7_functions.Ppmd7_DecodeSymbol(
				&(zip->ppmd7_context), &(zip->range_dec.p));
			if (sym < 0) {
				zip->ppmd7_stat = -1;
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Failed to decode PPMd"");
				return (ARCHIVE_FAILED);
			}
			if (zip->ppstream.overconsumed) {
				zip->ppmd7_stat = -1;
				return (ARCHIVE_FAILED);
			}
			*zip->ppstream.next_out++ = (unsigned char)sym;
			zip->ppstream.avail_out--;
			zip->ppstream.total_out++;
			if (flush_bytes)
				flush_bytes--;
		} while (zip->ppstream.avail_out &&
			(zip->ppstream.avail_in || flush_bytes));

		t_avail_in = (size_t)zip->ppstream.avail_in;
		t_avail_out = (size_t)zip->ppstream.avail_out;
		break;
	}
	default:
		archive_set_error(&(a->archive), ARCHIVE_ERRNO_MISC,
		    ""Decompression internal error"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_826.cpp,"[10, 0, 0, 1, 12, 0, 10, 4, 13, 5, 18, 0, 0, 0, 0, 363, 0, 0, 3, 3, 0, 0, 1, 24, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 263, 1, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 15, 10, 2, 0, 18, 0, 0, 61, 0, 41, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_826.cpp,241
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1587,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC, ""BCJ2 conversion Failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_827.cpp,"{
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC, ""BCJ2 conversion Failed"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_827.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_827.cpp,281
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1617,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up bzip2 decompressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_828.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up bzip2 decompressor"");
			r = ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_828.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_828.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,1628,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up zlib decompressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_829.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up zlib decompressor"");
			r = ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_829.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_829.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2035,"archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_830.cpp,"{
			archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");
			goto failed;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_830.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_830.cpp,45
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2041,"archive_set_error(&a->archive, -1,
		    ""Malformed 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_831.cpp,"{
	case 0:
		ci->folders =
			calloc((size_t)ci->numFolders, sizeof(*ci->folders));
		if (ci->folders == NULL)
			return (-1);
		for (i = 0; i < ci->numFolders; i++) {
			if (read_Folder(a, &(ci->folders[i])) < 0)
				goto failed;
		}
		break;
	case 1:
		if (parse_7zip_uint64(a, &(ci->dataStreamIndex)) < 0)
			return (-1);
		if (UMAX_ENTRY < ci->dataStreamIndex)
			return (-1);
		if (ci->numFolders > 0) {
			archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");
			goto failed;
		}
		break;
	default:
		archive_set_error(&a->archive, -1,
		    ""Malformed 7-Zip archive"");
		goto failed;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_831.cpp,"[5, 0, 1, 0, 2, 0, 3, 0, 2, 1, 7, 0, 3, 0, 0, 50, 0, 0, 0, 0, 0, 0, 1, 13, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 30, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 5, 0, 0, 6, 0, 0, 3, 0, 13, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_831.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2756,"archive_set_error(&a->archive, -1,
			    ""Couldn't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_832.cpp,"archive_set_error(&a->archive, -1,
			    ""Couldn't allocate memory"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_832.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_832.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2759,"archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_833.cpp,"archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_833.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_833.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2765,"archive_set_error(&a->archive, -1, ""Malformed 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_834.cpp,"{
		archive_set_error(&a->archive, -1, ""Malformed 7-Zip archive"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_834.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_834.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2772,"archive_set_error(&a->archive, -1, ""Malformed Header offset"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_835.cpp,"{
		archive_set_error(&a->archive, -1, ""Malformed Header offset"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_835.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_835.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2837,"archive_set_error(&a->archive, -1, ""Not 7-Zip archive file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_836.cpp,"{
		archive_set_error(&a->archive, -1, ""Not 7-Zip archive file"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_836.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_836.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2844,"archive_set_error(&a->archive, -1, ""Header CRC error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_837.cpp,"{
		archive_set_error(&a->archive, -1, ""Header CRC error"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_837.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_837.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2857,"archive_set_error(&a->archive, -1, ""Malformed 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_838.cpp,"{
		archive_set_error(&a->archive, -1, ""Malformed 7-Zip archive"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_838.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_838.cpp,45
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2878,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated 7-Zip file body"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_839.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated 7-Zip file body"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_839.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_839.cpp,66
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2894,"archive_set_error(&a->archive, -1,
			    ""Damaged 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_840.cpp,"{
			archive_set_error(&a->archive, -1,
			    ""Damaged 7-Zip archive"");
			r = -1;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_840.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_840.cpp,82
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2928,"archive_set_error(&a->archive, -1,
				    ""Couldn't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_841.cpp,"archive_set_error(&a->archive, -1,
				    ""Couldn't allocate memory"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_841.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_841.cpp,116
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2931,"archive_set_error(&a->archive, -1,
				    ""Damaged 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_842.cpp,"archive_set_error(&a->archive, -1,
				    ""Damaged 7-Zip archive"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_842.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_842.cpp,119
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2940,"archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_843.cpp,"{
			archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_843.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_843.cpp,128
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2947,"archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_844.cpp,"{
			archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_844.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_844.cpp,135
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2953,"archive_set_error(&a->archive, -1,
		    ""Unexpected Property ID = %X"", p[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_845.cpp,"{
	case kEncodedHeader:
		/*
		 * The archive has an encoded header and we have to decode it
		 * in order to parse the header correctly.
		 */
		r = decode_encoded_header_info(a, &(zip->si));

		/* Check the EncodedHeader CRC.*/
		if (r == 0 && zip->header_crc32 != next_header_crc) {
			archive_set_error(&a->archive, -1,
			    ""Damaged 7-Zip archive"");
			r = -1;
		}
		if (r == 0) {
			if (zip->si.ci.folders[0].digest_defined)
				next_header_crc = zip->si.ci.folders[0].digest;
			else
				check_header_crc = 0;
			if (zip->pack_stream_bytes_unconsumed)
				read_consume(a);
			r = setup_decode_folder(a, zip->si.ci.folders, 1);
			if (r == 0) {
				zip->header_bytes_remaining =
					zip->folder_outbytes_remaining;
				r = seek_pack(a);
			}
		}
		/* Clean up StreamsInfo. */
		free_StreamsInfo(&(zip->si));
		memset(&(zip->si), 0, sizeof(zip->si));
		if (r < 0)
			return (ARCHIVE_FATAL);
		zip->header_is_encoded = 1;
		zip->header_crc32 = 0;
		/* FALL THROUGH */
	case kHeader:
		/*
		 * Parse the header.
		 */
		errno = 0;
		r = read_Header(a, header, zip->header_is_encoded);
		if (r < 0) {
			if (errno == ENOMEM)
				archive_set_error(&a->archive, -1,
				    ""Couldn't allocate memory"");
			else
				archive_set_error(&a->archive, -1,
				    ""Damaged 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}

		/*
		 *  Must be kEnd.
		 */
		if ((p = header_bytes(a, 1)) == NULL ||*p != kEnd) {
			archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}

		/* Check the Header CRC.*/
		if (check_header_crc && zip->header_crc32 != next_header_crc) {
			archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}
		break;
	default:
		archive_set_error(&a->archive, -1,
		    ""Unexpected Property ID = %X"", p[0]);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_845.cpp,"[10, 0, 0, 0, 1, 0, 5, 0, 2, 1, 13, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 0, 76, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 10, 10, 2, 0, 15, 0, 0, 20, 0, 36, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_845.cpp,141
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,2987,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated 7-Zip file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_846.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated 7-Zip file data"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_846.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_846.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3002,"archive_set_error(&(a->archive),
		    ARCHIVE_ERRNO_MISC, ""Damaged 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_847.cpp,"{
		/* Decompression has failed. */
		archive_set_error(&(a->archive),
		    ARCHIVE_ERRNO_MISC, ""Damaged 7-Zip archive"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_847.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_847.cpp,33
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3040,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated 7-Zip file body"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_848.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated 7-Zip file body"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_848.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_848.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3065,"archive_set_error(&a->archive, ENOMEM,
			    ""No memory for 7-Zip decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_849.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""No memory for 7-Zip decompression"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_849.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_849.cpp,37
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3095,"archive_set_error(&a->archive, ENOMEM,
				    ""No memory for 7-Zip decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_850.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""No memory for 7-Zip decompression"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_850.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_850.cpp,67
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3127,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated 7-Zip file body"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_851.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated 7-Zip file body"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_851.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_851.cpp,99
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3174,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC, ""Damaged 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_852.cpp,"{
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC, ""Damaged 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_852.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_852.cpp,146
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3181,"archive_set_error(&(a->archive),
		    ARCHIVE_ERRNO_MISC, ""Damaged 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_853.cpp,"{
		archive_set_error(&(a->archive),
		    ARCHIVE_ERRNO_MISC, ""Damaged 7-Zip archive"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_853.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_853.cpp,153
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3196,"archive_set_error(&(a->archive),
		    ARCHIVE_ERRNO_MISC, ""Damaged 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_854.cpp,"{
		archive_set_error(&(a->archive),
		    ARCHIVE_ERRNO_MISC, ""Damaged 7-Zip archive"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_854.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_854.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3245,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC, ""Malformed 7-Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_855.cpp,"{
			/* Invalid sequence. This might happen when
			 * reading a malformed archive. */
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC, ""Malformed 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_855.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_855.cpp,31
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3306,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Truncated 7-Zip file body"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_856.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Truncated 7-Zip file body"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_856.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_856.cpp,92
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3366,"archive_set_error(&(a->archive),
					ARCHIVE_ERRNO_MISC,
					""The %s is encrypted, ""
					""but currently not supported"", cname);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_857.cpp,"{
				/* For entry that is associated with this folder, mark
				   it as encrypted (data+metadata). */
				zip->has_encrypted_entries = 1;
				if (a->entry) {
					archive_entry_set_is_data_encrypted(a->entry, 1);
					archive_entry_set_is_metadata_encrypted(a->entry, 1);
				}
				archive_set_error(&(a->archive),
					ARCHIVE_ERRNO_MISC,
					""The %s is encrypted, ""
					""but currently not supported"", cname);
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_857.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_857.cpp,42
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3386,"archive_set_error(&(a->archive),
		    ARCHIVE_ERRNO_MISC,
		    ""The %s is encoded with many filters, ""
		    ""but currently not supported"", cname);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_858.cpp,"{
		archive_set_error(&(a->archive),
		    ARCHIVE_ERRNO_MISC,
		    ""The %s is encoded with many filters, ""
		    ""but currently not supported"", cname);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_858.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_858.cpp,62
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3456,"archive_set_error(&(a->archive),
					    ARCHIVE_ERRNO_MISC,
					    ""Unsupported form of ""
					    ""BCJ2 streams"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_859.cpp,"{
					archive_set_error(&(a->archive),
					    ARCHIVE_ERRNO_MISC,
					    ""Unsupported form of ""
					    ""BCJ2 streams"");
					return (ARCHIVE_FATAL);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_859.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_859.cpp,132
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3474,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unsupported form of BCJ2 streams"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_860.cpp,"{
			/* We got an unexpected form. */
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unsupported form of BCJ2 streams"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_860.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_860.cpp,150
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3513,"archive_set_error(&a->archive, ENOMEM,
				    ""No memory for 7-Zip decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_861.cpp,"{
				free(b[0]); free(b[1]); free(b[2]);
				archive_set_error(&a->archive, ENOMEM,
				    ""No memory for 7-Zip decompression"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_861.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_861.cpp,189
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3552,"archive_set_error(&a->archive, ENOMEM,
				    ""No memory for 7-Zip decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_862.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""No memory for 7-Zip decompression"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_862.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_862.cpp,228
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.cpp,3605,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated 7-Zip file body"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_863.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated 7-Zip file body"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_863.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_863.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,114,"archive_set_error(&a->archive, ENOMEM, ""Can't allocate cpio data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_864.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Can't allocate cpio data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_864.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_864.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,139,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: hdrcharset option needs a character-set name"",
			    a->format_name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_865.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: hdrcharset option needs a character-set name"",
			    a->format_name)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_865.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_865.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,252,"archive_set_error(&a->archive, -1, ""Filetype required"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_866.cpp,"{
		archive_set_error(&a->archive, -1, ""Filetype required"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_866.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_866.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,258,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_867.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for Pathname"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_867.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_867.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,263,"archive_set_error(&a->archive, -1, ""Pathname required"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_868.cpp,"{
		archive_set_error(&a->archive, -1, ""Pathname required"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_868.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_868.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,268,"archive_set_error(&a->archive, -1, ""Size required"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_869.cpp,"{
		archive_set_error(&a->archive, -1, ""Size required"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_869.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_869.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,295,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate ustar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_870.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate ustar data"");
		return(ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_870.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_870.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,310,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_871.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			ret_final = ARCHIVE_FATAL;
			goto exit_write_header;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_871.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_871.cpp,36
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,315,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate pathname '%s' to %s"",
		    archive_entry_pathname(entry),
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_872.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			ret_final = ARCHIVE_FATAL;
			goto exit_write_header;
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate pathname '%s' to %s"",
		    archive_entry_pathname(entry),
		    archive_string_conversion_charset_name(sconv));
		ret_final = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_872.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_872.cpp,41
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,330,"archive_set_error(&a->archive, ENOMEM,
		    ""No memory for ino translation table"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_873.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""No memory for ino translation table"");
		ret_final = ARCHIVE_FATAL;
		goto exit_write_header;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_873.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_873.cpp,56
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,335,"archive_set_error(&a->archive, ERANGE,
		    ""Too many files for this cpio format"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_874.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""Too many files for this cpio format"");
		ret_final = ARCHIVE_FATAL;
		goto exit_write_header;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_874.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_874.cpp,61
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,363,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_875.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");
			ret_final = ARCHIVE_FATAL;
			goto exit_write_header;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_875.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_875.cpp,89
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,368,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate linkname '%s' to %s"",
		    archive_entry_symlink(entry),
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_876.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");
			ret_final = ARCHIVE_FATAL;
			goto exit_write_header;
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate linkname '%s' to %s"",
		    archive_entry_symlink(entry),
		    archive_string_conversion_charset_name(sconv));
		ret_final = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_876.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_876.cpp,94
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.cpp,381,"archive_set_error(&a->archive, ERANGE,
		    ""File is too large for cpio format."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_877.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""File is too large for cpio format."");
		ret_final = ARCHIVE_FAILED;
		goto exit_write_header;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_877.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_877.cpp,107
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_extract2.cpp,56,"archive_set_error(&a->archive, ENOMEM, ""Can't extract"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_878.cpp,"{
			archive_set_error(&a->archive, ENOMEM, ""Can't extract"");
			return (NULL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_878.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_878.cpp,6
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_extract2.cpp,146,"archive_set_error(ar, archive_errno(aw),
			    ""%s"", archive_error_string(aw));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_879.cpp,"{
			archive_set_error(ar, archive_errno(aw),
			    ""%s"", archive_error_string(aw));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_879.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_879.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_by_name.cpp,72,"archive_set_error(a, EINVAL, ""No such filter '%s'"", name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_880.cpp,"{
	int i;

	for (i = 0; names[i].name != NULL; i++) {
		if (strcmp(name, names[i].name) == 0)
			return ((names[i].setter)(a));
	}

	archive_set_error(a, EINVAL, ""No such filter '%s'"", name);
	a->state = ARCHIVE_STATE_FATAL;
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_880.cpp,"[1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 29, 0, 0, 1, 1, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 1, 0, 0, 2, 0, 0, 2, 0, 6, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_880.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,169,"archive_set_error(&a->archive, errno,
					    ""Can't fstat"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_881.cpp,"{
					archive_set_error(&a->archive, errno,
					    ""Can't fstat"");
					return (ARCHIVE_FAILED);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_881.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_881.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,178,"archive_set_error(&a->archive, errno,
					    ""Can't lstat %s"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_882.cpp,"{
					archive_set_error(&a->archive, errno,
					    ""Can't lstat %s"", path);
					return (ARCHIVE_FAILED);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_882.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_882.cpp,31
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,185,"archive_set_error(&a->archive, errno,
				    ""Can't stat %s"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_883.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't stat %s"", path);
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_883.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_883.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,248,"archive_set_error(&a->archive, ENOMEM,
			    ""Couldn't read link data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_884.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Couldn't read link data"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_884.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_884.cpp,101
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,258,"archive_set_error(&a->archive, errno,
				    ""Couldn't read link data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_885.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Couldn't read link data"");
				free(linkbuffer);
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_885.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_885.cpp,111
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,268,"archive_set_error(&a->archive, errno,
			    ""Couldn't read link data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_886.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Couldn't read link data"");
			free(linkbuffer);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_886.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_886.cpp,121
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,334,"archive_set_error(&a->archive, errno,
			    ""Can't change dir to read extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_887.cpp,"{
		archive_set_error(&a->archive, errno,
			    ""Can't change dir to read extended attributes"");
			return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_887.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_887.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,339,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't open file to read extended attributes: No name"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_888.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't open file to read extended attributes: No name"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_888.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_888.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,347,"archive_set_error(&a->archive, errno,
			""Could not check extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_889.cpp,"{
		archive_set_error(&a->archive, errno,
			""Could not check extended attributes"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_889.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_889.cpp,31
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,364,"archive_set_error(&a->archive, errno,
		    ""Could not open extended attribute file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_890.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Could not open extended attribute file"");
		ret = ARCHIVE_WARN;
		goto cleanup;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_890.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_890.cpp,48
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,376,"archive_set_error(&a->archive, errno,
		    ""Could not pack extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_891.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Could not pack extended attributes"");
		ret = ARCHIVE_WARN;
		goto cleanup;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_891.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_891.cpp,60
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,382,"archive_set_error(&a->archive, errno,
		    ""Could not check size of extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_892.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Could not check size of extended attributes"");
		ret = ARCHIVE_WARN;
		goto cleanup;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_892.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_892.cpp,66
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,389,"archive_set_error(&a->archive, errno,
		    ""Could not allocate memory for extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_893.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Could not allocate memory for extended attributes"");
		ret = ARCHIVE_WARN;
		goto cleanup;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_893.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_893.cpp,73
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,395,"archive_set_error(&a->archive, errno,
		    ""Could not read extended attributes into memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_894.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Could not read extended attributes into memory"");
		ret = ARCHIVE_WARN;
		goto cleanup;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_894.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_894.cpp,79
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,476,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ACLs"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_895.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ACLs"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_895.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_895.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,549,"archive_set_error(&a->archive, errno,
			    ""Couldn't translate ""
#if !HAVE_SUN_ACL
			    ""NFSv4 ""
#endif
			    ""ACLs"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_896.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Couldn't translate ""
#if !HAVE_SUN_ACL
			    ""NFSv4 ""
#endif
			    ""ACLs"");
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_896.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_896.cpp,99
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,605,"archive_set_error(&a->archive, errno,
			    ""Couldn't translate access ACLs"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_897.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Couldn't translate access ACLs"");
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_897.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_897.cpp,155
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,624,"archive_set_error(&a->archive, errno,
				    ""Couldn't translate default ACLs"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_898.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Couldn't translate default ACLs"");
				return (r);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_898.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_898.cpp,174
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1188,"archive_set_error(&a->archive, errno,
		    ""Failed to read ACL brand"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_899.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to read ACL brand"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_899.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_899.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1199,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for POSIX.1e ACL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_900.cpp,"{
		case ARCHIVE_ENTRY_ACL_TYPE_ACCESS:
		case ARCHIVE_ENTRY_ACL_TYPE_DEFAULT:
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for POSIX.1e ACL"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_900.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_900.cpp,37
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1206,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for NFSv4 ACL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_901.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for NFSv4 ACL"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_901.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_901.cpp,44
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1212,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown ACL brand"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_902.cpp,"{
	case ACL_BRAND_POSIX:
		switch (default_entry_acl_type) {
		case ARCHIVE_ENTRY_ACL_TYPE_ACCESS:
		case ARCHIVE_ENTRY_ACL_TYPE_DEFAULT:
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for POSIX.1e ACL"");
			return (ARCHIVE_WARN);
		}
		break;
	case ACL_BRAND_NFS4:
		if (default_entry_acl_type & ~ARCHIVE_ENTRY_ACL_TYPE_NFS4) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for NFSv4 ACL"");
			return (ARCHIVE_WARN);
		}
		break;
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown ACL brand"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_902.cpp,"[1, 0, 0, 0, 3, 0, 3, 1, 4, 2, 3, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_902.cpp,50
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1220,"archive_set_error(&a->archive, errno,
		    ""Failed to get first ACL entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_903.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to get first ACL entry"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_903.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_903.cpp,58
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1236,"archive_set_error(&a->archive, errno,
			    ""Failed to get ACL tag type"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_904.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to get ACL tag type"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_904.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_904.cpp,74
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1316,"archive_set_error(&a->archive, errno, ""Failed ""
				    ""to get ACL type from a NFSv4 ACL entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_905.cpp,"{
				archive_set_error(&a->archive, errno, ""Failed ""
				    ""to get ACL type from a NFSv4 ACL entry"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_905.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_905.cpp,154
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1334,"archive_set_error(&a->archive, errno,
				    ""Invalid NFSv4 ACL entry type"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_906.cpp,"{
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			default:
				archive_set_error(&a->archive, errno,
				    ""Invalid NFSv4 ACL entry type"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_906.cpp,"[0, 0, 0, 0, 4, 0, 1, 0, 4, 1, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 5, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_906.cpp,172
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1347,"archive_set_error(&a->archive, errno,
				    ""Failed to get flagset from a NFSv4 ACL entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_907.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Failed to get flagset from a NFSv4 ACL entry"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_907.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_907.cpp,185
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1355,"archive_set_error(&a->archive, errno,
					    ""Failed to check flag in a NFSv4 ""
					    ""ACL flagset"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_908.cpp,"{
					archive_set_error(&a->archive, errno,
					    ""Failed to check flag in a NFSv4 ""
					    ""ACL flagset"");
					return (ARCHIVE_WARN);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_908.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_908.cpp,193
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1366,"archive_set_error(&a->archive, errno,
			    ""Failed to get ACL permission set"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_909.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to get ACL permission set"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_909.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_909.cpp,204
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1377,"archive_set_error(&a->archive, errno,
				    ""Failed to check permission in an ACL permission set"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_910.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Failed to check permission in an ACL permission set"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_910.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_910.cpp,215
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1391,"archive_set_error(&a->archive, errno,
			    ""Failed to get next ACL entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_911.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to get next ACL entry"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_911.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_911.cpp,229
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1452,"archive_set_error(&a->archive, errno,
		    ""Couldn't query extended attribute"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_912.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Couldn't query extended attribute"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_912.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_912.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1458,"archive_set_error(&a->archive, errno, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_913.cpp,"{
		archive_set_error(&a->archive, errno, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_913.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_913.cpp,30
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1479,"archive_set_error(&a->archive, errno,
		    ""Couldn't read extended attribute"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_914.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Couldn't read extended attribute"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_914.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_914.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1506,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_915.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_915.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_915.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1537,"archive_set_error(&a->archive, errno,
			""Couldn't list extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_916.cpp,"{
		if (errno == ENOTSUP || errno == ENOSYS)
			return (ARCHIVE_OK);
		archive_set_error(&a->archive, errno,
			""Couldn't list extended attributes"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_916.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_916.cpp,47
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1546,"archive_set_error(&a->archive, errno, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_917.cpp,"{
		archive_set_error(&a->archive, errno, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_917.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_917.cpp,56
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1567,"archive_set_error(&a->archive, errno,
			""Couldn't retrieve extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_918.cpp,"{
		archive_set_error(&a->archive, errno,
			""Couldn't retrieve extended attributes"");
		free(list);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_918.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_918.cpp,77
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1617,"archive_set_error(&a->archive, errno,
		    ""Couldn't query extended attribute"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_919.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Couldn't query extended attribute"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_919.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_919.cpp,1617
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1623,"archive_set_error(&a->archive, errno, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_920.cpp,"{
		archive_set_error(&a->archive, errno, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_920.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_920.cpp,1623
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1636,"archive_set_error(&a->archive, errno,
		    ""Couldn't read extended attribute"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_921.cpp,"{
		free(value);
		archive_set_error(&a->archive, errno,
		    ""Couldn't read extended attribute"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_921.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_921.cpp,1636
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1665,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_922.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_922.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_922.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1687,"archive_set_error(&a->archive, errno,
			""Couldn't list extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_923.cpp,"{
		archive_set_error(&a->archive, errno,
			""Couldn't list extended attributes"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_923.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_923.cpp,40
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1696,"archive_set_error(&a->archive, errno, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_924.cpp,"{
		archive_set_error(&a->archive, errno, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_924.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_924.cpp,49
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1708,"archive_set_error(&a->archive, errno,
			""Couldn't retrieve extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_925.cpp,"{
		archive_set_error(&a->archive, errno,
			""Couldn't retrieve extended attributes"");
		free(list);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_925.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_925.cpp,61
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1793,"archive_set_error(&a->archive, errno,
			    ""Can't open `%s'"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_926.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't open `%s'"", path);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_926.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_926.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1898,"archive_set_error(&a->archive, errno,
			    ""Can't open `%s'"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_927.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't open `%s'"", path);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_927.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_927.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1925,"archive_set_error(&a->archive, errno,
			    ""Can't open `%s'"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_928.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't open `%s'"", path);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_928.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_928.cpp,52
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1959,"archive_set_error(&a->archive, errno,
			    ""lseek(SEEK_HOLE) failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_929.cpp,"{
			if (errno == ENXIO) {
				/* no more hole */
				if (archive_entry_sparse_count(entry) == 0) {
					/* Potentially a fully-sparse file. */
					check_fully_sparse = 1;
				}
				break;
			}
			archive_set_error(&a->archive, errno,
			    ""lseek(SEEK_HOLE) failed"");
			exit_sts = ARCHIVE_FAILED;
			goto exit_setup_sparse;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_929.cpp,"[2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_929.cpp,86
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.cpp,1971,"archive_set_error(&a->archive, errno,
			    ""lseek(SEEK_DATA) failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_930.cpp,"{
			if (errno == ENXIO) {
				off_e = lseek(*fd, 0, SEEK_END);
				if (off_e != (off_t)-1)
					break;/* no more data */
			}
			archive_set_error(&a->archive, errno,
			    ""lseek(SEEK_DATA) failed"");
			exit_sts = ARCHIVE_FAILED;
			goto exit_setup_sparse;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_930.cpp,"[2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_930.cpp,98
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,90,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Xar not supported on this platform"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_931.cpp,"{
	struct archive_write *a = (struct archive_write *)_a;

	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Xar not supported on this platform"");
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_931.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_931.cpp,5
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,350,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate xar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_932.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate xar data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_932.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_932.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,366,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate xar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_933.cpp,"{
		free(xar);
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate xar data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_933.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_933.cpp,31
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,418,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unknown checksum name: `%s'"",
			    value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_934.cpp,"{
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unknown checksum name: `%s'"",
			    value);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_934.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_934.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,452,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unknown compression name: `%s'"",
			    value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_935.cpp,"{
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unknown compression name: `%s'"",
			    value);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_935.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_935.cpp,49
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,459,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""`%s' compression not supported ""
			    ""on this platform"",
			    name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_936.cpp,"{
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""`%s' compression not supported ""
			    ""on this platform"",
			    name);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_936.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_936.cpp,56
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,472,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Illegal value `%s'"",
			    value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_937.cpp,"{
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Illegal value `%s'"",
			    value);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_937.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_937.cpp,69
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,489,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unknown checksum name: `%s'"",
			    value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_938.cpp,"{
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unknown checksum name: `%s'"",
			    value);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_938.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_938.cpp,86
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,503,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Illegal value `%s'"",
			    value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_939.cpp,"{
			xar->opt_threads = 1;
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Illegal value `%s'"",
			    value);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_939.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_939.cpp,100
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,545,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_940.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_940.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_940.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,590,"archive_set_error(&a->archive, errno,
			    ""Couldn't create temporary file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_941.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Couldn't create temporary file"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_941.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_941.cpp,66
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,597,"archive_set_error(&(a->archive), errno,
				    ""lseek failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_942.cpp,"{
				archive_set_error(&(a->archive), errno,
				    ""lseek failed"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_942.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_942.cpp,73
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,658,"archive_set_error(&(a->archive), errno,
			    ""fwrite function failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_943.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""fwrite function failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_943.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_943.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,787,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterStartElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_944.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterStartElement() failed: %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_944.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_944.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,796,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteAttribute() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_945.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteAttribute() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_945.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_945.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,805,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteString() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_946.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteString() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_946.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_946.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,813,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterEndElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_947.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterEndElement() failed: %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_947.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_947.cpp,35
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,832,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterStartElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_948.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterStartElement() failed: %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_948.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_948.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,840,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteString() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_949.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteString() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_949.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_949.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,848,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterEndElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_950.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterEndElement() failed: %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_950.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_950.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,866,"archive_string_vsprintf(&xar->vstr, fmt, ap);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_951.cpp,"{
	struct xar *xar;
	va_list ap;

	xar = (struct xar *)a->format_data;
	va_start(ap, fmt);
	archive_string_empty(&xar->vstr);
	archive_string_vsprintf(&xar->vstr, fmt, ap);
	va_end(ap);
	return (xmlwrite_string(a, writer, key, xar->vstr.s));
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_951.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 34, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_951.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1093,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterStartElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_952.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterStartElement() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_952.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_952.cpp,93
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1107,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterEndElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_953.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterEndElement() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_953.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_953.cpp,107
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1138,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_954.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_954.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_954.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1147,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterStartElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_955.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterStartElement() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_955.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_955.cpp,31
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1155,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteAttribute() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_956.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteAttribute() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_956.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_956.cpp,39
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1163,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteBase64() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_957.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteBase64() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_957.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_957.cpp,47
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1170,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterEndElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_958.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterEndElement() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_958.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_958.cpp,54
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1207,"archive_string_sprintf(&linkto, ""%d"",
				    file->hardlink_target->id);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_959.cpp,"archive_string_sprintf(&linkto, ""%d"",
				    file->hardlink_target->id)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_959.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_959.cpp,91
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1255,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterStartElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_960.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterStartElement() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_960.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_960.cpp,139
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1270,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterEndElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_961.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterEndElement() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_961.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_961.cpp,154
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1312,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Uname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_962.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Uname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_962.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_962.cpp,196
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1316,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate uname '%s' to UTF-8"",
		    archive_entry_uname(file->entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_963.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Uname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate uname '%s' to UTF-8"",
		    archive_entry_uname(file->entry));
		r2 = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_963.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_963.cpp,200
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1338,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Gname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_964.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Gname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_964.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_964.cpp,222
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1342,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate gname '%s' to UTF-8"",
		    archive_entry_gname(file->entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_965.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Gname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate gname '%s' to UTF-8"",
		    archive_entry_gname(file->entry));
		r2 = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_965.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_965.cpp,226
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1410,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterStartElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_966.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterStartElement() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_966.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_966.cpp,294
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1418,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteAttribute() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_967.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteAttribute() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_967.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_967.cpp,302
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1432,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterEndElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_968.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterEndElement() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_968.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_968.cpp,316
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1445,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterStartElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_969.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterStartElement() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_969.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_969.cpp,329
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1457,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterEndElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_970.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterEndElement() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_970.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_970.cpp,341
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1467,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterStartElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_971.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterStartElement() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_971.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_971.cpp,351
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1484,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterEndElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_972.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterEndElement() failed: %d"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_972.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_972.cpp,368
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1517,"archive_set_error(&a->archive, ENOMEM,
		    ""xmlBufferCreate() ""
		    ""couldn't create xml buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_973.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""xmlBufferCreate() ""
		    ""couldn't create xml buffer"");
		goto exit_toc;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_973.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_973.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1524,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlNewTextWriterMemory() ""
		    ""couldn't create xml writer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_974.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlNewTextWriterMemory() ""
		    ""couldn't create xml writer"");
		goto exit_toc;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_974.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_974.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1532,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterStartDocument() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_975.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterStartDocument() failed: %d"", r);
		goto exit_toc;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_975.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_975.cpp,35
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1539,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterSetIndent() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_976.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterSetIndent() failed: %d"", r);
		goto exit_toc;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_976.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_976.cpp,42
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1550,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterStartElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_977.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterStartElement() failed: %d"", r);
		goto exit_toc;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_977.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_977.cpp,53
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1557,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterStartDocument() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_978.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterStartDocument() failed: %d"", r);
		goto exit_toc;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_978.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_978.cpp,60
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1580,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterStartElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_979.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterStartElement() failed: %d"", r);
			goto exit_toc;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_979.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_979.cpp,83
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1588,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteAttribute() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_980.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteAttribute() failed: %d"", r);
			goto exit_toc;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_980.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_980.cpp,91
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1610,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterEndElement() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_981.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterEndElement() failed: %d"", r);
			goto exit_toc;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_981.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_981.cpp,113
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1631,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""xmlTextWriterStartElement() ""
				    ""failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_982.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""xmlTextWriterStartElement() ""
				    ""failed: %d"", r);
				goto exit_toc;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_982.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_982.cpp,134
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1640,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""xmlTextWriterWriteAttribute() ""
				    ""failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_983.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""xmlTextWriterWriteAttribute() ""
				    ""failed: %d"", r);
				goto exit_toc;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_983.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_983.cpp,143
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1651,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""xmlTextWriterEndElement() ""
				    ""failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_984.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""xmlTextWriterEndElement() ""
				    ""failed: %d"", r);
				goto exit_toc;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_984.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_984.cpp,154
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1665,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""xmlTextWriterStartElement() ""
					    ""failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_985.cpp,"{
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""xmlTextWriterStartElement() ""
					    ""failed: %d"", r);
					goto exit_toc;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_985.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_985.cpp,168
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1674,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""xmlTextWriterWriteAttribute() ""
					    ""failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_986.cpp,"{
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""xmlTextWriterWriteAttribute() ""
					    ""failed: %d"", r);
					goto exit_toc;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_986.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_986.cpp,177
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1687,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterEndDocument() failed: %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_987.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterEndDocument() failed: %d"", r);
		goto exit_toc;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_987.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_987.cpp,190
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1693,"fprintf(stderr, ""\n---TOC-- %d bytes --\n%s\n"",
	    strlen((const char *)bp->content), bp->content);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_988.cpp,"{
	struct xar *xar;
	struct file *np;
	xmlBufferPtr bp;
	xmlTextWriterPtr writer;
	int algsize;
	int r, ret;

	xar = (struct xar *)a->format_data;

	ret = ARCHIVE_FATAL;

	/*
	 * Initialize xml writer.
	 */
	writer = NULL;
	bp = xmlBufferCreate();
	if (bp == NULL) {
		archive_set_error(&a->archive, ENOMEM,
		    ""xmlBufferCreate() ""
		    ""couldn't create xml buffer"");
		goto exit_toc;
	}
	writer = xmlNewTextWriterMemory(bp, 0);
	if (writer == NULL) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlNewTextWriterMemory() ""
		    ""couldn't create xml writer"");
		goto exit_toc;
	}
	r = xmlTextWriterStartDocument(writer, ""1.0"", ""UTF-8"", NULL);
	if (r < 0) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterStartDocument() failed: %d"", r);
		goto exit_toc;
	}
	r = xmlTextWriterSetIndent(writer, 4);
	if (r < 0) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterSetIndent() failed: %d"", r);
		goto exit_toc;
	}

	/*
	 * Start recording TOC
	 */
	r = xmlTextWriterStartElement(writer, BAD_CAST(""xar""));
	if (r < 0) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterStartElement() failed: %d"", r);
		goto exit_toc;
	}
	r = xmlTextWriterStartElement(writer, BAD_CAST(""toc""));
	if (r < 0) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterStartDocument() failed: %d"", r);
		goto exit_toc;
	}

	/*
	 * Record the creation time of the archive file.
	 */
	r = xmlwrite_time(a, writer, ""creation-time"", time(NULL), 0);
	if (r < 0)
		goto exit_toc;

	/*
	 * Record the checksum value of TOC
	 */
	algsize = getalgsize(xar->opt_toc_sumalg);
	if (algsize) {
		/*
		 * Record TOC checksum
		 */
		r = xmlTextWriterStartElement(writer, BAD_CAST(""checksum""));
		if (r < 0) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterStartElement() failed: %d"", r);
			goto exit_toc;
		}
		r = xmlTextWriterWriteAttribute(writer, BAD_CAST(""style""),
		    BAD_CAST_CONST(getalgname(xar->opt_toc_sumalg)));
		if (r < 0) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterWriteAttribute() failed: %d"", r);
			goto exit_toc;
		}

		/*
		 * Record the offset of the value of checksum of TOC
		 */
		r = xmlwrite_string(a, writer, ""offset"", ""0"");
		if (r < 0)
			goto exit_toc;

		/*
		 * Record the size of the value of checksum of TOC
		 */
		r = xmlwrite_fstring(a, writer, ""size"", ""%d"", algsize);
		if (r < 0)
			goto exit_toc;

		r = xmlTextWriterEndElement(writer);
		if (r < 0) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""xmlTextWriterEndElement() failed: %d"", r);
			goto exit_toc;
		}
	}

	np = xar->root;
	do {
		if (np != np->parent) {
			r = make_file_entry(a, writer, np);
			if (r != ARCHIVE_OK)
				goto exit_toc;
		}

		if (np->dir && np->children.first != NULL) {
			/* Enter to sub directories. */
			np = np->children.first;
			r = xmlTextWriterStartElement(writer,
			    BAD_CAST(""file""));
			if (r < 0) {
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""xmlTextWriterStartElement() ""
				    ""failed: %d"", r);
				goto exit_toc;
			}
			r = xmlTextWriterWriteFormatAttribute(
			    writer, BAD_CAST(""id""), ""%d"", np->id);
			if (r < 0) {
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""xmlTextWriterWriteAttribute() ""
				    ""failed: %d"", r);
				goto exit_toc;
			}
			continue;
		}
		while (np != np->parent) {
			r = xmlTextWriterEndElement(writer);
			if (r < 0) {
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""xmlTextWriterEndElement() ""
				    ""failed: %d"", r);
				goto exit_toc;
			}
			if (np->chnext == NULL) {
				/* Return to the parent directory. */
				np = np->parent;
			} else {
				np = np->chnext;
				r = xmlTextWriterStartElement(writer,
				    BAD_CAST(""file""));
				if (r < 0) {
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""xmlTextWriterStartElement() ""
					    ""failed: %d"", r);
					goto exit_toc;
				}
				r = xmlTextWriterWriteFormatAttribute(
				    writer, BAD_CAST(""id""), ""%d"", np->id);
				if (r < 0) {
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""xmlTextWriterWriteAttribute() ""
					    ""failed: %d"", r);
					goto exit_toc;
				}
				break;
			}
		}
	} while (np != np->parent);

	r = xmlTextWriterEndDocument(writer);
	if (r < 0) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""xmlTextWriterEndDocument() failed: %d"", r);
		goto exit_toc;
	}
#if DEBUG_PRINT_TOC
	fprintf(stderr, ""\n---TOC-- %d bytes --\n%s\n"",
	    strlen((const char *)bp->content), bp->content);
#endif

	/*
	 * Compress the TOC and calculate the sum of the TOC.
	 */
	xar->toc.temp_offset = xar->temp_offset;
	xar->toc.size = bp->use;
	checksum_init(&(xar->a_sumwrk), xar->opt_toc_sumalg);

	r = compression_init_encoder_gzip(&(a->archive),
	    &(xar->stream), 6, 1);
	if (r != ARCHIVE_OK)
		goto exit_toc;
	xar->stream.next_in = bp->content;
	xar->stream.avail_in = bp->use;
	xar->stream.total_in = 0;
	xar->stream.next_out = xar->wbuff;
	xar->stream.avail_out = sizeof(xar->wbuff);
	xar->stream.total_out = 0;
	for (;;) {
		size_t size;

		r = compression_code(&(a->archive),
		    &(xar->stream), ARCHIVE_Z_FINISH);
		if (r != ARCHIVE_OK && r != ARCHIVE_EOF)
			goto exit_toc;
		size = sizeof(xar->wbuff) - xar->stream.avail_out;
		checksum_update(&(xar->a_sumwrk), xar->wbuff, size);
		if (write_to_temp(a, xar->wbuff, size) != ARCHIVE_OK)
			goto exit_toc;
		if (r == ARCHIVE_EOF)
			break;
		xar->stream.next_out = xar->wbuff;
		xar->stream.avail_out = sizeof(xar->wbuff);
	}
	r = compression_end(&(a->archive), &(xar->stream));
	if (r != ARCHIVE_OK)
		goto exit_toc;
	xar->toc.length = xar->stream.total_out;
	xar->toc.compression = GZIP;
	checksum_final(&(xar->a_sumwrk), &(xar->toc.a_sum));

	ret = ARCHIVE_OK;
exit_toc:
	if (writer)
		xmlFreeTextWriter(writer);
	if (bp)
		xmlBufferFree(bp);

	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_988.cpp,"[31, 1, 1, 1, 2, 1, 1, 0, 0, 0, 35, 1, 23, 0, 1, 463, 0, 0, 7, 8, 0, 0, 1, 63, 0, 0, 0, 0, 2, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 215, 0, 247, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 33, 30, 1, 0, 60, 0, 0, 65, 0, 148, 2, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_988.cpp,196
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1771,"archive_set_error(&(a->archive), errno, ""lseek failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_989.cpp,"{
		archive_set_error(&(a->archive), errno, ""lseek failed"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_989.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_989.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1786,"archive_set_error(&(a->archive), errno,
			    ""Can't read temporary file(%jd)"",
			    (intmax_t)rs);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_990.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Can't read temporary file(%jd)"",
			    (intmax_t)rs);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_990.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_990.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,1792,"archive_set_error(&(a->archive), 0,
			    ""Truncated xar archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_991.cpp,"{
			archive_set_error(&(a->archive), 0,
			    ""Truncated xar archive"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_991.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_991.cpp,29
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2053,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_992.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_992.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_992.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2057,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate pathname '%s' to UTF-8"",
		    archive_entry_pathname(file->entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_993.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate pathname '%s' to UTF-8"",
		    archive_entry_pathname(file->entry));
		r = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_993.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_993.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2157,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_994.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_994.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_994.cpp,124
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2161,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate symlink '%s' to UTF-8"",
			    archive_entry_symlink(file->entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_995.cpp,"{
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate symlink '%s' to UTF-8"",
			    archive_entry_symlink(file->entry));
			r = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_995.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_995.cpp,128
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2265,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""A name buffer is too small"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_996.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""A name buffer is too small"");
			file_free(file);
			*filepp = NULL;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_996.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_996.cpp,47
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2280,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""`%s' is not directory, we cannot insert `%s' "",
			    archive_entry_pathname(np->entry),
			    archive_entry_pathname(file->entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_997.cpp,"{
			/* NOT Directory! */
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""`%s' is not directory, we cannot insert `%s' "",
			    archive_entry_pathname(np->entry),
			    archive_entry_pathname(file->entry));
			file_free(file);
			*filepp = NULL;
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_997.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_997.cpp,62
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2311,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_998.cpp,"{
				archive_string_free(&as);
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory"");
				file_free(file);
				*filepp = NULL;
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_998.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_998.cpp,93
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2330,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""A name buffer is too small"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_999.cpp,"{
				archive_string_free(&as);
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""A name buffer is too small"");
				file_free(file);
				*filepp = NULL;
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_999.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_999.cpp,112
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2375,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Found duplicate entries `%s' and its file type is ""
		    ""different"",
		    archive_entry_pathname(np->entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1000.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Found duplicate entries `%s' and its file type is ""
		    ""different"",
		    archive_entry_pathname(np->entry));
		file_free(file);
		*filepp = NULL;
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1000.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1000.cpp,157
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2440,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1001.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1001.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1001.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2599,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
	    ""%s compression not supported on this platform"", name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1002.cpp,"{

	archive_set_error(a, ARCHIVE_ERRNO_MISC,
	    ""%s compression not supported on this platform"", name);
	lastrm->valid = 0;
	lastrm->real_stream = NULL;
	return (ARCHIVE_FAILED);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1002.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1002.cpp,5
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2617,"archive_set_error(a, ENOMEM,
		    ""Can't allocate memory for gzip stream"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1003.cpp,"{
		archive_set_error(a, ENOMEM,
		    ""Can't allocate memory for gzip stream"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1003.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1003.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2635,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1004.cpp,"{
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1004.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1004.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2677,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""GZip compression failed:""
		    "" deflate() call returned status %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1005.cpp,"{
	case Z_OK:
		return (ARCHIVE_OK);
	case Z_STREAM_END:
		return (ARCHIVE_EOF);
	default:
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""GZip compression failed:""
		    "" deflate() call returned status %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1005.cpp,"[0, 0, 0, 0, 0, 0, 3, 0, 2, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1005.cpp,31
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2696,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1006.cpp,"{
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1006.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1006.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2714,"archive_set_error(a, ENOMEM,
		    ""Can't allocate memory for bzip2 stream"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1007.cpp,"{
		archive_set_error(a, ENOMEM,
		    ""Can't allocate memory for bzip2 stream"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1007.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1007.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2732,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1008.cpp,"{
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1008.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1008.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2783,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Bzip2 compression failed:""
		    "" BZ2_bzCompress() call returned status %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1009.cpp,"{
	case BZ_RUN_OK:     /* Non-finishing */
	case BZ_FINISH_OK:  /* Finishing: There's more work to do */
		return (ARCHIVE_OK);
	case BZ_STREAM_END: /* Finishing: all done */
		/* Only occurs in finishing case */
		return (ARCHIVE_EOF);
	default:
		/* Any other return value indicates an error */
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Bzip2 compression failed:""
		    "" BZ2_bzCompress() call returned status %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1009.cpp,"[0, 0, 0, 0, 0, 0, 3, 0, 3, 1, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1009.cpp,40
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2802,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1010.cpp,"{
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1010.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1010.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2836,"archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1011.cpp,"{
		lastrm->real_stream = NULL;
		archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1011.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1011.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2842,"archive_set_error(a, ENOMEM,
		    ""Can't allocate memory for lzma stream"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1012.cpp,"{
		archive_set_error(a, ENOMEM,
		    ""Can't allocate memory for lzma stream"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1012.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1012.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2859,"archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1013.cpp,"{
	case LZMA_OK:
		lastrm->real_stream = strm;
		lastrm->valid = 1;
		lastrm->code = compression_code_lzma;
		lastrm->end = compression_end_lzma;
		r = ARCHIVE_OK;
		break;
	case LZMA_MEM_ERROR:
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");
		r =  ARCHIVE_FATAL;
		break;
        default:
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""It's a bug in liblzma"");
		r =  ARCHIVE_FATAL;
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1013.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1013.cpp,36
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2867,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""It's a bug in liblzma"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1014.cpp,"{
	case LZMA_OK:
		lastrm->real_stream = strm;
		lastrm->valid = 1;
		lastrm->code = compression_code_lzma;
		lastrm->end = compression_end_lzma;
		r = ARCHIVE_OK;
		break;
	case LZMA_MEM_ERROR:
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");
		r =  ARCHIVE_FATAL;
		break;
        default:
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""It's a bug in liblzma"");
		r =  ARCHIVE_FATAL;
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1014.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1014.cpp,44
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2895,"archive_set_error(a, ENOMEM,
		    ""Can't allocate memory for xz stream"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1015.cpp,"{
		archive_set_error(a, ENOMEM,
		    ""Can't allocate memory for xz stream"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1015.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1015.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2905,"archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1016.cpp,"{
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1016.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1016.cpp,29
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2936,"archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1017.cpp,"{
	case LZMA_OK:
		lastrm->real_stream = strm;
		lastrm->valid = 1;
		lastrm->code = compression_code_lzma;
		lastrm->end = compression_end_lzma;
		r = ARCHIVE_OK;
		break;
	case LZMA_MEM_ERROR:
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");
		r =  ARCHIVE_FATAL;
		break;
        default:
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""It's a bug in liblzma"");
		r =  ARCHIVE_FATAL;
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1017.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1017.cpp,60
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2944,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""It's a bug in liblzma"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1018.cpp,"{
	case LZMA_OK:
		lastrm->real_stream = strm;
		lastrm->valid = 1;
		lastrm->code = compression_code_lzma;
		lastrm->end = compression_end_lzma;
		r = ARCHIVE_OK;
		break;
	case LZMA_MEM_ERROR:
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""Cannot allocate memory"");
		r =  ARCHIVE_FATAL;
		break;
        default:
		free(strm);
		lastrm->real_stream = NULL;
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""It's a bug in liblzma"");
		r =  ARCHIVE_FATAL;
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1018.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1018.cpp,68
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2983,"archive_set_error(a, ENOMEM,
		    ""lzma compression error:""
		    "" %ju MiB would have been needed"",
		    (uintmax_t)((lzma_memusage(strm) + 1024 * 1024 -1)
			/ (1024 * 1024)));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1019.cpp,"{
	case LZMA_OK:
		/* Non-finishing case */
		return (ARCHIVE_OK);
	case LZMA_STREAM_END:
		/* This return can only occur in finishing case. */
		return (ARCHIVE_EOF);
	case LZMA_MEMLIMIT_ERROR:
		archive_set_error(a, ENOMEM,
		    ""lzma compression error:""
		    "" %ju MiB would have been needed"",
		    (uintmax_t)((lzma_memusage(strm) + 1024 * 1024 -1)
			/ (1024 * 1024)));
		return (ARCHIVE_FATAL);
	default:
		/* Any other return value indicates an error */
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""lzma compression failed:""
		    "" lzma_code() call returned status %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1019.cpp,"[0, 0, 0, 0, 0, 0, 4, 0, 3, 1, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1019.cpp,30
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,2991,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""lzma compression failed:""
		    "" lzma_code() call returned status %d"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1020.cpp,"{
	case LZMA_OK:
		/* Non-finishing case */
		return (ARCHIVE_OK);
	case LZMA_STREAM_END:
		/* This return can only occur in finishing case. */
		return (ARCHIVE_EOF);
	case LZMA_MEMLIMIT_ERROR:
		archive_set_error(a, ENOMEM,
		    ""lzma compression error:""
		    "" %ju MiB would have been needed"",
		    (uintmax_t)((lzma_memusage(strm) + 1024 * 1024 -1)
			/ (1024 * 1024)));
		return (ARCHIVE_FATAL);
	default:
		/* Any other return value indicates an error */
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""lzma compression failed:""
		    "" lzma_code() call returned status %d"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1020.cpp,"[0, 0, 0, 0, 0, 0, 4, 0, 3, 1, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1020.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.cpp,3117,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for xattr"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1021.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for xattr"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1021.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1021.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.cpp,128,"archive_set_error(_a, ENOMEM,
	    ""Can't allocate memory for filter program"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1022.cpp,"{
	struct archive_write_filter *f = __archive_write_allocate_filter(_a);
	struct private_data *data;
	static const char *prefix = ""Program: "";

	archive_check_magic(_a, ARCHIVE_WRITE_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_write_add_filter_program"");

	f->data = calloc(1, sizeof(*data));
	if (f->data == NULL)
		goto memerr;
	data = (struct private_data *)f->data;

	data->cmd = strdup(cmd);
	if (data->cmd == NULL)
		goto memerr;

	data->pdata = __archive_write_program_allocate(cmd);
	if (data->pdata == NULL)
		goto memerr;

	/* Make up a description string. */
	if (archive_string_ensure(&data->description,
	    strlen(prefix) + strlen(cmd) + 1) == NULL)
		goto memerr;
	archive_strcpy(&data->description, prefix);
	archive_strcat(&data->description, cmd);

	f->name = data->description.s;
	f->code = ARCHIVE_FILTER_PROGRAM;
	f->open = archive_compressor_program_open;
	f->write = archive_compressor_program_write;
	f->close = archive_compressor_program_close;
	f->free = archive_compressor_program_free;
	return (ARCHIVE_OK);
memerr:
	archive_compressor_program_free(f);
	archive_set_error(_a, ENOMEM,
	    ""Can't allocate memory for filter program"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1022.cpp,"[4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 1, 4, 0, 2, 106, 0, 0, 3, 3, 0, 0, 2, 5, 0, 0, 0, 0, 3, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 45, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 4, 0, 0, 13, 0, 0, 15, 0, 22, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1022.cpp,39
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.cpp,226,"archive_set_error(f->archive, ENOMEM,
			    ""Can't allocate compression buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1023.cpp,"{
			archive_set_error(f->archive, ENOMEM,
			    ""Can't allocate compression buffer"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1023.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1023.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.cpp,235,"archive_set_error(f->archive, EINVAL,
		    ""Can't launch external program: %s"", cmd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1024.cpp,"{
		archive_set_error(f->archive, EINVAL,
		    ""Can't launch external program: %s"", cmd);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1024.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1024.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.cpp,246,"archive_set_error(f->archive, EINVAL,
		    ""Can't launch external program: %s"", cmd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1025.cpp,"{
		close(data->child_stdin);
		data->child_stdin = -1;
		close(data->child_stdout);
		data->child_stdout = -1;
		archive_set_error(f->archive, EINVAL,
		    ""Can't launch external program: %s"", cmd);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1025.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1025.cpp,37
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.cpp,338,"archive_set_error(f->archive, EIO,
			    ""Can't write to program: %s"", data->program_name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1026.cpp,"{
			archive_set_error(f->archive, EIO,
			    ""Can't write to program: %s"", data->program_name);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1026.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1026.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.cpp,377,"archive_set_error(f->archive, errno,
			    ""Error reading from program: %s"", data->program_name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1027.cpp,"{
			archive_set_error(f->archive, errno,
			    ""Error reading from program: %s"", data->program_name);
			ret = ARCHIVE_FATAL;
			goto cleanup;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1027.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1027.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.cpp,407,"archive_set_error(f->archive, EIO,
		    ""Error closing program: %s"", data->program_name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1028.cpp,"{
		archive_set_error(f->archive, EIO,
		    ""Error closing program: %s"", data->program_name);
		ret = ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1028.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1028.cpp,56
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_memory.cpp,74,"archive_set_error(a, ENOMEM, ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1029.cpp,"{
		archive_set_error(a, ENOMEM, ""No memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1029.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1029.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_check_magic.cpp,144,"errmsg(""PROGRAMMER ERROR: Function "");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1030.cpp,"{
		errmsg(""PROGRAMMER ERROR: Function "");
		errmsg(function);
		errmsg("" invoked with invalid archive handle.\n"");
		diediedie();
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1030.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1030.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_check_magic.cpp,145,errmsg(function);,second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1031.cpp,"{
		errmsg(""PROGRAMMER ERROR: Function "");
		errmsg(function);
		errmsg("" invoked with invalid archive handle.\n"");
		diediedie();
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1031.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1031.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_check_magic.cpp,146,"errmsg("" invoked with invalid archive handle.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1032.cpp,"{
		errmsg(""PROGRAMMER ERROR: Function "");
		errmsg(function);
		errmsg("" invoked with invalid archive handle.\n"");
		diediedie();
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1032.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1032.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_check_magic.cpp,151,"archive_set_error(a, -1,
		    ""PROGRAMMER ERROR: Function '%s' invoked""
		    "" on '%s' archive object, which is not supported."",
		    function,
		    handle_type);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1033.cpp,"{
		archive_set_error(a, -1,
		    ""PROGRAMMER ERROR: Function '%s' invoked""
		    "" on '%s' archive object, which is not supported."",
		    function,
		    handle_type);
		a->state = ARCHIVE_STATE_FATAL;
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1033.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1033.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_check_magic.cpp,163,"archive_set_error(a, -1,
			    ""INTERNAL ERROR: Function '%s' invoked with""
			    "" archive structure in state '%s',""
			    "" should be in state '%s'"",
			    function,
			    write_all_states(states1, a->state),
			    write_all_states(states2, state));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1034.cpp,"archive_set_error(a, -1,
			    ""INTERNAL ERROR: Function '%s' invoked with""
			    "" archive structure in state '%s',""
			    "" should be in state '%s'"",
			    function,
			    write_all_states(states1, a->state),
			    write_all_states(states2, state))",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1034.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1034.cpp,35
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,261,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
			""Invalid ACL type"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1035.cpp,"{
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
			""Invalid ACL type"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1035.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1035.cpp,41
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,270,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
			""Invalid ACL type"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1036.cpp,"{
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
			""Invalid ACL type"");
		acl_free(acl);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1036.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1036.cpp,50
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,280,"archive_set_error(a, errno,
		    ""Can't allocate memory for acl buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1037.cpp,"{
		archive_set_error(a, errno,
		    ""Can't allocate memory for acl buffer"");
		acl_free(acl);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1037.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1037.cpp,60
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,288,"archive_set_error(a, errno,
		    ""Failed to initialize ACL working storage"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1038.cpp,"{
		archive_set_error(a, errno,
		    ""Failed to initialize ACL working storage"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1038.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1038.cpp,68
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,325,"archive_set_error(a, errno,
			    ""Failed to create a new ACL entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1039.cpp,"{
			archive_set_error(a, errno,
			    ""Failed to create a new ACL entry"");
			ret = ARCHIVE_FAILED;
			goto exit_free;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1039.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1039.cpp,105
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,435,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""Unknown ACL tag"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1040.cpp,"{
#if HAVE_SUN_ACL
		case ARCHIVE_ENTRY_ACL_USER:
			ae_uid = archive_write_disk_uid(a, ae_name, ae_id);
			if (acl->acl_type == ACE_T)
				ace->a_who = ae_uid;
			else {
				aclent->a_id = ae_uid;
				aclent->a_type |= USER;
			}
			break;
		case ARCHIVE_ENTRY_ACL_GROUP:
			ae_gid = archive_write_disk_gid(a, ae_name, ae_id);
			if (acl->acl_type == ACE_T) {
				ace->a_who = ae_gid;
				ace->a_flags |= ACE_IDENTIFIER_GROUP;
			} else {
				aclent->a_id = ae_gid;
				aclent->a_type |= GROUP;
			}
			break;
		case ARCHIVE_ENTRY_ACL_USER_OBJ:
			if (acl->acl_type == ACE_T)
				ace->a_flags |= ACE_OWNER;
			else
				aclent->a_type |= USER_OBJ;
			break;
		case ARCHIVE_ENTRY_ACL_GROUP_OBJ:
			if (acl->acl_type == ACE_T) {
				ace->a_flags |= ACE_GROUP;
				ace->a_flags |= ACE_IDENTIFIER_GROUP;
			} else
				aclent->a_type |= GROUP_OBJ;
			break;
		case ARCHIVE_ENTRY_ACL_MASK:
			aclent->a_type |= CLASS_OBJ;
			break;
		case ARCHIVE_ENTRY_ACL_OTHER:
			aclent->a_type |= OTHER_OBJ;
			break;
		case ARCHIVE_ENTRY_ACL_EVERYONE:
			ace->a_flags |= ACE_EVERYONE;
			break;
#else	/* !HAVE_SUN_ACL */
		case ARCHIVE_ENTRY_ACL_USER:
			ae_uid = archive_write_disk_uid(a, ae_name, ae_id);
#if !HAVE_DARWIN_ACL	/* FreeBSD, Linux */
			acl_set_tag_type(acl_entry, ACL_USER);
			acl_set_qualifier(acl_entry, &ae_uid);
#else	/* MacOS */
			if (mbr_identifier_to_uuid(ID_TYPE_UID, &ae_uid,
			    sizeof(uid_t), ae_uuid) != 0)
				continue;
			if (acl_set_qualifier(acl_entry, &ae_uuid) != 0)
				continue;
#endif	/* HAVE_DARWIN_ACL */
			break;
		case ARCHIVE_ENTRY_ACL_GROUP:
			ae_gid = archive_write_disk_gid(a, ae_name, ae_id);
#if !HAVE_DARWIN_ACL	/* FreeBSD, Linux */
			acl_set_tag_type(acl_entry, ACL_GROUP);
			acl_set_qualifier(acl_entry, &ae_gid);
#else	/* MacOS */
			if (mbr_identifier_to_uuid(ID_TYPE_GID, &ae_gid,
			    sizeof(gid_t), ae_uuid) != 0)
				continue;
			if (acl_set_qualifier(acl_entry, &ae_uuid) != 0)
				continue;
#endif	/* HAVE_DARWIN_ACL */
			break;
#if !HAVE_DARWIN_ACL	/* FreeBSD, Linux */
		case ARCHIVE_ENTRY_ACL_USER_OBJ:
			acl_set_tag_type(acl_entry, ACL_USER_OBJ);
			break;
		case ARCHIVE_ENTRY_ACL_GROUP_OBJ:
			acl_set_tag_type(acl_entry, ACL_GROUP_OBJ);
			break;
		case ARCHIVE_ENTRY_ACL_MASK:
			acl_set_tag_type(acl_entry, ACL_MASK);
			break;
		case ARCHIVE_ENTRY_ACL_OTHER:
			acl_set_tag_type(acl_entry, ACL_OTHER);
			break;
#if HAVE_ACL_TYPE_NFS4	/* FreeBSD only */
		case ARCHIVE_ENTRY_ACL_EVERYONE:
			acl_set_tag_type(acl_entry, ACL_EVERYONE);
			break;
#endif
#endif	/* !HAVE_DARWIN_ACL */
#endif	/* !HAVE_SUN_ACL */
		default:
			archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""Unknown ACL tag"");
			ret = ARCHIVE_FAILED;
			goto exit_free;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1040.cpp,"[13, 0, 0, 0, 14, 4, 0, 0, 14, 1, 13, 0, 1, 0, 0, 164, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 104, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 7, 0, 20, 0, 0, 30, 0, 47, 13, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1040.cpp,215
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,498,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""Unknown ACL entry type"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1041.cpp,"{
#if HAVE_SUN_ACL
		case ARCHIVE_ENTRY_ACL_TYPE_ALLOW:
			if (ace != NULL)
				ace->a_type = ACE_ACCESS_ALLOWED_ACE_TYPE;
			else
				r = -1;
			break;
		case ARCHIVE_ENTRY_ACL_TYPE_DENY:
			if (ace != NULL)
				ace->a_type = ACE_ACCESS_DENIED_ACE_TYPE;
			else
				r = -1;
			break;
		case ARCHIVE_ENTRY_ACL_TYPE_AUDIT:
			if (ace != NULL)
				ace->a_type = ACE_SYSTEM_AUDIT_ACE_TYPE;
			else
				r = -1;
			break;
		case ARCHIVE_ENTRY_ACL_TYPE_ALARM:
			if (ace != NULL)
				ace->a_type = ACE_SYSTEM_ALARM_ACE_TYPE;
			else
				r = -1;
			break;
		case ARCHIVE_ENTRY_ACL_TYPE_ACCESS:
			if (aclent == NULL)
				r = -1;
			break;
		case ARCHIVE_ENTRY_ACL_TYPE_DEFAULT:
			if (aclent != NULL)
				aclent->a_type |= ACL_DEFAULT;
			else
				r = -1;
			break;
#else	/* !HAVE_SUN_ACL */
		case ARCHIVE_ENTRY_ACL_TYPE_ALLOW:
			r = acl_set_entry_type_np(acl_entry, ACL_ENTRY_TYPE_ALLOW);
			break;
		case ARCHIVE_ENTRY_ACL_TYPE_DENY:
			r = acl_set_entry_type_np(acl_entry, ACL_ENTRY_TYPE_DENY);
			break;
		case ARCHIVE_ENTRY_ACL_TYPE_AUDIT:
			r = acl_set_entry_type_np(acl_entry, ACL_ENTRY_TYPE_AUDIT);
			break;
		case ARCHIVE_ENTRY_ACL_TYPE_ALARM:
			r = acl_set_entry_type_np(acl_entry, ACL_ENTRY_TYPE_ALARM);
			break;
		case ARCHIVE_ENTRY_ACL_TYPE_ACCESS:
		case ARCHIVE_ENTRY_ACL_TYPE_DEFAULT:
			// These don't translate directly into the system ACL.
			break;
#endif	/* !HAVE_SUN_ACL */
		default:
			archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""Unknown ACL entry type"");
			ret = ARCHIVE_FAILED;
			goto exit_free;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1041.cpp,"[7, 0, 0, 0, 11, 0, 0, 0, 12, 1, 12, 0, 1, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 5, 0, 0, 17, 0, 11, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1041.cpp,278
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,508,"archive_set_error(a, errno,
			    ""Failed to set ACL entry type"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1042.cpp,"{
#if HAVE_SUN_ACL
			errno = EINVAL;
#endif
			archive_set_error(a, errno,
			    ""Failed to set ACL entry type"");
			ret = ARCHIVE_FAILED;
			goto exit_free;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1042.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1042.cpp,288
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,526,"archive_set_error(a, errno,
			    ""Failed to get ACL permission set"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1043.cpp,"{
			archive_set_error(a, errno,
			    ""Failed to get ACL permission set"");
			ret = ARCHIVE_FAILED;
			goto exit_free;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1043.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1043.cpp,306
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,532,"archive_set_error(a, errno,
			    ""Failed to clear ACL permissions"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1044.cpp,"{
			archive_set_error(a, errno,
			    ""Failed to clear ACL permissions"");
			ret = ARCHIVE_FAILED;
			goto exit_free;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1044.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1044.cpp,312
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,546,"archive_set_error(a, errno,
					    ""Failed to add ACL permission"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1045.cpp,"{
					archive_set_error(a, errno,
					    ""Failed to add ACL permission"");
					ret = ARCHIVE_FAILED;
					goto exit_free;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1045.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1045.cpp,326
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,569,"archive_set_error(a, errno,
				    ""Failed to get flagset from an NFSv4 ACL entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1046.cpp,"{
				archive_set_error(a, errno,
				    ""Failed to get flagset from an NFSv4 ACL entry"");
				ret = ARCHIVE_FAILED;
				goto exit_free;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1046.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1046.cpp,349
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,575,"archive_set_error(a, errno,
				    ""Failed to clear flags from an NFSv4 ACL flagset"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1047.cpp,"{
				archive_set_error(a, errno,
				    ""Failed to clear flags from an NFSv4 ACL flagset"");
				ret = ARCHIVE_FAILED;
				goto exit_free;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1047.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1047.cpp,355
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,589,"archive_set_error(a, errno,
						    ""Failed to add flag to NFSv4 ACL flagset"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1048.cpp,"{
						archive_set_error(a, errno,
						    ""Failed to add flag to NFSv4 ACL flagset"");
						ret = ARCHIVE_FAILED;
						goto exit_free;
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1048.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1048.cpp,369
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,625,"archive_set_error(a, errno,
				    ""Failed to set %s acl on fd"", tname);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1049.cpp,"{
				archive_set_error(a, errno,
				    ""Failed to set %s acl on fd"", tname);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1049.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1049.cpp,405
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_acl.cpp,644,"archive_set_error(a, errno, ""Failed to set %s acl"",
			    tname);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1050.cpp,"{
			archive_set_error(a, errno, ""Failed to set %s acl"",
			    tname);
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1050.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1050.cpp,424
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lz4.cpp,106,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1051.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1051.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1051.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lz4.cpp,142,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1052.cpp,"{
		free(data);
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1052.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1052.cpp,48
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lz4.cpp,146,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Using external lz4 program"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1053.cpp,"{
	struct archive_write *a = (struct archive_write *)_a;
	struct archive_write_filter *f = __archive_write_allocate_filter(_a);
	struct private_data *data;

	archive_check_magic(&a->archive, ARCHIVE_WRITE_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_write_add_filter_lz4"");

	data = calloc(1, sizeof(*data));
	if (data == NULL) {
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}

	/*
	 * Setup default settings.
	 */
	data->compression_level = 1;
	data->version_number = 0x01;
	data->block_independence = 1;
	data->block_checksum = 0;
	data->stream_size = 0;
	data->stream_checksum = 1;
	data->preset_dictionary = 0;
	data->block_maximum_size = 7;

	/*
	 * Setup a filter setting.
	 */
	f->data = data;
	f->options = &archive_filter_lz4_options;
	f->close = &archive_filter_lz4_close;
	f->free = &archive_filter_lz4_free;
	f->open = &archive_filter_lz4_open;
	f->code = ARCHIVE_FILTER_LZ4;
	f->name = ""lz4"";
#if defined(HAVE_LIBLZ4) && LZ4_VERSION_MAJOR >= 1 && LZ4_VERSION_MINOR >= 2
	return (ARCHIVE_OK);
#else
	/*
	 * We don't have lz4 library, and execute external lz4 program
	 * instead.
	 */
	data->pdata = __archive_write_program_allocate(""lz4"");
	if (data->pdata == NULL) {
		free(data);
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}
	data->compression_level = 0;
	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Using external lz4 program"");
	return (ARCHIVE_WARN);
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1053.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 0, 114, 0, 0, 3, 3, 0, 0, 2, 18, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 52, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 2, 1, 0, 10, 0, 0, 23, 0, 20, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1053.cpp,52
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lz4.cpp,170,"archive_set_error(f->archive, ARCHIVE_ERRNO_PROGRAMMER,
				""High compression not included in this build"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1054.cpp,"{
			archive_set_error(f->archive, ARCHIVE_ERRNO_PROGRAMMER,
				""High compression not included in this build"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1054.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1054.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lz4.cpp,276,"archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for compression buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1055.cpp,"{
		archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for compression buffer"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1055.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1055.cpp,55
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lz4.cpp,561,"archive_set_error(f->archive, ENOMEM,
				    ""Can't allocate data for compression""
				    "" buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1056.cpp,"{
				archive_set_error(f->archive, ENOMEM,
				    ""Can't allocate data for compression""
				    "" buffer"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1056.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1056.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lz4.cpp,585,"archive_set_error(f->archive, ENOMEM,
				    ""Can't allocate data for compression""
				    "" buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1057.cpp,"{
				archive_set_error(f->archive, ENOMEM,
				    ""Can't allocate data for compression""
				    "" buffer"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1057.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1057.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_raw.cpp,62,"archive_set_error(&a->archive, ENOMEM, ""Can't allocate raw data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1058.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Can't allocate raw data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1058.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1058.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_raw.cpp,87,"archive_set_error(&a->archive, ERANGE,
		    ""Raw format only supports filetype AE_IFREG"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1059.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""Raw format only supports filetype AE_IFREG"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1059.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1059.cpp,6
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_raw.cpp,94,"archive_set_error(&a->archive, ERANGE,
		    ""Raw format only supports one entry per archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1060.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""Raw format only supports one entry per archive"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1060.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1060.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_set_format.cpp,85,"archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
          ""Invalid format code specified"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1061.cpp,"{
    case ARCHIVE_FORMAT_7ZIP:
      strcpy(str, ""7zip"");
      break;
    case ARCHIVE_FORMAT_AR:
      strcpy(str, ""ar"");
      break;
    case ARCHIVE_FORMAT_CAB:
      strcpy(str, ""cab"");
      break;
    case ARCHIVE_FORMAT_CPIO:
      strcpy(str, ""cpio"");
      break;
    case ARCHIVE_FORMAT_ISO9660:
      strcpy(str, ""iso9660"");
      break;
    case ARCHIVE_FORMAT_LHA:
      strcpy(str, ""lha"");
      break;
    case ARCHIVE_FORMAT_MTREE:
      strcpy(str, ""mtree"");
      break;
    case ARCHIVE_FORMAT_RAR:
      strcpy(str, ""rar"");
      break;
    case ARCHIVE_FORMAT_TAR:
      strcpy(str, ""tar"");
      break;
    case ARCHIVE_FORMAT_XAR:
      strcpy(str, ""xar"");
      break;
    case ARCHIVE_FORMAT_ZIP:
      strcpy(str, ""zip"");
      break;
    default:
      archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
          ""Invalid format code specified"");
      return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1061.cpp,"[0, 0, 0, 0, 11, 0, 1, 0, 11, 1, 1, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 12, 0, 25, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1061.cpp,49
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_set_format.cpp,98,"archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
        ""Internal error: Unable to set format"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1062.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
        ""Internal error: Unable to set format"");
    r1 = (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1062.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1062.cpp,62
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_filename.cpp,102,"archive_set_error(a, ENOMEM, ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1063.cpp,"{
		archive_set_error(a, ENOMEM, ""No memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1063.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1063.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_filename.cpp,111,"archive_set_error(a, ENOMEM, ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1064.cpp,"{
			archive_set_error(a, ENOMEM, ""No memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1064.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1064.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_filename.cpp,115,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""Can't convert '%s' to WCS"",
			    (const char *)filename);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1065.cpp,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""Can't convert '%s' to WCS"",
			    (const char *)filename)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1065.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1065.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_filename.cpp,119,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""Can't convert '%S' to MBS"",
			    (const wchar_t *)filename);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1066.cpp,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""Can't convert '%S' to MBS"",
			    (const wchar_t *)filename)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1066.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1066.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_filename.cpp,151,"archive_set_error(a, errno, ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1067.cpp,"archive_set_error(a, errno, ""No memory"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1067.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1067.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_filename.cpp,154,"archive_set_error(a, errno,
			    ""Can't convert '%s' to WCS"", mbs);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1068.cpp,"{
			archive_mstring_get_mbs(a, &mine->filename, &mbs);
			archive_set_error(a, errno,
			    ""Can't convert '%s' to WCS"", mbs);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1068.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1068.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_filename.cpp,168,"archive_set_error(a, errno, ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1069.cpp,"archive_set_error(a, errno, ""No memory"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1069.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1069.cpp,39
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_filename.cpp,171,"archive_set_error(a, errno,
			    ""Can't convert '%S' to MBS"", wcs);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1070.cpp,"{
			archive_mstring_get_wcs(a, &mine->filename, &wcs);
			archive_set_error(a, errno,
			    ""Can't convert '%S' to MBS"", wcs);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1070.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1070.cpp,42
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_filename.cpp,181,"archive_set_error(a, errno, ""Failed to open '%s'"", mbs);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1071.cpp,"archive_set_error(a, errno, ""Failed to open '%s'"", mbs)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1071.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1071.cpp,52
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_filename.cpp,183,"archive_set_error(a, errno, ""Failed to open '%S'"", wcs);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1072.cpp,"archive_set_error(a, errno, ""Failed to open '%S'"", wcs)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1072.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1072.cpp,54
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_filename.cpp,189,"archive_set_error(a, errno, ""Couldn't stat '%s'"", mbs);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1073.cpp,"archive_set_error(a, errno, ""Couldn't stat '%s'"", mbs)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1073.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1073.cpp,60
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_filename.cpp,191,"archive_set_error(a, errno, ""Couldn't stat '%S'"", wcs);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1074.cpp,"archive_set_error(a, errno, ""Couldn't stat '%S'"", wcs)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1074.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1074.cpp,62
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_open_filename.cpp,232,"archive_set_error(a, errno, ""Write error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1075.cpp,"{
			if (errno == EINTR)
				continue;
			archive_set_error(a, errno, ""Write error"");
			return (-1);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1075.cpp,"[1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1075.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.cpp,376,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for uudecode"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1076.cpp,"{
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for uudecode"");
		free(uudecode);
		free(out_buff);
		free(in_buff);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1076.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1076.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.cpp,418,"archive_set_error(&self->archive->archive,
			    ENOMEM,
    			    ""Can't allocate data for uudecode"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1077.cpp,"{
			free(ptr);
			archive_set_error(&self->archive->archive,
			    ENOMEM,
    			    ""Can't allocate data for uudecode"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1077.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1077.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.cpp,490,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1078.cpp,"{
			/* Non-ascii character is found. */
			if (uudecode->state == ST_FIND_HEAD &&
			    (uudecode->total > 0 || total > 0)) {
				uudecode->state = ST_IGNORE;
				used = avail_in;
				goto finish;
			}
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1078.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 1, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1078.cpp,56
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.cpp,499,"archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Missing format data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1079.cpp,"{
				/* There is nothing more to read, fail */
				archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Missing format data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1079.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1079.cpp,65
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.cpp,529,"archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Invalid format data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1080.cpp,"{
				archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Invalid format data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1080.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1080.cpp,95
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.cpp,555,"archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1081.cpp,"{
				archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1081.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1081.cpp,121
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.cpp,564,"archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1082.cpp,"{
				archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1082.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1082.cpp,130
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.cpp,600,"archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1083.cpp,"{
				archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1083.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1083.cpp,166
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.cpp,610,"archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1084.cpp,"{
				archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1084.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1084.cpp,176
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.cpp,656,"archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1085.cpp,"{
				archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Insufficient compressed data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1085.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1085.cpp,222
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,207,"archive_set_error(&(a->archive), ENOMEM, ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1086.cpp,"{
	archive_set_error(&(a->archive), ENOMEM, ""No memory"");
	a->archive.state = ARCHIVE_STATE_FATAL;
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1086.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1086.cpp,3
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,277,"archive_set_error(&(a->archive), EINVAL, ""entry is NULL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1087.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""entry is NULL"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1087.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1087.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,318,"archive_set_error(&(a->archive), EINVAL, ""pattern is empty"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1088.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""pattern is empty"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1088.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1088.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,337,"archive_set_error(&(a->archive), EINVAL, ""pattern is empty"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1089.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""pattern is empty"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1089.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1089.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,384,"archive_set_error(&(a->archive), EINVAL, ""pattern is empty"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1090.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""pattern is empty"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1090.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1090.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,403,"archive_set_error(&(a->archive), EINVAL, ""pattern is empty"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1091.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""pattern is empty"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1091.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1091.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,457,"archive_set_error(&(a->archive), EINVAL, ""entry is NULL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1092.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""entry is NULL"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1092.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1092.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,578,"archive_set_error(&(a->archive), ENOMEM, ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1093.cpp,"{
		archive_set_error(&(a->archive), ENOMEM, ""No memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1093.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1093.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,963,"archive_set_error(&(a->archive), EINVAL, ""entry is NULL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1094.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""entry is NULL"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1094.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1094.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,990,"archive_set_error(&(a->archive), EINVAL, ""entry is NULL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1095.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""entry is NULL"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1095.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1095.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1010,"archive_set_error(_a, EINVAL, ""Invalid time flag"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1096.cpp,"{
		archive_set_error(_a, EINVAL, ""Invalid time flag"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1096.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1096.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1014,"archive_set_error(_a, EINVAL, ""No time flag"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1097.cpp,"{
		archive_set_error(_a, EINVAL, ""No time flag"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1097.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1097.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1022,"archive_set_error(_a, EINVAL, ""Invalid comparison flag"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1098.cpp,"{
		archive_set_error(_a, EINVAL, ""Invalid comparison flag"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1098.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1098.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1027,"archive_set_error(_a, EINVAL, ""No comparison flag"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1099.cpp,"{
		archive_set_error(_a, EINVAL, ""No comparison flag"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1099.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1099.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1077,"archive_set_error(&(a->archive), EINVAL, ""date is empty"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1100.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""date is empty"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1100.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1100.cpp,6
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1082,"archive_set_error(&(a->archive), EINVAL, ""invalid date string"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1101.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""invalid date string"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1101.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1101.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1096,"archive_set_error(&(a->archive), EINVAL, ""date is empty"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1102.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""date is empty"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1102.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1102.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1105,"archive_set_error(&(a->archive), -1,
		    ""Failed to convert WCS to MBS"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1103.cpp,"{
		archive_string_free(&as);
		if (errno == ENOMEM)
			return (error_nomem(a));
		archive_set_error(&(a->archive), -1,
		    ""Failed to convert WCS to MBS"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1103.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1103.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1112,"archive_set_error(&(a->archive), EINVAL, ""invalid date string"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1104.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""invalid date string"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1104.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1104.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1162,"archive_set_error(&(a->archive), EINVAL, ""pathname is empty"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1105.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""pathname is empty"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1105.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1105.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1168,"archive_set_error(&(a->archive), errno,
		    ""Failed to FindFirstFileA"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1106.cpp,"{
		la_dosmaperr(GetLastError());
		archive_set_error(&(a->archive), errno,
		    ""Failed to FindFirstFileA"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1106.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1106.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1186,"archive_set_error(&(a->archive), EINVAL, ""pathname is empty"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1107.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""pathname is empty"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1107.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1107.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1192,"archive_set_error(&(a->archive), errno,
		    ""Failed to FindFirstFile"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1108.cpp,"{
		la_dosmaperr(GetLastError());
		archive_set_error(&(a->archive), errno,
		    ""Failed to FindFirstFile"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1108.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1108.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1231,"archive_set_error(&(a->archive), EINVAL, ""pathname is empty"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1109.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""pathname is empty"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1109.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1109.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1235,"archive_set_error(&(a->archive), errno, ""Failed to stat()"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1110.cpp,"{
		archive_set_error(&(a->archive), errno, ""Failed to stat()"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1110.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1110.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1249,"archive_set_error(&(a->archive), EINVAL, ""pathname is empty"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1111.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""pathname is empty"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1111.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1111.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1259,"archive_set_error(&(a->archive), -1,
		    ""Failed to convert WCS to MBS"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1112.cpp,"{
		archive_string_free(&as);
		if (errno == ENOMEM)
			return (error_nomem(a));
		archive_set_error(&(a->archive), -1,
		    ""Failed to convert WCS to MBS"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1112.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1112.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1377,"archive_set_error(&(a->archive), EINVAL, ""pathname is NULL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1113.cpp,"{
		free(f);
		archive_set_error(&(a->archive), EINVAL, ""pathname is NULL"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1113.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1113.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1387,"archive_set_error(&(a->archive), EINVAL, ""pathname is NULL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1114.cpp,"{
		free(f);
		archive_set_error(&(a->archive), EINVAL, ""pathname is NULL"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1114.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1114.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_match.cpp,1667,"archive_set_error(&(a->archive), EINVAL, ""entry is NULL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1115.cpp,"{
		archive_set_error(&(a->archive), EINVAL, ""entry is NULL"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1115.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1115.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,180,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal: template_header wrong size: %zu should be 512"",
		    sizeof(template_header));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1116.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal: template_header wrong size: %zu should be 512"",
		    sizeof(template_header));
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1116.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1116.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,188,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate ustar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1117.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate ustar data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1117.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1117.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,214,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: hdrcharset option needs a character-set name"",
			    a->format_name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1118.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: hdrcharset option needs a character-set name"",
			    a->format_name)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1118.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1118.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,258,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't record entry in tar file without pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1119.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't record entry in tar file without pathname"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1119.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1119.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,287,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate ustar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1120.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate ustar data"");
				archive_wstring_free(&ws);
				return(ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1120.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1120.cpp,53
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,315,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate ustar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1121.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate ustar data"");
				archive_string_free(&as);
				return(ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1121.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1121.cpp,81
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,341,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate ustar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1122.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate ustar data"");
		return(ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1122.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1122.cpp,107
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,412,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1123.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1123.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1123.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,416,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate pathname '%s' to %s"",
		    pp, archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1124.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate pathname '%s' to %s"",
		    pp, archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1124.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1124.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,436,"archive_set_error(&a->archive, ENAMETOOLONG,
			    ""Pathname too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1125.cpp,"{
			/* No separator. */
			archive_set_error(&a->archive, ENAMETOOLONG,
			    ""Pathname too long"");
			ret = ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1125.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1125.cpp,52
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,446,"archive_set_error(&a->archive, ENAMETOOLONG,
			    ""Pathname too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1126.cpp,"{
			/*
			 * The only feasible separator is a final '/';
			 * this would result in a non-empty prefix and
			 * an empty name, which POSIX doesn't
			 * explicitly forbid, but it just feels wrong.
			 */
			archive_set_error(&a->archive, ENAMETOOLONG,
			    ""Pathname too long"");
			ret = ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1126.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1126.cpp,62
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,451,"archive_set_error(&a->archive, ENAMETOOLONG,
			    ""Pathname too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1127.cpp,"{
			/* Prefix is too long. */
			archive_set_error(&a->archive, ENAMETOOLONG,
			    ""Pathname too long"");
			ret = ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1127.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1127.cpp,67
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,465,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1128.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1128.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1128.cpp,81
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,469,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate linkname '%s' to %s"",
		    p, archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1129.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate linkname '%s' to %s"",
		    p, archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1129.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1129.cpp,85
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,481,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1130.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1130.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1130.cpp,97
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,485,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate linkname '%s' to %s"",
			    p, archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1131.cpp,"{
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate linkname '%s' to %s"",
			    p, archive_string_conversion_charset_name(sconv));
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1131.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1131.cpp,101
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,494,"archive_set_error(&a->archive, ENAMETOOLONG,
			    ""Link contents too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1132.cpp,"{
			archive_set_error(&a->archive, ENAMETOOLONG,
			    ""Link contents too long"");
			ret = ARCHIVE_FAILED;
			copy_length = USTAR_linkname_size;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1132.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1132.cpp,110
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,505,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Uname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1133.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Uname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1133.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1133.cpp,121
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,509,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate uname '%s' to %s"",
		    p, archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1134.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Uname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate uname '%s' to %s"",
		    p, archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1134.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1134.cpp,125
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,517,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Username too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1135.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Username too long"");
			ret = ARCHIVE_FAILED;
			copy_length = USTAR_uname_size;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1135.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1135.cpp,133
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,528,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Gname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1136.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Gname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1136.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1136.cpp,144
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,532,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate gname '%s' to %s"",
		    p, archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1137.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Gname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate gname '%s' to %s"",
		    p, archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1137.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1137.cpp,148
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,540,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Group name too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1138.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Group name too long"");
			ret = ARCHIVE_FAILED;
			copy_length = USTAR_gname_size;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1138.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1138.cpp,156
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,550,"archive_set_error(&a->archive, ERANGE,
		    ""Numeric mode too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1139.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""Numeric mode too large"");
		ret = ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1139.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1139.cpp,166
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,557,"archive_set_error(&a->archive, ERANGE,
		    ""Numeric user ID too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1140.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""Numeric user ID too large"");
		ret = ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1140.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1140.cpp,173
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,564,"archive_set_error(&a->archive, ERANGE,
		    ""Numeric group ID too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1141.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""Numeric group ID too large"");
		ret = ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1141.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1141.cpp,180
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,571,"archive_set_error(&a->archive, ERANGE,
		    ""File size out of range"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1142.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""File size out of range"");
		ret = ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1142.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1142.cpp,187
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,578,"archive_set_error(&a->archive, ERANGE,
		    ""File modification time too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1143.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""File modification time too large"");
		ret = ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1143.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1143.cpp,194
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,588,"archive_set_error(&a->archive, ERANGE,
			    ""Major device number too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1144.cpp,"{
			archive_set_error(&a->archive, ERANGE,
			    ""Major device number too large"");
			ret = ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1144.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1144.cpp,204
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,596,"archive_set_error(&a->archive, ERANGE,
			    ""Minor device number too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1145.cpp,"{
			archive_set_error(&a->archive, ERANGE,
			    ""Minor device number too large"");
			ret = ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1145.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1145.cpp,212
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,615,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive socket"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1146.cpp,"{
		case AE_IFREG: h[USTAR_typeflag_offset] = '0' ; break;
		case AE_IFLNK: h[USTAR_typeflag_offset] = '2' ; break;
		case AE_IFCHR: h[USTAR_typeflag_offset] = '3' ; break;
		case AE_IFBLK: h[USTAR_typeflag_offset] = '4' ; break;
		case AE_IFDIR: h[USTAR_typeflag_offset] = '5' ; break;
		case AE_IFIFO: h[USTAR_typeflag_offset] = '6' ; break;
		case AE_IFSOCK:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive socket"");
			return (ARCHIVE_FAILED);
		default:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive this (mode=0%lo)"",
			    (unsigned long)archive_entry_mode(entry));
			ret = ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1146.cpp,"[0, 0, 0, 0, 6, 0, 1, 0, 7, 1, 1, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 3, 0, 0, 9, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1146.cpp,231
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.cpp,620,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive this (mode=0%lo)"",
			    (unsigned long)archive_entry_mode(entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1147.cpp,"{
		case AE_IFREG: h[USTAR_typeflag_offset] = '0' ; break;
		case AE_IFLNK: h[USTAR_typeflag_offset] = '2' ; break;
		case AE_IFCHR: h[USTAR_typeflag_offset] = '3' ; break;
		case AE_IFBLK: h[USTAR_typeflag_offset] = '4' ; break;
		case AE_IFDIR: h[USTAR_typeflag_offset] = '5' ; break;
		case AE_IFIFO: h[USTAR_typeflag_offset] = '6' ; break;
		case AE_IFSOCK:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive socket"");
			return (ARCHIVE_FAILED);
		default:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive this (mode=0%lo)"",
			    (unsigned long)archive_entry_mode(entry));
			ret = ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1147.cpp,"[0, 0, 0, 0, 6, 0, 1, 0, 7, 1, 1, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 3, 0, 0, 9, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1147.cpp,236
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,237,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Current client reader does not support seeking a device"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1148.cpp,"{
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Current client reader does not support seeking a device"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1148.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1148.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,392,"archive_set_error(&a->archive, ENOMEM,
				""No memory."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1149.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
				""No memory."");
			return ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1149.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1149.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,401,"archive_set_error(&a->archive, EINVAL,
			""Invalid index specified."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1150.cpp,"{
		archive_set_error(&a->archive, EINVAL,
			""Invalid index specified."");
		return ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1150.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1150.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,422,"archive_set_error(&a->archive, EINVAL,
			""Invalid index specified."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1151.cpp,"{
		archive_set_error(&a->archive, EINVAL,
			""Invalid index specified."");
		return ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1151.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1151.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,429,"archive_set_error(&a->archive, ENOMEM,
			""No memory."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1152.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
			""No memory."");
		return ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1152.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1152.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,471,"archive_set_error(&a->archive, EINVAL,
		    ""No reader function provided to archive_read_open"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1153.cpp,"{
		archive_set_error(&a->archive, EINVAL,
		    ""No reader function provided to archive_read_open"");
		a->archive.state = ARCHIVE_STATE_FATAL;
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1153.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1153.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,607,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Input requires too many filters for decoding"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1154.cpp,"{
	int number_bidders, i, bid, best_bid, number_filters;
	struct archive_read_filter_bidder *bidder, *best_bidder;
	struct archive_read_filter *filter;
	ssize_t avail;
	int r;

	for (number_filters = 0; number_filters < MAX_NUMBER_FILTERS; ++number_filters) {
		number_bidders = sizeof(a->bidders) / sizeof(a->bidders[0]);

		best_bid = 0;
		best_bidder = NULL;

		bidder = a->bidders;
		for (i = 0; i < number_bidders; i++, bidder++) {
			if (bidder->bid != NULL) {
				bid = (bidder->bid)(bidder, a->filter);
				if (bid > best_bid) {
					best_bid = bid;
					best_bidder = bidder;
				}
			}
		}

		/* If no bidder, we're done. */
		if (best_bidder == NULL) {
			/* Verify the filter by asking it for some data. */
			__archive_read_filter_ahead(a->filter, 1, &avail);
			if (avail < 0) {
				__archive_read_free_filters(a);
				return (ARCHIVE_FATAL);
			}
			a->archive.compression_name = a->filter->name;
			a->archive.compression_code = a->filter->code;
			return (ARCHIVE_OK);
		}

		filter
		    = (struct archive_read_filter *)calloc(1, sizeof(*filter));
		if (filter == NULL)
			return (ARCHIVE_FATAL);
		filter->bidder = best_bidder;
		filter->archive = a;
		filter->upstream = a->filter;
		a->filter = filter;
		r = (best_bidder->init)(a->filter);
		if (r != ARCHIVE_OK) {
			__archive_read_free_filters(a);
			return (ARCHIVE_FATAL);
		}
	}
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Input requires too many filters for decoding"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1154.cpp,"[6, 0, 2, 0, 0, 0, 5, 0, 0, 0, 9, 0, 0, 0, 0, 131, 0, 0, 5, 10, 0, 0, 2, 8, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 54, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 1, 0, 8, 6, 0, 0, 10, 0, 0, 19, 0, 16, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1154.cpp,53
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,635,"archive_set_error(&a->archive, EIO,
			    ""Premature end-of-file."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1155.cpp,"archive_set_error(&a->archive, EIO,
			    ""Premature end-of-file."")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1155.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1155.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,727,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""No formats registered"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1156.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""No formats registered"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1156.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1156.cpp,33
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,737,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unrecognized archive format"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1157.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unrecognized archive format"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1157.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1157.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,855,"archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Encountered out-of-order sparse blocks"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1158.cpp,"{
			archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Encountered out-of-order sparse blocks"");
			return (ARCHIVE_RETRY);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1158.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1158.cpp,33
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,952,"archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Internal error: ""
		    ""No format_seek_data_block function registered"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1159.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Internal error: ""
		    ""No format_seek_data_block function registered"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1159.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1159.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,978,"archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Internal error: ""
		    ""No format->read_data function registered"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1160.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Internal error: ""
		    ""No format->read_data function registered"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1160.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1160.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,1220,"archive_set_error(&a->archive, ENOMEM,
	    ""Not enough slots for format registration"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1161.cpp,"{
	int i, number_slots;

	archive_check_magic(&a->archive,
	    ARCHIVE_READ_MAGIC, ARCHIVE_STATE_NEW,
	    ""__archive_read_register_format"");

	number_slots = sizeof(a->formats) / sizeof(a->formats[0]);

	for (i = 0; i < number_slots; i++) {
		if (a->formats[i].bid == bid)
			return (ARCHIVE_WARN); /* We've already installed */
		if (a->formats[i].bid == NULL) {
			a->formats[i].bid = bid;
			a->formats[i].options = options;
			a->formats[i].read_header = read_header;
			a->formats[i].read_data = read_data;
			a->formats[i].read_data_skip = read_data_skip;
			a->formats[i].seek_data = seek_data;
			a->formats[i].cleanup = cleanup;
			a->formats[i].data = format_data;
			a->formats[i].name = name;
			a->formats[i].format_capabilties = format_capabilities;
			a->formats[i].has_encrypted_entries = has_encrypted_entries;
			return (ARCHIVE_OK);
		}
	}

	archive_set_error(&a->archive, ENOMEM,
	    ""Not enough slots for format registration"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1161.cpp,"[2, 0, 1, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 106, 0, 0, 1, 2, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 45, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 14, 0, 3, 2, 0, 0, 4, 0, 0, 14, 0, 9, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1161.cpp,41
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,1245,"archive_set_error(&a->archive, ENOMEM,
	    ""Not enough slots for filter registration"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1162.cpp,"{
	int i, number_slots;

	number_slots = sizeof(a->bidders) / sizeof(a->bidders[0]);

	for (i = 0; i < number_slots; i++) {
		if (a->bidders[i].bid == NULL) {
			memset(a->bidders + i, 0, sizeof(a->bidders[0]));
			*bidder = (a->bidders + i);
			return (ARCHIVE_OK);
		}
	}

	archive_set_error(&a->archive, ENOMEM,
	    ""Not enough slots for filter registration"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1162.cpp,"[1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 40, 0, 0, 1, 2, 0, 0, 1, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 22, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 2, 1, 0, 0, 5, 0, 0, 4, 0, 9, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1162.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,1424,"archive_set_error(
						    &filter->archive->archive,
						    ENOMEM,
						    ""Unable to allocate copy""
						    "" buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1163.cpp,"{ /* Integer overflow! */
						archive_set_error(
						    &filter->archive->archive,
						    ENOMEM,
						    ""Unable to allocate copy""
						    "" buffer"");
						filter->fatal = 1;
						if (avail != NULL)
							*avail = ARCHIVE_FATAL;
						return (NULL);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1163.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1163.cpp,117
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,1439,"archive_set_error(
						&filter->archive->archive,
						ENOMEM,
					    ""Unable to allocate copy buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1164.cpp,"{
					archive_set_error(
						&filter->archive->archive,
						ENOMEM,
					    ""Unable to allocate copy buffer"");
					filter->fatal = 1;
					if (avail != NULL)
						*avail = ARCHIVE_FATAL;
					return (NULL);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1164.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1164.cpp,132
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read.cpp,1504,"archive_set_error(&filter->archive->archive,
	    ARCHIVE_ERRNO_MISC,
	    ""Truncated input file (needed %jd bytes, only %jd available)"",
	    (intmax_t)request, (intmax_t)skipped);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1165.cpp,"{
	int64_t skipped;

	if (request < 0)
		return ARCHIVE_FATAL;
	if (request == 0)
		return 0;

	skipped = advance_file_pointer(filter, request);
	if (skipped == request)
		return (skipped);
	/* We hit EOF before we satisfied the skip request. */
	if (skipped < 0)  /* Map error code to 0 for error message below. */
		skipped = 0;
	archive_set_error(&filter->archive->archive,
	    ARCHIVE_ERRNO_MISC,
	    ""Truncated input file (needed %jd bytes, only %jd available)"",
	    (intmax_t)request, (intmax_t)skipped);
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1165.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 0, 25, 0, 0, 1, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 4, 0, 0, 2, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1165.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_string.cpp,1644,"archive_set_error(a, ENOMEM,
			    ""Could not allocate memory for ""
			    ""a string conversion object"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1166.cpp,"archive_set_error(a, ENOMEM,
			    ""Could not allocate memory for ""
			    ""a string conversion object"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1166.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1166.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_string.cpp,1657,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""iconv_open failed : Cannot handle ``%s''"",
			    (flag & SCONV_TO_CHARSET)?tc:fc);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1167.cpp,"{
#if HAVE_ICONV
			archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""iconv_open failed : Cannot handle ``%s''"",
			    (flag & SCONV_TO_CHARSET)?tc:fc);
#else
			archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""A character-set conversion not fully supported ""
			    ""on this platform"");
#endif
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1167.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 7, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1167.cpp,33
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_string.cpp,1661,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""A character-set conversion not fully supported ""
			    ""on this platform"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1168.cpp,"{
#if HAVE_ICONV
			archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""iconv_open failed : Cannot handle ``%s''"",
			    (flag & SCONV_TO_CHARSET)?tc:fc);
#else
			archive_set_error(a, ARCHIVE_ERRNO_MISC,
			    ""A character-set conversion not fully supported ""
			    ""on this platform"");
#endif
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1168.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 7, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1168.cpp,37
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_string.cpp,1751,"_snprintf(oemcp, sizeof(oemcp)-1, ""CP%d"", a->current_oemcp);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1169.cpp,"{
	const char *cur_charset = get_current_charset(a);
	char oemcp[16];

	/* NOTE: a check of cur_charset is unneeded but we need
	 * that get_current_charset() has been surely called at
	 * this time whatever C compiler optimized. */
	if (cur_charset != NULL &&
	    (a->current_codepage == CP_C_LOCALE ||
	     a->current_codepage == a->current_oemcp))
		return (NULL);/* no conversion. */

	_snprintf(oemcp, sizeof(oemcp)-1, ""CP%d"", a->current_oemcp);
	/* Make sure a null termination must be set. */
	oemcp[sizeof(oemcp)-1] = '\0';
	return (get_sconv_object(a, oemcp, cur_charset,
	    SCONV_FROM_CHARSET));
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1169.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 34, 0, 0, 2, 2, 0, 0, 1, 5, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 19, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 5, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1169.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_string.cpp,1772,"_snprintf(oemcp, sizeof(oemcp)-1, ""CP%d"", a->current_oemcp);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1170.cpp,"{
	const char *cur_charset = get_current_charset(a);
	char oemcp[16];

	/* NOTE: a check of cur_charset is unneeded but we need
	 * that get_current_charset() has been surely called at
	 * this time whatever C compiler optimized. */
	if (cur_charset != NULL &&
	    (a->current_codepage == CP_C_LOCALE ||
	     a->current_codepage == a->current_oemcp))
		return (NULL);/* no conversion. */

	_snprintf(oemcp, sizeof(oemcp)-1, ""CP%d"", a->current_oemcp);
	/* Make sure a null termination must be set. */
	oemcp[sizeof(oemcp)-1] = '\0';
	return (get_sconv_object(a, cur_charset, oemcp,
	    SCONV_TO_CHARSET));
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1170.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 34, 0, 0, 2, 2, 0, 0, 1, 5, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 19, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 5, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1170.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,117,"archive_set_error(&a->archive, ENOMEM, ""Can't allocate shar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1171.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Can't allocate shar data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1171.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1171.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,197,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""shar format cannot archive this"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1172.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""shar format cannot archive this"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1172.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1172.cpp,42
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,207,"archive_string_sprintf(&shar->work, ""echo x %s\n"", shar->quoted_name.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1173.cpp,"{
	const char *linkname;
	const char *name;
	char *p, *pp;
	struct shar *shar;

	shar = (struct shar *)a->format_data;
	if (!shar->wrote_header) {
		archive_strcat(&shar->work, ""#!/bin/sh\n"");
		archive_strcat(&shar->work, ""# This is a shell archive\n"");
		shar->wrote_header = 1;
	}

	/* Save the entry for the closing. */
	if (shar->entry)
		archive_entry_free(shar->entry);
	shar->entry = archive_entry_clone(entry);
	name = archive_entry_pathname(entry);

	/* Handle some preparatory issues. */
	switch(archive_entry_filetype(entry)) {
	case AE_IFREG:
		/* Only regular files have non-zero size. */
		break;
	case AE_IFDIR:
		archive_entry_set_size(entry, 0);
		/* Don't bother trying to recreate '.' */
		if (strcmp(name, ""."") == 0  ||  strcmp(name, ""./"") == 0)
			return (ARCHIVE_OK);
		break;
	case AE_IFIFO:
	case AE_IFCHR:
	case AE_IFBLK:
		/* All other file types have zero size in the archive. */
		archive_entry_set_size(entry, 0);
		break;
	default:
		archive_entry_set_size(entry, 0);
		if (archive_entry_hardlink(entry) == NULL &&
		    archive_entry_symlink(entry) == NULL) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""shar format cannot archive this"");
			return (ARCHIVE_WARN);
		}
	}

	archive_string_empty(&shar->quoted_name);
	shar_quote(&shar->quoted_name, name, 1);

	/* Stock preparation for all file types. */
	archive_string_sprintf(&shar->work, ""echo x %s\n"", shar->quoted_name.s);

	if (archive_entry_filetype(entry) != AE_IFDIR) {
		/* Try to create the dir. */
		p = strdup(name);
		pp = strrchr(p, '/');
		/* If there is a / character, try to create the dir. */
		if (pp != NULL) {
			*pp = '\0';

			/* Try to avoid a lot of redundant mkdir commands. */
			if (strcmp(p, ""."") == 0) {
				/* Don't try to ""mkdir ."" */
				free(p);
			} else if (shar->last_dir == NULL) {
				archive_strcat(&shar->work, ""mkdir -p "");
				shar_quote(&shar->work, p, 1);
				archive_strcat(&shar->work,
				    "" > /dev/null 2>&1\n"");
				shar->last_dir = p;
			} else if (strcmp(p, shar->last_dir) == 0) {
				/* We've already created this exact dir. */
				free(p);
			} else if (strlen(p) < strlen(shar->last_dir) &&
			    strncmp(p, shar->last_dir, strlen(p)) == 0) {
				/* We've already created a subdir. */
				free(p);
			} else {
				archive_strcat(&shar->work, ""mkdir -p "");
				shar_quote(&shar->work, p, 1);
				archive_strcat(&shar->work,
				    "" > /dev/null 2>&1\n"");
				shar->last_dir = p;
			}
		} else {
			free(p);
		}
	}

	/* Handle file-type specific issues. */
	shar->has_data = 0;
	if ((linkname = archive_entry_hardlink(entry)) != NULL) {
		archive_strcat(&shar->work, ""ln -f "");
		shar_quote(&shar->work, linkname, 1);
		archive_string_sprintf(&shar->work, "" %s\n"",
		    shar->quoted_name.s);
	} else if ((linkname = archive_entry_symlink(entry)) != NULL) {
		archive_strcat(&shar->work, ""ln -fs "");
		shar_quote(&shar->work, linkname, 1);
		archive_string_sprintf(&shar->work, "" %s\n"",
		    shar->quoted_name.s);
	} else {
		switch(archive_entry_filetype(entry)) {
		case AE_IFREG:
			if (archive_entry_size(entry) == 0) {
				/* More portable than ""touch."" */
				archive_string_sprintf(&shar->work,
				    ""test -e \""%s\"" || :> \""%s\""\n"",
				    shar->quoted_name.s, shar->quoted_name.s);
			} else {
				if (shar->dump) {
					unsigned int mode = archive_entry_mode(entry) & 0777;
					archive_string_sprintf(&shar->work,
					    ""uudecode -p > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);
					archive_string_sprintf(&shar->work,
					    ""begin %o "", mode);
					shar_quote(&shar->work, name, 0);
					archive_strcat(&shar->work, ""\n"");
				} else {
					archive_string_sprintf(&shar->work,
					    ""sed 's/^X//' > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);
				}
				shar->has_data = 1;
				shar->end_of_line = 1;
				shar->outpos = 0;
			}
			break;
		case AE_IFDIR:
			archive_string_sprintf(&shar->work,
			    ""mkdir -p %s > /dev/null 2>&1\n"",
			    shar->quoted_name.s);
			/* Record that we just created this directory. */
			if (shar->last_dir != NULL)
				free(shar->last_dir);

			shar->last_dir = strdup(name);
			/* Trim a trailing '/'. */
			pp = strrchr(shar->last_dir, '/');
			if (pp != NULL && pp[1] == '\0')
				*pp = '\0';
			/*
			 * TODO: Put dir name/mode on a list to be fixed
			 * up at end of archive.
			 */
			break;
		case AE_IFIFO:
			archive_string_sprintf(&shar->work,
			    ""mkfifo %s\n"", shar->quoted_name.s);
			break;
		case AE_IFCHR:
			archive_string_sprintf(&shar->work,
			    ""mknod %s c %ju %ju\n"", shar->quoted_name.s,
			    (uintmax_t)archive_entry_rdevmajor(entry),
			    (uintmax_t)archive_entry_rdevminor(entry));
			break;
		case AE_IFBLK:
			archive_string_sprintf(&shar->work,
			    ""mknod %s b %ju %ju\n"", shar->quoted_name.s,
			    (uintmax_t)archive_entry_rdevmajor(entry),
			    (uintmax_t)archive_entry_rdevminor(entry));
			break;
		default:
			return (ARCHIVE_WARN);
		}
	}

	return (ARCHIVE_OK);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1173.cpp,"[16, 0, 0, 0, 8, 0, 4, 2, 10, 2, 24, 0, 0, 0, 2, 352, 0, 0, 5, 6, 0, 0, 1, 51, 0, 0, 0, 0, 5, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 165, 0, 212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 18, 16, 5, 0, 64, 0, 0, 53, 4, 125, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1173.cpp,52
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,251,"archive_string_sprintf(&shar->work, "" %s\n"",
		    shar->quoted_name.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1174.cpp,"{
		archive_strcat(&shar->work, ""ln -f "");
		shar_quote(&shar->work, linkname, 1);
		archive_string_sprintf(&shar->work, "" %s\n"",
		    shar->quoted_name.s);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1174.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1174.cpp,96
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,256,"archive_string_sprintf(&shar->work, "" %s\n"",
		    shar->quoted_name.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1175.cpp,"{
		archive_strcat(&shar->work, ""ln -fs "");
		shar_quote(&shar->work, linkname, 1);
		archive_string_sprintf(&shar->work, "" %s\n"",
		    shar->quoted_name.s);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1175.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1175.cpp,101
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,263,"archive_string_sprintf(&shar->work,
				    ""test -e \""%s\"" || :> \""%s\""\n"",
				    shar->quoted_name.s, shar->quoted_name.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1176.cpp,"{
				/* More portable than ""touch."" */
				archive_string_sprintf(&shar->work,
				    ""test -e \""%s\"" || :> \""%s\""\n"",
				    shar->quoted_name.s, shar->quoted_name.s);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1176.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1176.cpp,108
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,269,"archive_string_sprintf(&shar->work,
					    ""uudecode -p > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1177.cpp,"{
					unsigned int mode = archive_entry_mode(entry) & 0777;
					archive_string_sprintf(&shar->work,
					    ""uudecode -p > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);
					archive_string_sprintf(&shar->work,
					    ""begin %o "", mode);
					shar_quote(&shar->work, name, 0);
					archive_strcat(&shar->work, ""\n"");
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1177.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 27, 0, 0, 1, 1, 0, 0, 1, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 4, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1177.cpp,114
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,272,"archive_string_sprintf(&shar->work,
					    ""begin %o "", mode);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1178.cpp,"{
					unsigned int mode = archive_entry_mode(entry) & 0777;
					archive_string_sprintf(&shar->work,
					    ""uudecode -p > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);
					archive_string_sprintf(&shar->work,
					    ""begin %o "", mode);
					shar_quote(&shar->work, name, 0);
					archive_strcat(&shar->work, ""\n"");
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1178.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 27, 0, 0, 1, 1, 0, 0, 1, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 4, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1178.cpp,117
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,277,"archive_string_sprintf(&shar->work,
					    ""sed 's/^X//' > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1179.cpp,"{
					archive_string_sprintf(&shar->work,
					    ""sed 's/^X//' > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1179.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1179.cpp,122
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,287,"archive_string_sprintf(&shar->work,
			    ""mkdir -p %s > /dev/null 2>&1\n"",
			    shar->quoted_name.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1180.cpp,"{
		case AE_IFREG:
			if (archive_entry_size(entry) == 0) {
				/* More portable than ""touch."" */
				archive_string_sprintf(&shar->work,
				    ""test -e \""%s\"" || :> \""%s\""\n"",
				    shar->quoted_name.s, shar->quoted_name.s);
			} else {
				if (shar->dump) {
					unsigned int mode = archive_entry_mode(entry) & 0777;
					archive_string_sprintf(&shar->work,
					    ""uudecode -p > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);
					archive_string_sprintf(&shar->work,
					    ""begin %o "", mode);
					shar_quote(&shar->work, name, 0);
					archive_strcat(&shar->work, ""\n"");
				} else {
					archive_string_sprintf(&shar->work,
					    ""sed 's/^X//' > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);
				}
				shar->has_data = 1;
				shar->end_of_line = 1;
				shar->outpos = 0;
			}
			break;
		case AE_IFDIR:
			archive_string_sprintf(&shar->work,
			    ""mkdir -p %s > /dev/null 2>&1\n"",
			    shar->quoted_name.s);
			/* Record that we just created this directory. */
			if (shar->last_dir != NULL)
				free(shar->last_dir);

			shar->last_dir = strdup(name);
			/* Trim a trailing '/'. */
			pp = strrchr(shar->last_dir, '/');
			if (pp != NULL && pp[1] == '\0')
				*pp = '\0';
			/*
			 * TODO: Put dir name/mode on a list to be fixed
			 * up at end of archive.
			 */
			break;
		case AE_IFIFO:
			archive_string_sprintf(&shar->work,
			    ""mkfifo %s\n"", shar->quoted_name.s);
			break;
		case AE_IFCHR:
			archive_string_sprintf(&shar->work,
			    ""mknod %s c %ju %ju\n"", shar->quoted_name.s,
			    (uintmax_t)archive_entry_rdevmajor(entry),
			    (uintmax_t)archive_entry_rdevminor(entry));
			break;
		case AE_IFBLK:
			archive_string_sprintf(&shar->work,
			    ""mknod %s b %ju %ju\n"", shar->quoted_name.s,
			    (uintmax_t)archive_entry_rdevmajor(entry),
			    (uintmax_t)archive_entry_rdevminor(entry));
			break;
		default:
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1180.cpp,"[4, 0, 0, 0, 5, 0, 1, 0, 5, 1, 7, 0, 0, 0, 0, 134, 0, 0, 1, 1, 0, 0, 1, 19, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 4, 4, 2, 0, 19, 0, 0, 17, 0, 44, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1180.cpp,132
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,305,"archive_string_sprintf(&shar->work,
			    ""mkfifo %s\n"", shar->quoted_name.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1181.cpp,"{
		case AE_IFREG:
			if (archive_entry_size(entry) == 0) {
				/* More portable than ""touch."" */
				archive_string_sprintf(&shar->work,
				    ""test -e \""%s\"" || :> \""%s\""\n"",
				    shar->quoted_name.s, shar->quoted_name.s);
			} else {
				if (shar->dump) {
					unsigned int mode = archive_entry_mode(entry) & 0777;
					archive_string_sprintf(&shar->work,
					    ""uudecode -p > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);
					archive_string_sprintf(&shar->work,
					    ""begin %o "", mode);
					shar_quote(&shar->work, name, 0);
					archive_strcat(&shar->work, ""\n"");
				} else {
					archive_string_sprintf(&shar->work,
					    ""sed 's/^X//' > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);
				}
				shar->has_data = 1;
				shar->end_of_line = 1;
				shar->outpos = 0;
			}
			break;
		case AE_IFDIR:
			archive_string_sprintf(&shar->work,
			    ""mkdir -p %s > /dev/null 2>&1\n"",
			    shar->quoted_name.s);
			/* Record that we just created this directory. */
			if (shar->last_dir != NULL)
				free(shar->last_dir);

			shar->last_dir = strdup(name);
			/* Trim a trailing '/'. */
			pp = strrchr(shar->last_dir, '/');
			if (pp != NULL && pp[1] == '\0')
				*pp = '\0';
			/*
			 * TODO: Put dir name/mode on a list to be fixed
			 * up at end of archive.
			 */
			break;
		case AE_IFIFO:
			archive_string_sprintf(&shar->work,
			    ""mkfifo %s\n"", shar->quoted_name.s);
			break;
		case AE_IFCHR:
			archive_string_sprintf(&shar->work,
			    ""mknod %s c %ju %ju\n"", shar->quoted_name.s,
			    (uintmax_t)archive_entry_rdevmajor(entry),
			    (uintmax_t)archive_entry_rdevminor(entry));
			break;
		case AE_IFBLK:
			archive_string_sprintf(&shar->work,
			    ""mknod %s b %ju %ju\n"", shar->quoted_name.s,
			    (uintmax_t)archive_entry_rdevmajor(entry),
			    (uintmax_t)archive_entry_rdevminor(entry));
			break;
		default:
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1181.cpp,"[4, 0, 0, 0, 5, 0, 1, 0, 5, 1, 7, 0, 0, 0, 0, 134, 0, 0, 1, 1, 0, 0, 1, 19, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 4, 4, 2, 0, 19, 0, 0, 17, 0, 44, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1181.cpp,150
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,309,"archive_string_sprintf(&shar->work,
			    ""mknod %s c %ju %ju\n"", shar->quoted_name.s,
			    (uintmax_t)archive_entry_rdevmajor(entry),
			    (uintmax_t)archive_entry_rdevminor(entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1182.cpp,"{
		case AE_IFREG:
			if (archive_entry_size(entry) == 0) {
				/* More portable than ""touch."" */
				archive_string_sprintf(&shar->work,
				    ""test -e \""%s\"" || :> \""%s\""\n"",
				    shar->quoted_name.s, shar->quoted_name.s);
			} else {
				if (shar->dump) {
					unsigned int mode = archive_entry_mode(entry) & 0777;
					archive_string_sprintf(&shar->work,
					    ""uudecode -p > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);
					archive_string_sprintf(&shar->work,
					    ""begin %o "", mode);
					shar_quote(&shar->work, name, 0);
					archive_strcat(&shar->work, ""\n"");
				} else {
					archive_string_sprintf(&shar->work,
					    ""sed 's/^X//' > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);
				}
				shar->has_data = 1;
				shar->end_of_line = 1;
				shar->outpos = 0;
			}
			break;
		case AE_IFDIR:
			archive_string_sprintf(&shar->work,
			    ""mkdir -p %s > /dev/null 2>&1\n"",
			    shar->quoted_name.s);
			/* Record that we just created this directory. */
			if (shar->last_dir != NULL)
				free(shar->last_dir);

			shar->last_dir = strdup(name);
			/* Trim a trailing '/'. */
			pp = strrchr(shar->last_dir, '/');
			if (pp != NULL && pp[1] == '\0')
				*pp = '\0';
			/*
			 * TODO: Put dir name/mode on a list to be fixed
			 * up at end of archive.
			 */
			break;
		case AE_IFIFO:
			archive_string_sprintf(&shar->work,
			    ""mkfifo %s\n"", shar->quoted_name.s);
			break;
		case AE_IFCHR:
			archive_string_sprintf(&shar->work,
			    ""mknod %s c %ju %ju\n"", shar->quoted_name.s,
			    (uintmax_t)archive_entry_rdevmajor(entry),
			    (uintmax_t)archive_entry_rdevminor(entry));
			break;
		case AE_IFBLK:
			archive_string_sprintf(&shar->work,
			    ""mknod %s b %ju %ju\n"", shar->quoted_name.s,
			    (uintmax_t)archive_entry_rdevmajor(entry),
			    (uintmax_t)archive_entry_rdevminor(entry));
			break;
		default:
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1182.cpp,"[4, 0, 0, 0, 5, 0, 1, 0, 5, 1, 7, 0, 0, 0, 0, 134, 0, 0, 1, 1, 0, 0, 1, 19, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 4, 4, 2, 0, 19, 0, 0, 17, 0, 44, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1182.cpp,154
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,315,"archive_string_sprintf(&shar->work,
			    ""mknod %s b %ju %ju\n"", shar->quoted_name.s,
			    (uintmax_t)archive_entry_rdevmajor(entry),
			    (uintmax_t)archive_entry_rdevminor(entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1183.cpp,"{
		case AE_IFREG:
			if (archive_entry_size(entry) == 0) {
				/* More portable than ""touch."" */
				archive_string_sprintf(&shar->work,
				    ""test -e \""%s\"" || :> \""%s\""\n"",
				    shar->quoted_name.s, shar->quoted_name.s);
			} else {
				if (shar->dump) {
					unsigned int mode = archive_entry_mode(entry) & 0777;
					archive_string_sprintf(&shar->work,
					    ""uudecode -p > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);
					archive_string_sprintf(&shar->work,
					    ""begin %o "", mode);
					shar_quote(&shar->work, name, 0);
					archive_strcat(&shar->work, ""\n"");
				} else {
					archive_string_sprintf(&shar->work,
					    ""sed 's/^X//' > %s << 'SHAR_END'\n"",
					    shar->quoted_name.s);
				}
				shar->has_data = 1;
				shar->end_of_line = 1;
				shar->outpos = 0;
			}
			break;
		case AE_IFDIR:
			archive_string_sprintf(&shar->work,
			    ""mkdir -p %s > /dev/null 2>&1\n"",
			    shar->quoted_name.s);
			/* Record that we just created this directory. */
			if (shar->last_dir != NULL)
				free(shar->last_dir);

			shar->last_dir = strdup(name);
			/* Trim a trailing '/'. */
			pp = strrchr(shar->last_dir, '/');
			if (pp != NULL && pp[1] == '\0')
				*pp = '\0';
			/*
			 * TODO: Put dir name/mode on a list to be fixed
			 * up at end of archive.
			 */
			break;
		case AE_IFIFO:
			archive_string_sprintf(&shar->work,
			    ""mkfifo %s\n"", shar->quoted_name.s);
			break;
		case AE_IFCHR:
			archive_string_sprintf(&shar->work,
			    ""mknod %s c %ju %ju\n"", shar->quoted_name.s,
			    (uintmax_t)archive_entry_rdevmajor(entry),
			    (uintmax_t)archive_entry_rdevminor(entry));
			break;
		case AE_IFBLK:
			archive_string_sprintf(&shar->work,
			    ""mknod %s b %ju %ju\n"", shar->quoted_name.s,
			    (uintmax_t)archive_entry_rdevmajor(entry),
			    (uintmax_t)archive_entry_rdevminor(entry));
			break;
		default:
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1183.cpp,"[4, 0, 0, 0, 5, 0, 1, 0, 5, 1, 7, 0, 0, 0, 0, 134, 0, 0, 1, 1, 0, 0, 1, 19, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 4, 4, 2, 0, 19, 0, 0, 17, 0, 44, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1183.cpp,160
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,352,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1184.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1184.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1184.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,419,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1185.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1185.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1185.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,444,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC, ""Buffer overflow"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1186.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC, ""Buffer overflow"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1186.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1186.cpp,34
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,534,"archive_string_sprintf(&shar->work, ""chmod %o "",
		    (unsigned int)(archive_entry_mode(shar->entry) & 07777));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1187.cpp,"{
		/* Finish uuencoded data. */
		if (shar->has_data) {
			if (shar->outpos > 0)
				uuencode_line(a, shar, shar->outbuff,
				    shar->outpos);
			archive_strcat(&shar->work, ""`\nend\n"");
			archive_strcat(&shar->work, ""SHAR_END\n"");
		}
		/* Restore file mode, owner, flags. */
		/*
		 * TODO: Don't immediately restore mode for
		 * directories; defer that to end of script.
		 */
		archive_string_sprintf(&shar->work, ""chmod %o "",
		    (unsigned int)(archive_entry_mode(shar->entry) & 07777));
		shar_quote(&shar->work, archive_entry_pathname(shar->entry), 1);
		archive_strcat(&shar->work, ""\n"");

		u = archive_entry_uname(shar->entry);
		g = archive_entry_gname(shar->entry);
		if (u != NULL || g != NULL) {
			archive_strcat(&shar->work, ""chown "");
			if (u != NULL)
				shar_quote(&shar->work, u, 1);
			if (g != NULL) {
				archive_strcat(&shar->work, "":"");
				shar_quote(&shar->work, g, 1);
			}
			archive_strcat(&shar->work, "" "");
			shar_quote(&shar->work,
			    archive_entry_pathname(shar->entry), 1);
			archive_strcat(&shar->work, ""\n"");
		}

		if ((p = archive_entry_fflags_text(shar->entry)) != NULL) {
			archive_string_sprintf(&shar->work, ""chflags %s "", p);
			shar_quote(&shar->work,
			    archive_entry_pathname(shar->entry), 1);
			archive_strcat(&shar->work, ""\n"");
		}

		/* TODO: restore ACLs */

	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1187.cpp,"[6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 24, 0, 0, 18, 0, 49, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1187.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.cpp,556,"archive_string_sprintf(&shar->work, ""chflags %s "", p);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1188.cpp,"{
			archive_string_sprintf(&shar->work, ""chflags %s "", p);
			shar_quote(&shar->work,
			    archive_entry_pathname(shar->entry), 1);
			archive_strcat(&shar->work, ""\n"");
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1188.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1188.cpp,47
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_append_filter.cpp,68,"archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
          ""Cannot append program filter using archive_read_append_filter"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1189.cpp,"{
    case ARCHIVE_FILTER_NONE:
      /* No filter to add, so do nothing.
       * NOTE: An initial ""NONE"" type filter is always set at the end of the
       * filter chain.
       */
      r1 = (ARCHIVE_OK);
      break;
    case ARCHIVE_FILTER_GZIP:
      strcpy(str, ""gzip"");
      r1 = archive_read_support_filter_gzip(_a);
      break;
    case ARCHIVE_FILTER_BZIP2:
      strcpy(str, ""bzip2"");
      r1 = archive_read_support_filter_bzip2(_a);
      break;
    case ARCHIVE_FILTER_COMPRESS:
      strcpy(str, ""compress (.Z)"");
      r1 = archive_read_support_filter_compress(_a);
      break;
    case ARCHIVE_FILTER_PROGRAM:
      archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
          ""Cannot append program filter using archive_read_append_filter"");
      return (ARCHIVE_FATAL);
    case ARCHIVE_FILTER_LZMA:
      strcpy(str, ""lzma"");
      r1 = archive_read_support_filter_lzma(_a);
      break;
    case ARCHIVE_FILTER_XZ:
      strcpy(str, ""xz"");
      r1 = archive_read_support_filter_xz(_a);
      break;
    case ARCHIVE_FILTER_UU:
      strcpy(str, ""uu"");
      r1 = archive_read_support_filter_uu(_a);
      break;
    case ARCHIVE_FILTER_RPM:
      strcpy(str, ""rpm"");
      r1 = archive_read_support_filter_rpm(_a);
      break;
    case ARCHIVE_FILTER_LZ4:
      strcpy(str, ""lz4"");
      r1 = archive_read_support_filter_lz4(_a);
      break;
    case ARCHIVE_FILTER_LZIP:
      strcpy(str, ""lzip"");
      r1 = archive_read_support_filter_lzip(_a);
      break;
    case ARCHIVE_FILTER_LRZIP:
      strcpy(str, ""lrzip"");
      r1 = archive_read_support_filter_lrzip(_a);
      break;
    default:
      archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
          ""Invalid filter code specified"");
      return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1189.cpp,"[0, 0, 0, 0, 11, 0, 2, 0, 12, 1, 1, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 23, 0, 36, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1189.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_append_filter.cpp,100,"archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
          ""Invalid filter code specified"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1190.cpp,"{
    case ARCHIVE_FILTER_NONE:
      /* No filter to add, so do nothing.
       * NOTE: An initial ""NONE"" type filter is always set at the end of the
       * filter chain.
       */
      r1 = (ARCHIVE_OK);
      break;
    case ARCHIVE_FILTER_GZIP:
      strcpy(str, ""gzip"");
      r1 = archive_read_support_filter_gzip(_a);
      break;
    case ARCHIVE_FILTER_BZIP2:
      strcpy(str, ""bzip2"");
      r1 = archive_read_support_filter_bzip2(_a);
      break;
    case ARCHIVE_FILTER_COMPRESS:
      strcpy(str, ""compress (.Z)"");
      r1 = archive_read_support_filter_compress(_a);
      break;
    case ARCHIVE_FILTER_PROGRAM:
      archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
          ""Cannot append program filter using archive_read_append_filter"");
      return (ARCHIVE_FATAL);
    case ARCHIVE_FILTER_LZMA:
      strcpy(str, ""lzma"");
      r1 = archive_read_support_filter_lzma(_a);
      break;
    case ARCHIVE_FILTER_XZ:
      strcpy(str, ""xz"");
      r1 = archive_read_support_filter_xz(_a);
      break;
    case ARCHIVE_FILTER_UU:
      strcpy(str, ""uu"");
      r1 = archive_read_support_filter_uu(_a);
      break;
    case ARCHIVE_FILTER_RPM:
      strcpy(str, ""rpm"");
      r1 = archive_read_support_filter_rpm(_a);
      break;
    case ARCHIVE_FILTER_LZ4:
      strcpy(str, ""lz4"");
      r1 = archive_read_support_filter_lz4(_a);
      break;
    case ARCHIVE_FILTER_LZIP:
      strcpy(str, ""lzip"");
      r1 = archive_read_support_filter_lzip(_a);
      break;
    case ARCHIVE_FILTER_LRZIP:
      strcpy(str, ""lrzip"");
      r1 = archive_read_support_filter_lrzip(_a);
      break;
    default:
      archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
          ""Invalid filter code specified"");
      return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1190.cpp,"[0, 0, 0, 0, 11, 0, 2, 0, 12, 1, 1, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 23, 0, 36, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1190.cpp,64
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_append_filter.cpp,117,"archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
          ""Internal error: Unable to append filter"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1191.cpp,"{
      archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
          ""Internal error: Unable to append filter"");
      return (ARCHIVE_FATAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1191.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1191.cpp,81
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_append_filter.cpp,126,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1192.cpp,"{
      archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
      return (ARCHIVE_FATAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1192.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1192.cpp,90
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_append_filter.cpp,174,"archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
        ""Internal error: Unable to append program filter"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1193.cpp,"{
    archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
        ""Internal error: Unable to append program filter"");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1193.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1193.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_append_filter.cpp,183,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1194.cpp,"{
    archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
    return (ARCHIVE_FATAL);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1194.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1194.cpp,33
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,574,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Cannot restore access time on this system"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1195.cpp,"{
	struct archive_read_disk *a = (struct archive_read_disk *)_a;
	archive_check_magic(_a, ARCHIVE_READ_DISK_MAGIC,
	    ARCHIVE_STATE_ANY, ""archive_read_disk_restore_atime"");
#ifdef HAVE_UTIMES
	a->flags |= ARCHIVE_READDISK_RESTORE_ATIME;
	if (a->tree != NULL)
		a->tree->flags |= needsRestoreTimes;
	return (ARCHIVE_OK);
#else
	/* Display warning and unset flag */
	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Cannot restore access time on this system"");
	a->flags &= ~ARCHIVE_READDISK_RESTORE_ATIME;
	return (ARCHIVE_WARN);
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1195.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 35, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 5, 0, 7, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1195.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,664,"archive_set_error(&a->archive, ENOMEM,
			    ""Couldn't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1196.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Couldn't allocate memory"");
			a->archive.state = ARCHIVE_STATE_FATAL;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1196.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1196.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,753,"archive_set_error(&a->archive, errno,
			    ""Couldn't open %s"", tree_current_path(t));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1197.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Couldn't open %s"", tree_current_path(t));
			r = ARCHIVE_FAILED;
			tree_enter_initial_dir(t);
			goto abort_read_data;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1197.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1197.cpp,65
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,789,"archive_set_error(&a->archive, errno, ""Seek error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1198.cpp,"{
			archive_set_error(&a->archive, errno, ""Seek error"");
			r = ARCHIVE_FATAL;
			a->archive.state = ARCHIVE_STATE_FATAL;
			goto abort_read_data;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1198.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1198.cpp,101
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,805,"archive_set_error(&a->archive, errno, ""Read error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1199.cpp,"{
			archive_set_error(&a->archive, errno, ""Read error"");
			r = ARCHIVE_FATAL;
			a->archive.state = ARCHIVE_STATE_FATAL;
			goto abort_read_data;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1199.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1199.cpp,117
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,866,"archive_set_error(&a->archive, t->tree_errno,
			    ""%s: Unable to continue traversing directory tree"",
			    tree_current_path(t));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1200.cpp,"{
		case TREE_ERROR_FATAL:
			archive_set_error(&a->archive, t->tree_errno,
			    ""%s: Unable to continue traversing directory tree"",
			    tree_current_path(t));
			a->archive.state = ARCHIVE_STATE_FATAL;
			tree_enter_initial_dir(t);
			return (ARCHIVE_FATAL);
		case TREE_ERROR_DIR:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: Couldn't visit directory"",
			    tree_current_path(t));
			tree_enter_initial_dir(t);
			return (ARCHIVE_FAILED);
		case 0:
			tree_enter_initial_dir(t);
			return (ARCHIVE_EOF);
		case TREE_POSTDESCENT:
		case TREE_POSTASCENT:
			break;
		case TREE_REGULAR:
			lst = tree_current_lstat(t);
			if (lst == NULL) {
				archive_set_error(&a->archive, errno,
				    ""%s: Cannot stat"",
				    tree_current_path(t));
				tree_enter_initial_dir(t);
				return (ARCHIVE_FAILED);
			}
			break;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1200.cpp,"[1, 0, 0, 0, 2, 0, 4, 0, 6, 0, 2, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 11, 0, 0, 9, 0, 20, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1200.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,873,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: Couldn't visit directory"",
			    tree_current_path(t));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1201.cpp,"{
		case TREE_ERROR_FATAL:
			archive_set_error(&a->archive, t->tree_errno,
			    ""%s: Unable to continue traversing directory tree"",
			    tree_current_path(t));
			a->archive.state = ARCHIVE_STATE_FATAL;
			tree_enter_initial_dir(t);
			return (ARCHIVE_FATAL);
		case TREE_ERROR_DIR:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: Couldn't visit directory"",
			    tree_current_path(t));
			tree_enter_initial_dir(t);
			return (ARCHIVE_FAILED);
		case 0:
			tree_enter_initial_dir(t);
			return (ARCHIVE_EOF);
		case TREE_POSTDESCENT:
		case TREE_POSTASCENT:
			break;
		case TREE_REGULAR:
			lst = tree_current_lstat(t);
			if (lst == NULL) {
				archive_set_error(&a->archive, errno,
				    ""%s: Cannot stat"",
				    tree_current_path(t));
				tree_enter_initial_dir(t);
				return (ARCHIVE_FAILED);
			}
			break;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1201.cpp,"[1, 0, 0, 0, 2, 0, 4, 0, 6, 0, 2, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 11, 0, 0, 9, 0, 20, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1201.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,887,"archive_set_error(&a->archive, errno,
				    ""%s: Cannot stat"",
				    tree_current_path(t));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1202.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""%s: Cannot stat"",
				    tree_current_path(t));
				tree_enter_initial_dir(t);
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1202.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1202.cpp,36
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,917,"archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1203.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1203.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1203.cpp,66
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1031,"archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1204.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1204.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1204.cpp,180
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1057,"archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1205.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1205.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1205.cpp,206
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1186,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1206.cpp,"{
			t->sparse_list_size = 0;
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate data"");
			a->archive.state = ARCHIVE_STATE_FATAL;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1206.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1206.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1311,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1207.cpp,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1207.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1207.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1314,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't convert a path to a char string"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1208.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't convert a path to a char string"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1208.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1208.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1337,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate tar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1209.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate tar data"");
		a->archive.state = ARCHIVE_STATE_FATAL;
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1209.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1209.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1393,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate tar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1210.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate tar data"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1210.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1210.cpp,31
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1528,"archive_set_error(&a->archive, errno,
			    ""openat failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1211.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""openat failed"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1211.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1211.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1538,"archive_set_error(&a->archive, errno, ""fchdir failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1212.cpp,"{
			archive_set_error(&a->archive, errno, ""fchdir failed"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1212.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1212.cpp,48
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1551,"archive_set_error(&a->archive, errno, ""statfs failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1213.cpp,"{
		archive_set_error(&a->archive, errno, ""statfs failed"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1213.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1213.cpp,61
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1568,"archive_set_error(&a->archive, errno, ""getvfsbyname failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1214.cpp,"{
		archive_set_error(&a->archive, errno, ""getvfsbyname failed"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1214.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1214.cpp,78
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1593,"archive_set_error(&a->archive, errno, ""fchdir failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1215.cpp,"{
			archive_set_error(&a->archive, errno, ""fchdir failed"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1215.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1215.cpp,103
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1625,"archive_set_error(&a->archive, errno, ""fchdir failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1216.cpp,"{
		archive_set_error(&a->archive, errno, ""fchdir failed"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1216.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1216.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1645,"archive_set_error(&a->archive, errno, ""statvfs failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1217.cpp,"{
		t->current_filesystem->remote = -1;
		archive_set_error(&a->archive, errno, ""statvfs failed"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1217.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1217.cpp,29
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1713,"archive_set_error(&a->archive, errno,
			    ""openat failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1218.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""openat failed"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1218.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1218.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1726,"archive_set_error(&a->archive, errno, ""fchdir failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1219.cpp,"{
			archive_set_error(&a->archive, errno, ""fchdir failed"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1219.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1219.cpp,33
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1746,"archive_set_error(&a->archive, errno, ""fchdir failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1220.cpp,"{
			archive_set_error(&a->archive, errno, ""fchdir failed"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1220.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1220.cpp,53
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1760,"archive_set_error(&a->archive, errno, ""statfs failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1221.cpp,"{
		t->current_filesystem->synthetic = -1;
		t->current_filesystem->remote = -1;
		archive_set_error(&a->archive, errno, ""statfs failed"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1221.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1221.cpp,67
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1841,"archive_set_error(&a->archive, errno,
			    ""openat failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1222.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""openat failed"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1222.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1222.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1851,"archive_set_error(&a->archive, errno, ""fchdir failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1223.cpp,"{
			archive_set_error(&a->archive, errno, ""fchdir failed"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1223.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1223.cpp,29
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1865,"archive_set_error(&a->archive, errno, ""fchdir failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1224.cpp,"{
			archive_set_error(&a->archive, errno, ""fchdir failed"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1224.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1224.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1876,"archive_set_error(&a->archive, errno, ""statvfs failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1225.cpp,"{
		t->current_filesystem->synthetic = -1;
		t->current_filesystem->remote = -1;
		archive_set_error(&a->archive, errno, ""statvfs failed"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1225.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1225.cpp,54
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.cpp,1927,"archive_set_error(&a->archive, errno, ""fchdir failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1226.cpp,"{
			archive_set_error(&a->archive, errno, ""fchdir failed"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1226.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1226.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format.cpp,75,"archive_set_error(a, EINVAL, ""No such format"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1227.cpp,"{
	int i;

	for (i = 0; codes[i].code != 0; i++) {
		if (code == codes[i].code)
			return ((codes[i].setter)(a));
	}

	archive_set_error(a, EINVAL, ""No such format"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1227.cpp,"[1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 22, 0, 0, 1, 1, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1227.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_rpm.cpp,148,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for rpm"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1228.cpp,"{
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for rpm"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1228.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1228.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_rpm.cpp,215,"archive_set_error(
						    &self->archive->archive,
						    ARCHIVE_ERRNO_FILE_FORMAT,
						    ""Unrecoginized rpm header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1229.cpp,"{
						archive_set_error(
						    &self->archive->archive,
						    ARCHIVE_ERRNO_FILE_FORMAT,
						    ""Unrecoginized rpm header"");
						return (ARCHIVE_FATAL);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1229.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1229.cpp,56
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,430,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Too-small extra data: Need at least 4 bytes, but only found %d bytes"", (int)extra_length);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1230.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Too-small extra data: Need at least 4 bytes, but only found %d bytes"", (int)extra_length);
		return ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1230.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1230.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,440,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Extra data overflow: Need %d bytes but only found %d bytes"",
			    (int)datasize, (int)(extra_length - offset));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1231.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Extra data overflow: Need %d bytes but only found %d bytes"",
			    (int)datasize, (int)(extra_length - offset));
			return ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1231.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1231.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,446,"fprintf(stderr, ""Header id 0x%04x, length %d\n"",
		    headerid, datasize);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1232.cpp,"{
		unsigned short headerid = archive_le16dec(p + offset);
		unsigned short datasize = archive_le16dec(p + offset + 2);

		offset += 4;
		if (offset + datasize > extra_length) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Extra data overflow: Need %d bytes but only found %d bytes"",
			    (int)datasize, (int)(extra_length - offset));
			return ARCHIVE_FAILED;
		}
#ifdef DEBUG
		fprintf(stderr, ""Header id 0x%04x, length %d\n"",
		    headerid, datasize);
#endif
		switch (headerid) {
		case 0x0001:
			/* Zip64 extended information extra field. */
			zip_entry->flags |= LA_USED_ZIP64;
			if (zip_entry->uncompressed_size == 0xffffffff) {
				uint64_t t = 0;
				if (datasize < 8
				    || (t = archive_le64dec(p + offset)) > INT64_MAX) {
					archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit uncompressed size"");
					return ARCHIVE_FAILED;
				}
				zip_entry->uncompressed_size = t;
				offset += 8;
				datasize -= 8;
			}
			if (zip_entry->compressed_size == 0xffffffff) {
				uint64_t t = 0;
				if (datasize < 8
				    || (t = archive_le64dec(p + offset)) > INT64_MAX) {
					archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit compressed size"");
					return ARCHIVE_FAILED;
				}
				zip_entry->compressed_size = t;
				offset += 8;
				datasize -= 8;
			}
			if (zip_entry->local_header_offset == 0xffffffff) {
				uint64_t t = 0;
				if (datasize < 8
				    || (t = archive_le64dec(p + offset)) > INT64_MAX) {
					archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit local header offset"");
					return ARCHIVE_FAILED;
				}
				zip_entry->local_header_offset = t;
				offset += 8;
				datasize -= 8;
			}
			/* archive_le32dec(p + offset) gives disk
			 * on which file starts, but we don't handle
			 * multi-volume Zip files. */
			break;
#ifdef DEBUG
		case 0x0017:
		{
			/* Strong encryption field. */
			if (archive_le16dec(p + offset) == 2) {
				unsigned algId =
					archive_le16dec(p + offset + 2);
				unsigned bitLen =
					archive_le16dec(p + offset + 4);
				int	 flags =
					archive_le16dec(p + offset + 6);
				fprintf(stderr, ""algId=0x%04x, bitLen=%u, ""
				    ""flgas=%d\n"", algId, bitLen,flags);
			}
			break;
		}
#endif
		case 0x5455:
		{
			/* Extended time field ""UT"". */
			int flags = p[offset];
			offset++;
			datasize--;
			/* Flag bits indicate which dates are present. */
			if (flags & 0x01)
			{
#ifdef DEBUG
				fprintf(stderr, ""mtime: %lld -> %d\n"",
				    (long long)zip_entry->mtime,
				    archive_le32dec(p + offset));
#endif
				if (datasize < 4)
					break;
				zip_entry->mtime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			if (flags & 0x02)
			{
				if (datasize < 4)
					break;
				zip_entry->atime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			if (flags & 0x04)
			{
				if (datasize < 4)
					break;
				zip_entry->ctime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			break;
		}
		case 0x5855:
		{
			/* Info-ZIP Unix Extra Field (old version) ""UX"". */
			if (datasize >= 8) {
				zip_entry->atime = archive_le32dec(p + offset);
				zip_entry->mtime =
				    archive_le32dec(p + offset + 4);
			}
			if (datasize >= 12) {
				zip_entry->uid =
				    archive_le16dec(p + offset + 8);
				zip_entry->gid =
				    archive_le16dec(p + offset + 10);
			}
			break;
		}
		case 0x6c78:
		{
			/* Experimental 'xl' field */
			/*
			 * Introduced Dec 2013 to provide a way to
			 * include external file attributes (and other
			 * fields that ordinarily appear only in
			 * central directory) in local file header.
			 * This provides file type and permission
			 * information necessary to support full
			 * streaming extraction.  Currently being
			 * discussed with other Zip developers
			 * ... subject to change.
			 *
			 * Format:
			 *  The field starts with a bitmap that specifies
			 *  which additional fields are included.  The
			 *  bitmap is variable length and can be extended in
			 *  the future.
			 *
			 *  n bytes - feature bitmap: first byte has low-order
			 *    7 bits.  If high-order bit is set, a subsequent
			 *    byte holds the next 7 bits, etc.
			 *
			 *  if bitmap & 1, 2 byte ""version made by""
			 *  if bitmap & 2, 2 byte ""internal file attributes""
			 *  if bitmap & 4, 4 byte ""external file attributes""
			 *  if bitmap & 8, 2 byte comment length + n byte comment
			 */
			int bitmap, bitmap_last;

			if (datasize < 1)
				break;
			bitmap_last = bitmap = 0xff & p[offset];
			offset += 1;
			datasize -= 1;

			/* We only support first 7 bits of bitmap; skip rest. */
			while ((bitmap_last & 0x80) != 0
			    && datasize >= 1) {
				bitmap_last = p[offset];
				offset += 1;
				datasize -= 1;
			}

			if (bitmap & 1) {
				/* 2 byte ""version made by"" */
				if (datasize < 2)
					break;
				zip_entry->system
				    = archive_le16dec(p + offset) >> 8;
				offset += 2;
				datasize -= 2;
			}
			if (bitmap & 2) {
				/* 2 byte ""internal file attributes"" */
				uint32_t internal_attributes;
				if (datasize < 2)
					break;
				internal_attributes
				    = archive_le16dec(p + offset);
				/* Not used by libarchive at present. */
				(void)internal_attributes; /* UNUSED */
				offset += 2;
				datasize -= 2;
			}
			if (bitmap & 4) {
				/* 4 byte ""external file attributes"" */
				uint32_t external_attributes;
				if (datasize < 4)
					break;
				external_attributes
				    = archive_le32dec(p + offset);
				if (zip_entry->system == 3) {
					zip_entry->mode
					    = external_attributes >> 16;
				} else if (zip_entry->system == 0) {
					// Interpret MSDOS directory bit
					if (0x10 == (external_attributes & 0x10)) {
						zip_entry->mode = AE_IFDIR | 0775;
					} else {
						zip_entry->mode = AE_IFREG | 0664;
					}
					if (0x01 == (external_attributes & 0x01)) {
						// Read-only bit; strip write permissions
						zip_entry->mode &= 0555;
					}
				} else {
					zip_entry->mode = 0;
				}
				offset += 4;
				datasize -= 4;
			}
			if (bitmap & 8) {
				/* 2 byte comment length + comment */
				uint32_t comment_length;
				if (datasize < 2)
					break;
				comment_length
				    = archive_le16dec(p + offset);
				offset += 2;
				datasize -= 2;

				if (datasize < comment_length)
					break;
				/* Comment is not supported by libarchive */
				offset += comment_length;
				datasize -= comment_length;
			}
			break;
		}
		case 0x7855:
			/* Info-ZIP Unix Extra Field (type 2) ""Ux"". */
#ifdef DEBUG
			fprintf(stderr, ""uid %d gid %d\n"",
			    archive_le16dec(p + offset),
			    archive_le16dec(p + offset + 2));
#endif
			if (datasize >= 2)
				zip_entry->uid = archive_le16dec(p + offset);
			if (datasize >= 4)
				zip_entry->gid =
				    archive_le16dec(p + offset + 2);
			break;
		case 0x7875:
		{
			/* Info-Zip Unix Extra Field (type 3) ""ux"". */
			int uidsize = 0, gidsize = 0;

			/* TODO: support arbitrary uidsize/gidsize. */
			if (datasize >= 1 && p[offset] == 1) {/* version=1 */
				if (datasize >= 4) {
					/* get a uid size. */
					uidsize = 0xff & (int)p[offset+1];
					if (uidsize == 2)
						zip_entry->uid =
						    archive_le16dec(
						        p + offset + 2);
					else if (uidsize == 4 && datasize >= 6)
						zip_entry->uid =
						    archive_le32dec(
						        p + offset + 2);
				}
				if (datasize >= (2 + uidsize + 3)) {
					/* get a gid size. */
					gidsize = 0xff & (int)p[offset+2+uidsize];
					if (gidsize == 2)
						zip_entry->gid =
						    archive_le16dec(
						        p+offset+2+uidsize+1);
					else if (gidsize == 4 &&
					    datasize >= (2 + uidsize + 5))
						zip_entry->gid =
						    archive_le32dec(
						        p+offset+2+uidsize+1);
				}
			}
			break;
		}
		case 0x9901:
			/* WinZip AES extra data field. */
			if (p[offset + 2] == 'A' && p[offset + 3] == 'E') {
				/* Vendor version. */
				zip_entry->aes_extra.vendor =
				    archive_le16dec(p + offset);
				/* AES encryption strength. */
				zip_entry->aes_extra.strength = p[offset + 4];
				/* Actual compression method. */
				zip_entry->aes_extra.compression =
				    p[offset + 5];
			}
			break;
		default:
			break;
		}
		offset += datasize;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1232.cpp,"[40, 1, 0, 0, 18, 0, 4, 1, 8, 1, 50, 0, 0, 0, 0, 406, 0, 0, 14, 16, 0, 0, 11, 126, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 263, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 10, 0, 42, 40, 2, 0, 39, 0, 0, 72, 3, 62, 8, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1232.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,457,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit uncompressed size"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1233.cpp,"{
					archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit uncompressed size"");
					return ARCHIVE_FAILED;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1233.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1233.cpp,37
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,469,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit compressed size"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1234.cpp,"{
					archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit compressed size"");
					return ARCHIVE_FAILED;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1234.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1234.cpp,49
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,481,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit local header offset"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1235.cpp,"{
					archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit local header offset"");
					return ARCHIVE_FAILED;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1235.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1235.cpp,61
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,504,"fprintf(stderr, ""algId=0x%04x, bitLen=%u, ""
				    ""flgas=%d\n"", algId, bitLen,flags);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1236.cpp,"{
				unsigned algId =
					archive_le16dec(p + offset + 2);
				unsigned bitLen =
					archive_le16dec(p + offset + 4);
				int	 flags =
					archive_le16dec(p + offset + 6);
				fprintf(stderr, ""algId=0x%04x, bitLen=%u, ""
				    ""flgas=%d\n"", algId, bitLen,flags);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1236.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 3, 3, 0, 0, 3, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1236.cpp,84
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,520,"fprintf(stderr, ""mtime: %lld -> %d\n"",
				    (long long)zip_entry->mtime,
				    archive_le32dec(p + offset));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1237.cpp,"{
#ifdef DEBUG
				fprintf(stderr, ""mtime: %lld -> %d\n"",
				    (long long)zip_entry->mtime,
				    archive_le32dec(p + offset));
#endif
				if (datasize < 4)
					break;
				zip_entry->mtime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1237.cpp,"[1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 4, 0, 6, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1237.cpp,100
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,678,"fprintf(stderr, ""uid %d gid %d\n"",
			    archive_le16dec(p + offset),
			    archive_le16dec(p + offset + 2));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1238.cpp,"{
		case 0x0001:
			/* Zip64 extended information extra field. */
			zip_entry->flags |= LA_USED_ZIP64;
			if (zip_entry->uncompressed_size == 0xffffffff) {
				uint64_t t = 0;
				if (datasize < 8
				    || (t = archive_le64dec(p + offset)) > INT64_MAX) {
					archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit uncompressed size"");
					return ARCHIVE_FAILED;
				}
				zip_entry->uncompressed_size = t;
				offset += 8;
				datasize -= 8;
			}
			if (zip_entry->compressed_size == 0xffffffff) {
				uint64_t t = 0;
				if (datasize < 8
				    || (t = archive_le64dec(p + offset)) > INT64_MAX) {
					archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit compressed size"");
					return ARCHIVE_FAILED;
				}
				zip_entry->compressed_size = t;
				offset += 8;
				datasize -= 8;
			}
			if (zip_entry->local_header_offset == 0xffffffff) {
				uint64_t t = 0;
				if (datasize < 8
				    || (t = archive_le64dec(p + offset)) > INT64_MAX) {
					archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit local header offset"");
					return ARCHIVE_FAILED;
				}
				zip_entry->local_header_offset = t;
				offset += 8;
				datasize -= 8;
			}
			/* archive_le32dec(p + offset) gives disk
			 * on which file starts, but we don't handle
			 * multi-volume Zip files. */
			break;
#ifdef DEBUG
		case 0x0017:
		{
			/* Strong encryption field. */
			if (archive_le16dec(p + offset) == 2) {
				unsigned algId =
					archive_le16dec(p + offset + 2);
				unsigned bitLen =
					archive_le16dec(p + offset + 4);
				int	 flags =
					archive_le16dec(p + offset + 6);
				fprintf(stderr, ""algId=0x%04x, bitLen=%u, ""
				    ""flgas=%d\n"", algId, bitLen,flags);
			}
			break;
		}
#endif
		case 0x5455:
		{
			/* Extended time field ""UT"". */
			int flags = p[offset];
			offset++;
			datasize--;
			/* Flag bits indicate which dates are present. */
			if (flags & 0x01)
			{
#ifdef DEBUG
				fprintf(stderr, ""mtime: %lld -> %d\n"",
				    (long long)zip_entry->mtime,
				    archive_le32dec(p + offset));
#endif
				if (datasize < 4)
					break;
				zip_entry->mtime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			if (flags & 0x02)
			{
				if (datasize < 4)
					break;
				zip_entry->atime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			if (flags & 0x04)
			{
				if (datasize < 4)
					break;
				zip_entry->ctime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			break;
		}
		case 0x5855:
		{
			/* Info-ZIP Unix Extra Field (old version) ""UX"". */
			if (datasize >= 8) {
				zip_entry->atime = archive_le32dec(p + offset);
				zip_entry->mtime =
				    archive_le32dec(p + offset + 4);
			}
			if (datasize >= 12) {
				zip_entry->uid =
				    archive_le16dec(p + offset + 8);
				zip_entry->gid =
				    archive_le16dec(p + offset + 10);
			}
			break;
		}
		case 0x6c78:
		{
			/* Experimental 'xl' field */
			/*
			 * Introduced Dec 2013 to provide a way to
			 * include external file attributes (and other
			 * fields that ordinarily appear only in
			 * central directory) in local file header.
			 * This provides file type and permission
			 * information necessary to support full
			 * streaming extraction.  Currently being
			 * discussed with other Zip developers
			 * ... subject to change.
			 *
			 * Format:
			 *  The field starts with a bitmap that specifies
			 *  which additional fields are included.  The
			 *  bitmap is variable length and can be extended in
			 *  the future.
			 *
			 *  n bytes - feature bitmap: first byte has low-order
			 *    7 bits.  If high-order bit is set, a subsequent
			 *    byte holds the next 7 bits, etc.
			 *
			 *  if bitmap & 1, 2 byte ""version made by""
			 *  if bitmap & 2, 2 byte ""internal file attributes""
			 *  if bitmap & 4, 4 byte ""external file attributes""
			 *  if bitmap & 8, 2 byte comment length + n byte comment
			 */
			int bitmap, bitmap_last;

			if (datasize < 1)
				break;
			bitmap_last = bitmap = 0xff & p[offset];
			offset += 1;
			datasize -= 1;

			/* We only support first 7 bits of bitmap; skip rest. */
			while ((bitmap_last & 0x80) != 0
			    && datasize >= 1) {
				bitmap_last = p[offset];
				offset += 1;
				datasize -= 1;
			}

			if (bitmap & 1) {
				/* 2 byte ""version made by"" */
				if (datasize < 2)
					break;
				zip_entry->system
				    = archive_le16dec(p + offset) >> 8;
				offset += 2;
				datasize -= 2;
			}
			if (bitmap & 2) {
				/* 2 byte ""internal file attributes"" */
				uint32_t internal_attributes;
				if (datasize < 2)
					break;
				internal_attributes
				    = archive_le16dec(p + offset);
				/* Not used by libarchive at present. */
				(void)internal_attributes; /* UNUSED */
				offset += 2;
				datasize -= 2;
			}
			if (bitmap & 4) {
				/* 4 byte ""external file attributes"" */
				uint32_t external_attributes;
				if (datasize < 4)
					break;
				external_attributes
				    = archive_le32dec(p + offset);
				if (zip_entry->system == 3) {
					zip_entry->mode
					    = external_attributes >> 16;
				} else if (zip_entry->system == 0) {
					// Interpret MSDOS directory bit
					if (0x10 == (external_attributes & 0x10)) {
						zip_entry->mode = AE_IFDIR | 0775;
					} else {
						zip_entry->mode = AE_IFREG | 0664;
					}
					if (0x01 == (external_attributes & 0x01)) {
						// Read-only bit; strip write permissions
						zip_entry->mode &= 0555;
					}
				} else {
					zip_entry->mode = 0;
				}
				offset += 4;
				datasize -= 4;
			}
			if (bitmap & 8) {
				/* 2 byte comment length + comment */
				uint32_t comment_length;
				if (datasize < 2)
					break;
				comment_length
				    = archive_le16dec(p + offset);
				offset += 2;
				datasize -= 2;

				if (datasize < comment_length)
					break;
				/* Comment is not supported by libarchive */
				offset += comment_length;
				datasize -= comment_length;
			}
			break;
		}
		case 0x7855:
			/* Info-ZIP Unix Extra Field (type 2) ""Ux"". */
#ifdef DEBUG
			fprintf(stderr, ""uid %d gid %d\n"",
			    archive_le16dec(p + offset),
			    archive_le16dec(p + offset + 2));
#endif
			if (datasize >= 2)
				zip_entry->uid = archive_le16dec(p + offset);
			if (datasize >= 4)
				zip_entry->gid =
				    archive_le16dec(p + offset + 2);
			break;
		case 0x7875:
		{
			/* Info-Zip Unix Extra Field (type 3) ""ux"". */
			int uidsize = 0, gidsize = 0;

			/* TODO: support arbitrary uidsize/gidsize. */
			if (datasize >= 1 && p[offset] == 1) {/* version=1 */
				if (datasize >= 4) {
					/* get a uid size. */
					uidsize = 0xff & (int)p[offset+1];
					if (uidsize == 2)
						zip_entry->uid =
						    archive_le16dec(
						        p + offset + 2);
					else if (uidsize == 4 && datasize >= 6)
						zip_entry->uid =
						    archive_le32dec(
						        p + offset + 2);
				}
				if (datasize >= (2 + uidsize + 3)) {
					/* get a gid size. */
					gidsize = 0xff & (int)p[offset+2+uidsize];
					if (gidsize == 2)
						zip_entry->gid =
						    archive_le16dec(
						        p+offset+2+uidsize+1);
					else if (gidsize == 4 &&
					    datasize >= (2 + uidsize + 5))
						zip_entry->gid =
						    archive_le32dec(
						        p+offset+2+uidsize+1);
				}
			}
			break;
		}
		case 0x9901:
			/* WinZip AES extra data field. */
			if (p[offset + 2] == 'A' && p[offset + 3] == 'E') {
				/* Vendor version. */
				zip_entry->aes_extra.vendor =
				    archive_le16dec(p + offset);
				/* AES encryption strength. */
				zip_entry->aes_extra.strength = p[offset + 4];
				/* Actual compression method. */
				zip_entry->aes_extra.compression =
				    p[offset + 5];
			}
			break;
		default:
			break;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1238.cpp,"[39, 1, 0, 0, 18, 0, 3, 0, 8, 1, 48, 0, 0, 0, 0, 371, 0, 0, 12, 14, 0, 0, 9, 122, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 251, 0, 188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 10, 0, 40, 39, 2, 0, 34, 0, 0, 68, 3, 50, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1238.cpp,258
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,742,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Malformed extra data: Consumed %d bytes of %d bytes"",
		    (int)offset, (int)extra_length);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1239.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Malformed extra data: Consumed %d bytes of %d bytes"",
		    (int)offset, (int)extra_length);
		return ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1239.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1239.cpp,322
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,785,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1240.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1240.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1240.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,791,"archive_set_error(&a->archive, -1, ""Damaged Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1241.cpp,"{
		archive_set_error(&a->archive, -1, ""Damaged Zip archive"");
		return ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1241.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1241.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,824,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1242.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1242.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1242.cpp,71
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,846,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1243.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1243.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1243.cpp,93
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,850,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1244.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1244.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1244.cpp,97
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,861,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1245.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1245.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1245.cpp,108
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,946,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent CRC32 values"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1246.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent CRC32 values"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1246.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1246.cpp,193
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,956,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent compressed size: ""
			    ""%jd in central directory, %jd in local header"",
			    (intmax_t)zip_entry_central_dir.compressed_size,
			    (intmax_t)zip_entry->compressed_size);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1247.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent compressed size: ""
			    ""%jd in central directory, %jd in local header"",
			    (intmax_t)zip_entry_central_dir.compressed_size,
			    (intmax_t)zip_entry->compressed_size);
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1247.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1247.cpp,203
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,969,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent uncompressed size: ""
			    ""%jd in central directory, %jd in local header"",
			    (intmax_t)zip_entry_central_dir.uncompressed_size,
			    (intmax_t)zip_entry->uncompressed_size);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1248.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent uncompressed size: ""
			    ""%jd in central directory, %jd in local header"",
			    (intmax_t)zip_entry_central_dir.uncompressed_size,
			    (intmax_t)zip_entry->uncompressed_size);
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1248.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1248.cpp,216
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,991,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Zip file with oversized link entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1249.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Zip file with oversized link entry"");
			return ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1249.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1249.cpp,238
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1001,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated Zip file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1250.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated Zip file"");
			return ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1250.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1250.cpp,248
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1018,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Symlink"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1251.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Symlink"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1251.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1251.cpp,265
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1029,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symlink cannot be converted ""
				    ""from %s to current locale."",
				    archive_string_conversion_charset_name(
					sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1252.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symlink cannot be converted ""
				    ""from %s to current locale."",
				    archive_string_conversion_charset_name(
					sconv));
				ret = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1252.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1252.cpp,276
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1041,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1253.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");
			return ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1253.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1253.cpp,288
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1058,"archive_string_sprintf(&zip->format_name, ""ZIP %d.%d (%s)"",
	    version / 10, version % 10,
	    compression_name(zip->entry->compression));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1254.cpp,"{
	const char *p;
	const void *h;
	const wchar_t *wp;
	const char *cp;
	size_t len, filename_length, extra_length;
	struct archive_string_conv *sconv;
	struct zip_entry *zip_entry = zip->entry;
	struct zip_entry zip_entry_central_dir;
	int ret = ARCHIVE_OK;
	char version;

	/* Save a copy of the original for consistency checks. */
	zip_entry_central_dir = *zip_entry;

	zip->decompress_init = 0;
	zip->end_of_entry = 0;
	zip->entry_uncompressed_bytes_read = 0;
	zip->entry_compressed_bytes_read = 0;
	zip->entry_crc32 = zip->crc32func(0, NULL, 0);

	/* Setup default conversion. */
	if (zip->sconv == NULL && !zip->init_default_conversion) {
		zip->sconv_default =
		    archive_string_default_conversion_for_read(&(a->archive));
		zip->init_default_conversion = 1;
	}

	if ((p = __archive_read_ahead(a, 30, NULL)) == NULL) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}

	if (memcmp(p, ""PK\003\004"", 4) != 0) {
		archive_set_error(&a->archive, -1, ""Damaged Zip archive"");
		return ARCHIVE_FATAL;
	}
	version = p[4];
	zip_entry->system = p[5];
	zip_entry->zip_flags = archive_le16dec(p + 6);
	if (zip_entry->zip_flags & (ZIP_ENCRYPTED | ZIP_STRONG_ENCRYPTED)) {
		zip->has_encrypted_entries = 1;
		archive_entry_set_is_data_encrypted(entry, 1);
		if (zip_entry->zip_flags & ZIP_CENTRAL_DIRECTORY_ENCRYPTED &&
			zip_entry->zip_flags & ZIP_ENCRYPTED &&
			zip_entry->zip_flags & ZIP_STRONG_ENCRYPTED) {
			archive_entry_set_is_metadata_encrypted(entry, 1);
			return ARCHIVE_FATAL;
		}
	}
	zip->init_decryption = (zip_entry->zip_flags & ZIP_ENCRYPTED);
	zip_entry->compression = (char)archive_le16dec(p + 8);
	zip_entry->mtime = zip_time(p + 10);
	zip_entry->crc32 = archive_le32dec(p + 14);
	if (zip_entry->zip_flags & ZIP_LENGTH_AT_END)
		zip_entry->decdat = p[11];
	else
		zip_entry->decdat = p[17];
	zip_entry->compressed_size = archive_le32dec(p + 18);
	zip_entry->uncompressed_size = archive_le32dec(p + 22);
	filename_length = archive_le16dec(p + 26);
	extra_length = archive_le16dec(p + 28);

	__archive_read_consume(a, 30);

	/* Read the filename. */
	if ((h = __archive_read_ahead(a, filename_length, NULL)) == NULL) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}
	if (zip_entry->zip_flags & ZIP_UTF8_NAME) {
		/* The filename is stored to be UTF-8. */
		if (zip->sconv_utf8 == NULL) {
			zip->sconv_utf8 =
			    archive_string_conversion_from_charset(
				&a->archive, ""UTF-8"", 1);
			if (zip->sconv_utf8 == NULL)
				return (ARCHIVE_FATAL);
		}
		sconv = zip->sconv_utf8;
	} else if (zip->sconv != NULL)
		sconv = zip->sconv;
	else
		sconv = zip->sconv_default;

	if (archive_entry_copy_pathname_l(entry,
	    h, filename_length, sconv) != 0) {
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
	}
	__archive_read_consume(a, filename_length);

	/* Read the extra data. */
	if ((h = __archive_read_ahead(a, extra_length, NULL)) == NULL) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}

	if (ARCHIVE_OK != process_extra(a, h, extra_length, zip_entry)) {
		return ARCHIVE_FATAL;
	}
	__archive_read_consume(a, extra_length);

	/* Work around a bug in Info-Zip: When reading from a pipe, it
	 * stats the pipe instead of synthesizing a file entry. */
	if ((zip_entry->mode & AE_IFMT) == AE_IFIFO) {
		zip_entry->mode &= ~ AE_IFMT;
		zip_entry->mode |= AE_IFREG;
	}

	/* If the mode is totally empty, set some sane default. */
	if (zip_entry->mode == 0) {
		zip_entry->mode |= 0664;
	}

	/* Make sure that entries with a trailing '/' are marked as directories
	 * even if the External File Attributes contains bogus values.  If this
	 * is not a directory and there is no type, assume regularfile. */
	if ((zip_entry->mode & AE_IFMT) != AE_IFDIR) {
		int has_slash;

		wp = archive_entry_pathname_w(entry);
		if (wp != NULL) {
			len = wcslen(wp);
			has_slash = len > 0 && wp[len - 1] == L'/';
		} else {
			cp = archive_entry_pathname(entry);
			len = (cp != NULL)?strlen(cp):0;
			has_slash = len > 0 && cp[len - 1] == '/';
		}
		/* Correct file type as needed. */
		if (has_slash) {
			zip_entry->mode &= ~AE_IFMT;
			zip_entry->mode |= AE_IFDIR;
			zip_entry->mode |= 0111;
		} else if ((zip_entry->mode & AE_IFMT) == 0) {
			zip_entry->mode |= AE_IFREG;
		}
	}

	/* Make sure directories end in '/' */
	if ((zip_entry->mode & AE_IFMT) == AE_IFDIR) {
		wp = archive_entry_pathname_w(entry);
		if (wp != NULL) {
			len = wcslen(wp);
			if (len > 0 && wp[len - 1] != L'/') {
				struct archive_wstring s;
				archive_string_init(&s);
				archive_wstrcat(&s, wp);
				archive_wstrappend_wchar(&s, L'/');
				archive_entry_copy_pathname_w(entry, s.s);
				archive_wstring_free(&s);
			}
		} else {
			cp = archive_entry_pathname(entry);
			len = (cp != NULL)?strlen(cp):0;
			if (len > 0 && cp[len - 1] != '/') {
				struct archive_string s;
				archive_string_init(&s);
				archive_strcat(&s, cp);
				archive_strappend_char(&s, '/');
				archive_entry_set_pathname(entry, s.s);
				archive_string_free(&s);
			}
		}
	}

	if (zip_entry->flags & LA_FROM_CENTRAL_DIRECTORY) {
		/* If this came from the central dir, it's size info
		 * is definitive, so ignore the length-at-end flag. */
		zip_entry->zip_flags &= ~ZIP_LENGTH_AT_END;
		/* If local header is missing a value, use the one from
		   the central directory.  If both have it, warn about
		   mismatches. */
		if (zip_entry->crc32 == 0) {
			zip_entry->crc32 = zip_entry_central_dir.crc32;
		} else if (!zip->ignore_crc32
		    && zip_entry->crc32 != zip_entry_central_dir.crc32) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent CRC32 values"");
			ret = ARCHIVE_WARN;
		}
		if (zip_entry->compressed_size == 0) {
			zip_entry->compressed_size
			    = zip_entry_central_dir.compressed_size;
		} else if (zip_entry->compressed_size
		    != zip_entry_central_dir.compressed_size) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent compressed size: ""
			    ""%jd in central directory, %jd in local header"",
			    (intmax_t)zip_entry_central_dir.compressed_size,
			    (intmax_t)zip_entry->compressed_size);
			ret = ARCHIVE_WARN;
		}
		if (zip_entry->uncompressed_size == 0) {
			zip_entry->uncompressed_size
			    = zip_entry_central_dir.uncompressed_size;
		} else if (zip_entry->uncompressed_size
		    != zip_entry_central_dir.uncompressed_size) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent uncompressed size: ""
			    ""%jd in central directory, %jd in local header"",
			    (intmax_t)zip_entry_central_dir.uncompressed_size,
			    (intmax_t)zip_entry->uncompressed_size);
			ret = ARCHIVE_WARN;
		}
	}

	/* Populate some additional entry fields: */
	archive_entry_set_mode(entry, zip_entry->mode);
	archive_entry_set_uid(entry, zip_entry->uid);
	archive_entry_set_gid(entry, zip_entry->gid);
	archive_entry_set_mtime(entry, zip_entry->mtime, 0);
	archive_entry_set_ctime(entry, zip_entry->ctime, 0);
	archive_entry_set_atime(entry, zip_entry->atime, 0);

	if ((zip->entry->mode & AE_IFMT) == AE_IFLNK) {
		size_t linkname_length;

		if (zip_entry->compressed_size > 64 * 1024) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Zip file with oversized link entry"");
			return ARCHIVE_FATAL;
		}

		linkname_length = (size_t)zip_entry->compressed_size;

		archive_entry_set_size(entry, 0);
		p = __archive_read_ahead(a, linkname_length, NULL);
		if (p == NULL) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated Zip file"");
			return ARCHIVE_FATAL;
		}

		sconv = zip->sconv;
		if (sconv == NULL && (zip->entry->zip_flags & ZIP_UTF8_NAME))
			sconv = zip->sconv_utf8;
		if (sconv == NULL)
			sconv = zip->sconv_default;
		if (archive_entry_copy_symlink_l(entry, p, linkname_length,
		    sconv) != 0) {
			if (errno != ENOMEM && sconv == zip->sconv_utf8 &&
			    (zip->entry->zip_flags & ZIP_UTF8_NAME))
			    archive_entry_copy_symlink_l(entry, p,
				linkname_length, NULL);
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Symlink"");
				return (ARCHIVE_FATAL);
			}
			/*
			 * Since there is no character-set regulation for
			 * symlink name, do not report the conversion error
			 * in an automatic conversion.
			 */
			if (sconv != zip->sconv_utf8 ||
			    (zip->entry->zip_flags & ZIP_UTF8_NAME) == 0) {
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symlink cannot be converted ""
				    ""from %s to current locale."",
				    archive_string_conversion_charset_name(
					sconv));
				ret = ARCHIVE_WARN;
			}
		}
		zip_entry->uncompressed_size = zip_entry->compressed_size = 0;

		if (__archive_read_consume(a, linkname_length) < 0) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");
			return ARCHIVE_FATAL;
		}
	} else if (0 == (zip_entry->zip_flags & ZIP_LENGTH_AT_END)
	    || zip_entry->uncompressed_size > 0) {
		/* Set the size only if it's meaningful. */
		archive_entry_set_size(entry, zip_entry->uncompressed_size);
	}
	zip->entry_bytes_remaining = zip_entry->compressed_size;

	/* If there's no body, force read_data() to return EOF immediately. */
	if (0 == (zip_entry->zip_flags & ZIP_LENGTH_AT_END)
	    && zip->entry_bytes_remaining < 1)
		zip->end_of_entry = 1;

	/* Set up a more descriptive format name. */
	archive_string_sprintf(&zip->format_name, ""ZIP %d.%d (%s)"",
	    version / 10, version % 10,
	    compression_name(zip->entry->compression));
	a->archive.archive_format_name = zip->format_name.s;

	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1254.cpp,"[44, 0, 0, 0, 0, 0, 13, 0, 0, 0, 49, 0, 0, 0, 4, 704, 0, 0, 14, 16, 0, 0, 2, 90, 0, 0, 0, 0, 6, 0, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 383, 2, 330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 8, 0, 46, 46, 6, 0, 70, 0, 0, 100, 6, 157, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1254.cpp,305
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1083,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Truncated ZIP file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1255.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Truncated ZIP file data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1255.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1255.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1094,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""ZIP bad Authentication code"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1256.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""ZIP bad Authentication code"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1256.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1256.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1153,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated ZIP file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1257.cpp,"{
			/* Zip archives have end-of-archive markers
			   that are longer than this, so a failure to get at
			   least 24 bytes really does indicate a truncated
			   file. */
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated ZIP file data"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1257.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1257.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1175,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Overflow of 64-bit file sizes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1258.cpp,"{
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Overflow of 64-bit file sizes"");
					return ARCHIVE_FAILED;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1258.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1258.cpp,48
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1231,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated ZIP file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1259.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated ZIP file data"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1259.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1259.cpp,104
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1282,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize ZIP decompression."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1260.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize ZIP decompression."");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1260.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1260.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1313,"archive_set_error(&a->archive, ENOMEM,
			    ""No memory for ZIP decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1261.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""No memory for ZIP decompression"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1261.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1261.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1335,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file body"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1262.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file body"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1262.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1262.cpp,41
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1407,"archive_set_error(&a->archive, ENOMEM,
		    ""Out of memory for ZIP decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1263.cpp,"{
	case Z_OK:
		break;
	case Z_STREAM_END:
		zip->end_of_entry = 1;
		break;
	case Z_MEM_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Out of memory for ZIP decompression"");
		return (ARCHIVE_FATAL);
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""ZIP decompression failed (%d)"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1263.cpp,"[0, 0, 0, 0, 2, 0, 2, 0, 3, 1, 1, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1263.cpp,113
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1411,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""ZIP decompression failed (%d)"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1264.cpp,"{
	case Z_OK:
		break;
	case Z_STREAM_END:
		zip->end_of_entry = 1;
		break;
	case Z_MEM_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Out of memory for ZIP decompression"");
		return (ARCHIVE_FATAL);
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""ZIP decompression failed (%d)"", r);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1264.cpp,"[0, 0, 0, 0, 2, 0, 2, 0, 3, 1, 1, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1264.cpp,117
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1446,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated ZIP end-of-file record"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1265.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated ZIP end-of-file record"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1265.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1265.cpp,152
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1463,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Overflow of 64-bit file sizes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1266.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Overflow of 64-bit file sizes"");
				return ARCHIVE_FAILED;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1266.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1266.cpp,169
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1527,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported encryption format version: %u"",
		    archive_le16dec(p+4));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1267.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported encryption format version: %u"",
		    archive_le16dec(p+4));
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1267.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1267.cpp,44
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1553,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption algorithm: %u"", zip->alg_id);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1268.cpp,"{
	case 0x6601:/* DES */
	case 0x6602:/* RC2 */
	case 0x6603:/* 3DES 168 */
	case 0x6609:/* 3DES 112 */
	case 0x660E:/* AES 128 */
	case 0x660F:/* AES 192 */
	case 0x6610:/* AES 256 */
	case 0x6702:/* RC2 (version >= 5.2) */
	case 0x6720:/* Blowfish */
	case 0x6721:/* Twofish */
	case 0x6801:/* RC4 */
		/* Supported encryption algorithm. */
		break;
	default:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption algorithm: %u"", zip->alg_id);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1268.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 11, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1268.cpp,70
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1574,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption flag: %u"", zip->flags);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1269.cpp,"{
	case 0x0001: /* Password is required to decrypt. */
	case 0x0002: /* Certificates only. */
	case 0x0003: /* Password or certificate required to decrypt. */
		break;
	default:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption flag: %u"", zip->flags);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1269.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 3, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1269.cpp,91
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1581,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption flag: %u"", zip->flags);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1270.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption flag: %u"", zip->flags);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1270.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1270.cpp,98
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1660,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Encrypted file is unsupported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1271.cpp,"{
	struct zip *zip = (struct zip *)(a->format->data);
	const char *p;
	unsigned int remaining_size;
	unsigned int ts;

	/*
	 * Read an initialization vector data field.
	 */
	p = __archive_read_ahead(a, 2, NULL);
	if (p == NULL)
		goto truncated;
	ts = zip->iv_size;
	zip->iv_size = archive_le16dec(p);
	__archive_read_consume(a, 2);
	if (ts < zip->iv_size) {
		free(zip->iv);
		zip->iv = NULL;
	}
	p = __archive_read_ahead(a, zip->iv_size, NULL);
	if (p == NULL)
		goto truncated;
	if (zip->iv == NULL) {
		zip->iv = malloc(zip->iv_size);
		if (zip->iv == NULL)
			goto nomem;
	}
	memcpy(zip->iv, p, zip->iv_size);
	__archive_read_consume(a, zip->iv_size);

	/*
	 * Read a size of remaining decryption header field.
	 */
	p = __archive_read_ahead(a, 14, NULL);
	if (p == NULL)
		goto truncated;
	remaining_size = archive_le32dec(p);
	if (remaining_size < 16 || remaining_size > (1 << 18))
		goto corrupted;

	/* Check if format version is supported. */
	if (archive_le16dec(p+4) != 3) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported encryption format version: %u"",
		    archive_le16dec(p+4));
		return (ARCHIVE_FAILED);
	}

	/*
	 * Read an encryption algorithm field.
	 */
	zip->alg_id = archive_le16dec(p+6);
	switch (zip->alg_id) {
	case 0x6601:/* DES */
	case 0x6602:/* RC2 */
	case 0x6603:/* 3DES 168 */
	case 0x6609:/* 3DES 112 */
	case 0x660E:/* AES 128 */
	case 0x660F:/* AES 192 */
	case 0x6610:/* AES 256 */
	case 0x6702:/* RC2 (version >= 5.2) */
	case 0x6720:/* Blowfish */
	case 0x6721:/* Twofish */
	case 0x6801:/* RC4 */
		/* Supported encryption algorithm. */
		break;
	default:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption algorithm: %u"", zip->alg_id);
		return (ARCHIVE_FAILED);
	}

	/*
	 * Read a bit length field.
	 */
	zip->bit_len = archive_le16dec(p+8);

	/*
	 * Read a flags field.
	 */
	zip->flags = archive_le16dec(p+10);
	switch (zip->flags & 0xf000) {
	case 0x0001: /* Password is required to decrypt. */
	case 0x0002: /* Certificates only. */
	case 0x0003: /* Password or certificate required to decrypt. */
		break;
	default:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption flag: %u"", zip->flags);
		return (ARCHIVE_FAILED);
	}
	if ((zip->flags & 0xf000) == 0 ||
	    (zip->flags & 0xf000) == 0x4000) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption flag: %u"", zip->flags);
		return (ARCHIVE_FAILED);
	}

	/*
	 * Read an encrypted random data field.
	 */
	ts = zip->erd_size;
	zip->erd_size = archive_le16dec(p+12);
	__archive_read_consume(a, 14);
	if ((zip->erd_size & 0xf) != 0 ||
	    (zip->erd_size + 16) > remaining_size ||
	    (zip->erd_size + 16) < zip->erd_size)
		goto corrupted;

	if (ts < zip->erd_size) {
		free(zip->erd);
		zip->erd = NULL;
	}
	p = __archive_read_ahead(a, zip->erd_size, NULL);
	if (p == NULL)
		goto truncated;
	if (zip->erd == NULL) {
		zip->erd = malloc(zip->erd_size);
		if (zip->erd == NULL)
			goto nomem;
	}
	memcpy(zip->erd, p, zip->erd_size);
	__archive_read_consume(a, zip->erd_size);

	/*
	 * Read a reserved data field.
	 */
	p = __archive_read_ahead(a, 4, NULL);
	if (p == NULL)
		goto truncated;
	/* Reserved data size should be zero. */
	if (archive_le32dec(p) != 0)
		goto corrupted;
	__archive_read_consume(a, 4);

	/*
	 * Read a password validation data field.
	 */
	p = __archive_read_ahead(a, 2, NULL);
	if (p == NULL)
		goto truncated;
	ts = zip->v_size;
	zip->v_size = archive_le16dec(p);
	__archive_read_consume(a, 2);
	if ((zip->v_size & 0x0f) != 0 ||
	    (zip->erd_size + zip->v_size + 16) > remaining_size ||
	    (zip->erd_size + zip->v_size + 16) < (zip->erd_size + zip->v_size))
		goto corrupted;
	if (ts < zip->v_size) {
		free(zip->v_data);
		zip->v_data = NULL;
	}
	p = __archive_read_ahead(a, zip->v_size, NULL);
	if (p == NULL)
		goto truncated;
	if (zip->v_data == NULL) {
		zip->v_data = malloc(zip->v_size);
		if (zip->v_data == NULL)
			goto nomem;
	}
	memcpy(zip->v_data, p, zip->v_size);
	__archive_read_consume(a, zip->v_size);

	p = __archive_read_ahead(a, 4, NULL);
	if (p == NULL)
		goto truncated;
	zip->v_crc32 = archive_le32dec(p);
	__archive_read_consume(a, 4);

	/*return (ARCHIVE_OK);
	 * This is not fully implemented yet.*/
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Encrypted file is unsupported"");
	return (ARCHIVE_FAILED);
truncated:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Truncated ZIP file data"");
	return (ARCHIVE_FATAL);
corrupted:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Corrupted ZIP file data"");
	return (ARCHIVE_FATAL);
nomem:
	archive_set_error(&a->archive, ENOMEM,
	    ""No memory for ZIP decryption"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1271.cpp,"[23, 0, 0, 0, 2, 0, 8, 2, 14, 2, 26, 3, 15, 0, 1, 385, 0, 0, 4, 4, 0, 0, 1, 56, 0, 0, 0, 0, 2, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 0, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 25, 23, 0, 0, 46, 0, 0, 47, 0, 96, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1271.cpp,177
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1664,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Truncated ZIP file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1272.cpp,"{
	struct zip *zip = (struct zip *)(a->format->data);
	const char *p;
	unsigned int remaining_size;
	unsigned int ts;

	/*
	 * Read an initialization vector data field.
	 */
	p = __archive_read_ahead(a, 2, NULL);
	if (p == NULL)
		goto truncated;
	ts = zip->iv_size;
	zip->iv_size = archive_le16dec(p);
	__archive_read_consume(a, 2);
	if (ts < zip->iv_size) {
		free(zip->iv);
		zip->iv = NULL;
	}
	p = __archive_read_ahead(a, zip->iv_size, NULL);
	if (p == NULL)
		goto truncated;
	if (zip->iv == NULL) {
		zip->iv = malloc(zip->iv_size);
		if (zip->iv == NULL)
			goto nomem;
	}
	memcpy(zip->iv, p, zip->iv_size);
	__archive_read_consume(a, zip->iv_size);

	/*
	 * Read a size of remaining decryption header field.
	 */
	p = __archive_read_ahead(a, 14, NULL);
	if (p == NULL)
		goto truncated;
	remaining_size = archive_le32dec(p);
	if (remaining_size < 16 || remaining_size > (1 << 18))
		goto corrupted;

	/* Check if format version is supported. */
	if (archive_le16dec(p+4) != 3) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported encryption format version: %u"",
		    archive_le16dec(p+4));
		return (ARCHIVE_FAILED);
	}

	/*
	 * Read an encryption algorithm field.
	 */
	zip->alg_id = archive_le16dec(p+6);
	switch (zip->alg_id) {
	case 0x6601:/* DES */
	case 0x6602:/* RC2 */
	case 0x6603:/* 3DES 168 */
	case 0x6609:/* 3DES 112 */
	case 0x660E:/* AES 128 */
	case 0x660F:/* AES 192 */
	case 0x6610:/* AES 256 */
	case 0x6702:/* RC2 (version >= 5.2) */
	case 0x6720:/* Blowfish */
	case 0x6721:/* Twofish */
	case 0x6801:/* RC4 */
		/* Supported encryption algorithm. */
		break;
	default:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption algorithm: %u"", zip->alg_id);
		return (ARCHIVE_FAILED);
	}

	/*
	 * Read a bit length field.
	 */
	zip->bit_len = archive_le16dec(p+8);

	/*
	 * Read a flags field.
	 */
	zip->flags = archive_le16dec(p+10);
	switch (zip->flags & 0xf000) {
	case 0x0001: /* Password is required to decrypt. */
	case 0x0002: /* Certificates only. */
	case 0x0003: /* Password or certificate required to decrypt. */
		break;
	default:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption flag: %u"", zip->flags);
		return (ARCHIVE_FAILED);
	}
	if ((zip->flags & 0xf000) == 0 ||
	    (zip->flags & 0xf000) == 0x4000) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption flag: %u"", zip->flags);
		return (ARCHIVE_FAILED);
	}

	/*
	 * Read an encrypted random data field.
	 */
	ts = zip->erd_size;
	zip->erd_size = archive_le16dec(p+12);
	__archive_read_consume(a, 14);
	if ((zip->erd_size & 0xf) != 0 ||
	    (zip->erd_size + 16) > remaining_size ||
	    (zip->erd_size + 16) < zip->erd_size)
		goto corrupted;

	if (ts < zip->erd_size) {
		free(zip->erd);
		zip->erd = NULL;
	}
	p = __archive_read_ahead(a, zip->erd_size, NULL);
	if (p == NULL)
		goto truncated;
	if (zip->erd == NULL) {
		zip->erd = malloc(zip->erd_size);
		if (zip->erd == NULL)
			goto nomem;
	}
	memcpy(zip->erd, p, zip->erd_size);
	__archive_read_consume(a, zip->erd_size);

	/*
	 * Read a reserved data field.
	 */
	p = __archive_read_ahead(a, 4, NULL);
	if (p == NULL)
		goto truncated;
	/* Reserved data size should be zero. */
	if (archive_le32dec(p) != 0)
		goto corrupted;
	__archive_read_consume(a, 4);

	/*
	 * Read a password validation data field.
	 */
	p = __archive_read_ahead(a, 2, NULL);
	if (p == NULL)
		goto truncated;
	ts = zip->v_size;
	zip->v_size = archive_le16dec(p);
	__archive_read_consume(a, 2);
	if ((zip->v_size & 0x0f) != 0 ||
	    (zip->erd_size + zip->v_size + 16) > remaining_size ||
	    (zip->erd_size + zip->v_size + 16) < (zip->erd_size + zip->v_size))
		goto corrupted;
	if (ts < zip->v_size) {
		free(zip->v_data);
		zip->v_data = NULL;
	}
	p = __archive_read_ahead(a, zip->v_size, NULL);
	if (p == NULL)
		goto truncated;
	if (zip->v_data == NULL) {
		zip->v_data = malloc(zip->v_size);
		if (zip->v_data == NULL)
			goto nomem;
	}
	memcpy(zip->v_data, p, zip->v_size);
	__archive_read_consume(a, zip->v_size);

	p = __archive_read_ahead(a, 4, NULL);
	if (p == NULL)
		goto truncated;
	zip->v_crc32 = archive_le32dec(p);
	__archive_read_consume(a, 4);

	/*return (ARCHIVE_OK);
	 * This is not fully implemented yet.*/
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Encrypted file is unsupported"");
	return (ARCHIVE_FAILED);
truncated:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Truncated ZIP file data"");
	return (ARCHIVE_FATAL);
corrupted:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Corrupted ZIP file data"");
	return (ARCHIVE_FATAL);
nomem:
	archive_set_error(&a->archive, ENOMEM,
	    ""No memory for ZIP decryption"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1272.cpp,"[23, 0, 0, 0, 2, 0, 8, 2, 14, 2, 26, 3, 15, 0, 1, 385, 0, 0, 4, 4, 0, 0, 1, 56, 0, 0, 0, 0, 2, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 0, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 25, 23, 0, 0, 46, 0, 0, 47, 0, 96, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1272.cpp,181
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1668,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Corrupted ZIP file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1273.cpp,"{
	struct zip *zip = (struct zip *)(a->format->data);
	const char *p;
	unsigned int remaining_size;
	unsigned int ts;

	/*
	 * Read an initialization vector data field.
	 */
	p = __archive_read_ahead(a, 2, NULL);
	if (p == NULL)
		goto truncated;
	ts = zip->iv_size;
	zip->iv_size = archive_le16dec(p);
	__archive_read_consume(a, 2);
	if (ts < zip->iv_size) {
		free(zip->iv);
		zip->iv = NULL;
	}
	p = __archive_read_ahead(a, zip->iv_size, NULL);
	if (p == NULL)
		goto truncated;
	if (zip->iv == NULL) {
		zip->iv = malloc(zip->iv_size);
		if (zip->iv == NULL)
			goto nomem;
	}
	memcpy(zip->iv, p, zip->iv_size);
	__archive_read_consume(a, zip->iv_size);

	/*
	 * Read a size of remaining decryption header field.
	 */
	p = __archive_read_ahead(a, 14, NULL);
	if (p == NULL)
		goto truncated;
	remaining_size = archive_le32dec(p);
	if (remaining_size < 16 || remaining_size > (1 << 18))
		goto corrupted;

	/* Check if format version is supported. */
	if (archive_le16dec(p+4) != 3) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported encryption format version: %u"",
		    archive_le16dec(p+4));
		return (ARCHIVE_FAILED);
	}

	/*
	 * Read an encryption algorithm field.
	 */
	zip->alg_id = archive_le16dec(p+6);
	switch (zip->alg_id) {
	case 0x6601:/* DES */
	case 0x6602:/* RC2 */
	case 0x6603:/* 3DES 168 */
	case 0x6609:/* 3DES 112 */
	case 0x660E:/* AES 128 */
	case 0x660F:/* AES 192 */
	case 0x6610:/* AES 256 */
	case 0x6702:/* RC2 (version >= 5.2) */
	case 0x6720:/* Blowfish */
	case 0x6721:/* Twofish */
	case 0x6801:/* RC4 */
		/* Supported encryption algorithm. */
		break;
	default:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption algorithm: %u"", zip->alg_id);
		return (ARCHIVE_FAILED);
	}

	/*
	 * Read a bit length field.
	 */
	zip->bit_len = archive_le16dec(p+8);

	/*
	 * Read a flags field.
	 */
	zip->flags = archive_le16dec(p+10);
	switch (zip->flags & 0xf000) {
	case 0x0001: /* Password is required to decrypt. */
	case 0x0002: /* Certificates only. */
	case 0x0003: /* Password or certificate required to decrypt. */
		break;
	default:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption flag: %u"", zip->flags);
		return (ARCHIVE_FAILED);
	}
	if ((zip->flags & 0xf000) == 0 ||
	    (zip->flags & 0xf000) == 0x4000) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption flag: %u"", zip->flags);
		return (ARCHIVE_FAILED);
	}

	/*
	 * Read an encrypted random data field.
	 */
	ts = zip->erd_size;
	zip->erd_size = archive_le16dec(p+12);
	__archive_read_consume(a, 14);
	if ((zip->erd_size & 0xf) != 0 ||
	    (zip->erd_size + 16) > remaining_size ||
	    (zip->erd_size + 16) < zip->erd_size)
		goto corrupted;

	if (ts < zip->erd_size) {
		free(zip->erd);
		zip->erd = NULL;
	}
	p = __archive_read_ahead(a, zip->erd_size, NULL);
	if (p == NULL)
		goto truncated;
	if (zip->erd == NULL) {
		zip->erd = malloc(zip->erd_size);
		if (zip->erd == NULL)
			goto nomem;
	}
	memcpy(zip->erd, p, zip->erd_size);
	__archive_read_consume(a, zip->erd_size);

	/*
	 * Read a reserved data field.
	 */
	p = __archive_read_ahead(a, 4, NULL);
	if (p == NULL)
		goto truncated;
	/* Reserved data size should be zero. */
	if (archive_le32dec(p) != 0)
		goto corrupted;
	__archive_read_consume(a, 4);

	/*
	 * Read a password validation data field.
	 */
	p = __archive_read_ahead(a, 2, NULL);
	if (p == NULL)
		goto truncated;
	ts = zip->v_size;
	zip->v_size = archive_le16dec(p);
	__archive_read_consume(a, 2);
	if ((zip->v_size & 0x0f) != 0 ||
	    (zip->erd_size + zip->v_size + 16) > remaining_size ||
	    (zip->erd_size + zip->v_size + 16) < (zip->erd_size + zip->v_size))
		goto corrupted;
	if (ts < zip->v_size) {
		free(zip->v_data);
		zip->v_data = NULL;
	}
	p = __archive_read_ahead(a, zip->v_size, NULL);
	if (p == NULL)
		goto truncated;
	if (zip->v_data == NULL) {
		zip->v_data = malloc(zip->v_size);
		if (zip->v_data == NULL)
			goto nomem;
	}
	memcpy(zip->v_data, p, zip->v_size);
	__archive_read_consume(a, zip->v_size);

	p = __archive_read_ahead(a, 4, NULL);
	if (p == NULL)
		goto truncated;
	zip->v_crc32 = archive_le32dec(p);
	__archive_read_consume(a, 4);

	/*return (ARCHIVE_OK);
	 * This is not fully implemented yet.*/
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Encrypted file is unsupported"");
	return (ARCHIVE_FAILED);
truncated:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Truncated ZIP file data"");
	return (ARCHIVE_FATAL);
corrupted:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Corrupted ZIP file data"");
	return (ARCHIVE_FATAL);
nomem:
	archive_set_error(&a->archive, ENOMEM,
	    ""No memory for ZIP decryption"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1273.cpp,"[23, 0, 0, 0, 2, 0, 8, 2, 14, 2, 26, 3, 15, 0, 1, 385, 0, 0, 4, 4, 0, 0, 1, 56, 0, 0, 0, 0, 2, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 0, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 25, 23, 0, 0, 46, 0, 0, 47, 0, 96, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1273.cpp,185
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1672,"archive_set_error(&a->archive, ENOMEM,
	    ""No memory for ZIP decryption"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1274.cpp,"{
	struct zip *zip = (struct zip *)(a->format->data);
	const char *p;
	unsigned int remaining_size;
	unsigned int ts;

	/*
	 * Read an initialization vector data field.
	 */
	p = __archive_read_ahead(a, 2, NULL);
	if (p == NULL)
		goto truncated;
	ts = zip->iv_size;
	zip->iv_size = archive_le16dec(p);
	__archive_read_consume(a, 2);
	if (ts < zip->iv_size) {
		free(zip->iv);
		zip->iv = NULL;
	}
	p = __archive_read_ahead(a, zip->iv_size, NULL);
	if (p == NULL)
		goto truncated;
	if (zip->iv == NULL) {
		zip->iv = malloc(zip->iv_size);
		if (zip->iv == NULL)
			goto nomem;
	}
	memcpy(zip->iv, p, zip->iv_size);
	__archive_read_consume(a, zip->iv_size);

	/*
	 * Read a size of remaining decryption header field.
	 */
	p = __archive_read_ahead(a, 14, NULL);
	if (p == NULL)
		goto truncated;
	remaining_size = archive_le32dec(p);
	if (remaining_size < 16 || remaining_size > (1 << 18))
		goto corrupted;

	/* Check if format version is supported. */
	if (archive_le16dec(p+4) != 3) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported encryption format version: %u"",
		    archive_le16dec(p+4));
		return (ARCHIVE_FAILED);
	}

	/*
	 * Read an encryption algorithm field.
	 */
	zip->alg_id = archive_le16dec(p+6);
	switch (zip->alg_id) {
	case 0x6601:/* DES */
	case 0x6602:/* RC2 */
	case 0x6603:/* 3DES 168 */
	case 0x6609:/* 3DES 112 */
	case 0x660E:/* AES 128 */
	case 0x660F:/* AES 192 */
	case 0x6610:/* AES 256 */
	case 0x6702:/* RC2 (version >= 5.2) */
	case 0x6720:/* Blowfish */
	case 0x6721:/* Twofish */
	case 0x6801:/* RC4 */
		/* Supported encryption algorithm. */
		break;
	default:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption algorithm: %u"", zip->alg_id);
		return (ARCHIVE_FAILED);
	}

	/*
	 * Read a bit length field.
	 */
	zip->bit_len = archive_le16dec(p+8);

	/*
	 * Read a flags field.
	 */
	zip->flags = archive_le16dec(p+10);
	switch (zip->flags & 0xf000) {
	case 0x0001: /* Password is required to decrypt. */
	case 0x0002: /* Certificates only. */
	case 0x0003: /* Password or certificate required to decrypt. */
		break;
	default:
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption flag: %u"", zip->flags);
		return (ARCHIVE_FAILED);
	}
	if ((zip->flags & 0xf000) == 0 ||
	    (zip->flags & 0xf000) == 0x4000) {
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unknown encryption flag: %u"", zip->flags);
		return (ARCHIVE_FAILED);
	}

	/*
	 * Read an encrypted random data field.
	 */
	ts = zip->erd_size;
	zip->erd_size = archive_le16dec(p+12);
	__archive_read_consume(a, 14);
	if ((zip->erd_size & 0xf) != 0 ||
	    (zip->erd_size + 16) > remaining_size ||
	    (zip->erd_size + 16) < zip->erd_size)
		goto corrupted;

	if (ts < zip->erd_size) {
		free(zip->erd);
		zip->erd = NULL;
	}
	p = __archive_read_ahead(a, zip->erd_size, NULL);
	if (p == NULL)
		goto truncated;
	if (zip->erd == NULL) {
		zip->erd = malloc(zip->erd_size);
		if (zip->erd == NULL)
			goto nomem;
	}
	memcpy(zip->erd, p, zip->erd_size);
	__archive_read_consume(a, zip->erd_size);

	/*
	 * Read a reserved data field.
	 */
	p = __archive_read_ahead(a, 4, NULL);
	if (p == NULL)
		goto truncated;
	/* Reserved data size should be zero. */
	if (archive_le32dec(p) != 0)
		goto corrupted;
	__archive_read_consume(a, 4);

	/*
	 * Read a password validation data field.
	 */
	p = __archive_read_ahead(a, 2, NULL);
	if (p == NULL)
		goto truncated;
	ts = zip->v_size;
	zip->v_size = archive_le16dec(p);
	__archive_read_consume(a, 2);
	if ((zip->v_size & 0x0f) != 0 ||
	    (zip->erd_size + zip->v_size + 16) > remaining_size ||
	    (zip->erd_size + zip->v_size + 16) < (zip->erd_size + zip->v_size))
		goto corrupted;
	if (ts < zip->v_size) {
		free(zip->v_data);
		zip->v_data = NULL;
	}
	p = __archive_read_ahead(a, zip->v_size, NULL);
	if (p == NULL)
		goto truncated;
	if (zip->v_data == NULL) {
		zip->v_data = malloc(zip->v_size);
		if (zip->v_data == NULL)
			goto nomem;
	}
	memcpy(zip->v_data, p, zip->v_size);
	__archive_read_consume(a, zip->v_size);

	p = __archive_read_ahead(a, 4, NULL);
	if (p == NULL)
		goto truncated;
	zip->v_crc32 = archive_le32dec(p);
	__archive_read_consume(a, 4);

	/*return (ARCHIVE_OK);
	 * This is not fully implemented yet.*/
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Encrypted file is unsupported"");
	return (ARCHIVE_FAILED);
truncated:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Truncated ZIP file data"");
	return (ARCHIVE_FATAL);
corrupted:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Corrupted ZIP file data"");
	return (ARCHIVE_FATAL);
nomem:
	archive_set_error(&a->archive, ENOMEM,
	    ""No memory for ZIP decryption"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1274.cpp,"[23, 0, 0, 0, 2, 0, 8, 2, 14, 2, 26, 3, 15, 0, 1, 385, 0, 0, 4, 4, 0, 0, 1, 56, 0, 0, 0, 0, 2, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 0, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 25, 23, 0, 0, 46, 0, 0, 47, 0, 96, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1274.cpp,189
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1687,"archive_set_error(&a->archive, ENOMEM,
			    ""No memory for ZIP decryption"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1275.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""No memory for ZIP decryption"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1275.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1275.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1714,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated Zip encrypted body: only %jd bytes available"",
		    (intmax_t)zip->entry_bytes_remaining);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1276.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated Zip encrypted body: only %jd bytes available"",
		    (intmax_t)zip->entry_bytes_remaining);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1276.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1276.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1722,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1277.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1277.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1277.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1733,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    (retry > 0)?
				""Incorrect passphrase"":
				""Passphrase required for this entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1278.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    (retry > 0)?
				""Incorrect passphrase"":
				""Passphrase required for this entry"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1278.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1278.cpp,37
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1749,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Too many incorrect passphrases"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1279.cpp,"{
			/* Avoid infinity loop. */
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Too many incorrect passphrases"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1279.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1279.cpp,53
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1797,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    (retry > 0)?
				""Incorrect passphrase"":
				""Passphrase required for this entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1280.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    (retry > 0)?
				""Incorrect passphrase"":
				""Passphrase required for this entry"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1280.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1280.cpp,29
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1807,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Decryption is unsupported due to lack of ""
			    ""crypto library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1281.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Decryption is unsupported due to lack of ""
			    ""crypto library"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1281.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1281.cpp,39
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1820,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Too many incorrect passphrases"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1282.cpp,"{
			/* Avoid infinity loop. */
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Too many incorrect passphrases"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1282.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1282.cpp,52
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1828,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Decryption is unsupported due to lack of crypto library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1283.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Decryption is unsupported due to lack of crypto library"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1283.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1283.cpp,60
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1835,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize HMAC-SHA1"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1284.cpp,"{
		archive_decrypto_aes_ctr_release(&zip->cctx);
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize HMAC-SHA1"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1284.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1284.cpp,67
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1852,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Truncated ZIP file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1285.cpp,"{
	struct zip *zip = (struct zip *)(a->format->data);
	const void *p;
	const uint8_t *pv;
	size_t key_len, salt_len;
	uint8_t derived_key[MAX_DERIVED_KEY_BUF_SIZE];
	int retry;
	int r;

	if (zip->cctx_valid || zip->hctx_valid)
		return (ARCHIVE_OK);

	switch (zip->entry->aes_extra.strength) {
	case 1: salt_len = 8;  key_len = 16; break;
	case 2: salt_len = 12; key_len = 24; break;
	case 3: salt_len = 16; key_len = 32; break;
	default: goto corrupted;
	}
	p = __archive_read_ahead(a, salt_len + 2, NULL);
	if (p == NULL)
		goto truncated;

	for (retry = 0;; retry++) {
		const char *passphrase;

		passphrase = __archive_read_next_passphrase(a);
		if (passphrase == NULL) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    (retry > 0)?
				""Incorrect passphrase"":
				""Passphrase required for this entry"");
			return (ARCHIVE_FAILED);
		}
		memset(derived_key, 0, sizeof(derived_key));
		r = archive_pbkdf2_sha1(passphrase, strlen(passphrase),
		    p, salt_len, 1000, derived_key, key_len * 2 + 2);
		if (r != 0) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Decryption is unsupported due to lack of ""
			    ""crypto library"");
			return (ARCHIVE_FAILED);
		}

		/* Check password verification value. */
		pv = ((const uint8_t *)p) + salt_len;
		if (derived_key[key_len * 2] == pv[0] &&
		    derived_key[key_len * 2 + 1] == pv[1])
			break;/* The passphrase is OK. */
		if (retry > 10000) {
			/* Avoid infinity loop. */
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Too many incorrect passphrases"");
			return (ARCHIVE_FAILED);
		}
	}

	r = archive_decrypto_aes_ctr_init(&zip->cctx, derived_key, key_len);
	if (r != 0) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Decryption is unsupported due to lack of crypto library"");
		return (ARCHIVE_FAILED);
	}
	r = archive_hmac_sha1_init(&zip->hctx, derived_key + key_len, key_len);
	if (r != 0) {
		archive_decrypto_aes_ctr_release(&zip->cctx);
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize HMAC-SHA1"");
		return (ARCHIVE_FAILED);
	}
	zip->cctx_valid = zip->hctx_valid = 1;
	__archive_read_consume(a, salt_len + 2);
	zip->entry_bytes_remaining -= salt_len + 2 + AUTH_CODE_SIZE;
	if (0 == (zip->entry->zip_flags & ZIP_LENGTH_AT_END)
	    && zip->entry_bytes_remaining < 0)
		goto corrupted;
	zip->entry_compressed_bytes_read += salt_len + 2 + AUTH_CODE_SIZE;
	zip->decrypted_bytes_remaining = 0;

	zip->entry->compression = zip->entry->aes_extra.compression;
	return (zip_alloc_decryption_buffer(a));

truncated:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Truncated ZIP file data"");
	return (ARCHIVE_FATAL);
corrupted:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Corrupted ZIP file data"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1285.cpp,"[9, 0, 1, 0, 4, 0, 9, 1, 3, 1, 12, 2, 3, 0, 4, 196, 0, 0, 8, 9, 0, 0, 2, 41, 0, 0, 0, 0, 4, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 1, 107, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 5, 0, 12, 10, 1, 0, 18, 0, 0, 27, 0, 47, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1285.cpp,84
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1856,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Corrupted ZIP file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1286.cpp,"{
	struct zip *zip = (struct zip *)(a->format->data);
	const void *p;
	const uint8_t *pv;
	size_t key_len, salt_len;
	uint8_t derived_key[MAX_DERIVED_KEY_BUF_SIZE];
	int retry;
	int r;

	if (zip->cctx_valid || zip->hctx_valid)
		return (ARCHIVE_OK);

	switch (zip->entry->aes_extra.strength) {
	case 1: salt_len = 8;  key_len = 16; break;
	case 2: salt_len = 12; key_len = 24; break;
	case 3: salt_len = 16; key_len = 32; break;
	default: goto corrupted;
	}
	p = __archive_read_ahead(a, salt_len + 2, NULL);
	if (p == NULL)
		goto truncated;

	for (retry = 0;; retry++) {
		const char *passphrase;

		passphrase = __archive_read_next_passphrase(a);
		if (passphrase == NULL) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    (retry > 0)?
				""Incorrect passphrase"":
				""Passphrase required for this entry"");
			return (ARCHIVE_FAILED);
		}
		memset(derived_key, 0, sizeof(derived_key));
		r = archive_pbkdf2_sha1(passphrase, strlen(passphrase),
		    p, salt_len, 1000, derived_key, key_len * 2 + 2);
		if (r != 0) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Decryption is unsupported due to lack of ""
			    ""crypto library"");
			return (ARCHIVE_FAILED);
		}

		/* Check password verification value. */
		pv = ((const uint8_t *)p) + salt_len;
		if (derived_key[key_len * 2] == pv[0] &&
		    derived_key[key_len * 2 + 1] == pv[1])
			break;/* The passphrase is OK. */
		if (retry > 10000) {
			/* Avoid infinity loop. */
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Too many incorrect passphrases"");
			return (ARCHIVE_FAILED);
		}
	}

	r = archive_decrypto_aes_ctr_init(&zip->cctx, derived_key, key_len);
	if (r != 0) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Decryption is unsupported due to lack of crypto library"");
		return (ARCHIVE_FAILED);
	}
	r = archive_hmac_sha1_init(&zip->hctx, derived_key + key_len, key_len);
	if (r != 0) {
		archive_decrypto_aes_ctr_release(&zip->cctx);
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize HMAC-SHA1"");
		return (ARCHIVE_FAILED);
	}
	zip->cctx_valid = zip->hctx_valid = 1;
	__archive_read_consume(a, salt_len + 2);
	zip->entry_bytes_remaining -= salt_len + 2 + AUTH_CODE_SIZE;
	if (0 == (zip->entry->zip_flags & ZIP_LENGTH_AT_END)
	    && zip->entry_bytes_remaining < 0)
		goto corrupted;
	zip->entry_compressed_bytes_read += salt_len + 2 + AUTH_CODE_SIZE;
	zip->decrypted_bytes_remaining = 0;

	zip->entry->compression = zip->entry->aes_extra.compression;
	return (zip_alloc_decryption_buffer(a));

truncated:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Truncated ZIP file data"");
	return (ARCHIVE_FATAL);
corrupted:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Corrupted ZIP file data"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1286.cpp,"[9, 0, 1, 0, 4, 0, 9, 1, 3, 1, 12, 2, 3, 0, 4, 196, 0, 0, 8, 9, 0, 0, 2, 41, 0, 0, 0, 0, 4, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 1, 107, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 5, 0, 12, 10, 1, 0, 18, 0, 0, 27, 0, 47, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1286.cpp,88
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1912,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported ZIP compression method (%s)"",
		    compression_name(zip->entry->compression));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1287.cpp,"{
	case 0:  /* No compression. */
		r =  zip_read_data_none(a, buff, size, offset);
		break;
#ifdef HAVE_ZLIB_H
	case 8: /* Deflate compression. */
		r =  zip_read_data_deflate(a, buff, size, offset);
		break;
#endif
	default: /* Unsupported compression. */
		/* Return a warning. */
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported ZIP compression method (%s)"",
		    compression_name(zip->entry->compression));
		/* We can't decompress this entry, but we will
		 * be able to skip() it and try the next entry. */
		return (ARCHIVE_FAILED);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1287.cpp,"[0, 0, 0, 0, 3, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 13, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1287.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1931,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""ZIP compressed data is wrong size ""
			    ""(read %jd, expected %jd)"",
			    (intmax_t)zip->entry_compressed_bytes_read,
			    (intmax_t)zip->entry->compressed_size);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1288.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""ZIP compressed data is wrong size ""
			    ""(read %jd, expected %jd)"",
			    (intmax_t)zip->entry_compressed_bytes_read,
			    (intmax_t)zip->entry->compressed_size);
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1288.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1288.cpp,70
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1942,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""ZIP uncompressed data is wrong size ""
			    ""(read %jd, expected %jd)\n"",
			    (intmax_t)zip->entry_uncompressed_bytes_read,
			    (intmax_t)zip->entry->uncompressed_size);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1289.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""ZIP uncompressed data is wrong size ""
			    ""(read %jd, expected %jd)\n"",
			    (intmax_t)zip->entry_uncompressed_bytes_read,
			    (intmax_t)zip->entry->uncompressed_size);
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1289.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1289.cpp,81
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,1954,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""ZIP bad CRC: 0x%lx should be 0x%lx"",
			    (unsigned long)zip->entry_crc32,
			    (unsigned long)zip->entry->crc32);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1290.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""ZIP bad CRC: 0x%lx should be 0x%lx"",
			    (unsigned long)zip->entry_crc32,
			    (unsigned long)zip->entry->crc32);
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1290.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1290.cpp,93
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2026,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""zip: hdrcharset option needs a character-set name""
			);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1291.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""zip: hdrcharset option needs a character-set name""
			)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1291.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1291.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2149,"archive_set_error(&a->archive, ENOMEM,
			    ""Out  of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1292.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Out  of memory"");
			return ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1292.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1292.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2282,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Truncated ZIP file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1293.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Truncated ZIP file data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1293.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1293.cpp,66
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2320,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate zip data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1294.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate zip data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1294.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1294.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2671,"archive_set_error(&a->archive,
			    -1, ""Invalid central directory signature"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1295.cpp,"{
			archive_set_error(&a->archive,
			    -1, ""Invalid central directory signature"");
			return ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1295.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1295.cpp,73
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2736,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated ZIP file header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1296.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated ZIP file header"");
			return ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1296.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1296.cpp,138
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2810,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1297.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1297.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1297.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2817,"archive_set_error(&a->archive, -1, ""Damaged Zip archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1298.cpp,"{
		archive_set_error(&a->archive, -1, ""Damaged Zip archive"");
		return ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1298.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1298.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2840,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Malformed OS X metadata entry: inconsistent size"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1299.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Malformed OS X metadata entry: inconsistent size"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1299.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1299.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2850,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported ZIP compression method (%s)"",
		    compression_name(rsrc->compression));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1300.cpp,"{
	case 0:  /* No compression. */
		if (rsrc->uncompressed_size != rsrc->compressed_size) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Malformed OS X metadata entry: inconsistent size"");
			return (ARCHIVE_FATAL);
		}
#ifdef HAVE_ZLIB_H
	case 8: /* Deflate compression. */
#endif
		break;
	default: /* Unsupported compression. */
		/* Return a warning. */
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported ZIP compression method (%s)"",
		    compression_name(rsrc->compression));
		/* We can't decompress this entry, but we will
		 * be able to skip() it and try the next entry. */
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1300.cpp,"[1, 0, 0, 0, 1, 0, 2, 0, 2, 1, 2, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 2, 0, 8, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1300.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2859,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Mac metadata is too large: %jd > 4M bytes"",
		    (intmax_t)rsrc->uncompressed_size);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1301.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Mac metadata is too large: %jd > 4M bytes"",
		    (intmax_t)rsrc->uncompressed_size);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1301.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1301.cpp,33
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2865,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Mac metadata is too large: %jd > 4M bytes"",
		    (intmax_t)rsrc->compressed_size);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1302.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Mac metadata is too large: %jd > 4M bytes"",
		    (intmax_t)rsrc->compressed_size);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1302.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1302.cpp,39
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2873,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for Mac metadata"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1303.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for Mac metadata"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1303.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1303.cpp,47
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2898,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated ZIP file header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1304.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated ZIP file header"");
			ret = ARCHIVE_WARN;
			goto exit_mac_metadata;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1304.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1304.cpp,72
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2941,"archive_set_error(&a->archive, ENOMEM,
				    ""Out of memory for ZIP decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1305.cpp,"{
			case Z_OK:
				break;
			case Z_STREAM_END:
				eof = 1;
				break;
			case Z_MEM_ERROR:
				archive_set_error(&a->archive, ENOMEM,
				    ""Out of memory for ZIP decompression"");
				ret = ARCHIVE_FATAL;
				goto exit_mac_metadata;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""ZIP decompression failed (%d)"", r);
				ret = ARCHIVE_FATAL;
				goto exit_mac_metadata;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1305.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 3, 1, 1, 0, 2, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1305.cpp,115
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,2946,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""ZIP decompression failed (%d)"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1306.cpp,"{
			case Z_OK:
				break;
			case Z_STREAM_END:
				eof = 1;
				break;
			case Z_MEM_ERROR:
				archive_set_error(&a->archive, ENOMEM,
				    ""Out of memory for ZIP decompression"");
				ret = ARCHIVE_FATAL;
				goto exit_mac_metadata;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""ZIP decompression failed (%d)"", r);
				ret = ARCHIVE_FATAL;
				goto exit_mac_metadata;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1306.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 3, 1, 1, 0, 2, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1306.cpp,120
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.cpp,3078,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate zip data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1307.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate zip data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1307.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1307.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,457,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate iso9660 data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1308.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate iso9660 data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1308.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1308.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,969,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Ignoring out-of-order directory (%s) %jd > %jd"",
		    parent->name.s,
		    (intmax_t)iso9660->current_position,
		    (intmax_t)parent->offset);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1309.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Ignoring out-of-order directory (%s) %jd > %jd"",
		    parent->name.s,
		    (intmax_t)iso9660->current_position,
		    (intmax_t)parent->offset);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1309.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1309.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,977,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Directory is beyond end-of-media: %s"",
		    parent->name.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1310.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Directory is beyond end-of-media: %s"",
		    parent->name.s);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1310.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1310.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,996,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to read full block when scanning ""
		    ""ISO9660 directory list"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1311.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to read full block when scanning ""
		    ""ISO9660 directory list"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1311.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1311.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1041,"archive_set_error(
					    &a->archive, ENOMEM,
					    ""No memory for multi extent"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1312.cpp,"{
					archive_set_error(
					    &a->archive, ENOMEM,
					    ""No memory for multi extent"");
					__archive_read_consume(a, skip_size);
					return (ARCHIVE_FATAL);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1312.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1312.cpp,88
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1101,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to read full block when scanning ""
		    ""ISO9660 directory list"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1313.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to read full block when scanning ""
		    ""ISO9660 directory list"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1313.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1313.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1140,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Failed to read full block when scanning ""
			    ""ISO9660 directory list"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1314.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Failed to read full block when scanning ""
			    ""ISO9660 directory list"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1314.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1314.cpp,64
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1207,"archive_set_error(&a->archive, ENOMEM,
				    ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1315.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""No memory"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1315.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1315.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1215,"archive_set_error(&a->archive, ENOMEM,
				    ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1316.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""No memory"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1316.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1316.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1224,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Pathname is too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1317.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Pathname is too long"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1317.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1317.cpp,60
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1236,"archive_set_error(&a->archive, ENOMEM,
				    ""No memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1318.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""No memory for Pathname"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1318.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1318.cpp,72
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1240,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Pathname cannot be converted ""
			    ""from %s to current locale."",
			    archive_string_conversion_charset_name(
			      iso9660->sconv_utf16be));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1319.cpp,"{
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""No memory for Pathname"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Pathname cannot be converted ""
			    ""from %s to current locale."",
			    archive_string_conversion_charset_name(
			      iso9660->sconv_utf16be));

			rd_r = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1319.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1319.cpp,76
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1252,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Pathname is too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1320.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Pathname is too long"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1320.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1320.cpp,88
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1267,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""File is beyond end-of-media: %s"",
		    archive_entry_pathname(entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1321.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""File is beyond end-of-media: %s"",
		    archive_entry_pathname(entry));
		iso9660->entry_bytes_remaining = 0;
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1321.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1321.cpp,103
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1305,"archive_set_error(&a->archive, ENOMEM,
					    ""No memory for Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1322.cpp,"{
					archive_set_error(&a->archive, ENOMEM,
					    ""No memory for Linkname"");
					return (ARCHIVE_FATAL);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1322.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1322.cpp,141
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1309,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Linkname cannot be converted ""
				    ""from %s to current locale."",
				    archive_string_conversion_charset_name(
				      iso9660->sconv_utf16be));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1323.cpp,"{
				if (errno == ENOMEM) {
					archive_set_error(&a->archive, ENOMEM,
					    ""No memory for Linkname"");
					return (ARCHIVE_FATAL);
				}
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Linkname cannot be converted ""
				    ""from %s to current locale."",
				    archive_string_conversion_charset_name(
				      iso9660->sconv_utf16be));
				rd_r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1323.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1323.cpp,145
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1339,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Ignoring out-of-order file @%jx (%s) %jd < %jd"",
			    (intmax_t)file->number,
			    iso9660->pathname.s,
			    (intmax_t)file->offset,
			    (intmax_t)iso9660->current_position);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1324.cpp,"{
			/* We can't seek backwards to extract it, so issue
			 * a warning.  Note that this can only happen if
			 * this entry was added to the heap after we passed
			 * this offset, that is, only if the directory
			 * mentioning this entry is later than the body of
			 * the entry. Such layouts are very unusual; most
			 * ISO9660 writers lay out and record all directory
			 * information first, then store all file bodies. */
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Ignoring out-of-order file @%jx (%s) %jd < %jd"",
			    (intmax_t)file->number,
			    iso9660->pathname.s,
			    (intmax_t)file->offset,
			    (intmax_t)iso9660->current_position);
			iso9660->entry_bytes_remaining = 0;
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1324.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1324.cpp,175
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1424,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated zisofs file body"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1325.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated zisofs file body"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1325.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1325.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1449,"archive_set_error(&a->archive, ENOMEM,
				    ""No memory for zisofs decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1326.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""No memory for zisofs decompression"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1326.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1326.cpp,42
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1464,"archive_set_error(&a->archive, ENOMEM,
				    ""No memory for zisofs decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1327.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""No memory for zisofs decompression"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1327.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1327.cpp,57
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1498,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Illegal zisofs file body"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1328.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Illegal zisofs file body"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1328.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1328.cpp,91
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1542,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Illegal zisofs block pointers"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1329.cpp,"{
			/* There isn't a pair of offsets. */
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Illegal zisofs block pointers"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1329.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1329.cpp,135
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1552,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Illegal zisofs block pointers(cannot seek)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1330.cpp,"{
			/* TODO: Should we seek offset of current file
			 * by bst ? */
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Illegal zisofs block pointers(cannot seek)"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1330.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1330.cpp,145
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1560,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Illegal zisofs block pointers"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1331.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Illegal zisofs block pointers"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1331.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1331.cpp,153
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1574,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize zisofs decompression."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1332.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize zisofs decompression."");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1332.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1332.cpp,167
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1606,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""zisofs decompression failed (%d)"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1333.cpp,"{
		case Z_OK: /* Decompressor made some progress.*/
		case Z_STREAM_END: /* Found end of stream. */
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""zisofs decompression failed (%d)"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1333.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1333.cpp,199
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1639,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""zisofs is not supported on this platform."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1334.cpp,"{

	(void)buff;/* UNUSED */
	(void)size;/* UNUSED */
	(void)offset;/* UNUSED */
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""zisofs is not supported on this platform."");
	return (ARCHIVE_FAILED);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1334.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1334.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1682,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Ignoring out-of-order file (%s) %jd < %jd"",
			    iso9660->pathname.s,
			    (intmax_t)iso9660->entry_content->offset,
			    (intmax_t)iso9660->current_position);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1335.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Ignoring out-of-order file (%s) %jd < %jd"",
			    iso9660->pathname.s,
			    (intmax_t)iso9660->entry_content->offset,
			    (intmax_t)iso9660->current_position);
			*buff = NULL;
			*size = 0;
			*offset = iso9660->entry_sparse_offset;
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1335.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1335.cpp,36
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1699,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Truncated input file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1336.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Truncated input file"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1336.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1336.cpp,53
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1732,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up zlib decompressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1337.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up zlib decompressor"");
			r = ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1337.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1337.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1771,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid length of directory record"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1338.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid length of directory record"");
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1338.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1338.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1777,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid length of file identifier"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1339.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid length of file identifier"");
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1339.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1339.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1791,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid location of extent of file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1340.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid location of extent of file"");
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1340.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1340.cpp,42
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1798,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid location of extent of file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1341.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid location of extent of file"");
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1341.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1341.cpp,49
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1807,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Directory structure contains loop"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1342.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Directory structure contains loop"");
			return (NULL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1342.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1342.cpp,58
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1816,"archive_set_error(&a->archive, ENOMEM,
		    ""No memory for file entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1343.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""No memory for file entry"");
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1343.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1343.cpp,67
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1864,"archive_set_error(&a->archive, ENOMEM,
			    ""No memory for file name"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1344.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""No memory for file name"");
			goto fail;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1344.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1344.cpp,115
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1987,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Invalid Rockridge RE"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1345.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Invalid Rockridge RE"");
				goto fail;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1345.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1345.cpp,238
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,1996,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Invalid Rockridge RE and CL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1346.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Invalid Rockridge RE and CL"");
				goto fail;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1346.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1346.cpp,247
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2005,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Invalid Rockridge RE"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1347.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Invalid Rockridge RE"");
				goto fail;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1347.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1347.cpp,256
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2019,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Invalid Rockridge CL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1348.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Invalid Rockridge CL"");
				goto fail;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1348.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1348.cpp,270
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2028,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Invalid Rockridge CL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1349.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Invalid Rockridge CL"");
				goto fail;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1349.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1349.cpp,279
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2046,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Invalid Rockridge CL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1350.cpp,"{
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Invalid Rockridge CL"");
					goto fail;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1350.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1350.cpp,297
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2054,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Invalid Rockridge CL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1351.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Invalid Rockridge CL"");
				goto fail;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1351.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1351.cpp,305
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2065,"fprintf(stderr, ""\n ** Unrecognized flag: "");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1352.cpp,"{
		fprintf(stderr, ""\n ** Unrecognized flag: "");
		dump_isodirrec(stderr, isodirrec);
		fprintf(stderr, ""\n"");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1352.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1352.cpp,316
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2067,"fprintf(stderr, ""\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1353.cpp,"{
		fprintf(stderr, ""\n ** Unrecognized flag: "");
		dump_isodirrec(stderr, isodirrec);
		fprintf(stderr, ""\n"");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1353.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1353.cpp,318
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2069,"fprintf(stderr, ""\n ** Unrecognized sequence number: "");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1354.cpp,"{
		fprintf(stderr, ""\n ** Unrecognized sequence number: "");
		dump_isodirrec(stderr, isodirrec);
		fprintf(stderr, ""\n"");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1354.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1354.cpp,320
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2071,"fprintf(stderr, ""\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1355.cpp,"{
		fprintf(stderr, ""\n ** Unrecognized sequence number: "");
		dump_isodirrec(stderr, isodirrec);
		fprintf(stderr, ""\n"");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1355.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1355.cpp,322
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2073,"fprintf(stderr, ""\n ** Unexpected file unit size: "");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1356.cpp,"{
		fprintf(stderr, ""\n ** Unexpected file unit size: "");
		dump_isodirrec(stderr, isodirrec);
		fprintf(stderr, ""\n"");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1356.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1356.cpp,324
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2075,"fprintf(stderr, ""\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1357.cpp,"{
		fprintf(stderr, ""\n ** Unexpected file unit size: "");
		dump_isodirrec(stderr, isodirrec);
		fprintf(stderr, ""\n"");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1357.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1357.cpp,326
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2077,"fprintf(stderr, ""\n ** Unexpected interleave: "");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1358.cpp,"{
		fprintf(stderr, ""\n ** Unexpected interleave: "");
		dump_isodirrec(stderr, isodirrec);
		fprintf(stderr, ""\n"");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1358.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1358.cpp,328
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2079,"fprintf(stderr, ""\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1359.cpp,"{
		fprintf(stderr, ""\n ** Unexpected interleave: "");
		dump_isodirrec(stderr, isodirrec);
		fprintf(stderr, ""\n"");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1359.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1359.cpp,330
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2081,"fprintf(stderr, ""\n ** Unexpected extended attribute length: "");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1360.cpp,"{
		fprintf(stderr, ""\n ** Unexpected extended attribute length: "");
		dump_isodirrec(stderr, isodirrec);
		fprintf(stderr, ""\n"");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1360.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1360.cpp,332
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2083,"fprintf(stderr, ""\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1361.cpp,"{
		fprintf(stderr, ""\n ** Unexpected extended attribute length: "");
		dump_isodirrec(stderr, isodirrec);
		fprintf(stderr, ""\n"");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1361.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1361.cpp,334
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2277,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid parameter in SUSP \""CE\"" extension"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1362.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid parameter in SUSP \""CE\"" extension"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1362.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1362.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2293,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1363.cpp,"{
			archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1363.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1363.cpp,35
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2298,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1364.cpp,"{
			archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1364.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1364.cpp,40
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2389,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to read full block when scanning ""
			    ""ISO9660 directory list"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1365.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to read full block when scanning ""
			    ""ISO9660 directory list"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1365.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1365.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2398,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Malformed CE information"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1366.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Malformed CE information"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1366.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1366.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,2911,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Failed to connect 'CL' pointer to 'RE' rr_moved pointer of ""
	    ""Rockridge extensions: current position = %jd, CL offset = %jd"",
	    (intmax_t)iso9660->current_position, (intmax_t)file->cl_offset);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1367.cpp,"{
	struct file_info *file;
	struct {
		struct file_info	*first;
		struct file_info	**last;
	}	empty_files;
	int64_t number;
	int count;

	file = cache_get_entry(iso9660);
	if (file != NULL) {
		*pfile = file;
		return (ARCHIVE_OK);
	}

	for (;;) {
		struct file_info *re, *d;

		*pfile = file = next_entry(iso9660);
		if (file == NULL) {
			/*
			 * If directory entries all which are descendant of
			 * rr_moved are still remaining, expose their.
			 */
			if (iso9660->re_files.first != NULL && 
			    iso9660->rr_moved != NULL &&
			    iso9660->rr_moved->rr_moved_has_re_only)
				/* Expose ""rr_moved"" entry. */
				cache_add_entry(iso9660, iso9660->rr_moved);
			while ((re = re_get_entry(iso9660)) != NULL) {
				/* Expose its descendant dirs. */
				while ((d = rede_get_entry(re)) != NULL)
					cache_add_entry(iso9660, d);
			}
			if (iso9660->cache_files.first != NULL)
				return (next_cache_entry(a, iso9660, pfile));
			return (ARCHIVE_EOF);
		}

		if (file->cl_offset) {
			struct file_info *first_re = NULL;
			int nexted_re = 0;

			/*
			 * Find ""RE"" dir for the current file, which
			 * has ""CL"" flag.
			 */
			while ((re = re_get_entry(iso9660))
			    != first_re) {
				if (first_re == NULL)
					first_re = re;
				if (re->offset == file->cl_offset) {
					re->parent->subdirs--;
					re->parent = file->parent;
					re->re = 0;
					if (re->parent->re_descendant) {
						nexted_re = 1;
						re->re_descendant = 1;
						if (rede_add_entry(re) < 0)
							goto fatal_rr;
						/* Move a list of descendants
						 * to a new ancestor. */
						while ((d = rede_get_entry(
						    re)) != NULL)
							if (rede_add_entry(d)
							    < 0)
								goto fatal_rr;
						break;
					}
					/* Replace the current file
					 * with ""RE"" dir */
					*pfile = file = re;
					/* Expose its descendant */
					while ((d = rede_get_entry(
					    file)) != NULL)
						cache_add_entry(
						    iso9660, d);
					break;
				} else
					re_add_entry(iso9660, re);
			}
			if (nexted_re) {
				/*
				 * Do not expose this at this time
				 * because we have not gotten its full-path
				 * name yet.
				 */
				continue;
			}
		} else if ((file->mode & AE_IFMT) == AE_IFDIR) {
			int r;

			/* Read file entries in this dir. */
			r = read_children(a, file);
			if (r != ARCHIVE_OK)
				return (r);

			/*
			 * Handle a special dir of Rockridge extensions,
			 * ""rr_moved"".
			 */
			if (file->rr_moved) {
				/*
				 * If this has only the subdirectories which
				 * have ""RE"" flags, do not expose at this time.
				 */
				if (file->rr_moved_has_re_only)
					continue;
				/* Otherwise expose ""rr_moved"" entry. */
			} else if (file->re) {
				/*
				 * Do not expose this at this time
				 * because we have not gotten its full-path
				 * name yet.
				 */
				re_add_entry(iso9660, file);
				continue;
			} else if (file->re_descendant) {
				/*
				 * If the top level ""RE"" entry of this entry
				 * is not exposed, we, accordingly, should not
				 * expose this entry at this time because
				 * we cannot make its proper full-path name.
				 */
				if (rede_add_entry(file) == 0)
					continue;
				/* Otherwise we can expose this entry because
				 * it seems its top level ""RE"" has already been
				 * exposed. */
			}
		}
		break;
	}

	if ((file->mode & AE_IFMT) != AE_IFREG || file->number == -1)
		return (ARCHIVE_OK);

	count = 0;
	number = file->number;
	iso9660->cache_files.first = NULL;
	iso9660->cache_files.last = &(iso9660->cache_files.first);
	empty_files.first = NULL;
	empty_files.last = &empty_files.first;
	/* Collect files which has the same file serial number.
	 * Peek pending_files so that file which number is different
	 * is not put back. */
	while (iso9660->pending_files.used > 0 &&
	    (iso9660->pending_files.files[0]->number == -1 ||
	     iso9660->pending_files.files[0]->number == number)) {
		if (file->number == -1) {
			/* This file has the same offset
			 * but it's wrong offset which empty files
			 * and symlink files have.
			 * NOTE: This wrong offset was recorded by
			 * old mkisofs utility. If ISO images is
			 * created by latest mkisofs, this does not
			 * happen.
			 */
			file->next = NULL;
			*empty_files.last = file;
			empty_files.last = &(file->next);
		} else {
			count++;
			cache_add_entry(iso9660, file);
		}
		file = next_entry(iso9660);
	}

	if (count == 0) {
		*pfile = file;
		return ((file == NULL)?ARCHIVE_EOF:ARCHIVE_OK);
	}
	if (file->number == -1) {
		file->next = NULL;
		*empty_files.last = file;
		empty_files.last = &(file->next);
	} else {
		count++;
		cache_add_entry(iso9660, file);
	}

	if (count > 1) {
		/* The count is the same as number of hardlink,
		 * so much so that each nlinks of files in cache_file
		 * is overwritten by value of the count.
		 */
		for (file = iso9660->cache_files.first;
		    file != NULL; file = file->next)
			file->nlinks = count;
	}
	/* If there are empty files, that files are added
	 * to the tail of the cache_files. */
	if (empty_files.first != NULL) {
		*iso9660->cache_files.last = empty_files.first;
		iso9660->cache_files.last = empty_files.last;
	}
	*pfile = cache_get_entry(iso9660);
	return ((*pfile == NULL)?ARCHIVE_EOF:ARCHIVE_OK);

fatal_rr:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Failed to connect 'CL' pointer to 'RE' rr_moved pointer of ""
	    ""Rockridge extensions: current position = %jd, CL offset = %jd"",
	    (intmax_t)iso9660->current_position, (intmax_t)file->cl_offset);
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1367.cpp,"[24, 6, 2, 0, 3, 4, 8, 0, 0, 0, 37, 1, 2, 0, 0, 335, 0, 0, 9, 11, 0, 0, 4, 19, 0, 0, 0, 0, 7, 0, 22, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 209, 2, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 2, 0, 34, 26, 5, 0, 22, 0, 0, 39, 3, 36, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1367.cpp,203
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,3012,"archive_set_error(&a->archive,
			    ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1368.cpp,"{
			archive_set_error(&a->archive,
			    ENOMEM, ""Out of memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1368.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1368.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,3019,"archive_set_error(&a->archive,
			    ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1369.cpp,"{
			archive_set_error(&a->archive,
			    ENOMEM, ""Out of memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1369.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1369.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,3241,"fprintf(out, "" l %d,"",
	    toi(isodirrec + DR_length_offset, DR_length_size));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1370.cpp,"{
	fprintf(out, "" l %d,"",
	    toi(isodirrec + DR_length_offset, DR_length_size));
	fprintf(out, "" a %d,"",
	    toi(isodirrec + DR_ext_attr_length_offset, DR_ext_attr_length_size));
	fprintf(out, "" ext 0x%x,"",
	    toi(isodirrec + DR_extent_offset, DR_extent_size));
	fprintf(out, "" s %d,"",
	    toi(isodirrec + DR_size_offset, DR_extent_size));
	fprintf(out, "" f 0x%x,"",
	    toi(isodirrec + DR_flags_offset, DR_flags_size));
	fprintf(out, "" u %d,"",
	    toi(isodirrec + DR_file_unit_size_offset, DR_file_unit_size_size));
	fprintf(out, "" ilv %d,"",
	    toi(isodirrec + DR_interleave_offset, DR_interleave_size));
	fprintf(out, "" seq %d,"",
	    toi(isodirrec + DR_volume_sequence_number_offset,
		DR_volume_sequence_number_size));
	fprintf(out, "" nl %d:"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size));
	fprintf(out, "" `%.*s'"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size),
		isodirrec + DR_name_offset);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1370.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 10, 0, 51, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1370.cpp,3
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,3243,"fprintf(out, "" a %d,"",
	    toi(isodirrec + DR_ext_attr_length_offset, DR_ext_attr_length_size));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1371.cpp,"{
	fprintf(out, "" l %d,"",
	    toi(isodirrec + DR_length_offset, DR_length_size));
	fprintf(out, "" a %d,"",
	    toi(isodirrec + DR_ext_attr_length_offset, DR_ext_attr_length_size));
	fprintf(out, "" ext 0x%x,"",
	    toi(isodirrec + DR_extent_offset, DR_extent_size));
	fprintf(out, "" s %d,"",
	    toi(isodirrec + DR_size_offset, DR_extent_size));
	fprintf(out, "" f 0x%x,"",
	    toi(isodirrec + DR_flags_offset, DR_flags_size));
	fprintf(out, "" u %d,"",
	    toi(isodirrec + DR_file_unit_size_offset, DR_file_unit_size_size));
	fprintf(out, "" ilv %d,"",
	    toi(isodirrec + DR_interleave_offset, DR_interleave_size));
	fprintf(out, "" seq %d,"",
	    toi(isodirrec + DR_volume_sequence_number_offset,
		DR_volume_sequence_number_size));
	fprintf(out, "" nl %d:"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size));
	fprintf(out, "" `%.*s'"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size),
		isodirrec + DR_name_offset);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1371.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 10, 0, 51, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1371.cpp,5
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,3245,"fprintf(out, "" ext 0x%x,"",
	    toi(isodirrec + DR_extent_offset, DR_extent_size));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1372.cpp,"{
	fprintf(out, "" l %d,"",
	    toi(isodirrec + DR_length_offset, DR_length_size));
	fprintf(out, "" a %d,"",
	    toi(isodirrec + DR_ext_attr_length_offset, DR_ext_attr_length_size));
	fprintf(out, "" ext 0x%x,"",
	    toi(isodirrec + DR_extent_offset, DR_extent_size));
	fprintf(out, "" s %d,"",
	    toi(isodirrec + DR_size_offset, DR_extent_size));
	fprintf(out, "" f 0x%x,"",
	    toi(isodirrec + DR_flags_offset, DR_flags_size));
	fprintf(out, "" u %d,"",
	    toi(isodirrec + DR_file_unit_size_offset, DR_file_unit_size_size));
	fprintf(out, "" ilv %d,"",
	    toi(isodirrec + DR_interleave_offset, DR_interleave_size));
	fprintf(out, "" seq %d,"",
	    toi(isodirrec + DR_volume_sequence_number_offset,
		DR_volume_sequence_number_size));
	fprintf(out, "" nl %d:"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size));
	fprintf(out, "" `%.*s'"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size),
		isodirrec + DR_name_offset);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1372.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 10, 0, 51, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1372.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,3247,"fprintf(out, "" s %d,"",
	    toi(isodirrec + DR_size_offset, DR_extent_size));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1373.cpp,"{
	fprintf(out, "" l %d,"",
	    toi(isodirrec + DR_length_offset, DR_length_size));
	fprintf(out, "" a %d,"",
	    toi(isodirrec + DR_ext_attr_length_offset, DR_ext_attr_length_size));
	fprintf(out, "" ext 0x%x,"",
	    toi(isodirrec + DR_extent_offset, DR_extent_size));
	fprintf(out, "" s %d,"",
	    toi(isodirrec + DR_size_offset, DR_extent_size));
	fprintf(out, "" f 0x%x,"",
	    toi(isodirrec + DR_flags_offset, DR_flags_size));
	fprintf(out, "" u %d,"",
	    toi(isodirrec + DR_file_unit_size_offset, DR_file_unit_size_size));
	fprintf(out, "" ilv %d,"",
	    toi(isodirrec + DR_interleave_offset, DR_interleave_size));
	fprintf(out, "" seq %d,"",
	    toi(isodirrec + DR_volume_sequence_number_offset,
		DR_volume_sequence_number_size));
	fprintf(out, "" nl %d:"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size));
	fprintf(out, "" `%.*s'"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size),
		isodirrec + DR_name_offset);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1373.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 10, 0, 51, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1373.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,3249,"fprintf(out, "" f 0x%x,"",
	    toi(isodirrec + DR_flags_offset, DR_flags_size));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1374.cpp,"{
	fprintf(out, "" l %d,"",
	    toi(isodirrec + DR_length_offset, DR_length_size));
	fprintf(out, "" a %d,"",
	    toi(isodirrec + DR_ext_attr_length_offset, DR_ext_attr_length_size));
	fprintf(out, "" ext 0x%x,"",
	    toi(isodirrec + DR_extent_offset, DR_extent_size));
	fprintf(out, "" s %d,"",
	    toi(isodirrec + DR_size_offset, DR_extent_size));
	fprintf(out, "" f 0x%x,"",
	    toi(isodirrec + DR_flags_offset, DR_flags_size));
	fprintf(out, "" u %d,"",
	    toi(isodirrec + DR_file_unit_size_offset, DR_file_unit_size_size));
	fprintf(out, "" ilv %d,"",
	    toi(isodirrec + DR_interleave_offset, DR_interleave_size));
	fprintf(out, "" seq %d,"",
	    toi(isodirrec + DR_volume_sequence_number_offset,
		DR_volume_sequence_number_size));
	fprintf(out, "" nl %d:"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size));
	fprintf(out, "" `%.*s'"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size),
		isodirrec + DR_name_offset);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1374.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 10, 0, 51, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1374.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,3251,"fprintf(out, "" u %d,"",
	    toi(isodirrec + DR_file_unit_size_offset, DR_file_unit_size_size));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1375.cpp,"{
	fprintf(out, "" l %d,"",
	    toi(isodirrec + DR_length_offset, DR_length_size));
	fprintf(out, "" a %d,"",
	    toi(isodirrec + DR_ext_attr_length_offset, DR_ext_attr_length_size));
	fprintf(out, "" ext 0x%x,"",
	    toi(isodirrec + DR_extent_offset, DR_extent_size));
	fprintf(out, "" s %d,"",
	    toi(isodirrec + DR_size_offset, DR_extent_size));
	fprintf(out, "" f 0x%x,"",
	    toi(isodirrec + DR_flags_offset, DR_flags_size));
	fprintf(out, "" u %d,"",
	    toi(isodirrec + DR_file_unit_size_offset, DR_file_unit_size_size));
	fprintf(out, "" ilv %d,"",
	    toi(isodirrec + DR_interleave_offset, DR_interleave_size));
	fprintf(out, "" seq %d,"",
	    toi(isodirrec + DR_volume_sequence_number_offset,
		DR_volume_sequence_number_size));
	fprintf(out, "" nl %d:"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size));
	fprintf(out, "" `%.*s'"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size),
		isodirrec + DR_name_offset);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1375.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 10, 0, 51, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1375.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,3253,"fprintf(out, "" ilv %d,"",
	    toi(isodirrec + DR_interleave_offset, DR_interleave_size));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1376.cpp,"{
	fprintf(out, "" l %d,"",
	    toi(isodirrec + DR_length_offset, DR_length_size));
	fprintf(out, "" a %d,"",
	    toi(isodirrec + DR_ext_attr_length_offset, DR_ext_attr_length_size));
	fprintf(out, "" ext 0x%x,"",
	    toi(isodirrec + DR_extent_offset, DR_extent_size));
	fprintf(out, "" s %d,"",
	    toi(isodirrec + DR_size_offset, DR_extent_size));
	fprintf(out, "" f 0x%x,"",
	    toi(isodirrec + DR_flags_offset, DR_flags_size));
	fprintf(out, "" u %d,"",
	    toi(isodirrec + DR_file_unit_size_offset, DR_file_unit_size_size));
	fprintf(out, "" ilv %d,"",
	    toi(isodirrec + DR_interleave_offset, DR_interleave_size));
	fprintf(out, "" seq %d,"",
	    toi(isodirrec + DR_volume_sequence_number_offset,
		DR_volume_sequence_number_size));
	fprintf(out, "" nl %d:"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size));
	fprintf(out, "" `%.*s'"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size),
		isodirrec + DR_name_offset);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1376.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 10, 0, 51, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1376.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,3255,"fprintf(out, "" seq %d,"",
	    toi(isodirrec + DR_volume_sequence_number_offset,
		DR_volume_sequence_number_size));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1377.cpp,"{
	fprintf(out, "" l %d,"",
	    toi(isodirrec + DR_length_offset, DR_length_size));
	fprintf(out, "" a %d,"",
	    toi(isodirrec + DR_ext_attr_length_offset, DR_ext_attr_length_size));
	fprintf(out, "" ext 0x%x,"",
	    toi(isodirrec + DR_extent_offset, DR_extent_size));
	fprintf(out, "" s %d,"",
	    toi(isodirrec + DR_size_offset, DR_extent_size));
	fprintf(out, "" f 0x%x,"",
	    toi(isodirrec + DR_flags_offset, DR_flags_size));
	fprintf(out, "" u %d,"",
	    toi(isodirrec + DR_file_unit_size_offset, DR_file_unit_size_size));
	fprintf(out, "" ilv %d,"",
	    toi(isodirrec + DR_interleave_offset, DR_interleave_size));
	fprintf(out, "" seq %d,"",
	    toi(isodirrec + DR_volume_sequence_number_offset,
		DR_volume_sequence_number_size));
	fprintf(out, "" nl %d:"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size));
	fprintf(out, "" `%.*s'"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size),
		isodirrec + DR_name_offset);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1377.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 10, 0, 51, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1377.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,3258,"fprintf(out, "" nl %d:"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1378.cpp,"{
	fprintf(out, "" l %d,"",
	    toi(isodirrec + DR_length_offset, DR_length_size));
	fprintf(out, "" a %d,"",
	    toi(isodirrec + DR_ext_attr_length_offset, DR_ext_attr_length_size));
	fprintf(out, "" ext 0x%x,"",
	    toi(isodirrec + DR_extent_offset, DR_extent_size));
	fprintf(out, "" s %d,"",
	    toi(isodirrec + DR_size_offset, DR_extent_size));
	fprintf(out, "" f 0x%x,"",
	    toi(isodirrec + DR_flags_offset, DR_flags_size));
	fprintf(out, "" u %d,"",
	    toi(isodirrec + DR_file_unit_size_offset, DR_file_unit_size_size));
	fprintf(out, "" ilv %d,"",
	    toi(isodirrec + DR_interleave_offset, DR_interleave_size));
	fprintf(out, "" seq %d,"",
	    toi(isodirrec + DR_volume_sequence_number_offset,
		DR_volume_sequence_number_size));
	fprintf(out, "" nl %d:"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size));
	fprintf(out, "" `%.*s'"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size),
		isodirrec + DR_name_offset);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1378.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 10, 0, 51, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1378.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.cpp,3260,"fprintf(out, "" `%.*s'"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size),
		isodirrec + DR_name_offset);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1379.cpp,"{
	fprintf(out, "" l %d,"",
	    toi(isodirrec + DR_length_offset, DR_length_size));
	fprintf(out, "" a %d,"",
	    toi(isodirrec + DR_ext_attr_length_offset, DR_ext_attr_length_size));
	fprintf(out, "" ext 0x%x,"",
	    toi(isodirrec + DR_extent_offset, DR_extent_size));
	fprintf(out, "" s %d,"",
	    toi(isodirrec + DR_size_offset, DR_extent_size));
	fprintf(out, "" f 0x%x,"",
	    toi(isodirrec + DR_flags_offset, DR_flags_size));
	fprintf(out, "" u %d,"",
	    toi(isodirrec + DR_file_unit_size_offset, DR_file_unit_size_size));
	fprintf(out, "" ilv %d,"",
	    toi(isodirrec + DR_interleave_offset, DR_interleave_size));
	fprintf(out, "" seq %d,"",
	    toi(isodirrec + DR_volume_sequence_number_offset,
		DR_volume_sequence_number_size));
	fprintf(out, "" nl %d:"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size));
	fprintf(out, "" `%.*s'"",
	    toi(isodirrec + DR_name_len_offset, DR_name_len_size),
		isodirrec + DR_name_offset);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1379.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 10, 0, 51, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1379.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write.cpp,305,"archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for output buffering"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1380.cpp,"{
		free(state);
		free(buffer);
		archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for output buffering"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1380.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1380.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write.cpp,372,"archive_set_error(&(a->archive),
					    -1, ""write overrun"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1381.cpp,"{
					archive_set_error(&(a->archive),
					    -1, ""write overrun"");
					return (ARCHIVE_FATAL);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1381.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1381.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write.cpp,623,"archive_set_error(&(a->archive), -1,
		    ""Format must be set before you can write to an archive."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1382.cpp,"{
		archive_set_error(&(a->archive), -1,
		    ""Format must be set before you can write to an archive."");
		a->archive.state = ARCHIVE_STATE_FATAL;
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1382.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1382.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write.cpp,643,"archive_set_error(&a->archive, 0,
		    ""Can't add archive to itself"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1383.cpp,"{
		archive_set_error(&a->archive, 0,
		    ""Can't add archive to itself"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1383.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1383.cpp,31
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,153,"archive_set_error(a, ENOMEM, ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1384.cpp,"{
	struct read_file_data *mine;
	const char *filename = NULL;
	if (filenames)
		filename = *(filenames++);

	archive_clear_error(a);
	do
	{
		if (filename == NULL)
			filename = """";
		mine = (struct read_file_data *)calloc(1,
			sizeof(*mine) + strlen(filename));
		if (mine == NULL)
			goto no_memory;
		strcpy(mine->filename.m, filename);
		mine->block_size = block_size;
		mine->fd = -1;
		mine->buffer = NULL;
		mine->st_mode = mine->use_lseek = 0;
		if (filename == NULL || filename[0] == '\0') {
			mine->filename_type = FNT_STDIN;
		} else
			mine->filename_type = FNT_MBS;
		if (archive_read_append_callback_data(a, mine) != (ARCHIVE_OK))
			return (ARCHIVE_FATAL);
		if (filenames == NULL)
			break;
		filename = *(filenames++);
	} while (filename != NULL && filename[0] != '\0');
	archive_read_set_open_callback(a, file_open);
	archive_read_set_read_callback(a, file_read);
	archive_read_set_skip_callback(a, file_skip);
	archive_read_set_close_callback(a, file_close);
	archive_read_set_switch_callback(a, file_switch);
	archive_read_set_seek_callback(a, file_seek);

	return (archive_read_open1(a));
no_memory:
	archive_set_error(a, ENOMEM, ""No memory"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1384.cpp,"[6, 0, 0, 1, 1, 0, 3, 0, 0, 0, 9, 1, 1, 0, 1, 97, 0, 0, 2, 2, 0, 0, 1, 9, 0, 0, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 57, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 7, 6, 1, 0, 14, 0, 0, 19, 0, 25, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1384.cpp,42
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,165,"archive_set_error(a, ENOMEM, ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1385.cpp,"{
		archive_set_error(a, ENOMEM, ""No memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1385.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1385.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,189,"archive_set_error(a, errno,
				    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1386.cpp,"archive_set_error(a, errno,
				    ""Can't allocate memory"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1386.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1386.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,192,"archive_set_error(a, EINVAL,
				    ""Failed to convert a wide-character""
				    "" filename to a multi-byte filename"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1387.cpp,"archive_set_error(a, EINVAL,
				    ""Failed to convert a wide-character""
				    "" filename to a multi-byte filename"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1387.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1387.cpp,35
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,255,"archive_set_error(a, errno,
			    ""Failed to open '%s'"", filename);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1388.cpp,"{
			archive_set_error(a, errno,
			    ""Failed to open '%s'"", filename);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1388.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1388.cpp,39
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,272,"archive_set_error(a, errno,
			    ""Failed to open '%S'"", wfilename);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1389.cpp,"{
			archive_set_error(a, errno,
			    ""Failed to open '%S'"", wfilename);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1389.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1389.cpp,56
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,277,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Unexpedted operation in archive_read_open_filename"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1390.cpp,"{
#if defined(_WIN32) && !defined(__CYGWIN__)
		wfilename = mine->filename.w;
		fd = _wopen(wfilename, O_RDONLY | O_BINARY);
		if (fd < 0 && errno == ENOENT) {
			wchar_t *fullpath;
			fullpath = __la_win_permissive_name_w(wfilename);
			if (fullpath != NULL) {
				fd = _wopen(fullpath, O_RDONLY | O_BINARY);
				free(fullpath);
			}
		}
		if (fd < 0) {
			archive_set_error(a, errno,
			    ""Failed to open '%S'"", wfilename);
			return (ARCHIVE_FATAL);
		}
#else
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""Unexpedted operation in archive_read_open_filename"");
		goto fail;
#endif
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1390.cpp,"[4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 1, 0, 0, 41, 0, 0, 1, 1, 0, 0, 0, 4, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 3, 1, 0, 8, 0, 0, 7, 0, 15, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1390.cpp,61
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,284,"archive_set_error(a, errno, ""Can't stat '%S'"",
			    wfilename);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1391.cpp,"archive_set_error(a, errno, ""Can't stat '%S'"",
			    wfilename)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1391.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1391.cpp,68
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,287,"archive_set_error(a, errno, ""Can't stat '%s'"",
			    filename);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1392.cpp,"archive_set_error(a, errno, ""Can't stat '%s'"",
			    filename)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1392.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1392.cpp,71
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,359,"archive_set_error(a, ENOMEM, ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1393.cpp,"{
		archive_set_error(a, ENOMEM, ""No memory"");
		goto fail;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1393.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1393.cpp,143
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,408,"archive_set_error(a, errno,
				    ""Error reading stdin"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1394.cpp,"archive_set_error(a, errno,
				    ""Error reading stdin"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1394.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1394.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,411,"archive_set_error(a, errno,
				    ""Error reading '%s'"", mine->filename.m);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1395.cpp,"archive_set_error(a, errno,
				    ""Error reading '%s'"", mine->filename.m)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1395.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1395.cpp,29
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,414,"archive_set_error(a, errno,
				    ""Error reading '%S'"", mine->filename.w);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1396.cpp,"archive_set_error(a, errno,
				    ""Error reading '%S'"", mine->filename.w)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1396.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1396.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,472,"archive_set_error(a, errno, ""Error seeking in stdin"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1397.cpp,"archive_set_error(a, errno, ""Error seeking in stdin"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1397.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1397.cpp,31
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,474,"archive_set_error(a, errno, ""Error seeking in '%s'"",
		    mine->filename.m);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1398.cpp,"archive_set_error(a, errno, ""Error seeking in '%s'"",
		    mine->filename.m)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1398.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1398.cpp,33
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,477,"archive_set_error(a, errno, ""Error seeking in '%S'"",
		    mine->filename.w);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1399.cpp,"archive_set_error(a, errno, ""Error seeking in '%S'"",
		    mine->filename.w)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1399.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1399.cpp,36
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,518,"archive_set_error(a, errno, ""Error seeking in stdin"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1400.cpp,"archive_set_error(a, errno, ""Error seeking in stdin"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1400.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1400.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,520,"archive_set_error(a, errno, ""Error seeking in '%s'"",
		    mine->filename.m);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1401.cpp,"archive_set_error(a, errno, ""Error seeking in '%s'"",
		    mine->filename.m)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1401.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1401.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_filename.cpp,523,"archive_set_error(a, errno, ""Error seeking in '%S'"",
		    mine->filename.w);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1402.cpp,"archive_set_error(a, errno, ""Error seeking in '%S'"",
		    mine->filename.w)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1402.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1402.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,179,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate gnutar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1403.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate gnutar data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1403.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1403.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,205,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: hdrcharset option needs a character-set name"",
			    a->format_name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1404.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: hdrcharset option needs a character-set name"",
			    a->format_name)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1404.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1404.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,320,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate ustar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1405.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate ustar data"");
				archive_wstring_free(&ws);
				return(ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1405.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1405.cpp,49
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,348,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate ustar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1406.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate ustar data"");
				archive_string_free(&as);
				return(ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1406.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1406.cpp,77
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,374,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate ustar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1407.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate ustar data"");
		return(ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1407.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1407.cpp,103
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,389,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathame"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1408.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathame"");
			ret = ARCHIVE_FATAL;
			goto exit_write_header;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1408.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1408.cpp,118
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,394,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate pathname '%s' to %s"",
		    archive_entry_pathname(entry),
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1409.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathame"");
			ret = ARCHIVE_FATAL;
			goto exit_write_header;
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate pathname '%s' to %s"",
		    archive_entry_pathname(entry),
		    archive_string_conversion_charset_name(sconv));
		ret2 = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1409.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1409.cpp,123
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,404,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Uname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1410.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Uname"");
			ret = ARCHIVE_FATAL;
			goto exit_write_header;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1410.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1410.cpp,133
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,409,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate uname '%s' to %s"",
		    archive_entry_uname(entry),
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1411.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Uname"");
			ret = ARCHIVE_FATAL;
			goto exit_write_header;
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate uname '%s' to %s"",
		    archive_entry_uname(entry),
		    archive_string_conversion_charset_name(sconv));
		ret2 = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1411.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1411.cpp,138
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,420,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Gname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1412.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Gname"");
			ret = ARCHIVE_FATAL;
			goto exit_write_header;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1412.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1412.cpp,149
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,425,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate gname '%s' to %s"",
		    archive_entry_gname(entry),
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1413.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Gname"");
			ret = ARCHIVE_FATAL;
			goto exit_write_header;
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate gname '%s' to %s"",
		    archive_entry_gname(entry),
		    archive_string_conversion_charset_name(sconv));
		ret2 = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1413.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1413.cpp,154
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,438,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1414.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");
			ret = ARCHIVE_FATAL;
			goto exit_write_header;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1414.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1414.cpp,167
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,443,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate linkname '%s' to %s"",
		    archive_entry_hardlink(entry),
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1415.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");
			ret = ARCHIVE_FATAL;
			goto exit_write_header;
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate linkname '%s' to %s"",
		    archive_entry_hardlink(entry),
		    archive_string_conversion_charset_name(sconv));
		ret2 = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1415.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1415.cpp,172
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,455,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1416.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");
				ret = ARCHIVE_FATAL;
				goto exit_write_header;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1416.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1416.cpp,184
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,460,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate linkname '%s' to %s"",
			    archive_entry_hardlink(entry),
			    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1417.cpp,"{
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");
				ret = ARCHIVE_FATAL;
				goto exit_write_header;
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate linkname '%s' to %s"",
			    archive_entry_hardlink(entry),
			    archive_string_conversion_charset_name(sconv));
			ret2 = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1417.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1417.cpp,189
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,537,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive socket"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1418.cpp,"{
		case AE_IFREG: tartype = '0' ; break;
		case AE_IFLNK: tartype = '2' ; break;
		case AE_IFCHR: tartype = '3' ; break;
		case AE_IFBLK: tartype = '4' ; break;
		case AE_IFDIR: tartype = '5' ; break;
		case AE_IFIFO: tartype = '6' ; break;
		case AE_IFSOCK:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive socket"");
			ret = ARCHIVE_FAILED;
			goto exit_write_header;
		default:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive this (mode=0%lo)"",
			    (unsigned long)archive_entry_mode(entry));
			ret = ARCHIVE_FAILED;
			goto exit_write_header;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1418.cpp,"[0, 0, 0, 0, 6, 0, 0, 0, 7, 1, 1, 0, 2, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 10, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1418.cpp,266
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,543,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive this (mode=0%lo)"",
			    (unsigned long)archive_entry_mode(entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1419.cpp,"{
		case AE_IFREG: tartype = '0' ; break;
		case AE_IFLNK: tartype = '2' ; break;
		case AE_IFCHR: tartype = '3' ; break;
		case AE_IFBLK: tartype = '4' ; break;
		case AE_IFDIR: tartype = '5' ; break;
		case AE_IFIFO: tartype = '6' ; break;
		case AE_IFSOCK:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive socket"");
			ret = ARCHIVE_FAILED;
			goto exit_write_header;
		default:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive this (mode=0%lo)"",
			    (unsigned long)archive_entry_mode(entry));
			ret = ARCHIVE_FAILED;
			goto exit_write_header;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1419.cpp,"[0, 0, 0, 0, 6, 0, 0, 0, 7, 1, 1, 0, 2, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 10, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1419.cpp,272
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,651,"archive_set_error(&a->archive, ERANGE,
		    ""Numeric user ID %jd too large"",
		    (intmax_t)archive_entry_uid(entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1420.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""Numeric user ID %jd too large"",
		    (intmax_t)archive_entry_uid(entry));
		ret = ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1420.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1420.cpp,79
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,660,"archive_set_error(&a->archive, ERANGE,
		    ""Numeric group ID %jd too large"",
		    (intmax_t)archive_entry_gid(entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1421.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""Numeric group ID %jd too large"",
		    (intmax_t)archive_entry_gid(entry));
		ret = ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1421.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1421.cpp,88
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,669,"archive_set_error(&a->archive, ERANGE,
		    ""File size out of range"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1422.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""File size out of range"");
		ret = ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1422.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1422.cpp,97
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,683,"archive_set_error(&a->archive, ERANGE,
			    ""Major device number too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1423.cpp,"{
			archive_set_error(&a->archive, ERANGE,
			    ""Major device number too large"");
			ret = ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1423.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1423.cpp,111
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.cpp,691,"archive_set_error(&a->archive, ERANGE,
			    ""Minor device number too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1424.cpp,"{
			archive_set_error(&a->archive, ERANGE,
			    ""Minor device number too large"");
			ret = ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1424.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1424.cpp,119
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_grzip.cpp,81,"archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external grzip program for grzip decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1425.cpp,"{
	struct archive_read *a = (struct archive_read *)_a;
	struct archive_read_filter_bidder *reader;

	archive_check_magic(_a, ARCHIVE_READ_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_read_support_filter_grzip"");

	if (__archive_read_get_bidder(a, &reader) != ARCHIVE_OK)
		return (ARCHIVE_FATAL);

	reader->data = NULL;
	reader->bid = grzip_bidder_bid;
	reader->init = grzip_bidder_init;
	reader->options = NULL;
	reader->free = grzip_reader_free;
	/* This filter always uses an external program. */
	archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external grzip program for grzip decompression"");
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1425.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 43, 0, 0, 2, 2, 0, 0, 1, 2, 0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 7, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1425.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter.cpp,68,"archive_set_error(a, EINVAL, ""No such filter"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1426.cpp,"{
	int i;

	for (i = 0; codes[i].code != -1; i++) {
		if (code == codes[i].code)
			return ((codes[i].setter)(a));
	}

	archive_set_error(a, EINVAL, ""No such filter"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1426.cpp,"[1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 22, 0, 0, 1, 1, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1426.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,131,"archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external xz program for xz decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1427.cpp,"{
	struct archive_read *a = (struct archive_read *)_a;
	struct archive_read_filter_bidder *bidder;

	archive_check_magic(_a, ARCHIVE_READ_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_read_support_filter_xz"");

	if (__archive_read_get_bidder(a, &bidder) != ARCHIVE_OK)
		return (ARCHIVE_FATAL);

	bidder->data = NULL;
	bidder->name = ""xz"";
	bidder->bid = xz_bidder_bid;
	bidder->init = xz_bidder_init;
	bidder->options = NULL;
	bidder->free = NULL;
#if HAVE_LZMA_H && HAVE_LIBLZMA
	return (ARCHIVE_OK);
#else
	archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external xz program for xz decompression"");
	return (ARCHIVE_WARN);
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1427.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 49, 0, 0, 2, 2, 0, 0, 1, 3, 0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 8, 0, 9, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1427.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,166,"archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external lzma program for lzma decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1428.cpp,"{
	struct archive_read *a = (struct archive_read *)_a;
	struct archive_read_filter_bidder *bidder;

	archive_check_magic(_a, ARCHIVE_READ_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_read_support_filter_lzma"");

	if (__archive_read_get_bidder(a, &bidder) != ARCHIVE_OK)
		return (ARCHIVE_FATAL);

	bidder->data = NULL;
	bidder->name = ""lzma"";
	bidder->bid = lzma_bidder_bid;
	bidder->init = lzma_bidder_init;
	bidder->options = NULL;
	bidder->free = NULL;
#if HAVE_LZMA_H && HAVE_LIBLZMA
	return (ARCHIVE_OK);
#else
	archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external lzma program for lzma decompression"");
	return (ARCHIVE_WARN);
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1428.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 49, 0, 0, 2, 2, 0, 0, 1, 3, 0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 8, 0, 9, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1428.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,202,"archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external lzip program for lzip decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1429.cpp,"{
	struct archive_read *a = (struct archive_read *)_a;
	struct archive_read_filter_bidder *bidder;

	archive_check_magic(_a, ARCHIVE_READ_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_read_support_filter_lzip"");

	if (__archive_read_get_bidder(a, &bidder) != ARCHIVE_OK)
		return (ARCHIVE_FATAL);

	bidder->data = NULL;
	bidder->name = ""lzip"";
	bidder->bid = lzip_bidder_bid;
	bidder->init = lzip_bidder_init;
	bidder->options = NULL;
	bidder->free = NULL;
#if HAVE_LZMA_H && HAVE_LIBLZMA
	return (ARCHIVE_OK);
#else
	archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external lzip program for lzip decompression"");
	return (ARCHIVE_WARN);
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1429.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 49, 0, 0, 2, 2, 0, 0, 1, 3, 0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 8, 0, 9, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1429.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,436,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Lzma library error: Cannot allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1430.cpp,"{
	case LZMA_STREAM_END: /* Found end of stream. */
	case LZMA_OK: /* Decompressor made some progress. */
		break;
	case LZMA_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Lzma library error: Cannot allocate memory"");
		break;
	case LZMA_MEMLIMIT_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Lzma library error: Out of memory"");
		break;
	case LZMA_FORMAT_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: format not recognized"");
		break;
	case LZMA_OPTIONS_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Invalid options"");
		break;
	case LZMA_DATA_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Corrupted input data"");
		break;
	case LZMA_BUF_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error:  No progress is possible"");
		break;
	default:
		/* Return an error. */
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma decompression failed:  Unknown error"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1430.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 1, 1, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 21, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1430.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,440,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Lzma library error: Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1431.cpp,"{
	case LZMA_STREAM_END: /* Found end of stream. */
	case LZMA_OK: /* Decompressor made some progress. */
		break;
	case LZMA_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Lzma library error: Cannot allocate memory"");
		break;
	case LZMA_MEMLIMIT_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Lzma library error: Out of memory"");
		break;
	case LZMA_FORMAT_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: format not recognized"");
		break;
	case LZMA_OPTIONS_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Invalid options"");
		break;
	case LZMA_DATA_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Corrupted input data"");
		break;
	case LZMA_BUF_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error:  No progress is possible"");
		break;
	default:
		/* Return an error. */
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma decompression failed:  Unknown error"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1431.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 1, 1, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 21, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1431.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,444,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: format not recognized"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1432.cpp,"{
	case LZMA_STREAM_END: /* Found end of stream. */
	case LZMA_OK: /* Decompressor made some progress. */
		break;
	case LZMA_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Lzma library error: Cannot allocate memory"");
		break;
	case LZMA_MEMLIMIT_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Lzma library error: Out of memory"");
		break;
	case LZMA_FORMAT_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: format not recognized"");
		break;
	case LZMA_OPTIONS_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Invalid options"");
		break;
	case LZMA_DATA_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Corrupted input data"");
		break;
	case LZMA_BUF_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error:  No progress is possible"");
		break;
	default:
		/* Return an error. */
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma decompression failed:  Unknown error"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1432.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 1, 1, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 21, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1432.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,449,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Invalid options"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1433.cpp,"{
	case LZMA_STREAM_END: /* Found end of stream. */
	case LZMA_OK: /* Decompressor made some progress. */
		break;
	case LZMA_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Lzma library error: Cannot allocate memory"");
		break;
	case LZMA_MEMLIMIT_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Lzma library error: Out of memory"");
		break;
	case LZMA_FORMAT_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: format not recognized"");
		break;
	case LZMA_OPTIONS_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Invalid options"");
		break;
	case LZMA_DATA_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Corrupted input data"");
		break;
	case LZMA_BUF_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error:  No progress is possible"");
		break;
	default:
		/* Return an error. */
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma decompression failed:  Unknown error"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1433.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 1, 1, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 21, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1433.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,454,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Corrupted input data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1434.cpp,"{
	case LZMA_STREAM_END: /* Found end of stream. */
	case LZMA_OK: /* Decompressor made some progress. */
		break;
	case LZMA_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Lzma library error: Cannot allocate memory"");
		break;
	case LZMA_MEMLIMIT_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Lzma library error: Out of memory"");
		break;
	case LZMA_FORMAT_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: format not recognized"");
		break;
	case LZMA_OPTIONS_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Invalid options"");
		break;
	case LZMA_DATA_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Corrupted input data"");
		break;
	case LZMA_BUF_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error:  No progress is possible"");
		break;
	default:
		/* Return an error. */
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma decompression failed:  Unknown error"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1434.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 1, 1, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 21, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1434.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,459,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error:  No progress is possible"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1435.cpp,"{
	case LZMA_STREAM_END: /* Found end of stream. */
	case LZMA_OK: /* Decompressor made some progress. */
		break;
	case LZMA_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Lzma library error: Cannot allocate memory"");
		break;
	case LZMA_MEMLIMIT_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Lzma library error: Out of memory"");
		break;
	case LZMA_FORMAT_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: format not recognized"");
		break;
	case LZMA_OPTIONS_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Invalid options"");
		break;
	case LZMA_DATA_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Corrupted input data"");
		break;
	case LZMA_BUF_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error:  No progress is possible"");
		break;
	default:
		/* Return an error. */
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma decompression failed:  Unknown error"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1435.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 1, 1, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 21, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1435.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,465,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma decompression failed:  Unknown error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1436.cpp,"{
	case LZMA_STREAM_END: /* Found end of stream. */
	case LZMA_OK: /* Decompressor made some progress. */
		break;
	case LZMA_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Lzma library error: Cannot allocate memory"");
		break;
	case LZMA_MEMLIMIT_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Lzma library error: Out of memory"");
		break;
	case LZMA_FORMAT_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: format not recognized"");
		break;
	case LZMA_OPTIONS_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Invalid options"");
		break;
	case LZMA_DATA_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error: Corrupted input data"");
		break;
	case LZMA_BUF_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma library error:  No progress is possible"");
		break;
	default:
		/* Return an error. */
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Lzma decompression failed:  Unknown error"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1436.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 1, 1, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 7, 0, 21, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1436.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,486,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for xz decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1437.cpp,"{
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for xz decompression"");
		free(out_block);
		free(state);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1437.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1437.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,611,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzip: Remaining data is less bytes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1438.cpp,"{
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzip: Remaining data is less bytes"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1438.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1438.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,619,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzip: CRC32 error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1439.cpp,"{
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzip: CRC32 error"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1439.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1439.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,626,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzip: Uncompressed size error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1440.cpp,"{
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzip: Uncompressed size error"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1440.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1440.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,634,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzip: Member size error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1441.cpp,"{
		archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Lzip: Member size error"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1441.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1441.cpp,40
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.cpp,683,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated input"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1442.cpp,"{
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated input"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1442.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1442.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_fd.cpp,73,"archive_set_error(a, errno, ""Can't stat fd %d"", fd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1443.cpp,"{
		archive_set_error(a, errno, ""Can't stat fd %d"", fd);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1443.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1443.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_fd.cpp,80,"archive_set_error(a, ENOMEM, ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1444.cpp,"{
		archive_set_error(a, ENOMEM, ""No memory"");
		free(mine);
		free(b);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1444.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1444.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_fd.cpp,123,"archive_set_error(a, errno, ""Error reading fd %d"",
			    mine->fd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1445.cpp,"{
			if (errno == EINTR)
				continue;
			archive_set_error(a, errno, ""Error reading fd %d"",
			    mine->fd);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1445.cpp,"[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1445.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_fd.cpp,170,"archive_set_error(a, errno, ""Error seeking"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1446.cpp,"{
	struct read_fd_data *mine = (struct read_fd_data *)client_data;
	int64_t skip = request;
	int64_t old_offset, new_offset;
	int skip_bits = sizeof(skip) * 8 - 1;  /* off_t is a signed type. */

	if (!mine->use_lseek)
		return (0);

	/* Reduce a request that would overflow the 'skip' variable. */
	if (sizeof(request) > sizeof(skip)) {
		int64_t max_skip =
		    (((int64_t)1 << (skip_bits - 1)) - 1) * 2 + 1;
		if (request > max_skip)
			skip = max_skip;
	}

	/* Reduce request to the next smallest multiple of block_size */
	request = (request / mine->block_size) * mine->block_size;
	if (request == 0)
		return (0);

	if (((old_offset = lseek(mine->fd, 0, SEEK_CUR)) >= 0) &&
	    ((new_offset = lseek(mine->fd, skip, SEEK_CUR)) >= 0))
		return (new_offset - old_offset);

	/* If seek failed once, it will probably fail again. */
	mine->use_lseek = 0;

	/* Let libarchive recover with read+discard. */
	if (errno == ESPIPE)
		return (0);

	/*
	 * There's been an error other than ESPIPE. This is most
	 * likely caused by a programmer error (too large request)
	 * or a corrupted archive file.
	 */
	archive_set_error(a, errno, ""Error seeking"");
	return (-1);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1446.cpp,"[6, 0, 0, 0, 0, 0, 5, 0, 0, 0, 7, 0, 0, 0, 0, 60, 0, 0, 5, 6, 0, 0, 4, 17, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 0, 31, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 6, 6, 0, 0, 6, 0, 0, 4, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1446.cpp,40
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_fd.cpp,190,"archive_set_error(a, errno,
		    ""A file descriptor(%d) is not seekable(PIPE)"", mine->fd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1447.cpp,"{
		archive_set_error(a, errno,
		    ""A file descriptor(%d) is not seekable(PIPE)"", mine->fd);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1447.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1447.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_fd.cpp,195,"archive_set_error(a, errno,
		    ""Error seeking in a file descriptor(%d)"", mine->fd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1448.cpp,"{
		/* If the input is corrupted or truncated, fail. */
		archive_set_error(a, errno,
		    ""Error seeking in a file descriptor(%d)"", mine->fd);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1448.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1448.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,572,"archive_set_error(&a->archive, ENOMEM,
			    ""Couldn't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1449.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Couldn't allocate memory"");
			a->archive.state = ARCHIVE_STATE_FATAL;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1449.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1449.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,583,"archive_set_error(&a->archive, errno,
			    ""CreateEvent failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1450.cpp,"{
			la_dosmaperr(GetLastError());
			archive_set_error(&a->archive, errno,
			    ""CreateEvent failed"");
			a->archive.state = ARCHIVE_STATE_FATAL;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1450.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1450.cpp,29
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,624,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Reading file truncated"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1451.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Reading file truncated"");
			a->archive.state = ARCHIVE_STATE_FATAL;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1451.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1451.cpp,70
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,635,"archive_set_error(&a->archive, errno, ""Read error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1452.cpp,"{
			if (lasterr == ERROR_NO_DATA)
				errno = EAGAIN;
			else if (lasterr == ERROR_ACCESS_DENIED)
				errno = EBADF;
			else
				la_dosmaperr(lasterr);
			archive_set_error(&a->archive, errno, ""Read error"");
			a->archive.state = ARCHIVE_STATE_FATAL;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1452.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 5, 1, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1452.cpp,81
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,696,"archive_set_error(&a->archive, errno,
		    ""GetOverlappedResult failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1453.cpp,"{
		la_dosmaperr(GetLastError());
		archive_set_error(&a->archive, errno,
		    ""GetOverlappedResult failed"");
		a->archive.state = ARCHIVE_STATE_FATAL;
		r = ARCHIVE_FATAL;
		goto abort_read_data;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1453.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1453.cpp,41
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,706,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Reading file truncated"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1454.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Reading file truncated"");
		a->archive.state = ARCHIVE_STATE_FATAL;
		r = ARCHIVE_FATAL;
		goto abort_read_data;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1454.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1454.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,756,"archive_set_error(&a->archive, t->tree_errno,
			    ""%ls: Unable to continue traversing directory tree"",
			    tree_current_path(t));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1455.cpp,"{
		case TREE_ERROR_FATAL:
			archive_set_error(&a->archive, t->tree_errno,
			    ""%ls: Unable to continue traversing directory tree"",
			    tree_current_path(t));
			a->archive.state = ARCHIVE_STATE_FATAL;
			return (ARCHIVE_FATAL);
		case TREE_ERROR_DIR:
			archive_set_error(&a->archive, t->tree_errno,
			    ""%ls: Couldn't visit directory"",
			    tree_current_path(t));
			return (ARCHIVE_FAILED);
		case 0:
			return (ARCHIVE_EOF);
		case TREE_POSTDESCENT:
		case TREE_POSTASCENT:
			break;
		case TREE_REGULAR:
			lst = tree_current_lstat(t);
			if (lst == NULL) {
				archive_set_error(&a->archive, t->tree_errno,
				    ""%ls: Cannot stat"",
				    tree_current_path(t));
				return (ARCHIVE_FAILED);
			}
			break;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1455.cpp,"[1, 0, 0, 0, 2, 0, 4, 0, 6, 0, 2, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 7, 0, 0, 5, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1455.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,762,"archive_set_error(&a->archive, t->tree_errno,
			    ""%ls: Couldn't visit directory"",
			    tree_current_path(t));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1456.cpp,"{
		case TREE_ERROR_FATAL:
			archive_set_error(&a->archive, t->tree_errno,
			    ""%ls: Unable to continue traversing directory tree"",
			    tree_current_path(t));
			a->archive.state = ARCHIVE_STATE_FATAL;
			return (ARCHIVE_FATAL);
		case TREE_ERROR_DIR:
			archive_set_error(&a->archive, t->tree_errno,
			    ""%ls: Couldn't visit directory"",
			    tree_current_path(t));
			return (ARCHIVE_FAILED);
		case 0:
			return (ARCHIVE_EOF);
		case TREE_POSTDESCENT:
		case TREE_POSTASCENT:
			break;
		case TREE_REGULAR:
			lst = tree_current_lstat(t);
			if (lst == NULL) {
				archive_set_error(&a->archive, t->tree_errno,
				    ""%ls: Cannot stat"",
				    tree_current_path(t));
				return (ARCHIVE_FAILED);
			}
			break;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1456.cpp,"[1, 0, 0, 0, 2, 0, 4, 0, 6, 0, 2, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 7, 0, 0, 5, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1456.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,774,"archive_set_error(&a->archive, t->tree_errno,
				    ""%ls: Cannot stat"",
				    tree_current_path(t));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1457.cpp,"{
				archive_set_error(&a->archive, t->tree_errno,
				    ""%ls: Cannot stat"",
				    tree_current_path(t));
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1457.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1457.cpp,33
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,791,"archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1458.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1458.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1458.cpp,50
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,863,"archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1459.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1459.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1459.cpp,122
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,889,"archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1460.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1460.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1460.cpp,148
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,925,"archive_set_error(&a->archive, errno,
			    ""Couldn't open %ls"", tree_current_path(a->tree));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1461.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Couldn't open %ls"", tree_current_path(a->tree));
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1461.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1461.cpp,184
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,1024,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1462.cpp,"{
			t->sparse_list_size = 0;
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate data"");
			a->archive.state = ARCHIVE_STATE_FATAL;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1462.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1462.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,1176,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1463.cpp,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1463.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1463.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,1179,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't convert a path to a wchar_t string"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1464.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't convert a path to a wchar_t string"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1464.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1464.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,1215,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate directory traversal data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1465.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate directory traversal data"");
		a->archive.state = ARCHIVE_STATE_FATAL;
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1465.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1465.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,1271,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate tar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1466.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate tar data"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1466.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1466.cpp,31
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,1355,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""GetVolumePathName failed: %d"", (int)GetLastError());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1467.cpp,"{
		free(path);
		t->current_filesystem->remote = -1;
		t->current_filesystem->bytesPerSector = 0;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""GetVolumePathName failed: %d"", (int)GetLastError());
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1467.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1467.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,1376,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""GetDiskFreeSpace failed: %d"", (int)GetLastError());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1468.cpp,"{
		t->current_filesystem->bytesPerSector = 0;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""GetDiskFreeSpace failed: %d"", (int)GetLastError());
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1468.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1468.cpp,34
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,1585,"fprintf(stderr, ""LIBARCHIVE_DIRECT_IO=%s\n"",
				(t->direct_io)?""Enabled"":""Disabled"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1469.cpp,"{
			if (e[0] == '0')
				t->direct_io = 0;
			else
				t->direct_io = 1;
			fprintf(stderr, ""LIBARCHIVE_DIRECT_IO=%s\n"",
				(t->direct_io)?""Enabled"":""Disabled"");
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1469.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 2, 2, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1469.cpp,80
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,1594,"fprintf(stderr, ""LIBARCHIVE_ASYNC_IO=%s\n"",
			    (t->async_io)?""Enabled"":""Disabled"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1470.cpp,"{
			if (e[0] == '0')
				t->async_io = 0;
			else
				t->async_io = 1;
			fprintf(stderr, ""LIBARCHIVE_ASYNC_IO=%s\n"",
			    (t->async_io)?""Enabled"":""Disabled"");
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1470.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 2, 2, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1470.cpp,89
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,2074,"archive_set_error(&a->archive, EINVAL,
		    ""Can't get a wide character version of the path"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1471.cpp,"{
		archive_set_error(&a->archive, EINVAL,
		    ""Can't get a wide character version of the path"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1471.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1471.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,2089,"archive_set_error(&a->archive, errno,
				    ""Can't GetFileInformationByHandle"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1472.cpp,"{
				la_dosmaperr(GetLastError());
				archive_set_error(&a->archive, errno,
				    ""Can't GetFileInformationByHandle"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1472.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1472.cpp,33
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,2101,"archive_set_error(&a->archive, errno,
				    ""Can't FindFirstFileW"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1473.cpp,"{
				la_dosmaperr(GetLastError());
				archive_set_error(&a->archive, errno,
				    ""Can't FindFirstFileW"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1473.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1473.cpp,45
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,2123,"archive_set_error(&a->archive, errno,
				    ""Can't CreateFileW"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1474.cpp,"{
				la_dosmaperr(GetLastError());
				archive_set_error(&a->archive, errno,
				    ""Can't CreateFileW"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1474.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1474.cpp,67
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,2130,"archive_set_error(&a->archive, errno,
				    ""Can't GetFileInformationByHandle"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1475.cpp,"{
				la_dosmaperr(GetLastError());
				archive_set_error(&a->archive, errno,
				    ""Can't GetFileInformationByHandle"");
				CloseHandle(h);
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1475.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1475.cpp,74
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,2170,"archive_set_error(&a->archive, errno,
				    ""Can't CreateFileW"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1476.cpp,"{
				la_dosmaperr(GetLastError());
				archive_set_error(&a->archive, errno,
				    ""Can't CreateFileW"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1476.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1476.cpp,114
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,2178,"archive_set_error(&a->archive, errno,
			    ""Can't GetFileInformationByHandle"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1477.cpp,"{
			la_dosmaperr(GetLastError());
			archive_set_error(&a->archive, errno,
			    ""Can't GetFileInformationByHandle"");
			if (h != INVALID_HANDLE_VALUE && fd < 0)
				CloseHandle(h);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1477.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1477.cpp,122
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,2226,"archive_set_error(&a->archive, ENOMEM,
			""Couldn't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1478.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
			""Couldn't allocate memory"");
		exit_sts = ARCHIVE_FATAL;
		goto exit_setup_sparse;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1478.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1478.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,2247,"archive_set_error(&a->archive, ENOMEM,
					    ""Couldn't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1479.cpp,"{
					archive_set_error(&a->archive, ENOMEM,
					    ""Couldn't allocate memory"");
					exit_sts = ARCHIVE_FATAL;
					goto exit_setup_sparse;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1479.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1479.cpp,35
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_windows.cpp,2285,"archive_set_error(&a->archive, errno,
			    ""DeviceIoControl Failed: %lu"", GetLastError());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1480.cpp,"{
			la_dosmaperr(GetLastError());
			archive_set_error(&a->archive, errno,
			    ""DeviceIoControl Failed: %lu"", GetLastError());
			exit_sts = ARCHIVE_FAILED;
			goto exit_setup_sparse;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1480.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1480.cpp,73
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_file.cpp,75,"archive_set_error(a, ENOMEM, ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1481.cpp,"{
		archive_set_error(a, ENOMEM, ""No memory"");
		free(mine);
		free(b);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1481.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1481.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_open_file.cpp,116,"archive_set_error(a, errno, ""Error reading file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1482.cpp,"{
		archive_set_error(a, errno, ""Error reading file"");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1482.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1482.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_gzip.cpp,107,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1483.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1483.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1483.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_gzip.cpp,124,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1484.cpp,"{
		free(data);
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1484.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1484.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_gzip.cpp,128,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Using external gzip program"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1485.cpp,"{
	struct archive_write *a = (struct archive_write *)_a;
	struct archive_write_filter *f = __archive_write_allocate_filter(_a);
	struct private_data *data;
	archive_check_magic(&a->archive, ARCHIVE_WRITE_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_write_add_filter_gzip"");

	data = calloc(1, sizeof(*data));
	if (data == NULL) {
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}
	f->data = data;
	f->open = &archive_compressor_gzip_open;
	f->options = &archive_compressor_gzip_options;
	f->close = &archive_compressor_gzip_close;
	f->free = &archive_compressor_gzip_free;
	f->code = ARCHIVE_FILTER_GZIP;
	f->name = ""gzip"";
#ifdef HAVE_ZLIB_H
	data->compression_level = Z_DEFAULT_COMPRESSION;
	return (ARCHIVE_OK);
#else
	data->pdata = __archive_write_program_allocate(""gzip"");
	if (data->pdata == NULL) {
		free(data);
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}
	data->compression_level = 0;
	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Using external gzip program"");
	return (ARCHIVE_WARN);
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1485.cpp,"[2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 0, 91, 0, 0, 3, 3, 0, 0, 2, 8, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 43, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 2, 1, 0, 9, 0, 0, 16, 0, 19, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1485.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_gzip.cpp,205,"archive_set_error(f->archive, ENOMEM,
			    ""Can't allocate data for compression buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1486.cpp,"{
			archive_set_error(f->archive, ENOMEM,
			    ""Can't allocate data for compression buffer"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1486.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1486.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_gzip.cpp,249,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC, ""Internal error ""
	    ""initializing compression library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1487.cpp,"{
	struct private_data *data = (struct private_data *)f->data;
	int ret;

	ret = __archive_write_open_filter(f->next_filter);
	if (ret != ARCHIVE_OK)
		return (ret);

	if (data->compressed == NULL) {
		size_t bs = 65536, bpb;
		if (f->archive->magic == ARCHIVE_WRITE_MAGIC) {
			/* Buffer size should be a multiple number of
			 * the of bytes per block for performance. */
			bpb = archive_write_get_bytes_per_block(f->archive);
			if (bpb > bs)
				bs = bpb;
			else if (bpb != 0)
				bs -= bs % bpb;
		}
		data->compressed_buffer_size = bs;
		data->compressed
		    = (unsigned char *)malloc(data->compressed_buffer_size);
		if (data->compressed == NULL) {
			archive_set_error(f->archive, ENOMEM,
			    ""Can't allocate data for compression buffer"");
			return (ARCHIVE_FATAL);
		}
	}

	data->crc = crc32(0L, NULL, 0);
	data->stream.next_out = data->compressed;
	data->stream.avail_out = (uInt)data->compressed_buffer_size;

	/* Prime output buffer with a gzip header. */
	data->compressed[0] = 0x1f; /* GZip signature bytes */
	data->compressed[1] = 0x8b;
	data->compressed[2] = 0x08; /* ""Deflate"" compression */
	data->compressed[3] = 0; /* No options */
	if (data->timestamp >= 0) {
		time_t t = time(NULL);
		data->compressed[4] = (uint8_t)(t)&0xff;  /* Timestamp */
		data->compressed[5] = (uint8_t)(t>>8)&0xff;
		data->compressed[6] = (uint8_t)(t>>16)&0xff;
		data->compressed[7] = (uint8_t)(t>>24)&0xff;
	} else
		memset(&data->compressed[4], 0, 4);
	data->compressed[8] = 0; /* No deflate options */
	data->compressed[9] = 3; /* OS=Unix */
	data->stream.next_out += 10;
	data->stream.avail_out -= 10;

	f->write = archive_compressor_gzip_write;

	/* Initialize compression library. */
	ret = deflateInit2(&(data->stream),
	    data->compression_level,
	    Z_DEFLATED,
	    -15 /* < 0 to suppress zlib header */,
	    8,
	    Z_DEFAULT_STRATEGY);

	if (ret == Z_OK) {
		f->data = data;
		return (ARCHIVE_OK);
	}

	/* Library setup failed: clean up. */
	archive_set_error(f->archive, ARCHIVE_ERRNO_MISC, ""Internal error ""
	    ""initializing compression library"");

	/* Override the error message if we know what really went wrong. */
	switch (ret) {
	case Z_STREAM_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid setup parameter"");
		break;
	case Z_MEM_ERROR:
		archive_set_error(f->archive, ENOMEM,
		    ""Internal error initializing compression library"");
		break;
	case Z_VERSION_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid library version"");
		break;
	}

	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1487.cpp,"[8, 0, 0, 0, 3, 0, 4, 1, 3, 0, 11, 0, 0, 0, 0, 189, 0, 0, 4, 5, 0, 0, 3, 43, 0, 0, 0, 0, 1, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 0, 9, 8, 1, 0, 16, 0, 0, 30, 1, 35, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1487.cpp,69
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_gzip.cpp,255,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid setup parameter"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1488.cpp,"{
	case Z_STREAM_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid setup parameter"");
		break;
	case Z_MEM_ERROR:
		archive_set_error(f->archive, ENOMEM,
		    ""Internal error initializing compression library"");
		break;
	case Z_VERSION_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid library version"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1488.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1488.cpp,75
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_gzip.cpp,260,"archive_set_error(f->archive, ENOMEM,
		    ""Internal error initializing compression library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1489.cpp,"{
	case Z_STREAM_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid setup parameter"");
		break;
	case Z_MEM_ERROR:
		archive_set_error(f->archive, ENOMEM,
		    ""Internal error initializing compression library"");
		break;
	case Z_VERSION_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid library version"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1489.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1489.cpp,80
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_gzip.cpp,264,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid library version"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1490.cpp,"{
	case Z_STREAM_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid setup parameter"");
		break;
	case Z_MEM_ERROR:
		archive_set_error(f->archive, ENOMEM,
		    ""Internal error initializing compression library"");
		break;
	case Z_VERSION_ERROR:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing ""
		    ""compression library: invalid library version"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1490.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1490.cpp,84
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_gzip.cpp,331,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1491.cpp,"{
	case Z_OK:
		break;
	default:
		archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up compressor"");
		ret = ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1491.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1491.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_gzip.cpp,385,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""GZip compression failed:""
			    "" deflate() call returned status %d"",
			    ret);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1492.cpp,"{
		case Z_OK:
			/* In non-finishing case, check if compressor
			 * consumed everything */
			if (!finishing && data->stream.avail_in == 0)
				return (ARCHIVE_OK);
			/* In finishing case, this return always means
			 * there's more work */
			break;
		case Z_STREAM_END:
			/* This return can only occur in finishing case. */
			return (ARCHIVE_OK);
		default:
			/* Any other return value indicates an error. */
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""GZip compression failed:""
			    "" deflate() call returned status %d"",
			    ret);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1492.cpp,"[1, 0, 0, 0, 1, 0, 3, 0, 2, 1, 2, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1492.cpp,39
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive.cpp,1062,archive *;,second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1493.cpp,"{
#endif

/*
 * The version number is provided as both a macro and a function.
 * The macro identifies the installed header; the function identifies
 * the library version (which may not be the same if you're using a
 * dynamically-linked version of the library).  Of course, if the
 * header and library are very different, you should expect some
 * strangeness.  Don't do that.
 */
__LA_DECL int		archive_version_number(void);

/*
 * Textual name/version of the library, useful for version displays.
 */
#define	ARCHIVE_VERSION_ONLY_STRING ""3.3.1""
#define	ARCHIVE_VERSION_STRING ""libarchive "" ARCHIVE_VERSION_ONLY_STRING
__LA_DECL const char *	archive_version_string(void);

/*
 * Detailed textual name/version of the library and its dependencies.
 * This has the form:
 *    ""libarchive x.y.z zlib/a.b.c liblzma/d.e.f ... etc ...""
 * the list of libraries described here will vary depending on how
 * libarchive was compiled.
 */
__LA_DECL const char *	archive_version_details(void);

/*
 * Returns NULL if libarchive was compiled without the associated library.
 * Otherwise, returns the version number that libarchive was compiled
 * against.
 */
__LA_DECL const char *  archive_zlib_version(void);
__LA_DECL const char *  archive_liblzma_version(void);
__LA_DECL const char *  archive_bzlib_version(void);
__LA_DECL const char *  archive_liblz4_version(void);

/* Declare our basic types. */
struct archive;
struct archive_entry;

/*
 * Error codes: Use archive_errno() and archive_error_string()
 * to retrieve details.  Unless specified otherwise, all functions
 * that return 'int' use these codes.
 */
#define	ARCHIVE_EOF	  1	/* Found end of archive. */
#define	ARCHIVE_OK	  0	/* Operation was successful. */
#define	ARCHIVE_RETRY	(-10)	/* Retry might succeed. */
#define	ARCHIVE_WARN	(-20)	/* Partial success. */
/* For example, if write_header ""fails"", then you can't push data. */
#define	ARCHIVE_FAILED	(-25)	/* Current operation cannot complete. */
/* But if write_header is ""fatal,"" then this archive is dead and useless. */
#define	ARCHIVE_FATAL	(-30)	/* No more operations are possible. */

/*
 * As far as possible, archive_errno returns standard platform errno codes.
 * Of course, the details vary by platform, so the actual definitions
 * here are stored in ""archive_platform.h"".  The symbols are listed here
 * for reference; as a rule, clients should not need to know the exact
 * platform-dependent error code.
 */
/* Unrecognized or invalid file format. */
/* #define	ARCHIVE_ERRNO_FILE_FORMAT */
/* Illegal usage of the library. */
/* #define	ARCHIVE_ERRNO_PROGRAMMER_ERROR */
/* Unknown or unclassified error. */
/* #define	ARCHIVE_ERRNO_MISC */

/*
 * Callbacks are invoked to automatically read/skip/write/open/close the
 * archive. You can provide your own for complex tasks (like breaking
 * archives across multiple tapes) or use standard ones built into the
 * library.
 */

/* Returns pointer and size of next block of data from archive. */
typedef la_ssize_t	archive_read_callback(struct archive *,
			    void *_client_data, const void **_buffer);

/* Skips at most request bytes from archive and returns the skipped amount.
 * This may skip fewer bytes than requested; it may even skip zero bytes.
 * If you do skip fewer bytes than requested, libarchive will invoke your
 * read callback and discard data as necessary to make up the full skip.
 */
typedef la_int64_t	archive_skip_callback(struct archive *,
			    void *_client_data, la_int64_t request);

/* Seeks to specified location in the file and returns the position.
 * Whence values are SEEK_SET, SEEK_CUR, SEEK_END from stdio.h.
 * Return ARCHIVE_FATAL if the seek fails for any reason.
 */
typedef la_int64_t	archive_seek_callback(struct archive *,
    void *_client_data, la_int64_t offset, int whence);

/* Returns size actually written, zero on EOF, -1 on error. */
typedef la_ssize_t	archive_write_callback(struct archive *,
			    void *_client_data,
			    const void *_buffer, size_t _length);

typedef int	archive_open_callback(struct archive *, void *_client_data);

typedef int	archive_close_callback(struct archive *, void *_client_data);

/* Switches from one client data object to the next/prev client data object.
 * This is useful for reading from different data blocks such as a set of files
 * that make up one large file.
 */
typedef int archive_switch_callback(struct archive *, void *_client_data1,
			    void *_client_data2);

/*
 * Returns a passphrase used for encryption or decryption, NULL on nothing
 * to do and give it up.
 */
typedef const char *archive_passphrase_callback(struct archive *,
			    void *_client_data);

/*
 * Codes to identify various stream filters.
 */
#define	ARCHIVE_FILTER_NONE	0
#define	ARCHIVE_FILTER_GZIP	1
#define	ARCHIVE_FILTER_BZIP2	2
#define	ARCHIVE_FILTER_COMPRESS	3
#define	ARCHIVE_FILTER_PROGRAM	4
#define	ARCHIVE_FILTER_LZMA	5
#define	ARCHIVE_FILTER_XZ	6
#define	ARCHIVE_FILTER_UU	7
#define	ARCHIVE_FILTER_RPM	8
#define	ARCHIVE_FILTER_LZIP	9
#define	ARCHIVE_FILTER_LRZIP	10
#define	ARCHIVE_FILTER_LZOP	11
#define	ARCHIVE_FILTER_GRZIP	12
#define	ARCHIVE_FILTER_LZ4	13

#if ARCHIVE_VERSION_NUMBER < 4000000
#define	ARCHIVE_COMPRESSION_NONE	ARCHIVE_FILTER_NONE
#define	ARCHIVE_COMPRESSION_GZIP	ARCHIVE_FILTER_GZIP
#define	ARCHIVE_COMPRESSION_BZIP2	ARCHIVE_FILTER_BZIP2
#define	ARCHIVE_COMPRESSION_COMPRESS	ARCHIVE_FILTER_COMPRESS
#define	ARCHIVE_COMPRESSION_PROGRAM	ARCHIVE_FILTER_PROGRAM
#define	ARCHIVE_COMPRESSION_LZMA	ARCHIVE_FILTER_LZMA
#define	ARCHIVE_COMPRESSION_XZ		ARCHIVE_FILTER_XZ
#define	ARCHIVE_COMPRESSION_UU		ARCHIVE_FILTER_UU
#define	ARCHIVE_COMPRESSION_RPM		ARCHIVE_FILTER_RPM
#define	ARCHIVE_COMPRESSION_LZIP	ARCHIVE_FILTER_LZIP
#define	ARCHIVE_COMPRESSION_LRZIP	ARCHIVE_FILTER_LRZIP
#endif

/*
 * Codes returned by archive_format.
 *
 * Top 16 bits identifies the format family (e.g., ""tar""); lower
 * 16 bits indicate the variant.  This is updated by read_next_header.
 * Note that the lower 16 bits will often vary from entry to entry.
 * In some cases, this variation occurs as libarchive learns more about
 * the archive (for example, later entries might utilize extensions that
 * weren't necessary earlier in the archive; in this case, libarchive
 * will change the format code to indicate the extended format that
 * was used).  In other cases, it's because different tools have
 * modified the archive and so different parts of the archive
 * actually have slightly different formats.  (Both tar and cpio store
 * format codes in each entry, so it is quite possible for each
 * entry to be in a different format.)
 */
#define	ARCHIVE_FORMAT_BASE_MASK		0xff0000
#define	ARCHIVE_FORMAT_CPIO			0x10000
#define	ARCHIVE_FORMAT_CPIO_POSIX		(ARCHIVE_FORMAT_CPIO | 1)
#define	ARCHIVE_FORMAT_CPIO_BIN_LE		(ARCHIVE_FORMAT_CPIO | 2)
#define	ARCHIVE_FORMAT_CPIO_BIN_BE		(ARCHIVE_FORMAT_CPIO | 3)
#define	ARCHIVE_FORMAT_CPIO_SVR4_NOCRC		(ARCHIVE_FORMAT_CPIO | 4)
#define	ARCHIVE_FORMAT_CPIO_SVR4_CRC		(ARCHIVE_FORMAT_CPIO | 5)
#define	ARCHIVE_FORMAT_CPIO_AFIO_LARGE		(ARCHIVE_FORMAT_CPIO | 6)
#define	ARCHIVE_FORMAT_SHAR			0x20000
#define	ARCHIVE_FORMAT_SHAR_BASE		(ARCHIVE_FORMAT_SHAR | 1)
#define	ARCHIVE_FORMAT_SHAR_DUMP		(ARCHIVE_FORMAT_SHAR | 2)
#define	ARCHIVE_FORMAT_TAR			0x30000
#define	ARCHIVE_FORMAT_TAR_USTAR		(ARCHIVE_FORMAT_TAR | 1)
#define	ARCHIVE_FORMAT_TAR_PAX_INTERCHANGE	(ARCHIVE_FORMAT_TAR | 2)
#define	ARCHIVE_FORMAT_TAR_PAX_RESTRICTED	(ARCHIVE_FORMAT_TAR | 3)
#define	ARCHIVE_FORMAT_TAR_GNUTAR		(ARCHIVE_FORMAT_TAR | 4)
#define	ARCHIVE_FORMAT_ISO9660			0x40000
#define	ARCHIVE_FORMAT_ISO9660_ROCKRIDGE	(ARCHIVE_FORMAT_ISO9660 | 1)
#define	ARCHIVE_FORMAT_ZIP			0x50000
#define	ARCHIVE_FORMAT_EMPTY			0x60000
#define	ARCHIVE_FORMAT_AR			0x70000
#define	ARCHIVE_FORMAT_AR_GNU			(ARCHIVE_FORMAT_AR | 1)
#define	ARCHIVE_FORMAT_AR_BSD			(ARCHIVE_FORMAT_AR | 2)
#define	ARCHIVE_FORMAT_MTREE			0x80000
#define	ARCHIVE_FORMAT_RAW			0x90000
#define	ARCHIVE_FORMAT_XAR			0xA0000
#define	ARCHIVE_FORMAT_LHA			0xB0000
#define	ARCHIVE_FORMAT_CAB			0xC0000
#define	ARCHIVE_FORMAT_RAR			0xD0000
#define	ARCHIVE_FORMAT_7ZIP			0xE0000
#define	ARCHIVE_FORMAT_WARC			0xF0000

/*
 * Codes returned by archive_read_format_capabilities().
 *
 * This list can be extended with values between 0 and 0xffff.
 * The original purpose of this list was to let different archive
 * format readers expose their general capabilities in terms of
 * encryption.
 */
#define ARCHIVE_READ_FORMAT_CAPS_NONE (0) /* no special capabilities */
#define ARCHIVE_READ_FORMAT_CAPS_ENCRYPT_DATA (1<<0)  /* reader can detect encrypted data */
#define ARCHIVE_READ_FORMAT_CAPS_ENCRYPT_METADATA (1<<1)  /* reader can detect encryptable metadata (pathname, mtime, etc.) */

/*
 * Codes returned by archive_read_has_encrypted_entries().
 *
 * In case the archive does not support encryption detection at all
 * ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED is returned. If the reader
 * for some other reason (e.g. not enough bytes read) cannot say if
 * there are encrypted entries, ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW
 * is returned.
 */
#define ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED -2
#define ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW -1

/*-
 * Basic outline for reading an archive:
 *   1) Ask archive_read_new for an archive reader object.
 *   2) Update any global properties as appropriate.
 *      In particular, you'll certainly want to call appropriate
 *      archive_read_support_XXX functions.
 *   3) Call archive_read_open_XXX to open the archive
 *   4) Repeatedly call archive_read_next_header to get information about
 *      successive archive entries.  Call archive_read_data to extract
 *      data for entries of interest.
 *   5) Call archive_read_free to end processing.
 */
__LA_DECL struct archive	*archive_read_new(void);

/*
 * The archive_read_support_XXX calls enable auto-detect for this
 * archive handle.  They also link in the necessary support code.
 * For example, if you don't want bzlib linked in, don't invoke
 * support_compression_bzip2().  The ""all"" functions provide the
 * obvious shorthand.
 */

#if ARCHIVE_VERSION_NUMBER < 4000000
__LA_DECL int archive_read_support_compression_all(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_bzip2(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_compress(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_gzip(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_lzip(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_lzma(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_none(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_program(struct archive *,
		     const char *command) __LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_program_signature
		(struct archive *, const char *,
		 const void * /* match */, size_t) __LA_DEPRECATED;

__LA_DECL int archive_read_support_compression_rpm(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_uu(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_xz(struct archive *)
		__LA_DEPRECATED;
#endif

__LA_DECL int archive_read_support_filter_all(struct archive *);
__LA_DECL int archive_read_support_filter_bzip2(struct archive *);
__LA_DECL int archive_read_support_filter_compress(struct archive *);
__LA_DECL int archive_read_support_filter_gzip(struct archive *);
__LA_DECL int archive_read_support_filter_grzip(struct archive *);
__LA_DECL int archive_read_support_filter_lrzip(struct archive *);
__LA_DECL int archive_read_support_filter_lz4(struct archive *);
__LA_DECL int archive_read_support_filter_lzip(struct archive *);
__LA_DECL int archive_read_support_filter_lzma(struct archive *);
__LA_DECL int archive_read_support_filter_lzop(struct archive *);
__LA_DECL int archive_read_support_filter_none(struct archive *);
__LA_DECL int archive_read_support_filter_program(struct archive *,
		     const char *command);
__LA_DECL int archive_read_support_filter_program_signature
		(struct archive *, const char * /* cmd */,
				    const void * /* match */, size_t);
__LA_DECL int archive_read_support_filter_rpm(struct archive *);
__LA_DECL int archive_read_support_filter_uu(struct archive *);
__LA_DECL int archive_read_support_filter_xz(struct archive *);

__LA_DECL int archive_read_support_format_7zip(struct archive *);
__LA_DECL int archive_read_support_format_all(struct archive *);
__LA_DECL int archive_read_support_format_ar(struct archive *);
__LA_DECL int archive_read_support_format_by_code(struct archive *, int);
__LA_DECL int archive_read_support_format_cab(struct archive *);
__LA_DECL int archive_read_support_format_cpio(struct archive *);
__LA_DECL int archive_read_support_format_empty(struct archive *);
__LA_DECL int archive_read_support_format_gnutar(struct archive *);
__LA_DECL int archive_read_support_format_iso9660(struct archive *);
__LA_DECL int archive_read_support_format_lha(struct archive *);
__LA_DECL int archive_read_support_format_mtree(struct archive *);
__LA_DECL int archive_read_support_format_rar(struct archive *);
__LA_DECL int archive_read_support_format_raw(struct archive *);
__LA_DECL int archive_read_support_format_tar(struct archive *);
__LA_DECL int archive_read_support_format_warc(struct archive *);
__LA_DECL int archive_read_support_format_xar(struct archive *);
/* archive_read_support_format_zip() enables both streamable and seekable
 * zip readers. */
__LA_DECL int archive_read_support_format_zip(struct archive *);
/* Reads Zip archives as stream from beginning to end.  Doesn't
 * correctly handle SFX ZIP files or ZIP archives that have been modified
 * in-place. */
__LA_DECL int archive_read_support_format_zip_streamable(struct archive *);
/* Reads starting from central directory; requires seekable input. */
__LA_DECL int archive_read_support_format_zip_seekable(struct archive *);

/* Functions to manually set the format and filters to be used. This is
 * useful to bypass the bidding process when the format and filters to use
 * is known in advance.
 */
__LA_DECL int archive_read_set_format(struct archive *, int);
__LA_DECL int archive_read_append_filter(struct archive *, int);
__LA_DECL int archive_read_append_filter_program(struct archive *,
    const char *);
__LA_DECL int archive_read_append_filter_program_signature
    (struct archive *, const char *, const void * /* match */, size_t);

/* Set various callbacks. */
__LA_DECL int archive_read_set_open_callback(struct archive *,
    archive_open_callback *);
__LA_DECL int archive_read_set_read_callback(struct archive *,
    archive_read_callback *);
__LA_DECL int archive_read_set_seek_callback(struct archive *,
    archive_seek_callback *);
__LA_DECL int archive_read_set_skip_callback(struct archive *,
    archive_skip_callback *);
__LA_DECL int archive_read_set_close_callback(struct archive *,
    archive_close_callback *);
/* Callback used to switch between one data object to the next */
__LA_DECL int archive_read_set_switch_callback(struct archive *,
    archive_switch_callback *);

/* This sets the first data object. */
__LA_DECL int archive_read_set_callback_data(struct archive *, void *);
/* This sets data object at specified index */
__LA_DECL int archive_read_set_callback_data2(struct archive *, void *,
    unsigned int);
/* This adds a data object at the specified index. */
__LA_DECL int archive_read_add_callback_data(struct archive *, void *,
    unsigned int);
/* This appends a data object to the end of list */
__LA_DECL int archive_read_append_callback_data(struct archive *, void *);
/* This prepends a data object to the beginning of list */
__LA_DECL int archive_read_prepend_callback_data(struct archive *, void *);

/* Opening freezes the callbacks. */
__LA_DECL int archive_read_open1(struct archive *);

/* Convenience wrappers around the above. */
__LA_DECL int archive_read_open(struct archive *, void *_client_data,
		     archive_open_callback *, archive_read_callback *,
		     archive_close_callback *);
__LA_DECL int archive_read_open2(struct archive *, void *_client_data,
		     archive_open_callback *, archive_read_callback *,
		     archive_skip_callback *, archive_close_callback *);

/*
 * A variety of shortcuts that invoke archive_read_open() with
 * canned callbacks suitable for common situations.  The ones that
 * accept a block size handle tape blocking correctly.
 */
/* Use this if you know the filename.  Note: NULL indicates stdin. */
__LA_DECL int archive_read_open_filename(struct archive *,
		     const char *_filename, size_t _block_size);
/* Use this for reading multivolume files by filenames.
 * NOTE: Must be NULL terminated. Sorting is NOT done. */
__LA_DECL int archive_read_open_filenames(struct archive *,
		     const char **_filenames, size_t _block_size);
__LA_DECL int archive_read_open_filename_w(struct archive *,
		     const wchar_t *_filename, size_t _block_size);
/* archive_read_open_file() is a deprecated synonym for ..._open_filename(). */
__LA_DECL int archive_read_open_file(struct archive *,
		     const char *_filename, size_t _block_size) __LA_DEPRECATED;
/* Read an archive that's stored in memory. */
__LA_DECL int archive_read_open_memory(struct archive *,
		     const void * buff, size_t size);
/* A more involved version that is only used for internal testing. */
__LA_DECL int archive_read_open_memory2(struct archive *a, const void *buff,
		     size_t size, size_t read_size);
/* Read an archive that's already open, using the file descriptor. */
__LA_DECL int archive_read_open_fd(struct archive *, int _fd,
		     size_t _block_size);
/* Read an archive that's already open, using a FILE *. */
/* Note: DO NOT use this with tape drives. */
__LA_DECL int archive_read_open_FILE(struct archive *, FILE *_file);

/* Parses and returns next entry header. */
__LA_DECL int archive_read_next_header(struct archive *,
		     struct archive_entry **);

/* Parses and returns next entry header using the archive_entry passed in */
__LA_DECL int archive_read_next_header2(struct archive *,
		     struct archive_entry *);

/*
 * Retrieve the byte offset in UNCOMPRESSED data where last-read
 * header started.
 */
__LA_DECL la_int64_t		 archive_read_header_position(struct archive *);

/*
 * Returns 1 if the archive contains at least one encrypted entry.
 * If the archive format not support encryption at all
 * ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED is returned.
 * If for any other reason (e.g. not enough data read so far)
 * we cannot say whether there are encrypted entries, then
 * ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW is returned.
 * In general, this function will return values below zero when the
 * reader is uncertain or totally incapable of encryption support.
 * When this function returns 0 you can be sure that the reader
 * supports encryption detection but no encrypted entries have
 * been found yet.
 *
 * NOTE: If the metadata/header of an archive is also encrypted, you
 * cannot rely on the number of encrypted entries. That is why this
 * function does not return the number of encrypted entries but#
 * just shows that there are some.
 */
__LA_DECL int	archive_read_has_encrypted_entries(struct archive *);

/*
 * Returns a bitmask of capabilities that are supported by the archive format reader.
 * If the reader has no special capabilities, ARCHIVE_READ_FORMAT_CAPS_NONE is returned.
 */
__LA_DECL int		 archive_read_format_capabilities(struct archive *);

/* Read data from the body of an entry.  Similar to read(2). */
__LA_DECL la_ssize_t		 archive_read_data(struct archive *,
				    void *, size_t);

/* Seek within the body of an entry.  Similar to lseek(2). */
__LA_DECL la_int64_t archive_seek_data(struct archive *, la_int64_t, int);

/*
 * A zero-copy version of archive_read_data that also exposes the file offset
 * of each returned block.  Note that the client has no way to specify
 * the desired size of the block.  The API does guarantee that offsets will
 * be strictly increasing and that returned blocks will not overlap.
 */
__LA_DECL int archive_read_data_block(struct archive *a,
		    const void **buff, size_t *size, la_int64_t *offset);

/*-
 * Some convenience functions that are built on archive_read_data:
 *  'skip': skips entire entry
 *  'into_buffer': writes data into memory buffer that you provide
 *  'into_fd': writes data to specified filedes
 */
__LA_DECL int archive_read_data_skip(struct archive *);
__LA_DECL int archive_read_data_into_fd(struct archive *, int fd);

/*
 * Set read options.
 */
/* Apply option to the format only. */
__LA_DECL int archive_read_set_format_option(struct archive *_a,
			    const char *m, const char *o,
			    const char *v);
/* Apply option to the filter only. */
__LA_DECL int archive_read_set_filter_option(struct archive *_a,
			    const char *m, const char *o,
			    const char *v);
/* Apply option to both the format and the filter. */
__LA_DECL int archive_read_set_option(struct archive *_a,
			    const char *m, const char *o,
			    const char *v);
/* Apply option string to both the format and the filter. */
__LA_DECL int archive_read_set_options(struct archive *_a,
			    const char *opts);

/*
 * Add a decryption passphrase.
 */
__LA_DECL int archive_read_add_passphrase(struct archive *, const char *);
__LA_DECL int archive_read_set_passphrase_callback(struct archive *,
			    void *client_data, archive_passphrase_callback *);


/*-
 * Convenience function to recreate the current entry (whose header
 * has just been read) on disk.
 *
 * This does quite a bit more than just copy data to disk. It also:
 *  - Creates intermediate directories as required.
 *  - Manages directory permissions:  non-writable directories will
 *    be initially created with write permission enabled; when the
 *    archive is closed, dir permissions are edited to the values specified
 *    in the archive.
 *  - Checks hardlinks:  hardlinks will not be extracted unless the
 *    linked-to file was also extracted within the same session. (TODO)
 */

/* The ""flags"" argument selects optional behavior, 'OR' the flags you want. */

/* Default: Do not try to set owner/group. */
#define	ARCHIVE_EXTRACT_OWNER			(0x0001)
/* Default: Do obey umask, do not restore SUID/SGID/SVTX bits. */
#define	ARCHIVE_EXTRACT_PERM			(0x0002)
/* Default: Do not restore mtime/atime. */
#define	ARCHIVE_EXTRACT_TIME			(0x0004)
/* Default: Replace existing files. */
#define	ARCHIVE_EXTRACT_NO_OVERWRITE 		(0x0008)
/* Default: Try create first, unlink only if create fails with EEXIST. */
#define	ARCHIVE_EXTRACT_UNLINK			(0x0010)
/* Default: Do not restore ACLs. */
#define	ARCHIVE_EXTRACT_ACL			(0x0020)
/* Default: Do not restore fflags. */
#define	ARCHIVE_EXTRACT_FFLAGS			(0x0040)
/* Default: Do not restore xattrs. */
#define	ARCHIVE_EXTRACT_XATTR 			(0x0080)
/* Default: Do not try to guard against extracts redirected by symlinks. */
/* Note: With ARCHIVE_EXTRACT_UNLINK, will remove any intermediate symlink. */
#define	ARCHIVE_EXTRACT_SECURE_SYMLINKS		(0x0100)
/* Default: Do not reject entries with '..' as path elements. */
#define	ARCHIVE_EXTRACT_SECURE_NODOTDOT		(0x0200)
/* Default: Create parent directories as needed. */
#define	ARCHIVE_EXTRACT_NO_AUTODIR		(0x0400)
/* Default: Overwrite files, even if one on disk is newer. */
#define	ARCHIVE_EXTRACT_NO_OVERWRITE_NEWER	(0x0800)
/* Detect blocks of 0 and write holes instead. */
#define	ARCHIVE_EXTRACT_SPARSE			(0x1000)
/* Default: Do not restore Mac extended metadata. */
/* This has no effect except on Mac OS. */
#define	ARCHIVE_EXTRACT_MAC_METADATA		(0x2000)
/* Default: Use HFS+ compression if it was compressed. */
/* This has no effect except on Mac OS v10.6 or later. */
#define	ARCHIVE_EXTRACT_NO_HFS_COMPRESSION	(0x4000)
/* Default: Do not use HFS+ compression if it was not compressed. */
/* This has no effect except on Mac OS v10.6 or later. */
#define	ARCHIVE_EXTRACT_HFS_COMPRESSION_FORCED	(0x8000)
/* Default: Do not reject entries with absolute paths */
#define ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS (0x10000)
/* Default: Do not clear no-change flags when unlinking object */
#define	ARCHIVE_EXTRACT_CLEAR_NOCHANGE_FFLAGS	(0x20000)

__LA_DECL int archive_read_extract(struct archive *, struct archive_entry *,
		     int flags);
__LA_DECL int archive_read_extract2(struct archive *, struct archive_entry *,
		     struct archive * /* dest */);
__LA_DECL void	 archive_read_extract_set_progress_callback(struct archive *,
		     void (*_progress_func)(void *), void *_user_data);

/* Record the dev/ino of a file that will not be written.  This is
 * generally set to the dev/ino of the archive being read. */
__LA_DECL void		archive_read_extract_set_skip_file(struct archive *,
		     la_int64_t, la_int64_t);

/* Close the file and release most resources. */
__LA_DECL int		 archive_read_close(struct archive *);
/* Release all resources and destroy the object. */
/* Note that archive_read_free will call archive_read_close for you. */
__LA_DECL int		 archive_read_free(struct archive *);
#if ARCHIVE_VERSION_NUMBER < 4000000
/* Synonym for archive_read_free() for backwards compatibility. */
__LA_DECL int		 archive_read_finish(struct archive *) __LA_DEPRECATED;
#endif

/*-
 * To create an archive:
 *   1) Ask archive_write_new for an archive writer object.
 *   2) Set any global properties.  In particular, you should set
 *      the compression and format to use.
 *   3) Call archive_write_open to open the file (most people
 *       will use archive_write_open_file or archive_write_open_fd,
 *       which provide convenient canned I/O callbacks for you).
 *   4) For each entry:
 *      - construct an appropriate struct archive_entry structure
 *      - archive_write_header to write the header
 *      - archive_write_data to write the entry data
 *   5) archive_write_close to close the output
 *   6) archive_write_free to cleanup the writer and release resources
 */
__LA_DECL struct archive	*archive_write_new(void);
__LA_DECL int archive_write_set_bytes_per_block(struct archive *,
		     int bytes_per_block);
__LA_DECL int archive_write_get_bytes_per_block(struct archive *);
/* XXX This is badly misnamed; suggestions appreciated. XXX */
__LA_DECL int archive_write_set_bytes_in_last_block(struct archive *,
		     int bytes_in_last_block);
__LA_DECL int archive_write_get_bytes_in_last_block(struct archive *);

/* The dev/ino of a file that won't be archived.  This is used
 * to avoid recursively adding an archive to itself. */
__LA_DECL int archive_write_set_skip_file(struct archive *,
    la_int64_t, la_int64_t);

#if ARCHIVE_VERSION_NUMBER < 4000000
__LA_DECL int archive_write_set_compression_bzip2(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_write_set_compression_compress(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_write_set_compression_gzip(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_write_set_compression_lzip(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_write_set_compression_lzma(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_write_set_compression_none(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_write_set_compression_program(struct archive *,
		     const char *cmd) __LA_DEPRECATED;
__LA_DECL int archive_write_set_compression_xz(struct archive *)
		__LA_DEPRECATED;
#endif

/* A convenience function to set the filter based on the code. */
__LA_DECL int archive_write_add_filter(struct archive *, int filter_code);
__LA_DECL int archive_write_add_filter_by_name(struct archive *,
		     const char *name);
__LA_DECL int archive_write_add_filter_b64encode(struct archive *);
__LA_DECL int archive_write_add_filter_bzip2(struct archive *);
__LA_DECL int archive_write_add_filter_compress(struct archive *);
__LA_DECL int archive_write_add_filter_grzip(struct archive *);
__LA_DECL int archive_write_add_filter_gzip(struct archive *);
__LA_DECL int archive_write_add_filter_lrzip(struct archive *);
__LA_DECL int archive_write_add_filter_lz4(struct archive *);
__LA_DECL int archive_write_add_filter_lzip(struct archive *);
__LA_DECL int archive_write_add_filter_lzma(struct archive *);
__LA_DECL int archive_write_add_filter_lzop(struct archive *);
__LA_DECL int archive_write_add_filter_none(struct archive *);
__LA_DECL int archive_write_add_filter_program(struct archive *,
		     const char *cmd);
__LA_DECL int archive_write_add_filter_uuencode(struct archive *);
__LA_DECL int archive_write_add_filter_xz(struct archive *);


/* A convenience function to set the format based on the code or name. */
__LA_DECL int archive_write_set_format(struct archive *, int format_code);
__LA_DECL int archive_write_set_format_by_name(struct archive *,
		     const char *name);
/* To minimize link pollution, use one or more of the following. */
__LA_DECL int archive_write_set_format_7zip(struct archive *);
__LA_DECL int archive_write_set_format_ar_bsd(struct archive *);
__LA_DECL int archive_write_set_format_ar_svr4(struct archive *);
__LA_DECL int archive_write_set_format_cpio(struct archive *);
__LA_DECL int archive_write_set_format_cpio_newc(struct archive *);
__LA_DECL int archive_write_set_format_gnutar(struct archive *);
__LA_DECL int archive_write_set_format_iso9660(struct archive *);
__LA_DECL int archive_write_set_format_mtree(struct archive *);
__LA_DECL int archive_write_set_format_mtree_classic(struct archive *);
/* TODO: int archive_write_set_format_old_tar(struct archive *); */
__LA_DECL int archive_write_set_format_pax(struct archive *);
__LA_DECL int archive_write_set_format_pax_restricted(struct archive *);
__LA_DECL int archive_write_set_format_raw(struct archive *);
__LA_DECL int archive_write_set_format_shar(struct archive *);
__LA_DECL int archive_write_set_format_shar_dump(struct archive *);
__LA_DECL int archive_write_set_format_ustar(struct archive *);
__LA_DECL int archive_write_set_format_v7tar(struct archive *);
__LA_DECL int archive_write_set_format_warc(struct archive *);
__LA_DECL int archive_write_set_format_xar(struct archive *);
__LA_DECL int archive_write_set_format_zip(struct archive *);
__LA_DECL int archive_write_set_format_filter_by_ext(struct archive *a, const char *filename);
__LA_DECL int archive_write_set_format_filter_by_ext_def(struct archive *a, const char *filename, const char * def_ext);
__LA_DECL int archive_write_zip_set_compression_deflate(struct archive *);
__LA_DECL int archive_write_zip_set_compression_store(struct archive *);
__LA_DECL int archive_write_open(struct archive *, void *,
		     archive_open_callback *, archive_write_callback *,
		     archive_close_callback *);
__LA_DECL int archive_write_open_fd(struct archive *, int _fd);
__LA_DECL int archive_write_open_filename(struct archive *, const char *_file);
__LA_DECL int archive_write_open_filename_w(struct archive *,
		     const wchar_t *_file);
/* A deprecated synonym for archive_write_open_filename() */
__LA_DECL int archive_write_open_file(struct archive *, const char *_file)
		__LA_DEPRECATED;
__LA_DECL int archive_write_open_FILE(struct archive *, FILE *);
/* _buffSize is the size of the buffer, _used refers to a variable that
 * will be updated after each write into the buffer. */
__LA_DECL int archive_write_open_memory(struct archive *,
			void *_buffer, size_t _buffSize, size_t *_used);

/*
 * Note that the library will truncate writes beyond the size provided
 * to archive_write_header or pad if the provided data is short.
 */
__LA_DECL int archive_write_header(struct archive *,
		     struct archive_entry *);
__LA_DECL la_ssize_t	archive_write_data(struct archive *,
			    const void *, size_t);

/* This interface is currently only available for archive_write_disk handles.  */
__LA_DECL la_ssize_t	 archive_write_data_block(struct archive *,
				    const void *, size_t, la_int64_t);

__LA_DECL int		 archive_write_finish_entry(struct archive *);
__LA_DECL int		 archive_write_close(struct archive *);
/* Marks the archive as FATAL so that a subsequent free() operation
 * won't try to close() cleanly.  Provides a fast abort capability
 * when the client discovers that things have gone wrong. */
__LA_DECL int            archive_write_fail(struct archive *);
/* This can fail if the archive wasn't already closed, in which case
 * archive_write_free() will implicitly call archive_write_close(). */
__LA_DECL int		 archive_write_free(struct archive *);
#if ARCHIVE_VERSION_NUMBER < 4000000
/* Synonym for archive_write_free() for backwards compatibility. */
__LA_DECL int		 archive_write_finish(struct archive *) __LA_DEPRECATED;
#endif

/*
 * Set write options.
 */
/* Apply option to the format only. */
__LA_DECL int archive_write_set_format_option(struct archive *_a,
			    const char *m, const char *o,
			    const char *v);
/* Apply option to the filter only. */
__LA_DECL int archive_write_set_filter_option(struct archive *_a,
			    const char *m, const char *o,
			    const char *v);
/* Apply option to both the format and the filter. */
__LA_DECL int archive_write_set_option(struct archive *_a,
			    const char *m, const char *o,
			    const char *v);
/* Apply option string to both the format and the filter. */
__LA_DECL int archive_write_set_options(struct archive *_a,
			    const char *opts);

/*
 * Set a encryption passphrase.
 */
__LA_DECL int archive_write_set_passphrase(struct archive *_a, const char *p);
__LA_DECL int archive_write_set_passphrase_callback(struct archive *,
			    void *client_data, archive_passphrase_callback *);

/*-
 * ARCHIVE_WRITE_DISK API
 *
 * To create objects on disk:
 *   1) Ask archive_write_disk_new for a new archive_write_disk object.
 *   2) Set any global properties.  In particular, you probably
 *      want to set the options.
 *   3) For each entry:
 *      - construct an appropriate struct archive_entry structure
 *      - archive_write_header to create the file/dir/etc on disk
 *      - archive_write_data to write the entry data
 *   4) archive_write_free to cleanup the writer and release resources
 *
 * In particular, you can use this in conjunction with archive_read()
 * to pull entries out of an archive and create them on disk.
 */
__LA_DECL struct archive	*archive_write_disk_new(void);
/* This file will not be overwritten. */
__LA_DECL int archive_write_disk_set_skip_file(struct archive *,
    la_int64_t, la_int64_t);
/* Set flags to control how the next item gets created.
 * This accepts a bitmask of ARCHIVE_EXTRACT_XXX flags defined above. */
__LA_DECL int		 archive_write_disk_set_options(struct archive *,
		     int flags);
/*
 * The lookup functions are given uname/uid (or gname/gid) pairs and
 * return a uid (gid) suitable for this system.  These are used for
 * restoring ownership and for setting ACLs.  The default functions
 * are naive, they just return the uid/gid.  These are small, so reasonable
 * for applications that don't need to preserve ownership; they
 * are probably also appropriate for applications that are doing
 * same-system backup and restore.
 */
/*
 * The ""standard"" lookup functions use common system calls to lookup
 * the uname/gname, falling back to the uid/gid if the names can't be
 * found.  They cache lookups and are reasonably fast, but can be very
 * large, so they are not used unless you ask for them.  In
 * particular, these match the specifications of POSIX ""pax"" and old
 * POSIX ""tar"".
 */
__LA_DECL int	 archive_write_disk_set_standard_lookup(struct archive *);
/*
 * If neither the default (naive) nor the standard (big) functions suit
 * your needs, you can write your own and register them.  Be sure to
 * include a cleanup function if you have allocated private data.
 */
__LA_DECL int archive_write_disk_set_group_lookup(struct archive *,
    void * /* private_data */,
    la_int64_t (*)(void *, const char *, la_int64_t),
    void (* /* cleanup */)(void *));
__LA_DECL int archive_write_disk_set_user_lookup(struct archive *,
    void * /* private_data */,
    la_int64_t (*)(void *, const char *, la_int64_t),
    void (* /* cleanup */)(void *));
__LA_DECL la_int64_t archive_write_disk_gid(struct archive *, const char *, la_int64_t);
__LA_DECL la_int64_t archive_write_disk_uid(struct archive *, const char *, la_int64_t);

/*
 * ARCHIVE_READ_DISK API
 *
 * This is still evolving and somewhat experimental.
 */
__LA_DECL struct archive *archive_read_disk_new(void);
/* The names for symlink modes here correspond to an old BSD
 * command-line argument convention: -L, -P, -H */
/* Follow all symlinks. */
__LA_DECL int archive_read_disk_set_symlink_logical(struct archive *);
/* Follow no symlinks. */
__LA_DECL int archive_read_disk_set_symlink_physical(struct archive *);
/* Follow symlink initially, then not. */
__LA_DECL int archive_read_disk_set_symlink_hybrid(struct archive *);
/* TODO: Handle Linux stat32/stat64 ugliness. <sigh> */
__LA_DECL int archive_read_disk_entry_from_file(struct archive *,
    struct archive_entry *, int /* fd */, const struct stat *);
/* Look up gname for gid or uname for uid. */
/* Default implementations are very, very stupid. */
__LA_DECL const char *archive_read_disk_gname(struct archive *, la_int64_t);
__LA_DECL const char *archive_read_disk_uname(struct archive *, la_int64_t);
/* ""Standard"" implementation uses getpwuid_r, getgrgid_r and caches the
 * results for performance. */
__LA_DECL int	archive_read_disk_set_standard_lookup(struct archive *);
/* You can install your own lookups if you like. */
__LA_DECL int	archive_read_disk_set_gname_lookup(struct archive *,
    void * /* private_data */,
    const char *(* /* lookup_fn */)(void *, la_int64_t),
    void (* /* cleanup_fn */)(void *));
__LA_DECL int	archive_read_disk_set_uname_lookup(struct archive *,
    void * /* private_data */,
    const char *(* /* lookup_fn */)(void *, la_int64_t),
    void (* /* cleanup_fn */)(void *));
/* Start traversal. */
__LA_DECL int	archive_read_disk_open(struct archive *, const char *);
__LA_DECL int	archive_read_disk_open_w(struct archive *, const wchar_t *);
/*
 * Request that current entry be visited.  If you invoke it on every
 * directory, you'll get a physical traversal.  This is ignored if the
 * current entry isn't a directory or a link to a directory.  So, if
 * you invoke this on every returned path, you'll get a full logical
 * traversal.
 */
__LA_DECL int	archive_read_disk_descend(struct archive *);
__LA_DECL int	archive_read_disk_can_descend(struct archive *);
__LA_DECL int	archive_read_disk_current_filesystem(struct archive *);
__LA_DECL int	archive_read_disk_current_filesystem_is_synthetic(struct archive *);
__LA_DECL int	archive_read_disk_current_filesystem_is_remote(struct archive *);
/* Request that the access time of the entry visited by traversal be restored. */
__LA_DECL int  archive_read_disk_set_atime_restored(struct archive *);
/*
 * Set behavior. The ""flags"" argument selects optional behavior.
 */
/* Request that the access time of the entry visited by traversal be restored.
 * This is the same as archive_read_disk_set_atime_restored. */
#define	ARCHIVE_READDISK_RESTORE_ATIME		(0x0001)
/* Default: Do not skip an entry which has nodump flags. */
#define	ARCHIVE_READDISK_HONOR_NODUMP		(0x0002)
/* Default: Skip a mac resource fork file whose prefix is ""._"" because of
 * using copyfile. */
#define	ARCHIVE_READDISK_MAC_COPYFILE		(0x0004)
/* Default: Traverse mount points. */
#define	ARCHIVE_READDISK_NO_TRAVERSE_MOUNTS	(0x0008)
/* Default: Xattrs are read from disk. */
#define	ARCHIVE_READDISK_NO_XATTR		(0x0010)
/* Default: ACLs are read from disk. */
#define	ARCHIVE_READDISK_NO_ACL			(0x0020)
/* Default: File flags are read from disk. */
#define	ARCHIVE_READDISK_NO_FFLAGS		(0x0040)

__LA_DECL int  archive_read_disk_set_behavior(struct archive *,
		    int flags);

/*
 * Set archive_match object that will be used in archive_read_disk to
 * know whether an entry should be skipped. The callback function
 * _excluded_func will be invoked when an entry is skipped by the result
 * of archive_match.
 */
__LA_DECL int	archive_read_disk_set_matching(struct archive *,
		    struct archive *_matching, void (*_excluded_func)
		    (struct archive *, void *, struct archive_entry *),
		    void *_client_data);
__LA_DECL int	archive_read_disk_set_metadata_filter_callback(struct archive *,
		    int (*_metadata_filter_func)(struct archive *, void *,
		    	struct archive_entry *), void *_client_data);

/* Simplified cleanup interface;
 * This calls archive_read_free() or archive_write_free() as needed. */
__LA_DECL int	archive_free(struct archive *);

/*
 * Accessor functions to read/set various information in
 * the struct archive object:
 */

/* Number of filters in the current filter pipeline. */
/* Filter #0 is the one closest to the format, -1 is a synonym for the
 * last filter, which is always the pseudo-filter that wraps the
 * client callbacks. */
__LA_DECL int		 archive_filter_count(struct archive *);
__LA_DECL la_int64_t	 archive_filter_bytes(struct archive *, int);
__LA_DECL int		 archive_filter_code(struct archive *, int);
__LA_DECL const char *	 archive_filter_name(struct archive *, int);

#if ARCHIVE_VERSION_NUMBER < 4000000
/* These don't properly handle multiple filters, so are deprecated and
 * will eventually be removed. */
/* As of libarchive 3.0, this is an alias for archive_filter_bytes(a, -1); */
__LA_DECL la_int64_t	 archive_position_compressed(struct archive *)
				__LA_DEPRECATED;
/* As of libarchive 3.0, this is an alias for archive_filter_bytes(a, 0); */
__LA_DECL la_int64_t	 archive_position_uncompressed(struct archive *)
				__LA_DEPRECATED;
/* As of libarchive 3.0, this is an alias for archive_filter_name(a, 0); */
__LA_DECL const char	*archive_compression_name(struct archive *)
				__LA_DEPRECATED;
/* As of libarchive 3.0, this is an alias for archive_filter_code(a, 0); */
__LA_DECL int		 archive_compression(struct archive *)
				__LA_DEPRECATED;
#endif

__LA_DECL int		 archive_errno(struct archive *);
__LA_DECL const char	*archive_error_string(struct archive *);
__LA_DECL const char	*archive_format_name(struct archive *);
__LA_DECL int		 archive_format(struct archive *);
__LA_DECL void		 archive_clear_error(struct archive *);
__LA_DECL void		 archive_set_error(struct archive *, int _err,
			    const char *fmt, ...) __LA_PRINTF(3, 4);
__LA_DECL void		 archive_copy_error(struct archive *dest,
			    struct archive *src);
__LA_DECL int		 archive_file_count(struct archive *);

/*
 * ARCHIVE_MATCH API
 */
__LA_DECL struct archive *archive_match_new(void);
__LA_DECL int	archive_match_free(struct archive *);

/*
 * Test if archive_entry is excluded.
 * This is a convenience function. This is the same as calling all
 * archive_match_path_excluded, archive_match_time_excluded
 * and archive_match_owner_excluded.
 */
__LA_DECL int	archive_match_excluded(struct archive *,
		    struct archive_entry *);

/*
 * Test if pathname is excluded. The conditions are set by following functions.
 */
__LA_DECL int	archive_match_path_excluded(struct archive *,
		    struct archive_entry *);
/* Add exclusion pathname pattern. */
__LA_DECL int	archive_match_exclude_pattern(struct archive *, const char *);
__LA_DECL int	archive_match_exclude_pattern_w(struct archive *,
		    const wchar_t *);
/* Add exclusion pathname pattern from file. */
__LA_DECL int	archive_match_exclude_pattern_from_file(struct archive *,
		    const char *, int _nullSeparator);
__LA_DECL int	archive_match_exclude_pattern_from_file_w(struct archive *,
		    const wchar_t *, int _nullSeparator);
/* Add inclusion pathname pattern. */
__LA_DECL int	archive_match_include_pattern(struct archive *, const char *);
__LA_DECL int	archive_match_include_pattern_w(struct archive *,
		    const wchar_t *);
/* Add inclusion pathname pattern from file. */
__LA_DECL int	archive_match_include_pattern_from_file(struct archive *,
		    const char *, int _nullSeparator);
__LA_DECL int	archive_match_include_pattern_from_file_w(struct archive *,
		    const wchar_t *, int _nullSeparator);
/*
 * How to get statistic information for inclusion patterns.
 */
/* Return the amount number of unmatched inclusion patterns. */
__LA_DECL int	archive_match_path_unmatched_inclusions(struct archive *);
/* Return the pattern of unmatched inclusion with ARCHIVE_OK.
 * Return ARCHIVE_EOF if there is no inclusion pattern. */
__LA_DECL int	archive_match_path_unmatched_inclusions_next(
		    struct archive *, const char **);
__LA_DECL int	archive_match_path_unmatched_inclusions_next_w(
		    struct archive *, const wchar_t **);

/*
 * Test if a file is excluded by its time stamp.
 * The conditions are set by following functions.
 */
__LA_DECL int	archive_match_time_excluded(struct archive *,
		    struct archive_entry *);

/*
 * Flags to tell a matching type of time stamps. These are used for
 * following functions.
 */
/* Time flag: mtime to be tested. */
#define ARCHIVE_MATCH_MTIME	(0x0100)
/* Time flag: ctime to be tested. */
#define ARCHIVE_MATCH_CTIME	(0x0200)
/* Comparison flag: Match the time if it is newer than. */
#define ARCHIVE_MATCH_NEWER	(0x0001)
/* Comparison flag: Match the time if it is older than. */
#define ARCHIVE_MATCH_OLDER	(0x0002)
/* Comparison flag: Match the time if it is equal to. */
#define ARCHIVE_MATCH_EQUAL	(0x0010)
/* Set inclusion time. */
__LA_DECL int	archive_match_include_time(struct archive *, int _flag,
		    time_t _sec, long _nsec);
/* Set inclusion time by a date string. */
__LA_DECL int	archive_match_include_date(struct archive *, int _flag,
		    const char *_datestr);
__LA_DECL int	archive_match_include_date_w(struct archive *, int _flag,
		    const wchar_t *_datestr);
/* Set inclusion time by a particular file. */
__LA_DECL int	archive_match_include_file_time(struct archive *,
		    int _flag, const char *_pathname);
__LA_DECL int	archive_match_include_file_time_w(struct archive *,
		    int _flag, const wchar_t *_pathname);
/* Add exclusion entry. */
__LA_DECL int	archive_match_exclude_entry(struct archive *,
		    int _flag, struct archive_entry *);

/*
 * Test if a file is excluded by its uid ,gid, uname or gname.
 * The conditions are set by following functions.
 */
__LA_DECL int	archive_match_owner_excluded(struct archive *,
		    struct archive_entry *);
/* Add inclusion uid, gid, uname and gname. */
__LA_DECL int	archive_match_include_uid(struct archive *, la_int64_t);
__LA_DECL int	archive_match_include_gid(struct archive *, la_int64_t);
__LA_DECL int	archive_match_include_uname(struct archive *, const char *);
__LA_DECL int	archive_match_include_uname_w(struct archive *,
		    const wchar_t *);
__LA_DECL int	archive_match_include_gname(struct archive *, const char *);
__LA_DECL int	archive_match_include_gname_w(struct archive *,
		    const wchar_t *);

/* Utility functions */
/* Convenience function to sort a NULL terminated list of strings */
__LA_DECL int archive_utility_string_sort(char **);

#ifdef __cplusplus
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1493.cpp,"[6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 93, 2097, 0, 0, 1, 490, 274, 0, 0, 8, 0, 0, 0, 8, 446, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 274, 0, 0, 0, 0, 764, 0, 0, 0, 0, 0, 0, 0, 2, 500, 0, 0, 0, 6, 113, 0, 99, 99, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1493.cpp,1062
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive.cpp,1063,const char *fmt;,second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1494.cpp,"{
#endif

/*
 * The version number is provided as both a macro and a function.
 * The macro identifies the installed header; the function identifies
 * the library version (which may not be the same if you're using a
 * dynamically-linked version of the library).  Of course, if the
 * header and library are very different, you should expect some
 * strangeness.  Don't do that.
 */
__LA_DECL int		archive_version_number(void);

/*
 * Textual name/version of the library, useful for version displays.
 */
#define	ARCHIVE_VERSION_ONLY_STRING ""3.3.1""
#define	ARCHIVE_VERSION_STRING ""libarchive "" ARCHIVE_VERSION_ONLY_STRING
__LA_DECL const char *	archive_version_string(void);

/*
 * Detailed textual name/version of the library and its dependencies.
 * This has the form:
 *    ""libarchive x.y.z zlib/a.b.c liblzma/d.e.f ... etc ...""
 * the list of libraries described here will vary depending on how
 * libarchive was compiled.
 */
__LA_DECL const char *	archive_version_details(void);

/*
 * Returns NULL if libarchive was compiled without the associated library.
 * Otherwise, returns the version number that libarchive was compiled
 * against.
 */
__LA_DECL const char *  archive_zlib_version(void);
__LA_DECL const char *  archive_liblzma_version(void);
__LA_DECL const char *  archive_bzlib_version(void);
__LA_DECL const char *  archive_liblz4_version(void);

/* Declare our basic types. */
struct archive;
struct archive_entry;

/*
 * Error codes: Use archive_errno() and archive_error_string()
 * to retrieve details.  Unless specified otherwise, all functions
 * that return 'int' use these codes.
 */
#define	ARCHIVE_EOF	  1	/* Found end of archive. */
#define	ARCHIVE_OK	  0	/* Operation was successful. */
#define	ARCHIVE_RETRY	(-10)	/* Retry might succeed. */
#define	ARCHIVE_WARN	(-20)	/* Partial success. */
/* For example, if write_header ""fails"", then you can't push data. */
#define	ARCHIVE_FAILED	(-25)	/* Current operation cannot complete. */
/* But if write_header is ""fatal,"" then this archive is dead and useless. */
#define	ARCHIVE_FATAL	(-30)	/* No more operations are possible. */

/*
 * As far as possible, archive_errno returns standard platform errno codes.
 * Of course, the details vary by platform, so the actual definitions
 * here are stored in ""archive_platform.h"".  The symbols are listed here
 * for reference; as a rule, clients should not need to know the exact
 * platform-dependent error code.
 */
/* Unrecognized or invalid file format. */
/* #define	ARCHIVE_ERRNO_FILE_FORMAT */
/* Illegal usage of the library. */
/* #define	ARCHIVE_ERRNO_PROGRAMMER_ERROR */
/* Unknown or unclassified error. */
/* #define	ARCHIVE_ERRNO_MISC */

/*
 * Callbacks are invoked to automatically read/skip/write/open/close the
 * archive. You can provide your own for complex tasks (like breaking
 * archives across multiple tapes) or use standard ones built into the
 * library.
 */

/* Returns pointer and size of next block of data from archive. */
typedef la_ssize_t	archive_read_callback(struct archive *,
			    void *_client_data, const void **_buffer);

/* Skips at most request bytes from archive and returns the skipped amount.
 * This may skip fewer bytes than requested; it may even skip zero bytes.
 * If you do skip fewer bytes than requested, libarchive will invoke your
 * read callback and discard data as necessary to make up the full skip.
 */
typedef la_int64_t	archive_skip_callback(struct archive *,
			    void *_client_data, la_int64_t request);

/* Seeks to specified location in the file and returns the position.
 * Whence values are SEEK_SET, SEEK_CUR, SEEK_END from stdio.h.
 * Return ARCHIVE_FATAL if the seek fails for any reason.
 */
typedef la_int64_t	archive_seek_callback(struct archive *,
    void *_client_data, la_int64_t offset, int whence);

/* Returns size actually written, zero on EOF, -1 on error. */
typedef la_ssize_t	archive_write_callback(struct archive *,
			    void *_client_data,
			    const void *_buffer, size_t _length);

typedef int	archive_open_callback(struct archive *, void *_client_data);

typedef int	archive_close_callback(struct archive *, void *_client_data);

/* Switches from one client data object to the next/prev client data object.
 * This is useful for reading from different data blocks such as a set of files
 * that make up one large file.
 */
typedef int archive_switch_callback(struct archive *, void *_client_data1,
			    void *_client_data2);

/*
 * Returns a passphrase used for encryption or decryption, NULL on nothing
 * to do and give it up.
 */
typedef const char *archive_passphrase_callback(struct archive *,
			    void *_client_data);

/*
 * Codes to identify various stream filters.
 */
#define	ARCHIVE_FILTER_NONE	0
#define	ARCHIVE_FILTER_GZIP	1
#define	ARCHIVE_FILTER_BZIP2	2
#define	ARCHIVE_FILTER_COMPRESS	3
#define	ARCHIVE_FILTER_PROGRAM	4
#define	ARCHIVE_FILTER_LZMA	5
#define	ARCHIVE_FILTER_XZ	6
#define	ARCHIVE_FILTER_UU	7
#define	ARCHIVE_FILTER_RPM	8
#define	ARCHIVE_FILTER_LZIP	9
#define	ARCHIVE_FILTER_LRZIP	10
#define	ARCHIVE_FILTER_LZOP	11
#define	ARCHIVE_FILTER_GRZIP	12
#define	ARCHIVE_FILTER_LZ4	13

#if ARCHIVE_VERSION_NUMBER < 4000000
#define	ARCHIVE_COMPRESSION_NONE	ARCHIVE_FILTER_NONE
#define	ARCHIVE_COMPRESSION_GZIP	ARCHIVE_FILTER_GZIP
#define	ARCHIVE_COMPRESSION_BZIP2	ARCHIVE_FILTER_BZIP2
#define	ARCHIVE_COMPRESSION_COMPRESS	ARCHIVE_FILTER_COMPRESS
#define	ARCHIVE_COMPRESSION_PROGRAM	ARCHIVE_FILTER_PROGRAM
#define	ARCHIVE_COMPRESSION_LZMA	ARCHIVE_FILTER_LZMA
#define	ARCHIVE_COMPRESSION_XZ		ARCHIVE_FILTER_XZ
#define	ARCHIVE_COMPRESSION_UU		ARCHIVE_FILTER_UU
#define	ARCHIVE_COMPRESSION_RPM		ARCHIVE_FILTER_RPM
#define	ARCHIVE_COMPRESSION_LZIP	ARCHIVE_FILTER_LZIP
#define	ARCHIVE_COMPRESSION_LRZIP	ARCHIVE_FILTER_LRZIP
#endif

/*
 * Codes returned by archive_format.
 *
 * Top 16 bits identifies the format family (e.g., ""tar""); lower
 * 16 bits indicate the variant.  This is updated by read_next_header.
 * Note that the lower 16 bits will often vary from entry to entry.
 * In some cases, this variation occurs as libarchive learns more about
 * the archive (for example, later entries might utilize extensions that
 * weren't necessary earlier in the archive; in this case, libarchive
 * will change the format code to indicate the extended format that
 * was used).  In other cases, it's because different tools have
 * modified the archive and so different parts of the archive
 * actually have slightly different formats.  (Both tar and cpio store
 * format codes in each entry, so it is quite possible for each
 * entry to be in a different format.)
 */
#define	ARCHIVE_FORMAT_BASE_MASK		0xff0000
#define	ARCHIVE_FORMAT_CPIO			0x10000
#define	ARCHIVE_FORMAT_CPIO_POSIX		(ARCHIVE_FORMAT_CPIO | 1)
#define	ARCHIVE_FORMAT_CPIO_BIN_LE		(ARCHIVE_FORMAT_CPIO | 2)
#define	ARCHIVE_FORMAT_CPIO_BIN_BE		(ARCHIVE_FORMAT_CPIO | 3)
#define	ARCHIVE_FORMAT_CPIO_SVR4_NOCRC		(ARCHIVE_FORMAT_CPIO | 4)
#define	ARCHIVE_FORMAT_CPIO_SVR4_CRC		(ARCHIVE_FORMAT_CPIO | 5)
#define	ARCHIVE_FORMAT_CPIO_AFIO_LARGE		(ARCHIVE_FORMAT_CPIO | 6)
#define	ARCHIVE_FORMAT_SHAR			0x20000
#define	ARCHIVE_FORMAT_SHAR_BASE		(ARCHIVE_FORMAT_SHAR | 1)
#define	ARCHIVE_FORMAT_SHAR_DUMP		(ARCHIVE_FORMAT_SHAR | 2)
#define	ARCHIVE_FORMAT_TAR			0x30000
#define	ARCHIVE_FORMAT_TAR_USTAR		(ARCHIVE_FORMAT_TAR | 1)
#define	ARCHIVE_FORMAT_TAR_PAX_INTERCHANGE	(ARCHIVE_FORMAT_TAR | 2)
#define	ARCHIVE_FORMAT_TAR_PAX_RESTRICTED	(ARCHIVE_FORMAT_TAR | 3)
#define	ARCHIVE_FORMAT_TAR_GNUTAR		(ARCHIVE_FORMAT_TAR | 4)
#define	ARCHIVE_FORMAT_ISO9660			0x40000
#define	ARCHIVE_FORMAT_ISO9660_ROCKRIDGE	(ARCHIVE_FORMAT_ISO9660 | 1)
#define	ARCHIVE_FORMAT_ZIP			0x50000
#define	ARCHIVE_FORMAT_EMPTY			0x60000
#define	ARCHIVE_FORMAT_AR			0x70000
#define	ARCHIVE_FORMAT_AR_GNU			(ARCHIVE_FORMAT_AR | 1)
#define	ARCHIVE_FORMAT_AR_BSD			(ARCHIVE_FORMAT_AR | 2)
#define	ARCHIVE_FORMAT_MTREE			0x80000
#define	ARCHIVE_FORMAT_RAW			0x90000
#define	ARCHIVE_FORMAT_XAR			0xA0000
#define	ARCHIVE_FORMAT_LHA			0xB0000
#define	ARCHIVE_FORMAT_CAB			0xC0000
#define	ARCHIVE_FORMAT_RAR			0xD0000
#define	ARCHIVE_FORMAT_7ZIP			0xE0000
#define	ARCHIVE_FORMAT_WARC			0xF0000

/*
 * Codes returned by archive_read_format_capabilities().
 *
 * This list can be extended with values between 0 and 0xffff.
 * The original purpose of this list was to let different archive
 * format readers expose their general capabilities in terms of
 * encryption.
 */
#define ARCHIVE_READ_FORMAT_CAPS_NONE (0) /* no special capabilities */
#define ARCHIVE_READ_FORMAT_CAPS_ENCRYPT_DATA (1<<0)  /* reader can detect encrypted data */
#define ARCHIVE_READ_FORMAT_CAPS_ENCRYPT_METADATA (1<<1)  /* reader can detect encryptable metadata (pathname, mtime, etc.) */

/*
 * Codes returned by archive_read_has_encrypted_entries().
 *
 * In case the archive does not support encryption detection at all
 * ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED is returned. If the reader
 * for some other reason (e.g. not enough bytes read) cannot say if
 * there are encrypted entries, ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW
 * is returned.
 */
#define ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED -2
#define ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW -1

/*-
 * Basic outline for reading an archive:
 *   1) Ask archive_read_new for an archive reader object.
 *   2) Update any global properties as appropriate.
 *      In particular, you'll certainly want to call appropriate
 *      archive_read_support_XXX functions.
 *   3) Call archive_read_open_XXX to open the archive
 *   4) Repeatedly call archive_read_next_header to get information about
 *      successive archive entries.  Call archive_read_data to extract
 *      data for entries of interest.
 *   5) Call archive_read_free to end processing.
 */
__LA_DECL struct archive	*archive_read_new(void);

/*
 * The archive_read_support_XXX calls enable auto-detect for this
 * archive handle.  They also link in the necessary support code.
 * For example, if you don't want bzlib linked in, don't invoke
 * support_compression_bzip2().  The ""all"" functions provide the
 * obvious shorthand.
 */

#if ARCHIVE_VERSION_NUMBER < 4000000
__LA_DECL int archive_read_support_compression_all(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_bzip2(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_compress(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_gzip(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_lzip(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_lzma(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_none(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_program(struct archive *,
		     const char *command) __LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_program_signature
		(struct archive *, const char *,
		 const void * /* match */, size_t) __LA_DEPRECATED;

__LA_DECL int archive_read_support_compression_rpm(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_uu(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_read_support_compression_xz(struct archive *)
		__LA_DEPRECATED;
#endif

__LA_DECL int archive_read_support_filter_all(struct archive *);
__LA_DECL int archive_read_support_filter_bzip2(struct archive *);
__LA_DECL int archive_read_support_filter_compress(struct archive *);
__LA_DECL int archive_read_support_filter_gzip(struct archive *);
__LA_DECL int archive_read_support_filter_grzip(struct archive *);
__LA_DECL int archive_read_support_filter_lrzip(struct archive *);
__LA_DECL int archive_read_support_filter_lz4(struct archive *);
__LA_DECL int archive_read_support_filter_lzip(struct archive *);
__LA_DECL int archive_read_support_filter_lzma(struct archive *);
__LA_DECL int archive_read_support_filter_lzop(struct archive *);
__LA_DECL int archive_read_support_filter_none(struct archive *);
__LA_DECL int archive_read_support_filter_program(struct archive *,
		     const char *command);
__LA_DECL int archive_read_support_filter_program_signature
		(struct archive *, const char * /* cmd */,
				    const void * /* match */, size_t);
__LA_DECL int archive_read_support_filter_rpm(struct archive *);
__LA_DECL int archive_read_support_filter_uu(struct archive *);
__LA_DECL int archive_read_support_filter_xz(struct archive *);

__LA_DECL int archive_read_support_format_7zip(struct archive *);
__LA_DECL int archive_read_support_format_all(struct archive *);
__LA_DECL int archive_read_support_format_ar(struct archive *);
__LA_DECL int archive_read_support_format_by_code(struct archive *, int);
__LA_DECL int archive_read_support_format_cab(struct archive *);
__LA_DECL int archive_read_support_format_cpio(struct archive *);
__LA_DECL int archive_read_support_format_empty(struct archive *);
__LA_DECL int archive_read_support_format_gnutar(struct archive *);
__LA_DECL int archive_read_support_format_iso9660(struct archive *);
__LA_DECL int archive_read_support_format_lha(struct archive *);
__LA_DECL int archive_read_support_format_mtree(struct archive *);
__LA_DECL int archive_read_support_format_rar(struct archive *);
__LA_DECL int archive_read_support_format_raw(struct archive *);
__LA_DECL int archive_read_support_format_tar(struct archive *);
__LA_DECL int archive_read_support_format_warc(struct archive *);
__LA_DECL int archive_read_support_format_xar(struct archive *);
/* archive_read_support_format_zip() enables both streamable and seekable
 * zip readers. */
__LA_DECL int archive_read_support_format_zip(struct archive *);
/* Reads Zip archives as stream from beginning to end.  Doesn't
 * correctly handle SFX ZIP files or ZIP archives that have been modified
 * in-place. */
__LA_DECL int archive_read_support_format_zip_streamable(struct archive *);
/* Reads starting from central directory; requires seekable input. */
__LA_DECL int archive_read_support_format_zip_seekable(struct archive *);

/* Functions to manually set the format and filters to be used. This is
 * useful to bypass the bidding process when the format and filters to use
 * is known in advance.
 */
__LA_DECL int archive_read_set_format(struct archive *, int);
__LA_DECL int archive_read_append_filter(struct archive *, int);
__LA_DECL int archive_read_append_filter_program(struct archive *,
    const char *);
__LA_DECL int archive_read_append_filter_program_signature
    (struct archive *, const char *, const void * /* match */, size_t);

/* Set various callbacks. */
__LA_DECL int archive_read_set_open_callback(struct archive *,
    archive_open_callback *);
__LA_DECL int archive_read_set_read_callback(struct archive *,
    archive_read_callback *);
__LA_DECL int archive_read_set_seek_callback(struct archive *,
    archive_seek_callback *);
__LA_DECL int archive_read_set_skip_callback(struct archive *,
    archive_skip_callback *);
__LA_DECL int archive_read_set_close_callback(struct archive *,
    archive_close_callback *);
/* Callback used to switch between one data object to the next */
__LA_DECL int archive_read_set_switch_callback(struct archive *,
    archive_switch_callback *);

/* This sets the first data object. */
__LA_DECL int archive_read_set_callback_data(struct archive *, void *);
/* This sets data object at specified index */
__LA_DECL int archive_read_set_callback_data2(struct archive *, void *,
    unsigned int);
/* This adds a data object at the specified index. */
__LA_DECL int archive_read_add_callback_data(struct archive *, void *,
    unsigned int);
/* This appends a data object to the end of list */
__LA_DECL int archive_read_append_callback_data(struct archive *, void *);
/* This prepends a data object to the beginning of list */
__LA_DECL int archive_read_prepend_callback_data(struct archive *, void *);

/* Opening freezes the callbacks. */
__LA_DECL int archive_read_open1(struct archive *);

/* Convenience wrappers around the above. */
__LA_DECL int archive_read_open(struct archive *, void *_client_data,
		     archive_open_callback *, archive_read_callback *,
		     archive_close_callback *);
__LA_DECL int archive_read_open2(struct archive *, void *_client_data,
		     archive_open_callback *, archive_read_callback *,
		     archive_skip_callback *, archive_close_callback *);

/*
 * A variety of shortcuts that invoke archive_read_open() with
 * canned callbacks suitable for common situations.  The ones that
 * accept a block size handle tape blocking correctly.
 */
/* Use this if you know the filename.  Note: NULL indicates stdin. */
__LA_DECL int archive_read_open_filename(struct archive *,
		     const char *_filename, size_t _block_size);
/* Use this for reading multivolume files by filenames.
 * NOTE: Must be NULL terminated. Sorting is NOT done. */
__LA_DECL int archive_read_open_filenames(struct archive *,
		     const char **_filenames, size_t _block_size);
__LA_DECL int archive_read_open_filename_w(struct archive *,
		     const wchar_t *_filename, size_t _block_size);
/* archive_read_open_file() is a deprecated synonym for ..._open_filename(). */
__LA_DECL int archive_read_open_file(struct archive *,
		     const char *_filename, size_t _block_size) __LA_DEPRECATED;
/* Read an archive that's stored in memory. */
__LA_DECL int archive_read_open_memory(struct archive *,
		     const void * buff, size_t size);
/* A more involved version that is only used for internal testing. */
__LA_DECL int archive_read_open_memory2(struct archive *a, const void *buff,
		     size_t size, size_t read_size);
/* Read an archive that's already open, using the file descriptor. */
__LA_DECL int archive_read_open_fd(struct archive *, int _fd,
		     size_t _block_size);
/* Read an archive that's already open, using a FILE *. */
/* Note: DO NOT use this with tape drives. */
__LA_DECL int archive_read_open_FILE(struct archive *, FILE *_file);

/* Parses and returns next entry header. */
__LA_DECL int archive_read_next_header(struct archive *,
		     struct archive_entry **);

/* Parses and returns next entry header using the archive_entry passed in */
__LA_DECL int archive_read_next_header2(struct archive *,
		     struct archive_entry *);

/*
 * Retrieve the byte offset in UNCOMPRESSED data where last-read
 * header started.
 */
__LA_DECL la_int64_t		 archive_read_header_position(struct archive *);

/*
 * Returns 1 if the archive contains at least one encrypted entry.
 * If the archive format not support encryption at all
 * ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED is returned.
 * If for any other reason (e.g. not enough data read so far)
 * we cannot say whether there are encrypted entries, then
 * ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW is returned.
 * In general, this function will return values below zero when the
 * reader is uncertain or totally incapable of encryption support.
 * When this function returns 0 you can be sure that the reader
 * supports encryption detection but no encrypted entries have
 * been found yet.
 *
 * NOTE: If the metadata/header of an archive is also encrypted, you
 * cannot rely on the number of encrypted entries. That is why this
 * function does not return the number of encrypted entries but#
 * just shows that there are some.
 */
__LA_DECL int	archive_read_has_encrypted_entries(struct archive *);

/*
 * Returns a bitmask of capabilities that are supported by the archive format reader.
 * If the reader has no special capabilities, ARCHIVE_READ_FORMAT_CAPS_NONE is returned.
 */
__LA_DECL int		 archive_read_format_capabilities(struct archive *);

/* Read data from the body of an entry.  Similar to read(2). */
__LA_DECL la_ssize_t		 archive_read_data(struct archive *,
				    void *, size_t);

/* Seek within the body of an entry.  Similar to lseek(2). */
__LA_DECL la_int64_t archive_seek_data(struct archive *, la_int64_t, int);

/*
 * A zero-copy version of archive_read_data that also exposes the file offset
 * of each returned block.  Note that the client has no way to specify
 * the desired size of the block.  The API does guarantee that offsets will
 * be strictly increasing and that returned blocks will not overlap.
 */
__LA_DECL int archive_read_data_block(struct archive *a,
		    const void **buff, size_t *size, la_int64_t *offset);

/*-
 * Some convenience functions that are built on archive_read_data:
 *  'skip': skips entire entry
 *  'into_buffer': writes data into memory buffer that you provide
 *  'into_fd': writes data to specified filedes
 */
__LA_DECL int archive_read_data_skip(struct archive *);
__LA_DECL int archive_read_data_into_fd(struct archive *, int fd);

/*
 * Set read options.
 */
/* Apply option to the format only. */
__LA_DECL int archive_read_set_format_option(struct archive *_a,
			    const char *m, const char *o,
			    const char *v);
/* Apply option to the filter only. */
__LA_DECL int archive_read_set_filter_option(struct archive *_a,
			    const char *m, const char *o,
			    const char *v);
/* Apply option to both the format and the filter. */
__LA_DECL int archive_read_set_option(struct archive *_a,
			    const char *m, const char *o,
			    const char *v);
/* Apply option string to both the format and the filter. */
__LA_DECL int archive_read_set_options(struct archive *_a,
			    const char *opts);

/*
 * Add a decryption passphrase.
 */
__LA_DECL int archive_read_add_passphrase(struct archive *, const char *);
__LA_DECL int archive_read_set_passphrase_callback(struct archive *,
			    void *client_data, archive_passphrase_callback *);


/*-
 * Convenience function to recreate the current entry (whose header
 * has just been read) on disk.
 *
 * This does quite a bit more than just copy data to disk. It also:
 *  - Creates intermediate directories as required.
 *  - Manages directory permissions:  non-writable directories will
 *    be initially created with write permission enabled; when the
 *    archive is closed, dir permissions are edited to the values specified
 *    in the archive.
 *  - Checks hardlinks:  hardlinks will not be extracted unless the
 *    linked-to file was also extracted within the same session. (TODO)
 */

/* The ""flags"" argument selects optional behavior, 'OR' the flags you want. */

/* Default: Do not try to set owner/group. */
#define	ARCHIVE_EXTRACT_OWNER			(0x0001)
/* Default: Do obey umask, do not restore SUID/SGID/SVTX bits. */
#define	ARCHIVE_EXTRACT_PERM			(0x0002)
/* Default: Do not restore mtime/atime. */
#define	ARCHIVE_EXTRACT_TIME			(0x0004)
/* Default: Replace existing files. */
#define	ARCHIVE_EXTRACT_NO_OVERWRITE 		(0x0008)
/* Default: Try create first, unlink only if create fails with EEXIST. */
#define	ARCHIVE_EXTRACT_UNLINK			(0x0010)
/* Default: Do not restore ACLs. */
#define	ARCHIVE_EXTRACT_ACL			(0x0020)
/* Default: Do not restore fflags. */
#define	ARCHIVE_EXTRACT_FFLAGS			(0x0040)
/* Default: Do not restore xattrs. */
#define	ARCHIVE_EXTRACT_XATTR 			(0x0080)
/* Default: Do not try to guard against extracts redirected by symlinks. */
/* Note: With ARCHIVE_EXTRACT_UNLINK, will remove any intermediate symlink. */
#define	ARCHIVE_EXTRACT_SECURE_SYMLINKS		(0x0100)
/* Default: Do not reject entries with '..' as path elements. */
#define	ARCHIVE_EXTRACT_SECURE_NODOTDOT		(0x0200)
/* Default: Create parent directories as needed. */
#define	ARCHIVE_EXTRACT_NO_AUTODIR		(0x0400)
/* Default: Overwrite files, even if one on disk is newer. */
#define	ARCHIVE_EXTRACT_NO_OVERWRITE_NEWER	(0x0800)
/* Detect blocks of 0 and write holes instead. */
#define	ARCHIVE_EXTRACT_SPARSE			(0x1000)
/* Default: Do not restore Mac extended metadata. */
/* This has no effect except on Mac OS. */
#define	ARCHIVE_EXTRACT_MAC_METADATA		(0x2000)
/* Default: Use HFS+ compression if it was compressed. */
/* This has no effect except on Mac OS v10.6 or later. */
#define	ARCHIVE_EXTRACT_NO_HFS_COMPRESSION	(0x4000)
/* Default: Do not use HFS+ compression if it was not compressed. */
/* This has no effect except on Mac OS v10.6 or later. */
#define	ARCHIVE_EXTRACT_HFS_COMPRESSION_FORCED	(0x8000)
/* Default: Do not reject entries with absolute paths */
#define ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS (0x10000)
/* Default: Do not clear no-change flags when unlinking object */
#define	ARCHIVE_EXTRACT_CLEAR_NOCHANGE_FFLAGS	(0x20000)

__LA_DECL int archive_read_extract(struct archive *, struct archive_entry *,
		     int flags);
__LA_DECL int archive_read_extract2(struct archive *, struct archive_entry *,
		     struct archive * /* dest */);
__LA_DECL void	 archive_read_extract_set_progress_callback(struct archive *,
		     void (*_progress_func)(void *), void *_user_data);

/* Record the dev/ino of a file that will not be written.  This is
 * generally set to the dev/ino of the archive being read. */
__LA_DECL void		archive_read_extract_set_skip_file(struct archive *,
		     la_int64_t, la_int64_t);

/* Close the file and release most resources. */
__LA_DECL int		 archive_read_close(struct archive *);
/* Release all resources and destroy the object. */
/* Note that archive_read_free will call archive_read_close for you. */
__LA_DECL int		 archive_read_free(struct archive *);
#if ARCHIVE_VERSION_NUMBER < 4000000
/* Synonym for archive_read_free() for backwards compatibility. */
__LA_DECL int		 archive_read_finish(struct archive *) __LA_DEPRECATED;
#endif

/*-
 * To create an archive:
 *   1) Ask archive_write_new for an archive writer object.
 *   2) Set any global properties.  In particular, you should set
 *      the compression and format to use.
 *   3) Call archive_write_open to open the file (most people
 *       will use archive_write_open_file or archive_write_open_fd,
 *       which provide convenient canned I/O callbacks for you).
 *   4) For each entry:
 *      - construct an appropriate struct archive_entry structure
 *      - archive_write_header to write the header
 *      - archive_write_data to write the entry data
 *   5) archive_write_close to close the output
 *   6) archive_write_free to cleanup the writer and release resources
 */
__LA_DECL struct archive	*archive_write_new(void);
__LA_DECL int archive_write_set_bytes_per_block(struct archive *,
		     int bytes_per_block);
__LA_DECL int archive_write_get_bytes_per_block(struct archive *);
/* XXX This is badly misnamed; suggestions appreciated. XXX */
__LA_DECL int archive_write_set_bytes_in_last_block(struct archive *,
		     int bytes_in_last_block);
__LA_DECL int archive_write_get_bytes_in_last_block(struct archive *);

/* The dev/ino of a file that won't be archived.  This is used
 * to avoid recursively adding an archive to itself. */
__LA_DECL int archive_write_set_skip_file(struct archive *,
    la_int64_t, la_int64_t);

#if ARCHIVE_VERSION_NUMBER < 4000000
__LA_DECL int archive_write_set_compression_bzip2(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_write_set_compression_compress(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_write_set_compression_gzip(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_write_set_compression_lzip(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_write_set_compression_lzma(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_write_set_compression_none(struct archive *)
		__LA_DEPRECATED;
__LA_DECL int archive_write_set_compression_program(struct archive *,
		     const char *cmd) __LA_DEPRECATED;
__LA_DECL int archive_write_set_compression_xz(struct archive *)
		__LA_DEPRECATED;
#endif

/* A convenience function to set the filter based on the code. */
__LA_DECL int archive_write_add_filter(struct archive *, int filter_code);
__LA_DECL int archive_write_add_filter_by_name(struct archive *,
		     const char *name);
__LA_DECL int archive_write_add_filter_b64encode(struct archive *);
__LA_DECL int archive_write_add_filter_bzip2(struct archive *);
__LA_DECL int archive_write_add_filter_compress(struct archive *);
__LA_DECL int archive_write_add_filter_grzip(struct archive *);
__LA_DECL int archive_write_add_filter_gzip(struct archive *);
__LA_DECL int archive_write_add_filter_lrzip(struct archive *);
__LA_DECL int archive_write_add_filter_lz4(struct archive *);
__LA_DECL int archive_write_add_filter_lzip(struct archive *);
__LA_DECL int archive_write_add_filter_lzma(struct archive *);
__LA_DECL int archive_write_add_filter_lzop(struct archive *);
__LA_DECL int archive_write_add_filter_none(struct archive *);
__LA_DECL int archive_write_add_filter_program(struct archive *,
		     const char *cmd);
__LA_DECL int archive_write_add_filter_uuencode(struct archive *);
__LA_DECL int archive_write_add_filter_xz(struct archive *);


/* A convenience function to set the format based on the code or name. */
__LA_DECL int archive_write_set_format(struct archive *, int format_code);
__LA_DECL int archive_write_set_format_by_name(struct archive *,
		     const char *name);
/* To minimize link pollution, use one or more of the following. */
__LA_DECL int archive_write_set_format_7zip(struct archive *);
__LA_DECL int archive_write_set_format_ar_bsd(struct archive *);
__LA_DECL int archive_write_set_format_ar_svr4(struct archive *);
__LA_DECL int archive_write_set_format_cpio(struct archive *);
__LA_DECL int archive_write_set_format_cpio_newc(struct archive *);
__LA_DECL int archive_write_set_format_gnutar(struct archive *);
__LA_DECL int archive_write_set_format_iso9660(struct archive *);
__LA_DECL int archive_write_set_format_mtree(struct archive *);
__LA_DECL int archive_write_set_format_mtree_classic(struct archive *);
/* TODO: int archive_write_set_format_old_tar(struct archive *); */
__LA_DECL int archive_write_set_format_pax(struct archive *);
__LA_DECL int archive_write_set_format_pax_restricted(struct archive *);
__LA_DECL int archive_write_set_format_raw(struct archive *);
__LA_DECL int archive_write_set_format_shar(struct archive *);
__LA_DECL int archive_write_set_format_shar_dump(struct archive *);
__LA_DECL int archive_write_set_format_ustar(struct archive *);
__LA_DECL int archive_write_set_format_v7tar(struct archive *);
__LA_DECL int archive_write_set_format_warc(struct archive *);
__LA_DECL int archive_write_set_format_xar(struct archive *);
__LA_DECL int archive_write_set_format_zip(struct archive *);
__LA_DECL int archive_write_set_format_filter_by_ext(struct archive *a, const char *filename);
__LA_DECL int archive_write_set_format_filter_by_ext_def(struct archive *a, const char *filename, const char * def_ext);
__LA_DECL int archive_write_zip_set_compression_deflate(struct archive *);
__LA_DECL int archive_write_zip_set_compression_store(struct archive *);
__LA_DECL int archive_write_open(struct archive *, void *,
		     archive_open_callback *, archive_write_callback *,
		     archive_close_callback *);
__LA_DECL int archive_write_open_fd(struct archive *, int _fd);
__LA_DECL int archive_write_open_filename(struct archive *, const char *_file);
__LA_DECL int archive_write_open_filename_w(struct archive *,
		     const wchar_t *_file);
/* A deprecated synonym for archive_write_open_filename() */
__LA_DECL int archive_write_open_file(struct archive *, const char *_file)
		__LA_DEPRECATED;
__LA_DECL int archive_write_open_FILE(struct archive *, FILE *);
/* _buffSize is the size of the buffer, _used refers to a variable that
 * will be updated after each write into the buffer. */
__LA_DECL int archive_write_open_memory(struct archive *,
			void *_buffer, size_t _buffSize, size_t *_used);

/*
 * Note that the library will truncate writes beyond the size provided
 * to archive_write_header or pad if the provided data is short.
 */
__LA_DECL int archive_write_header(struct archive *,
		     struct archive_entry *);
__LA_DECL la_ssize_t	archive_write_data(struct archive *,
			    const void *, size_t);

/* This interface is currently only available for archive_write_disk handles.  */
__LA_DECL la_ssize_t	 archive_write_data_block(struct archive *,
				    const void *, size_t, la_int64_t);

__LA_DECL int		 archive_write_finish_entry(struct archive *);
__LA_DECL int		 archive_write_close(struct archive *);
/* Marks the archive as FATAL so that a subsequent free() operation
 * won't try to close() cleanly.  Provides a fast abort capability
 * when the client discovers that things have gone wrong. */
__LA_DECL int            archive_write_fail(struct archive *);
/* This can fail if the archive wasn't already closed, in which case
 * archive_write_free() will implicitly call archive_write_close(). */
__LA_DECL int		 archive_write_free(struct archive *);
#if ARCHIVE_VERSION_NUMBER < 4000000
/* Synonym for archive_write_free() for backwards compatibility. */
__LA_DECL int		 archive_write_finish(struct archive *) __LA_DEPRECATED;
#endif

/*
 * Set write options.
 */
/* Apply option to the format only. */
__LA_DECL int archive_write_set_format_option(struct archive *_a,
			    const char *m, const char *o,
			    const char *v);
/* Apply option to the filter only. */
__LA_DECL int archive_write_set_filter_option(struct archive *_a,
			    const char *m, const char *o,
			    const char *v);
/* Apply option to both the format and the filter. */
__LA_DECL int archive_write_set_option(struct archive *_a,
			    const char *m, const char *o,
			    const char *v);
/* Apply option string to both the format and the filter. */
__LA_DECL int archive_write_set_options(struct archive *_a,
			    const char *opts);

/*
 * Set a encryption passphrase.
 */
__LA_DECL int archive_write_set_passphrase(struct archive *_a, const char *p);
__LA_DECL int archive_write_set_passphrase_callback(struct archive *,
			    void *client_data, archive_passphrase_callback *);

/*-
 * ARCHIVE_WRITE_DISK API
 *
 * To create objects on disk:
 *   1) Ask archive_write_disk_new for a new archive_write_disk object.
 *   2) Set any global properties.  In particular, you probably
 *      want to set the options.
 *   3) For each entry:
 *      - construct an appropriate struct archive_entry structure
 *      - archive_write_header to create the file/dir/etc on disk
 *      - archive_write_data to write the entry data
 *   4) archive_write_free to cleanup the writer and release resources
 *
 * In particular, you can use this in conjunction with archive_read()
 * to pull entries out of an archive and create them on disk.
 */
__LA_DECL struct archive	*archive_write_disk_new(void);
/* This file will not be overwritten. */
__LA_DECL int archive_write_disk_set_skip_file(struct archive *,
    la_int64_t, la_int64_t);
/* Set flags to control how the next item gets created.
 * This accepts a bitmask of ARCHIVE_EXTRACT_XXX flags defined above. */
__LA_DECL int		 archive_write_disk_set_options(struct archive *,
		     int flags);
/*
 * The lookup functions are given uname/uid (or gname/gid) pairs and
 * return a uid (gid) suitable for this system.  These are used for
 * restoring ownership and for setting ACLs.  The default functions
 * are naive, they just return the uid/gid.  These are small, so reasonable
 * for applications that don't need to preserve ownership; they
 * are probably also appropriate for applications that are doing
 * same-system backup and restore.
 */
/*
 * The ""standard"" lookup functions use common system calls to lookup
 * the uname/gname, falling back to the uid/gid if the names can't be
 * found.  They cache lookups and are reasonably fast, but can be very
 * large, so they are not used unless you ask for them.  In
 * particular, these match the specifications of POSIX ""pax"" and old
 * POSIX ""tar"".
 */
__LA_DECL int	 archive_write_disk_set_standard_lookup(struct archive *);
/*
 * If neither the default (naive) nor the standard (big) functions suit
 * your needs, you can write your own and register them.  Be sure to
 * include a cleanup function if you have allocated private data.
 */
__LA_DECL int archive_write_disk_set_group_lookup(struct archive *,
    void * /* private_data */,
    la_int64_t (*)(void *, const char *, la_int64_t),
    void (* /* cleanup */)(void *));
__LA_DECL int archive_write_disk_set_user_lookup(struct archive *,
    void * /* private_data */,
    la_int64_t (*)(void *, const char *, la_int64_t),
    void (* /* cleanup */)(void *));
__LA_DECL la_int64_t archive_write_disk_gid(struct archive *, const char *, la_int64_t);
__LA_DECL la_int64_t archive_write_disk_uid(struct archive *, const char *, la_int64_t);

/*
 * ARCHIVE_READ_DISK API
 *
 * This is still evolving and somewhat experimental.
 */
__LA_DECL struct archive *archive_read_disk_new(void);
/* The names for symlink modes here correspond to an old BSD
 * command-line argument convention: -L, -P, -H */
/* Follow all symlinks. */
__LA_DECL int archive_read_disk_set_symlink_logical(struct archive *);
/* Follow no symlinks. */
__LA_DECL int archive_read_disk_set_symlink_physical(struct archive *);
/* Follow symlink initially, then not. */
__LA_DECL int archive_read_disk_set_symlink_hybrid(struct archive *);
/* TODO: Handle Linux stat32/stat64 ugliness. <sigh> */
__LA_DECL int archive_read_disk_entry_from_file(struct archive *,
    struct archive_entry *, int /* fd */, const struct stat *);
/* Look up gname for gid or uname for uid. */
/* Default implementations are very, very stupid. */
__LA_DECL const char *archive_read_disk_gname(struct archive *, la_int64_t);
__LA_DECL const char *archive_read_disk_uname(struct archive *, la_int64_t);
/* ""Standard"" implementation uses getpwuid_r, getgrgid_r and caches the
 * results for performance. */
__LA_DECL int	archive_read_disk_set_standard_lookup(struct archive *);
/* You can install your own lookups if you like. */
__LA_DECL int	archive_read_disk_set_gname_lookup(struct archive *,
    void * /* private_data */,
    const char *(* /* lookup_fn */)(void *, la_int64_t),
    void (* /* cleanup_fn */)(void *));
__LA_DECL int	archive_read_disk_set_uname_lookup(struct archive *,
    void * /* private_data */,
    const char *(* /* lookup_fn */)(void *, la_int64_t),
    void (* /* cleanup_fn */)(void *));
/* Start traversal. */
__LA_DECL int	archive_read_disk_open(struct archive *, const char *);
__LA_DECL int	archive_read_disk_open_w(struct archive *, const wchar_t *);
/*
 * Request that current entry be visited.  If you invoke it on every
 * directory, you'll get a physical traversal.  This is ignored if the
 * current entry isn't a directory or a link to a directory.  So, if
 * you invoke this on every returned path, you'll get a full logical
 * traversal.
 */
__LA_DECL int	archive_read_disk_descend(struct archive *);
__LA_DECL int	archive_read_disk_can_descend(struct archive *);
__LA_DECL int	archive_read_disk_current_filesystem(struct archive *);
__LA_DECL int	archive_read_disk_current_filesystem_is_synthetic(struct archive *);
__LA_DECL int	archive_read_disk_current_filesystem_is_remote(struct archive *);
/* Request that the access time of the entry visited by traversal be restored. */
__LA_DECL int  archive_read_disk_set_atime_restored(struct archive *);
/*
 * Set behavior. The ""flags"" argument selects optional behavior.
 */
/* Request that the access time of the entry visited by traversal be restored.
 * This is the same as archive_read_disk_set_atime_restored. */
#define	ARCHIVE_READDISK_RESTORE_ATIME		(0x0001)
/* Default: Do not skip an entry which has nodump flags. */
#define	ARCHIVE_READDISK_HONOR_NODUMP		(0x0002)
/* Default: Skip a mac resource fork file whose prefix is ""._"" because of
 * using copyfile. */
#define	ARCHIVE_READDISK_MAC_COPYFILE		(0x0004)
/* Default: Traverse mount points. */
#define	ARCHIVE_READDISK_NO_TRAVERSE_MOUNTS	(0x0008)
/* Default: Xattrs are read from disk. */
#define	ARCHIVE_READDISK_NO_XATTR		(0x0010)
/* Default: ACLs are read from disk. */
#define	ARCHIVE_READDISK_NO_ACL			(0x0020)
/* Default: File flags are read from disk. */
#define	ARCHIVE_READDISK_NO_FFLAGS		(0x0040)

__LA_DECL int  archive_read_disk_set_behavior(struct archive *,
		    int flags);

/*
 * Set archive_match object that will be used in archive_read_disk to
 * know whether an entry should be skipped. The callback function
 * _excluded_func will be invoked when an entry is skipped by the result
 * of archive_match.
 */
__LA_DECL int	archive_read_disk_set_matching(struct archive *,
		    struct archive *_matching, void (*_excluded_func)
		    (struct archive *, void *, struct archive_entry *),
		    void *_client_data);
__LA_DECL int	archive_read_disk_set_metadata_filter_callback(struct archive *,
		    int (*_metadata_filter_func)(struct archive *, void *,
		    	struct archive_entry *), void *_client_data);

/* Simplified cleanup interface;
 * This calls archive_read_free() or archive_write_free() as needed. */
__LA_DECL int	archive_free(struct archive *);

/*
 * Accessor functions to read/set various information in
 * the struct archive object:
 */

/* Number of filters in the current filter pipeline. */
/* Filter #0 is the one closest to the format, -1 is a synonym for the
 * last filter, which is always the pseudo-filter that wraps the
 * client callbacks. */
__LA_DECL int		 archive_filter_count(struct archive *);
__LA_DECL la_int64_t	 archive_filter_bytes(struct archive *, int);
__LA_DECL int		 archive_filter_code(struct archive *, int);
__LA_DECL const char *	 archive_filter_name(struct archive *, int);

#if ARCHIVE_VERSION_NUMBER < 4000000
/* These don't properly handle multiple filters, so are deprecated and
 * will eventually be removed. */
/* As of libarchive 3.0, this is an alias for archive_filter_bytes(a, -1); */
__LA_DECL la_int64_t	 archive_position_compressed(struct archive *)
				__LA_DEPRECATED;
/* As of libarchive 3.0, this is an alias for archive_filter_bytes(a, 0); */
__LA_DECL la_int64_t	 archive_position_uncompressed(struct archive *)
				__LA_DEPRECATED;
/* As of libarchive 3.0, this is an alias for archive_filter_name(a, 0); */
__LA_DECL const char	*archive_compression_name(struct archive *)
				__LA_DEPRECATED;
/* As of libarchive 3.0, this is an alias for archive_filter_code(a, 0); */
__LA_DECL int		 archive_compression(struct archive *)
				__LA_DEPRECATED;
#endif

__LA_DECL int		 archive_errno(struct archive *);
__LA_DECL const char	*archive_error_string(struct archive *);
__LA_DECL const char	*archive_format_name(struct archive *);
__LA_DECL int		 archive_format(struct archive *);
__LA_DECL void		 archive_clear_error(struct archive *);
__LA_DECL void		 archive_set_error(struct archive *, int _err,
			    const char *fmt, ...) __LA_PRINTF(3, 4);
__LA_DECL void		 archive_copy_error(struct archive *dest,
			    struct archive *src);
__LA_DECL int		 archive_file_count(struct archive *);

/*
 * ARCHIVE_MATCH API
 */
__LA_DECL struct archive *archive_match_new(void);
__LA_DECL int	archive_match_free(struct archive *);

/*
 * Test if archive_entry is excluded.
 * This is a convenience function. This is the same as calling all
 * archive_match_path_excluded, archive_match_time_excluded
 * and archive_match_owner_excluded.
 */
__LA_DECL int	archive_match_excluded(struct archive *,
		    struct archive_entry *);

/*
 * Test if pathname is excluded. The conditions are set by following functions.
 */
__LA_DECL int	archive_match_path_excluded(struct archive *,
		    struct archive_entry *);
/* Add exclusion pathname pattern. */
__LA_DECL int	archive_match_exclude_pattern(struct archive *, const char *);
__LA_DECL int	archive_match_exclude_pattern_w(struct archive *,
		    const wchar_t *);
/* Add exclusion pathname pattern from file. */
__LA_DECL int	archive_match_exclude_pattern_from_file(struct archive *,
		    const char *, int _nullSeparator);
__LA_DECL int	archive_match_exclude_pattern_from_file_w(struct archive *,
		    const wchar_t *, int _nullSeparator);
/* Add inclusion pathname pattern. */
__LA_DECL int	archive_match_include_pattern(struct archive *, const char *);
__LA_DECL int	archive_match_include_pattern_w(struct archive *,
		    const wchar_t *);
/* Add inclusion pathname pattern from file. */
__LA_DECL int	archive_match_include_pattern_from_file(struct archive *,
		    const char *, int _nullSeparator);
__LA_DECL int	archive_match_include_pattern_from_file_w(struct archive *,
		    const wchar_t *, int _nullSeparator);
/*
 * How to get statistic information for inclusion patterns.
 */
/* Return the amount number of unmatched inclusion patterns. */
__LA_DECL int	archive_match_path_unmatched_inclusions(struct archive *);
/* Return the pattern of unmatched inclusion with ARCHIVE_OK.
 * Return ARCHIVE_EOF if there is no inclusion pattern. */
__LA_DECL int	archive_match_path_unmatched_inclusions_next(
		    struct archive *, const char **);
__LA_DECL int	archive_match_path_unmatched_inclusions_next_w(
		    struct archive *, const wchar_t **);

/*
 * Test if a file is excluded by its time stamp.
 * The conditions are set by following functions.
 */
__LA_DECL int	archive_match_time_excluded(struct archive *,
		    struct archive_entry *);

/*
 * Flags to tell a matching type of time stamps. These are used for
 * following functions.
 */
/* Time flag: mtime to be tested. */
#define ARCHIVE_MATCH_MTIME	(0x0100)
/* Time flag: ctime to be tested. */
#define ARCHIVE_MATCH_CTIME	(0x0200)
/* Comparison flag: Match the time if it is newer than. */
#define ARCHIVE_MATCH_NEWER	(0x0001)
/* Comparison flag: Match the time if it is older than. */
#define ARCHIVE_MATCH_OLDER	(0x0002)
/* Comparison flag: Match the time if it is equal to. */
#define ARCHIVE_MATCH_EQUAL	(0x0010)
/* Set inclusion time. */
__LA_DECL int	archive_match_include_time(struct archive *, int _flag,
		    time_t _sec, long _nsec);
/* Set inclusion time by a date string. */
__LA_DECL int	archive_match_include_date(struct archive *, int _flag,
		    const char *_datestr);
__LA_DECL int	archive_match_include_date_w(struct archive *, int _flag,
		    const wchar_t *_datestr);
/* Set inclusion time by a particular file. */
__LA_DECL int	archive_match_include_file_time(struct archive *,
		    int _flag, const char *_pathname);
__LA_DECL int	archive_match_include_file_time_w(struct archive *,
		    int _flag, const wchar_t *_pathname);
/* Add exclusion entry. */
__LA_DECL int	archive_match_exclude_entry(struct archive *,
		    int _flag, struct archive_entry *);

/*
 * Test if a file is excluded by its uid ,gid, uname or gname.
 * The conditions are set by following functions.
 */
__LA_DECL int	archive_match_owner_excluded(struct archive *,
		    struct archive_entry *);
/* Add inclusion uid, gid, uname and gname. */
__LA_DECL int	archive_match_include_uid(struct archive *, la_int64_t);
__LA_DECL int	archive_match_include_gid(struct archive *, la_int64_t);
__LA_DECL int	archive_match_include_uname(struct archive *, const char *);
__LA_DECL int	archive_match_include_uname_w(struct archive *,
		    const wchar_t *);
__LA_DECL int	archive_match_include_gname(struct archive *, const char *);
__LA_DECL int	archive_match_include_gname_w(struct archive *,
		    const wchar_t *);

/* Utility functions */
/* Convenience function to sort a NULL terminated list of strings */
__LA_DECL int archive_utility_string_sort(char **);

#ifdef __cplusplus
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1494.cpp,"[6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 93, 2097, 0, 0, 1, 490, 274, 0, 0, 8, 0, 0, 0, 8, 446, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 274, 0, 0, 0, 0, 764, 0, 0, 0, 0, 0, 0, 0, 2, 500, 0, 0, 0, 6, 113, 0, 99, 99, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1494.cpp,1063
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_data_into_fd.cpp,59,"archive_set_error(a, errno, ""Seek error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1495.cpp,"{
			archive_set_error(a, errno, ""Seek error"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1495.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1495.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_data_into_fd.cpp,70,"archive_set_error(a, errno, ""Write error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1496.cpp,"{
			archive_set_error(a, errno, ""Write error"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1496.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1496.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_data_into_fd.cpp,116,"archive_set_error(a, errno, ""Write error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1497.cpp,"{
				archive_set_error(a, errno, ""Write error"");
				r = ARCHIVE_FATAL;
				goto cleanup;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1497.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1497.cpp,37
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,130,"archive_set_error(&a->archive, ENOMEM, ""Can't allocate ar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1498.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Can't allocate ar data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1498.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1498.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,167,"archive_set_error(&a->archive, EINVAL,
		    ""Invalid filename"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1499.cpp,"{
		archive_set_error(&a->archive, EINVAL,
		    ""Invalid filename"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1499.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1499.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,214,"archive_set_error(&a->archive, EINVAL,
		    ""Invalid filename"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1500.cpp,"{
		/* Reject filenames with trailing ""/"" */
		archive_set_error(&a->archive, EINVAL,
		    ""Invalid filename"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1500.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1500.cpp,70
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,238,"archive_set_error(&a->archive, EINVAL,
				    ""Can't find string table"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1501.cpp,"{
				archive_set_error(&a->archive, EINVAL,
				    ""Can't find string table"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1501.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1501.cpp,94
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,245,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate filename buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1502.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate filename buffer"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1502.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1502.cpp,101
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,257,"archive_set_error(&a->archive, EINVAL,
				    ""Invalid string table"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1503.cpp,"{
				archive_set_error(&a->archive, EINVAL,
				    ""Invalid string table"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1503.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1503.cpp,113
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,271,"archive_set_error(&a->archive, ERANGE,
				    ""string table offset too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1504.cpp,"{
				archive_set_error(&a->archive, ERANGE,
				    ""string table offset too large"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1504.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1504.cpp,127
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,295,"archive_set_error(&a->archive, ERANGE,
				    ""File name too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1505.cpp,"{
				archive_set_error(&a->archive, ERANGE,
				    ""File name too long"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1505.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1505.cpp,151
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,306,"archive_set_error(&a->archive, ERANGE,
		    ""File modification time too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1506.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""File modification time too large"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1506.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1506.cpp,162
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,311,"archive_set_error(&a->archive, ERANGE,
		    ""Numeric user ID too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1507.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""Numeric user ID too large"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1507.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1507.cpp,167
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,316,"archive_set_error(&a->archive, ERANGE,
		    ""Numeric group ID too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1508.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""Numeric group ID too large"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1508.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1508.cpp,172
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,321,"archive_set_error(&a->archive, ERANGE,
		    ""Numeric mode too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1509.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""Numeric mode too large"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1509.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1509.cpp,177
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,330,"archive_set_error(&a->archive, EINVAL,
		    ""Regular file required for non-pseudo member"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1510.cpp,"{
		archive_set_error(&a->archive, EINVAL,
		    ""Regular file required for non-pseudo member"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1510.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1510.cpp,186
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,337,"archive_set_error(&a->archive, ERANGE,
		    ""File size out of range"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1511.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""File size out of range"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1511.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1511.cpp,193
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,371,"archive_set_error(&a->archive, EINVAL,
			    ""More than one string tables exist"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1512.cpp,"{
			archive_set_error(&a->archive, EINVAL,
			    ""More than one string tables exist"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1512.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1512.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,378,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate strtab buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1513.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate strtab buffer"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1513.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1513.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,443,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Entry remaining bytes larger than 0"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1514.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Entry remaining bytes larger than 0"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1514.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1514.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.cpp,453,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Padding wrong size: %ju should be 1 or 0"",
		    (uintmax_t)ar->entry_padding);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1515.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Padding wrong size: %ju should be 1 or 0"",
		    (uintmax_t)ar->entry_padding);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1515.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1515.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_warc.cpp,132,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate warc data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1516.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate warc data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1516.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1516.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_warc.cpp,220,"archive_set_error(&a->archive, EINVAL,
		    ""Invalid filename"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1517.cpp,"{
		archive_set_error(&a->archive, EINVAL,
		    ""Invalid filename"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1517.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1517.cpp,41
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_warc.cpp,247,"archive_set_error(
				&a->archive,
				ARCHIVE_ERRNO_FILE_FORMAT,
				""cannot archive file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1518.cpp,"{
			/* don't bother */
			archive_set_error(
				&a->archive,
				ARCHIVE_ERRNO_FILE_FORMAT,
				""cannot archive file"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1518.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1518.cpp,68
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_warc.cpp,261,"archive_set_error(
		&a->archive,
		ARCHIVE_ERRNO_FILE_FORMAT,
		""WARC can only process regular files"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1519.cpp,"{
	struct warc_s *w = a->format_data;
	struct archive_string hdr;
#define MAX_HDR_SIZE 512

	/* check whether warcinfo record needs outputting */
	if (!w->omit_warcinfo) {
		ssize_t r;
		warc_essential_hdr_t wi = {
			WT_INFO,
			/*uri*/NULL,
			/*urn*/NULL,
			/*rtm*/0,
			/*mtm*/0,
			/*cty*/""application/warc-fields"",
			/*len*/sizeof(warcinfo) - 1U,
		};
		wi.rtime = w->now;
		wi.mtime = w->now;

		archive_string_init(&hdr);
		r = _popul_ehdr(&hdr, MAX_HDR_SIZE, wi);
		if (r >= 0) {
			/* jackpot! */
			/* now also use HDR buffer for the actual warcinfo */
			archive_strncat(&hdr, warcinfo, sizeof(warcinfo) -1);

			/* append end-of-record indicator */
			archive_strncat(&hdr, ""\r\n\r\n"", 4);

			/* write to output stream */
			__archive_write_output(a, hdr.s, archive_strlen(&hdr));
		}
		/* indicate we're done with file header writing */
		w->omit_warcinfo = 1U;
		archive_string_free(&hdr);
	}

	if (archive_entry_pathname(entry) == NULL) {
		archive_set_error(&a->archive, EINVAL,
		    ""Invalid filename"");
		return (ARCHIVE_WARN);
	}

	w->typ = archive_entry_filetype(entry);
	w->populz = 0U;
	if (w->typ == AE_IFREG) {
		warc_essential_hdr_t rh = {
			WT_RSRC,
			/*uri*/NULL,
			/*urn*/NULL,
			/*rtm*/0,
			/*mtm*/0,
			/*cty*/NULL,
			/*len*/0,
		};
		ssize_t r;
		rh.tgturi = archive_entry_pathname(entry);
		rh.rtime = w->now;
		rh.mtime = archive_entry_mtime(entry);
		rh.cntlen = (size_t)archive_entry_size(entry);

		archive_string_init(&hdr);
		r = _popul_ehdr(&hdr, MAX_HDR_SIZE, rh);
		if (r < 0) {
			/* don't bother */
			archive_set_error(
				&a->archive,
				ARCHIVE_ERRNO_FILE_FORMAT,
				""cannot archive file"");
			return (ARCHIVE_WARN);
		}
		/* otherwise append to output stream */
		__archive_write_output(a, hdr.s, r);
		/* and let subsequent calls to _data() know about the size */
		w->populz = rh.cntlen;
		archive_string_free(&hdr);
		return (ARCHIVE_OK);
	}
	/* just resort to erroring as per Tim's advice */
	archive_set_error(
		&a->archive,
		ARCHIVE_ERRNO_FILE_FORMAT,
		""WARC can only process regular files"");
	return (ARCHIVE_FAILED);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1519.cpp,"[5, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 147, 0, 0, 6, 6, 0, 0, 3, 17, 0, 0, 0, 0, 1, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 88, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 5, 5, 0, 0, 21, 0, 0, 23, 0, 39, 1, 0, 1, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1519.cpp,82
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_warc.cpp,368,"archive_string_sprintf(tgt, ""WARC-Type: %s\r\n"", _typ[hdr.type]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1520.cpp,"{
	static const char _ver[] = ""WARC/1.0\r\n"";
	static const char *_typ[LAST_WT] = {
		NULL, ""warcinfo"", ""metadata"", ""resource"", NULL
	};
	char std_uuid[48U];

	if (hdr.type == WT_NONE || hdr.type > WT_RSRC) {
		/* brilliant, how exactly did we get here? */
		return -1;
	}

	archive_strcpy(tgt, _ver);

	archive_string_sprintf(tgt, ""WARC-Type: %s\r\n"", _typ[hdr.type]);

	if (hdr.tgturi != NULL) {
		/* check if there's a xyz:// */
		static const char _uri[] = """";
		static const char _fil[] = ""file://"";
		const char *u;
		char *chk = strchr(hdr.tgturi, ':');

		if (chk != NULL && chk[1U] == '/' && chk[2U] == '/') {
			/* yep, it's definitely a URI */
			u = _uri;
		} else {
			/* hm, best to prepend file:// then */
			u = _fil;
		}
		archive_string_sprintf(tgt,
			""WARC-Target-URI: %s%s\r\n"", u, hdr.tgturi);
	}

	/* record time is usually when the http is sent off,
	 * just treat the archive writing as such for a moment */
	xstrftime(tgt, ""WARC-Date: %Y-%m-%dT%H:%M:%SZ\r\n"", hdr.rtime);

	/* while we're at it, record the mtime */
	xstrftime(tgt, ""Last-Modified: %Y-%m-%dT%H:%M:%SZ\r\n"", hdr.mtime);

	if (hdr.recid == NULL) {
		/* generate one, grrrr */
		warc_uuid_t u;

		_gen_uuid(&u);
		/* Unfortunately, archive_string_sprintf does not
		 * handle the minimum number following '%'.
		 * So we have to use snprintf function here instead
		 * of archive_string_snprintf function. */
#if defined(_WIN32) && !defined(__CYGWIN__) && !( defined(_MSC_VER) && _MSC_VER >= 1900)
#define snprintf _snprintf
#endif
		snprintf(
			std_uuid, sizeof(std_uuid),
			""<urn:uuid:%08x-%04x-%04x-%04x-%04x%08x>"",
			u.u[0U],
			u.u[1U] >> 16U, u.u[1U] & 0xffffU,
			u.u[2U] >> 16U, u.u[2U] & 0xffffU,
			u.u[3U]);
		hdr.recid = std_uuid;
	}

	/* record-id is mandatory, fingers crossed we won't fail */
	archive_string_sprintf(tgt, ""WARC-Record-ID: %s\r\n"", hdr.recid);

	if (hdr.cnttyp != NULL) {
		archive_string_sprintf(tgt, ""Content-Type: %s\r\n"", hdr.cnttyp);
	}

	/* next one is mandatory */
	archive_string_sprintf(tgt, ""Content-Length: %ju\r\n"", (uintmax_t)hdr.cntlen);
	/**/
	archive_strncat(tgt, ""\r\n"", 2);

	return (archive_strlen(tgt) >= tsz)? -1: (ssize_t)archive_strlen(tgt);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1520.cpp,"[6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 9, 143, 0, 0, 8, 8, 0, 0, 5, 35, 0, 0, 0, 0, 3, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 1, 91, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 14, 0, 6, 6, 2, 0, 18, 0, 0, 14, 0, 45, 3, 0, 1, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1520.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_warc.cpp,384,"archive_string_sprintf(tgt,
			""WARC-Target-URI: %s%s\r\n"", u, hdr.tgturi);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1521.cpp,"{
		/* check if there's a xyz:// */
		static const char _uri[] = """";
		static const char _fil[] = ""file://"";
		const char *u;
		char *chk = strchr(hdr.tgturi, ':');

		if (chk != NULL && chk[1U] == '/' && chk[2U] == '/') {
			/* yep, it's definitely a URI */
			u = _uri;
		} else {
			/* hm, best to prepend file:// then */
			u = _fil;
		}
		archive_string_sprintf(tgt,
			""WARC-Target-URI: %s%s\r\n"", u, hdr.tgturi);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1521.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 30, 0, 0, 4, 4, 0, 0, 3, 8, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 1, 1, 1, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1521.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_warc.cpp,407,"snprintf(
			std_uuid, sizeof(std_uuid),
			""<urn:uuid:%08x-%04x-%04x-%04x-%04x%08x>"",
			u.u[0U],
			u.u[1U] >> 16U, u.u[1U] & 0xffffU,
			u.u[2U] >> 16U, u.u[2U] & 0xffffU,
			u.u[3U]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1522.cpp,"{
		/* generate one, grrrr */
		warc_uuid_t u;

		_gen_uuid(&u);
		/* Unfortunately, archive_string_sprintf does not
		 * handle the minimum number following '%'.
		 * So we have to use snprintf function here instead
		 * of archive_string_snprintf function. */
#if defined(_WIN32) && !defined(__CYGWIN__) && !( defined(_MSC_VER) && _MSC_VER >= 1900)
#define snprintf _snprintf
#endif
		snprintf(
			std_uuid, sizeof(std_uuid),
			""<urn:uuid:%08x-%04x-%04x-%04x-%04x%08x>"",
			u.u[0U],
			u.u[1U] >> 16U, u.u[1U] & 0xffffU,
			u.u[2U] >> 16U, u.u[2U] & 0xffffU,
			u.u[3U]);
		hdr.recid = std_uuid;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1522.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 37, 0, 0, 1, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 24, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 6, 0, 0, 3, 0, 14, 3, 0, 1, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1522.cpp,55
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_warc.cpp,418,"archive_string_sprintf(tgt, ""WARC-Record-ID: %s\r\n"", hdr.recid);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1523.cpp,"{
	static const char _ver[] = ""WARC/1.0\r\n"";
	static const char *_typ[LAST_WT] = {
		NULL, ""warcinfo"", ""metadata"", ""resource"", NULL
	};
	char std_uuid[48U];

	if (hdr.type == WT_NONE || hdr.type > WT_RSRC) {
		/* brilliant, how exactly did we get here? */
		return -1;
	}

	archive_strcpy(tgt, _ver);

	archive_string_sprintf(tgt, ""WARC-Type: %s\r\n"", _typ[hdr.type]);

	if (hdr.tgturi != NULL) {
		/* check if there's a xyz:// */
		static const char _uri[] = """";
		static const char _fil[] = ""file://"";
		const char *u;
		char *chk = strchr(hdr.tgturi, ':');

		if (chk != NULL && chk[1U] == '/' && chk[2U] == '/') {
			/* yep, it's definitely a URI */
			u = _uri;
		} else {
			/* hm, best to prepend file:// then */
			u = _fil;
		}
		archive_string_sprintf(tgt,
			""WARC-Target-URI: %s%s\r\n"", u, hdr.tgturi);
	}

	/* record time is usually when the http is sent off,
	 * just treat the archive writing as such for a moment */
	xstrftime(tgt, ""WARC-Date: %Y-%m-%dT%H:%M:%SZ\r\n"", hdr.rtime);

	/* while we're at it, record the mtime */
	xstrftime(tgt, ""Last-Modified: %Y-%m-%dT%H:%M:%SZ\r\n"", hdr.mtime);

	if (hdr.recid == NULL) {
		/* generate one, grrrr */
		warc_uuid_t u;

		_gen_uuid(&u);
		/* Unfortunately, archive_string_sprintf does not
		 * handle the minimum number following '%'.
		 * So we have to use snprintf function here instead
		 * of archive_string_snprintf function. */
#if defined(_WIN32) && !defined(__CYGWIN__) && !( defined(_MSC_VER) && _MSC_VER >= 1900)
#define snprintf _snprintf
#endif
		snprintf(
			std_uuid, sizeof(std_uuid),
			""<urn:uuid:%08x-%04x-%04x-%04x-%04x%08x>"",
			u.u[0U],
			u.u[1U] >> 16U, u.u[1U] & 0xffffU,
			u.u[2U] >> 16U, u.u[2U] & 0xffffU,
			u.u[3U]);
		hdr.recid = std_uuid;
	}

	/* record-id is mandatory, fingers crossed we won't fail */
	archive_string_sprintf(tgt, ""WARC-Record-ID: %s\r\n"", hdr.recid);

	if (hdr.cnttyp != NULL) {
		archive_string_sprintf(tgt, ""Content-Type: %s\r\n"", hdr.cnttyp);
	}

	/* next one is mandatory */
	archive_string_sprintf(tgt, ""Content-Length: %ju\r\n"", (uintmax_t)hdr.cntlen);
	/**/
	archive_strncat(tgt, ""\r\n"", 2);

	return (archive_strlen(tgt) >= tsz)? -1: (ssize_t)archive_strlen(tgt);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1523.cpp,"[6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 9, 143, 0, 0, 8, 8, 0, 0, 5, 35, 0, 0, 0, 0, 3, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 1, 91, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 14, 0, 6, 6, 2, 0, 18, 0, 0, 14, 0, 45, 3, 0, 1, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1523.cpp,66
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_warc.cpp,421,"archive_string_sprintf(tgt, ""Content-Type: %s\r\n"", hdr.cnttyp);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1524.cpp,"{
		archive_string_sprintf(tgt, ""Content-Type: %s\r\n"", hdr.cnttyp);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1524.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1524.cpp,69
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_warc.cpp,425,"archive_string_sprintf(tgt, ""Content-Length: %ju\r\n"", (uintmax_t)hdr.cntlen);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1525.cpp,"{
	static const char _ver[] = ""WARC/1.0\r\n"";
	static const char *_typ[LAST_WT] = {
		NULL, ""warcinfo"", ""metadata"", ""resource"", NULL
	};
	char std_uuid[48U];

	if (hdr.type == WT_NONE || hdr.type > WT_RSRC) {
		/* brilliant, how exactly did we get here? */
		return -1;
	}

	archive_strcpy(tgt, _ver);

	archive_string_sprintf(tgt, ""WARC-Type: %s\r\n"", _typ[hdr.type]);

	if (hdr.tgturi != NULL) {
		/* check if there's a xyz:// */
		static const char _uri[] = """";
		static const char _fil[] = ""file://"";
		const char *u;
		char *chk = strchr(hdr.tgturi, ':');

		if (chk != NULL && chk[1U] == '/' && chk[2U] == '/') {
			/* yep, it's definitely a URI */
			u = _uri;
		} else {
			/* hm, best to prepend file:// then */
			u = _fil;
		}
		archive_string_sprintf(tgt,
			""WARC-Target-URI: %s%s\r\n"", u, hdr.tgturi);
	}

	/* record time is usually when the http is sent off,
	 * just treat the archive writing as such for a moment */
	xstrftime(tgt, ""WARC-Date: %Y-%m-%dT%H:%M:%SZ\r\n"", hdr.rtime);

	/* while we're at it, record the mtime */
	xstrftime(tgt, ""Last-Modified: %Y-%m-%dT%H:%M:%SZ\r\n"", hdr.mtime);

	if (hdr.recid == NULL) {
		/* generate one, grrrr */
		warc_uuid_t u;

		_gen_uuid(&u);
		/* Unfortunately, archive_string_sprintf does not
		 * handle the minimum number following '%'.
		 * So we have to use snprintf function here instead
		 * of archive_string_snprintf function. */
#if defined(_WIN32) && !defined(__CYGWIN__) && !( defined(_MSC_VER) && _MSC_VER >= 1900)
#define snprintf _snprintf
#endif
		snprintf(
			std_uuid, sizeof(std_uuid),
			""<urn:uuid:%08x-%04x-%04x-%04x-%04x%08x>"",
			u.u[0U],
			u.u[1U] >> 16U, u.u[1U] & 0xffffU,
			u.u[2U] >> 16U, u.u[2U] & 0xffffU,
			u.u[3U]);
		hdr.recid = std_uuid;
	}

	/* record-id is mandatory, fingers crossed we won't fail */
	archive_string_sprintf(tgt, ""WARC-Record-ID: %s\r\n"", hdr.recid);

	if (hdr.cnttyp != NULL) {
		archive_string_sprintf(tgt, ""Content-Type: %s\r\n"", hdr.cnttyp);
	}

	/* next one is mandatory */
	archive_string_sprintf(tgt, ""Content-Length: %ju\r\n"", (uintmax_t)hdr.cntlen);
	/**/
	archive_strncat(tgt, ""\r\n"", 2);

	return (archive_strlen(tgt) >= tsz)? -1: (ssize_t)archive_strlen(tgt);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1525.cpp,"[6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 9, 143, 0, 0, 8, 8, 0, 0, 5, 35, 0, 0, 0, 0, 3, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 1, 91, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 14, 0, 6, 6, 2, 0, 18, 0, 0, 14, 0, 45, 3, 0, 1, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1525.cpp,73
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_util.cpp,260,"archive_string_vsprintf(&(a->error_string), fmt, ap);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1526.cpp,"{
	va_list ap;

	a->archive_error_number = error_number;
	if (fmt == NULL) {
		a->error = NULL;
		return;
	}

	archive_string_empty(&(a->error_string));
	va_start(ap, fmt);
	archive_string_vsprintf(&(a->error_string), fmt, ap);
	va_end(ap);
	a->error = a->error_string.s;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1526.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 34, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1526.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_grzip.cpp,62,"archive_set_error(_a, ENOMEM, ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1527.cpp,"{
		archive_set_error(_a, ENOMEM, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1527.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1527.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_grzip.cpp,68,"archive_set_error(_a, ENOMEM, ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1528.cpp,"{
		free(data);
		archive_set_error(_a, ENOMEM, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1528.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1528.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_grzip.cpp,83,"archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external grzip program for grzip compression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1529.cpp,"{
	struct archive_write_filter *f = __archive_write_allocate_filter(_a);
	struct write_grzip *data;

	archive_check_magic(_a, ARCHIVE_WRITE_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_write_add_filter_grzip"");

	data = calloc(1, sizeof(*data));
	if (data == NULL) {
		archive_set_error(_a, ENOMEM, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}
	data->pdata = __archive_write_program_allocate(""grzip"");
	if (data->pdata == NULL) {
		free(data);
		archive_set_error(_a, ENOMEM, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}

	f->name = ""grzip"";
	f->code = ARCHIVE_FILTER_GRZIP;
	f->data = data;
	f->open = archive_write_grzip_open;
	f->options = archive_write_grzip_options;
	f->write = archive_write_grzip_write;
	f->close = archive_write_grzip_close;
	f->free = archive_write_grzip_free;

	/* Note: This filter always uses an external program, so we
	 * return ""warn"" to inform of the fact. */
	archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external grzip program for grzip compression"");
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1529.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 72, 0, 0, 2, 2, 0, 0, 1, 7, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 40, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 9, 0, 0, 15, 0, 19, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1529.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_passphrase.cpp,42,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Empty passphrase is unacceptable"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1530.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Empty passphrase is unacceptable"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1530.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1530.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_passphrase.cpp,49,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate data for passphrase"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1531.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate data for passphrase"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1531.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1531.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_passphrase.cpp,86,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate data for passphrase"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1532.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate data for passphrase"");
				return (NULL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1532.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1532.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,130,"archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external lz4 program"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1533.cpp,"{
	struct archive_read *a = (struct archive_read *)_a;
	struct archive_read_filter_bidder *reader;

	archive_check_magic(_a, ARCHIVE_READ_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_read_support_filter_lz4"");

	if (__archive_read_get_bidder(a, &reader) != ARCHIVE_OK)
		return (ARCHIVE_FATAL);

	reader->data = NULL;
	reader->name = ""lz4"";
	reader->bid = lz4_reader_bid;
	reader->init = lz4_reader_init;
	reader->options = NULL;
	reader->free = lz4_reader_free;
#if defined(HAVE_LIBLZ4)
	return (ARCHIVE_OK);
#else
	archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external lz4 program"");
	return (ARCHIVE_WARN);
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1533.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 49, 0, 0, 2, 2, 0, 0, 1, 3, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 4, 0, 0, 8, 0, 10, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1533.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,233,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for lz4 decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1534.cpp,"{
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for lz4 decompression"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1534.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1534.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,261,"archive_set_error(&self->archive->archive, ENOMEM,
			    ""Can't allocate data for lz4 decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1535.cpp,"{
			archive_set_error(&self->archive->archive, ENOMEM,
			    ""Can't allocate data for lz4 decompression"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1535.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1535.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,284,"archive_set_error(&self->archive->archive, ENOMEM,
			    ""Can't allocate data for lz4 decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1536.cpp,"{
			archive_set_error(&self->archive->archive, ENOMEM,
			    ""Can't allocate data for lz4 decompression"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1536.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1536.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,316,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Invalid sequence."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1537.cpp,"{
	case SELECT_STREAM:
		break;
	case READ_DEFAULT_STREAM:
	case READ_LEGACY_STREAM:
		/* Reading a lz4 stream already failed. */
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Invalid sequence."");
		return (ARCHIVE_FATAL);
	case READ_DEFAULT_BLOCK:
		ret = lz4_filter_read_default_stream(self, p);
		if (ret != 0 || state->stage != SELECT_STREAM)
			return ret;
		break;
	case READ_LEGACY_BLOCK:
		ret = lz4_filter_read_legacy_stream(self, p);
		if (ret != 0 || state->stage != SELECT_STREAM)
			return ret;
		break;
	default:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Program error."");
		return (ARCHIVE_FATAL);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1537.cpp,"[2, 0, 0, 0, 4, 0, 4, 0, 5, 1, 3, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1537.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,330,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Program error."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1538.cpp,"{
	case SELECT_STREAM:
		break;
	case READ_DEFAULT_STREAM:
	case READ_LEGACY_STREAM:
		/* Reading a lz4 stream already failed. */
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Invalid sequence."");
		return (ARCHIVE_FATAL);
	case READ_DEFAULT_BLOCK:
		ret = lz4_filter_read_default_stream(self, p);
		if (ret != 0 || state->stage != SELECT_STREAM)
			return ret;
		break;
	case READ_LEGACY_BLOCK:
		ret = lz4_filter_read_legacy_stream(self, p);
		if (ret != 0 || state->stage != SELECT_STREAM)
			return ret;
		break;
	default:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC, ""Program error."");
		return (ARCHIVE_FATAL);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1538.cpp,"[2, 0, 0, 0, 4, 0, 4, 0, 5, 1, 3, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1538.cpp,34
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,357,"archive_set_error(
				    &self->archive->archive,
		    		    ARCHIVE_ERRNO_MISC,
				    ""Malformed lz4 data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1539.cpp,"{
				archive_set_error(
				    &self->archive->archive,
		    		    ARCHIVE_ERRNO_MISC,
				    ""Malformed lz4 data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1539.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1539.cpp,61
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,392,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""truncated lz4 input"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1540.cpp,"{
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""truncated lz4 input"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1540.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1540.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,447,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated lz4 input"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1541.cpp,"{
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated lz4 input"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1541.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1541.cpp,69
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,472,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""malformed lz4 data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1542.cpp,"{
	struct private_data *state = (struct private_data *)self->data;
	const char *read_buf;
	ssize_t bytes_remaining;
	ssize_t descriptor_bytes;
	unsigned char flag, bd;
	unsigned int chsum, chsum_verifier;

	/* Make sure we have 2 bytes for flags. */
	read_buf = __archive_read_filter_ahead(self->upstream, 2,
	    &bytes_remaining);
	if (read_buf == NULL) {
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""truncated lz4 input"");
		return (ARCHIVE_FATAL);
	}

	/*
	   Parse flags.
	 */
	flag = (unsigned char)read_buf[0];
	/* Verify version number. */
	if ((flag & 0xc0) != 1<<6)
		goto malformed_error;
	/* A reserved bit must be zero. */
	if (flag & 0x02)
		goto malformed_error;
	state->flags.block_independence = (flag & 0x20) != 0;
	state->flags.block_checksum = (flag & 0x10)?4:0;
	state->flags.stream_size = (flag & 0x08) != 0;
	state->flags.stream_checksum = (flag & 0x04) != 0;
	state->flags.preset_dictionary = (flag & 0x01) != 0;

	/* BD */
	bd = (unsigned char)read_buf[1];
	/* Reserved bits must be zero. */
	if (bd & 0x8f)
		goto malformed_error;
	/* Get a maximum block size. */
	switch (read_buf[1] >> 4) {
	case 4: /* 64 KB */
		state->flags.block_maximum_size = 64 * 1024;
		break;
	case 5: /* 256 KB */
		state->flags.block_maximum_size = 256 * 1024;
		break;
	case 6: /* 1 MB */
		state->flags.block_maximum_size = 1024 * 1024;
		break;
	case 7: /* 4 MB */
		state->flags.block_maximum_size = 4 * 1024 * 1024;
		break;
	default:
		goto malformed_error;
	}

	/* Read the whole descriptor in a stream block. */
	descriptor_bytes = 3;
	if (state->flags.stream_size)
		descriptor_bytes += 8;
	if (state->flags.preset_dictionary)
		descriptor_bytes += 4;
	if (bytes_remaining < descriptor_bytes) {
		read_buf = __archive_read_filter_ahead(self->upstream,
		    descriptor_bytes, &bytes_remaining);
		if (read_buf == NULL) {
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated lz4 input"");
			return (ARCHIVE_FATAL);
		}
	}
	/* Check if a descriptor is corrupted */
	chsum = __archive_xxhash.XXH32(read_buf, (int)descriptor_bytes -1, 0);
	chsum = (chsum >> 8) & 0xff;
	chsum_verifier = read_buf[descriptor_bytes-1] & 0xff;
	if (chsum != chsum_verifier)
		goto malformed_error;

	__archive_read_filter_consume(self->upstream, descriptor_bytes);

	/* Make sure we have an enough buffer for uncompressed data. */
	if (lz4_allocate_out_block(self) != ARCHIVE_OK)
		return (ARCHIVE_FATAL);
	if (state->flags.stream_checksum)
		state->xxh32_state = __archive_xxhash.XXH32_init(0);

	state->decoded_size = 0;
	/* Success */
	return (ARCHIVE_OK);
malformed_error:
	archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""malformed lz4 data"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1542.cpp,"[11, 0, 0, 0, 4, 0, 5, 1, 4, 1, 13, 1, 5, 0, 1, 173, 0, 0, 6, 8, 0, 0, 1, 48, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 1, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 0, 13, 12, 1, 0, 9, 0, 0, 25, 0, 22, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1542.cpp,94
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,599,"archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""lz4 decompression failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1543.cpp,"{
		archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""lz4 decompression failed"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1543.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1543.cpp,122
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,610,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""malformed lz4 data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1544.cpp,"{
	struct private_data *state = (struct private_data *)self->data;
	ssize_t compressed_size;
	const char *read_buf;
	ssize_t bytes_remaining;
	int checksum_size;
	ssize_t uncompressed_size;
	size_t prefix64k;

	*p = NULL;

	/* Make sure we have 4 bytes for a block size. */
	read_buf = __archive_read_filter_ahead(self->upstream, 4,
	    &bytes_remaining);
	if (read_buf == NULL)
		goto truncated_error;
	compressed_size = archive_le32dec(read_buf);
	if ((compressed_size & ~(1 << 31)) > state->flags.block_maximum_size)
		goto malformed_error;
	/* A compressed size == 0 means the end of stream blocks. */
	if (compressed_size == 0) {
		__archive_read_filter_consume(self->upstream, 4);
		return 0;
	}

	checksum_size = state->flags.block_checksum;
	/* Check if the block is uncompressed. */
	if (compressed_size & (1 << 31)) {
		compressed_size &= ~(1 << 31);
		uncompressed_size = compressed_size;
	} else
		uncompressed_size = 0;/* Unknown yet. */

	/*
	  Unfortunately, lz4 decompression API requires a whole block
	  for its decompression speed, so we read a whole block and allocate
	  a huge buffer used for decoded data.
	*/
	read_buf = __archive_read_filter_ahead(self->upstream,
	    4 + compressed_size + checksum_size, &bytes_remaining);
	if (read_buf == NULL)
		goto truncated_error;

	/* Optional process, checking a block sum. */
	if (checksum_size) {
		unsigned int chsum = __archive_xxhash.XXH32(
			read_buf + 4, (int)compressed_size, 0);
		unsigned int chsum_block =
		    archive_le32dec(read_buf + 4 + compressed_size);
		if (chsum != chsum_block)
			goto malformed_error;
	}


	/* If the block is uncompressed, there is nothing to do. */
	if (uncompressed_size) {
		/* Prepare a prefix 64k block for next block. */
		if (!state->flags.block_independence) {
			prefix64k = 64 * 1024;
			if (uncompressed_size < (ssize_t)prefix64k) {
				memcpy(state->out_block
					+ prefix64k - uncompressed_size,
				    read_buf + 4,
				    uncompressed_size);
				memset(state->out_block, 0,
				    prefix64k - uncompressed_size);
			} else {
				memcpy(state->out_block,
				    read_buf + 4
					+ uncompressed_size - prefix64k,
				    prefix64k);
			}
			state->decoded_size = 0;
		}
		state->unconsumed = 4 + uncompressed_size + checksum_size;
		*p = read_buf + 4;
		return uncompressed_size;
	}

	/*
	   Decompress a block data.
	 */
	if (state->flags.block_independence) {
		prefix64k = 0;
		uncompressed_size = LZ4_decompress_safe(read_buf + 4,
		    state->out_block, (int)compressed_size,
		    state->flags.block_maximum_size);
	} else {
		prefix64k = 64 * 1024;
		if (state->decoded_size) {
			if (state->decoded_size < prefix64k) {
				memmove(state->out_block
					+ prefix64k - state->decoded_size,
				    state->out_block + prefix64k,
				    state->decoded_size);
				memset(state->out_block, 0,
				    prefix64k - state->decoded_size);
			} else {
				memmove(state->out_block,
				    state->out_block + state->decoded_size,
				    prefix64k);
			}
		}
#if LZ4_VERSION_MAJOR >= 1 && LZ4_VERSION_MINOR >= 7
		uncompressed_size = LZ4_decompress_safe_usingDict(
		    read_buf + 4,
		    state->out_block + prefix64k, (int)compressed_size,
		    state->flags.block_maximum_size,
		    state->out_block,
		    prefix64k);
#else
		uncompressed_size = LZ4_decompress_safe_withPrefix64k(
		    read_buf + 4,
		    state->out_block + prefix64k, (int)compressed_size,
		    state->flags.block_maximum_size);
#endif
	}

	/* Check if an error occurred in the decompression process. */
	if (uncompressed_size < 0) {
		archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""lz4 decompression failed"");
		return (ARCHIVE_FATAL);
	}

	state->unconsumed = 4 + compressed_size + checksum_size;
	*p = state->out_block + prefix64k;
	state->decoded_size = uncompressed_size;
	return uncompressed_size;

malformed_error:
	archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""malformed lz4 data"");
	return (ARCHIVE_FATAL);
truncated_error:
	archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""truncated lz4 input"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1544.cpp,"[15, 0, 0, 0, 0, 0, 6, 0, 0, 0, 19, 2, 4, 0, 1, 257, 0, 0, 9, 9, 0, 0, 3, 37, 0, 0, 0, 0, 2, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 14, 14, 5, 0, 18, 0, 0, 30, 0, 54, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1544.cpp,133
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,614,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""truncated lz4 input"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1545.cpp,"{
	struct private_data *state = (struct private_data *)self->data;
	ssize_t compressed_size;
	const char *read_buf;
	ssize_t bytes_remaining;
	int checksum_size;
	ssize_t uncompressed_size;
	size_t prefix64k;

	*p = NULL;

	/* Make sure we have 4 bytes for a block size. */
	read_buf = __archive_read_filter_ahead(self->upstream, 4,
	    &bytes_remaining);
	if (read_buf == NULL)
		goto truncated_error;
	compressed_size = archive_le32dec(read_buf);
	if ((compressed_size & ~(1 << 31)) > state->flags.block_maximum_size)
		goto malformed_error;
	/* A compressed size == 0 means the end of stream blocks. */
	if (compressed_size == 0) {
		__archive_read_filter_consume(self->upstream, 4);
		return 0;
	}

	checksum_size = state->flags.block_checksum;
	/* Check if the block is uncompressed. */
	if (compressed_size & (1 << 31)) {
		compressed_size &= ~(1 << 31);
		uncompressed_size = compressed_size;
	} else
		uncompressed_size = 0;/* Unknown yet. */

	/*
	  Unfortunately, lz4 decompression API requires a whole block
	  for its decompression speed, so we read a whole block and allocate
	  a huge buffer used for decoded data.
	*/
	read_buf = __archive_read_filter_ahead(self->upstream,
	    4 + compressed_size + checksum_size, &bytes_remaining);
	if (read_buf == NULL)
		goto truncated_error;

	/* Optional process, checking a block sum. */
	if (checksum_size) {
		unsigned int chsum = __archive_xxhash.XXH32(
			read_buf + 4, (int)compressed_size, 0);
		unsigned int chsum_block =
		    archive_le32dec(read_buf + 4 + compressed_size);
		if (chsum != chsum_block)
			goto malformed_error;
	}


	/* If the block is uncompressed, there is nothing to do. */
	if (uncompressed_size) {
		/* Prepare a prefix 64k block for next block. */
		if (!state->flags.block_independence) {
			prefix64k = 64 * 1024;
			if (uncompressed_size < (ssize_t)prefix64k) {
				memcpy(state->out_block
					+ prefix64k - uncompressed_size,
				    read_buf + 4,
				    uncompressed_size);
				memset(state->out_block, 0,
				    prefix64k - uncompressed_size);
			} else {
				memcpy(state->out_block,
				    read_buf + 4
					+ uncompressed_size - prefix64k,
				    prefix64k);
			}
			state->decoded_size = 0;
		}
		state->unconsumed = 4 + uncompressed_size + checksum_size;
		*p = read_buf + 4;
		return uncompressed_size;
	}

	/*
	   Decompress a block data.
	 */
	if (state->flags.block_independence) {
		prefix64k = 0;
		uncompressed_size = LZ4_decompress_safe(read_buf + 4,
		    state->out_block, (int)compressed_size,
		    state->flags.block_maximum_size);
	} else {
		prefix64k = 64 * 1024;
		if (state->decoded_size) {
			if (state->decoded_size < prefix64k) {
				memmove(state->out_block
					+ prefix64k - state->decoded_size,
				    state->out_block + prefix64k,
				    state->decoded_size);
				memset(state->out_block, 0,
				    prefix64k - state->decoded_size);
			} else {
				memmove(state->out_block,
				    state->out_block + state->decoded_size,
				    prefix64k);
			}
		}
#if LZ4_VERSION_MAJOR >= 1 && LZ4_VERSION_MINOR >= 7
		uncompressed_size = LZ4_decompress_safe_usingDict(
		    read_buf + 4,
		    state->out_block + prefix64k, (int)compressed_size,
		    state->flags.block_maximum_size,
		    state->out_block,
		    prefix64k);
#else
		uncompressed_size = LZ4_decompress_safe_withPrefix64k(
		    read_buf + 4,
		    state->out_block + prefix64k, (int)compressed_size,
		    state->flags.block_maximum_size);
#endif
	}

	/* Check if an error occurred in the decompression process. */
	if (uncompressed_size < 0) {
		archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""lz4 decompression failed"");
		return (ARCHIVE_FATAL);
	}

	state->unconsumed = 4 + compressed_size + checksum_size;
	*p = state->out_block + prefix64k;
	state->decoded_size = uncompressed_size;
	return uncompressed_size;

malformed_error:
	archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""malformed lz4 data"");
	return (ARCHIVE_FATAL);
truncated_error:
	archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""truncated lz4 input"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1545.cpp,"[15, 0, 0, 0, 0, 0, 6, 0, 0, 0, 19, 2, 4, 0, 1, 257, 0, 0, 9, 9, 0, 0, 3, 37, 0, 0, 0, 0, 2, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 14, 14, 5, 0, 18, 0, 0, 30, 0, 54, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1545.cpp,137
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,650,"archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC, ""truncated lz4 input"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1546.cpp,"{
				archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC, ""truncated lz4 input"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1546.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1546.cpp,31
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,660,"archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""lz4 stream cheksum error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1547.cpp,"{
				archive_set_error(&self->archive->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""lz4 stream cheksum error"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1547.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1547.cpp,41
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,690,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated lz4 input"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1548.cpp,"{
			state->stage = READ_LEGACY_STREAM;
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated lz4 input"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1548.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1548.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,709,"archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""truncated lz4 input"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1549.cpp,"{
		archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""truncated lz4 input"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1549.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1549.cpp,37
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.cpp,716,"archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""lz4 decompression failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1550.cpp,"{
		archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""lz4 decompression failed"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1550.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1550.cpp,44
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_virtual.cpp,136,"archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""archive_write_data_block not supported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1551.cpp,"{
		archive_set_error(a, ARCHIVE_ERRNO_MISC,
		    ""archive_write_data_block not supported"");
		a->state = ARCHIVE_STATE_FATAL;
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1551.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1551.cpp,4
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_set_standard_lookup.cpp,53,"archive_set_error(a, -1, ""Standard lookups not available on Windows"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1552.cpp,"{
	archive_set_error(a, -1, ""Standard lookups not available on Windows"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1552.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1552.cpp,3
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_set_standard_lookup.cpp,100,"archive_set_error(a, ENOMEM,
		    ""Can't allocate uname/gname lookup cache"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1553.cpp,"{
		archive_set_error(a, ENOMEM,
		    ""Can't allocate uname/gname lookup cache"");
		free(ucache);
		free(gcache);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1553.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1553.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_set_standard_lookup.cpp,220,"archive_set_error(cache->archive, errno,
		    ""Can't lookup user for id %d"", (int)id);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1554.cpp,"{
		archive_set_error(cache->archive, errno,
		    ""Can't lookup user for id %d"", (int)id);
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1554.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1554.cpp,35
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_disk_set_standard_lookup.cpp,287,"archive_set_error(cache->archive, errno,
		    ""Can't lookup group for id %d"", (int)id);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1555.cpp,"{
		archive_set_error(cache->archive, errno,
		    ""Can't lookup group for id %d"", (int)id);
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1555.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1555.cpp,33
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,267,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate lha data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1556.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate lha data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1556.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1556.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,399,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""lha: hdrcharset option needs a character-set name"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1557.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""lha: hdrcharset option needs a character-set name"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1557.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1557.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,458,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Couldn't find out LHa header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1558.cpp,"{
	const void *h;
	const char *p, *q;
	size_t next, skip;
	ssize_t bytes, window;

	window = 4096;
	for (;;) {
		h = __archive_read_ahead(a, window, &bytes);
		if (h == NULL) {
			/* Remaining bytes are less than window. */
			window >>= 1;
			if (window < (H_SIZE + 3))
				goto fatal;
			continue;
		}
		if (bytes < H_SIZE)
			goto fatal;
		p = h;
		q = p + bytes;

		/*
		 * Scan ahead until we find something that looks
		 * like the lha header.
		 */
		while (p + H_SIZE < q) {
			if ((next = lha_check_header_format(p)) == 0) {
				skip = p - (const char *)h;
				__archive_read_consume(a, skip);
				return (ARCHIVE_OK);
			}
			p += next;
		}
		skip = p - (const char *)h;
		__archive_read_consume(a, skip);
	}
fatal:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Couldn't find out LHa header"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1558.cpp,"[4, 1, 1, 0, 0, 1, 2, 0, 0, 0, 7, 1, 2, 0, 4, 61, 0, 0, 4, 7, 0, 0, 1, 5, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 6, 4, 0, 0, 5, 0, 0, 11, 0, 11, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1558.cpp,39
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,466,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Truncated LHa header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1559.cpp,"{
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Truncated LHa header"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1559.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1559.cpp,3
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,525,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Bad LHa file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1560.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Bad LHa file"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1560.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1560.cpp,54
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,582,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported LHa header level %d"", p[H_LEVEL_OFFSET]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1561.cpp,"{
	case 0:
		err = lha_read_file_header_0(a, lha);
		break;
	case 1:
		err = lha_read_file_header_1(a, lha);
		break;
	case 2:
		err = lha_read_file_header_2(a, lha);
		break;
	case 3:
		err = lha_read_file_header_3(a, lha);
		break;
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported LHa header level %d"", p[H_LEVEL_OFFSET]);
		err = ARCHIVE_FATAL;
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1561.cpp,"[0, 0, 0, 0, 5, 0, 0, 0, 4, 1, 1, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5, 0, 0, 6, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1561.cpp,111
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,609,"archive_set_error(&a->archive,
		    	    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Unknown symlink-name"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1562.cpp,"{
			/* We couldn't get the symlink-name. */
			archive_set_error(&a->archive,
		    	    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Unknown symlink-name"");
			archive_string_free(&pathname);
			archive_string_free(&linkname);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1562.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1562.cpp,138
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,634,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1563.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1563.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1563.cpp,163
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,638,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(lha->sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1564.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(lha->sconv));
		err = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1564.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1564.cpp,167
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,650,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1565.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1565.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1565.cpp,179
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,654,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Linkname cannot be converted ""
			    ""from %s to current locale."",
			    archive_string_conversion_charset_name(lha->sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1566.cpp,"{
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Linkname cannot be converted ""
			    ""from %s to current locale."",
			    archive_string_conversion_charset_name(lha->sconv));
			err = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1566.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1566.cpp,183
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,712,"sprintf(lha->format_name, ""lha -%c%c%c-"",
	    lha->method[0], lha->method[1], lha->method[2]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1567.cpp,"{
	struct archive_string linkname;
	struct archive_string pathname;
	struct lha *lha;
	const unsigned char *p;
	const char *signature;
	int err;
	
	lha_crc16_init();

	a->archive.archive_format = ARCHIVE_FORMAT_LHA;
	if (a->archive.archive_format_name == NULL)
		a->archive.archive_format_name = ""lha"";

	lha = (struct lha *)(a->format->data);
	lha->decompress_init = 0;
	lha->end_of_entry = 0;
	lha->end_of_entry_cleanup = 0;
	lha->entry_unconsumed = 0;

	if ((p = __archive_read_ahead(a, H_SIZE, NULL)) == NULL) {
		/*
		 * LHa archiver added 0 to the tail of its archive file as
		 * the mark of the end of the archive.
		 */
		signature = __archive_read_ahead(a, sizeof(signature[0]), NULL);
		if (signature == NULL || signature[0] == 0)
			return (ARCHIVE_EOF);
		return (truncated_error(a));
	}

	signature = (const char *)p;
	if (lha->found_first_header == 0 &&
	    signature[0] == 'M' && signature[1] == 'Z') {
                /* This is an executable?  Must be self-extracting... 	*/
		err = lha_skip_sfx(a);
		if (err < ARCHIVE_WARN)
			return (err);

		if ((p = __archive_read_ahead(a, sizeof(*p), NULL)) == NULL)
			return (truncated_error(a));
		signature = (const char *)p;
	}
	/* signature[0] == 0 means the end of an LHa archive file. */
	if (signature[0] == 0)
		return (ARCHIVE_EOF);

	/*
	 * Check the header format and method type.
	 */
	if (lha_check_header_format(p) != 0) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Bad LHa file"");
		return (ARCHIVE_FATAL);
	}

	/* We've found the first header. */
	lha->found_first_header = 1;
	/* Set a default value and common data */
	lha->header_size = 0;
	lha->level = p[H_LEVEL_OFFSET];
	lha->method[0] = p[H_METHOD_OFFSET+1];
	lha->method[1] = p[H_METHOD_OFFSET+2];
	lha->method[2] = p[H_METHOD_OFFSET+3];
	if (memcmp(lha->method, ""lhd"", 3) == 0)
		lha->directory = 1;
	else
		lha->directory = 0;
	if (memcmp(lha->method, ""lh0"", 3) == 0 ||
	    memcmp(lha->method, ""lz4"", 3) == 0)
		lha->entry_is_compressed = 0;
	else
		lha->entry_is_compressed = 1;

	lha->compsize = 0;
	lha->origsize = 0;
	lha->setflag = 0;
	lha->birthtime = 0;
	lha->birthtime_tv_nsec = 0;
	lha->mtime = 0;
	lha->mtime_tv_nsec = 0;
	lha->atime = 0;
	lha->atime_tv_nsec = 0;
	lha->mode = (lha->directory)? 0777 : 0666;
	lha->uid = 0;
	lha->gid = 0;
	archive_string_empty(&lha->dirname);
	archive_string_empty(&lha->filename);
	lha->dos_attr = 0;
	if (lha->opt_sconv != NULL)
		lha->sconv = lha->opt_sconv;
	else
		lha->sconv = NULL;

	switch (p[H_LEVEL_OFFSET]) {
	case 0:
		err = lha_read_file_header_0(a, lha);
		break;
	case 1:
		err = lha_read_file_header_1(a, lha);
		break;
	case 2:
		err = lha_read_file_header_2(a, lha);
		break;
	case 3:
		err = lha_read_file_header_3(a, lha);
		break;
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported LHa header level %d"", p[H_LEVEL_OFFSET]);
		err = ARCHIVE_FATAL;
		break;
	}
	if (err < ARCHIVE_WARN)
		return (err);


	if (!lha->directory && archive_strlen(&lha->filename) == 0)
		/* The filename has not been set */
		return (truncated_error(a));

	/*
	 * Make a pathname from a dirname and a filename.
	 */
	archive_string_concat(&lha->dirname, &lha->filename);
	archive_string_init(&pathname);
	archive_string_init(&linkname);
	archive_string_copy(&pathname, &lha->dirname);

	if ((lha->mode & AE_IFMT) == AE_IFLNK) {
		/*
	 	 * Extract the symlink-name if it's included in the pathname.
	 	 */
		if (!lha_parse_linkname(&linkname, &pathname)) {
			/* We couldn't get the symlink-name. */
			archive_set_error(&a->archive,
		    	    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Unknown symlink-name"");
			archive_string_free(&pathname);
			archive_string_free(&linkname);
			return (ARCHIVE_FAILED);
		}
	} else {
		/*
		 * Make sure a file-type is set.
		 * The mode has been overridden if it is in the extended data.
		 */
		lha->mode = (lha->mode & ~AE_IFMT) |
		    ((lha->directory)? AE_IFDIR: AE_IFREG);
	}
	if ((lha->setflag & UNIX_MODE_IS_SET) == 0 &&
	    (lha->dos_attr & 1) != 0)
		lha->mode &= ~(0222);/* read only. */

	/*
	 * Set basic file parameters.
	 */
	if (archive_entry_copy_pathname_l(entry, pathname.s,
	    pathname.length, lha->sconv) != 0) {
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(lha->sconv));
		err = ARCHIVE_WARN;
	}
	archive_string_free(&pathname);
	if (archive_strlen(&linkname) > 0) {
		if (archive_entry_copy_symlink_l(entry, linkname.s,
		    linkname.length, lha->sconv) != 0) {
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Linkname cannot be converted ""
			    ""from %s to current locale."",
			    archive_string_conversion_charset_name(lha->sconv));
			err = ARCHIVE_WARN;
		}
	} else
		archive_entry_set_symlink(entry, NULL);
	archive_string_free(&linkname);
	/*
	 * When a header level is 0, there is a possibility that
	 * a pathname and a symlink has '\' character, a directory
	 * separator in DOS/Windows. So we should convert it to '/'.
	 */
	if (p[H_LEVEL_OFFSET] == 0)
		lha_replace_path_separator(lha, entry);

	archive_entry_set_mode(entry, lha->mode);
	archive_entry_set_uid(entry, lha->uid);
	archive_entry_set_gid(entry, lha->gid);
	if (archive_strlen(&lha->uname) > 0)
		archive_entry_set_uname(entry, lha->uname.s);
	if (archive_strlen(&lha->gname) > 0)
		archive_entry_set_gname(entry, lha->gname.s);
	if (lha->setflag & BIRTHTIME_IS_SET) {
		archive_entry_set_birthtime(entry, lha->birthtime,
		    lha->birthtime_tv_nsec);
		archive_entry_set_ctime(entry, lha->birthtime,
		    lha->birthtime_tv_nsec);
	} else {
		archive_entry_unset_birthtime(entry);
		archive_entry_unset_ctime(entry);
	}
	archive_entry_set_mtime(entry, lha->mtime, lha->mtime_tv_nsec);
	if (lha->setflag & ATIME_IS_SET)
		archive_entry_set_atime(entry, lha->atime,
		    lha->atime_tv_nsec);
	else
		archive_entry_unset_atime(entry);
	if (lha->directory || archive_entry_symlink(entry) != NULL)
		archive_entry_unset_size(entry);
	else
		archive_entry_set_size(entry, lha->origsize);

	/*
	 * Prepare variables used to read a file content.
	 */
	lha->entry_bytes_remaining = lha->compsize;
	lha->entry_offset = 0;
	lha->entry_crc_calculated = 0;

	/*
	 * This file does not have a content.
	 */
	if (lha->directory || lha->compsize == 0)
		lha->end_of_entry = 1;

	sprintf(lha->format_name, ""lha -%c%c%c-"",
	    lha->method[0], lha->method[1], lha->method[2]);
	a->archive.archive_format_name = lha->format_name;

	return (err);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1567.cpp,"[28, 0, 0, 0, 5, 0, 12, 1, 4, 1, 38, 0, 0, 0, 4, 535, 0, 0, 6, 6, 0, 0, 0, 83, 0, 0, 0, 0, 3, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 293, 2, 277, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 18, 0, 31, 30, 10, 0, 62, 0, 0, 85, 0, 123, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1567.cpp,241
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,796,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Invalid LHa header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1568.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Invalid LHa header"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1568.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1568.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,829,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""LHa header sum error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1569.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""LHa header sum error"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1569.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1569.cpp,50
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,930,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""LHa header sum error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1570.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""LHa header sum error"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1570.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1570.cpp,57
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,936,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid LHa header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1571.cpp,"{
	const unsigned char *p;
	size_t extdsize;
	int i, err, err2;
	int namelen, padding;
	unsigned char headersum, sum_calculated;

	err = ARCHIVE_OK;

	if ((p = __archive_read_ahead(a, H1_FIXED_SIZE, NULL)) == NULL)
		return (truncated_error(a));

	lha->header_size = p[H1_HEADER_SIZE_OFFSET] + 2;
	headersum = p[H1_HEADER_SUM_OFFSET];
	/* Note: An extended header size is included in a compsize. */
	lha->compsize = archive_le32dec(p + H1_COMP_SIZE_OFFSET);
	lha->origsize = archive_le32dec(p + H1_ORIG_SIZE_OFFSET);
	lha->mtime = lha_dos_time(p + H1_DOS_TIME_OFFSET);
	namelen = p[H1_NAME_LEN_OFFSET];
	/* Calculate a padding size. The result will be normally 0 only(?) */
	padding = ((int)lha->header_size) - H1_FIXED_SIZE - namelen;

	if (namelen > 230 || padding < 0)
		goto invalid;

	if ((p = __archive_read_ahead(a, lha->header_size, NULL)) == NULL)
		return (truncated_error(a));

	for (i = 0; i < namelen; i++) {
		if (p[i + H1_FILE_NAME_OFFSET] == 0xff)
			goto invalid;/* Invalid filename. */
	}
	archive_strncpy(&lha->filename, p + H1_FILE_NAME_OFFSET, namelen);
	lha->crc = archive_le16dec(p + H1_FILE_NAME_OFFSET + namelen);
	lha->setflag |= CRC_IS_SET;

	sum_calculated = lha_calcsum(0, p, 2, lha->header_size - 2);
	/* Consume used bytes but not include `next header size' data
	 * since it will be consumed in lha_read_file_extended_header(). */
	__archive_read_consume(a, lha->header_size - 2);

	/* Read extended headers */
	err2 = lha_read_file_extended_header(a, lha, NULL, 2,
	    (size_t)(lha->compsize + 2), &extdsize);
	if (err2 < ARCHIVE_WARN)
		return (err2);
	if (err2 < err)
		err = err2;
	/* Get a real compressed file size. */
	lha->compsize -= extdsize - 2;

	if (lha->compsize < 0)
		goto invalid;	/* Invalid compressed file size */

	if (sum_calculated != headersum) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""LHa header sum error"");
		return (ARCHIVE_FATAL);
	}
	return (err);
invalid:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid LHa header"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1571.cpp,"[8, 0, 1, 0, 0, 0, 6, 0, 0, 0, 10, 1, 3, 0, 1, 157, 0, 0, 5, 9, 0, 0, 1, 15, 0, 0, 0, 0, 1, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 4, 0, 9, 8, 0, 0, 15, 0, 0, 18, 0, 34, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1571.cpp,63
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,988,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Invalid LHa header size"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1572.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Invalid LHa header size"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1572.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1572.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,1012,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""LHa header CRC error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1573.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""LHa header CRC error"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1573.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1573.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,1080,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""LHa header CRC error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1574.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""LHa header CRC error"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1574.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1574.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,1086,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid LHa header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1575.cpp,"{
	const unsigned char *p;
	size_t extdsize;
	int err;
	uint16_t header_crc;

	if ((p = __archive_read_ahead(a, H3_FIXED_SIZE, NULL)) == NULL)
		return (truncated_error(a));

	if (archive_le16dec(p + H3_FIELD_LEN_OFFSET) != 4)
		goto invalid;
	lha->header_size =archive_le32dec(p + H3_HEADER_SIZE_OFFSET);
	lha->compsize = archive_le32dec(p + H3_COMP_SIZE_OFFSET);
	lha->origsize = archive_le32dec(p + H3_ORIG_SIZE_OFFSET);
	lha->mtime = archive_le32dec(p + H3_TIME_OFFSET);
	lha->crc = archive_le16dec(p + H3_CRC_OFFSET);
	lha->setflag |= CRC_IS_SET;

	if (lha->header_size < H3_FIXED_SIZE + 4)
		goto invalid;
	header_crc = lha_crc16(0, p, H3_FIXED_SIZE);
	__archive_read_consume(a, H3_FIXED_SIZE);

	/* Read extended headers */
	err = lha_read_file_extended_header(a, lha, &header_crc, 4,
		  lha->header_size - H3_FIXED_SIZE, &extdsize);
	if (err < ARCHIVE_WARN)
		return (err);

	if (header_crc != lha->header_crc) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""LHa header CRC error"");
		return (ARCHIVE_FATAL);
	}
	return (err);
invalid:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid LHa header"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1575.cpp,"[5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 6, 1, 2, 0, 1, 98, 0, 0, 4, 4, 0, 0, 0, 6, 0, 0, 0, 0, 1, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 5, 0, 0, 13, 0, 0, 11, 0, 27, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1575.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,1267,"archive_string_sprintf(&cp, ""CP%d"",
					    (int)archive_le32dec(extdheader));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1576.cpp,"{
				case 65001: /* UTF-8 */
					charset = ""UTF-8"";
					break;
				default:
					archive_string_sprintf(&cp, ""CP%d"",
					    (int)archive_le32dec(extdheader));
					charset = cp.s;
					break;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1576.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1576.cpp,162
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,1341,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid extended LHa header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1577.cpp,"{
	const void *h;
	const unsigned char *extdheader;
	size_t	extdsize;
	size_t	datasize;
	unsigned int i;
	unsigned char extdtype;

#define EXT_HEADER_CRC		0x00		/* Header CRC and information*/
#define EXT_FILENAME		0x01		/* Filename 		    */
#define EXT_DIRECTORY		0x02		/* Directory name	    */
#define EXT_DOS_ATTR		0x40		/* MS-DOS attribute	    */
#define EXT_TIMESTAMP		0x41		/* Windows time stamp	    */
#define EXT_FILESIZE		0x42		/* Large file size	    */
#define EXT_TIMEZONE		0x43		/* Time zone		    */
#define EXT_UTF16_FILENAME	0x44		/* UTF-16 filename 	    */
#define EXT_UTF16_DIRECTORY	0x45		/* UTF-16 directory name    */
#define EXT_CODEPAGE		0x46		/* Codepage		    */
#define EXT_UNIX_MODE		0x50		/* File permission	    */
#define EXT_UNIX_GID_UID	0x51		/* gid,uid		    */
#define EXT_UNIX_GNAME		0x52		/* Group name		    */
#define EXT_UNIX_UNAME		0x53		/* User name		    */
#define EXT_UNIX_MTIME		0x54		/* Modified time	    */
#define EXT_OS2_NEW_ATTR	0x7f		/* new attribute(OS/2 only) */
#define EXT_NEW_ATTR		0xff		/* new attribute	    */

	*total_size = sizefield_length;

	for (;;) {
		/* Read an extended header size. */
		if ((h =
		    __archive_read_ahead(a, sizefield_length, NULL)) == NULL)
			return (truncated_error(a));
		/* Check if the size is the zero indicates the end of the
		 * extended header. */
		if (sizefield_length == sizeof(uint16_t))
			extdsize = archive_le16dec(h);
		else
			extdsize = archive_le32dec(h);
		if (extdsize == 0) {
			/* End of extended header */
			if (crc != NULL)
				*crc = lha_crc16(*crc, h, sizefield_length);
			__archive_read_consume(a, sizefield_length);
			return (ARCHIVE_OK);
		}

		/* Sanity check to the extended header size. */
		if (((uint64_t)*total_size + extdsize) >
				    (uint64_t)limitsize ||
		    extdsize <= (size_t)sizefield_length)
			goto invalid;

		/* Read the extended header. */
		if ((h = __archive_read_ahead(a, extdsize, NULL)) == NULL)
			return (truncated_error(a));
		*total_size += extdsize;

		extdheader = (const unsigned char *)h;
		/* Get the extended header type. */
		extdtype = extdheader[sizefield_length];
		/* Calculate an extended data size. */
		datasize = extdsize - (1 + sizefield_length);
		/* Skip an extended header size field and type field. */
		extdheader += sizefield_length + 1;

		if (crc != NULL && extdtype != EXT_HEADER_CRC)
			*crc = lha_crc16(*crc, h, extdsize);
		switch (extdtype) {
		case EXT_HEADER_CRC:
			/* We only use a header CRC. Following data will not
			 * be used. */
			if (datasize >= 2) {
				lha->header_crc = archive_le16dec(extdheader);
				if (crc != NULL) {
					static const char zeros[2] = {0, 0};
					*crc = lha_crc16(*crc, h,
					    extdsize - datasize);
					/* CRC value itself as zero */
					*crc = lha_crc16(*crc, zeros, 2);
					*crc = lha_crc16(*crc,
					    extdheader+2, datasize - 2);
				}
			}
			break;
		case EXT_FILENAME:
			if (datasize == 0) {
				/* maybe directory header */
				archive_string_empty(&lha->filename);
				break;
			}
			if (extdheader[0] == '\0')
				goto invalid;
			archive_strncpy(&lha->filename,
			    (const char *)extdheader, datasize);
			break;
		case EXT_DIRECTORY:
			if (datasize == 0 || extdheader[0] == '\0')
				/* no directory name data. exit this case. */
				goto invalid;

			archive_strncpy(&lha->dirname,
		  	    (const char *)extdheader, datasize);
			/*
			 * Convert directory delimiter from 0xFF
			 * to '/' for local system.
	 		 */
			for (i = 0; i < lha->dirname.length; i++) {
				if ((unsigned char)lha->dirname.s[i] == 0xFF)
					lha->dirname.s[i] = '/';
			}
			/* Is last character directory separator? */
			if (lha->dirname.s[lha->dirname.length-1] != '/')
				/* invalid directory data */
				goto invalid;
			break;
		case EXT_DOS_ATTR:
			if (datasize == 2)
				lha->dos_attr = (unsigned char)
				    (archive_le16dec(extdheader) & 0xff);
			break;
		case EXT_TIMESTAMP:
			if (datasize == (sizeof(uint64_t) * 3)) {
				lha->birthtime = lha_win_time(
				    archive_le64dec(extdheader),
				    &lha->birthtime_tv_nsec);
				extdheader += sizeof(uint64_t);
				lha->mtime = lha_win_time(
				    archive_le64dec(extdheader),
				    &lha->mtime_tv_nsec);
				extdheader += sizeof(uint64_t);
				lha->atime = lha_win_time(
				    archive_le64dec(extdheader),
				    &lha->atime_tv_nsec);
				lha->setflag |= BIRTHTIME_IS_SET |
				    ATIME_IS_SET;
			}
			break;
		case EXT_FILESIZE:
			if (datasize == sizeof(uint64_t) * 2) {
				lha->compsize = archive_le64dec(extdheader);
				extdheader += sizeof(uint64_t);
				lha->origsize = archive_le64dec(extdheader);
			}
			break;
		case EXT_CODEPAGE:
			/* Get an archived filename charset from codepage.
			 * This overwrites the charset specified by
			 * hdrcharset option. */
			if (datasize == sizeof(uint32_t)) {
				struct archive_string cp;
				const char *charset;

				archive_string_init(&cp);
				switch (archive_le32dec(extdheader)) {
				case 65001: /* UTF-8 */
					charset = ""UTF-8"";
					break;
				default:
					archive_string_sprintf(&cp, ""CP%d"",
					    (int)archive_le32dec(extdheader));
					charset = cp.s;
					break;
				}
				lha->sconv =
				    archive_string_conversion_from_charset(
					&(a->archive), charset, 1);
				archive_string_free(&cp);
				if (lha->sconv == NULL)
					return (ARCHIVE_FATAL);
			}
			break;
		case EXT_UNIX_MODE:
			if (datasize == sizeof(uint16_t)) {
				lha->mode = archive_le16dec(extdheader);
				lha->setflag |= UNIX_MODE_IS_SET;
			}
			break;
		case EXT_UNIX_GID_UID:
			if (datasize == (sizeof(uint16_t) * 2)) {
				lha->gid = archive_le16dec(extdheader);
				lha->uid = archive_le16dec(extdheader+2);
			}
			break;
		case EXT_UNIX_GNAME:
			if (datasize > 0)
				archive_strncpy(&lha->gname,
				    (const char *)extdheader, datasize);
			break;
		case EXT_UNIX_UNAME:
			if (datasize > 0)
				archive_strncpy(&lha->uname,
				    (const char *)extdheader, datasize);
			break;
		case EXT_UNIX_MTIME:
			if (datasize == sizeof(uint32_t))
				lha->mtime = archive_le32dec(extdheader);
			break;
		case EXT_OS2_NEW_ATTR:
			/* This extended header is OS/2 depend. */
			if (datasize == 16) {
				lha->dos_attr = (unsigned char)
				    (archive_le16dec(extdheader) & 0xff);
				lha->mode = archive_le16dec(extdheader+2);
				lha->gid = archive_le16dec(extdheader+4);
				lha->uid = archive_le16dec(extdheader+6);
				lha->birthtime = archive_le32dec(extdheader+8);
				lha->atime = archive_le32dec(extdheader+12);
				lha->setflag |= UNIX_MODE_IS_SET
				    | BIRTHTIME_IS_SET | ATIME_IS_SET;
			}
			break;
		case EXT_NEW_ATTR:
			if (datasize == 20) {
				lha->mode = (mode_t)archive_le32dec(extdheader);
				lha->gid = archive_le32dec(extdheader+4);
				lha->uid = archive_le32dec(extdheader+8);
				lha->birthtime = archive_le32dec(extdheader+12);
				lha->atime = archive_le32dec(extdheader+16);
				lha->setflag |= UNIX_MODE_IS_SET
				    | BIRTHTIME_IS_SET | ATIME_IS_SET;
			}
			break;
		case EXT_TIMEZONE:		/* Not supported */
		case EXT_UTF16_FILENAME:	/* Not supported */
		case EXT_UTF16_DIRECTORY:	/* Not supported */
		default:
			break;
		}

		__archive_read_consume(a, extdsize);
	}
invalid:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid extended LHa header"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1577.cpp,"[26, 0, 2, 0, 18, 0, 5, 2, 18, 2, 33, 1, 4, 0, 10, 426, 0, 0, 9, 9, 0, 0, 3, 46, 0, 0, 0, 0, 3, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237, 0, 216, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 0, 30, 26, 1, 0, 62, 0, 0, 57, 0, 95, 17, 2, 17, 17, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1577.cpp,236
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,1355,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""LHa data CRC error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1578.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""LHa data CRC error"");
			r = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1578.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1578.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,1421,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated LHa file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1579.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated LHa file data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1579.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1579.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,1465,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Unsupported lzh compression method -%c%c%c-"",
			    lha->method[0], lha->method[1], lha->method[2]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1580.cpp,"{
		case ARCHIVE_OK:
			break;
		case ARCHIVE_FAILED:
        		/* Unsupported compression. */
			*buff = NULL;
			*size = 0;
			*offset = 0;
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Unsupported lzh compression method -%c%c%c-"",
			    lha->method[0], lha->method[1], lha->method[2]);
			/* We know compressed size; just skip it. */
			archive_read_format_lha_read_data_skip(a);
			return (ARCHIVE_WARN);
		default:
			archive_set_error(&a->archive, ENOMEM,
			    ""Couldn't allocate memory ""
			    ""for lzh decompression"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1580.cpp,"[0, 0, 0, 0, 1, 0, 2, 0, 2, 1, 1, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1580.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,1473,"archive_set_error(&a->archive, ENOMEM,
			    ""Couldn't allocate memory ""
			    ""for lzh decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1581.cpp,"{
		case ARCHIVE_OK:
			break;
		case ARCHIVE_FAILED:
        		/* Unsupported compression. */
			*buff = NULL;
			*size = 0;
			*offset = 0;
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Unsupported lzh compression method -%c%c%c-"",
			    lha->method[0], lha->method[1], lha->method[2]);
			/* We know compressed size; just skip it. */
			archive_read_format_lha_read_data_skip(a);
			return (ARCHIVE_WARN);
		default:
			archive_set_error(&a->archive, ENOMEM,
			    ""Couldn't allocate memory ""
			    ""for lzh decompression"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1581.cpp,"[0, 0, 0, 0, 1, 0, 2, 0, 2, 1, 1, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1581.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,1492,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated LHa file body"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1582.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated LHa file body"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1582.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1582.cpp,46
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.cpp,1511,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Bad lzh data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1583.cpp,"{
	case ARCHIVE_OK:
		break;
	case ARCHIVE_EOF:
		lha->end_of_entry = 1;
		break;
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Bad lzh data"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1583.cpp,"[0, 0, 0, 0, 2, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1583.cpp,65
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,257,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate tar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1584.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate tar data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1584.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1584.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,437,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""tar: hdrcharset option needs a character-set name"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1585.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""tar: hdrcharset option needs a character-set name"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1585.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1585.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,624,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated tar archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1586.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated tar archive"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1586.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1586.cpp,40
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,712,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated tar archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1587.cpp,"{  /* Short block at EOF; this is bad. */
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated tar archive"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1587.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1587.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,754,"archive_set_error(&a->archive, EINVAL, ""Damaged tar archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1588.cpp,"{
		tar_flush_unconsumed(a, unconsumed);
		archive_set_error(&a->archive, EINVAL, ""Damaged tar archive"");
		return (ARCHIVE_RETRY); /* Retryable: Invalid header */
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1588.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1588.cpp,65
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,760,"archive_set_error(&a->archive, EINVAL, ""Too many special headers"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1589.cpp,"{
		tar_flush_unconsumed(a, unconsumed);
		archive_set_error(&a->archive, EINVAL, ""Too many special headers"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1589.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1589.cpp,71
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,853,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Unrecognized GNU sparse file format"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1590.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Unrecognized GNU sparse file format"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1590.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1590.cpp,164
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,864,"archive_set_error(&a->archive, EINVAL, ""Damaged tar archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1591.cpp,"archive_set_error(&a->archive, EINVAL, ""Damaged tar archive"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1591.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1591.cpp,175
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,975,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed Solaris ACL attribute (invalid digit)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1592.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed Solaris ACL attribute (invalid digit)"");
			return(ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1592.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1592.cpp,35
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,982,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed Solaris ACL attribute (count too large)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1593.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed Solaris ACL attribute (count too large)"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1593.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1593.cpp,42
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,998,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Malformed Solaris ACL attribute (unsupported type %o)"",
		    (int)type);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1594.cpp,"{
	case 01000000:
		/* POSIX.1e ACL */
		acl_type = ARCHIVE_ENTRY_ACL_TYPE_ACCESS;
		break;
	case 03000000:
		/* NFSv4 ACL */
		acl_type = ARCHIVE_ENTRY_ACL_TYPE_NFS4;
		break;
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Malformed Solaris ACL attribute (unsupported type %o)"",
		    (int)type);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1594.cpp,"[0, 0, 0, 0, 2, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1594.cpp,58
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1006,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Malformed Solaris ACL attribute (body overflow)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1595.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Malformed Solaris ACL attribute (body overflow)"");
		return(ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1595.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1595.cpp,66
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1029,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for ACL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1596.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for ACL"");
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1596.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1596.cpp,89
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1032,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed Solaris ACL attribute (unparsable)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1597.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed Solaris ACL attribute (unparsable)"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1597.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1597.cpp,92
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1063,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for %s"", name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1598.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for %s"", name);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1598.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1598.cpp,5
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1067,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""%s can't be converted from %s to current locale."",
	    name, archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1599.cpp,"{
	if (errno == ENOMEM) {
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for %s"", name);
		return (ARCHIVE_FATAL);
	}
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""%s can't be converted from %s to current locale."",
	    name, archive_string_conversion_charset_name(sconv));
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1599.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1599.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1091,"err = set_conversion_failed_error(a, tar->sconv, ""Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1600.cpp,"err = set_conversion_failed_error(a, tar->sconv, ""Pathname"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1600.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1600.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1124,"archive_set_error(&a->archive, EINVAL,
		    ""Special header too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1601.cpp,"{
		archive_set_error(&a->archive, EINVAL,
		    ""Special header too large"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1601.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1601.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1131,"archive_set_error(&a->archive, ENOMEM,
		    ""No memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1602.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""No memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1602.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1602.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1184,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry has negative size"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1603.cpp,"{
		tar->entry_bytes_remaining = 0;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry has negative size"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1603.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1603.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1191,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry size overflow"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1604.cpp,"{
		/* Note: tar_atol returns INT64_MAX on overflow */
		tar->entry_bytes_remaining = 0;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry size overflow"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1604.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1604.cpp,30
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1206,"err = set_conversion_failed_error(a, tar->sconv,
			    ""Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1605.cpp,"{
			err = set_conversion_failed_error(a, tar->sconv,
			    ""Linkname"");
			if (err == ARCHIVE_FATAL)
				return (err);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1605.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1605.cpp,45
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1274,"err = set_conversion_failed_error(a, tar->sconv,
			    ""Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1606.cpp,"{
			err = set_conversion_failed_error(a, tar->sconv,
			    ""Linkname"");
			if (err == ARCHIVE_FATAL)
				return (err);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1606.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1606.cpp,113
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1361,"err = set_conversion_failed_error(a, tar->sconv, ""Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1607.cpp,"{
		err = set_conversion_failed_error(a, tar->sconv, ""Pathname"");
		if (err == ARCHIVE_FATAL)
			return (err);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1607.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1607.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1520,"err = set_conversion_failed_error(a, tar->sconv, ""Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1608.cpp,"{
		err = set_conversion_failed_error(a, tar->sconv, ""Pathname"");
		if (err == ARCHIVE_FATAL)
			return (err);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1608.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1608.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1535,"err = set_conversion_failed_error(a, tar->sconv, ""Uname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1609.cpp,"{
		err = set_conversion_failed_error(a, tar->sconv, ""Uname"");
		if (err == ARCHIVE_FATAL)
			return (err);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1609.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1609.cpp,37
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1542,"err = set_conversion_failed_error(a, tar->sconv, ""Gname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1610.cpp,"{
		err = set_conversion_failed_error(a, tar->sconv, ""Gname"");
		if (err == ARCHIVE_FATAL)
			return (err);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1610.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1610.cpp,44
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1598,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
				    ""Ignoring malformed pax extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1611.cpp,"{
				archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
				    ""Ignoring malformed pax extended attributes"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1611.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1611.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1605,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
				    ""Rejecting pax extended attribute > 1MB"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1612.cpp,"{
				archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
				    ""Rejecting pax extended attribute > 1MB"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1612.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1612.cpp,39
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1622,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Ignoring malformed pax extended attribute"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1613.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Ignoring malformed pax extended attribute"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1613.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1613.cpp,56
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1637,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid pax extended attributes"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1614.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid pax extended attributes"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1614.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1614.cpp,71
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1683,"err = set_conversion_failed_error(a, sconv, ""Gname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1615.cpp,"{
			err = set_conversion_failed_error(a, sconv, ""Gname"");
			if (err == ARCHIVE_FATAL)
				return (err);
			/* Use a converted an original name. */
			archive_entry_copy_gname(entry, tar->entry_gname.s);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1615.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1615.cpp,117
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1693,"err = set_conversion_failed_error(a, sconv, ""Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1616.cpp,"{
			err = set_conversion_failed_error(a, sconv, ""Linkname"");
			if (err == ARCHIVE_FATAL)
				return (err);
			/* Use a converted an original name. */
			archive_entry_copy_link(entry, tar->entry_linkpath.s);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1616.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1616.cpp,127
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1717,"err = set_conversion_failed_error(a, sconv, ""Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1617.cpp,"{
			err = set_conversion_failed_error(a, sconv, ""Pathname"");
			if (err == ARCHIVE_FATAL)
				return (err);
			/* Use a converted an original name. */
			archive_entry_copy_pathname(entry, as->s);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1617.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1617.cpp,151
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1727,"err = set_conversion_failed_error(a, sconv, ""Uname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1618.cpp,"{
			err = set_conversion_failed_error(a, sconv, ""Uname"");
			if (err == ARCHIVE_FATAL)
				return (err);
			/* Use a converted an original name. */
			archive_entry_copy_uname(entry, tar->entry_uname.s);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1618.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1618.cpp,161
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1802,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown ACL type: %d"", type);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1619.cpp,"{
	case ARCHIVE_ENTRY_ACL_TYPE_ACCESS:
		errstr = ""SCHILY.acl.access"";
		break;
	case ARCHIVE_ENTRY_ACL_TYPE_DEFAULT:
		errstr = ""SCHILY.acl.default"";
		break;
	case ARCHIVE_ENTRY_ACL_TYPE_NFS4:
		errstr = ""SCHILY.acl.ace"";
		break;
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown ACL type: %d"", type);
		return(ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1619.cpp,"[0, 0, 0, 0, 3, 0, 1, 0, 3, 1, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1619.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1819,"archive_set_error(&a->archive, ENOMEM,
			    ""%s %s"", ""Can't allocate memory for "",
			    errstr);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1620.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""%s %s"", ""Can't allocate memory for "",
			    errstr);
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1620.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1620.cpp,35
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1824,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC, ""%s %s"", ""Parse error: "", errstr);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1621.cpp,"{
		if (r == ARCHIVE_FATAL) {
			archive_set_error(&a->archive, ENOMEM,
			    ""%s %s"", ""Can't allocate memory for "",
			    errstr);
			return (r);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC, ""%s %s"", ""Parse error: "", errstr);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1621.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1621.cpp,40
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1859,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Non-regular file cannot be sparse"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1622.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Non-regular file cannot be sparse"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1622.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1622.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,1990,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SUN.holesdata"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1623.cpp,"{
				if (r == ARCHIVE_FATAL)
					return (r);
				err = r;
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SUN.holesdata"");
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1623.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1623.cpp,147
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,2162,"err = set_conversion_failed_error(a, tar->sconv, ""Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1624.cpp,"{
		err = set_conversion_failed_error(a, tar->sconv, ""Pathname"");
		if (err == ARCHIVE_FATAL)
			return (err);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1624.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1624.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,2173,"err = set_conversion_failed_error(a, tar->sconv, ""Uname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1625.cpp,"{
		err = set_conversion_failed_error(a, tar->sconv, ""Uname"");
		if (err == ARCHIVE_FATAL)
			return (err);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1625.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1625.cpp,34
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,2180,"err = set_conversion_failed_error(a, tar->sconv, ""Gname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1626.cpp,"{
		err = set_conversion_failed_error(a, tar->sconv, ""Gname"");
		if (err == ARCHIVE_FATAL)
			return (err);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1626.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1626.cpp,41
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,2231,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1627.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1627.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1627.cpp,8
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,2240,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC, ""Malformed sparse map data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1628.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC, ""Malformed sparse map data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1628.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1628.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,2297,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated tar archive ""
			    ""detected while reading sparse file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1629.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated tar archive ""
			    ""detected while reading sparse file data"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1629.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1629.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,2712,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Line too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1630.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Line too long"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1630.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1630.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,2725,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Line too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1631.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Line too long"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1631.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1631.cpp,34
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.cpp,2731,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate working buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1632.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate working buffer"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1632.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1632.cpp,40
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_compress.cpp,226,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for %s decompression"",
		    self->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1633.cpp,"{
		free(out_block);
		free(state);
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for %s decompression"",
		    self->name);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1633.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1633.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_compress.cpp,247,"archive_set_error(&self->archive->archive, -1,
		    ""Invalid compressed data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1634.cpp,"{
		archive_set_error(&self->archive->archive, -1,
		    ""Invalid compressed data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1634.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1634.cpp,37
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_compress.cpp,382,"archive_set_error(&(self->archive->archive), -1,
		    ""Invalid compressed data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1635.cpp,"{
		/* An invalid code is a fatal error. */
		archive_set_error(&(self->archive->archive), -1,
		    ""Invalid compressed data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1635.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1635.cpp,47
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,369,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate CAB data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1636.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate CAB data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1636.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1636.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,475,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""cab: hdrcharset option needs a character-set name"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1637.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""cab: hdrcharset option needs a character-set name"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1637.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1637.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,508,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Couldn't find out CAB header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1638.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Couldn't find out CAB header"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1638.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1638.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,539,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Truncated CAB header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1639.cpp,"{
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Truncated CAB header"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1639.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1639.cpp,3
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,664,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Couldn't find out CAB header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1640.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Couldn't find out CAB header"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1640.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1640.cpp,40
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,781,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid offset of CFFILE %jd < %jd"",
		    (intmax_t)hd->files_offset, (intmax_t)cab->cab_offset);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1641.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid offset of CFFILE %jd < %jd"",
		    (intmax_t)hd->files_offset, (intmax_t)cab->cab_offset);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1641.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1641.cpp,157
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,875,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Multivolume cabinet file is unsupported"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1642.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Multivolume cabinet file is unsupported"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1642.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1642.cpp,251
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,881,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid CAB header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1643.cpp,"{
	const unsigned char *p;
	struct cab *cab;
	struct cfheader *hd;
	size_t bytes, used;
	ssize_t len;
	int64_t skip;
	int err, i;
	int cur_folder, prev_folder;
	uint32_t offset32;
	
	a->archive.archive_format = ARCHIVE_FORMAT_CAB;
	if (a->archive.archive_format_name == NULL)
		a->archive.archive_format_name = ""CAB"";

	if ((p = __archive_read_ahead(a, 42, NULL)) == NULL)
		return (truncated_error(a));

	cab = (struct cab *)(a->format->data);
	if (cab->found_header == 0 &&
	    p[0] == 'M' && p[1] == 'Z') {
		/* This is an executable?  Must be self-extracting... */
		err = cab_skip_sfx(a);
		if (err < ARCHIVE_WARN)
			return (err);

		/* Re-read header after processing the SFX. */
		if ((p = __archive_read_ahead(a, 42, NULL)) == NULL)
			return (truncated_error(a));
	}

	cab->cab_offset = 0;
	/*
	 * Read CFHEADER.
	 */
	hd = &cab->cfheader;
	if (p[CFHEADER_signature+0] != 'M' || p[CFHEADER_signature+1] != 'S' ||
	    p[CFHEADER_signature+2] != 'C' || p[CFHEADER_signature+3] != 'F') {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Couldn't find out CAB header"");
		return (ARCHIVE_FATAL);
	}
	hd->total_bytes = archive_le32dec(p + CFHEADER_cbCabinet);
	hd->files_offset = archive_le32dec(p + CFHEADER_coffFiles);
	hd->minor = p[CFHEADER_versionMinor];
	hd->major = p[CFHEADER_versionMajor];
	hd->folder_count = archive_le16dec(p + CFHEADER_cFolders);
	if (hd->folder_count == 0)
		goto invalid;
	hd->file_count = archive_le16dec(p + CFHEADER_cFiles);
	if (hd->file_count == 0)
		goto invalid;
	hd->flags = archive_le16dec(p + CFHEADER_flags);
	hd->setid = archive_le16dec(p + CFHEADER_setID);
	hd->cabinet = archive_le16dec(p + CFHEADER_iCabinet);
	used = CFHEADER_iCabinet + 2;
	if (hd->flags & RESERVE_PRESENT) {
		uint16_t cfheader;
		cfheader = archive_le16dec(p + CFHEADER_cbCFHeader);
		if (cfheader > 60000U)
			goto invalid;
		hd->cffolder = p[CFHEADER_cbCFFolder];
		hd->cfdata = p[CFHEADER_cbCFData];
		used += 4;/* cbCFHeader, cbCFFolder and cbCFData */
		used += cfheader;/* abReserve */
	} else
		hd->cffolder = 0;/* Avoid compiling warning. */
	if (hd->flags & PREV_CABINET) {
		/* How many bytes are used for szCabinetPrev. */
		if ((p = __archive_read_ahead(a, used+256, NULL)) == NULL)
			return (truncated_error(a));
		if ((len = cab_strnlen(p + used, 255)) <= 0)
			goto invalid;
		used += len + 1;
		/* How many bytes are used for szDiskPrev. */
		if ((p = __archive_read_ahead(a, used+256, NULL)) == NULL)
			return (truncated_error(a));
		if ((len = cab_strnlen(p + used, 255)) <= 0)
			goto invalid;
		used += len + 1;
	}
	if (hd->flags & NEXT_CABINET) {
		/* How many bytes are used for szCabinetNext. */
		if ((p = __archive_read_ahead(a, used+256, NULL)) == NULL)
			return (truncated_error(a));
		if ((len = cab_strnlen(p + used, 255)) <= 0)
			goto invalid;
		used += len + 1;
		/* How many bytes are used for szDiskNext. */
		if ((p = __archive_read_ahead(a, used+256, NULL)) == NULL)
			return (truncated_error(a));
		if ((len = cab_strnlen(p + used, 255)) <= 0)
			goto invalid;
		used += len + 1;
	}
	__archive_read_consume(a, used);
	cab->cab_offset += used;
	used = 0;

	/*
	 * Read CFFOLDER.
	 */
	hd->folder_array = (struct cffolder *)calloc(
	    hd->folder_count, sizeof(struct cffolder));
	if (hd->folder_array == NULL)
		goto nomem;
	
	bytes = 8;
	if (hd->flags & RESERVE_PRESENT)
		bytes += hd->cffolder;
	bytes *= hd->folder_count;
	if ((p = __archive_read_ahead(a, bytes, NULL)) == NULL)
		return (truncated_error(a));
	offset32 = 0;
	for (i = 0; i < hd->folder_count; i++) {
		struct cffolder *folder = &(hd->folder_array[i]);
		folder->cfdata_offset_in_cab =
		    archive_le32dec(p + CFFOLDER_coffCabStart);
		folder->cfdata_count = archive_le16dec(p+CFFOLDER_cCFData);
		folder->comptype =
		    archive_le16dec(p+CFFOLDER_typeCompress) & 0x0F;
		folder->compdata =
		    archive_le16dec(p+CFFOLDER_typeCompress) >> 8;
		/* Get a compression name. */
		if (folder->comptype <
		    sizeof(compression_name) / sizeof(compression_name[0]))
			folder->compname = compression_name[folder->comptype];
		else
			folder->compname = ""UNKNOWN"";
		p += 8;
		used += 8;
		if (hd->flags & RESERVE_PRESENT) {
			p += hd->cffolder;/* abReserve */
			used += hd->cffolder;
		}
		/*
		 * Sanity check if each data is acceptable.
		 */
		if (offset32 >= folder->cfdata_offset_in_cab)
			goto invalid;
		offset32 = folder->cfdata_offset_in_cab;

		/* Set a request to initialize zlib for the CFDATA of
		 * this folder. */
		folder->decompress_init = 0;
	}
	__archive_read_consume(a, used);
	cab->cab_offset += used;

	/*
	 * Read CFFILE.
	 */
	/* Seek read pointer to the offset of CFFILE if needed. */
	skip = (int64_t)hd->files_offset - cab->cab_offset;
	if (skip <  0) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid offset of CFFILE %jd < %jd"",
		    (intmax_t)hd->files_offset, (intmax_t)cab->cab_offset);
		return (ARCHIVE_FATAL);
	}
	if (skip) {
		__archive_read_consume(a, skip);
		cab->cab_offset += skip;
	}
	/* Allocate memory for CFDATA */
	hd->file_array = (struct cffile *)calloc(
	    hd->file_count, sizeof(struct cffile));
	if (hd->file_array == NULL)
		goto nomem;

	prev_folder = -1;
	for (i = 0; i < hd->file_count; i++) {
		struct cffile *file = &(hd->file_array[i]);
		ssize_t avail;

		if ((p = __archive_read_ahead(a, 16, NULL)) == NULL)
			return (truncated_error(a));
		file->uncompressed_size = archive_le32dec(p + CFFILE_cbFile);
		file->offset = archive_le32dec(p + CFFILE_uoffFolderStart);
		file->folder = archive_le16dec(p + CFFILE_iFolder);
		file->mtime = cab_dos_time(p + CFFILE_date_time);
		file->attr = (uint8_t)archive_le16dec(p + CFFILE_attribs);
		__archive_read_consume(a, 16);

		cab->cab_offset += 16;
		if ((p = cab_read_ahead_remaining(a, 256, &avail)) == NULL)
			return (truncated_error(a));
		if ((len = cab_strnlen(p, avail-1)) <= 0)
			goto invalid;

		/* Copy a pathname.  */
		archive_string_init(&(file->pathname));
		archive_strncpy(&(file->pathname), p, len);
		__archive_read_consume(a, len + 1);
		cab->cab_offset += len + 1;

		/*
		 * Sanity check if each data is acceptable.
		 */
		if (file->uncompressed_size > 0x7FFF8000)
			goto invalid;/* Too large */
		if ((int64_t)file->offset + (int64_t)file->uncompressed_size
		    > ARCHIVE_LITERAL_LL(0x7FFF8000))
			goto invalid;/* Too large */
		switch (file->folder) {
		case iFoldCONTINUED_TO_NEXT:
			/* This must be last file in a folder. */
			if (i != hd->file_count -1)
				goto invalid;
			cur_folder = hd->folder_count -1;
			break;
		case iFoldCONTINUED_PREV_AND_NEXT:
			/* This must be only one file in a folder. */
			if (hd->file_count != 1)
				goto invalid;
			/* FALL THROUGH */
		case iFoldCONTINUED_FROM_PREV:
			/* This must be first file in a folder. */
			if (i != 0)
				goto invalid;
			prev_folder = cur_folder = 0;
			offset32 = file->offset;
			break;
		default:
			if (file->folder >= hd->folder_count)
				goto invalid;
			cur_folder = file->folder;
			break;
		}
		/* Dot not back track. */
		if (cur_folder < prev_folder)
			goto invalid;
		if (cur_folder != prev_folder)
			offset32 = 0;
		prev_folder = cur_folder;

		/* Make sure there are not any blanks from last file
		 * contents. */
		if (offset32 != file->offset)
			goto invalid;
		offset32 += file->uncompressed_size;

		/* CFDATA is available for file contents. */
		if (file->uncompressed_size > 0 &&
		    hd->folder_array[cur_folder].cfdata_count == 0)
			goto invalid;
	}

	if (hd->cabinet != 0 || hd->flags & (PREV_CABINET | NEXT_CABINET)) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Multivolume cabinet file is unsupported"");
		return (ARCHIVE_WARN);
	}
	return (ARCHIVE_OK);
invalid:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid CAB header"");
	return (ARCHIVE_FATAL);
nomem:
	archive_set_error(&a->archive, ENOMEM,
	    ""Can't allocate memory for CAB data"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1643.cpp,"[43, 0, 2, 0, 3, 0, 16, 1, 3, 1, 49, 2, 20, 0, 1, 633, 0, 0, 13, 16, 0, 0, 4, 77, 0, 0, 0, 0, 5, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 385, 0, 266, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 15, 0, 46, 43, 2, 0, 60, 0, 0, 76, 0, 104, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1643.cpp,257
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,885,"archive_set_error(&a->archive, ENOMEM,
	    ""Can't allocate memory for CAB data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1644.cpp,"{
	const unsigned char *p;
	struct cab *cab;
	struct cfheader *hd;
	size_t bytes, used;
	ssize_t len;
	int64_t skip;
	int err, i;
	int cur_folder, prev_folder;
	uint32_t offset32;
	
	a->archive.archive_format = ARCHIVE_FORMAT_CAB;
	if (a->archive.archive_format_name == NULL)
		a->archive.archive_format_name = ""CAB"";

	if ((p = __archive_read_ahead(a, 42, NULL)) == NULL)
		return (truncated_error(a));

	cab = (struct cab *)(a->format->data);
	if (cab->found_header == 0 &&
	    p[0] == 'M' && p[1] == 'Z') {
		/* This is an executable?  Must be self-extracting... */
		err = cab_skip_sfx(a);
		if (err < ARCHIVE_WARN)
			return (err);

		/* Re-read header after processing the SFX. */
		if ((p = __archive_read_ahead(a, 42, NULL)) == NULL)
			return (truncated_error(a));
	}

	cab->cab_offset = 0;
	/*
	 * Read CFHEADER.
	 */
	hd = &cab->cfheader;
	if (p[CFHEADER_signature+0] != 'M' || p[CFHEADER_signature+1] != 'S' ||
	    p[CFHEADER_signature+2] != 'C' || p[CFHEADER_signature+3] != 'F') {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Couldn't find out CAB header"");
		return (ARCHIVE_FATAL);
	}
	hd->total_bytes = archive_le32dec(p + CFHEADER_cbCabinet);
	hd->files_offset = archive_le32dec(p + CFHEADER_coffFiles);
	hd->minor = p[CFHEADER_versionMinor];
	hd->major = p[CFHEADER_versionMajor];
	hd->folder_count = archive_le16dec(p + CFHEADER_cFolders);
	if (hd->folder_count == 0)
		goto invalid;
	hd->file_count = archive_le16dec(p + CFHEADER_cFiles);
	if (hd->file_count == 0)
		goto invalid;
	hd->flags = archive_le16dec(p + CFHEADER_flags);
	hd->setid = archive_le16dec(p + CFHEADER_setID);
	hd->cabinet = archive_le16dec(p + CFHEADER_iCabinet);
	used = CFHEADER_iCabinet + 2;
	if (hd->flags & RESERVE_PRESENT) {
		uint16_t cfheader;
		cfheader = archive_le16dec(p + CFHEADER_cbCFHeader);
		if (cfheader > 60000U)
			goto invalid;
		hd->cffolder = p[CFHEADER_cbCFFolder];
		hd->cfdata = p[CFHEADER_cbCFData];
		used += 4;/* cbCFHeader, cbCFFolder and cbCFData */
		used += cfheader;/* abReserve */
	} else
		hd->cffolder = 0;/* Avoid compiling warning. */
	if (hd->flags & PREV_CABINET) {
		/* How many bytes are used for szCabinetPrev. */
		if ((p = __archive_read_ahead(a, used+256, NULL)) == NULL)
			return (truncated_error(a));
		if ((len = cab_strnlen(p + used, 255)) <= 0)
			goto invalid;
		used += len + 1;
		/* How many bytes are used for szDiskPrev. */
		if ((p = __archive_read_ahead(a, used+256, NULL)) == NULL)
			return (truncated_error(a));
		if ((len = cab_strnlen(p + used, 255)) <= 0)
			goto invalid;
		used += len + 1;
	}
	if (hd->flags & NEXT_CABINET) {
		/* How many bytes are used for szCabinetNext. */
		if ((p = __archive_read_ahead(a, used+256, NULL)) == NULL)
			return (truncated_error(a));
		if ((len = cab_strnlen(p + used, 255)) <= 0)
			goto invalid;
		used += len + 1;
		/* How many bytes are used for szDiskNext. */
		if ((p = __archive_read_ahead(a, used+256, NULL)) == NULL)
			return (truncated_error(a));
		if ((len = cab_strnlen(p + used, 255)) <= 0)
			goto invalid;
		used += len + 1;
	}
	__archive_read_consume(a, used);
	cab->cab_offset += used;
	used = 0;

	/*
	 * Read CFFOLDER.
	 */
	hd->folder_array = (struct cffolder *)calloc(
	    hd->folder_count, sizeof(struct cffolder));
	if (hd->folder_array == NULL)
		goto nomem;
	
	bytes = 8;
	if (hd->flags & RESERVE_PRESENT)
		bytes += hd->cffolder;
	bytes *= hd->folder_count;
	if ((p = __archive_read_ahead(a, bytes, NULL)) == NULL)
		return (truncated_error(a));
	offset32 = 0;
	for (i = 0; i < hd->folder_count; i++) {
		struct cffolder *folder = &(hd->folder_array[i]);
		folder->cfdata_offset_in_cab =
		    archive_le32dec(p + CFFOLDER_coffCabStart);
		folder->cfdata_count = archive_le16dec(p+CFFOLDER_cCFData);
		folder->comptype =
		    archive_le16dec(p+CFFOLDER_typeCompress) & 0x0F;
		folder->compdata =
		    archive_le16dec(p+CFFOLDER_typeCompress) >> 8;
		/* Get a compression name. */
		if (folder->comptype <
		    sizeof(compression_name) / sizeof(compression_name[0]))
			folder->compname = compression_name[folder->comptype];
		else
			folder->compname = ""UNKNOWN"";
		p += 8;
		used += 8;
		if (hd->flags & RESERVE_PRESENT) {
			p += hd->cffolder;/* abReserve */
			used += hd->cffolder;
		}
		/*
		 * Sanity check if each data is acceptable.
		 */
		if (offset32 >= folder->cfdata_offset_in_cab)
			goto invalid;
		offset32 = folder->cfdata_offset_in_cab;

		/* Set a request to initialize zlib for the CFDATA of
		 * this folder. */
		folder->decompress_init = 0;
	}
	__archive_read_consume(a, used);
	cab->cab_offset += used;

	/*
	 * Read CFFILE.
	 */
	/* Seek read pointer to the offset of CFFILE if needed. */
	skip = (int64_t)hd->files_offset - cab->cab_offset;
	if (skip <  0) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid offset of CFFILE %jd < %jd"",
		    (intmax_t)hd->files_offset, (intmax_t)cab->cab_offset);
		return (ARCHIVE_FATAL);
	}
	if (skip) {
		__archive_read_consume(a, skip);
		cab->cab_offset += skip;
	}
	/* Allocate memory for CFDATA */
	hd->file_array = (struct cffile *)calloc(
	    hd->file_count, sizeof(struct cffile));
	if (hd->file_array == NULL)
		goto nomem;

	prev_folder = -1;
	for (i = 0; i < hd->file_count; i++) {
		struct cffile *file = &(hd->file_array[i]);
		ssize_t avail;

		if ((p = __archive_read_ahead(a, 16, NULL)) == NULL)
			return (truncated_error(a));
		file->uncompressed_size = archive_le32dec(p + CFFILE_cbFile);
		file->offset = archive_le32dec(p + CFFILE_uoffFolderStart);
		file->folder = archive_le16dec(p + CFFILE_iFolder);
		file->mtime = cab_dos_time(p + CFFILE_date_time);
		file->attr = (uint8_t)archive_le16dec(p + CFFILE_attribs);
		__archive_read_consume(a, 16);

		cab->cab_offset += 16;
		if ((p = cab_read_ahead_remaining(a, 256, &avail)) == NULL)
			return (truncated_error(a));
		if ((len = cab_strnlen(p, avail-1)) <= 0)
			goto invalid;

		/* Copy a pathname.  */
		archive_string_init(&(file->pathname));
		archive_strncpy(&(file->pathname), p, len);
		__archive_read_consume(a, len + 1);
		cab->cab_offset += len + 1;

		/*
		 * Sanity check if each data is acceptable.
		 */
		if (file->uncompressed_size > 0x7FFF8000)
			goto invalid;/* Too large */
		if ((int64_t)file->offset + (int64_t)file->uncompressed_size
		    > ARCHIVE_LITERAL_LL(0x7FFF8000))
			goto invalid;/* Too large */
		switch (file->folder) {
		case iFoldCONTINUED_TO_NEXT:
			/* This must be last file in a folder. */
			if (i != hd->file_count -1)
				goto invalid;
			cur_folder = hd->folder_count -1;
			break;
		case iFoldCONTINUED_PREV_AND_NEXT:
			/* This must be only one file in a folder. */
			if (hd->file_count != 1)
				goto invalid;
			/* FALL THROUGH */
		case iFoldCONTINUED_FROM_PREV:
			/* This must be first file in a folder. */
			if (i != 0)
				goto invalid;
			prev_folder = cur_folder = 0;
			offset32 = file->offset;
			break;
		default:
			if (file->folder >= hd->folder_count)
				goto invalid;
			cur_folder = file->folder;
			break;
		}
		/* Dot not back track. */
		if (cur_folder < prev_folder)
			goto invalid;
		if (cur_folder != prev_folder)
			offset32 = 0;
		prev_folder = cur_folder;

		/* Make sure there are not any blanks from last file
		 * contents. */
		if (offset32 != file->offset)
			goto invalid;
		offset32 += file->uncompressed_size;

		/* CFDATA is available for file contents. */
		if (file->uncompressed_size > 0 &&
		    hd->folder_array[cur_folder].cfdata_count == 0)
			goto invalid;
	}

	if (hd->cabinet != 0 || hd->flags & (PREV_CABINET | NEXT_CABINET)) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Multivolume cabinet file is unsupported"");
		return (ARCHIVE_WARN);
	}
	return (ARCHIVE_OK);
invalid:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid CAB header"");
	return (ARCHIVE_FATAL);
nomem:
	archive_set_error(&a->archive, ENOMEM,
	    ""Can't allocate memory for CAB data"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1644.cpp,"[43, 0, 2, 0, 3, 0, 16, 1, 3, 1, 49, 2, 20, 0, 1, 633, 0, 0, 13, 16, 0, 0, 4, 77, 0, 0, 0, 0, 5, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 385, 0, 266, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 15, 0, 46, 43, 2, 0, 60, 0, 0, 76, 0, 104, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1644.cpp,261
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,977,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1645.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1645.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1645.cpp,87
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,981,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1646.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(sconv));
		err = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1646.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1646.cpp,91
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1007,"sprintf(cab->format_name, ""CAB %d.%d (%s)"",
	    hd->major, hd->minor, cab->entry_cffolder->compname);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1647.cpp,"{
	struct cab *cab;
	struct cfheader *hd;
	struct cffolder *prev_folder;
	struct cffile *file;
	struct archive_string_conv *sconv;
	int err = ARCHIVE_OK, r;
	
	cab = (struct cab *)(a->format->data);
	if (cab->found_header == 0) {
		err = cab_read_header(a); 
		if (err < ARCHIVE_WARN)
			return (err);
		/* We've found the header. */
		cab->found_header = 1;
	}
	hd = &cab->cfheader;

	if (hd->file_index >= hd->file_count) {
		cab->end_of_archive = 1;
		return (ARCHIVE_EOF);
	}
	file = &hd->file_array[hd->file_index++];

	cab->end_of_entry = 0;
	cab->end_of_entry_cleanup = 0;
	cab->entry_compressed_bytes_read = 0;
	cab->entry_uncompressed_bytes_read = 0;
	cab->entry_unconsumed = 0;
	cab->entry_cffile = file;

	/*
	 * Choose a proper folder.
	 */
	prev_folder = cab->entry_cffolder;
	switch (file->folder) {
	case iFoldCONTINUED_FROM_PREV:
	case iFoldCONTINUED_PREV_AND_NEXT:
		cab->entry_cffolder = &hd->folder_array[0];
		break;
	case iFoldCONTINUED_TO_NEXT:
		cab->entry_cffolder = &hd->folder_array[hd->folder_count-1];
		break;
	default:
		cab->entry_cffolder = &hd->folder_array[file->folder];
		break;
	}
	/* If a cffolder of this file is changed, reset a cfdata to read
	 * file contents from next cfdata. */
	if (prev_folder != cab->entry_cffolder)
		cab->entry_cfdata = NULL;

	/* If a pathname is UTF-8, prepare a string conversion object
	 * for UTF-8 and use it. */
	if (file->attr & ATTR_NAME_IS_UTF) {
		if (cab->sconv_utf8 == NULL) {
			cab->sconv_utf8 =
			    archive_string_conversion_from_charset(
				&(a->archive), ""UTF-8"", 1);
			if (cab->sconv_utf8 == NULL)
				return (ARCHIVE_FATAL);
		}
		sconv = cab->sconv_utf8;
	} else if (cab->sconv != NULL) {
		/* Choose the conversion specified by the option. */
		sconv = cab->sconv;
	} else {
		/* Choose the default conversion. */
		if (!cab->init_default_conversion) {
			cab->sconv_default =
			    archive_string_default_conversion_for_read(
			      &(a->archive));
			cab->init_default_conversion = 1;
		}
		sconv = cab->sconv_default;
	}

	/*
	 * Set a default value and common data
	 */
	r = cab_convert_path_separator_1(&(file->pathname), file->attr);
	if (archive_entry_copy_pathname_l(entry, file->pathname.s,
	    archive_strlen(&(file->pathname)), sconv) != 0) {
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(sconv));
		err = ARCHIVE_WARN;
	}
	if (r < 0) {
		/* Convert a path separator '\' -> '/' */
		cab_convert_path_separator_2(cab, entry);
	}

	archive_entry_set_size(entry, file->uncompressed_size);
	if (file->attr & ATTR_RDONLY)
		archive_entry_set_mode(entry, AE_IFREG | 0555);
	else
		archive_entry_set_mode(entry, AE_IFREG | 0666);
	archive_entry_set_mtime(entry, file->mtime, 0);

	cab->entry_bytes_remaining = file->uncompressed_size;
	cab->entry_offset = 0;
	/* We don't need compress data. */
	if (file->uncompressed_size == 0)
		cab->end_of_entry_cleanup = cab->end_of_entry = 1;

	/* Set up a more descriptive format name. */
	sprintf(cab->format_name, ""CAB %d.%d (%s)"",
	    hd->major, hd->minor, cab->entry_cffolder->compname);
	a->archive.archive_format_name = cab->format_name;

	return (err);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1647.cpp,"[14, 0, 0, 0, 3, 0, 5, 1, 3, 1, 18, 0, 0, 0, 0, 273, 0, 0, 6, 7, 0, 0, 1, 25, 0, 0, 0, 0, 5, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 0, 15, 14, 2, 0, 15, 0, 0, 37, 1, 36, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1647.cpp,117
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1029,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Cannot restore this file split in multivolume."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1648.cpp,"{
	case iFoldCONTINUED_FROM_PREV:
	case iFoldCONTINUED_TO_NEXT:
	case iFoldCONTINUED_PREV_AND_NEXT:
		*buff = NULL;
		*size = 0;
		*offset = 0;
		archive_clear_error(&a->archive);
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Cannot restore this file split in multivolume."");
		return (ARCHIVE_FAILED);
	default:
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1648.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 3, 1, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 5, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1648.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1182,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Checksum error CFDATA[%d] %x:%x in %d bytes"",
		    cab->entry_cffolder->cfdata_index -1,
		    cfdata->sum, cfdata->sum_calculated,
		    cfdata->compressed_size);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1649.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Checksum error CFDATA[%d] %x:%x in %d bytes"",
		    cab->entry_cffolder->cfdata_index -1,
		    cfdata->sum, cfdata->sum_calculated,
		    cfdata->compressed_size);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1649.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1649.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1227,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid offset of CFDATA in folder(%d) %jd < %jd"",
			    folder_index,
			    (intmax_t)cab->entry_cffolder->cfdata_offset_in_cab,
			    (intmax_t)cab->cab_offset);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1650.cpp,"{
			int folder_index;
			switch (cab->entry_cffile->folder) {
			case iFoldCONTINUED_FROM_PREV:
			case iFoldCONTINUED_PREV_AND_NEXT:
				folder_index = 0;
				break;
			case iFoldCONTINUED_TO_NEXT:
				folder_index = cab->cfheader.folder_count-1;
				break;
			default:
				folder_index = cab->entry_cffile->folder;
				break;
			}
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid offset of CFDATA in folder(%d) %jd < %jd"",
			    folder_index,
			    (intmax_t)cab->entry_cffolder->cfdata_offset_in_cab,
			    (intmax_t)cab->cab_offset);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1650.cpp,"[0, 0, 0, 0, 3, 0, 1, 1, 3, 1, 2, 0, 0, 0, 0, 36, 0, 0, 1, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1650.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1310,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for CAB data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1651.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for CAB data"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1651.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1651.cpp,115
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1335,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid CFDATA"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1652.cpp,"{
	struct cab *cab = (struct cab *)(a->format->data);
	struct cfdata *cfdata = cab->entry_cfdata;

	/* There are remaining bytes in current CFDATA, use it first. */
	if (cfdata != NULL && cfdata->uncompressed_bytes_remaining > 0)
		return (ARCHIVE_OK);

	if (cfdata == NULL) {
		int64_t skip;

		cab->entry_cffolder->cfdata_index = 0;

		/* Seek read pointer to the offset of CFDATA if needed. */
		skip = cab->entry_cffolder->cfdata_offset_in_cab
			- cab->cab_offset;
		if (skip < 0) {
			int folder_index;
			switch (cab->entry_cffile->folder) {
			case iFoldCONTINUED_FROM_PREV:
			case iFoldCONTINUED_PREV_AND_NEXT:
				folder_index = 0;
				break;
			case iFoldCONTINUED_TO_NEXT:
				folder_index = cab->cfheader.folder_count-1;
				break;
			default:
				folder_index = cab->entry_cffile->folder;
				break;
			}
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid offset of CFDATA in folder(%d) %jd < %jd"",
			    folder_index,
			    (intmax_t)cab->entry_cffolder->cfdata_offset_in_cab,
			    (intmax_t)cab->cab_offset);
			return (ARCHIVE_FATAL);
		}
		if (skip > 0) {
			if (__archive_read_consume(a, skip) < 0)
				return (ARCHIVE_FATAL);
			cab->cab_offset =
			    cab->entry_cffolder->cfdata_offset_in_cab;
		}
	}

	/*
	 * Read a CFDATA.
	 */
	if (cab->entry_cffolder->cfdata_index <
	    cab->entry_cffolder->cfdata_count) {
		const unsigned char *p;
		int l;

		cfdata = &(cab->entry_cffolder->cfdata);
		cab->entry_cffolder->cfdata_index++;
		cab->entry_cfdata = cfdata;
		cfdata->sum_calculated = 0;
		cfdata->sum_extra_avail = 0;
		cfdata->sum_ptr = NULL;
		l = 8;
		if (cab->cfheader.flags & RESERVE_PRESENT)
			l += cab->cfheader.cfdata;
		if ((p = __archive_read_ahead(a, l, NULL)) == NULL)
			return (truncated_error(a));
		cfdata->sum = archive_le32dec(p + CFDATA_csum);
		cfdata->compressed_size = archive_le16dec(p + CFDATA_cbData);
		cfdata->compressed_bytes_remaining = cfdata->compressed_size;
		cfdata->uncompressed_size =
		    archive_le16dec(p + CFDATA_cbUncomp);
		cfdata->uncompressed_bytes_remaining =
		    cfdata->uncompressed_size;
		cfdata->uncompressed_avail = 0;
		cfdata->read_offset = 0;
		cfdata->unconsumed = 0;

		/*
		 * Sanity check if data size is acceptable.
		 */
		if (cfdata->compressed_size == 0 ||
		    cfdata->compressed_size > (0x8000+6144))
			goto invalid;
		if (cfdata->uncompressed_size > 0x8000)
			goto invalid;
		if (cfdata->uncompressed_size == 0) {
			switch (cab->entry_cffile->folder) {
			case iFoldCONTINUED_PREV_AND_NEXT:
			case iFoldCONTINUED_TO_NEXT:
				break;
			case iFoldCONTINUED_FROM_PREV:
			default:
				goto invalid;
			}
		}
		/* If CFDATA is not last in a folder, an uncompressed
		 * size must be 0x8000(32KBi) */
		if ((cab->entry_cffolder->cfdata_index <
		     cab->entry_cffolder->cfdata_count) &&
		       cfdata->uncompressed_size != 0x8000)
			goto invalid;

		/* A compressed data size and an uncompressed data size must
		 * be the same in no compression mode. */
		if (cab->entry_cffolder->comptype == COMPTYPE_NONE &&
		    cfdata->compressed_size != cfdata->uncompressed_size)
			goto invalid;

		/*
		 * Save CFDATA image for sum check.
		 */
		if (cfdata->memimage_size < (size_t)l) {
			free(cfdata->memimage);
			cfdata->memimage = malloc(l);
			if (cfdata->memimage == NULL) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for CAB data"");
				return (ARCHIVE_FATAL);
			}
			cfdata->memimage_size = l;
		}
		memcpy(cfdata->memimage, p, l);

		/* Consume bytes as much as we used. */
		__archive_read_consume(a, l);
		cab->cab_offset += l;
	} else if (cab->entry_cffolder->cfdata_count > 0) {
		/* Run out of all CFDATA in a folder. */
		cfdata->compressed_size = 0;
		cfdata->uncompressed_size = 0;
		cfdata->compressed_bytes_remaining = 0;
		cfdata->uncompressed_bytes_remaining = 0;
	} else {
		/* Current folder does not have any CFDATA. */
		cfdata = &(cab->entry_cffolder->cfdata);
		cab->entry_cfdata = cfdata;
		memset(cfdata, 0, sizeof(*cfdata));
	}
	return (ARCHIVE_OK);
invalid:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Invalid CFDATA"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1652.cpp,"[16, 0, 0, 0, 4, 0, 7, 2, 6, 2, 20, 1, 5, 0, 1, 304, 0, 0, 6, 6, 0, 0, 2, 28, 0, 0, 0, 0, 3, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 0, 103, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 18, 16, 1, 0, 15, 0, 0, 38, 1, 32, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1652.cpp,140
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1363,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported CAB compression : %s"",
		    cab->entry_cffolder->compname);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1653.cpp,"{
	case COMPTYPE_NONE:
		return (cab_read_ahead_cfdata_none(a, avail));
	case COMPTYPE_MSZIP:
		return (cab_read_ahead_cfdata_deflate(a, avail));
	case COMPTYPE_LZX:
		return (cab_read_ahead_cfdata_lzx(a, avail));
	default: /* Unsupported compression. */
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported CAB compression : %s"",
		    cab->entry_cffolder->compname);
		*avail = ARCHIVE_FAILED;
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1653.cpp,"[0, 0, 0, 0, 0, 0, 4, 0, 3, 1, 1, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1653.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1423,"archive_set_error(&a->archive, ENOMEM,
			    ""No memory for CAB reader"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1654.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""No memory for CAB reader"");
			*avail = ARCHIVE_FATAL;
			return (NULL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1654.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1654.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1450,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize deflate decompression."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1655.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize deflate decompression."");
			*avail = ARCHIVE_FATAL;
			return (NULL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1655.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1655.cpp,44
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1549,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid uncompressed size (%d < %d)"",
		    uavail, cfdata->uncompressed_size);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1656.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid uncompressed size (%d < %d)"",
		    uavail, cfdata->uncompressed_size);
		*avail = ARCHIVE_FATAL;
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1656.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1656.cpp,143
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1606,"archive_set_error(&a->archive, ENOMEM,
		    ""Out of memory for deflate decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1657.cpp,"{
	case Z_MEM_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Out of memory for deflate decompression"");
		break;
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Deflate decompression failed (%d)"", r);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1657.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1657.cpp,200
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1610,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Deflate decompression failed (%d)"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1658.cpp,"{
	case Z_MEM_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Out of memory for deflate decompression"");
		break;
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Deflate decompression failed (%d)"", r);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1658.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1658.cpp,204
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1617,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""CFDATA incorrect(no MSZIP signature)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1659.cpp,"{
	struct cab *cab = (struct cab *)(a->format->data);
	struct cfdata *cfdata;
	const void *d;
	int r, mszip;
	uint16_t uavail;
	char eod = 0;

	cfdata = cab->entry_cfdata;
	/* If the buffer hasn't been allocated, allocate it now. */
	if (cab->uncompressed_buffer == NULL) {
		cab->uncompressed_buffer_size = 0x8000;
		cab->uncompressed_buffer
		    = (unsigned char *)malloc(cab->uncompressed_buffer_size);
		if (cab->uncompressed_buffer == NULL) {
			archive_set_error(&a->archive, ENOMEM,
			    ""No memory for CAB reader"");
			*avail = ARCHIVE_FATAL;
			return (NULL);
		}
	}

	uavail = cfdata->uncompressed_avail;
	if (uavail == cfdata->uncompressed_size) {
		d = cab->uncompressed_buffer + cfdata->read_offset;
		*avail = uavail - cfdata->read_offset;
		return (d);
	}

	if (!cab->entry_cffolder->decompress_init) {
		cab->stream.next_in = NULL;
		cab->stream.avail_in = 0;
		cab->stream.total_in = 0;
		cab->stream.next_out = NULL;
		cab->stream.avail_out = 0;
		cab->stream.total_out = 0;
		if (cab->stream_valid)
			r = inflateReset(&cab->stream);
		else
			r = inflateInit2(&cab->stream,
			    -15 /* Don't check for zlib header */);
		if (r != Z_OK) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize deflate decompression."");
			*avail = ARCHIVE_FATAL;
			return (NULL);
		}
		/* Stream structure has been set up. */
		cab->stream_valid = 1;
		/* We've initialized decompression for this stream. */
		cab->entry_cffolder->decompress_init = 1;
	}

	if (cfdata->compressed_bytes_remaining == cfdata->compressed_size)
		mszip = 2;
	else
		mszip = 0;
	eod = 0;
	cab->stream.total_out = uavail;
	/*
	 * We always uncompress all data in current CFDATA.
	 */
	while (!eod && cab->stream.total_out < cfdata->uncompressed_size) {
		ssize_t bytes_avail;

		cab->stream.next_out =
		    cab->uncompressed_buffer + cab->stream.total_out;
		cab->stream.avail_out =
		    cfdata->uncompressed_size - cab->stream.total_out;

		d = __archive_read_ahead(a, 1, &bytes_avail);
		if (bytes_avail <= 0) {
			*avail = truncated_error(a);
			return (NULL);
		}
		if (bytes_avail > cfdata->compressed_bytes_remaining)
			bytes_avail = cfdata->compressed_bytes_remaining;
		/*
		 * A bug in zlib.h: stream.next_in should be marked 'const'
		 * but isn't (the library never alters data through the
		 * next_in pointer, only reads it).  The result: this ugly
		 * cast to remove 'const'.
		 */
		cab->stream.next_in = (Bytef *)(uintptr_t)d;
		cab->stream.avail_in = (uInt)bytes_avail;
		cab->stream.total_in = 0;

		/* Cut out a tow-byte MSZIP signature(0x43, 0x4b). */
		if (mszip > 0) {
			if (bytes_avail <= 0)
				goto nomszip;
			if (bytes_avail <= mszip) {
				if (mszip == 2) {
					if (cab->stream.next_in[0] != 0x43)
						goto nomszip;
					if (bytes_avail > 1 &&
					    cab->stream.next_in[1] != 0x4b)
						goto nomszip;
				} else if (cab->stream.next_in[0] != 0x4b)
					goto nomszip;
				cfdata->unconsumed = bytes_avail;
				cfdata->sum_ptr = d;
				if (cab_minimum_consume_cfdata(
				    a, cfdata->unconsumed) < 0) {
					*avail = ARCHIVE_FATAL;
					return (NULL);
				}
				mszip -= (int)bytes_avail;
				continue;
			}
			if (mszip == 1 && cab->stream.next_in[0] != 0x4b)
				goto nomszip;
			else if (cab->stream.next_in[0] != 0x43 ||
			    cab->stream.next_in[1] != 0x4b)
				goto nomszip;
			cab->stream.next_in += mszip;
			cab->stream.avail_in -= mszip;
			cab->stream.total_in += mszip;
			mszip = 0;
		}

		r = inflate(&cab->stream, 0);
		switch (r) {
		case Z_OK:
			break;
		case Z_STREAM_END:
			eod = 1;
			break;
		default:
			goto zlibfailed;
		}
		cfdata->unconsumed = cab->stream.total_in;
		cfdata->sum_ptr = d;
		if (cab_minimum_consume_cfdata(a, cfdata->unconsumed) < 0) {
			*avail = ARCHIVE_FATAL;
			return (NULL);
		}
	}
	uavail = (uint16_t)cab->stream.total_out;

	if (uavail < cfdata->uncompressed_size) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid uncompressed size (%d < %d)"",
		    uavail, cfdata->uncompressed_size);
		*avail = ARCHIVE_FATAL;
		return (NULL);
	}

	/*
	 * Note: I suspect there is a bug in makecab.exe because, in rare
	 * case, compressed bytes are still remaining regardless we have
	 * gotten all uncompressed bytes, which size is recorded in CFDATA,
	 * as much as we need, and we have to use the garbage so as to
	 * correctly compute the sum of CFDATA accordingly.
	 */
	if (cfdata->compressed_bytes_remaining > 0) {
		ssize_t bytes_avail;

		d = __archive_read_ahead(a, cfdata->compressed_bytes_remaining,
		    &bytes_avail);
		if (bytes_avail <= 0) {
			*avail = truncated_error(a);
			return (NULL);
		}
		cfdata->unconsumed = cfdata->compressed_bytes_remaining;
		cfdata->sum_ptr = d;
		if (cab_minimum_consume_cfdata(a, cfdata->unconsumed) < 0) {
			*avail = ARCHIVE_FATAL;
			return (NULL);
		}
	}

	/*
	 * Set dictionary data for decompressing of next CFDATA, which
	 * in the same folder. This is why we always do decompress CFDATA
	 * even if beginning CFDATA or some of CFDATA are not used in
	 * skipping file data.
	 */
	if (cab->entry_cffolder->cfdata_index <
	    cab->entry_cffolder->cfdata_count) {
		r = inflateReset(&cab->stream);
		if (r != Z_OK)
			goto zlibfailed;
		r = inflateSetDictionary(&cab->stream,
		    cab->uncompressed_buffer, cfdata->uncompressed_size);
		if (r != Z_OK)
			goto zlibfailed;
	}

	d = cab->uncompressed_buffer + cfdata->read_offset;
	*avail = uavail - cfdata->read_offset;
	cfdata->uncompressed_avail = uavail;

	return (d);

zlibfailed:
	switch (r) {
	case Z_MEM_ERROR:
		archive_set_error(&a->archive, ENOMEM,
		    ""Out of memory for deflate decompression"");
		break;
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Deflate decompression failed (%d)"", r);
		break;
	}
	*avail = ARCHIVE_FATAL;
	return (NULL);
nomszip:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""CFDATA incorrect(no MSZIP signature)"");
	*avail = ARCHIVE_FATAL;
	return (NULL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1659.cpp,"[27, 1, 0, 0, 4, 1, 12, 2, 3, 2, 33, 2, 9, 0, 1, 446, 0, 0, 8, 9, 0, 0, 2, 46, 0, 0, 0, 0, 3, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 280, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 6, 0, 30, 27, 2, 0, 19, 0, 0, 63, 2, 45, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1659.cpp,211
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1629,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""libarchive compiled without deflate support (no libz)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1660.cpp,"{
	*avail = ARCHIVE_FATAL;
	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""libarchive compiled without deflate support (no libz)"");
	return (NULL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1660.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1660.cpp,4
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1652,"archive_set_error(&a->archive, ENOMEM,
			    ""No memory for CAB reader"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1661.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""No memory for CAB reader"");
			*avail = ARCHIVE_FATAL;
			return (NULL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1661.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1661.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1670,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize LZX decompression."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1662.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize LZX decompression."");
			*avail = ARCHIVE_FATAL;
			return (NULL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1662.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1662.cpp,34
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1692,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated CAB file data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1663.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated CAB file data"");
			*avail = ARCHIVE_FATAL;
			return (NULL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1663.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1663.cpp,56
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1711,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""LZX decompression failed (%d)"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1664.cpp,"{
		case ARCHIVE_OK:
		case ARCHIVE_EOF:
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""LZX decompression failed (%d)"", r);
			*avail = ARCHIVE_FATAL;
			return (NULL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1664.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1664.cpp,75
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1785,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid CFDATA"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1665.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid CFDATA"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1665.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1665.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.cpp,1940,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT, ""Invalid CFDATA"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1666.cpp,"{
			/* All of CFDATA in a folder has been handled. */
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT, ""Invalid CFDATA"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1666.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1666.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio_newc.cpp,120,"archive_set_error(&a->archive, ENOMEM, ""Can't allocate cpio data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1667.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Can't allocate cpio data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1667.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1667.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio_newc.cpp,145,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: hdrcharset option needs a character-set name"",
			    a->format_name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1668.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: hdrcharset option needs a character-set name"",
			    a->format_name)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1668.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1668.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio_newc.cpp,192,"archive_set_error(&a->archive, -1, ""Filetype required"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1669.cpp,"{
		archive_set_error(&a->archive, -1, ""Filetype required"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1669.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1669.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio_newc.cpp,198,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1670.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for Pathname"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1670.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1670.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio_newc.cpp,203,"archive_set_error(&a->archive, -1, ""Pathname required"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1671.cpp,"{
		archive_set_error(&a->archive, -1, ""Pathname required"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1671.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1671.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio_newc.cpp,209,"archive_set_error(&a->archive, -1, ""Size required"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1672.cpp,"{
		archive_set_error(&a->archive, -1, ""Size required"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1672.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1672.cpp,24
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio_newc.cpp,237,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate ustar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1673.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate ustar data"");
		return(ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1673.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1673.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio_newc.cpp,252,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1674.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			ret_final = ARCHIVE_FATAL;
			goto exit_write_header;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1674.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1674.cpp,37
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio_newc.cpp,257,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate pathname '%s' to %s"",
		    archive_entry_pathname(entry),
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1675.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			ret_final = ARCHIVE_FATAL;
			goto exit_write_header;
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate pathname '%s' to %s"",
		    archive_entry_pathname(entry),
		    archive_string_conversion_charset_name(sconv));
		ret_final = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1675.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1675.cpp,42
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio_newc.cpp,274,"archive_set_error(&a->archive, ERANGE,
		    ""large inode number truncated"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1676.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""large inode number truncated"");
		ret_final = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1676.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1676.cpp,59
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio_newc.cpp,305,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Likname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1677.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Likname"");
			ret_final = ARCHIVE_FATAL;
			goto exit_write_header;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1677.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1677.cpp,90
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio_newc.cpp,310,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate linkname '%s' to %s"",
		    archive_entry_symlink(entry),
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1678.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Likname"");
			ret_final = ARCHIVE_FATAL;
			goto exit_write_header;
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate linkname '%s' to %s"",
		    archive_entry_symlink(entry),
		    archive_string_conversion_charset_name(sconv));
		ret_final = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1678.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1678.cpp,95
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio_newc.cpp,323,"archive_set_error(&a->archive, ERANGE,
		    ""File is too large for this format."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1679.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""File is too large for this format."");
		ret_final = ARCHIVE_FAILED;
		goto exit_write_header;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1679.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1679.cpp,108
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,157,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal: template_header wrong size: %zu should be 512"",
		    sizeof(template_header));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1680.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal: template_header wrong size: %zu should be 512"",
		    sizeof(template_header));
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1680.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1680.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,165,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate v7tar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1681.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate v7tar data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1681.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1681.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,191,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: hdrcharset option needs a character-set name"",
			    a->format_name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1682.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: hdrcharset option needs a character-set name"",
			    a->format_name)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1682.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1682.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,236,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't record entry in tar file without pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1683.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't record entry in tar file without pathname"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1683.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1683.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,265,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate v7tar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1684.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate v7tar data"");
				archive_wstring_free(&ws);
				return(ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1684.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1684.cpp,54
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,293,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate v7tar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1685.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate v7tar data"");
				archive_string_free(&as);
				return(ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1685.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1685.cpp,82
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,319,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate v7tar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1686.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate v7tar data"");
		return(ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1686.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1686.cpp,108
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,389,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1687.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1687.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1687.cpp,28
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,393,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate pathname '%s' to %s"",
		    pp, archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1688.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate pathname '%s' to %s"",
		    pp, archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1688.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1688.cpp,32
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,404,"archive_set_error(&a->archive, ENAMETOOLONG,
		    ""Pathname too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1689.cpp,"{
		/* Prefix is too long. */
		archive_set_error(&a->archive, ENAMETOOLONG,
		    ""Pathname too long"");
		ret = ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1689.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1689.cpp,43
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,412,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1690.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1690.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1690.cpp,51
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,416,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate linkname '%s' to %s"",
		    p, archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1691.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate linkname '%s' to %s"",
		    p, archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1691.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1691.cpp,55
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,428,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1692.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1692.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1692.cpp,67
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,432,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate linkname '%s' to %s"",
			    p, archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1693.cpp,"{
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate linkname '%s' to %s"",
			    p, archive_string_conversion_charset_name(sconv));
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1693.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1693.cpp,71
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,441,"archive_set_error(&a->archive, ENAMETOOLONG,
			    ""Link contents too long"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1694.cpp,"{
			archive_set_error(&a->archive, ENAMETOOLONG,
			    ""Link contents too long"");
			ret = ARCHIVE_FAILED;
			copy_length = V7TAR_linkname_size;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1694.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1694.cpp,80
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,452,"archive_set_error(&a->archive, ERANGE,
		    ""Numeric mode too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1695.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""Numeric mode too large"");
		ret = ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1695.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1695.cpp,91
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,459,"archive_set_error(&a->archive, ERANGE,
		    ""Numeric user ID too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1696.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""Numeric user ID too large"");
		ret = ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1696.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1696.cpp,98
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,466,"archive_set_error(&a->archive, ERANGE,
		    ""Numeric group ID too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1697.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""Numeric group ID too large"");
		ret = ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1697.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1697.cpp,105
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,474,"archive_set_error(&a->archive, ERANGE,
		    ""File size out of range"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1698.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""File size out of range"");
		ret = ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1698.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1698.cpp,113
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,482,"archive_set_error(&a->archive, ERANGE,
		    ""File modification time too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1699.cpp,"{
		archive_set_error(&a->archive, ERANGE,
		    ""File modification time too large"");
		ret = ARCHIVE_FAILED;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1699.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1699.cpp,121
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,497,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive character device"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1700.cpp,"{
		case AE_IFREG: case AE_IFDIR:
			break;
		case AE_IFLNK:
			h[V7TAR_typeflag_offset] = '2';
			break;
		case AE_IFCHR:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive character device"");
			return (ARCHIVE_FAILED);
		case AE_IFBLK:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive block device"");
			return (ARCHIVE_FAILED);
		case AE_IFIFO:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive fifo"");
			return (ARCHIVE_FAILED);
		case AE_IFSOCK:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive socket"");
			return (ARCHIVE_FAILED);
		default:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive this (mode=0%lo)"",
			    (unsigned long)archive_entry_mode(entry));
			ret = ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1700.cpp,"[0, 0, 0, 0, 2, 0, 4, 0, 7, 1, 1, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 6, 0, 0, 7, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1700.cpp,136
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,502,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive block device"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1701.cpp,"{
		case AE_IFREG: case AE_IFDIR:
			break;
		case AE_IFLNK:
			h[V7TAR_typeflag_offset] = '2';
			break;
		case AE_IFCHR:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive character device"");
			return (ARCHIVE_FAILED);
		case AE_IFBLK:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive block device"");
			return (ARCHIVE_FAILED);
		case AE_IFIFO:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive fifo"");
			return (ARCHIVE_FAILED);
		case AE_IFSOCK:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive socket"");
			return (ARCHIVE_FAILED);
		default:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive this (mode=0%lo)"",
			    (unsigned long)archive_entry_mode(entry));
			ret = ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1701.cpp,"[0, 0, 0, 0, 2, 0, 4, 0, 7, 1, 1, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 6, 0, 0, 7, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1701.cpp,141
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,507,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive fifo"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1702.cpp,"{
		case AE_IFREG: case AE_IFDIR:
			break;
		case AE_IFLNK:
			h[V7TAR_typeflag_offset] = '2';
			break;
		case AE_IFCHR:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive character device"");
			return (ARCHIVE_FAILED);
		case AE_IFBLK:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive block device"");
			return (ARCHIVE_FAILED);
		case AE_IFIFO:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive fifo"");
			return (ARCHIVE_FAILED);
		case AE_IFSOCK:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive socket"");
			return (ARCHIVE_FAILED);
		default:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive this (mode=0%lo)"",
			    (unsigned long)archive_entry_mode(entry));
			ret = ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1702.cpp,"[0, 0, 0, 0, 2, 0, 4, 0, 7, 1, 1, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 6, 0, 0, 7, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1702.cpp,146
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,512,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive socket"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1703.cpp,"{
		case AE_IFREG: case AE_IFDIR:
			break;
		case AE_IFLNK:
			h[V7TAR_typeflag_offset] = '2';
			break;
		case AE_IFCHR:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive character device"");
			return (ARCHIVE_FAILED);
		case AE_IFBLK:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive block device"");
			return (ARCHIVE_FAILED);
		case AE_IFIFO:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive fifo"");
			return (ARCHIVE_FAILED);
		case AE_IFSOCK:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive socket"");
			return (ARCHIVE_FAILED);
		default:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive this (mode=0%lo)"",
			    (unsigned long)archive_entry_mode(entry));
			ret = ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1703.cpp,"[0, 0, 0, 0, 2, 0, 4, 0, 7, 1, 1, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 6, 0, 0, 7, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1703.cpp,151
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.cpp,517,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive this (mode=0%lo)"",
			    (unsigned long)archive_entry_mode(entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1704.cpp,"{
		case AE_IFREG: case AE_IFDIR:
			break;
		case AE_IFLNK:
			h[V7TAR_typeflag_offset] = '2';
			break;
		case AE_IFCHR:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive character device"");
			return (ARCHIVE_FAILED);
		case AE_IFBLK:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive block device"");
			return (ARCHIVE_FAILED);
		case AE_IFIFO:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive fifo"");
			return (ARCHIVE_FAILED);
		case AE_IFSOCK:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive socket"");
			return (ARCHIVE_FAILED);
		default:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive this (mode=0%lo)"",
			    (unsigned long)archive_entry_mode(entry));
			ret = ARCHIVE_FAILED;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1704.cpp,"[0, 0, 0, 0, 2, 0, 4, 0, 7, 1, 1, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 6, 0, 0, 7, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1704.cpp,156
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,108,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate ar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1705.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate ar data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1705.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1705.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,179,"archive_set_error(&a->archive, EINVAL,
		    ""Incorrect file header signature"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1706.cpp,"{
		archive_set_error(&a->archive, EINVAL,
		    ""Incorrect file header signature"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1706.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1706.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,245,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Found entry with empty filename"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1707.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Found entry with empty filename"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1707.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1707.cpp,79
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,262,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Filename table too large"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1708.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Filename table too large"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1708.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1708.cpp,96
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,268,"archive_set_error(&a->archive, EINVAL,
			    ""Invalid string table"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1709.cpp,"{
			archive_set_error(&a->archive, EINVAL,
			    ""Invalid string table"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1709.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1709.cpp,102
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,273,"archive_set_error(&a->archive, EINVAL,
			    ""More than one string tables exist"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1710.cpp,"{
			archive_set_error(&a->archive, EINVAL,
			    ""More than one string tables exist"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1710.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1710.cpp,107
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,281,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate filename table buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1711.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate filename table buffer"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1711.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1711.cpp,115
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,318,"archive_set_error(&a->archive, EINVAL,
			    ""Can't find long filename for GNU/SVR4 archive entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1712.cpp,"{
			archive_set_error(&a->archive, EINVAL,
			    ""Can't find long filename for GNU/SVR4 archive entry"");
			archive_entry_copy_pathname(entry, filename);
			/* Parse the time, owner, mode, size fields. */
			ar_parse_common_header(ar, entry, h);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1712.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1712.cpp,152
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,351,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Bad input file size"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1713.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Bad input file size"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1713.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1713.cpp,185
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,367,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated input file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1714.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated input file"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1714.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1714.cpp,201
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,374,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate fname buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1715.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate fname buffer"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1715.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1715.cpp,208
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,495,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated ar archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1716.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated ar archive"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1716.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1716.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,516,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
					""Truncated ar archive- failed consuming padding"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1717.cpp,"{
				archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
					""Truncated ar archive- failed consuming padding"");
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1717.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1717.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.cpp,580,"archive_set_error(&a->archive, EINVAL,
	    ""Invalid string table"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1718.cpp,"{
	struct ar *ar;
	char *p;
	size_t size;

	ar = (struct ar*)(a->format->data);
	size = ar->strtab_size;

	for (p = ar->strtab; p < ar->strtab + size - 1; ++p) {
		if (*p == '/') {
			*p++ = '\0';
			if (*p != '\n')
				goto bad_string_table;
			*p = '\0';
		}
	}
	/*
	 * GNU ar always pads the table to an even size.
	 * The pad character is either '\n' or '`'.
	 */
	if (p != ar->strtab + size && *p != '\n' && *p != '`')
		goto bad_string_table;

	/* Enforce zero termination. */
	ar->strtab[size - 1] = '\0';

	return (ARCHIVE_OK);

bad_string_table:
	archive_set_error(&a->archive, EINVAL,
	    ""Invalid string table"");
	free(ar->strtab);
	ar->strtab = NULL;
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1718.cpp,"[3, 0, 1, 0, 0, 0, 2, 0, 0, 0, 5, 1, 2, 0, 0, 61, 0, 0, 3, 3, 0, 0, 1, 10, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 4, 3, 0, 0, 2, 0, 0, 8, 0, 4, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1718.cpp,31
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,141,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate pax data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1719.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate pax data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1719.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1719.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,173,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""pax: hdrcharset option needs a character-set name"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1720.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""pax: hdrcharset option needs a character-set name"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1720.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1720.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,198,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""pax: invalid charset name"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1721.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""pax: invalid charset name"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1721.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1721.cpp,38
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,390,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1722.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1722.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1722.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,412,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1723.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1723.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1723.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,430,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1724.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1724.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1724.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,448,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Uname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1725.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Uname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1725.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1725.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,466,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Gname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1726.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Gname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1726.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1726.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,484,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1727.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1727.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1727.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,516,"archive_set_error(&a->archive, ENOMEM, ""%s %s"",
			    ""Can't allocate memory for "", attr);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1728.cpp,"{
			archive_set_error(&a->archive, ENOMEM, ""%s %s"",
			    ""Can't allocate memory for "", attr);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1728.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1728.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,520,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT, ""%s %s %s"",
		    ""Can't translate "", attr, "" to UTF-8"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1729.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM, ""%s %s"",
			    ""Can't allocate memory for "", attr);
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT, ""%s %s %s"",
		    ""Can't translate "", attr, "" to UTF-8"");
		return(ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1729.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1729.cpp,26
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,574,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			  ""Can't record entry in tar file without pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1730.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			  ""Can't record entry in tar file without pathname"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1730.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1730.cpp,34
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,607,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate linkname '%s' to %s"", hardlink,
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1731.cpp,"{
		r = get_entry_hardlink(a, entry_original, &hardlink,
		    &hardlink_length, NULL);
		if (r == ARCHIVE_FATAL)
			return (r);
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate linkname '%s' to %s"", hardlink,
		    archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
		sconv = NULL;/* The header charset switches to binary mode. */
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1731.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1731.cpp,67
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,640,"archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate pax data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1732.cpp,"{
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate pax data"");
					archive_wstring_free(&ws);
					return(ARCHIVE_FATAL);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1732.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1732.cpp,100
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,669,"archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate pax data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1733.cpp,"{
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate pax data"");
					archive_string_free(&as);
					return(ARCHIVE_FATAL);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1733.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1733.cpp,129
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,692,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive socket"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1734.cpp,"{
		case AE_IFBLK:
		case AE_IFCHR:
		case AE_IFIFO:
		case AE_IFLNK:
		case AE_IFREG:
			break;
		case AE_IFDIR:
		{
			/*
			 * Ensure a trailing '/'.  Modify the original
			 * entry so the client sees the change.
			 */
#if defined(_WIN32) && !defined(__CYGWIN__)
			const wchar_t *wp;

			wp = archive_entry_pathname_w(entry_original);
			if (wp != NULL && wp[wcslen(wp) -1] != L'/') {
				struct archive_wstring ws;

				archive_string_init(&ws);
				path_length = wcslen(wp);
				if (archive_wstring_ensure(&ws,
				    path_length + 2) == NULL) {
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate pax data"");
					archive_wstring_free(&ws);
					return(ARCHIVE_FATAL);
				}
				/* Should we keep '\' ? */
				if (wp[path_length -1] == L'\\')
					path_length--;
				archive_wstrncpy(&ws, wp, path_length);
				archive_wstrappend_wchar(&ws, L'/');
				archive_entry_copy_pathname_w(
				    entry_original, ws.s);
				archive_wstring_free(&ws);
				p = NULL;
			} else
#endif
				p = archive_entry_pathname(entry_original);
			/*
			 * On Windows, this is a backup operation just in
			 * case getting WCS failed. On POSIX, this is a
			 * normal operation.
			 */
			if (p != NULL && p[strlen(p) - 1] != '/') {
				struct archive_string as;

				archive_string_init(&as);
				path_length = strlen(p);
				if (archive_string_ensure(&as,
				    path_length + 2) == NULL) {
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate pax data"");
					archive_string_free(&as);
					return(ARCHIVE_FATAL);
				}
#if defined(_WIN32) && !defined(__CYGWIN__)
				/* NOTE: This might break the pathname
				 * if the current code page is CP932 and
				 * the pathname includes a character '\'
				 * as a part of its multibyte pathname. */
				if (p[strlen(p) -1] == '\\')
					path_length--;
				else
#endif
				archive_strncpy(&as, p, path_length);
				archive_strappend_char(&as, '/');
				archive_entry_copy_pathname(
				    entry_original, as.s);
				archive_string_free(&as);
			}
			break;
		}
		case AE_IFSOCK:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive socket"");
			return (ARCHIVE_FAILED);
		default:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive this (type=0%lo)"",
			    (unsigned long)
			    archive_entry_filetype(entry_original));
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1734.cpp,"[8, 0, 0, 0, 2, 0, 4, 0, 7, 1, 10, 0, 0, 0, 1, 130, 0, 0, 3, 3, 0, 0, 0, 16, 0, 0, 0, 0, 1, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 6, 6, 2, 0, 30, 0, 0, 23, 0, 49, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1734.cpp,152
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,697,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive this (type=0%lo)"",
			    (unsigned long)
			    archive_entry_filetype(entry_original));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1735.cpp,"{
		case AE_IFBLK:
		case AE_IFCHR:
		case AE_IFIFO:
		case AE_IFLNK:
		case AE_IFREG:
			break;
		case AE_IFDIR:
		{
			/*
			 * Ensure a trailing '/'.  Modify the original
			 * entry so the client sees the change.
			 */
#if defined(_WIN32) && !defined(__CYGWIN__)
			const wchar_t *wp;

			wp = archive_entry_pathname_w(entry_original);
			if (wp != NULL && wp[wcslen(wp) -1] != L'/') {
				struct archive_wstring ws;

				archive_string_init(&ws);
				path_length = wcslen(wp);
				if (archive_wstring_ensure(&ws,
				    path_length + 2) == NULL) {
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate pax data"");
					archive_wstring_free(&ws);
					return(ARCHIVE_FATAL);
				}
				/* Should we keep '\' ? */
				if (wp[path_length -1] == L'\\')
					path_length--;
				archive_wstrncpy(&ws, wp, path_length);
				archive_wstrappend_wchar(&ws, L'/');
				archive_entry_copy_pathname_w(
				    entry_original, ws.s);
				archive_wstring_free(&ws);
				p = NULL;
			} else
#endif
				p = archive_entry_pathname(entry_original);
			/*
			 * On Windows, this is a backup operation just in
			 * case getting WCS failed. On POSIX, this is a
			 * normal operation.
			 */
			if (p != NULL && p[strlen(p) - 1] != '/') {
				struct archive_string as;

				archive_string_init(&as);
				path_length = strlen(p);
				if (archive_string_ensure(&as,
				    path_length + 2) == NULL) {
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate pax data"");
					archive_string_free(&as);
					return(ARCHIVE_FATAL);
				}
#if defined(_WIN32) && !defined(__CYGWIN__)
				/* NOTE: This might break the pathname
				 * if the current code page is CP932 and
				 * the pathname includes a character '\'
				 * as a part of its multibyte pathname. */
				if (p[strlen(p) -1] == '\\')
					path_length--;
				else
#endif
				archive_strncpy(&as, p, path_length);
				archive_strappend_char(&as, '/');
				archive_entry_copy_pathname(
				    entry_original, as.s);
				archive_string_free(&as);
			}
			break;
		}
		case AE_IFSOCK:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive socket"");
			return (ARCHIVE_FAILED);
		default:
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""tar format cannot archive this (type=0%lo)"",
			    (unsigned long)
			    archive_entry_filetype(entry_original));
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1735.cpp,"[8, 0, 0, 0, 2, 0, 4, 0, 7, 1, 10, 0, 0, 0, 1, 130, 0, 0, 3, 3, 0, 0, 0, 16, 0, 0, 0, 0, 1, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 6, 6, 2, 0, 30, 0, 0, 23, 0, 49, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1735.cpp,157
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,801,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate pax data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1736.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate pax data"");
		return(ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1736.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1736.cpp,261
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,844,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate pathname '%s' to %s"", path,
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1737.cpp,"{
		r = get_entry_pathname(a, entry_main, &path,
		    &path_length, NULL);
		if (r == ARCHIVE_FATAL)
			return (r);
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate pathname '%s' to %s"", path,
		    archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
		sconv = NULL;/* The header charset switches to binary mode. */
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1737.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1737.cpp,304
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,857,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate uname '%s' to %s"", uname,
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1738.cpp,"{
		r = get_entry_uname(a, entry_main, &uname, &uname_length, NULL);
		if (r == ARCHIVE_FATAL)
			return (r);
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate uname '%s' to %s"", uname,
		    archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
		sconv = NULL;/* The header charset switches to binary mode. */
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1738.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1738.cpp,317
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,870,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate gname '%s' to %s"", gname,
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1739.cpp,"{
		r = get_entry_gname(a, entry_main, &gname, &gname_length, NULL);
		if (r == ARCHIVE_FATAL)
			return (r);
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Can't translate gname '%s' to %s"", gname,
		    archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
		sconv = NULL;/* The header charset switches to binary mode. */
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1739.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1739.cpp,330
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,888,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate linkname '%s' to %s"", linkpath,
			    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1740.cpp,"{
			r = get_entry_symlink(a, entry_main, &linkpath,
			    &linkpath_length, NULL);
			if (r == ARCHIVE_FATAL)
				return (r);
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate linkname '%s' to %s"", linkpath,
			    archive_string_conversion_charset_name(sconv));
			ret = ARCHIVE_WARN;
			sconv = NULL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1740.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1740.cpp,348
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,1215,"archive_string_sprintf(&(pax->sparse_map), ""%d\n"",
			    sparse_count);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1741.cpp,"{
			int64_t soffset, slength;

			add_pax_attr_int(&(pax->pax_header),
			    ""GNU.sparse.major"", 1);
			add_pax_attr_int(&(pax->pax_header),
			    ""GNU.sparse.minor"", 0);
			add_pax_attr(&(pax->pax_header),
			    ""GNU.sparse.name"", entry_name.s);
			add_pax_attr_int(&(pax->pax_header),
			    ""GNU.sparse.realsize"",
			    archive_entry_size(entry_main));

			/* Rename the file name which will be used for
			 * ustar header to a special name, which GNU
			 * PAX Format 1.0 requires */
			archive_entry_set_pathname(entry_main,
			    build_gnu_sparse_name(gnu_sparse_name,
			        entry_name.s));

			/*
			 * - Make a sparse map, which will precede a file data.
			 * - Get the total size of available data of sparse.
			 */
			archive_string_sprintf(&(pax->sparse_map), ""%d\n"",
			    sparse_count);
			while (archive_entry_sparse_next(entry_main,
			    &soffset, &slength) == ARCHIVE_OK) {
				archive_string_sprintf(&(pax->sparse_map),
				    ""%jd\n%jd\n"",
				    (intmax_t)soffset,
				    (intmax_t)slength);
				sparse_total += slength;
				if (sparse_list_add(pax, soffset, slength)
				    != ARCHIVE_OK) {
					archive_set_error(&a->archive,
					    ENOMEM,
					    ""Can't allocate memory"");
					archive_entry_free(entry_main);
					archive_string_free(&entry_name);
					return (ARCHIVE_FATAL);
				}
			}
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1741.cpp,"[1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 66, 0, 0, 1, 2, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 0, 0, 14, 0, 0, 11, 0, 35, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1741.cpp,675
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,1219,"archive_string_sprintf(&(pax->sparse_map),
				    ""%jd\n%jd\n"",
				    (intmax_t)soffset,
				    (intmax_t)slength);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1742.cpp,"{
				archive_string_sprintf(&(pax->sparse_map),
				    ""%jd\n%jd\n"",
				    (intmax_t)soffset,
				    (intmax_t)slength);
				sparse_total += slength;
				if (sparse_list_add(pax, soffset, slength)
				    != ARCHIVE_OK) {
					archive_set_error(&a->archive,
					    ENOMEM,
					    ""Can't allocate memory"");
					archive_entry_free(entry_main);
					archive_string_free(&entry_name);
					return (ARCHIVE_FATAL);
				}
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1742.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 5, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1742.cpp,679
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,1226,"archive_set_error(&a->archive,
					    ENOMEM,
					    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1743.cpp,"{
					archive_set_error(&a->archive,
					    ENOMEM,
					    ""Can't allocate memory"");
					archive_entry_free(entry_main);
					archive_string_free(&entry_name);
					return (ARCHIVE_FATAL);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1743.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1743.cpp,686
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,1374,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""archive_write_pax_header: ""
			    ""'x' header failed?!  This can't happen.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1744.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""archive_write_pax_header: ""
			    ""'x' header failed?!  This can't happen.\n"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1744.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1744.cpp,834
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,1636,"sprintf(buff, ""PaxHeader.%d"", getpid());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1745.cpp,"{
	char buff[64];
	const char *p;

	/* Handle the null filename case. */
	if (src == NULL || *src == '\0') {
		strcpy(dest, ""PaxHeader/blank"");
		return (dest);
	}

	/* Prune final '/' and other unwanted final elements. */
	p = src + strlen(src);
	for (;;) {
		/* Ends in ""/"", remove the '/' */
		if (p > src && p[-1] == '/') {
			--p;
			continue;
		}
		/* Ends in ""/."", remove the '.' */
		if (p > src + 1 && p[-1] == '.'
		    && p[-2] == '/') {
			--p;
			continue;
		}
		break;
	}

	/* Pathological case: After above, there was nothing left.
	 * This includes ""/."" ""/./."" ""/.//./."" etc. */
	if (p == src) {
		strcpy(dest, ""/PaxHeader/rootdir"");
		return (dest);
	}

	/* Convert unadorned ""."" into a suitable filename. */
	if (*src == '.' && p == src + 1) {
		strcpy(dest, ""PaxHeader/currentdir"");
		return (dest);
	}

	/*
	 * TODO: Push this string into the 'pax' structure to avoid
	 * recomputing it every time.  That will also open the door
	 * to having clients override it.
	 */
#if HAVE_GETPID && 0  /* Disable this for now; see above comment. */
	sprintf(buff, ""PaxHeader.%d"", getpid());
#else
	/* If the platform can't fetch the pid, don't include it. */
	strcpy(buff, ""PaxHeader"");
#endif
	/* General case: build a ustar-compatible name adding
	 * ""/PaxHeader/"". */
	build_ustar_entry_name(dest, src, p - src, buff);

	return (dest);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1745.cpp,"[6, 0, 1, 0, 1, 2, 4, 0, 0, 0, 7, 0, 0, 0, 1, 51, 0, 0, 2, 2, 0, 0, 1, 17, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 6, 5, 1, 0, 8, 0, 0, 9, 0, 16, 3, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1745.cpp,48
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.cpp,1685,"sprintf(buff, ""GNUSparseFile.%d"", getpid());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1746.cpp,"{
	char buff[64];
	const char *p;

	/* Handle the null filename case. */
	if (src == NULL || *src == '\0') {
		strcpy(dest, ""GNUSparseFile/blank"");
		return (dest);
	}

	/* Prune final '/' and other unwanted final elements. */
	p = src + strlen(src);
	for (;;) {
		/* Ends in ""/"", remove the '/' */
		if (p > src && p[-1] == '/') {
			--p;
			continue;
		}
		/* Ends in ""/."", remove the '.' */
		if (p > src + 1 && p[-1] == '.'
		    && p[-2] == '/') {
			--p;
			continue;
		}
		break;
	}

#if HAVE_GETPID && 0  /* Disable this as pax attribute name. */
	sprintf(buff, ""GNUSparseFile.%d"", getpid());
#else
	/* If the platform can't fetch the pid, don't include it. */
	strcpy(buff, ""GNUSparseFile"");
#endif
	/* General case: build a ustar-compatible name adding
	 * ""/GNUSparseFile/"". */
	build_ustar_entry_name(dest, src, p - src, buff);

	return (dest);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1746.cpp,"[4, 0, 1, 0, 1, 2, 2, 0, 0, 0, 5, 0, 0, 0, 1, 40, 0, 0, 2, 2, 0, 0, 1, 13, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 4, 3, 1, 0, 6, 0, 0, 7, 0, 12, 3, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1746.cpp,30
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lrzip.cpp,81,"archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external lrzip program for lrzip decompression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1747.cpp,"{
	struct archive_read *a = (struct archive_read *)_a;
	struct archive_read_filter_bidder *reader;

	archive_check_magic(_a, ARCHIVE_READ_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_read_support_filter_lrzip"");

	if (__archive_read_get_bidder(a, &reader) != ARCHIVE_OK)
		return (ARCHIVE_FATAL);

	reader->data = NULL;
	reader->name = ""lrzip"";
	reader->bid = lrzip_bidder_bid;
	reader->init = lrzip_bidder_init;
	reader->options = NULL;
	reader->free = lrzip_reader_free;
	/* This filter always uses an external program. */
	archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external lrzip program for lrzip decompression"");
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1747.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 46, 0, 0, 2, 2, 0, 0, 1, 3, 0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 8, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1747.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/inet.cpp,57,"l = snprintf(tmp, sizeof(tmp), fmt, src[0], src[1], src[2], src[3]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1748.cpp,"{
  static const char fmt[] = ""%u.%u.%u.%u"";
  char tmp[UV__INET_ADDRSTRLEN];
  int l;

  l = snprintf(tmp, sizeof(tmp), fmt, src[0], src[1], src[2], src[3]);
  if (l <= 0 || (size_t) l >= size) {
    return UV_ENOSPC;
  }
  strncpy(dst, tmp, size);
  dst[size - 1] = '\0';
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1748.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 34, 0, 0, 3, 3, 0, 0, 1, 9, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 24, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1748.cpp,5
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/inet.cpp,138,"tp += sprintf(tp, ""%x"", words[i]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1749.cpp,"{
    /* Are we inside the best run of 0x00's? */
    if (best.base != -1 && i >= best.base &&
        i < (best.base + best.len)) {
      if (i == best.base)
        *tp++ = ':';
      continue;
    }
    /* Are we following an initial run of 0x00s or any real hex? */
    if (i != 0)
      *tp++ = ':';
    /* Is this address an encapsulated IPv4? */
    if (i == 6 && best.base == 0 && (best.len == 6 ||
        (best.len == 7 && words[7] != 0x0001) ||
        (best.len == 5 && words[5] == 0xffff))) {
      int err = inet_ntop4(src+12, tp, sizeof tmp - (tp - tmp));
      if (err)
        return err;
      tp += strlen(tp);
      break;
    }
    tp += sprintf(tp, ""%x"", words[i]);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1749.cpp,"[5, 0, 0, 0, 1, 1, 1, 0, 0, 0, 6, 0, 0, 0, 0, 57, 0, 0, 1, 1, 0, 0, 1, 15, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 21, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 5, 5, 0, 0, 3, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1749.cpp,71
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/win/pipe.cpp,87,"snprintf(name, size, ""\\\\?\\pipe\\uv\\%p-%lu"", ptr, GetCurrentProcessId());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1750.cpp,"{
  snprintf(name, size, ""\\\\?\\pipe\\uv\\%p-%lu"", ptr, GetCurrentProcessId());
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1750.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1750.cpp,1
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/win/snprintf.cpp,34,"n = _vscprintf(fmt, ap);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1751.cpp,"{
  int n;
  va_list ap;
  va_start(ap, fmt);

  n = _vscprintf(fmt, ap);
  vsnprintf_s(buf, len, _TRUNCATE, fmt, ap);

  va_end(ap);
  return n;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1751.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1751.cpp,5
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/win/error.cpp,51,"fprintf(stderr, ""%s: (%d) %s"", syscall, errorno, errmsg);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1752.cpp,"{
    fprintf(stderr, ""%s: (%d) %s"", syscall, errorno, errmsg);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1752.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1752.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/win/error.cpp,53,"fprintf(stderr, ""(%d) %s"", errorno, errmsg);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1753.cpp,"{
    fprintf(stderr, ""(%d) %s"", errorno, errmsg);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1753.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1753.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/win/util.cpp,660,"len = _snwprintf(key_name,
                     ARRAY_SIZE(key_name),
                     L""HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\%d"",
                     i);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1754.cpp,"{
    WCHAR key_name[128];
    HKEY processor_key;
    DWORD cpu_speed;
    DWORD cpu_speed_size = sizeof(cpu_speed);
    WCHAR cpu_brand[256];
    DWORD cpu_brand_size = sizeof(cpu_brand);
    size_t len;

    len = _snwprintf(key_name,
                     ARRAY_SIZE(key_name),
                     L""HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\%d"",
                     i);

    assert(len > 0 && len < ARRAY_SIZE(key_name));

    r = RegOpenKeyExW(HKEY_LOCAL_MACHINE,
                      key_name,
                      0,
                      KEY_QUERY_VALUE,
                      &processor_key);
    if (r != ERROR_SUCCESS) {
      err = GetLastError();
      goto error;
    }

    if (RegQueryValueExW(processor_key,
                         L""~MHz"",
                         NULL,
                         NULL,
                         (BYTE*) &cpu_speed,
                         &cpu_speed_size) != ERROR_SUCCESS) {
      err = GetLastError();
      RegCloseKey(processor_key);
      goto error;
    }

    if (RegQueryValueExW(processor_key,
                         L""ProcessorNameString"",
                         NULL,
                         NULL,
                         (BYTE*) &cpu_brand,
                         &cpu_brand_size) != ERROR_SUCCESS) {
      err = GetLastError();
      RegCloseKey(processor_key);
      goto error;
    }

    RegCloseKey(processor_key);

    cpu_info = &cpu_infos[i];
    cpu_info->speed = cpu_speed;
    cpu_info->cpu_times.user = sppi[i].UserTime.QuadPart / 10000;
    cpu_info->cpu_times.sys = (sppi[i].KernelTime.QuadPart -
        sppi[i].IdleTime.QuadPart) / 10000;
    cpu_info->cpu_times.idle = sppi[i].IdleTime.QuadPart / 10000;
    cpu_info->cpu_times.irq = sppi[i].InterruptTime.QuadPart / 10000;
    cpu_info->cpu_times.nice = 0;

    uv__convert_utf16_to_utf8(cpu_brand,
                              cpu_brand_size / sizeof(WCHAR),
                              &(cpu_info->model));
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1754.cpp,"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 0, 0, 133, 0, 0, 7, 7, 0, 0, 2, 12, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 63, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 8, 0, 3, 3, 0, 0, 17, 0, 0, 17, 0, 33, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1754.cpp,53
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/win/fs-event.cpp,442,"_snwprintf(filenamew, size, L""%s\\%.*s"", handle->dirw,
                file_info->FileNameLength / (DWORD)sizeof(WCHAR),
                file_info->FileName);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1755.cpp,"{
              /* Construct a full path to the file. */
              size = wcslen(handle->dirw) +
                file_info->FileNameLength / sizeof(WCHAR) + 2;

              filenamew = (WCHAR*)uv__malloc(size * sizeof(WCHAR));
              if (!filenamew) {
                uv_fatal_error(ERROR_OUTOFMEMORY, ""uv__malloc"");
              }

              _snwprintf(filenamew, size, L""%s\\%.*s"", handle->dirw,
                file_info->FileNameLength / (DWORD)sizeof(WCHAR),
                file_info->FileName);

              filenamew[size - 1] = L'\0';

              /* Convert to long name. */
              size = GetLongPathNameW(filenamew, NULL, 0);

              if (size) {
                long_filenamew = (WCHAR*)uv__malloc(size * sizeof(WCHAR));
                if (!long_filenamew) {
                  uv_fatal_error(ERROR_OUTOFMEMORY, ""uv__malloc"");
                }

                size = GetLongPathNameW(filenamew, long_filenamew, size);
                if (size) {
                  long_filenamew[size] = '\0';
                } else {
                  uv__free(long_filenamew);
                  long_filenamew = NULL;
                }
              }

              uv__free(filenamew);

              if (long_filenamew) {
                /* Get the file name out of the long path. */
                uv_relative_path(long_filenamew,
                                 handle->dirw,
                                 &filenamew);
                uv__free(long_filenamew);
                long_filenamew = filenamew;
                sizew = -1;
              } else {
                /* We couldn't get the long filename, use the one reported. */
                filenamew = file_info->FileName;
                sizew = file_info->FileNameLength / sizeof(WCHAR);
              }
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1755.cpp,"[5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 56, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 5, 2, 0, 17, 0, 0, 19, 0, 30, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1755.cpp,64
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/linux-core.cpp,811,"snprintf(buf,
           sizeof(buf),
           ""/sys/devices/system/cpu/cpu%u/cpufreq/scaling_cur_freq"",
           cpunum);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1756.cpp,"{
  unsigned long val;
  char buf[1024];
  FILE* fp;

  snprintf(buf,
           sizeof(buf),
           ""/sys/devices/system/cpu/cpu%u/cpufreq/scaling_cur_freq"",
           cpunum);

  fp = uv__open_file(buf);
  if (fp == NULL)
    return 0;

  if (fscanf(fp, ""%lu"", &val) != 1)
    val = 0;

  fclose(fp);

  return val;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1756.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 24, 0, 0, 3, 3, 0, 0, 0, 6, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 19, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 2, 2, 0, 0, 5, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1756.cpp,5
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/sunos.cpp,350,"snprintf(buf, sizeof(buf), ""/proc/%lu/path/a.out"", (unsigned long) getpid());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1757.cpp,"{
  ssize_t res;
  char buf[128];

  if (buffer == NULL || size == NULL || *size == 0)
    return -EINVAL;

  snprintf(buf, sizeof(buf), ""/proc/%lu/path/a.out"", (unsigned long) getpid());

  res = *size - 1;
  if (res > 0)
    res = readlink(buf, buffer, res);

  if (res == -1)
    return -errno;

  buffer[res] = '\0';
  *size = res;
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1757.cpp,"[3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 32, 0, 0, 2, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 21, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 3, 0, 0, 4, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1757.cpp,7
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/fs.cpp,188,"snprintf(path, sizeof(path), ""/proc/self/fd/%d"", (int) req->file);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1758.cpp,"{
#if defined(__linux__)
  /* utimesat() has nanosecond resolution but we stick to microseconds
   * for the sake of consistency with other platforms.
   */
  static int no_utimesat;
  struct timespec ts[2];
  struct timeval tv[2];
  char path[sizeof(""/proc/self/fd/"") + 3 * sizeof(int)];
  int r;

  if (no_utimesat)
    goto skip;

  ts[0].tv_sec  = req->atime;
  ts[0].tv_nsec = (uint64_t)(req->atime * 1000000) % 1000000 * 1000;
  ts[1].tv_sec  = req->mtime;
  ts[1].tv_nsec = (uint64_t)(req->mtime * 1000000) % 1000000 * 1000;

  r = uv__utimesat(req->file, NULL, ts, 0);
  if (r == 0)
    return r;

  if (errno != ENOSYS)
    return r;

  no_utimesat = 1;

skip:

  tv[0].tv_sec  = req->atime;
  tv[0].tv_usec = (uint64_t)(req->atime * 1000000) % 1000000;
  tv[1].tv_sec  = req->mtime;
  tv[1].tv_usec = (uint64_t)(req->mtime * 1000000) % 1000000;
  snprintf(path, sizeof(path), ""/proc/self/fd/%d"", (int) req->file);

  r = utimes(path, tv);
  if (r == 0)
    return r;

  switch (errno) {
  case ENOENT:
    if (fcntl(req->file, F_GETFL) == -1 && errno == EBADF)
      break;
    /* Fall through. */

  case EACCES:
  case ENOTDIR:
    errno = ENOSYS;
    break;
  }

  return r;

#elif defined(__APPLE__)                                                      \
    || defined(__DragonFly__)                                                 \
    || defined(__FreeBSD__)                                                   \
    || defined(__FreeBSD_kernel__)                                            \
    || defined(__NetBSD__)                                                    \
    || defined(__OpenBSD__)                                                   \
    || defined(__sun)
  struct timeval tv[2];
  tv[0].tv_sec  = req->atime;
  tv[0].tv_usec = (uint64_t)(req->atime * 1000000) % 1000000;
  tv[1].tv_sec  = req->mtime;
  tv[1].tv_usec = (uint64_t)(req->mtime * 1000000) % 1000000;
# if defined(__sun)
  return futimesat(req->file, NULL, tv);
# else
  return futimes(req->file, tv);
# endif
#elif defined(_AIX71)
  struct timespec ts[2];
  ts[0].tv_sec  = req->atime;
  ts[0].tv_nsec = (uint64_t)(req->atime * 1000000) % 1000000 * 1000;
  ts[1].tv_sec  = req->mtime;
  ts[1].tv_nsec = (uint64_t)(req->mtime * 1000000) % 1000000 * 1000;
  return futimens(req->file, ts);
#elif defined(__MVS__)
  attrib_t atr;
  memset(&atr, 0, sizeof(atr));
  atr.att_mtimechg = 1;
  atr.att_atimechg = 1;
  atr.att_mtime = req->mtime;
  atr.att_atime = req->atime;
  return __fchattr(req->file, &atr, sizeof(atr));
#else
  errno = ENOSYS;
  return -1;
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1758.cpp,"[7, 0, 0, 0, 2, 0, 9, 1, 3, 0, 7, 1, 1, 0, 1, 244, 0, 0, 8, 8, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 120, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 21, 0, 6, 5, 2, 0, 33, 0, 0, 27, 0, 49, 9, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1758.cpp,34
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/aix.cpp,389,"snprintf(trypath, sizeof(trypath) - 1, ""%s/%s"", token, args);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1759.cpp,"{
      snprintf(trypath, sizeof(trypath) - 1, ""%s/%s"", token, args);
      if (realpath(trypath, abspath) == abspath) {
        /* Check the match is executable */
        if (access(abspath, X_OK) == 0) {
          abspath_size = strlen(abspath);

          *size -= 1;
          if (*size > abspath_size)
            *size = abspath_size;

          memcpy(buffer, abspath, *size);
          buffer[*size] = '\0';

          uv__free(clonedpath);
          return 0;
        }
      }
      token = strtok(NULL, "":"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1759.cpp,"[3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 30, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 3, 0, 0, 8, 0, 0, 8, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1759.cpp,54
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/aix.cpp,545,"snprintf(tmp, sizeof(tmp),""%s"",dir);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1760.cpp,"{
  char tmp[256];
  char *p = NULL;
  size_t len;
  int err;

  snprintf(tmp, sizeof(tmp),""%s"",dir);
  len = strlen(tmp);
  if (tmp[len - 1] == '/')
    tmp[len - 1] = 0;
  for (p = tmp + 1; *p; p++) {
    if (*p == '/') {
      *p = 0;
      err = mkdir(tmp, S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);
      if (err != 0 && errno != EEXIST)
        return err;
      *p = '/';
    }
  }
  return mkdir(tmp, S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1760.cpp,"[3, 0, 1, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 0, 47, 0, 0, 4, 4, 0, 0, 2, 11, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 28, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 0, 4, 3, 0, 0, 5, 0, 0, 6, 0, 10, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1760.cpp,6
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/aix.cpp,578,"sprintf(cmd, ""/aha/fs/modDir.monFactory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1761.cpp,"{
    sprintf(cmd, ""/aha/fs/modDir.monFactory"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1761.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1761.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/aix.cpp,580,"sprintf(cmd, ""/aha/fs/modFile.monFactory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1762.cpp,"{
    sprintf(cmd, ""/aha/fs/modFile.monFactory"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1762.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1762.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/aix.cpp,609,"sprintf(mon_file, ""/aha/fs/modDir.monFactory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1763.cpp,"sprintf(mon_file, ""/aha/fs/modDir.monFactory"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1763.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1763.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/aix.cpp,611,"sprintf(mon_file, ""/aha/fs/modFile.monFactory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1764.cpp,"sprintf(mon_file, ""/aha/fs/modFile.monFactory"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1764.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1764.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/aix.cpp,644,"sprintf(mon_file_write_string, ""CHANGED=YES;WAIT_TYPE=WAIT_IN_SELECT;INFO_LVL=2"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1765.cpp,"sprintf(mon_file_write_string, ""CHANGED=YES;WAIT_TYPE=WAIT_IN_SELECT;INFO_LVL=2"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1765.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1765.cpp,45
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/aix.cpp,646,"sprintf(mon_file_write_string, ""CHANGED=YES;WAIT_TYPE=WAIT_IN_SELECT;INFO_LVL=1"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1766.cpp,"sprintf(mon_file_write_string, ""CHANGED=YES;WAIT_TYPE=WAIT_IN_SELECT;INFO_LVL=1"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1766.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1766.cpp,47
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/aix.cpp,827,"snprintf(absolute_path, sizeof(absolute_path), ""%s"", filename);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1767.cpp,"{
    /* We have absolute pathname */
    snprintf(absolute_path, sizeof(absolute_path), ""%s"", filename);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1767.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1767.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/aix.cpp,830,"snprintf(cwd, sizeof(cwd), ""/proc/%lu/cwd"", (unsigned long) getpid());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1768.cpp,"{
    /* We have a relative pathname, compose the absolute pathname */
    snprintf(cwd, sizeof(cwd), ""/proc/%lu/cwd"", (unsigned long) getpid());
    rc = readlink(cwd, readlink_cwd, sizeof(readlink_cwd) - 1);
    if (rc < 0)
      return rc;
    /* readlink does not null terminate our string */
    readlink_cwd[rc] = '\0';

    if (filename[0] == '.' && filename[1] == '/')
      str_offset = 2;

    snprintf(absolute_path, sizeof(absolute_path), ""%s%s"", readlink_cwd,
             filename + str_offset);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1768.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 26, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 2, 0, 0, 7, 0, 0, 5, 0, 15, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1768.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/aix.cpp,840,"snprintf(absolute_path, sizeof(absolute_path), ""%s%s"", readlink_cwd,
             filename + str_offset);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1769.cpp,"{
    /* We have a relative pathname, compose the absolute pathname */
    snprintf(cwd, sizeof(cwd), ""/proc/%lu/cwd"", (unsigned long) getpid());
    rc = readlink(cwd, readlink_cwd, sizeof(readlink_cwd) - 1);
    if (rc < 0)
      return rc;
    /* readlink does not null terminate our string */
    readlink_cwd[rc] = '\0';

    if (filename[0] == '.' && filename[1] == '/')
      str_offset = 2;

    snprintf(absolute_path, sizeof(absolute_path), ""%s%s"", readlink_cwd,
             filename + str_offset);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1769.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 26, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 2, 0, 0, 7, 0, 0, 5, 0, 15, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1769.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/aix.cpp,996,"snprintf(pp, sizeof(pp), ""/proc/%lu/psinfo"", (unsigned long) getpid());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1770.cpp,"{
  char pp[64];
  psinfo_t psinfo;
  int err;
  int fd;

  snprintf(pp, sizeof(pp), ""/proc/%lu/psinfo"", (unsigned long) getpid());

  fd = open(pp, O_RDONLY);
  if (fd == -1)
    return -errno;

  /* FIXME(bnoordhuis) Handle EINTR. */
  err = -EINVAL;
  if (read(fd, &psinfo, sizeof(psinfo)) == sizeof(psinfo)) {
    *rss = (size_t)psinfo.pr_rssize * 1024;
    err = 0;
  }
  uv__close(fd);

  return err;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1770.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 37, 0, 0, 4, 4, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 24, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 2, 2, 0, 0, 8, 0, 0, 6, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1770.cpp,6
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/async.cpp,179,"snprintf(buf, sizeof(buf), ""/proc/self/fd/%d"", pipefd[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1771.cpp,"{
      char buf[32];
      int fd;

      snprintf(buf, sizeof(buf), ""/proc/self/fd/%d"", pipefd[0]);
      fd = uv__open_cloexec(buf, O_RDWR);
      if (fd >= 0) {
        uv__close(pipefd[0]);
        uv__close(pipefd[1]);
        pipefd[0] = fd;
        pipefd[1] = fd;
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1771.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 27, 0, 0, 2, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 22, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 1, 1, 0, 0, 5, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1771.cpp,23
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/stream.cpp,1065,"fprintf(stderr, ""ignoring non-SCM_RIGHTS ancillary data: %d\n"",
          cmsg->cmsg_type);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1772.cpp,"{
      fprintf(stderr, ""ignoring non-SCM_RIGHTS ancillary data: %d\n"",
          cmsg->cmsg_type);
      continue;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1772.cpp,"[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1772.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmlibuv/src/unix/os390.cpp,287,"snprintf(trypath, sizeof(trypath) - 1, ""%s/%s"", token, args);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1773.cpp,"{
      snprintf(trypath, sizeof(trypath) - 1, ""%s/%s"", token, args);
      if (realpath(trypath, abspath) == abspath) {
        /* Check the match is executable */
        if (access(abspath, X_OK) == 0) {
          abspath_size = strlen(abspath);

          *size -= 1;
          if (*size > abspath_size)
            *size = abspath_size;

          memcpy(buffer, abspath, *size);
          buffer[*size] = '\0';

          uv__free(clonedpath);
          return 0;
        }
      }
      token = strtok(NULL, "":"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1773.cpp,"[3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 30, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 3, 0, 0, 8, 0, 0, 8, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1773.cpp,54
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/rangecoder/price_tablegen.cpp,56,"printf(""/* This file has been automatically generated by ""
			""price_tablegen.c. */\n\n""
			""#include \""range_encoder.h\""\n\n""
			""const uint8_t lzma_rc_prices[""
			""RC_PRICE_TABLE_SIZE] = {"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1774.cpp,"{
	printf(""/* This file has been automatically generated by ""
			""price_tablegen.c. */\n\n""
			""#include \""range_encoder.h\""\n\n""
			""const uint8_t lzma_rc_prices[""
			""RC_PRICE_TABLE_SIZE] = {"");

	const size_t array_size = sizeof(lzma_rc_prices)
			/ sizeof(lzma_rc_prices[0]);
	for (size_t i = 0; i < array_size; ++i) {
		if (i % 8 == 0)
			printf(""\n\t"");

		printf(""%4"" PRIu32, rc_prices[i]);

		if (i != array_size - 1)
			printf("","");
	}

	printf(""\n};\n"");

	return;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1774.cpp,"[2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 1, 22, 0, 0, 1, 2, 0, 0, 3, 14, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 21, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 2, 0, 0, 7, 0, 0, 5, 0, 8, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1774.cpp,3
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/rangecoder/price_tablegen.cpp,66,"printf(""\n\t"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1775.cpp,"printf(""\n\t"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1775.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1775.cpp,13
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/rangecoder/price_tablegen.cpp,68,"printf(""%4"" PRIu32, rc_prices[i]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1776.cpp,"{
		if (i % 8 == 0)
			printf(""\n\t"");

		printf(""%4"" PRIu32, rc_prices[i]);

		if (i != array_size - 1)
			printf("","");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1776.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 2, 0, 0, 3, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1776.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/rangecoder/price_tablegen.cpp,71,"printf("","");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1777.cpp,"printf("","")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1777.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1777.cpp,18
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/rangecoder/price_tablegen.cpp,74,"printf(""\n};\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1778.cpp,"{
	printf(""/* This file has been automatically generated by ""
			""price_tablegen.c. */\n\n""
			""#include \""range_encoder.h\""\n\n""
			""const uint8_t lzma_rc_prices[""
			""RC_PRICE_TABLE_SIZE] = {"");

	const size_t array_size = sizeof(lzma_rc_prices)
			/ sizeof(lzma_rc_prices[0]);
	for (size_t i = 0; i < array_size; ++i) {
		if (i % 8 == 0)
			printf(""\n\t"");

		printf(""%4"" PRIu32, rc_prices[i]);

		if (i != array_size - 1)
			printf("","");
	}

	printf(""\n};\n"");

	return;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1778.cpp,"[2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 1, 22, 0, 0, 1, 2, 0, 0, 3, 14, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 21, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 2, 0, 0, 7, 0, 0, 5, 0, 8, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1778.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/check/crc64_tablegen.cpp,55,"printf(""/* This file has been automatically generated by ""
			""crc64_tablegen.c. */\n\n""
			""const uint64_t lzma_crc64_table[4][256] = {\n\t{"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1779.cpp,"{
	printf(""/* This file has been automatically generated by ""
			""crc64_tablegen.c. */\n\n""
			""const uint64_t lzma_crc64_table[4][256] = {\n\t{"");

	for (size_t s = 0; s < 4; ++s) {
		for (size_t b = 0; b < 256; ++b) {
			if ((b % 2) == 0)
				printf(""\n\t\t"");

			printf(""UINT64_C(0x%016"" PRIX64 "")"",
					crc64_table[s][b]);

			if (b != 255)
				printf("",%s"", (b+1) % 2 == 0 ? """" : "" "");
		}

		if (s == 3)
			printf(""\n\t}\n};\n"");
		else
			printf(""\n\t}, {"");
	}

	return;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1779.cpp,"[3, 0, 2, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 23, 0, 0, 0, 2, 0, 0, 4, 22, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 1, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 6, 4, 2, 0, 6, 0, 0, 6, 0, 8, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1779.cpp,3
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/check/crc64_tablegen.cpp,62,"printf(""\n\t\t"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1780.cpp,"printf(""\n\t\t"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1780.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1780.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/check/crc64_tablegen.cpp,64,"printf(""UINT64_C(0x%016"" PRIX64 "")"",
					crc64_table[s][b]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1781.cpp,"{
			if ((b % 2) == 0)
				printf(""\n\t\t"");

			printf(""UINT64_C(0x%016"" PRIX64 "")"",
					crc64_table[s][b]);

			if (b != 255)
				printf("",%s"", (b+1) % 2 == 0 ? """" : "" "");
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1781.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 1, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1781.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/check/crc64_tablegen.cpp,68,"printf("",%s"", (b+1) % 2 == 0 ? """" : "" "");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1782.cpp,"printf("",%s"", (b+1) % 2 == 0 ? """" : "" "")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1782.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1782.cpp,16
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/check/crc64_tablegen.cpp,72,"printf(""\n\t}\n};\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1783.cpp,"printf(""\n\t}\n};\n"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1783.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1783.cpp,20
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/check/crc64_tablegen.cpp,74,"printf(""\n\t}, {"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1784.cpp,"printf(""\n\t}, {"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1784.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1784.cpp,22
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/check/crc32_tablegen.cpp,56,"printf(""/* This file has been automatically generated by ""
			""crc32_tablegen.c. */\n\n""
			""const uint32_t lzma_crc32_table[8][256] = {\n\t{"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1785.cpp,"{
	printf(""/* This file has been automatically generated by ""
			""crc32_tablegen.c. */\n\n""
			""const uint32_t lzma_crc32_table[8][256] = {\n\t{"");

	for (size_t s = 0; s < 8; ++s) {
		for (size_t b = 0; b < 256; ++b) {
			if ((b % 4) == 0)
				printf(""\n\t\t"");

			printf(""0x%08"" PRIX32, crc32_table[s][b]);

			if (b != 255)
				printf("",%s"", (b+1) % 4 == 0 ? """" : "" "");
		}

		if (s == 7)
			printf(""\n\t}\n};\n"");
		else
			printf(""\n\t}, {"");
	}

	return;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1785.cpp,"[3, 0, 2, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 23, 0, 0, 0, 2, 0, 0, 4, 21, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 1, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 6, 4, 2, 0, 6, 0, 0, 6, 0, 8, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1785.cpp,3
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/check/crc32_tablegen.cpp,63,"printf(""\n\t\t"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1786.cpp,"printf(""\n\t\t"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1786.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1786.cpp,10
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/check/crc32_tablegen.cpp,65,"printf(""0x%08"" PRIX32, crc32_table[s][b]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1787.cpp,"{
			if ((b % 4) == 0)
				printf(""\n\t\t"");

			printf(""0x%08"" PRIX32, crc32_table[s][b]);

			if (b != 255)
				printf("",%s"", (b+1) % 4 == 0 ? """" : "" "");
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1787.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 1, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1787.cpp,12
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/check/crc32_tablegen.cpp,68,"printf("",%s"", (b+1) % 4 == 0 ? """" : "" "");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1788.cpp,"printf("",%s"", (b+1) % 4 == 0 ? """" : "" "")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1788.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1788.cpp,15
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/check/crc32_tablegen.cpp,72,"printf(""\n\t}\n};\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1789.cpp,"printf(""\n\t}\n};\n"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1789.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1789.cpp,19
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/check/crc32_tablegen.cpp,74,"printf(""\n\t}, {"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1790.cpp,"printf(""\n\t}, {"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1790.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1790.cpp,21
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/check/crc32_tablegen.cpp,84,"printf(""/* This file has been automatically generated by ""
			""crc32_tablegen.c. */\n\n""
			""const uint32_t lzma_lz_hash_table[256] = {"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1791.cpp,"{
	printf(""/* This file has been automatically generated by ""
			""crc32_tablegen.c. */\n\n""
			""const uint32_t lzma_lz_hash_table[256] = {"");

	for (size_t b = 0; b < 256; ++b) {
		if ((b % 4) == 0)
			printf(""\n\t"");

		printf(""0x%08"" PRIX32, crc32_table[0][b]);

		if (b != 255)
			printf("",%s"", (b+1) % 4 == 0 ? """" : "" "");
	}

	printf(""\n};\n"");

	return;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1791.cpp,"[2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 2, 18, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 4, 3, 1, 0, 5, 0, 0, 5, 0, 7, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1791.cpp,3
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/check/crc32_tablegen.cpp,90,"printf(""\n\t"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1792.cpp,"printf(""\n\t"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1792.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1792.cpp,9
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/check/crc32_tablegen.cpp,92,"printf(""0x%08"" PRIX32, crc32_table[0][b]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1793.cpp,"{
		if ((b % 4) == 0)
			printf(""\n\t"");

		printf(""0x%08"" PRIX32, crc32_table[0][b]);

		if (b != 255)
			printf("",%s"", (b+1) % 4 == 0 ? """" : "" "");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1793.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 1, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1793.cpp,11
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/check/crc32_tablegen.cpp,95,"printf("",%s"", (b+1) % 4 == 0 ? """" : "" "");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1794.cpp,"printf("",%s"", (b+1) % 4 == 0 ? """" : "" "")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1794.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1794.cpp,14
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/check/crc32_tablegen.cpp,98,"printf(""\n};\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1795.cpp,"{
	printf(""/* This file has been automatically generated by ""
			""crc32_tablegen.c. */\n\n""
			""const uint32_t lzma_lz_hash_table[256] = {"");

	for (size_t b = 0; b < 256; ++b) {
		if ((b % 4) == 0)
			printf(""\n\t"");

		printf(""0x%08"" PRIX32, crc32_table[0][b]);

		if (b != 255)
			printf("",%s"", (b+1) % 4 == 0 ? """" : "" "");
	}

	printf(""\n};\n"");

	return;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1795.cpp,"[2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 2, 18, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 4, 3, 1, 0, 5, 0, 0, 5, 0, 7, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1795.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/lzma/fastpos_tablegen.cpp,36,"printf(""/* This file has been automatically generated ""
			""by fastpos_tablegen.c. */\n\n""
			""#include \""common.h\""\n""
			""#include \""fastpos.h\""\n\n""
			""const uint8_t lzma_fastpos[1 << FASTPOS_BITS] = {"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1796.cpp,"{
	uint8_t fastpos[1 << FASTPOS_BITS];

	const uint8_t fast_slots = 2 * FASTPOS_BITS;
	uint32_t c = 2;

	fastpos[0] = 0;
	fastpos[1] = 1;

	for (uint8_t slot_fast = 2; slot_fast < fast_slots; ++slot_fast) {
		const uint32_t k = 1 << ((slot_fast >> 1) - 1);
		for (uint32_t j = 0; j < k; ++j, ++c)
			fastpos[c] = slot_fast;
	}

	printf(""/* This file has been automatically generated ""
			""by fastpos_tablegen.c. */\n\n""
			""#include \""common.h\""\n""
			""#include \""fastpos.h\""\n\n""
			""const uint8_t lzma_fastpos[1 << FASTPOS_BITS] = {"");

	for (size_t i = 0; i < (1 << FASTPOS_BITS); ++i) {
		if (i % 16 == 0)
			printf(""\n\t"");

		printf(""%3u"", (unsigned int)(fastpos[i]));

		if (i != (1 << FASTPOS_BITS) - 1)
			printf("","");
	}

	printf(""\n};\n"");

	return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1796.cpp,"[2, 0, 3, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 2, 49, 0, 0, 4, 7, 0, 0, 9, 28, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 5, 0, 5, 2, 0, 0, 6, 0, 0, 8, 0, 7, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1796.cpp,17
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/lzma/fastpos_tablegen.cpp,44,"printf(""\n\t"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1797.cpp,"printf(""\n\t"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1797.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1797.cpp,25
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/lzma/fastpos_tablegen.cpp,46,"printf(""%3u"", (unsigned int)(fastpos[i]));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1798.cpp,"{
		if (i % 16 == 0)
			printf(""\n\t"");

		printf(""%3u"", (unsigned int)(fastpos[i]));

		if (i != (1 << FASTPOS_BITS) - 1)
			printf("","");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1798.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 2, 0, 0, 4, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1798.cpp,27
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/lzma/fastpos_tablegen.cpp,49,"printf("","");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1799.cpp,"printf("","")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1799.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1799.cpp,30
second/download/CMake/CMake/CMake/Utilities/cmliblzma/liblzma/lzma/fastpos_tablegen.cpp,52,"printf(""\n};\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1800.cpp,"{
	uint8_t fastpos[1 << FASTPOS_BITS];

	const uint8_t fast_slots = 2 * FASTPOS_BITS;
	uint32_t c = 2;

	fastpos[0] = 0;
	fastpos[1] = 1;

	for (uint8_t slot_fast = 2; slot_fast < fast_slots; ++slot_fast) {
		const uint32_t k = 1 << ((slot_fast >> 1) - 1);
		for (uint32_t j = 0; j < k; ++j, ++c)
			fastpos[c] = slot_fast;
	}

	printf(""/* This file has been automatically generated ""
			""by fastpos_tablegen.c. */\n\n""
			""#include \""common.h\""\n""
			""#include \""fastpos.h\""\n\n""
			""const uint8_t lzma_fastpos[1 << FASTPOS_BITS] = {"");

	for (size_t i = 0; i < (1 << FASTPOS_BITS); ++i) {
		if (i % 16 == 0)
			printf(""\n\t"");

		printf(""%3u"", (unsigned int)(fastpos[i]));

		if (i != (1 << FASTPOS_BITS) - 1)
			printf("","");
	}

	printf(""\n};\n"");

	return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1800.cpp,"[2, 0, 3, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 2, 49, 0, 0, 4, 7, 0, 0, 9, 28, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 5, 0, 5, 2, 0, 0, 6, 0, 0, 8, 0, 7, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1800.cpp,33
second/download/CMake/CMake/CMake/Source/cmcldeps.cpp,36,"fprintf(stderr, ""ninja: FATAL: "");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1801.cpp,"{
  va_list ap;
  fprintf(stderr, ""ninja: FATAL: "");
  va_start(ap, msg);
  vfprintf(stderr, msg, ap);
  va_end(ap);
  fprintf(stderr, ""\n"");
  // On Windows, some tools may inject extra threads.
  // exit() may block on locks held by those threads, so forcibly exit.
  fflush(stderr);
  fflush(stdout);
  ExitProcess(1);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1801.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 1, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1801.cpp,3
second/download/CMake/CMake/CMake/Source/cmcldeps.cpp,38,"vfprintf(stderr, msg, ap);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1802.cpp,"{
  va_list ap;
  fprintf(stderr, ""ninja: FATAL: "");
  va_start(ap, msg);
  vfprintf(stderr, msg, ap);
  va_end(ap);
  fprintf(stderr, ""\n"");
  // On Windows, some tools may inject extra threads.
  // exit() may block on locks held by those threads, so forcibly exit.
  fflush(stderr);
  fflush(stdout);
  ExitProcess(1);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1802.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 1, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1802.cpp,5
second/download/CMake/CMake/CMake/Source/cmcldeps.cpp,40,"fprintf(stderr, ""\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1803.cpp,"{
  va_list ap;
  fprintf(stderr, ""ninja: FATAL: "");
  va_start(ap, msg);
  vfprintf(stderr, msg, ap);
  va_end(ap);
  fprintf(stderr, ""\n"");
  // On Windows, some tools may inject extra threads.
  // exit() may block on locks held by those threads, so forcibly exit.
  fflush(stderr);
  fflush(stdout);
  ExitProcess(1);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1803.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 1, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1803.cpp,7
second/download/CMake/CMake/CMake/Source/cmcldeps.cpp,160,"fprintf(out, ""%s: \\\n"", tmp.c_str());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1804.cpp,"{

  if (dfile.empty())
    return;

  // strip duplicates
  std::sort(incs.begin(), incs.end());
  incs.erase(std::unique(incs.begin(), incs.end()), incs.end());

  FILE* out = cmsys::SystemTools::Fopen(dfile.c_str(), ""wb"");

  // FIXME should this be fatal or not? delete obj? delete d?
  if (!out)
    return;
  std::string cwd = cmSystemTools::GetCurrentWorkingDirectory();
  replaceAll(cwd, ""/"", ""\\"");
  cwd += ""\\"";

  std::string tmp = objfile;
  escapePath(tmp);
  fprintf(out, ""%s: \\\n"", tmp.c_str());

  std::vector<std::string>::iterator it = incs.begin();
  for (; it != incs.end(); ++it) {
    tmp = *it;
    // The paths need to match the ones used to identify build artifacts in the
    // build.ninja file.  Therefore we need to canonicalize the path to use
    // backward slashes and relativize the path to the build directory.
    replaceAll(tmp, ""/"", ""\\"");
    if (startsWith(tmp, cwd))
      tmp = tmp.substr(cwd.size());
    escapePath(tmp);
    fprintf(out, ""%s \\\n"", tmp.c_str());
  }

  fprintf(out, ""\n"");
  fclose(out);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1804.cpp,"[3, 0, 1, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 0, 101, 0, 0, 4, 4, 0, 0, 5, 9, 0, 0, 0, 0, 1, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 3, 0, 0, 28, 0, 0, 13, 0, 29, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1804.cpp,22
second/download/CMake/CMake/CMake/Source/cmcldeps.cpp,172,"fprintf(out, ""%s \\\n"", tmp.c_str());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1805.cpp,"{
    tmp = *it;
    // The paths need to match the ones used to identify build artifacts in the
    // build.ninja file.  Therefore we need to canonicalize the path to use
    // backward slashes and relativize the path to the build directory.
    replaceAll(tmp, ""/"", ""\\"");
    if (startsWith(tmp, cwd))
      tmp = tmp.substr(cwd.size());
    escapePath(tmp);
    fprintf(out, ""%s \\\n"", tmp.c_str());
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1805.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 7, 0, 0, 5, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1805.cpp,34
second/download/CMake/CMake/CMake/Source/cmcldeps.cpp,175,"fprintf(out, ""\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1806.cpp,"{

  if (dfile.empty())
    return;

  // strip duplicates
  std::sort(incs.begin(), incs.end());
  incs.erase(std::unique(incs.begin(), incs.end()), incs.end());

  FILE* out = cmsys::SystemTools::Fopen(dfile.c_str(), ""wb"");

  // FIXME should this be fatal or not? delete obj? delete d?
  if (!out)
    return;
  std::string cwd = cmSystemTools::GetCurrentWorkingDirectory();
  replaceAll(cwd, ""/"", ""\\"");
  cwd += ""\\"";

  std::string tmp = objfile;
  escapePath(tmp);
  fprintf(out, ""%s: \\\n"", tmp.c_str());

  std::vector<std::string>::iterator it = incs.begin();
  for (; it != incs.end(); ++it) {
    tmp = *it;
    // The paths need to match the ones used to identify build artifacts in the
    // build.ninja file.  Therefore we need to canonicalize the path to use
    // backward slashes and relativize the path to the build directory.
    replaceAll(tmp, ""/"", ""\\"");
    if (startsWith(tmp, cwd))
      tmp = tmp.substr(cwd.size());
    escapePath(tmp);
    fprintf(out, ""%s \\\n"", tmp.c_str());
  }

  fprintf(out, ""\n"");
  fclose(out);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1806.cpp,"[3, 0, 1, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 0, 101, 0, 0, 4, 4, 0, 0, 5, 9, 0, 0, 0, 0, 1, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 3, 0, 0, 28, 0, 0, 13, 0, 29, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1806.cpp,37
second/download/CMake/CMake/CMake/Source/cmcldeps.cpp,229,"fprintf(stdout, ""%s\n"", line.c_str());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1807.cpp,"{
          fprintf(stdout, ""%s\n"", line.c_str());
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1807.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1807.cpp,35
second/download/CMake/CMake/CMake/Source/LexerParser/cmListFileLexer.cpp,1329,"YY_FATAL_ERROR(
			""fatal flex scanner internal error--no action found"" );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1808.cpp,"{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 82 ""cmListFileLexer.in.l""
{
  lexer->token.type = cmListFileLexer_Token_Newline;
  cmListFileLexerSetToken(lexer, yytext, yyleng);
  ++lexer->line;
  lexer->column = 1;
  BEGIN(INITIAL);
  return 1;
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 91 ""cmListFileLexer.in.l""
{
  const char* bracket = yytext;
  lexer->comment = yytext[0] == '#';
  if (lexer->comment) {
    lexer->token.type = cmListFileLexer_Token_CommentBracket;
    bracket += 1;
  } else {
    lexer->token.type = cmListFileLexer_Token_ArgumentBracket;
  }
  cmListFileLexerSetToken(lexer, """", 0);
  lexer->bracket = strchr(bracket+1, '[') - bracket;
  if (yytext[yyleng-1] == '\n') {
    ++lexer->line;
    lexer->column = 1;
  } else {
    lexer->column += yyleng;
  }
  BEGIN(BRACKET);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 111 ""cmListFileLexer.in.l""
{
  lexer->column += yyleng;
  BEGIN(COMMENT);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 116 ""cmListFileLexer.in.l""
{
  lexer->column += yyleng;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 120 ""cmListFileLexer.in.l""
{
  lexer->token.type = cmListFileLexer_Token_ParenLeft;
  cmListFileLexerSetToken(lexer, yytext, yyleng);
  lexer->column += yyleng;
  return 1;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 127 ""cmListFileLexer.in.l""
{
  lexer->token.type = cmListFileLexer_Token_ParenRight;
  cmListFileLexerSetToken(lexer, yytext, yyleng);
  lexer->column += yyleng;
  return 1;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 134 ""cmListFileLexer.in.l""
{
  lexer->token.type = cmListFileLexer_Token_Identifier;
  cmListFileLexerSetToken(lexer, yytext, yyleng);
  lexer->column += yyleng;
  return 1;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 141 ""cmListFileLexer.in.l""
{
  /* Handle ]]====]=======]*/
  cmListFileLexerAppend(lexer, yytext, yyleng);
  lexer->column += yyleng;
  if (yyleng == lexer->bracket) {
    BEGIN(BRACKETEND);
  }
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 150 ""cmListFileLexer.in.l""
{
  lexer->column += yyleng;
  /* Erase the partial bracket from the token.  */
  lexer->token.length -= lexer->bracket;
  lexer->token.text[lexer->token.length] = 0;
  BEGIN(INITIAL);
  return 1;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 159 ""cmListFileLexer.in.l""
{
  cmListFileLexerAppend(lexer, yytext, yyleng);
  lexer->column += yyleng;
}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 164 ""cmListFileLexer.in.l""
{
  cmListFileLexerAppend(lexer, yytext, yyleng);
  ++lexer->line;
  lexer->column = 1;
  BEGIN(BRACKET);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 171 ""cmListFileLexer.in.l""
{
  cmListFileLexerAppend(lexer, yytext, yyleng);
  lexer->column += yyleng;
  BEGIN(BRACKET);
}
	YY_BREAK
case YY_STATE_EOF(BRACKET):
case YY_STATE_EOF(BRACKETEND):
#line 177 ""cmListFileLexer.in.l""
{
  lexer->token.type = cmListFileLexer_Token_BadBracket;
  BEGIN(INITIAL);
  return 1;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 183 ""cmListFileLexer.in.l""
{
  lexer->token.type = cmListFileLexer_Token_ArgumentUnquoted;
  cmListFileLexerSetToken(lexer, yytext, yyleng);
  lexer->column += yyleng;
  return 1;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 190 ""cmListFileLexer.in.l""
{
  lexer->token.type = cmListFileLexer_Token_ArgumentUnquoted;
  cmListFileLexerSetToken(lexer, yytext, yyleng);
  lexer->column += yyleng;
  return 1;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 197 ""cmListFileLexer.in.l""
{
  lexer->token.type = cmListFileLexer_Token_ArgumentUnquoted;
  cmListFileLexerSetToken(lexer, yytext, yyleng);
  lexer->column += yyleng;
  return 1;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 204 ""cmListFileLexer.in.l""
{
  lexer->token.type = cmListFileLexer_Token_ArgumentQuoted;
  cmListFileLexerSetToken(lexer, """", 0);
  lexer->column += yyleng;
  BEGIN(STRING);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 211 ""cmListFileLexer.in.l""
{
  cmListFileLexerAppend(lexer, yytext, yyleng);
  lexer->column += yyleng;
}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 216 ""cmListFileLexer.in.l""
{
  /* Continuation: text is not part of string */
  ++lexer->line;
  lexer->column = 1;
}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 222 ""cmListFileLexer.in.l""
{
  cmListFileLexerAppend(lexer, yytext, yyleng);
  ++lexer->line;
  lexer->column = 1;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 228 ""cmListFileLexer.in.l""
{
  lexer->column += yyleng;
  BEGIN(INITIAL);
  return 1;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 234 ""cmListFileLexer.in.l""
{
  cmListFileLexerAppend(lexer, yytext, yyleng);
  lexer->column += yyleng;
}
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 239 ""cmListFileLexer.in.l""
{
  lexer->token.type = cmListFileLexer_Token_BadString;
  BEGIN(INITIAL);
  return 1;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 245 ""cmListFileLexer.in.l""
{
  lexer->token.type = cmListFileLexer_Token_Space;
  cmListFileLexerSetToken(lexer, yytext, yyleng);
  lexer->column += yyleng;
  return 1;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 252 ""cmListFileLexer.in.l""
{
  lexer->token.type = cmListFileLexer_Token_BadCharacter;
  cmListFileLexerSetToken(lexer, yytext, yyleng);
  lexer->column += yyleng;
  return 1;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
#line 259 ""cmListFileLexer.in.l""
{
  lexer->token.type = cmListFileLexer_Token_None;
  cmListFileLexerSetToken(lexer, 0, 0);
  return 0;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 265 ""cmListFileLexer.in.l""
ECHO;
	YY_BREAK
#line 1205 ""cmListFileLexer.c""

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * cmListFileLexer_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p ""<="" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( cmListFileLexer_yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			""fatal flex scanner internal error--no action found"" );
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1808.cpp,"[8, 0, 0, 0, 2, 0, 14, 1, 34, 1, 43, 0, 6, 0, 1, 530, 0, 0, 4, 4, 0, 0, 2, 61, 0, 0, 0, 0, 1, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 197, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 9, 8, 5, 0, 45, 0, 0, 106, 0, 85, 28, 0, 0, 51, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1808.cpp,1329
second/download/CMake/CMake/CMake/Source/LexerParser/cmListFileLexer.cpp,1352,"YY_FATAL_ERROR(
		""fatal flex scanner internal error--end of buffer missed"" );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1809.cpp,"YY_FATAL_ERROR(
		""fatal flex scanner internal error--end of buffer missed"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1809.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1809.cpp,9
second/download/CMake/CMake/CMake/Source/LexerParser/cmListFileLexer.cpp,1420,"YY_FATAL_ERROR(
				""fatal error - scanner input buffer overflow"" );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1810.cpp,"YY_FATAL_ERROR(
				""fatal error - scanner input buffer overflow"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1810.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1810.cpp,77
second/download/CMake/CMake/CMake/Source/LexerParser/cmListFileLexer.cpp,1464,"YY_FATAL_ERROR( ""out of dynamic memory in yy_get_next_buffer()"" );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1811.cpp,"YY_FATAL_ERROR( ""out of dynamic memory in yy_get_next_buffer()"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1811.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1811.cpp,121
second/download/CMake/CMake/CMake/Source/LexerParser/cmListFileLexer.cpp,1566,"YY_FATAL_ERROR( ""flex scanner push-back overflow"" );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1812.cpp,"YY_FATAL_ERROR( ""flex scanner push-back overflow"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1812.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1812.cpp,28
second/download/CMake/CMake/CMake/Source/LexerParser/cmListFileLexer.cpp,1740,"YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yy_create_buffer()"" );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1813.cpp,"YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yy_create_buffer()"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1813.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1813.cpp,6
second/download/CMake/CMake/CMake/Source/LexerParser/cmListFileLexer.cpp,1749,"YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yy_create_buffer()"" );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1814.cpp,"YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yy_create_buffer()"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1814.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1814.cpp,15
second/download/CMake/CMake/CMake/Source/LexerParser/cmListFileLexer.cpp,1908,"YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yyensure_buffer_stack()"" );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1815.cpp,"YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yyensure_buffer_stack()"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1815.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1815.cpp,16
second/download/CMake/CMake/CMake/Source/LexerParser/cmListFileLexer.cpp,1928,"YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yyensure_buffer_stack()"" );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1816.cpp,"YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yyensure_buffer_stack()"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1816.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1816.cpp,36
second/download/CMake/CMake/CMake/Source/LexerParser/cmListFileLexer.cpp,1954,"YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yy_scan_buffer()"" );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1817.cpp,"YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yy_scan_buffer()"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1817.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1817.cpp,12
second/download/CMake/CMake/CMake/Source/LexerParser/cmListFileLexer.cpp,2003,"YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yy_scan_bytes()"" );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1818.cpp,"YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yy_scan_bytes()"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1818.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1818.cpp,11
second/download/CMake/CMake/CMake/Source/LexerParser/cmListFileLexer.cpp,2012,"YY_FATAL_ERROR( ""bad buffer in cmListFileLexer_yy_scan_bytes()"" );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1819.cpp,"YY_FATAL_ERROR( ""bad buffer in cmListFileLexer_yy_scan_bytes()"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1819.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1819.cpp,20
second/download/CMake/CMake/CMake/Source/LexerParser/cmListFileLexer.cpp,2030,"(void) fprintf( stderr, ""%s\n"", msg );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1820.cpp,"{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, ""%s\n"", msg );
	exit( YY_EXIT_FAILURE );
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1820.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1820.cpp,4
second/download/CMake/CMake/CMake/Source/LexerParser/cmListFileLexer.cpp,2145,"YY_FATAL_ERROR( ""cmListFileLexer_yyset_lineno called with no buffer"" );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1821.cpp,"YY_FATAL_ERROR( ""cmListFileLexer_yyset_lineno called with no buffer"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1821.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1821.cpp,6
second/download/CMake/CMake/CMake/Source/LexerParser/cmListFileLexer.cpp,2160,"YY_FATAL_ERROR( ""cmListFileLexer_yyset_column called with no buffer"" );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1822.cpp,"YY_FATAL_ERROR( ""cmListFileLexer_yyset_column called with no buffer"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1822.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1822.cpp,6
second/download/CMake/CMake/CMake/Source/cmsys/SharedForward.cpp,463,"_snprintf(message, KWSYS_SHARED_FORWARD_MAXPATH,
              ""Error 0x%X (FormatMessage failed with error 0x%X)"", original,
              GetLastError());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1823.cpp,"{
    /* FormatMessage failed.  Use a default message.  */
    _snprintf(message, KWSYS_SHARED_FORWARD_MAXPATH,
              ""Error 0x%X (FormatMessage failed with error 0x%X)"", original,
              GetLastError());
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1823.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1823.cpp,11
second/download/CMake/CMake/CMake/Source/cmsys/SharedForward.cpp,659,"fprintf(stderr, ""Error converting %s \""%s\"" to real path: %s\n"", desc,
                temp_path, msgbuf);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1824.cpp,"{
        char msgbuf[KWSYS_SHARED_FORWARD_MAXPATH];
        kwsys_shared_forward_strerror(msgbuf);
        fprintf(stderr, ""Error converting %s \""%s\"" to real path: %s\n"", desc,
                temp_path, msgbuf);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1824.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1824.cpp,25
second/download/CMake/CMake/CMake/Source/cmsys/SharedForward.cpp,698,"fprintf(stderr, ""Error converting self path \""%s\"" to real path: %s\n"",
            self_path, msgbuf);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1825.cpp,"{
    char msgbuf[KWSYS_SHARED_FORWARD_MAXPATH];
    kwsys_shared_forward_strerror(msgbuf);
    fprintf(stderr, ""Error converting self path \""%s\"" to real path: %s\n"",
            self_path, msgbuf);
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1825.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1825.cpp,28
second/download/CMake/CMake/CMake/Source/cmsys/SharedForward.cpp,765,"fprintf(stderr, ""Error running"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1826.cpp,"{
  char msg[KWSYS_SHARED_FORWARD_MAXPATH];
  char const* const* arg = argv;
  kwsys_shared_forward_strerror(msg);
  fprintf(stderr, ""Error running"");
  for (; *arg; ++arg) {
    fprintf(stderr, "" \""%s\"""", *arg);
  }
  fprintf(stderr, "": %s\n"", msg);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1826.cpp,"[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 19, 0, 0, 2, 2, 0, 0, 2, 3, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 4, 0, 0, 4, 0, 9, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1826.cpp,5
second/download/CMake/CMake/CMake/Source/cmsys/SharedForward.cpp,767,"fprintf(stderr, "" \""%s\"""", *arg);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1827.cpp,"{
    fprintf(stderr, "" \""%s\"""", *arg);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1827.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1827.cpp,7
second/download/CMake/CMake/CMake/Source/cmsys/SharedForward.cpp,769,"fprintf(stderr, "": %s\n"", msg);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1828.cpp,"{
  char msg[KWSYS_SHARED_FORWARD_MAXPATH];
  char const* const* arg = argv;
  kwsys_shared_forward_strerror(msg);
  fprintf(stderr, ""Error running"");
  for (; *arg; ++arg) {
    fprintf(stderr, "" \""%s\"""", *arg);
  }
  fprintf(stderr, "": %s\n"", msg);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1828.cpp,"[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 19, 0, 0, 2, 2, 0, 0, 2, 3, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 4, 0, 0, 4, 0, 9, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1828.cpp,9
second/download/CMake/CMake/CMake/Source/cmsys/SharedForward.cpp,808,"fprintf(stderr, ""Option "" KWSYS_SHARED_FORWARD_OPTION_COMMAND
                          "" must be followed by a command line.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1829.cpp,"{
          /* The option was not given an executable.  */
          fprintf(stderr, ""Option "" KWSYS_SHARED_FORWARD_OPTION_COMMAND
                          "" must be followed by a command line.\n"");
          return 1;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1829.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1829.cpp,31
second/download/CMake/CMake/CMake/Source/cmsys/SharedForward.cpp,819,"fprintf(stdout, ""%s\n"", kwsys_shared_forward_ldpath);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1830.cpp,"{
        fprintf(stdout, ""%s\n"", kwsys_shared_forward_ldpath);
        fprintf(stdout, ""%s\n"", exe);
        return 0;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1830.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1830.cpp,42
second/download/CMake/CMake/CMake/Source/cmsys/SharedForward.cpp,820,"fprintf(stdout, ""%s\n"", exe);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1831.cpp,"{
        fprintf(stdout, ""%s\n"", kwsys_shared_forward_ldpath);
        fprintf(stdout, ""%s\n"", exe);
        return 0;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1831.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1831.cpp,43
second/download/CMake/CMake/CMake/Source/cmsys/SharedForward.cpp,839,"fprintf(stderr, ""No ldd-like tool is known to this executable.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1832.cpp,"{
#if defined(KWSYS_SHARED_FORWARD_LDD)
        /* Use the named ldd-like executable and arguments.  */
        char const* ldd_argv[] = { KWSYS_SHARED_FORWARD_LDD, 0, 0 };
        ldd_argv[KWSYS_SHARED_FORWARD_LDD_N] = exe;
        kwsys_shared_forward_execvp(ldd_argv[0], ldd_argv);

        /* Report why execution failed.  */
        kwsys_shared_forward_print_failure(ldd_argv);
        return 1;
#else
        /* We have no ldd-like executable available on this platform.  */
        fprintf(stderr, ""No ldd-like tool is known to this executable.\n"");
        return 1;
#endif
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1832.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 18, 0, 0, 1, 1, 0, 0, 1, 6, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 1, 0, 4, 0, 0, 4, 0, 6, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1832.cpp,62
second/download/CMake/CMake/CMake/Source/cmsys/SharedForward.cpp,856,"fprintf(stderr, ""Error locating executable \""%s\"".\n"", argv[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1833.cpp,"{
    /* Could not find this executable.  */
    fprintf(stderr, ""Error locating executable \""%s\"".\n"", argv[0]);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1833.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1833.cpp,79
second/download/CMake/CMake/CMake/Source/CursesDialog/ccmake.cpp,69,"self->AddError(message, title);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1834.cpp,"{
  cmCursesForm* self = static_cast<cmCursesForm*>(clientData);
  self->AddError(message, title);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1834.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1834.cpp,4
second/download/CMake/CMake/CMake/Source/CursesDialog/form/fty_int.cpp,119,"sprintf(buf,""%.*ld"",(prec>0?prec:0),val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1835.cpp,"{
	  val = atol(s);
	  if (low<high)
	    {
	      if (val<low || val>high) return FALSE;
	    }
	  sprintf(buf,""%.*ld"",(prec>0?prec:0),val);
	  set_field_buffer(field,0,buf);
	  return TRUE;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1835.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 4, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1835.cpp,28
second/download/CMake/CMake/CMake/Source/CursesDialog/form/fty_num.cpp,142,"sprintf(buf,""%.*f"",(prec>0?prec:0),val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1836.cpp,"{
	  val = atof(s);
	  if (low<high)
	    {
	      if (val<low || val>high) return FALSE;
	    }
	  sprintf(buf,""%.*f"",(prec>0?prec:0),val);
	  set_field_buffer(field,0,buf);
	  return TRUE;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1836.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 4, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1836.cpp,42
second/download/CMake/CMake/CMake/Source/kwsys/testEncode.cpp,30,"printf(""md5sum 1: expected [%s]\n""
         ""               got [%s]\n"",
         testMD5output1, md5out);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1837.cpp,"{
  char md5out[33];
  kwsysMD5_Initialize(md5);
  kwsysMD5_Append(md5, testMD5input1, -1);
  kwsysMD5_FinalizeHex(md5, md5out);
  md5out[32] = 0;
  printf(""md5sum 1: expected [%s]\n""
         ""               got [%s]\n"",
         testMD5output1, md5out);
  return (strcmp(md5out, testMD5output1) != 0) ? 1 : 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1837.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 19, 0, 0, 1, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 1, 0, 5, 0, 0, 5, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1837.cpp,7
second/download/CMake/CMake/CMake/Source/kwsys/testEncode.cpp,45,"printf(""md5sum 2: expected [%s]\n""
         ""               got [%s]\n"",
         testMD5output2, md5out);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1838.cpp,"{
  unsigned char digest[16];
  char md5out[33];
  kwsysMD5_Initialize(md5);
  kwsysMD5_Append(md5, testMD5input2, testMD5input2len);
  kwsysMD5_Finalize(md5, digest);
  kwsysMD5_DigestToHex(digest, md5out);
  md5out[32] = 0;
  printf(""md5sum 2: expected [%s]\n""
         ""               got [%s]\n"",
         testMD5output2, md5out);
  return (strcmp(md5out, testMD5output2) != 0) ? 1 : 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1838.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 27, 0, 0, 2, 2, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 1, 1, 0, 6, 0, 0, 6, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1838.cpp,9
second/download/CMake/CMake/CMake/Source/kwsys/IOStream.cpp,202,"sprintf(buffer, format, value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1839.cpp,"{
      // Construct the format string.
      char format[8];
      char* f = format;
      *f++ = '%';
      if (os.flags() & std::ios_base::showpos) {
        *f++ = '+';
      }
      if (os.flags() & std::ios_base::showbase) {
        *f++ = '#';
      }
#if defined(_MSC_VER)
      *f++ = 'I';
      *f++ = '6';
      *f++ = '4';
#else
      *f++ = 'l';
      *f++ = 'l';
#endif
      long bflags = os.flags() & std::ios_base::basefield;
      if (bflags == std::ios_base::oct) {
        *f++ = 'o';
      } else if (bflags != std::ios_base::hex) {
        *f++ = type;
      } else if (os.flags() & std::ios_base::uppercase) {
        *f++ = 'X';
      } else {
        *f++ = 'x';
      }
      *f = '\0';

      // Use sprintf to print to a buffer and then write the
      // buffer to the stream.
      char buffer[2 * KWSYS_IOS_INT64_MAX_DIG];
      sprintf(buffer, format, value);
      os << buffer;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1839.cpp,"[6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 72, 0, 0, 4, 4, 0, 0, 2, 14, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 5, 5, 2, 0, 6, 0, 0, 15, 2, 4, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1839.cpp,39
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,71,"vfprintf(stream, format, var_args);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1840.cpp,"{
    va_list var_args;
    va_start(var_args, format);
    vfprintf(stream, format, var_args);
    va_end(var_args);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1840.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1840.cpp,25
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,236,"fprintf(stream, KWSYS_TERMINAL_VT100_NORMAL);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1841.cpp,"{
    fprintf(stream, KWSYS_TERMINAL_VT100_NORMAL);
    return;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1841.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1841.cpp,3
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,242,"fprintf(stream, KWSYS_TERMINAL_VT100_NORMAL);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1842.cpp,"{
    case kwsysTerminal_Color_Normal:
      fprintf(stream, KWSYS_TERMINAL_VT100_NORMAL);
      break;
    case kwsysTerminal_Color_ForegroundBlack:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLACK);
      break;
    case kwsysTerminal_Color_ForegroundRed:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_RED);
      break;
    case kwsysTerminal_Color_ForegroundGreen:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_GREEN);
      break;
    case kwsysTerminal_Color_ForegroundYellow:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_YELLOW);
      break;
    case kwsysTerminal_Color_ForegroundBlue:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLUE);
      break;
    case kwsysTerminal_Color_ForegroundMagenta:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_MAGENTA);
      break;
    case kwsysTerminal_Color_ForegroundCyan:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_CYAN);
      break;
    case kwsysTerminal_Color_ForegroundWhite:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_WHITE);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1842.cpp,"[0, 0, 0, 0, 9, 0, 0, 0, 9, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 9, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1842.cpp,9
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,245,"fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLACK);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1843.cpp,"{
    case kwsysTerminal_Color_Normal:
      fprintf(stream, KWSYS_TERMINAL_VT100_NORMAL);
      break;
    case kwsysTerminal_Color_ForegroundBlack:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLACK);
      break;
    case kwsysTerminal_Color_ForegroundRed:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_RED);
      break;
    case kwsysTerminal_Color_ForegroundGreen:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_GREEN);
      break;
    case kwsysTerminal_Color_ForegroundYellow:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_YELLOW);
      break;
    case kwsysTerminal_Color_ForegroundBlue:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLUE);
      break;
    case kwsysTerminal_Color_ForegroundMagenta:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_MAGENTA);
      break;
    case kwsysTerminal_Color_ForegroundCyan:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_CYAN);
      break;
    case kwsysTerminal_Color_ForegroundWhite:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_WHITE);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1843.cpp,"[0, 0, 0, 0, 9, 0, 0, 0, 9, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 9, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1843.cpp,12
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,248,"fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_RED);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1844.cpp,"{
    case kwsysTerminal_Color_Normal:
      fprintf(stream, KWSYS_TERMINAL_VT100_NORMAL);
      break;
    case kwsysTerminal_Color_ForegroundBlack:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLACK);
      break;
    case kwsysTerminal_Color_ForegroundRed:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_RED);
      break;
    case kwsysTerminal_Color_ForegroundGreen:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_GREEN);
      break;
    case kwsysTerminal_Color_ForegroundYellow:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_YELLOW);
      break;
    case kwsysTerminal_Color_ForegroundBlue:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLUE);
      break;
    case kwsysTerminal_Color_ForegroundMagenta:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_MAGENTA);
      break;
    case kwsysTerminal_Color_ForegroundCyan:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_CYAN);
      break;
    case kwsysTerminal_Color_ForegroundWhite:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_WHITE);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1844.cpp,"[0, 0, 0, 0, 9, 0, 0, 0, 9, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 9, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1844.cpp,15
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,251,"fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_GREEN);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1845.cpp,"{
    case kwsysTerminal_Color_Normal:
      fprintf(stream, KWSYS_TERMINAL_VT100_NORMAL);
      break;
    case kwsysTerminal_Color_ForegroundBlack:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLACK);
      break;
    case kwsysTerminal_Color_ForegroundRed:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_RED);
      break;
    case kwsysTerminal_Color_ForegroundGreen:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_GREEN);
      break;
    case kwsysTerminal_Color_ForegroundYellow:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_YELLOW);
      break;
    case kwsysTerminal_Color_ForegroundBlue:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLUE);
      break;
    case kwsysTerminal_Color_ForegroundMagenta:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_MAGENTA);
      break;
    case kwsysTerminal_Color_ForegroundCyan:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_CYAN);
      break;
    case kwsysTerminal_Color_ForegroundWhite:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_WHITE);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1845.cpp,"[0, 0, 0, 0, 9, 0, 0, 0, 9, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 9, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1845.cpp,18
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,254,"fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_YELLOW);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1846.cpp,"{
    case kwsysTerminal_Color_Normal:
      fprintf(stream, KWSYS_TERMINAL_VT100_NORMAL);
      break;
    case kwsysTerminal_Color_ForegroundBlack:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLACK);
      break;
    case kwsysTerminal_Color_ForegroundRed:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_RED);
      break;
    case kwsysTerminal_Color_ForegroundGreen:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_GREEN);
      break;
    case kwsysTerminal_Color_ForegroundYellow:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_YELLOW);
      break;
    case kwsysTerminal_Color_ForegroundBlue:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLUE);
      break;
    case kwsysTerminal_Color_ForegroundMagenta:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_MAGENTA);
      break;
    case kwsysTerminal_Color_ForegroundCyan:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_CYAN);
      break;
    case kwsysTerminal_Color_ForegroundWhite:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_WHITE);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1846.cpp,"[0, 0, 0, 0, 9, 0, 0, 0, 9, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 9, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1846.cpp,21
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,257,"fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLUE);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1847.cpp,"{
    case kwsysTerminal_Color_Normal:
      fprintf(stream, KWSYS_TERMINAL_VT100_NORMAL);
      break;
    case kwsysTerminal_Color_ForegroundBlack:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLACK);
      break;
    case kwsysTerminal_Color_ForegroundRed:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_RED);
      break;
    case kwsysTerminal_Color_ForegroundGreen:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_GREEN);
      break;
    case kwsysTerminal_Color_ForegroundYellow:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_YELLOW);
      break;
    case kwsysTerminal_Color_ForegroundBlue:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLUE);
      break;
    case kwsysTerminal_Color_ForegroundMagenta:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_MAGENTA);
      break;
    case kwsysTerminal_Color_ForegroundCyan:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_CYAN);
      break;
    case kwsysTerminal_Color_ForegroundWhite:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_WHITE);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1847.cpp,"[0, 0, 0, 0, 9, 0, 0, 0, 9, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 9, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1847.cpp,24
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,260,"fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_MAGENTA);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1848.cpp,"{
    case kwsysTerminal_Color_Normal:
      fprintf(stream, KWSYS_TERMINAL_VT100_NORMAL);
      break;
    case kwsysTerminal_Color_ForegroundBlack:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLACK);
      break;
    case kwsysTerminal_Color_ForegroundRed:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_RED);
      break;
    case kwsysTerminal_Color_ForegroundGreen:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_GREEN);
      break;
    case kwsysTerminal_Color_ForegroundYellow:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_YELLOW);
      break;
    case kwsysTerminal_Color_ForegroundBlue:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLUE);
      break;
    case kwsysTerminal_Color_ForegroundMagenta:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_MAGENTA);
      break;
    case kwsysTerminal_Color_ForegroundCyan:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_CYAN);
      break;
    case kwsysTerminal_Color_ForegroundWhite:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_WHITE);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1848.cpp,"[0, 0, 0, 0, 9, 0, 0, 0, 9, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 9, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1848.cpp,27
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,263,"fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_CYAN);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1849.cpp,"{
    case kwsysTerminal_Color_Normal:
      fprintf(stream, KWSYS_TERMINAL_VT100_NORMAL);
      break;
    case kwsysTerminal_Color_ForegroundBlack:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLACK);
      break;
    case kwsysTerminal_Color_ForegroundRed:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_RED);
      break;
    case kwsysTerminal_Color_ForegroundGreen:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_GREEN);
      break;
    case kwsysTerminal_Color_ForegroundYellow:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_YELLOW);
      break;
    case kwsysTerminal_Color_ForegroundBlue:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLUE);
      break;
    case kwsysTerminal_Color_ForegroundMagenta:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_MAGENTA);
      break;
    case kwsysTerminal_Color_ForegroundCyan:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_CYAN);
      break;
    case kwsysTerminal_Color_ForegroundWhite:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_WHITE);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1849.cpp,"[0, 0, 0, 0, 9, 0, 0, 0, 9, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 9, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1849.cpp,30
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,266,"fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_WHITE);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1850.cpp,"{
    case kwsysTerminal_Color_Normal:
      fprintf(stream, KWSYS_TERMINAL_VT100_NORMAL);
      break;
    case kwsysTerminal_Color_ForegroundBlack:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLACK);
      break;
    case kwsysTerminal_Color_ForegroundRed:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_RED);
      break;
    case kwsysTerminal_Color_ForegroundGreen:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_GREEN);
      break;
    case kwsysTerminal_Color_ForegroundYellow:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_YELLOW);
      break;
    case kwsysTerminal_Color_ForegroundBlue:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_BLUE);
      break;
    case kwsysTerminal_Color_ForegroundMagenta:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_MAGENTA);
      break;
    case kwsysTerminal_Color_ForegroundCyan:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_CYAN);
      break;
    case kwsysTerminal_Color_ForegroundWhite:
      fprintf(stream, KWSYS_TERMINAL_VT100_FOREGROUND_WHITE);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1850.cpp,"[0, 0, 0, 0, 9, 0, 0, 0, 9, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 9, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1850.cpp,33
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,271,"fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLACK);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1851.cpp,"{
    case kwsysTerminal_Color_BackgroundBlack:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLACK);
      break;
    case kwsysTerminal_Color_BackgroundRed:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_RED);
      break;
    case kwsysTerminal_Color_BackgroundGreen:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_GREEN);
      break;
    case kwsysTerminal_Color_BackgroundYellow:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_YELLOW);
      break;
    case kwsysTerminal_Color_BackgroundBlue:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLUE);
      break;
    case kwsysTerminal_Color_BackgroundMagenta:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_MAGENTA);
      break;
    case kwsysTerminal_Color_BackgroundCyan:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_CYAN);
      break;
    case kwsysTerminal_Color_BackgroundWhite:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_WHITE);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1851.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1851.cpp,38
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,274,"fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_RED);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1852.cpp,"{
    case kwsysTerminal_Color_BackgroundBlack:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLACK);
      break;
    case kwsysTerminal_Color_BackgroundRed:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_RED);
      break;
    case kwsysTerminal_Color_BackgroundGreen:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_GREEN);
      break;
    case kwsysTerminal_Color_BackgroundYellow:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_YELLOW);
      break;
    case kwsysTerminal_Color_BackgroundBlue:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLUE);
      break;
    case kwsysTerminal_Color_BackgroundMagenta:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_MAGENTA);
      break;
    case kwsysTerminal_Color_BackgroundCyan:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_CYAN);
      break;
    case kwsysTerminal_Color_BackgroundWhite:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_WHITE);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1852.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1852.cpp,41
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,277,"fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_GREEN);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1853.cpp,"{
    case kwsysTerminal_Color_BackgroundBlack:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLACK);
      break;
    case kwsysTerminal_Color_BackgroundRed:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_RED);
      break;
    case kwsysTerminal_Color_BackgroundGreen:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_GREEN);
      break;
    case kwsysTerminal_Color_BackgroundYellow:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_YELLOW);
      break;
    case kwsysTerminal_Color_BackgroundBlue:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLUE);
      break;
    case kwsysTerminal_Color_BackgroundMagenta:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_MAGENTA);
      break;
    case kwsysTerminal_Color_BackgroundCyan:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_CYAN);
      break;
    case kwsysTerminal_Color_BackgroundWhite:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_WHITE);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1853.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1853.cpp,44
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,280,"fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_YELLOW);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1854.cpp,"{
    case kwsysTerminal_Color_BackgroundBlack:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLACK);
      break;
    case kwsysTerminal_Color_BackgroundRed:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_RED);
      break;
    case kwsysTerminal_Color_BackgroundGreen:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_GREEN);
      break;
    case kwsysTerminal_Color_BackgroundYellow:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_YELLOW);
      break;
    case kwsysTerminal_Color_BackgroundBlue:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLUE);
      break;
    case kwsysTerminal_Color_BackgroundMagenta:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_MAGENTA);
      break;
    case kwsysTerminal_Color_BackgroundCyan:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_CYAN);
      break;
    case kwsysTerminal_Color_BackgroundWhite:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_WHITE);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1854.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1854.cpp,47
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,283,"fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLUE);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1855.cpp,"{
    case kwsysTerminal_Color_BackgroundBlack:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLACK);
      break;
    case kwsysTerminal_Color_BackgroundRed:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_RED);
      break;
    case kwsysTerminal_Color_BackgroundGreen:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_GREEN);
      break;
    case kwsysTerminal_Color_BackgroundYellow:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_YELLOW);
      break;
    case kwsysTerminal_Color_BackgroundBlue:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLUE);
      break;
    case kwsysTerminal_Color_BackgroundMagenta:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_MAGENTA);
      break;
    case kwsysTerminal_Color_BackgroundCyan:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_CYAN);
      break;
    case kwsysTerminal_Color_BackgroundWhite:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_WHITE);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1855.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1855.cpp,50
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,286,"fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_MAGENTA);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1856.cpp,"{
    case kwsysTerminal_Color_BackgroundBlack:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLACK);
      break;
    case kwsysTerminal_Color_BackgroundRed:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_RED);
      break;
    case kwsysTerminal_Color_BackgroundGreen:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_GREEN);
      break;
    case kwsysTerminal_Color_BackgroundYellow:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_YELLOW);
      break;
    case kwsysTerminal_Color_BackgroundBlue:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLUE);
      break;
    case kwsysTerminal_Color_BackgroundMagenta:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_MAGENTA);
      break;
    case kwsysTerminal_Color_BackgroundCyan:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_CYAN);
      break;
    case kwsysTerminal_Color_BackgroundWhite:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_WHITE);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1856.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1856.cpp,53
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,289,"fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_CYAN);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1857.cpp,"{
    case kwsysTerminal_Color_BackgroundBlack:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLACK);
      break;
    case kwsysTerminal_Color_BackgroundRed:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_RED);
      break;
    case kwsysTerminal_Color_BackgroundGreen:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_GREEN);
      break;
    case kwsysTerminal_Color_BackgroundYellow:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_YELLOW);
      break;
    case kwsysTerminal_Color_BackgroundBlue:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLUE);
      break;
    case kwsysTerminal_Color_BackgroundMagenta:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_MAGENTA);
      break;
    case kwsysTerminal_Color_BackgroundCyan:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_CYAN);
      break;
    case kwsysTerminal_Color_BackgroundWhite:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_WHITE);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1857.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1857.cpp,56
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,292,"fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_WHITE);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1858.cpp,"{
    case kwsysTerminal_Color_BackgroundBlack:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLACK);
      break;
    case kwsysTerminal_Color_BackgroundRed:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_RED);
      break;
    case kwsysTerminal_Color_BackgroundGreen:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_GREEN);
      break;
    case kwsysTerminal_Color_BackgroundYellow:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_YELLOW);
      break;
    case kwsysTerminal_Color_BackgroundBlue:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_BLUE);
      break;
    case kwsysTerminal_Color_BackgroundMagenta:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_MAGENTA);
      break;
    case kwsysTerminal_Color_BackgroundCyan:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_CYAN);
      break;
    case kwsysTerminal_Color_BackgroundWhite:
      fprintf(stream, KWSYS_TERMINAL_VT100_BACKGROUND_WHITE);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1858.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1858.cpp,59
second/download/CMake/CMake/CMake/Source/kwsys/Terminal.cpp,296,"fprintf(stream, KWSYS_TERMINAL_VT100_BOLD);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1859.cpp,"{
    fprintf(stream, KWSYS_TERMINAL_VT100_BOLD);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1859.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1859.cpp,63
second/download/CMake/CMake/CMake/Source/kwsys/SystemInformation.cpp,2787,"sprintf(sn, ""%.2x%.2x-%.2x%.2x-%.2x%.2x-%.2x%.2x-%.2x%.2x-%.2x%.2x"",
          ((SerialNumber[1] & 0xff000000) >> 24),
          ((SerialNumber[1] & 0x00ff0000) >> 16),
          ((SerialNumber[1] & 0x0000ff00) >> 8),
          ((SerialNumber[1] & 0x000000ff) >> 0),
          ((SerialNumber[2] & 0xff000000) >> 24),
          ((SerialNumber[2] & 0x00ff0000) >> 16),
          ((SerialNumber[2] & 0x0000ff00) >> 8),
          ((SerialNumber[2] & 0x000000ff) >> 0),
          ((SerialNumber[3] & 0xff000000) >> 24),
          ((SerialNumber[3] & 0x00ff0000) >> 16),
          ((SerialNumber[3] & 0x0000ff00) >> 8),
          ((SerialNumber[3] & 0x000000ff) >> 0));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1860.cpp,"{
  // Check to see if the processor supports the processor serial number.
  if (!this->Features.HasSerial) {
    return false;
  }

#if USE_CPUID
  int SerialNumber[4];

  if (!call_cpuid(3, SerialNumber)) {
    return false;
  }

  // Process the returned information.
  //    ; eax = 3 --> ebx: top 32 bits are the processor signature bits --> NB:
  //    Transmeta only ?!?
  //    ;        ecx: middle 32 bits are the processor signature bits
  //    ;        edx: bottom 32 bits are the processor signature bits
  char sn[128];
  sprintf(sn, ""%.2x%.2x-%.2x%.2x-%.2x%.2x-%.2x%.2x-%.2x%.2x-%.2x%.2x"",
          ((SerialNumber[1] & 0xff000000) >> 24),
          ((SerialNumber[1] & 0x00ff0000) >> 16),
          ((SerialNumber[1] & 0x0000ff00) >> 8),
          ((SerialNumber[1] & 0x000000ff) >> 0),
          ((SerialNumber[2] & 0xff000000) >> 24),
          ((SerialNumber[2] & 0x00ff0000) >> 16),
          ((SerialNumber[2] & 0x0000ff00) >> 8),
          ((SerialNumber[2] & 0x000000ff) >> 0),
          ((SerialNumber[3] & 0xff000000) >> 24),
          ((SerialNumber[3] & 0x00ff0000) >> 16),
          ((SerialNumber[3] & 0x0000ff00) >> 8),
          ((SerialNumber[3] & 0x000000ff) >> 0));
  this->ChipID.SerialNumber = sn;
  return true;

#else
  return false;
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1860.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 0, 44, 0, 0, 2, 2, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 14, 0, 2, 2, 1, 0, 2, 0, 0, 2, 0, 16, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1860.cpp,20
second/download/CMake/CMake/CMake/Source/kwsys/SystemInformation.cpp,5204,"sprintf(operatingSystem, ""%ls (Build %ld)"", osvi.szCSDVersion,
                osvi.dwBuildNumber & 0xFFFF);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1861.cpp,"{
        if (osvi.wProductType == VER_NT_WORKSTATION) {
          if (osvi.dwMajorVersion == 6 && osvi.dwMinorVersion == 0) {
            this->OSRelease = ""Vista"";
          }
          if (osvi.dwMajorVersion == 6 && osvi.dwMinorVersion == 1) {
            this->OSRelease = ""7"";
          }
// VER_SUITE_PERSONAL may not be defined
#ifdef VER_SUITE_PERSONAL
          else {
            if (osvi.wSuiteMask & VER_SUITE_PERSONAL) {
              this->OSRelease += "" Personal"";
            } else {
              this->OSRelease += "" Professional"";
            }
          }
#endif
        } else if (osvi.wProductType == VER_NT_SERVER) {
          // Check for .NET Server instead of Windows XP.
          if (osvi.dwMajorVersion == 5 && osvi.dwMinorVersion == 1) {
            this->OSRelease = "".NET"";
          }

          // Continue with the type detection.
          if (osvi.wSuiteMask & VER_SUITE_DATACENTER) {
            this->OSRelease += "" DataCenter Server"";
          } else if (osvi.wSuiteMask & VER_SUITE_ENTERPRISE) {
            this->OSRelease += "" Advanced Server"";
          } else {
            this->OSRelease += "" Server"";
          }
        }

        sprintf(operatingSystem, ""%ls (Build %ld)"", osvi.szCSDVersion,
                osvi.dwBuildNumber & 0xFFFF);
        this->OSVersion = operatingSystem;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1861.cpp,"[8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 3, 0, 1, 0, 0, 10, 2, 4, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1861.cpp,85
second/download/CMake/CMake/CMake/Source/kwsys/SystemInformation.cpp,5248,"sprintf(operatingSystem, ""version %ld.%ld %ls (Build %ld)"",
                osvi.dwMajorVersion, osvi.dwMinorVersion, osvi.szCSDVersion,
                osvi.dwBuildNumber & 0xFFFF);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1862.cpp,"{
        // NB: NT 4.0 and earlier.
        sprintf(operatingSystem, ""version %ld.%ld %ls (Build %ld)"",
                osvi.dwMajorVersion, osvi.dwMinorVersion, osvi.szCSDVersion,
                osvi.dwBuildNumber & 0xFFFF);
        this->OSVersion = operatingSystem;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1862.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1862.cpp,129
second/download/CMake/CMake/CMake/Source/kwsys/SystemInformation.cpp,5276,"sprintf(operatingSystem, ""%ls (Build %ld)"", osvi.szCSDVersion,
                osvi.dwBuildNumber & 0xFFFF);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1863.cpp,"{
        // Windows 2000 and everything else.
        sprintf(operatingSystem, ""%ls (Build %ld)"", osvi.szCSDVersion,
                osvi.dwBuildNumber & 0xFFFF);
        this->OSVersion = operatingSystem;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1863.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1863.cpp,157
second/download/CMake/CMake/CMake/Source/kwsys/testFail.cpp,14,"printf(""DASHBOARD_TEST_FROM_CTEST = %s\n"", env);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1864.cpp,"{
    if (strcmp(env, ""1"") == 0) {
      oldCtest = 1;
    }
    printf(""DASHBOARD_TEST_FROM_CTEST = %s\n"", env);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1864.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1864.cpp,8
second/download/CMake/CMake/CMake/Source/kwsys/testFail.cpp,16,"printf(""%s: This test intentionally fails\n"", argv[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1865.cpp,"{
  char* env = getenv(""DASHBOARD_TEST_FROM_CTEST"");
  int oldCtest = 0;
  if (env) {
    if (strcmp(env, ""1"") == 0) {
      oldCtest = 1;
    }
    printf(""DASHBOARD_TEST_FROM_CTEST = %s\n"", env);
  }
  printf(""%s: This test intentionally fails\n"", argv[0]);
  if (oldCtest) {
    printf(""The version of ctest is not able to handle intentionally failing ""
           ""tests, so pass.\n"");
    return 0;
  }
  return argc;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1865.cpp,"[3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 17, 0, 0, 2, 2, 0, 0, 2, 11, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 3, 3, 0, 0, 5, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1865.cpp,10
second/download/CMake/CMake/CMake/Source/kwsys/testFail.cpp,18,"printf(""The version of ctest is not able to handle intentionally failing ""
           ""tests, so pass.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1866.cpp,"{
    printf(""The version of ctest is not able to handle intentionally failing ""
           ""tests, so pass.\n"");
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1866.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1866.cpp,12
second/download/CMake/CMake/CMake/Source/kwsys/ProcessUNIX.cpp,2276,"sprintf(cp->ProcessResults[idx].ExitExceptionString, ""Signal %d"", sig);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1867.cpp,"{
#ifdef SIGSEGV
    case SIGSEGV:
      KWSYSPE_CASE(Fault, ""Segmentation fault"");
      break;
#endif
#ifdef SIGBUS
#if !defined(SIGSEGV) || SIGBUS != SIGSEGV
    case SIGBUS:
      KWSYSPE_CASE(Fault, ""Bus error"");
      break;
#endif
#endif
#ifdef SIGFPE
    case SIGFPE:
      KWSYSPE_CASE(Numerical, ""Floating-point exception"");
      break;
#endif
#ifdef SIGILL
    case SIGILL:
      KWSYSPE_CASE(Illegal, ""Illegal instruction"");
      break;
#endif
#ifdef SIGINT
    case SIGINT:
      KWSYSPE_CASE(Interrupt, ""User interrupt"");
      break;
#endif
#ifdef SIGABRT
    case SIGABRT:
      KWSYSPE_CASE(Other, ""Child aborted"");
      break;
#endif
#ifdef SIGKILL
    case SIGKILL:
      KWSYSPE_CASE(Other, ""Child killed"");
      break;
#endif
#ifdef SIGTERM
    case SIGTERM:
      KWSYSPE_CASE(Other, ""Child terminated"");
      break;
#endif
#ifdef SIGHUP
    case SIGHUP:
      KWSYSPE_CASE(Other, ""SIGHUP"");
      break;
#endif
#ifdef SIGQUIT
    case SIGQUIT:
      KWSYSPE_CASE(Other, ""SIGQUIT"");
      break;
#endif
#ifdef SIGTRAP
    case SIGTRAP:
      KWSYSPE_CASE(Other, ""SIGTRAP"");
      break;
#endif
#ifdef SIGIOT
#if !defined(SIGABRT) || SIGIOT != SIGABRT
    case SIGIOT:
      KWSYSPE_CASE(Other, ""SIGIOT"");
      break;
#endif
#endif
#ifdef SIGUSR1
    case SIGUSR1:
      KWSYSPE_CASE(Other, ""SIGUSR1"");
      break;
#endif
#ifdef SIGUSR2
    case SIGUSR2:
      KWSYSPE_CASE(Other, ""SIGUSR2"");
      break;
#endif
#ifdef SIGPIPE
    case SIGPIPE:
      KWSYSPE_CASE(Other, ""SIGPIPE"");
      break;
#endif
#ifdef SIGALRM
    case SIGALRM:
      KWSYSPE_CASE(Other, ""SIGALRM"");
      break;
#endif
#ifdef SIGSTKFLT
    case SIGSTKFLT:
      KWSYSPE_CASE(Other, ""SIGSTKFLT"");
      break;
#endif
#ifdef SIGCHLD
    case SIGCHLD:
      KWSYSPE_CASE(Other, ""SIGCHLD"");
      break;
#elif defined(SIGCLD)
    case SIGCLD:
      KWSYSPE_CASE(Other, ""SIGCLD"");
      break;
#endif
#ifdef SIGCONT
    case SIGCONT:
      KWSYSPE_CASE(Other, ""SIGCONT"");
      break;
#endif
#ifdef SIGSTOP
    case SIGSTOP:
      KWSYSPE_CASE(Other, ""SIGSTOP"");
      break;
#endif
#ifdef SIGTSTP
    case SIGTSTP:
      KWSYSPE_CASE(Other, ""SIGTSTP"");
      break;
#endif
#ifdef SIGTTIN
    case SIGTTIN:
      KWSYSPE_CASE(Other, ""SIGTTIN"");
      break;
#endif
#ifdef SIGTTOU
    case SIGTTOU:
      KWSYSPE_CASE(Other, ""SIGTTOU"");
      break;
#endif
#ifdef SIGURG
    case SIGURG:
      KWSYSPE_CASE(Other, ""SIGURG"");
      break;
#endif
#ifdef SIGXCPU
    case SIGXCPU:
      KWSYSPE_CASE(Other, ""SIGXCPU"");
      break;
#endif
#ifdef SIGXFSZ
    case SIGXFSZ:
      KWSYSPE_CASE(Other, ""SIGXFSZ"");
      break;
#endif
#ifdef SIGVTALRM
    case SIGVTALRM:
      KWSYSPE_CASE(Other, ""SIGVTALRM"");
      break;
#endif
#ifdef SIGPROF
    case SIGPROF:
      KWSYSPE_CASE(Other, ""SIGPROF"");
      break;
#endif
#ifdef SIGWINCH
    case SIGWINCH:
      KWSYSPE_CASE(Other, ""SIGWINCH"");
      break;
#endif
#ifdef SIGPOLL
    case SIGPOLL:
      KWSYSPE_CASE(Other, ""SIGPOLL"");
      break;
#endif
#ifdef SIGIO
#if !defined(SIGPOLL) || SIGIO != SIGPOLL
    case SIGIO:
      KWSYSPE_CASE(Other, ""SIGIO"");
      break;
#endif
#endif
#ifdef SIGPWR
    case SIGPWR:
      KWSYSPE_CASE(Other, ""SIGPWR"");
      break;
#endif
#ifdef SIGSYS
    case SIGSYS:
      KWSYSPE_CASE(Other, ""SIGSYS"");
      break;
#endif
#ifdef SIGUNUSED
#if !defined(SIGSYS) || SIGUNUSED != SIGSYS
    case SIGUNUSED:
      KWSYSPE_CASE(Other, ""SIGUNUSED"");
      break;
#endif
#endif
    default:
      cp->ProcessResults[idx].ExitException = kwsysProcess_Exception_Other;
      sprintf(cp->ProcessResults[idx].ExitExceptionString, ""Signal %d"", sig);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1867.cpp,"[4, 0, 0, 0, 36, 0, 0, 0, 35, 1, 1, 0, 0, 0, 0, 170, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 41, 0, 0, 37, 0, 78, 77, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1867.cpp,188
second/download/CMake/CMake/CMake/Source/kwsys/ProcessUNIX.cpp,2525,"sprintf(fname, ""/proc/%d/stat"", pid);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1868.cpp,"{
        struct stat finfo;
        sprintf(fname, ""/proc/%d/stat"", pid);
        if (stat(fname, &finfo) == 0) {
          FILE* f = fopen(fname, ""r"");
          if (f) {
            size_t nread = fread(buffer, 1, KWSYSPE_PIPE_BUFFER_SIZE, f);
            fclose(f);
            buffer[nread] = '\0';
            if (nread > 0) {
              const char* rparen = strrchr(buffer, ')');
              int ppid;
              if (rparen && (sscanf(rparen + 1, ""%*s %d"", &ppid) == 1)) {
                if (ppid == process_id) {
                  /* Recursively kill this child and its children.  */
                  kwsysProcessKill(pid);
                }
              }
            }
          }
        }
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1868.cpp,"[5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 1, 41, 0, 0, 5, 5, 0, 0, 3, 10, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 0, 5, 5, 0, 0, 8, 0, 0, 4, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1868.cpp,41
second/download/CMake/CMake/CMake/Source/kwsys/ProcessWin32.cpp,1868,"_snprintf(cp->ErrorMessage, KWSYSPE_PIPE_BUFFER_SIZE,
                  ""Process execution failed with error 0x%X.  ""
                  ""FormatMessage failed with error 0x%X"",
                  error, GetLastError());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1869.cpp,"{
        /* FormatMessage failed.  Use a default message.  */
        _snprintf(cp->ErrorMessage, KWSYSPE_PIPE_BUFFER_SIZE,
                  ""Process execution failed with error 0x%X.  ""
                  ""FormatMessage failed with error 0x%X"",
                  error, GetLastError());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1869.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1869.cpp,15
second/download/CMake/CMake/CMake/Source/kwsys/ProcessWin32.cpp,1876,"_snprintf(cp->ErrorMessage, KWSYSPE_PIPE_BUFFER_SIZE,
                  ""Process execution failed with error 0x%X.  ""
                  ""WideCharToMultiByte failed with error 0x%X"",
                  error, GetLastError());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1870.cpp,"{
        /* WideCharToMultiByte failed.  Use a default message.  */
        _snprintf(cp->ErrorMessage, KWSYSPE_PIPE_BUFFER_SIZE,
                  ""Process execution failed with error 0x%X.  ""
                  ""WideCharToMultiByte failed with error 0x%X"",
                  error, GetLastError());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1870.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1870.cpp,23
second/download/CMake/CMake/CMake/Source/kwsys/ProcessWin32.cpp,2145,"_snprintf(cp->ProcessResults[idx].ExitExceptionString,
                KWSYSPE_PIPE_BUFFER_SIZE, ""Exit code 0x%x\n"", code);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1871.cpp,"{
    case STATUS_CONTROL_C_EXIT:
      KWSYSPE_CASE(Interrupt, ""User interrupt"");
      break;

    case STATUS_FLOAT_DENORMAL_OPERAND:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (denormal operand)"");
      break;
    case STATUS_FLOAT_DIVIDE_BY_ZERO:
      KWSYSPE_CASE(Numerical, ""Divide-by-zero"");
      break;
    case STATUS_FLOAT_INEXACT_RESULT:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (inexact result)"");
      break;
    case STATUS_FLOAT_INVALID_OPERATION:
      KWSYSPE_CASE(Numerical, ""Invalid floating-point operation"");
      break;
    case STATUS_FLOAT_OVERFLOW:
      KWSYSPE_CASE(Numerical, ""Floating-point overflow"");
      break;
    case STATUS_FLOAT_STACK_CHECK:
      KWSYSPE_CASE(Numerical, ""Floating-point stack check failed"");
      break;
    case STATUS_FLOAT_UNDERFLOW:
      KWSYSPE_CASE(Numerical, ""Floating-point underflow"");
      break;
#ifdef STATUS_FLOAT_MULTIPLE_FAULTS
    case STATUS_FLOAT_MULTIPLE_FAULTS:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (multiple faults)"");
      break;
#endif
#ifdef STATUS_FLOAT_MULTIPLE_TRAPS
    case STATUS_FLOAT_MULTIPLE_TRAPS:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (multiple traps)"");
      break;
#endif
    case STATUS_INTEGER_DIVIDE_BY_ZERO:
      KWSYSPE_CASE(Numerical, ""Integer divide-by-zero"");
      break;
    case STATUS_INTEGER_OVERFLOW:
      KWSYSPE_CASE(Numerical, ""Integer overflow"");
      break;

    case STATUS_DATATYPE_MISALIGNMENT:
      KWSYSPE_CASE(Fault, ""Datatype misalignment"");
      break;
    case STATUS_ACCESS_VIOLATION:
      KWSYSPE_CASE(Fault, ""Access violation"");
      break;
    case STATUS_IN_PAGE_ERROR:
      KWSYSPE_CASE(Fault, ""In-page error"");
      break;
    case STATUS_INVALID_HANDLE:
      KWSYSPE_CASE(Fault, ""Invalid hanlde"");
      break;
    case STATUS_NONCONTINUABLE_EXCEPTION:
      KWSYSPE_CASE(Fault, ""Noncontinuable exception"");
      break;
    case STATUS_INVALID_DISPOSITION:
      KWSYSPE_CASE(Fault, ""Invalid disposition"");
      break;
    case STATUS_ARRAY_BOUNDS_EXCEEDED:
      KWSYSPE_CASE(Fault, ""Array bounds exceeded"");
      break;
    case STATUS_STACK_OVERFLOW:
      KWSYSPE_CASE(Fault, ""Stack overflow"");
      break;

    case STATUS_ILLEGAL_INSTRUCTION:
      KWSYSPE_CASE(Illegal, ""Illegal instruction"");
      break;
    case STATUS_PRIVILEGED_INSTRUCTION:
      KWSYSPE_CASE(Illegal, ""Privileged instruction"");
      break;

    case STATUS_NO_MEMORY:
    default:
      cp->ProcessResults[idx].ExitException = kwsysProcess_Exception_Other;
      _snprintf(cp->ProcessResults[idx].ExitExceptionString,
                KWSYSPE_PIPE_BUFFER_SIZE, ""Exit code 0x%x\n"", code);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1871.cpp,"[0, 0, 0, 0, 23, 0, 0, 0, 23, 1, 1, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 23, 0, 0, 24, 0, 48, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1871.cpp,81
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,79,"fprintf(stdout, ""Output on stdout from test returning 0.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1872.cpp,"{
  /* This is a very basic functional test of kwsysProcess.  It is repeated
     numerous times to verify that there are no resource leaks in kwsysProcess
     that eventually lead to an error.  Many versions of OS X will fail after
     256 leaked file handles, so 257 iterations seems to be a good test.  On
     the other hand, too many iterations will cause the test to time out -
     especially if the test is instrumented with e.g. valgrind.

     If you have problems with this test timing out on your system, or want to
     run more than 257 iterations, you can change the number of iterations by
     setting the KWSYS_TEST_PROCESS_1_COUNT environment variable.  */
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output on stdout from test returning 0.\n"");
  fprintf(stderr, ""Output on stderr from test returning 0.\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1872.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1872.cpp,14
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,80,"fprintf(stderr, ""Output on stderr from test returning 0.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1873.cpp,"{
  /* This is a very basic functional test of kwsysProcess.  It is repeated
     numerous times to verify that there are no resource leaks in kwsysProcess
     that eventually lead to an error.  Many versions of OS X will fail after
     256 leaked file handles, so 257 iterations seems to be a good test.  On
     the other hand, too many iterations will cause the test to time out -
     especially if the test is instrumented with e.g. valgrind.

     If you have problems with this test timing out on your system, or want to
     run more than 257 iterations, you can change the number of iterations by
     setting the KWSYS_TEST_PROCESS_1_COUNT environment variable.  */
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output on stdout from test returning 0.\n"");
  fprintf(stderr, ""Output on stderr from test returning 0.\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1873.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1873.cpp,15
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,88,"fprintf(stdout, ""Output on stdout from test returning 123.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1874.cpp,"{
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output on stdout from test returning 123.\n"");
  fprintf(stderr, ""Output on stderr from test returning 123.\n"");
  return 123;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1874.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1874.cpp,4
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,89,"fprintf(stderr, ""Output on stderr from test returning 123.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1875.cpp,"{
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output on stdout from test returning 123.\n"");
  fprintf(stderr, ""Output on stderr from test returning 123.\n"");
  return 123;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1875.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1875.cpp,5
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,97,"fprintf(stdout, ""Output before sleep on stdout from timeout test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1876.cpp,"{
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output before sleep on stdout from timeout test.\n"");
  fprintf(stderr, ""Output before sleep on stderr from timeout test.\n"");
  fflush(stdout);
  fflush(stderr);
  testProcess_sleep(15);
  fprintf(stdout, ""Output after sleep on stdout from timeout test.\n"");
  fprintf(stderr, ""Output after sleep on stderr from timeout test.\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1876.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 9, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1876.cpp,4
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,98,"fprintf(stderr, ""Output before sleep on stderr from timeout test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1877.cpp,"{
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output before sleep on stdout from timeout test.\n"");
  fprintf(stderr, ""Output before sleep on stderr from timeout test.\n"");
  fflush(stdout);
  fflush(stderr);
  testProcess_sleep(15);
  fprintf(stdout, ""Output after sleep on stdout from timeout test.\n"");
  fprintf(stderr, ""Output after sleep on stderr from timeout test.\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1877.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 9, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1877.cpp,5
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,102,"fprintf(stdout, ""Output after sleep on stdout from timeout test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1878.cpp,"{
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output before sleep on stdout from timeout test.\n"");
  fprintf(stderr, ""Output before sleep on stderr from timeout test.\n"");
  fflush(stdout);
  fflush(stderr);
  testProcess_sleep(15);
  fprintf(stdout, ""Output after sleep on stdout from timeout test.\n"");
  fprintf(stderr, ""Output after sleep on stderr from timeout test.\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1878.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 9, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1878.cpp,9
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,103,"fprintf(stderr, ""Output after sleep on stderr from timeout test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1879.cpp,"{
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output before sleep on stdout from timeout test.\n"");
  fprintf(stderr, ""Output before sleep on stderr from timeout test.\n"");
  fflush(stdout);
  fflush(stderr);
  testProcess_sleep(15);
  fprintf(stdout, ""Output after sleep on stdout from timeout test.\n"");
  fprintf(stderr, ""Output after sleep on stderr from timeout test.\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1879.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 9, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1879.cpp,10
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,126,"fprintf(stdout, ""Output before crash on stdout from crash test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1880.cpp,"{
  /* Prepare a pointer to an invalid address.  Don't use null, because
  dereferencing null is undefined behaviour and compilers are free to
  do whatever they want. ex: Clang will warn at compile time, or even
  optimize away the write. We hope to 'outsmart' them by using
  'volatile' and a slightly larger address, based on a runtime value. */
  volatile int* invalidAddress = 0;
  invalidAddress += argc ? 1 : 2;

#if defined(_WIN32)
  /* Avoid error diagnostic popups since we are crashing on purpose.  */
  SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOGPFAULTERRORBOX);
#elif defined(__BEOS__) || defined(__HAIKU__)
  /* Avoid error diagnostic popups since we are crashing on purpose.  */
  disable_debugger(1);
#endif
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output before crash on stdout from crash test.\n"");
  fprintf(stderr, ""Output before crash on stderr from crash test.\n"");
  fflush(stdout);
  fflush(stderr);
  assert(invalidAddress); /* Quiet Clang scan-build. */
  /* Provoke deliberate crash by writing to the invalid address. */
  *invalidAddress = 0;
  fprintf(stdout, ""Output after crash on stdout from crash test.\n"");
  fprintf(stderr, ""Output after crash on stderr from crash test.\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1880.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 33, 0, 0, 1, 1, 0, 0, 1, 10, 0, 0, 0, 0, 1, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 12, 0, 0, 13, 0, 16, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1880.cpp,19
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,127,"fprintf(stderr, ""Output before crash on stderr from crash test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1881.cpp,"{
  /* Prepare a pointer to an invalid address.  Don't use null, because
  dereferencing null is undefined behaviour and compilers are free to
  do whatever they want. ex: Clang will warn at compile time, or even
  optimize away the write. We hope to 'outsmart' them by using
  'volatile' and a slightly larger address, based on a runtime value. */
  volatile int* invalidAddress = 0;
  invalidAddress += argc ? 1 : 2;

#if defined(_WIN32)
  /* Avoid error diagnostic popups since we are crashing on purpose.  */
  SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOGPFAULTERRORBOX);
#elif defined(__BEOS__) || defined(__HAIKU__)
  /* Avoid error diagnostic popups since we are crashing on purpose.  */
  disable_debugger(1);
#endif
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output before crash on stdout from crash test.\n"");
  fprintf(stderr, ""Output before crash on stderr from crash test.\n"");
  fflush(stdout);
  fflush(stderr);
  assert(invalidAddress); /* Quiet Clang scan-build. */
  /* Provoke deliberate crash by writing to the invalid address. */
  *invalidAddress = 0;
  fprintf(stdout, ""Output after crash on stdout from crash test.\n"");
  fprintf(stderr, ""Output after crash on stderr from crash test.\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1881.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 33, 0, 0, 1, 1, 0, 0, 1, 10, 0, 0, 0, 0, 1, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 12, 0, 0, 13, 0, 16, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1881.cpp,20
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,133,"fprintf(stdout, ""Output after crash on stdout from crash test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1882.cpp,"{
  /* Prepare a pointer to an invalid address.  Don't use null, because
  dereferencing null is undefined behaviour and compilers are free to
  do whatever they want. ex: Clang will warn at compile time, or even
  optimize away the write. We hope to 'outsmart' them by using
  'volatile' and a slightly larger address, based on a runtime value. */
  volatile int* invalidAddress = 0;
  invalidAddress += argc ? 1 : 2;

#if defined(_WIN32)
  /* Avoid error diagnostic popups since we are crashing on purpose.  */
  SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOGPFAULTERRORBOX);
#elif defined(__BEOS__) || defined(__HAIKU__)
  /* Avoid error diagnostic popups since we are crashing on purpose.  */
  disable_debugger(1);
#endif
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output before crash on stdout from crash test.\n"");
  fprintf(stderr, ""Output before crash on stderr from crash test.\n"");
  fflush(stdout);
  fflush(stderr);
  assert(invalidAddress); /* Quiet Clang scan-build. */
  /* Provoke deliberate crash by writing to the invalid address. */
  *invalidAddress = 0;
  fprintf(stdout, ""Output after crash on stdout from crash test.\n"");
  fprintf(stderr, ""Output after crash on stderr from crash test.\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1882.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 33, 0, 0, 1, 1, 0, 0, 1, 10, 0, 0, 0, 0, 1, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 12, 0, 0, 13, 0, 16, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1882.cpp,26
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,134,"fprintf(stderr, ""Output after crash on stderr from crash test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1883.cpp,"{
  /* Prepare a pointer to an invalid address.  Don't use null, because
  dereferencing null is undefined behaviour and compilers are free to
  do whatever they want. ex: Clang will warn at compile time, or even
  optimize away the write. We hope to 'outsmart' them by using
  'volatile' and a slightly larger address, based on a runtime value. */
  volatile int* invalidAddress = 0;
  invalidAddress += argc ? 1 : 2;

#if defined(_WIN32)
  /* Avoid error diagnostic popups since we are crashing on purpose.  */
  SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOGPFAULTERRORBOX);
#elif defined(__BEOS__) || defined(__HAIKU__)
  /* Avoid error diagnostic popups since we are crashing on purpose.  */
  disable_debugger(1);
#endif
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output before crash on stdout from crash test.\n"");
  fprintf(stderr, ""Output before crash on stderr from crash test.\n"");
  fflush(stdout);
  fflush(stderr);
  assert(invalidAddress); /* Quiet Clang scan-build. */
  /* Provoke deliberate crash by writing to the invalid address. */
  *invalidAddress = 0;
  fprintf(stdout, ""Output after crash on stdout from crash test.\n"");
  fprintf(stderr, ""Output after crash on stderr from crash test.\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1883.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 33, 0, 0, 1, 1, 0, 0, 1, 10, 0, 0, 0, 0, 1, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 12, 0, 0, 13, 0, 16, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1883.cpp,27
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,147,"fprintf(stdout, ""Output on stdout before recursive test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1884.cpp,"{
  int r;
  const char* cmd[4];
  (void)argc;
  cmd[0] = argv[0];
  cmd[1] = ""run"";
  cmd[2] = ""4"";
  cmd[3] = 0;
  fprintf(stdout, ""Output on stdout before recursive test.\n"");
  fprintf(stderr, ""Output on stderr before recursive test.\n"");
  fflush(stdout);
  fflush(stderr);
  r = runChild(cmd, kwsysProcess_State_Exception, kwsysProcess_Exception_Fault,
               1, 1, 1, 0, 15, 0, 1, 0, 0, 0);
  fprintf(stdout, ""Output on stdout after recursive test.\n"");
  fprintf(stderr, ""Output on stderr after recursive test.\n"");
  fflush(stdout);
  fflush(stderr);
  return r;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1884.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 39, 0, 0, 2, 2, 0, 0, 0, 23, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 9, 0, 0, 14, 0, 25, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1884.cpp,9
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,148,"fprintf(stderr, ""Output on stderr before recursive test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1885.cpp,"{
  int r;
  const char* cmd[4];
  (void)argc;
  cmd[0] = argv[0];
  cmd[1] = ""run"";
  cmd[2] = ""4"";
  cmd[3] = 0;
  fprintf(stdout, ""Output on stdout before recursive test.\n"");
  fprintf(stderr, ""Output on stderr before recursive test.\n"");
  fflush(stdout);
  fflush(stderr);
  r = runChild(cmd, kwsysProcess_State_Exception, kwsysProcess_Exception_Fault,
               1, 1, 1, 0, 15, 0, 1, 0, 0, 0);
  fprintf(stdout, ""Output on stdout after recursive test.\n"");
  fprintf(stderr, ""Output on stderr after recursive test.\n"");
  fflush(stdout);
  fflush(stderr);
  return r;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1885.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 39, 0, 0, 2, 2, 0, 0, 0, 23, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 9, 0, 0, 14, 0, 25, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1885.cpp,10
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,153,"fprintf(stdout, ""Output on stdout after recursive test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1886.cpp,"{
  int r;
  const char* cmd[4];
  (void)argc;
  cmd[0] = argv[0];
  cmd[1] = ""run"";
  cmd[2] = ""4"";
  cmd[3] = 0;
  fprintf(stdout, ""Output on stdout before recursive test.\n"");
  fprintf(stderr, ""Output on stderr before recursive test.\n"");
  fflush(stdout);
  fflush(stderr);
  r = runChild(cmd, kwsysProcess_State_Exception, kwsysProcess_Exception_Fault,
               1, 1, 1, 0, 15, 0, 1, 0, 0, 0);
  fprintf(stdout, ""Output on stdout after recursive test.\n"");
  fprintf(stderr, ""Output on stderr after recursive test.\n"");
  fflush(stdout);
  fflush(stderr);
  return r;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1886.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 39, 0, 0, 2, 2, 0, 0, 0, 23, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 9, 0, 0, 14, 0, 25, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1886.cpp,15
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,154,"fprintf(stderr, ""Output on stderr after recursive test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1887.cpp,"{
  int r;
  const char* cmd[4];
  (void)argc;
  cmd[0] = argv[0];
  cmd[1] = ""run"";
  cmd[2] = ""4"";
  cmd[3] = 0;
  fprintf(stdout, ""Output on stdout before recursive test.\n"");
  fprintf(stderr, ""Output on stderr before recursive test.\n"");
  fflush(stdout);
  fflush(stderr);
  r = runChild(cmd, kwsysProcess_State_Exception, kwsysProcess_Exception_Fault,
               1, 1, 1, 0, 15, 0, 1, 0, 0, 0);
  fprintf(stdout, ""Output on stdout after recursive test.\n"");
  fprintf(stderr, ""Output on stderr after recursive test.\n"");
  fflush(stdout);
  fflush(stderr);
  return r;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1887.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 39, 0, 0, 2, 2, 0, 0, 0, 23, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 9, 0, 0, 14, 0, 25, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1887.cpp,16
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,188,"fprintf(stdout, ""Output on stdout before sleep.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1888.cpp,"{
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output on stdout before sleep.\n"");
  fprintf(stderr, ""Output on stderr before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* Sleep for 1 second.  */
  testProcess_sleep(1);
  fprintf(stdout, ""Output on stdout after sleep.\n"");
  fprintf(stderr, ""Output on stderr after sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1888.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 11, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1888.cpp,4
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,189,"fprintf(stderr, ""Output on stderr before sleep.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1889.cpp,"{
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output on stdout before sleep.\n"");
  fprintf(stderr, ""Output on stderr before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* Sleep for 1 second.  */
  testProcess_sleep(1);
  fprintf(stdout, ""Output on stdout after sleep.\n"");
  fprintf(stderr, ""Output on stderr after sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1889.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 11, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1889.cpp,5
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,194,"fprintf(stdout, ""Output on stdout after sleep.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1890.cpp,"{
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output on stdout before sleep.\n"");
  fprintf(stderr, ""Output on stderr before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* Sleep for 1 second.  */
  testProcess_sleep(1);
  fprintf(stdout, ""Output on stdout after sleep.\n"");
  fprintf(stderr, ""Output on stderr after sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1890.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 11, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1890.cpp,10
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,195,"fprintf(stderr, ""Output on stderr after sleep.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1891.cpp,"{
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output on stdout before sleep.\n"");
  fprintf(stderr, ""Output on stderr before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* Sleep for 1 second.  */
  testProcess_sleep(1);
  fprintf(stdout, ""Output on stdout after sleep.\n"");
  fprintf(stderr, ""Output on stderr after sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1891.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 11, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1891.cpp,11
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,212,"fprintf(stdout, ""Output on stdout before grandchild test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1892.cpp,"{
  /* Create a disowned grandchild to test handling of processes
     that exit before their children.  */
  int r;
  const char* cmd[4];
  (void)argc;
  cmd[0] = argv[0];
  cmd[1] = ""run"";
  cmd[2] = ""108"";
  cmd[3] = 0;
  fprintf(stdout, ""Output on stdout before grandchild test.\n"");
  fprintf(stderr, ""Output on stderr before grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  r = runChild(cmd, kwsysProcess_State_Disowned, kwsysProcess_Exception_None,
               1, 1, 1, 0, 10, 0, 1, 1, 0, 0);
  fprintf(stdout, ""Output on stdout after grandchild test.\n"");
  fprintf(stderr, ""Output on stderr after grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  return r;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1892.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 39, 0, 0, 2, 2, 0, 0, 0, 23, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 9, 0, 0, 14, 0, 25, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1892.cpp,11
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,213,"fprintf(stderr, ""Output on stderr before grandchild test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1893.cpp,"{
  /* Create a disowned grandchild to test handling of processes
     that exit before their children.  */
  int r;
  const char* cmd[4];
  (void)argc;
  cmd[0] = argv[0];
  cmd[1] = ""run"";
  cmd[2] = ""108"";
  cmd[3] = 0;
  fprintf(stdout, ""Output on stdout before grandchild test.\n"");
  fprintf(stderr, ""Output on stderr before grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  r = runChild(cmd, kwsysProcess_State_Disowned, kwsysProcess_Exception_None,
               1, 1, 1, 0, 10, 0, 1, 1, 0, 0);
  fprintf(stdout, ""Output on stdout after grandchild test.\n"");
  fprintf(stderr, ""Output on stderr after grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  return r;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1893.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 39, 0, 0, 2, 2, 0, 0, 0, 23, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 9, 0, 0, 14, 0, 25, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1893.cpp,12
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,218,"fprintf(stdout, ""Output on stdout after grandchild test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1894.cpp,"{
  /* Create a disowned grandchild to test handling of processes
     that exit before their children.  */
  int r;
  const char* cmd[4];
  (void)argc;
  cmd[0] = argv[0];
  cmd[1] = ""run"";
  cmd[2] = ""108"";
  cmd[3] = 0;
  fprintf(stdout, ""Output on stdout before grandchild test.\n"");
  fprintf(stderr, ""Output on stderr before grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  r = runChild(cmd, kwsysProcess_State_Disowned, kwsysProcess_Exception_None,
               1, 1, 1, 0, 10, 0, 1, 1, 0, 0);
  fprintf(stdout, ""Output on stdout after grandchild test.\n"");
  fprintf(stderr, ""Output on stderr after grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  return r;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1894.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 39, 0, 0, 2, 2, 0, 0, 0, 23, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 9, 0, 0, 14, 0, 25, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1894.cpp,17
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,219,"fprintf(stderr, ""Output on stderr after grandchild test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1895.cpp,"{
  /* Create a disowned grandchild to test handling of processes
     that exit before their children.  */
  int r;
  const char* cmd[4];
  (void)argc;
  cmd[0] = argv[0];
  cmd[1] = ""run"";
  cmd[2] = ""108"";
  cmd[3] = 0;
  fprintf(stdout, ""Output on stdout before grandchild test.\n"");
  fprintf(stderr, ""Output on stderr before grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  r = runChild(cmd, kwsysProcess_State_Disowned, kwsysProcess_Exception_None,
               1, 1, 1, 0, 10, 0, 1, 1, 0, 0);
  fprintf(stdout, ""Output on stdout after grandchild test.\n"");
  fprintf(stderr, ""Output on stderr after grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  return r;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1895.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 39, 0, 0, 2, 2, 0, 0, 0, 23, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 9, 0, 0, 14, 0, 25, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1895.cpp,18
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,229,"fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1896.cpp,"{
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* TODO: Instead of closing pipes here leave them open to make sure
     the grandparent can stop listening when the parent exits.  This
     part of the test cannot be enabled until the feature is
     implemented.  */
  fclose(stdout);
  fclose(stderr);
  testProcess_sleep(15);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1896.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 9, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1896.cpp,4
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,230,"fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1897.cpp,"{
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* TODO: Instead of closing pipes here leave them open to make sure
     the grandparent can stop listening when the parent exits.  This
     part of the test cannot be enabled until the feature is
     implemented.  */
  fclose(stdout);
  fclose(stderr);
  testProcess_sleep(15);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1897.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 9, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1897.cpp,5
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,259,"fprintf(stdout, ""Output on stdout before grandchild test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1898.cpp,"{
  /* Test Ctrl+C behavior: the root test program will send a Ctrl+C to this
     process.  Here, we start a child process that sleeps for a long time
     while ignoring signals.  The test is successful if this process waits
     for the child to return before exiting from the Ctrl+C handler.

     WARNING:  This test will falsely pass if the share parameter of runChild
     was set to 0 when invoking the test9 process.  */
  int r;
  const char* cmd[4];
  (void)argc;
  cmd[0] = argv[0];
  cmd[1] = ""run"";
  cmd[2] = ""109"";
  cmd[3] = 0;
  fprintf(stdout, ""Output on stdout before grandchild test.\n"");
  fprintf(stderr, ""Output on stderr before grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  r = runChild(cmd, kwsysProcess_State_Exited, kwsysProcess_Exception_None, 0,
               1, 1, 0, 30, 0, 1, 0, 0, 0);
  /* This sleep will avoid a race condition between this function exiting
     normally and our Ctrl+C handler exiting abnormally after the process
     exits.  */
  testProcess_sleep(1);
  fprintf(stdout, ""Output on stdout after grandchild test.\n"");
  fprintf(stderr, ""Output on stderr after grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  return r;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1898.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 40, 0, 0, 2, 2, 0, 0, 0, 24, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 10, 0, 0, 15, 0, 26, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1898.cpp,16
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,260,"fprintf(stderr, ""Output on stderr before grandchild test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1899.cpp,"{
  /* Test Ctrl+C behavior: the root test program will send a Ctrl+C to this
     process.  Here, we start a child process that sleeps for a long time
     while ignoring signals.  The test is successful if this process waits
     for the child to return before exiting from the Ctrl+C handler.

     WARNING:  This test will falsely pass if the share parameter of runChild
     was set to 0 when invoking the test9 process.  */
  int r;
  const char* cmd[4];
  (void)argc;
  cmd[0] = argv[0];
  cmd[1] = ""run"";
  cmd[2] = ""109"";
  cmd[3] = 0;
  fprintf(stdout, ""Output on stdout before grandchild test.\n"");
  fprintf(stderr, ""Output on stderr before grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  r = runChild(cmd, kwsysProcess_State_Exited, kwsysProcess_Exception_None, 0,
               1, 1, 0, 30, 0, 1, 0, 0, 0);
  /* This sleep will avoid a race condition between this function exiting
     normally and our Ctrl+C handler exiting abnormally after the process
     exits.  */
  testProcess_sleep(1);
  fprintf(stdout, ""Output on stdout after grandchild test.\n"");
  fprintf(stderr, ""Output on stderr after grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  return r;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1899.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 40, 0, 0, 2, 2, 0, 0, 0, 24, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 10, 0, 0, 15, 0, 26, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1899.cpp,17
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,269,"fprintf(stdout, ""Output on stdout after grandchild test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1900.cpp,"{
  /* Test Ctrl+C behavior: the root test program will send a Ctrl+C to this
     process.  Here, we start a child process that sleeps for a long time
     while ignoring signals.  The test is successful if this process waits
     for the child to return before exiting from the Ctrl+C handler.

     WARNING:  This test will falsely pass if the share parameter of runChild
     was set to 0 when invoking the test9 process.  */
  int r;
  const char* cmd[4];
  (void)argc;
  cmd[0] = argv[0];
  cmd[1] = ""run"";
  cmd[2] = ""109"";
  cmd[3] = 0;
  fprintf(stdout, ""Output on stdout before grandchild test.\n"");
  fprintf(stderr, ""Output on stderr before grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  r = runChild(cmd, kwsysProcess_State_Exited, kwsysProcess_Exception_None, 0,
               1, 1, 0, 30, 0, 1, 0, 0, 0);
  /* This sleep will avoid a race condition between this function exiting
     normally and our Ctrl+C handler exiting abnormally after the process
     exits.  */
  testProcess_sleep(1);
  fprintf(stdout, ""Output on stdout after grandchild test.\n"");
  fprintf(stderr, ""Output on stderr after grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  return r;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1900.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 40, 0, 0, 2, 2, 0, 0, 0, 24, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 10, 0, 0, 15, 0, 26, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1900.cpp,26
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,270,"fprintf(stderr, ""Output on stderr after grandchild test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1901.cpp,"{
  /* Test Ctrl+C behavior: the root test program will send a Ctrl+C to this
     process.  Here, we start a child process that sleeps for a long time
     while ignoring signals.  The test is successful if this process waits
     for the child to return before exiting from the Ctrl+C handler.

     WARNING:  This test will falsely pass if the share parameter of runChild
     was set to 0 when invoking the test9 process.  */
  int r;
  const char* cmd[4];
  (void)argc;
  cmd[0] = argv[0];
  cmd[1] = ""run"";
  cmd[2] = ""109"";
  cmd[3] = 0;
  fprintf(stdout, ""Output on stdout before grandchild test.\n"");
  fprintf(stderr, ""Output on stderr before grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  r = runChild(cmd, kwsysProcess_State_Exited, kwsysProcess_Exception_None, 0,
               1, 1, 0, 30, 0, 1, 0, 0, 0);
  /* This sleep will avoid a race condition between this function exiting
     normally and our Ctrl+C handler exiting abnormally after the process
     exits.  */
  testProcess_sleep(1);
  fprintf(stdout, ""Output on stdout after grandchild test.\n"");
  fprintf(stderr, ""Output on stderr after grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  return r;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1901.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 40, 0, 0, 2, 2, 0, 0, 0, 24, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 10, 0, 0, 15, 0, 26, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1901.cpp,27
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,305,"fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1902.cpp,"{
  /* The grandchild just sleeps for a few seconds while ignoring signals.  */
  (void)argc;
  (void)argv;
#if defined(_WIN32)
  if (!SetConsoleCtrlHandler(test9_grandchild_handler, TRUE)) {
    return 1;
  }
#else
  struct sigaction sa;
  memset(&sa, 0, sizeof(sa));
  sa.sa_handler = SIG_IGN;
  sigemptyset(&sa.sa_mask);
  if (sigaction(SIGINT, &sa, 0) < 0) {
    return 1;
  }
#endif
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* Sleep for 9 seconds.  */
  testProcess_sleep(9);
  fprintf(stdout, ""Output on stdout from grandchild after sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild after sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1902.cpp,"[3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 44, 0, 0, 1, 1, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 44, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 1, 0, 15, 0, 0, 14, 0, 24, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1902.cpp,18
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,306,"fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1903.cpp,"{
  /* The grandchild just sleeps for a few seconds while ignoring signals.  */
  (void)argc;
  (void)argv;
#if defined(_WIN32)
  if (!SetConsoleCtrlHandler(test9_grandchild_handler, TRUE)) {
    return 1;
  }
#else
  struct sigaction sa;
  memset(&sa, 0, sizeof(sa));
  sa.sa_handler = SIG_IGN;
  sigemptyset(&sa.sa_mask);
  if (sigaction(SIGINT, &sa, 0) < 0) {
    return 1;
  }
#endif
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* Sleep for 9 seconds.  */
  testProcess_sleep(9);
  fprintf(stdout, ""Output on stdout from grandchild after sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild after sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1903.cpp,"[3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 44, 0, 0, 1, 1, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 44, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 1, 0, 15, 0, 0, 14, 0, 24, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1903.cpp,19
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,311,"fprintf(stdout, ""Output on stdout from grandchild after sleep.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1904.cpp,"{
  /* The grandchild just sleeps for a few seconds while ignoring signals.  */
  (void)argc;
  (void)argv;
#if defined(_WIN32)
  if (!SetConsoleCtrlHandler(test9_grandchild_handler, TRUE)) {
    return 1;
  }
#else
  struct sigaction sa;
  memset(&sa, 0, sizeof(sa));
  sa.sa_handler = SIG_IGN;
  sigemptyset(&sa.sa_mask);
  if (sigaction(SIGINT, &sa, 0) < 0) {
    return 1;
  }
#endif
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* Sleep for 9 seconds.  */
  testProcess_sleep(9);
  fprintf(stdout, ""Output on stdout from grandchild after sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild after sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1904.cpp,"[3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 44, 0, 0, 1, 1, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 44, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 1, 0, 15, 0, 0, 14, 0, 24, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1904.cpp,24
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,312,"fprintf(stderr, ""Output on stderr from grandchild after sleep.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1905.cpp,"{
  /* The grandchild just sleeps for a few seconds while ignoring signals.  */
  (void)argc;
  (void)argv;
#if defined(_WIN32)
  if (!SetConsoleCtrlHandler(test9_grandchild_handler, TRUE)) {
    return 1;
  }
#else
  struct sigaction sa;
  memset(&sa, 0, sizeof(sa));
  sa.sa_handler = SIG_IGN;
  sigemptyset(&sa.sa_mask);
  if (sigaction(SIGINT, &sa, 0) < 0) {
    return 1;
  }
#endif
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* Sleep for 9 seconds.  */
  testProcess_sleep(9);
  fprintf(stdout, ""Output on stdout from grandchild after sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild after sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1905.cpp,"[3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 44, 0, 0, 1, 1, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 44, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 1, 0, 15, 0, 0, 14, 0, 24, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1905.cpp,25
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,332,"fprintf(stdout, ""Output on stdout before grandchild test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1906.cpp,"{
  /* Test Ctrl+C behavior: the root test program will send a Ctrl+C to this
     process.  Here, we start a child process that sleeps for a long time and
     processes signals normally.  However, this grandchild is created in a new
     process group - ensuring that Ctrl+C we receive is sent to our process
     groups.  We make sure it exits anyway.  */
  int r;
  const char* cmd[4];
  (void)argc;
  cmd[0] = argv[0];
  cmd[1] = ""run"";
  cmd[2] = ""110"";
  cmd[3] = 0;
  fprintf(stdout, ""Output on stdout before grandchild test.\n"");
  fprintf(stderr, ""Output on stderr before grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  r =
    runChild(cmd, kwsysProcess_State_Exception,
             kwsysProcess_Exception_Interrupt, 0, 1, 1, 0, 30, 0, 1, 0, 1, 0);
  fprintf(stdout, ""Output on stdout after grandchild test.\n"");
  fprintf(stderr, ""Output on stderr after grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  return r;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1906.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 39, 0, 0, 2, 2, 0, 0, 0, 23, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 9, 0, 0, 14, 0, 25, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1906.cpp,14
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,333,"fprintf(stderr, ""Output on stderr before grandchild test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1907.cpp,"{
  /* Test Ctrl+C behavior: the root test program will send a Ctrl+C to this
     process.  Here, we start a child process that sleeps for a long time and
     processes signals normally.  However, this grandchild is created in a new
     process group - ensuring that Ctrl+C we receive is sent to our process
     groups.  We make sure it exits anyway.  */
  int r;
  const char* cmd[4];
  (void)argc;
  cmd[0] = argv[0];
  cmd[1] = ""run"";
  cmd[2] = ""110"";
  cmd[3] = 0;
  fprintf(stdout, ""Output on stdout before grandchild test.\n"");
  fprintf(stderr, ""Output on stderr before grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  r =
    runChild(cmd, kwsysProcess_State_Exception,
             kwsysProcess_Exception_Interrupt, 0, 1, 1, 0, 30, 0, 1, 0, 1, 0);
  fprintf(stdout, ""Output on stdout after grandchild test.\n"");
  fprintf(stderr, ""Output on stderr after grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  return r;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1907.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 39, 0, 0, 2, 2, 0, 0, 0, 23, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 9, 0, 0, 14, 0, 25, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1907.cpp,15
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,339,"fprintf(stdout, ""Output on stdout after grandchild test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1908.cpp,"{
  /* Test Ctrl+C behavior: the root test program will send a Ctrl+C to this
     process.  Here, we start a child process that sleeps for a long time and
     processes signals normally.  However, this grandchild is created in a new
     process group - ensuring that Ctrl+C we receive is sent to our process
     groups.  We make sure it exits anyway.  */
  int r;
  const char* cmd[4];
  (void)argc;
  cmd[0] = argv[0];
  cmd[1] = ""run"";
  cmd[2] = ""110"";
  cmd[3] = 0;
  fprintf(stdout, ""Output on stdout before grandchild test.\n"");
  fprintf(stderr, ""Output on stderr before grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  r =
    runChild(cmd, kwsysProcess_State_Exception,
             kwsysProcess_Exception_Interrupt, 0, 1, 1, 0, 30, 0, 1, 0, 1, 0);
  fprintf(stdout, ""Output on stdout after grandchild test.\n"");
  fprintf(stderr, ""Output on stderr after grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  return r;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1908.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 39, 0, 0, 2, 2, 0, 0, 0, 23, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 9, 0, 0, 14, 0, 25, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1908.cpp,21
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,340,"fprintf(stderr, ""Output on stderr after grandchild test.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1909.cpp,"{
  /* Test Ctrl+C behavior: the root test program will send a Ctrl+C to this
     process.  Here, we start a child process that sleeps for a long time and
     processes signals normally.  However, this grandchild is created in a new
     process group - ensuring that Ctrl+C we receive is sent to our process
     groups.  We make sure it exits anyway.  */
  int r;
  const char* cmd[4];
  (void)argc;
  cmd[0] = argv[0];
  cmd[1] = ""run"";
  cmd[2] = ""110"";
  cmd[3] = 0;
  fprintf(stdout, ""Output on stdout before grandchild test.\n"");
  fprintf(stderr, ""Output on stderr before grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  r =
    runChild(cmd, kwsysProcess_State_Exception,
             kwsysProcess_Exception_Interrupt, 0, 1, 1, 0, 30, 0, 1, 0, 1, 0);
  fprintf(stdout, ""Output on stdout after grandchild test.\n"");
  fprintf(stderr, ""Output on stderr after grandchild test.\n"");
  fflush(stdout);
  fflush(stderr);
  return r;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1909.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 39, 0, 0, 2, 2, 0, 0, 0, 23, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 9, 0, 0, 14, 0, 25, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1909.cpp,22
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,351,"fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1910.cpp,"{
  /* The grandchild just sleeps for a few seconds and handles signals.  */
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* Sleep for 6 seconds.  */
  testProcess_sleep(6);
  fprintf(stdout, ""Output on stdout from grandchild after sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild after sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1910.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 11, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1910.cpp,5
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,352,"fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1911.cpp,"{
  /* The grandchild just sleeps for a few seconds and handles signals.  */
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* Sleep for 6 seconds.  */
  testProcess_sleep(6);
  fprintf(stdout, ""Output on stdout from grandchild after sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild after sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1911.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 11, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1911.cpp,6
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,357,"fprintf(stdout, ""Output on stdout from grandchild after sleep.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1912.cpp,"{
  /* The grandchild just sleeps for a few seconds and handles signals.  */
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* Sleep for 6 seconds.  */
  testProcess_sleep(6);
  fprintf(stdout, ""Output on stdout from grandchild after sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild after sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1912.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 11, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1912.cpp,11
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,358,"fprintf(stderr, ""Output on stderr from grandchild after sleep.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1913.cpp,"{
  /* The grandchild just sleeps for a few seconds and handles signals.  */
  (void)argc;
  (void)argv;
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* Sleep for 6 seconds.  */
  testProcess_sleep(6);
  fprintf(stdout, ""Output on stdout from grandchild after sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild after sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1913.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 11, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1913.cpp,12
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,404,"fprintf(stdout, ""WaitForData timeout reached.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1914.cpp,"{
          fprintf(stdout, ""WaitForData timeout reached.\n"");
          fflush(stdout);

          /* Count the number of times we polled without getting data.
             If it is excessive then kill the child and fail.  */
          if (++poll >= MAXPOLL) {
            fprintf(stdout, ""Poll count reached limit %d.\n"", MAXPOLL);
            kwsysProcess_Kill(kp);
          }
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1914.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1914.cpp,40
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,410,"fprintf(stdout, ""Poll count reached limit %d.\n"", MAXPOLL);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1915.cpp,"{
            fprintf(stdout, ""Poll count reached limit %d.\n"", MAXPOLL);
            kwsysProcess_Kill(kp);
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1915.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1915.cpp,46
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,439,"printf(""No process has been executed.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1916.cpp,"{
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n"");
      break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n"");
      break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n"");
      break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"", kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp)));
      break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n"");
      break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp)));
      break;
    case kwsysProcess_State_Disowned:
      printf(""Child was disowned.\n"");
      break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp));
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1916.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 10, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1916.cpp,75
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,442,"printf(""The process is still executing.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1917.cpp,"{
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n"");
      break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n"");
      break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n"");
      break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"", kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp)));
      break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n"");
      break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp)));
      break;
    case kwsysProcess_State_Disowned:
      printf(""Child was disowned.\n"");
      break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp));
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1917.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 10, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1917.cpp,78
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,445,"printf(""Child was killed when timeout expired.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1918.cpp,"{
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n"");
      break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n"");
      break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n"");
      break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"", kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp)));
      break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n"");
      break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp)));
      break;
    case kwsysProcess_State_Disowned:
      printf(""Child was disowned.\n"");
      break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp));
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1918.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 10, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1918.cpp,81
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,448,"printf(""Child exited with value = %d\n"", kwsysProcess_GetExitValue(kp));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1919.cpp,"{
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n"");
      break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n"");
      break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n"");
      break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"", kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp)));
      break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n"");
      break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp)));
      break;
    case kwsysProcess_State_Disowned:
      printf(""Child was disowned.\n"");
      break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp));
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1919.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 10, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1919.cpp,84
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,453,"printf(""Child was killed by parent.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1920.cpp,"{
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n"");
      break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n"");
      break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n"");
      break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"", kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp)));
      break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n"");
      break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp)));
      break;
    case kwsysProcess_State_Disowned:
      printf(""Child was disowned.\n"");
      break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp));
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1920.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 10, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1920.cpp,89
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,456,"printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1921.cpp,"{
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n"");
      break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n"");
      break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n"");
      break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"", kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp)));
      break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n"");
      break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp)));
      break;
    case kwsysProcess_State_Disowned:
      printf(""Child was disowned.\n"");
      break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp));
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1921.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 10, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1921.cpp,92
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,462,"printf(""Child was disowned.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1922.cpp,"{
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n"");
      break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n"");
      break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n"");
      break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"", kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp)));
      break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n"");
      break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp)));
      break;
    case kwsysProcess_State_Disowned:
      printf(""Child was disowned.\n"");
      break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp));
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1922.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 10, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1922.cpp,98
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,465,"printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1923.cpp,"{
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n"");
      break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n"");
      break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n"");
      break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"", kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp)));
      break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n"");
      break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp)));
      break;
    case kwsysProcess_State_Disowned:
      printf(""Child was disowned.\n"");
      break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp));
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1923.cpp,"[0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 10, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1923.cpp,101
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,472,"fprintf(stderr, ""Mismatch in exit exception.  ""
                      ""Should have been %d, was %d.\n"",
              exception, kwsysProcess_GetExitException(kp));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1924.cpp,"{
      fprintf(stderr, ""Mismatch in exit exception.  ""
                      ""Should have been %d, was %d.\n"",
              exception, kwsysProcess_GetExitException(kp));
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1924.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1924.cpp,108
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,477,"fprintf(stderr, ""Mismatch in exit value.  ""
                      ""Should have been %d, was %d.\n"",
              value, kwsysProcess_GetExitValue(kp));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1925.cpp,"{
      fprintf(stderr, ""Mismatch in exit value.  ""
                      ""Should have been %d, was %d.\n"",
              value, kwsysProcess_GetExitValue(kp));
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1925.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1925.cpp,113
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,484,"fprintf(stderr, ""Mismatch in state.  ""
                    ""Should have been %d, was %d.\n"",
            state, kwsysProcess_GetState(kp));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1926.cpp,"{
    fprintf(stderr, ""Mismatch in state.  ""
                    ""Should have been %d, was %d.\n"",
            state, kwsysProcess_GetState(kp));
    result = 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1926.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1926.cpp,120
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,493,"fprintf(stderr, ""Poll count is %d, which is less than %d.\n"", poll,
            MINPOLL);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1927.cpp,"{
    fprintf(stderr, ""Poll count is %d, which is less than %d.\n"", poll,
            MINPOLL);
    result = 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1927.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1927.cpp,129
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,535,"fprintf(stderr, ""kwsysProcess_New returned NULL!\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1928.cpp,"{
    fprintf(stderr, ""kwsysProcess_New returned NULL!\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1928.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1928.cpp,7
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,617,"fprintf(stderr, ""Invalid test number %d.\n"", n);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1929.cpp,"{
    /* This is the child process for a requested test number.  */
    switch (n) {
      case 1:
        return test1(argc, argv);
      case 2:
        return test2(argc, argv);
      case 3:
        return test3(argc, argv);
      case 4:
        return test4(argc, argv);
      case 5:
        return test5(argc, argv);
      case 6:
        test6(argc, argv);
        return 0;
      case 7:
        return test7(argc, argv);
      case 8:
        return test8(argc, argv);
      case 9:
        return test9(argc, argv);
      case 10:
        return test10(argc, argv);
      case 108:
        return test8_grandchild(argc, argv);
      case 109:
        return test9_grandchild(argc, argv);
      case 110:
        return test10_grandchild(argc, argv);
    }
    fprintf(stderr, ""Invalid test number %d.\n"", n);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1929.cpp,"[0, 0, 0, 0, 0, 0, 14, 1, 13, 0, 2, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 2, 0, 29, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1929.cpp,68
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,676,"fprintf(stdout, ""Output on stdout before test %d.\n"", n);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1930.cpp,"{
    /* This is the parent process for a requested test number.  */
    int states[10] = {
      kwsysProcess_State_Exited,   kwsysProcess_State_Exited,
      kwsysProcess_State_Expired,  kwsysProcess_State_Exception,
      kwsysProcess_State_Exited,   kwsysProcess_State_Expired,
      kwsysProcess_State_Exited,   kwsysProcess_State_Exited,
      kwsysProcess_State_Expired,  /* Ctrl+C handler test */
      kwsysProcess_State_Exception /* Process group test */
    };
    int exceptions[10] = {
      kwsysProcess_Exception_None, kwsysProcess_Exception_None,
      kwsysProcess_Exception_None, kwsysProcess_Exception_Fault,
      kwsysProcess_Exception_None, kwsysProcess_Exception_None,
      kwsysProcess_Exception_None, kwsysProcess_Exception_None,
      kwsysProcess_Exception_None, kwsysProcess_Exception_Interrupt
    };
    int values[10] = { 0, 123, 1, 1, 0, 0, 0, 0, 1, 1 };
    int shares[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 };
    int outputs[10] = { 1, 1, 1, 1, 1, 0, 1, 1, 1, 1 };
    int delays[10] = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 };
    double timeouts[10] = { 10, 10, 10, 30, 30, 10, -1, 10, 6, 4 };
    int polls[10] = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 };
    int repeat[10] = { 257, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int createNewGroups[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 };
    unsigned int interruptDelays[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 3, 2 };
    int r;
    const char* cmd[4];
#ifdef _WIN32
    char* argv0 = 0;
#endif
    char* test1IterationsStr = getenv(""KWSYS_TEST_PROCESS_1_COUNT"");
    if (test1IterationsStr) {
      long int test1Iterations = strtol(test1IterationsStr, 0, 10);
      if (test1Iterations > 10 && test1Iterations != LONG_MAX) {
        repeat[0] = (int)test1Iterations;
      }
    }
#ifdef _WIN32
    if (n == 0 && (argv0 = strdup(argv[0]))) {
      /* Try converting to forward slashes to see if it works.  */
      char* c;
      for (c = argv0; *c; ++c) {
        if (*c == '\\') {
          *c = '/';
        }
      }
      cmd[0] = argv0;
    } else {
      cmd[0] = argv[0];
    }
#else
    cmd[0] = argv[0];
#endif
    cmd[1] = ""run"";
    cmd[2] = argv[1];
    cmd[3] = 0;
    fprintf(stdout, ""Output on stdout before test %d.\n"", n);
    fprintf(stderr, ""Output on stderr before test %d.\n"", n);
    fflush(stdout);
    fflush(stderr);
    r = runChild(cmd, states[n - 1], exceptions[n - 1], values[n - 1],
                 shares[n - 1], outputs[n - 1], delays[n - 1], timeouts[n - 1],
                 polls[n - 1], repeat[n - 1], 0, createNewGroups[n - 1],
                 interruptDelays[n - 1]);
    fprintf(stdout, ""Output on stdout after test %d.\n"", n);
    fprintf(stderr, ""Output on stderr after test %d.\n"", n);
    fflush(stdout);
    fflush(stderr);
#if defined(_WIN32)
    if (argv0) {
      free(argv0);
    }
#endif
    return r;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1930.cpp,"[6, 0, 1, 0, 0, 0, 1, 0, 0, 0, 19, 0, 0, 0, 1, 173, 0, 0, 17, 17, 0, 0, 15, 139, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 34, 0, 6, 5, 2, 0, 14, 0, 0, 18, 0, 36, 7, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1930.cpp,127
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,677,"fprintf(stderr, ""Output on stderr before test %d.\n"", n);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1931.cpp,"{
    /* This is the parent process for a requested test number.  */
    int states[10] = {
      kwsysProcess_State_Exited,   kwsysProcess_State_Exited,
      kwsysProcess_State_Expired,  kwsysProcess_State_Exception,
      kwsysProcess_State_Exited,   kwsysProcess_State_Expired,
      kwsysProcess_State_Exited,   kwsysProcess_State_Exited,
      kwsysProcess_State_Expired,  /* Ctrl+C handler test */
      kwsysProcess_State_Exception /* Process group test */
    };
    int exceptions[10] = {
      kwsysProcess_Exception_None, kwsysProcess_Exception_None,
      kwsysProcess_Exception_None, kwsysProcess_Exception_Fault,
      kwsysProcess_Exception_None, kwsysProcess_Exception_None,
      kwsysProcess_Exception_None, kwsysProcess_Exception_None,
      kwsysProcess_Exception_None, kwsysProcess_Exception_Interrupt
    };
    int values[10] = { 0, 123, 1, 1, 0, 0, 0, 0, 1, 1 };
    int shares[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 };
    int outputs[10] = { 1, 1, 1, 1, 1, 0, 1, 1, 1, 1 };
    int delays[10] = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 };
    double timeouts[10] = { 10, 10, 10, 30, 30, 10, -1, 10, 6, 4 };
    int polls[10] = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 };
    int repeat[10] = { 257, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int createNewGroups[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 };
    unsigned int interruptDelays[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 3, 2 };
    int r;
    const char* cmd[4];
#ifdef _WIN32
    char* argv0 = 0;
#endif
    char* test1IterationsStr = getenv(""KWSYS_TEST_PROCESS_1_COUNT"");
    if (test1IterationsStr) {
      long int test1Iterations = strtol(test1IterationsStr, 0, 10);
      if (test1Iterations > 10 && test1Iterations != LONG_MAX) {
        repeat[0] = (int)test1Iterations;
      }
    }
#ifdef _WIN32
    if (n == 0 && (argv0 = strdup(argv[0]))) {
      /* Try converting to forward slashes to see if it works.  */
      char* c;
      for (c = argv0; *c; ++c) {
        if (*c == '\\') {
          *c = '/';
        }
      }
      cmd[0] = argv0;
    } else {
      cmd[0] = argv[0];
    }
#else
    cmd[0] = argv[0];
#endif
    cmd[1] = ""run"";
    cmd[2] = argv[1];
    cmd[3] = 0;
    fprintf(stdout, ""Output on stdout before test %d.\n"", n);
    fprintf(stderr, ""Output on stderr before test %d.\n"", n);
    fflush(stdout);
    fflush(stderr);
    r = runChild(cmd, states[n - 1], exceptions[n - 1], values[n - 1],
                 shares[n - 1], outputs[n - 1], delays[n - 1], timeouts[n - 1],
                 polls[n - 1], repeat[n - 1], 0, createNewGroups[n - 1],
                 interruptDelays[n - 1]);
    fprintf(stdout, ""Output on stdout after test %d.\n"", n);
    fprintf(stderr, ""Output on stderr after test %d.\n"", n);
    fflush(stdout);
    fflush(stderr);
#if defined(_WIN32)
    if (argv0) {
      free(argv0);
    }
#endif
    return r;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1931.cpp,"[6, 0, 1, 0, 0, 0, 1, 0, 0, 0, 19, 0, 0, 0, 1, 173, 0, 0, 17, 17, 0, 0, 15, 139, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 34, 0, 6, 5, 2, 0, 14, 0, 0, 18, 0, 36, 7, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1931.cpp,128
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,684,"fprintf(stdout, ""Output on stdout after test %d.\n"", n);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1932.cpp,"{
    /* This is the parent process for a requested test number.  */
    int states[10] = {
      kwsysProcess_State_Exited,   kwsysProcess_State_Exited,
      kwsysProcess_State_Expired,  kwsysProcess_State_Exception,
      kwsysProcess_State_Exited,   kwsysProcess_State_Expired,
      kwsysProcess_State_Exited,   kwsysProcess_State_Exited,
      kwsysProcess_State_Expired,  /* Ctrl+C handler test */
      kwsysProcess_State_Exception /* Process group test */
    };
    int exceptions[10] = {
      kwsysProcess_Exception_None, kwsysProcess_Exception_None,
      kwsysProcess_Exception_None, kwsysProcess_Exception_Fault,
      kwsysProcess_Exception_None, kwsysProcess_Exception_None,
      kwsysProcess_Exception_None, kwsysProcess_Exception_None,
      kwsysProcess_Exception_None, kwsysProcess_Exception_Interrupt
    };
    int values[10] = { 0, 123, 1, 1, 0, 0, 0, 0, 1, 1 };
    int shares[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 };
    int outputs[10] = { 1, 1, 1, 1, 1, 0, 1, 1, 1, 1 };
    int delays[10] = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 };
    double timeouts[10] = { 10, 10, 10, 30, 30, 10, -1, 10, 6, 4 };
    int polls[10] = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 };
    int repeat[10] = { 257, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int createNewGroups[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 };
    unsigned int interruptDelays[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 3, 2 };
    int r;
    const char* cmd[4];
#ifdef _WIN32
    char* argv0 = 0;
#endif
    char* test1IterationsStr = getenv(""KWSYS_TEST_PROCESS_1_COUNT"");
    if (test1IterationsStr) {
      long int test1Iterations = strtol(test1IterationsStr, 0, 10);
      if (test1Iterations > 10 && test1Iterations != LONG_MAX) {
        repeat[0] = (int)test1Iterations;
      }
    }
#ifdef _WIN32
    if (n == 0 && (argv0 = strdup(argv[0]))) {
      /* Try converting to forward slashes to see if it works.  */
      char* c;
      for (c = argv0; *c; ++c) {
        if (*c == '\\') {
          *c = '/';
        }
      }
      cmd[0] = argv0;
    } else {
      cmd[0] = argv[0];
    }
#else
    cmd[0] = argv[0];
#endif
    cmd[1] = ""run"";
    cmd[2] = argv[1];
    cmd[3] = 0;
    fprintf(stdout, ""Output on stdout before test %d.\n"", n);
    fprintf(stderr, ""Output on stderr before test %d.\n"", n);
    fflush(stdout);
    fflush(stderr);
    r = runChild(cmd, states[n - 1], exceptions[n - 1], values[n - 1],
                 shares[n - 1], outputs[n - 1], delays[n - 1], timeouts[n - 1],
                 polls[n - 1], repeat[n - 1], 0, createNewGroups[n - 1],
                 interruptDelays[n - 1]);
    fprintf(stdout, ""Output on stdout after test %d.\n"", n);
    fprintf(stderr, ""Output on stderr after test %d.\n"", n);
    fflush(stdout);
    fflush(stderr);
#if defined(_WIN32)
    if (argv0) {
      free(argv0);
    }
#endif
    return r;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1932.cpp,"[6, 0, 1, 0, 0, 0, 1, 0, 0, 0, 19, 0, 0, 0, 1, 173, 0, 0, 17, 17, 0, 0, 15, 139, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 34, 0, 6, 5, 2, 0, 14, 0, 0, 18, 0, 36, 7, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1932.cpp,135
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,685,"fprintf(stderr, ""Output on stderr after test %d.\n"", n);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1933.cpp,"{
    /* This is the parent process for a requested test number.  */
    int states[10] = {
      kwsysProcess_State_Exited,   kwsysProcess_State_Exited,
      kwsysProcess_State_Expired,  kwsysProcess_State_Exception,
      kwsysProcess_State_Exited,   kwsysProcess_State_Expired,
      kwsysProcess_State_Exited,   kwsysProcess_State_Exited,
      kwsysProcess_State_Expired,  /* Ctrl+C handler test */
      kwsysProcess_State_Exception /* Process group test */
    };
    int exceptions[10] = {
      kwsysProcess_Exception_None, kwsysProcess_Exception_None,
      kwsysProcess_Exception_None, kwsysProcess_Exception_Fault,
      kwsysProcess_Exception_None, kwsysProcess_Exception_None,
      kwsysProcess_Exception_None, kwsysProcess_Exception_None,
      kwsysProcess_Exception_None, kwsysProcess_Exception_Interrupt
    };
    int values[10] = { 0, 123, 1, 1, 0, 0, 0, 0, 1, 1 };
    int shares[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 };
    int outputs[10] = { 1, 1, 1, 1, 1, 0, 1, 1, 1, 1 };
    int delays[10] = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 };
    double timeouts[10] = { 10, 10, 10, 30, 30, 10, -1, 10, 6, 4 };
    int polls[10] = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 };
    int repeat[10] = { 257, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int createNewGroups[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 };
    unsigned int interruptDelays[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 3, 2 };
    int r;
    const char* cmd[4];
#ifdef _WIN32
    char* argv0 = 0;
#endif
    char* test1IterationsStr = getenv(""KWSYS_TEST_PROCESS_1_COUNT"");
    if (test1IterationsStr) {
      long int test1Iterations = strtol(test1IterationsStr, 0, 10);
      if (test1Iterations > 10 && test1Iterations != LONG_MAX) {
        repeat[0] = (int)test1Iterations;
      }
    }
#ifdef _WIN32
    if (n == 0 && (argv0 = strdup(argv[0]))) {
      /* Try converting to forward slashes to see if it works.  */
      char* c;
      for (c = argv0; *c; ++c) {
        if (*c == '\\') {
          *c = '/';
        }
      }
      cmd[0] = argv0;
    } else {
      cmd[0] = argv[0];
    }
#else
    cmd[0] = argv[0];
#endif
    cmd[1] = ""run"";
    cmd[2] = argv[1];
    cmd[3] = 0;
    fprintf(stdout, ""Output on stdout before test %d.\n"", n);
    fprintf(stderr, ""Output on stderr before test %d.\n"", n);
    fflush(stdout);
    fflush(stderr);
    r = runChild(cmd, states[n - 1], exceptions[n - 1], values[n - 1],
                 shares[n - 1], outputs[n - 1], delays[n - 1], timeouts[n - 1],
                 polls[n - 1], repeat[n - 1], 0, createNewGroups[n - 1],
                 interruptDelays[n - 1]);
    fprintf(stdout, ""Output on stdout after test %d.\n"", n);
    fprintf(stderr, ""Output on stderr after test %d.\n"", n);
    fflush(stdout);
    fflush(stderr);
#if defined(_WIN32)
    if (argv0) {
      free(argv0);
    }
#endif
    return r;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1933.cpp,"[6, 0, 1, 0, 0, 0, 1, 0, 0, 0, 19, 0, 0, 0, 1, 173, 0, 0, 17, 17, 0, 0, 15, 139, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 34, 0, 6, 5, 2, 0, 14, 0, 0, 18, 0, 36, 7, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1933.cpp,136
second/download/CMake/CMake/CMake/Source/kwsys/testProcess.cpp,707,"fprintf(stdout, ""Usage: %s <test number>\n"", argv[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1934.cpp,"{
    /* Improper usage.  */
    fprintf(stdout, ""Usage: %s <test number>\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1934.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1934.cpp,158
second/download/CMake/CMake/CMake/Source/kwsys/testTerminal.cpp,15,"kwsysTerminal_cfprintf(kwsysTerminal_Color_ForegroundYellow |
                           kwsysTerminal_Color_BackgroundBlue |
                           kwsysTerminal_Color_AssumeTTY,
                         stdout, ""Hello %s!"", ""World"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1935.cpp,"{
  (void)argc;
  (void)argv;
  kwsysTerminal_cfprintf(kwsysTerminal_Color_ForegroundYellow |
                           kwsysTerminal_Color_BackgroundBlue |
                           kwsysTerminal_Color_AssumeTTY,
                         stdout, ""Hello %s!"", ""World"");
  fprintf(stdout, ""\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1935.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1935.cpp,4
second/download/CMake/CMake/CMake/Source/kwsys/testTerminal.cpp,19,"fprintf(stdout, ""\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1936.cpp,"{
  (void)argc;
  (void)argv;
  kwsysTerminal_cfprintf(kwsysTerminal_Color_ForegroundYellow |
                           kwsysTerminal_Color_BackgroundBlue |
                           kwsysTerminal_Color_AssumeTTY,
                         stdout, ""Hello %s!"", ""World"");
  fprintf(stdout, ""\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1936.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1936.cpp,8
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,339,"printf(""RegularExpression::compile(): No expression supplied.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1937.cpp,"{
    // RAISE Error, SYM(RegularExpression), SYM(No_Expr),
    printf(""RegularExpression::compile(): No expression supplied.\n"");
    return false;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1937.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1937.cpp,9
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,350,"printf(""RegularExpression::compile(): Error in compile.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1938.cpp,"{
    printf(""RegularExpression::compile(): Error in compile.\n"");
    return false;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1938.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1938.cpp,20
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,358,"printf(""RegularExpression::compile(): Expression too big.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1939.cpp,"{ // Probably could be 65535L.
    // RAISE Error, SYM(RegularExpression), SYM(Expr_Too_Big),
    printf(""RegularExpression::compile(): Expression too big.\n"");
    return false;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1939.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1939.cpp,28
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,372,"printf(""RegularExpression::compile(): Out of memory.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1940.cpp,"{
    // RAISE Error, SYM(RegularExpression), SYM(Out_Of_Memory),
    printf(""RegularExpression::compile(): Out of memory.\n"");
    return false;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1940.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1940.cpp,42
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,444,"printf(""RegularExpression::compile(): Too many parentheses.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1941.cpp,"{
      // RAISE Error, SYM(RegularExpression), SYM(Too_Many_Parens),
      printf(""RegularExpression::compile(): Too many parentheses.\n"");
      return 0;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1941.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1941.cpp,14
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,486,"printf(""RegularExpression::compile(): Unmatched parentheses.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1942.cpp,"{
    // RAISE Error, SYM(RegularExpression), SYM(Unmatched_Parens),
    printf(""RegularExpression::compile(): Unmatched parentheses.\n"");
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1942.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1942.cpp,56
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,491,"printf(""RegularExpression::compile(): Unmatched parentheses.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1943.cpp,"{
      // RAISE Error, SYM(RegularExpression), SYM(Unmatched_Parens),
      printf(""RegularExpression::compile(): Unmatched parentheses.\n"");
      return 0;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1943.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1943.cpp,61
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,495,"printf(""RegularExpression::compile(): Internal error.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1944.cpp,"{
      // RAISE Error, SYM(RegularExpression), SYM(Internal_Error),
      printf(""RegularExpression::compile(): Internal error.\n"");
      return 0;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1944.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1944.cpp,65
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,564,"printf(""RegularExpression::compile() : *+ operand could be empty.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1945.cpp,"{
    // RAISE Error, SYM(RegularExpression), SYM(Empty_Operand),
    printf(""RegularExpression::compile() : *+ operand could be empty.\n"");
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1945.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1945.cpp,19
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,598,"printf(""RegularExpression::compile(): Nested *?+.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1946.cpp,"{
    // RAISE Error, SYM(RegularExpression), SYM(Nested_Operand),
    printf(""RegularExpression::compile(): Nested *?+.\n"");
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1946.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1946.cpp,53
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,651,"printf(""RegularExpression::compile(): Invalid range in [].\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1947.cpp,"{
              // RAISE Error, SYM(RegularExpression), SYM(Invalid_Range),
              printf(""RegularExpression::compile(): Invalid range in [].\n"");
              return 0;
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1947.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1947.cpp,39
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,664,"printf(""RegularExpression::compile(): Unmatched [].\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1948.cpp,"{
        // RAISE Error, SYM(RegularExpression), SYM(Unmatched_Bracket),
        printf(""RegularExpression::compile(): Unmatched [].\n"");
        return 0;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1948.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1948.cpp,52
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,680,"printf(""RegularExpression::compile(): Internal error.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1949.cpp,"{
    case '^':
      ret = regnode(BOL);
      break;
    case '$':
      ret = regnode(EOL);
      break;
    case '.':
      ret = regnode(ANY);
      *flagp |= HASWIDTH | SIMPLE;
      break;
    case '[': {
      int rxpclass;
      int rxpclassend;

      if (*regparse == '^') { // Complement of range.
        ret = regnode(ANYBUT);
        regparse++;
      } else
        ret = regnode(ANYOF);
      if (*regparse == ']' || *regparse == '-')
        regc(*regparse++);
      while (*regparse != '\0' && *regparse != ']') {
        if (*regparse == '-') {
          regparse++;
          if (*regparse == ']' || *regparse == '\0')
            regc('-');
          else {
            rxpclass = UCHARAT(regparse - 2) + 1;
            rxpclassend = UCHARAT(regparse);
            if (rxpclass > rxpclassend + 1) {
              // RAISE Error, SYM(RegularExpression), SYM(Invalid_Range),
              printf(""RegularExpression::compile(): Invalid range in [].\n"");
              return 0;
            }
            for (; rxpclass <= rxpclassend; rxpclass++)
              regc(static_cast<char>(rxpclass));
            regparse++;
          }
        } else
          regc(*regparse++);
      }
      regc('\0');
      if (*regparse != ']') {
        // RAISE Error, SYM(RegularExpression), SYM(Unmatched_Bracket),
        printf(""RegularExpression::compile(): Unmatched [].\n"");
        return 0;
      }
      regparse++;
      *flagp |= HASWIDTH | SIMPLE;
    } break;
    case '(':
      ret = reg(1, &flags);
      if (ret == 0)
        return (0);
      *flagp |= flags & (HASWIDTH | SPSTART);
      break;
    case '\0':
    case '|':
    case ')':
      // RAISE Error, SYM(RegularExpression), SYM(Internal_Error),
      printf(""RegularExpression::compile(): Internal error.\n""); // Never here
      return 0;
    case '?':
    case '+':
    case '*':
      // RAISE Error, SYM(RegularExpression), SYM(No_Operand),
      printf(""RegularExpression::compile(): ?+* follows nothing.\n"");
      return 0;
    case '\\':
      if (*regparse == '\0') {
        // RAISE Error, SYM(RegularExpression), SYM(Trailing_Backslash),
        printf(""RegularExpression::compile(): Trailing backslash.\n"");
        return 0;
      }
      ret = regnode(EXACTLY);
      regc(*regparse++);
      regc('\0');
      *flagp |= HASWIDTH | SIMPLE;
      break;
    default: {
      int len;
      char ender;

      regparse--;
      len = int(strcspn(regparse, META));
      if (len <= 0) {
        // RAISE Error, SYM(RegularExpression), SYM(Internal_Error),
        printf(""RegularExpression::compile(): Internal error.\n"");
        return 0;
      }
      ender = *(regparse + len);
      if (len > 1 && ISMULT(ender))
        len--; // Back off clear of ?+* operand.
      *flagp |= HASWIDTH;
      if (len == 1)
        *flagp |= SIMPLE;
      ret = regnode(EXACTLY);
      while (len > 0) {
        regc(*regparse++);
        len--;
      }
      regc('\0');
    } break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1949.cpp,"[11, 2, 1, 0, 7, 0, 7, 0, 12, 1, 20, 0, 0, 0, 0, 113, 0, 0, 4, 4, 0, 0, 1, 48, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 106, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 14, 11, 3, 0, 30, 0, 0, 40, 0, 32, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1949.cpp,68
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,686,"printf(""RegularExpression::compile(): ?+* follows nothing.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1950.cpp,"{
    case '^':
      ret = regnode(BOL);
      break;
    case '$':
      ret = regnode(EOL);
      break;
    case '.':
      ret = regnode(ANY);
      *flagp |= HASWIDTH | SIMPLE;
      break;
    case '[': {
      int rxpclass;
      int rxpclassend;

      if (*regparse == '^') { // Complement of range.
        ret = regnode(ANYBUT);
        regparse++;
      } else
        ret = regnode(ANYOF);
      if (*regparse == ']' || *regparse == '-')
        regc(*regparse++);
      while (*regparse != '\0' && *regparse != ']') {
        if (*regparse == '-') {
          regparse++;
          if (*regparse == ']' || *regparse == '\0')
            regc('-');
          else {
            rxpclass = UCHARAT(regparse - 2) + 1;
            rxpclassend = UCHARAT(regparse);
            if (rxpclass > rxpclassend + 1) {
              // RAISE Error, SYM(RegularExpression), SYM(Invalid_Range),
              printf(""RegularExpression::compile(): Invalid range in [].\n"");
              return 0;
            }
            for (; rxpclass <= rxpclassend; rxpclass++)
              regc(static_cast<char>(rxpclass));
            regparse++;
          }
        } else
          regc(*regparse++);
      }
      regc('\0');
      if (*regparse != ']') {
        // RAISE Error, SYM(RegularExpression), SYM(Unmatched_Bracket),
        printf(""RegularExpression::compile(): Unmatched [].\n"");
        return 0;
      }
      regparse++;
      *flagp |= HASWIDTH | SIMPLE;
    } break;
    case '(':
      ret = reg(1, &flags);
      if (ret == 0)
        return (0);
      *flagp |= flags & (HASWIDTH | SPSTART);
      break;
    case '\0':
    case '|':
    case ')':
      // RAISE Error, SYM(RegularExpression), SYM(Internal_Error),
      printf(""RegularExpression::compile(): Internal error.\n""); // Never here
      return 0;
    case '?':
    case '+':
    case '*':
      // RAISE Error, SYM(RegularExpression), SYM(No_Operand),
      printf(""RegularExpression::compile(): ?+* follows nothing.\n"");
      return 0;
    case '\\':
      if (*regparse == '\0') {
        // RAISE Error, SYM(RegularExpression), SYM(Trailing_Backslash),
        printf(""RegularExpression::compile(): Trailing backslash.\n"");
        return 0;
      }
      ret = regnode(EXACTLY);
      regc(*regparse++);
      regc('\0');
      *flagp |= HASWIDTH | SIMPLE;
      break;
    default: {
      int len;
      char ender;

      regparse--;
      len = int(strcspn(regparse, META));
      if (len <= 0) {
        // RAISE Error, SYM(RegularExpression), SYM(Internal_Error),
        printf(""RegularExpression::compile(): Internal error.\n"");
        return 0;
      }
      ender = *(regparse + len);
      if (len > 1 && ISMULT(ender))
        len--; // Back off clear of ?+* operand.
      *flagp |= HASWIDTH;
      if (len == 1)
        *flagp |= SIMPLE;
      ret = regnode(EXACTLY);
      while (len > 0) {
        regc(*regparse++);
        len--;
      }
      regc('\0');
    } break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1950.cpp,"[11, 2, 1, 0, 7, 0, 7, 0, 12, 1, 20, 0, 0, 0, 0, 113, 0, 0, 4, 4, 0, 0, 1, 48, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 106, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 14, 11, 3, 0, 30, 0, 0, 40, 0, 32, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1950.cpp,74
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,691,"printf(""RegularExpression::compile(): Trailing backslash.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1951.cpp,"{
        // RAISE Error, SYM(RegularExpression), SYM(Trailing_Backslash),
        printf(""RegularExpression::compile(): Trailing backslash.\n"");
        return 0;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1951.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1951.cpp,79
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,707,"printf(""RegularExpression::compile(): Internal error.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1952.cpp,"{
        // RAISE Error, SYM(RegularExpression), SYM(Internal_Error),
        printf(""RegularExpression::compile(): Internal error.\n"");
        return 0;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1952.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1952.cpp,95
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,873,"printf(
      ""RegularExpression::find(): Compiled regular expression corrupted.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1953.cpp,"{
    // RAISE Error, SYM(RegularExpression), SYM(Internal_Error),
    printf(
      ""RegularExpression::find(): Compiled regular expression corrupted.\n"");
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1953.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1953.cpp,13
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,1117,"printf(
          ""RegularExpression::find(): Internal error -- memory corrupted.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1954.cpp,"{
      case BOL:
        if (reginput != regbol)
          return (0);
        break;
      case EOL:
        if (*reginput != '\0')
          return (0);
        break;
      case ANY:
        if (*reginput == '\0')
          return (0);
        reginput++;
        break;
      case EXACTLY: {
        size_t len;
        const char* opnd;

        opnd = OPERAND(scan);
        // Inline the first character, for speed.
        if (*opnd != *reginput)
          return (0);
        len = strlen(opnd);
        if (len > 1 && strncmp(opnd, reginput, len) != 0)
          return (0);
        reginput += len;
      } break;
      case ANYOF:
        if (*reginput == '\0' || strchr(OPERAND(scan), *reginput) == 0)
          return (0);
        reginput++;
        break;
      case ANYBUT:
        if (*reginput == '\0' || strchr(OPERAND(scan), *reginput) != 0)
          return (0);
        reginput++;
        break;
      case NOTHING:
        break;
      case BACK:
        break;
      case OPEN + 1:
      case OPEN + 2:
      case OPEN + 3:
      case OPEN + 4:
      case OPEN + 5:
      case OPEN + 6:
      case OPEN + 7:
      case OPEN + 8:
      case OPEN + 9: {
        int no;
        const char* save;

        no = OP(scan) - OPEN;
        save = reginput;

        if (regmatch(next)) {

          //
          // Don't set startp if some later invocation of the
          // same parentheses already has.
          //
          if (regstartp[no] == 0)
            regstartp[no] = save;
          return (1);
        } else
          return (0);
      }
      //              break;
      case CLOSE + 1:
      case CLOSE + 2:
      case CLOSE + 3:
      case CLOSE + 4:
      case CLOSE + 5:
      case CLOSE + 6:
      case CLOSE + 7:
      case CLOSE + 8:
      case CLOSE + 9: {
        int no;
        const char* save;

        no = OP(scan) - CLOSE;
        save = reginput;

        if (regmatch(next)) {

          //
          // Don't set endp if some later invocation of the
          // same parentheses already has.
          //
          if (regendp[no] == 0)
            regendp[no] = save;
          return (1);
        } else
          return (0);
      }
      //              break;
      case BRANCH: {

        const char* save;

        if (OP(next) != BRANCH) // No choice.
          next = OPERAND(scan); // Avoid recursion.
        else {
          do {
            save = reginput;
            if (regmatch(OPERAND(scan)))
              return (1);
            reginput = save;
            scan = regnext(scan);
          } while (scan != 0 && OP(scan) == BRANCH);
          return (0);
          // NOTREACHED
        }
      } break;
      case STAR:
      case PLUS: {
        char nextch;
        int no;
        const char* save;
        int min_no;

        //
        // Lookahead to avoid useless match attempts when we know
        // what character comes next.
        //
        nextch = '\0';
        if (OP(next) == EXACTLY)
          nextch = *OPERAND(next);
        min_no = (OP(scan) == STAR) ? 0 : 1;
        save = reginput;
        no = regrepeat(OPERAND(scan));
        while (no >= min_no) {
          // If it could work, try it.
          if (nextch == '\0' || *reginput == nextch)
            if (regmatch(next))
              return (1);
          // Couldn't or didn't -- back up.
          no--;
          reginput = save + no;
        }
        return (0);
      }
      //              break;
      case END:
        return (1); // Success!

      default:
        // RAISE Error, SYM(RegularExpression), SYM(Internal_Error),
        printf(
          ""RegularExpression::find(): Internal error -- memory corrupted.\n"");
        return 0;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1954.cpp,"[16, 1, 0, 1, 9, 0, 17, 0, 30, 1, 27, 0, 0, 0, 5, 163, 0, 0, 11, 11, 0, 0, 0, 51, 0, 0, 0, 0, 5, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 1, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 0, 19, 17, 4, 0, 24, 0, 0, 24, 0, 28, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1954.cpp,160
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,1129,"printf(""RegularExpression::find(): Internal error -- corrupted pointers.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1955.cpp,"{
  const char* scan; // Current node.
  const char* next; // Next node.

  scan = prog;

  while (scan != 0) {

    next = regnext(scan);

    switch (OP(scan)) {
      case BOL:
        if (reginput != regbol)
          return (0);
        break;
      case EOL:
        if (*reginput != '\0')
          return (0);
        break;
      case ANY:
        if (*reginput == '\0')
          return (0);
        reginput++;
        break;
      case EXACTLY: {
        size_t len;
        const char* opnd;

        opnd = OPERAND(scan);
        // Inline the first character, for speed.
        if (*opnd != *reginput)
          return (0);
        len = strlen(opnd);
        if (len > 1 && strncmp(opnd, reginput, len) != 0)
          return (0);
        reginput += len;
      } break;
      case ANYOF:
        if (*reginput == '\0' || strchr(OPERAND(scan), *reginput) == 0)
          return (0);
        reginput++;
        break;
      case ANYBUT:
        if (*reginput == '\0' || strchr(OPERAND(scan), *reginput) != 0)
          return (0);
        reginput++;
        break;
      case NOTHING:
        break;
      case BACK:
        break;
      case OPEN + 1:
      case OPEN + 2:
      case OPEN + 3:
      case OPEN + 4:
      case OPEN + 5:
      case OPEN + 6:
      case OPEN + 7:
      case OPEN + 8:
      case OPEN + 9: {
        int no;
        const char* save;

        no = OP(scan) - OPEN;
        save = reginput;

        if (regmatch(next)) {

          //
          // Don't set startp if some later invocation of the
          // same parentheses already has.
          //
          if (regstartp[no] == 0)
            regstartp[no] = save;
          return (1);
        } else
          return (0);
      }
      //              break;
      case CLOSE + 1:
      case CLOSE + 2:
      case CLOSE + 3:
      case CLOSE + 4:
      case CLOSE + 5:
      case CLOSE + 6:
      case CLOSE + 7:
      case CLOSE + 8:
      case CLOSE + 9: {
        int no;
        const char* save;

        no = OP(scan) - CLOSE;
        save = reginput;

        if (regmatch(next)) {

          //
          // Don't set endp if some later invocation of the
          // same parentheses already has.
          //
          if (regendp[no] == 0)
            regendp[no] = save;
          return (1);
        } else
          return (0);
      }
      //              break;
      case BRANCH: {

        const char* save;

        if (OP(next) != BRANCH) // No choice.
          next = OPERAND(scan); // Avoid recursion.
        else {
          do {
            save = reginput;
            if (regmatch(OPERAND(scan)))
              return (1);
            reginput = save;
            scan = regnext(scan);
          } while (scan != 0 && OP(scan) == BRANCH);
          return (0);
          // NOTREACHED
        }
      } break;
      case STAR:
      case PLUS: {
        char nextch;
        int no;
        const char* save;
        int min_no;

        //
        // Lookahead to avoid useless match attempts when we know
        // what character comes next.
        //
        nextch = '\0';
        if (OP(next) == EXACTLY)
          nextch = *OPERAND(next);
        min_no = (OP(scan) == STAR) ? 0 : 1;
        save = reginput;
        no = regrepeat(OPERAND(scan));
        while (no >= min_no) {
          // If it could work, try it.
          if (nextch == '\0' || *reginput == nextch)
            if (regmatch(next))
              return (1);
          // Couldn't or didn't -- back up.
          no--;
          reginput = save + no;
        }
        return (0);
      }
      //              break;
      case END:
        return (1); // Success!

      default:
        // RAISE Error, SYM(RegularExpression), SYM(Internal_Error),
        printf(
          ""RegularExpression::find(): Internal error -- memory corrupted.\n"");
        return 0;
    }
    scan = next;
  }

  //
  //  We get here only if there's trouble -- normally ""case END"" is the
  //  terminating point.
  //
  // RAISE Error, SYM(RegularExpression), SYM(Internal_Error),
  printf(""RegularExpression::find(): Internal error -- corrupted pointers.\n"");
  return (0);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1955.cpp,"[16, 2, 0, 1, 9, 0, 18, 1, 30, 1, 29, 0, 0, 0, 7, 178, 0, 0, 13, 13, 0, 0, 0, 54, 0, 0, 0, 0, 7, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 1, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 0, 21, 17, 4, 0, 27, 0, 0, 28, 0, 31, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1955.cpp,172
second/download/CMake/CMake/CMake/Source/kwsys/RegularExpression.cpp,1169,"printf(""cm RegularExpression::find(): Internal error.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1956.cpp,"{
    case ANY:
      count = int(strlen(scan));
      scan += count;
      break;
    case EXACTLY:
      while (*opnd == *scan) {
        count++;
        scan++;
      }
      break;
    case ANYOF:
      while (*scan != '\0' && strchr(opnd, *scan) != 0) {
        count++;
        scan++;
      }
      break;
    case ANYBUT:
      while (*scan != '\0' && strchr(opnd, *scan) == 0) {
        count++;
        scan++;
      }
      break;
    default: // Oh dear.  Called inappropriately.
      // RAISE Error, SYM(RegularExpression), SYM(Internal_Error),
      printf(""cm RegularExpression::find(): Internal error.\n"");
      return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1956.cpp,"[0, 3, 0, 0, 4, 0, 1, 0, 4, 1, 4, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 9, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1956.cpp,33
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsCxx.cpp,119,"printf(""Available tests:\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1957.cpp,"{
    /* Ask for a test.  */
    printf(""Available tests:\n"");
    for (i = 0; i < NumTests; ++i) {
      printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
    }
    printf(""To run a test, enter the test number: "");
    fflush(stdout);
    if (scanf(""%d"", &testNum) != 1) {
      printf(""Couldn't parse that input as a number\n"");
      return -1;
    }
    if (testNum >= NumTests) {
      printf(""%3d is an invalid test number.\n"", testNum);
      return -1;
    }
    testToRun = testNum;
    ac--;
    av++;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1957.cpp,"[2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 2, 0, 0, 7, 0, 0, 9, 0, 11, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1957.cpp,12
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsCxx.cpp,121,"printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1958.cpp,"{
      printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1958.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1958.cpp,14
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsCxx.cpp,123,"printf(""To run a test, enter the test number: "");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1959.cpp,"{
    /* Ask for a test.  */
    printf(""Available tests:\n"");
    for (i = 0; i < NumTests; ++i) {
      printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
    }
    printf(""To run a test, enter the test number: "");
    fflush(stdout);
    if (scanf(""%d"", &testNum) != 1) {
      printf(""Couldn't parse that input as a number\n"");
      return -1;
    }
    if (testNum >= NumTests) {
      printf(""%3d is an invalid test number.\n"", testNum);
      return -1;
    }
    testToRun = testNum;
    ac--;
    av++;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1959.cpp,"[2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 2, 0, 0, 7, 0, 0, 9, 0, 11, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1959.cpp,16
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsCxx.cpp,126,"printf(""Couldn't parse that input as a number\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1960.cpp,"{
      printf(""Couldn't parse that input as a number\n"");
      return -1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1960.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1960.cpp,19
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsCxx.cpp,130,"printf(""%3d is an invalid test number.\n"", testNum);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1961.cpp,"{
      printf(""%3d is an invalid test number.\n"", testNum);
      return -1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1961.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1961.cpp,23
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsCxx.cpp,144,"printf(""-R needs an additional parameter.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1962.cpp,"{
    printf(""-R needs an additional parameter.\n"");
    return -1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1962.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1962.cpp,37
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsCxx.cpp,168,"printf(""testToRun was modified by TestDriver code to an invalid value: ""
             ""%3d.\n"",
             testNum);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1963.cpp,"{
      printf(""testToRun was modified by TestDriver code to an invalid value: ""
             ""%3d.\n"",
             testNum);
      return -1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1963.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1963.cpp,61
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsCxx.cpp,179,"printf(""Available tests:\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1964.cpp,"{
  int i, testNum = 0, partial_match;
  char *arg, *test_name;
  int testToRun = -1;

  

  /* If no test name was given */
  /* process command line with user function.  */
  if (ac < 2) {
    /* Ask for a test.  */
    printf(""Available tests:\n"");
    for (i = 0; i < NumTests; ++i) {
      printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
    }
    printf(""To run a test, enter the test number: "");
    fflush(stdout);
    if (scanf(""%d"", &testNum) != 1) {
      printf(""Couldn't parse that input as a number\n"");
      return -1;
    }
    if (testNum >= NumTests) {
      printf(""%3d is an invalid test number.\n"", testNum);
      return -1;
    }
    testToRun = testNum;
    ac--;
    av++;
  }
  partial_match = 0;
  arg = NULL; /* NOLINT */
  /* If partial match is requested.  */
  if (testToRun == -1 && ac > 1) {
    partial_match = (strcmp(av[1], ""-R"") == 0) ? 1 : 0;
  }
  if (partial_match != 0 && ac < 3) {
    printf(""-R needs an additional parameter.\n"");
    return -1;
  }
  if (testToRun == -1) {
    arg = lowercase(av[1 + partial_match]);
  }
  for (i = 0; i < NumTests && testToRun == -1; ++i) {
    test_name = lowercase(cmakeGeneratedFunctionMapEntries[i].name);
    if (partial_match != 0 && strstr(test_name, arg) != NULL) { /* NOLINT */
      testToRun = i;
      ac -= 2;
      av += 2;
    } else if (partial_match == 0 && strcmp(test_name, arg) == 0) {
      testToRun = i;
      ac--;
      av++;
    }
    free(test_name);
  }
  free(arg);
  if (testToRun != -1) {
    int result;

    if (testToRun < 0 || testToRun >= NumTests) {
      printf(""testToRun was modified by TestDriver code to an invalid value: ""
             ""%3d.\n"",
             testNum);
      return -1;
    }
    result = (*cmakeGeneratedFunctionMapEntries[testToRun].func)(ac, av);

    return result;
  }

  /* Nothing was run, display the test names.  */
  printf(""Available tests:\n"");
  for (i = 0; i < NumTests; ++i) {
    printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
  }
  printf(""Failed: %s is an invalid test name.\n"", av[1]);

  return -1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1964.cpp,"[10, 0, 3, 0, 0, 0, 6, 0, 0, 0, 14, 0, 0, 0, 0, 115, 0, 0, 4, 7, 0, 0, 5, 45, 0, 0, 0, 0, 2, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 1, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 14, 11, 1, 0, 19, 0, 0, 28, 1, 30, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1964.cpp,72
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsCxx.cpp,181,"printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1965.cpp,"{
    printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1965.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1965.cpp,74
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsCxx.cpp,183,"printf(""Failed: %s is an invalid test name.\n"", av[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1966.cpp,"{
  int i, testNum = 0, partial_match;
  char *arg, *test_name;
  int testToRun = -1;

  

  /* If no test name was given */
  /* process command line with user function.  */
  if (ac < 2) {
    /* Ask for a test.  */
    printf(""Available tests:\n"");
    for (i = 0; i < NumTests; ++i) {
      printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
    }
    printf(""To run a test, enter the test number: "");
    fflush(stdout);
    if (scanf(""%d"", &testNum) != 1) {
      printf(""Couldn't parse that input as a number\n"");
      return -1;
    }
    if (testNum >= NumTests) {
      printf(""%3d is an invalid test number.\n"", testNum);
      return -1;
    }
    testToRun = testNum;
    ac--;
    av++;
  }
  partial_match = 0;
  arg = NULL; /* NOLINT */
  /* If partial match is requested.  */
  if (testToRun == -1 && ac > 1) {
    partial_match = (strcmp(av[1], ""-R"") == 0) ? 1 : 0;
  }
  if (partial_match != 0 && ac < 3) {
    printf(""-R needs an additional parameter.\n"");
    return -1;
  }
  if (testToRun == -1) {
    arg = lowercase(av[1 + partial_match]);
  }
  for (i = 0; i < NumTests && testToRun == -1; ++i) {
    test_name = lowercase(cmakeGeneratedFunctionMapEntries[i].name);
    if (partial_match != 0 && strstr(test_name, arg) != NULL) { /* NOLINT */
      testToRun = i;
      ac -= 2;
      av += 2;
    } else if (partial_match == 0 && strcmp(test_name, arg) == 0) {
      testToRun = i;
      ac--;
      av++;
    }
    free(test_name);
  }
  free(arg);
  if (testToRun != -1) {
    int result;

    if (testToRun < 0 || testToRun >= NumTests) {
      printf(""testToRun was modified by TestDriver code to an invalid value: ""
             ""%3d.\n"",
             testNum);
      return -1;
    }
    result = (*cmakeGeneratedFunctionMapEntries[testToRun].func)(ac, av);

    return result;
  }

  /* Nothing was run, display the test names.  */
  printf(""Available tests:\n"");
  for (i = 0; i < NumTests; ++i) {
    printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
  }
  printf(""Failed: %s is an invalid test name.\n"", av[1]);

  return -1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1966.cpp,"[10, 0, 3, 0, 0, 0, 6, 0, 0, 0, 14, 0, 0, 0, 0, 115, 0, 0, 4, 7, 0, 0, 5, 45, 0, 0, 0, 0, 2, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 1, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 14, 11, 1, 0, 19, 0, 0, 28, 1, 30, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1966.cpp,76
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsC.cpp,79,"printf(""Available tests:\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1967.cpp,"{
    /* Ask for a test.  */
    printf(""Available tests:\n"");
    for (i = 0; i < NumTests; ++i) {
      printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
    }
    printf(""To run a test, enter the test number: "");
    fflush(stdout);
    if (scanf(""%d"", &testNum) != 1) {
      printf(""Couldn't parse that input as a number\n"");
      return -1;
    }
    if (testNum >= NumTests) {
      printf(""%3d is an invalid test number.\n"", testNum);
      return -1;
    }
    testToRun = testNum;
    ac--;
    av++;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1967.cpp,"[2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 2, 0, 0, 7, 0, 0, 9, 0, 11, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1967.cpp,12
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsC.cpp,81,"printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1968.cpp,"{
      printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1968.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1968.cpp,14
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsC.cpp,83,"printf(""To run a test, enter the test number: "");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1969.cpp,"{
    /* Ask for a test.  */
    printf(""Available tests:\n"");
    for (i = 0; i < NumTests; ++i) {
      printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
    }
    printf(""To run a test, enter the test number: "");
    fflush(stdout);
    if (scanf(""%d"", &testNum) != 1) {
      printf(""Couldn't parse that input as a number\n"");
      return -1;
    }
    if (testNum >= NumTests) {
      printf(""%3d is an invalid test number.\n"", testNum);
      return -1;
    }
    testToRun = testNum;
    ac--;
    av++;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1969.cpp,"[2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 2, 0, 0, 7, 0, 0, 9, 0, 11, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1969.cpp,16
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsC.cpp,86,"printf(""Couldn't parse that input as a number\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1970.cpp,"{
      printf(""Couldn't parse that input as a number\n"");
      return -1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1970.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1970.cpp,19
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsC.cpp,90,"printf(""%3d is an invalid test number.\n"", testNum);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1971.cpp,"{
      printf(""%3d is an invalid test number.\n"", testNum);
      return -1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1971.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1971.cpp,23
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsC.cpp,104,"printf(""-R needs an additional parameter.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1972.cpp,"{
    printf(""-R needs an additional parameter.\n"");
    return -1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1972.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1972.cpp,37
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsC.cpp,128,"printf(""testToRun was modified by TestDriver code to an invalid value: ""
             ""%3d.\n"",
             testNum);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1973.cpp,"{
      printf(""testToRun was modified by TestDriver code to an invalid value: ""
             ""%3d.\n"",
             testNum);
      return -1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1973.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1973.cpp,61
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsC.cpp,139,"printf(""Available tests:\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1974.cpp,"{
  int i, testNum = 0, partial_match;
  char *arg, *test_name;
  int testToRun = -1;

  

  /* If no test name was given */
  /* process command line with user function.  */
  if (ac < 2) {
    /* Ask for a test.  */
    printf(""Available tests:\n"");
    for (i = 0; i < NumTests; ++i) {
      printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
    }
    printf(""To run a test, enter the test number: "");
    fflush(stdout);
    if (scanf(""%d"", &testNum) != 1) {
      printf(""Couldn't parse that input as a number\n"");
      return -1;
    }
    if (testNum >= NumTests) {
      printf(""%3d is an invalid test number.\n"", testNum);
      return -1;
    }
    testToRun = testNum;
    ac--;
    av++;
  }
  partial_match = 0;
  arg = NULL; /* NOLINT */
  /* If partial match is requested.  */
  if (testToRun == -1 && ac > 1) {
    partial_match = (strcmp(av[1], ""-R"") == 0) ? 1 : 0;
  }
  if (partial_match != 0 && ac < 3) {
    printf(""-R needs an additional parameter.\n"");
    return -1;
  }
  if (testToRun == -1) {
    arg = lowercase(av[1 + partial_match]);
  }
  for (i = 0; i < NumTests && testToRun == -1; ++i) {
    test_name = lowercase(cmakeGeneratedFunctionMapEntries[i].name);
    if (partial_match != 0 && strstr(test_name, arg) != NULL) { /* NOLINT */
      testToRun = i;
      ac -= 2;
      av += 2;
    } else if (partial_match == 0 && strcmp(test_name, arg) == 0) {
      testToRun = i;
      ac--;
      av++;
    }
    free(test_name);
  }
  free(arg);
  if (testToRun != -1) {
    int result;

    if (testToRun < 0 || testToRun >= NumTests) {
      printf(""testToRun was modified by TestDriver code to an invalid value: ""
             ""%3d.\n"",
             testNum);
      return -1;
    }
    result = (*cmakeGeneratedFunctionMapEntries[testToRun].func)(ac, av);

    return result;
  }

  /* Nothing was run, display the test names.  */
  printf(""Available tests:\n"");
  for (i = 0; i < NumTests; ++i) {
    printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
  }
  printf(""Failed: %s is an invalid test name.\n"", av[1]);

  return -1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1974.cpp,"[10, 0, 3, 0, 0, 0, 6, 0, 0, 0, 14, 0, 0, 0, 0, 115, 0, 0, 4, 7, 0, 0, 5, 45, 0, 0, 0, 0, 2, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 1, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 14, 11, 1, 0, 19, 0, 0, 28, 1, 30, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1974.cpp,72
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsC.cpp,141,"printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1975.cpp,"{
    printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1975.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1975.cpp,74
second/download/CMake/CMake/CMake/Source/kwsys/cmsysTestsC.cpp,143,"printf(""Failed: %s is an invalid test name.\n"", av[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1976.cpp,"{
  int i, testNum = 0, partial_match;
  char *arg, *test_name;
  int testToRun = -1;

  

  /* If no test name was given */
  /* process command line with user function.  */
  if (ac < 2) {
    /* Ask for a test.  */
    printf(""Available tests:\n"");
    for (i = 0; i < NumTests; ++i) {
      printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
    }
    printf(""To run a test, enter the test number: "");
    fflush(stdout);
    if (scanf(""%d"", &testNum) != 1) {
      printf(""Couldn't parse that input as a number\n"");
      return -1;
    }
    if (testNum >= NumTests) {
      printf(""%3d is an invalid test number.\n"", testNum);
      return -1;
    }
    testToRun = testNum;
    ac--;
    av++;
  }
  partial_match = 0;
  arg = NULL; /* NOLINT */
  /* If partial match is requested.  */
  if (testToRun == -1 && ac > 1) {
    partial_match = (strcmp(av[1], ""-R"") == 0) ? 1 : 0;
  }
  if (partial_match != 0 && ac < 3) {
    printf(""-R needs an additional parameter.\n"");
    return -1;
  }
  if (testToRun == -1) {
    arg = lowercase(av[1 + partial_match]);
  }
  for (i = 0; i < NumTests && testToRun == -1; ++i) {
    test_name = lowercase(cmakeGeneratedFunctionMapEntries[i].name);
    if (partial_match != 0 && strstr(test_name, arg) != NULL) { /* NOLINT */
      testToRun = i;
      ac -= 2;
      av += 2;
    } else if (partial_match == 0 && strcmp(test_name, arg) == 0) {
      testToRun = i;
      ac--;
      av++;
    }
    free(test_name);
  }
  free(arg);
  if (testToRun != -1) {
    int result;

    if (testToRun < 0 || testToRun >= NumTests) {
      printf(""testToRun was modified by TestDriver code to an invalid value: ""
             ""%3d.\n"",
             testNum);
      return -1;
    }
    result = (*cmakeGeneratedFunctionMapEntries[testToRun].func)(ac, av);

    return result;
  }

  /* Nothing was run, display the test names.  */
  printf(""Available tests:\n"");
  for (i = 0; i < NumTests; ++i) {
    printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
  }
  printf(""Failed: %s is an invalid test name.\n"", av[1]);

  return -1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1976.cpp,"[10, 0, 3, 0, 0, 0, 6, 0, 0, 0, 14, 0, 0, 0, 0, 115, 0, 0, 4, 7, 0, 0, 5, 45, 0, 0, 0, 0, 2, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 1, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 14, 11, 1, 0, 19, 0, 0, 28, 1, 30, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1976.cpp,76
second/download/CMake/CMake/CMake/Source/kwsys/CommandLineArguments.cpp,533,"sprintf(format, ""  %%-%us  "", static_cast<unsigned int>(maxlen));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1977.cpp,"{
  std::ostringstream str;

  // Collapse all arguments into the map of vectors of all arguments that do
  // the same thing.
  CommandLineArguments::Internal::CallbacksMap::iterator it;
  typedef std::map<CommandLineArguments::Internal::String,
                   CommandLineArguments::Internal::SetOfStrings>
    MapArgs;
  MapArgs mp;
  MapArgs::iterator mpit, smpit;
  for (it = this->Internals->Callbacks.begin();
       it != this->Internals->Callbacks.end(); it++) {
    CommandLineArgumentsCallbackStructure* cs = &(it->second);
    mpit = mp.find(cs->Help);
    if (mpit != mp.end()) {
      mpit->second.insert(it->first);
      mp[it->first].insert(it->first);
    } else {
      mp[it->first].insert(it->first);
    }
  }
  for (it = this->Internals->Callbacks.begin();
       it != this->Internals->Callbacks.end(); it++) {
    CommandLineArgumentsCallbackStructure* cs = &(it->second);
    mpit = mp.find(cs->Help);
    if (mpit != mp.end()) {
      mpit->second.insert(it->first);
      smpit = mp.find(it->first);
      CommandLineArguments::Internal::SetOfStrings::iterator sit;
      for (sit = smpit->second.begin(); sit != smpit->second.end(); sit++) {
        mpit->second.insert(*sit);
      }
      mp.erase(smpit);
    } else {
      mp[it->first].insert(it->first);
    }
  }

  // Find the length of the longest string
  CommandLineArguments::Internal::String::size_type maxlen = 0;
  for (mpit = mp.begin(); mpit != mp.end(); mpit++) {
    CommandLineArguments::Internal::SetOfStrings::iterator sit;
    for (sit = mpit->second.begin(); sit != mpit->second.end(); sit++) {
      CommandLineArguments::Internal::String::size_type clen = sit->size();
      switch (this->Internals->Callbacks[*sit].ArgumentType) {
        case CommandLineArguments::NO_ARGUMENT:
          clen += 0;
          break;
        case CommandLineArguments::CONCAT_ARGUMENT:
          clen += 3;
          break;
        case CommandLineArguments::SPACE_ARGUMENT:
          clen += 4;
          break;
        case CommandLineArguments::EQUAL_ARGUMENT:
          clen += 4;
          break;
      }
      if (clen > maxlen) {
        maxlen = clen;
      }
    }
  }

  // Create format for that string
  char format[80];
  sprintf(format, ""  %%-%us  "", static_cast<unsigned int>(maxlen));

  maxlen += 4; // For the space before and after the option

  // Print help for each option
  for (mpit = mp.begin(); mpit != mp.end(); mpit++) {
    CommandLineArguments::Internal::SetOfStrings::iterator sit;
    for (sit = mpit->second.begin(); sit != mpit->second.end(); sit++) {
      str << std::endl;
      char argument[100];
      sprintf(argument, ""%s"", sit->c_str());
      switch (this->Internals->Callbacks[*sit].ArgumentType) {
        case CommandLineArguments::NO_ARGUMENT:
          break;
        case CommandLineArguments::CONCAT_ARGUMENT:
          strcat(argument, ""opt"");
          break;
        case CommandLineArguments::SPACE_ARGUMENT:
          strcat(argument, "" opt"");
          break;
        case CommandLineArguments::EQUAL_ARGUMENT:
          strcat(argument, ""=opt"");
          break;
        case CommandLineArguments::MULTI_ARGUMENT:
          strcat(argument, "" opt opt ..."");
          break;
      }
      char buffer[80];
      sprintf(buffer, format, argument);
      str << buffer;
    }
    const char* ptr = this->Internals->Callbacks[mpit->first].Help;
    size_t len = strlen(ptr);
    int cnt = 0;
    while (len > 0) {
      // If argument with help is longer than line length, split it on previous
      // space (or tab) and continue on the next line
      CommandLineArguments::Internal::String::size_type cc;
      for (cc = 0; ptr[cc]; cc++) {
        if (*ptr == ' ' || *ptr == '\t') {
          ptr++;
          len--;
        }
      }
      if (cnt > 0) {
        for (cc = 0; cc < maxlen; cc++) {
          str << "" "";
        }
      }
      CommandLineArguments::Internal::String::size_type skip = len;
      if (skip > this->LineLength - maxlen) {
        skip = this->LineLength - maxlen;
        for (cc = skip - 1; cc > 0; cc--) {
          if (ptr[cc] == ' ' || ptr[cc] == '\t') {
            break;
          }
        }
        if (cc != 0) {
          skip = cc;
        }
      }
      str.write(ptr, static_cast<std::streamsize>(skip));
      str << std::endl;
      ptr += skip;
      len -= skip;
      cnt++;
    }
  }
  /*
  // This can help debugging help string
  str << endl;
  unsigned int cc;
  for ( cc = 0; cc < this->LineLength; cc ++ )
    {
    str << cc % 10;
    }
  str << endl;
  */
  this->Help = str.str();
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1977.cpp,"[8, 1, 10, 0, 10, 0, 0, 2, 9, 0, 24, 0, 0, 0, 1, 405, 0, 0, 19, 20, 0, 0, 18, 28, 0, 0, 0, 1, 3, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 0, 142, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 12, 0, 21, 8, 2, 0, 43, 0, 0, 36, 0, 36, 0, 10, 0, 0, 10, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1977.cpp,68
second/download/CMake/CMake/CMake/Source/kwsys/CommandLineArguments.cpp,543,"sprintf(argument, ""%s"", sit->c_str());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1978.cpp,"{
      str << std::endl;
      char argument[100];
      sprintf(argument, ""%s"", sit->c_str());
      switch (this->Internals->Callbacks[*sit].ArgumentType) {
        case CommandLineArguments::NO_ARGUMENT:
          break;
        case CommandLineArguments::CONCAT_ARGUMENT:
          strcat(argument, ""opt"");
          break;
        case CommandLineArguments::SPACE_ARGUMENT:
          strcat(argument, "" opt"");
          break;
        case CommandLineArguments::EQUAL_ARGUMENT:
          strcat(argument, ""=opt"");
          break;
        case CommandLineArguments::MULTI_ARGUMENT:
          strcat(argument, "" opt opt ..."");
          break;
      }
      char buffer[80];
      sprintf(buffer, format, argument);
      str << buffer;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1978.cpp,"[0, 0, 0, 0, 5, 0, 0, 1, 5, 0, 2, 0, 0, 0, 0, 50, 0, 0, 2, 2, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 0, 7, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1978.cpp,78
second/download/CMake/CMake/CMake/Source/kwsys/CommandLineArguments.cpp,561,"sprintf(buffer, format, argument);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1979.cpp,"{
      str << std::endl;
      char argument[100];
      sprintf(argument, ""%s"", sit->c_str());
      switch (this->Internals->Callbacks[*sit].ArgumentType) {
        case CommandLineArguments::NO_ARGUMENT:
          break;
        case CommandLineArguments::CONCAT_ARGUMENT:
          strcat(argument, ""opt"");
          break;
        case CommandLineArguments::SPACE_ARGUMENT:
          strcat(argument, "" opt"");
          break;
        case CommandLineArguments::EQUAL_ARGUMENT:
          strcat(argument, ""=opt"");
          break;
        case CommandLineArguments::MULTI_ARGUMENT:
          strcat(argument, "" opt opt ..."");
          break;
      }
      char buffer[80];
      sprintf(buffer, format, argument);
      str << buffer;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1979.cpp,"[0, 0, 0, 0, 5, 0, 0, 1, 5, 0, 2, 0, 0, 0, 0, 50, 0, 0, 2, 2, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 0, 7, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1979.cpp,96
second/download/CMake/CMake/CMake/Source/kwsys/Directory.cpp,106,"sprintf(buf, ""%s*"", name.c_str());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1980.cpp,"{
    buf = new char[n + 1 + 1];
    sprintf(buf, ""%s*"", name.c_str());
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1980.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1980.cpp,13
second/download/CMake/CMake/CMake/Source/kwsys/Directory.cpp,112,"sprintf(buf, ""%s\\*"", name.c_str());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1981.cpp,"{
      sprintf(buf, ""%s\\*"", name.c_str());
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1981.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1981.cpp,19
second/download/CMake/CMake/CMake/Source/kwsys/Directory.cpp,114,"sprintf(buf, ""%s/*"", name.c_str());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1982.cpp,"{
      sprintf(buf, ""%s/*"", name.c_str());
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1982.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1982.cpp,21
second/download/CMake/CMake/CMake/Source/kwsys/Directory.cpp,148,"sprintf(buf, ""%s*"", name.c_str());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1983.cpp,"{
    buf = new char[n + 1 + 1];
    sprintf(buf, ""%s*"", name.c_str());
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1983.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1983.cpp,12
second/download/CMake/CMake/CMake/Source/kwsys/Directory.cpp,151,"sprintf(buf, ""%s/*"", name.c_str());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1984.cpp,"{
    buf = new char[n + 2 + 1];
    sprintf(buf, ""%s/*"", name.c_str());
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1984.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1984.cpp,15
second/download/CMake/CMake/CMake/Source/kwsys/SystemTools.cpp,184,"snprintf(resolved_path, maxlen, ""%s"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1985.cpp,"{
  const size_t maxlen = KWSYS_SYSTEMTOOLS_MAXPATH;
  snprintf(resolved_path, maxlen, ""%s"", path);
  BPath normalized(resolved_path, NULL, true);
  const char* resolved = normalized.Path();
  if (resolved != NULL) // NULL == No such file.
  {
    if (snprintf(resolved_path, maxlen, ""%s"", resolved) < maxlen) {
      return resolved_path;
    }
  }
  return NULL; // something went wrong.
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1985.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 2, 25, 0, 0, 3, 3, 0, 0, 2, 3, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 2, 0, 0, 4, 0, 0, 1, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1985.cpp,3
second/download/CMake/CMake/CMake/Source/kwsys/SystemTools.cpp,189,"(snprintf(resolved_path, maxlen, ""%s"", resolved) < maxlen;",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1986.cpp,"(snprintf(resolved_path, maxlen, ""%s"", resolved) < maxlen) {
      return resolved_path;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1986.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1986.cpp,8
second/download/CMake/CMake/CMake/Source/kwsys/SystemTools.cpp,4599,"sprintf(buffer, ""%ld"", osvi.dwMajorVersion);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1987.cpp,"{
        HKEY hKey;
#define BUFSIZE 80
        wchar_t szProductType[BUFSIZE];
        DWORD dwBufLen = BUFSIZE;
        LONG lRet;

        lRet =
          RegOpenKeyExW(HKEY_LOCAL_MACHINE,
                        L""SYSTEM\\CurrentControlSet\\Control\\ProductOptions"",
                        0, KEY_QUERY_VALUE, &hKey);
        if (lRet != ERROR_SUCCESS) {
          return 0;
        }

        lRet = RegQueryValueExW(hKey, L""ProductType"", NULL, NULL,
                                (LPBYTE)szProductType, &dwBufLen);

        if ((lRet != ERROR_SUCCESS) || (dwBufLen > BUFSIZE)) {
          return 0;
        }

        RegCloseKey(hKey);

        if (lstrcmpiW(L""WINNT"", szProductType) == 0) {
          res += "" Workstation"";
        }
        if (lstrcmpiW(L""LANMANNT"", szProductType) == 0) {
          res += "" Server"";
        }
        if (lstrcmpiW(L""SERVERNT"", szProductType) == 0) {
          res += "" Advanced Server"";
        }

        res += "" "";
        sprintf(buffer, ""%ld"", osvi.dwMajorVersion);
        res += buffer;
        res += ""."";
        sprintf(buffer, ""%ld"", osvi.dwMinorVersion);
        res += buffer;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1987.cpp,"[5, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 0, 58, 0, 0, 4, 4, 0, 0, 1, 18, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 5, 5, 0, 0, 8, 0, 0, 12, 0, 24, 1, 0, 1, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1987.cpp,181
second/download/CMake/CMake/CMake/Source/kwsys/SystemTools.cpp,4602,"sprintf(buffer, ""%ld"", osvi.dwMinorVersion);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1988.cpp,"{
        HKEY hKey;
#define BUFSIZE 80
        wchar_t szProductType[BUFSIZE];
        DWORD dwBufLen = BUFSIZE;
        LONG lRet;

        lRet =
          RegOpenKeyExW(HKEY_LOCAL_MACHINE,
                        L""SYSTEM\\CurrentControlSet\\Control\\ProductOptions"",
                        0, KEY_QUERY_VALUE, &hKey);
        if (lRet != ERROR_SUCCESS) {
          return 0;
        }

        lRet = RegQueryValueExW(hKey, L""ProductType"", NULL, NULL,
                                (LPBYTE)szProductType, &dwBufLen);

        if ((lRet != ERROR_SUCCESS) || (dwBufLen > BUFSIZE)) {
          return 0;
        }

        RegCloseKey(hKey);

        if (lstrcmpiW(L""WINNT"", szProductType) == 0) {
          res += "" Workstation"";
        }
        if (lstrcmpiW(L""LANMANNT"", szProductType) == 0) {
          res += "" Server"";
        }
        if (lstrcmpiW(L""SERVERNT"", szProductType) == 0) {
          res += "" Advanced Server"";
        }

        res += "" "";
        sprintf(buffer, ""%ld"", osvi.dwMajorVersion);
        res += buffer;
        res += ""."";
        sprintf(buffer, ""%ld"", osvi.dwMinorVersion);
        res += buffer;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1988.cpp,"[5, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 0, 58, 0, 0, 4, 4, 0, 0, 1, 18, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 5, 5, 0, 0, 8, 0, 0, 12, 0, 24, 1, 0, 1, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1988.cpp,184
second/download/CMake/CMake/CMake/Source/kwsys/SystemTools.cpp,4622,"sprintf(buffer, ""%ld"", osvi.dwBuildNumber & 0xFFFF);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1989.cpp,"{
          res += "" Service Pack 6a (Build "";
          sprintf(buffer, ""%ld"", osvi.dwBuildNumber & 0xFFFF);
          res += buffer;
          res += "")"";
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1989.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1989.cpp,204
second/download/CMake/CMake/CMake/Source/kwsys/SystemTools.cpp,4630,"sprintf(buffer, ""%ld"", osvi.dwBuildNumber & 0xFFFF);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1990.cpp,"{
          res += "" "";
          res += osvi.szCSDVersion;
          res += "" (Build "";
          sprintf(buffer, ""%ld"", osvi.dwBuildNumber & 0xFFFF);
          res += buffer;
          res += "")"";
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1990.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1990.cpp,212
second/download/CMake/CMake/CMake/Source/kwsys/SystemTools.cpp,4641,"sprintf(buffer, ""%ld"", osvi.dwBuildNumber & 0xFFFF);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1991.cpp,"{
        res += "" "";
        res += osvi.szCSDVersion;
        res += "" (Build "";
        sprintf(buffer, ""%ld"", osvi.dwBuildNumber & 0xFFFF);
        res += buffer;
        res += "")"";
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1991.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1991.cpp,223
second/download/CMake/CMake/CMake/Source/kwsys/SystemTools.cpp,4856,"fprintf(stderr, ""%s"", message);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1992.cpp,"{
  fprintf(stderr, ""%s"", message);
  fflush(stderr);
  return 1; // no further reporting required
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1992.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1992.cpp,2
second/download/CMake/CMake/CMake/Modules/CheckForPthreads.cpp,36,"printf(""%p CC: %d\n"", args, cc);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1993.cpp,"{
    printf(""%p CC: %d\n"", args, cc);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1993.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1993.cpp,4
second/download/CMake/CMake/CMake/Modules/FortranCInterface/Verify/VerifyC.cpp,3,"printf(""VerifyC\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1994.cpp,"{
  printf(""VerifyC\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1994.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1994.cpp,2
second/download/CMake/CMake/CMake/Tests/Simple/simpleCLib.cpp,7,"printf(""Count: %d/%d\n"", class, private);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1995.cpp,"{
    printf(""Count: %d/%d\n"", class, private);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1995.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1995.cpp,5
second/download/CMake/CMake/CMake/Tests/Simple/simpleWe.cpp,5,"printf(""This one has nonstandard extension\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1996.cpp,"{ printf(""This one has nonstandard extension\n""); }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1996.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1996.cpp,5
second/download/CMake/CMake/CMake/Tests/SetLang/bar.cpp,14,"printf(""passed foo is 21\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1997.cpp,"{
    printf(""passed foo is 21\n"");
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1997.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1997.cpp,4
second/download/CMake/CMake/CMake/Tests/SetLang/bar.cpp,17,"printf(""Failed foo is not 21\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1998.cpp,"{
  A a;
  if (a.i == 21) {
    printf(""passed foo is 21\n"");
    return 0;
  }
  printf(""Failed foo is not 21\n"");
  return -1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1998.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 7, 0, 0, 1, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1998.cpp,7
second/download/CMake/CMake/CMake/Tests/OutDir/OutDir.cpp,11,"printf(""found: [%s]\n"", *fname);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_1999.cpp,"{
      printf(""found: [%s]\n"", *fname);
      fclose(f);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_1999.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_1999.cpp,8
second/download/CMake/CMake/CMake/Tests/OutDir/OutDir.cpp,14,"printf(""error: [%s]\n"", *fname);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2000.cpp,"{
      printf(""error: [%s]\n"", *fname);
      result = 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2000.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2000.cpp,11
second/download/CMake/CMake/CMake/Tests/ReturnTest/returnTest.cpp,4,"printf(""Running command: %s with %d arguments\n"", argv[0], argc);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2001.cpp,"{
  printf(""Running command: %s with %d arguments\n"", argv[0], argc);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2001.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2001.cpp,2
second/download/CMake/CMake/CMake/Tests/MacroTest/macroTest.cpp,4,"printf(""Running command: %s with %d arguments\n"", argv[0], argc);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2002.cpp,"{
  printf(""Running command: %s with %d arguments\n"", argv[0], argc);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2002.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2002.cpp,2
second/download/CMake/CMake/CMake/Tests/VSResource/main.cpp,14,"fprintf(stdout, ""CTEST_FULL_OUTPUT (Avoid ctest truncation of output)\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2003.cpp,"{
  int ret = 1;

  fprintf(stdout, ""CTEST_FULL_OUTPUT (Avoid ctest truncation of output)\n"");

#ifdef CMAKE_RCDEFINE
  fprintf(stdout, ""CMAKE_RCDEFINE defined\n"");
#endif

#ifdef CMAKE_RCDEFINE_NO_QUOTED_STRINGS
  // Expect CMAKE_RCDEFINE to preprocess to exactly test.txt
  x test;
  test.txt = ""*exactly* test.txt"";
  fprintf(stdout, ""CMAKE_RCDEFINE_NO_QUOTED_STRINGS defined\n"");
  fprintf(stdout, ""CMAKE_RCDEFINE is %s, and is *not* a string constant\n"",
          CMAKE_RCDEFINE);
#else
  // Expect CMAKE_RCDEFINE to be a string:
  fprintf(stdout, ""CMAKE_RCDEFINE='%s', and is a string constant\n"",
          CMAKE_RCDEFINE);
#endif

  HRSRC hello = ::FindResource(NULL, MAKEINTRESOURCE(1025), ""TEXTFILE"");
  if (hello) {
    fprintf(stdout, ""FindResource worked\n"");
    HGLOBAL hgbl = ::LoadResource(NULL, hello);
    int datasize = (int)::SizeofResource(NULL, hello);
    if (hgbl && datasize > 0) {
      fprintf(stdout, ""LoadResource worked\n"");
      fprintf(stdout, ""SizeofResource returned datasize='%d'\n"", datasize);
      void* data = ::LockResource(hgbl);
      if (data) {
        fprintf(stdout, ""LockResource worked\n"");
        char* str = (char*)malloc(datasize + 4);
        if (str) {
          memcpy(str, data, datasize);
          str[datasize] = 'E';
          str[datasize + 1] = 'O';
          str[datasize + 2] = 'R';
          str[datasize + 3] = 0;
          fprintf(stdout, ""str='%s'\n"", str);
          free(str);

          ret = 0;

#ifdef CMAKE_RCDEFINE_NO_QUOTED_STRINGS
          fprintf(stdout, ""LoadString skipped\n"");
#else
          char buf[256];
          if (::LoadString(NULL, 1026, buf, sizeof(buf)) > 0) {
            fprintf(stdout, ""LoadString worked\n"");
            fprintf(stdout, ""buf='%s'\n"", buf);
          } else {
            fprintf(stdout, ""LoadString failed\n"");
            ret = 1;
          }
#endif
        }
      }
    }
  }

  return ret + lib();
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2003.cpp,"[5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 107, 0, 0, 8, 8, 0, 0, 6, 32, 0, 0, 0, 0, 2, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 92, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 5, 0, 5, 5, 3, 0, 25, 0, 0, 23, 0, 52, 8, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2003.cpp,4
second/download/CMake/CMake/CMake/Tests/VSResource/main.cpp,17,"fprintf(stdout, ""CMAKE_RCDEFINE defined\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2004.cpp,"{
  int ret = 1;

  fprintf(stdout, ""CTEST_FULL_OUTPUT (Avoid ctest truncation of output)\n"");

#ifdef CMAKE_RCDEFINE
  fprintf(stdout, ""CMAKE_RCDEFINE defined\n"");
#endif

#ifdef CMAKE_RCDEFINE_NO_QUOTED_STRINGS
  // Expect CMAKE_RCDEFINE to preprocess to exactly test.txt
  x test;
  test.txt = ""*exactly* test.txt"";
  fprintf(stdout, ""CMAKE_RCDEFINE_NO_QUOTED_STRINGS defined\n"");
  fprintf(stdout, ""CMAKE_RCDEFINE is %s, and is *not* a string constant\n"",
          CMAKE_RCDEFINE);
#else
  // Expect CMAKE_RCDEFINE to be a string:
  fprintf(stdout, ""CMAKE_RCDEFINE='%s', and is a string constant\n"",
          CMAKE_RCDEFINE);
#endif

  HRSRC hello = ::FindResource(NULL, MAKEINTRESOURCE(1025), ""TEXTFILE"");
  if (hello) {
    fprintf(stdout, ""FindResource worked\n"");
    HGLOBAL hgbl = ::LoadResource(NULL, hello);
    int datasize = (int)::SizeofResource(NULL, hello);
    if (hgbl && datasize > 0) {
      fprintf(stdout, ""LoadResource worked\n"");
      fprintf(stdout, ""SizeofResource returned datasize='%d'\n"", datasize);
      void* data = ::LockResource(hgbl);
      if (data) {
        fprintf(stdout, ""LockResource worked\n"");
        char* str = (char*)malloc(datasize + 4);
        if (str) {
          memcpy(str, data, datasize);
          str[datasize] = 'E';
          str[datasize + 1] = 'O';
          str[datasize + 2] = 'R';
          str[datasize + 3] = 0;
          fprintf(stdout, ""str='%s'\n"", str);
          free(str);

          ret = 0;

#ifdef CMAKE_RCDEFINE_NO_QUOTED_STRINGS
          fprintf(stdout, ""LoadString skipped\n"");
#else
          char buf[256];
          if (::LoadString(NULL, 1026, buf, sizeof(buf)) > 0) {
            fprintf(stdout, ""LoadString worked\n"");
            fprintf(stdout, ""buf='%s'\n"", buf);
          } else {
            fprintf(stdout, ""LoadString failed\n"");
            ret = 1;
          }
#endif
        }
      }
    }
  }

  return ret + lib();
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2004.cpp,"[5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 107, 0, 0, 8, 8, 0, 0, 6, 32, 0, 0, 0, 0, 2, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 92, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 5, 0, 5, 5, 3, 0, 25, 0, 0, 23, 0, 52, 8, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2004.cpp,7
second/download/CMake/CMake/CMake/Tests/VSResource/main.cpp,24,"fprintf(stdout, ""CMAKE_RCDEFINE_NO_QUOTED_STRINGS defined\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2005.cpp,"{
  int ret = 1;

  fprintf(stdout, ""CTEST_FULL_OUTPUT (Avoid ctest truncation of output)\n"");

#ifdef CMAKE_RCDEFINE
  fprintf(stdout, ""CMAKE_RCDEFINE defined\n"");
#endif

#ifdef CMAKE_RCDEFINE_NO_QUOTED_STRINGS
  // Expect CMAKE_RCDEFINE to preprocess to exactly test.txt
  x test;
  test.txt = ""*exactly* test.txt"";
  fprintf(stdout, ""CMAKE_RCDEFINE_NO_QUOTED_STRINGS defined\n"");
  fprintf(stdout, ""CMAKE_RCDEFINE is %s, and is *not* a string constant\n"",
          CMAKE_RCDEFINE);
#else
  // Expect CMAKE_RCDEFINE to be a string:
  fprintf(stdout, ""CMAKE_RCDEFINE='%s', and is a string constant\n"",
          CMAKE_RCDEFINE);
#endif

  HRSRC hello = ::FindResource(NULL, MAKEINTRESOURCE(1025), ""TEXTFILE"");
  if (hello) {
    fprintf(stdout, ""FindResource worked\n"");
    HGLOBAL hgbl = ::LoadResource(NULL, hello);
    int datasize = (int)::SizeofResource(NULL, hello);
    if (hgbl && datasize > 0) {
      fprintf(stdout, ""LoadResource worked\n"");
      fprintf(stdout, ""SizeofResource returned datasize='%d'\n"", datasize);
      void* data = ::LockResource(hgbl);
      if (data) {
        fprintf(stdout, ""LockResource worked\n"");
        char* str = (char*)malloc(datasize + 4);
        if (str) {
          memcpy(str, data, datasize);
          str[datasize] = 'E';
          str[datasize + 1] = 'O';
          str[datasize + 2] = 'R';
          str[datasize + 3] = 0;
          fprintf(stdout, ""str='%s'\n"", str);
          free(str);

          ret = 0;

#ifdef CMAKE_RCDEFINE_NO_QUOTED_STRINGS
          fprintf(stdout, ""LoadString skipped\n"");
#else
          char buf[256];
          if (::LoadString(NULL, 1026, buf, sizeof(buf)) > 0) {
            fprintf(stdout, ""LoadString worked\n"");
            fprintf(stdout, ""buf='%s'\n"", buf);
          } else {
            fprintf(stdout, ""LoadString failed\n"");
            ret = 1;
          }
#endif
        }
      }
    }
  }

  return ret + lib();
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2005.cpp,"[5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 107, 0, 0, 8, 8, 0, 0, 6, 32, 0, 0, 0, 0, 2, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 92, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 5, 0, 5, 5, 3, 0, 25, 0, 0, 23, 0, 52, 8, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2005.cpp,14
second/download/CMake/CMake/CMake/Tests/VSResource/main.cpp,25,"fprintf(stdout, ""CMAKE_RCDEFINE is %s, and is *not* a string constant\n"",
          CMAKE_RCDEFINE);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2006.cpp,"{
  int ret = 1;

  fprintf(stdout, ""CTEST_FULL_OUTPUT (Avoid ctest truncation of output)\n"");

#ifdef CMAKE_RCDEFINE
  fprintf(stdout, ""CMAKE_RCDEFINE defined\n"");
#endif

#ifdef CMAKE_RCDEFINE_NO_QUOTED_STRINGS
  // Expect CMAKE_RCDEFINE to preprocess to exactly test.txt
  x test;
  test.txt = ""*exactly* test.txt"";
  fprintf(stdout, ""CMAKE_RCDEFINE_NO_QUOTED_STRINGS defined\n"");
  fprintf(stdout, ""CMAKE_RCDEFINE is %s, and is *not* a string constant\n"",
          CMAKE_RCDEFINE);
#else
  // Expect CMAKE_RCDEFINE to be a string:
  fprintf(stdout, ""CMAKE_RCDEFINE='%s', and is a string constant\n"",
          CMAKE_RCDEFINE);
#endif

  HRSRC hello = ::FindResource(NULL, MAKEINTRESOURCE(1025), ""TEXTFILE"");
  if (hello) {
    fprintf(stdout, ""FindResource worked\n"");
    HGLOBAL hgbl = ::LoadResource(NULL, hello);
    int datasize = (int)::SizeofResource(NULL, hello);
    if (hgbl && datasize > 0) {
      fprintf(stdout, ""LoadResource worked\n"");
      fprintf(stdout, ""SizeofResource returned datasize='%d'\n"", datasize);
      void* data = ::LockResource(hgbl);
      if (data) {
        fprintf(stdout, ""LockResource worked\n"");
        char* str = (char*)malloc(datasize + 4);
        if (str) {
          memcpy(str, data, datasize);
          str[datasize] = 'E';
          str[datasize + 1] = 'O';
          str[datasize + 2] = 'R';
          str[datasize + 3] = 0;
          fprintf(stdout, ""str='%s'\n"", str);
          free(str);

          ret = 0;

#ifdef CMAKE_RCDEFINE_NO_QUOTED_STRINGS
          fprintf(stdout, ""LoadString skipped\n"");
#else
          char buf[256];
          if (::LoadString(NULL, 1026, buf, sizeof(buf)) > 0) {
            fprintf(stdout, ""LoadString worked\n"");
            fprintf(stdout, ""buf='%s'\n"", buf);
          } else {
            fprintf(stdout, ""LoadString failed\n"");
            ret = 1;
          }
#endif
        }
      }
    }
  }

  return ret + lib();
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2006.cpp,"[5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 107, 0, 0, 8, 8, 0, 0, 6, 32, 0, 0, 0, 0, 2, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 92, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 5, 0, 5, 5, 3, 0, 25, 0, 0, 23, 0, 52, 8, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2006.cpp,15
second/download/CMake/CMake/CMake/Tests/VSResource/main.cpp,29,"fprintf(stdout, ""CMAKE_RCDEFINE='%s', and is a string constant\n"",
          CMAKE_RCDEFINE);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2007.cpp,"{
  int ret = 1;

  fprintf(stdout, ""CTEST_FULL_OUTPUT (Avoid ctest truncation of output)\n"");

#ifdef CMAKE_RCDEFINE
  fprintf(stdout, ""CMAKE_RCDEFINE defined\n"");
#endif

#ifdef CMAKE_RCDEFINE_NO_QUOTED_STRINGS
  // Expect CMAKE_RCDEFINE to preprocess to exactly test.txt
  x test;
  test.txt = ""*exactly* test.txt"";
  fprintf(stdout, ""CMAKE_RCDEFINE_NO_QUOTED_STRINGS defined\n"");
  fprintf(stdout, ""CMAKE_RCDEFINE is %s, and is *not* a string constant\n"",
          CMAKE_RCDEFINE);
#else
  // Expect CMAKE_RCDEFINE to be a string:
  fprintf(stdout, ""CMAKE_RCDEFINE='%s', and is a string constant\n"",
          CMAKE_RCDEFINE);
#endif

  HRSRC hello = ::FindResource(NULL, MAKEINTRESOURCE(1025), ""TEXTFILE"");
  if (hello) {
    fprintf(stdout, ""FindResource worked\n"");
    HGLOBAL hgbl = ::LoadResource(NULL, hello);
    int datasize = (int)::SizeofResource(NULL, hello);
    if (hgbl && datasize > 0) {
      fprintf(stdout, ""LoadResource worked\n"");
      fprintf(stdout, ""SizeofResource returned datasize='%d'\n"", datasize);
      void* data = ::LockResource(hgbl);
      if (data) {
        fprintf(stdout, ""LockResource worked\n"");
        char* str = (char*)malloc(datasize + 4);
        if (str) {
          memcpy(str, data, datasize);
          str[datasize] = 'E';
          str[datasize + 1] = 'O';
          str[datasize + 2] = 'R';
          str[datasize + 3] = 0;
          fprintf(stdout, ""str='%s'\n"", str);
          free(str);

          ret = 0;

#ifdef CMAKE_RCDEFINE_NO_QUOTED_STRINGS
          fprintf(stdout, ""LoadString skipped\n"");
#else
          char buf[256];
          if (::LoadString(NULL, 1026, buf, sizeof(buf)) > 0) {
            fprintf(stdout, ""LoadString worked\n"");
            fprintf(stdout, ""buf='%s'\n"", buf);
          } else {
            fprintf(stdout, ""LoadString failed\n"");
            ret = 1;
          }
#endif
        }
      }
    }
  }

  return ret + lib();
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2007.cpp,"[5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 107, 0, 0, 8, 8, 0, 0, 6, 32, 0, 0, 0, 0, 2, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 92, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 5, 0, 5, 5, 3, 0, 25, 0, 0, 23, 0, 52, 8, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2007.cpp,19
second/download/CMake/CMake/CMake/Tests/VSResource/main.cpp,35,"fprintf(stdout, ""FindResource worked\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2008.cpp,"{
    fprintf(stdout, ""FindResource worked\n"");
    HGLOBAL hgbl = ::LoadResource(NULL, hello);
    int datasize = (int)::SizeofResource(NULL, hello);
    if (hgbl && datasize > 0) {
      fprintf(stdout, ""LoadResource worked\n"");
      fprintf(stdout, ""SizeofResource returned datasize='%d'\n"", datasize);
      void* data = ::LockResource(hgbl);
      if (data) {
        fprintf(stdout, ""LockResource worked\n"");
        char* str = (char*)malloc(datasize + 4);
        if (str) {
          memcpy(str, data, datasize);
          str[datasize] = 'E';
          str[datasize + 1] = 'O';
          str[datasize + 2] = 'R';
          str[datasize + 3] = 0;
          fprintf(stdout, ""str='%s'\n"", str);
          free(str);

          ret = 0;

#ifdef CMAKE_RCDEFINE_NO_QUOTED_STRINGS
          fprintf(stdout, ""LoadString skipped\n"");
#else
          char buf[256];
          if (::LoadString(NULL, 1026, buf, sizeof(buf)) > 0) {
            fprintf(stdout, ""LoadString worked\n"");
            fprintf(stdout, ""buf='%s'\n"", buf);
          } else {
            fprintf(stdout, ""LoadString failed\n"");
            ret = 1;
          }
#endif
        }
      }
    }
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2008.cpp,"[4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 77, 0, 0, 5, 5, 0, 0, 4, 23, 0, 0, 0, 0, 2, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 66, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 4, 4, 2, 0, 17, 0, 0, 17, 0, 36, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2008.cpp,25
second/download/CMake/CMake/CMake/Tests/VSResource/main.cpp,39,"fprintf(stdout, ""LoadResource worked\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2009.cpp,"{
      fprintf(stdout, ""LoadResource worked\n"");
      fprintf(stdout, ""SizeofResource returned datasize='%d'\n"", datasize);
      void* data = ::LockResource(hgbl);
      if (data) {
        fprintf(stdout, ""LockResource worked\n"");
        char* str = (char*)malloc(datasize + 4);
        if (str) {
          memcpy(str, data, datasize);
          str[datasize] = 'E';
          str[datasize + 1] = 'O';
          str[datasize + 2] = 'R';
          str[datasize + 3] = 0;
          fprintf(stdout, ""str='%s'\n"", str);
          free(str);

          ret = 0;

#ifdef CMAKE_RCDEFINE_NO_QUOTED_STRINGS
          fprintf(stdout, ""LoadString skipped\n"");
#else
          char buf[256];
          if (::LoadString(NULL, 1026, buf, sizeof(buf)) > 0) {
            fprintf(stdout, ""LoadString worked\n"");
            fprintf(stdout, ""buf='%s'\n"", buf);
          } else {
            fprintf(stdout, ""LoadString failed\n"");
            ret = 1;
          }
#endif
        }
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2009.cpp,"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 60, 0, 0, 3, 3, 0, 0, 2, 21, 0, 0, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 56, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 3, 3, 2, 0, 14, 0, 0, 16, 0, 30, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2009.cpp,29
second/download/CMake/CMake/CMake/Tests/VSResource/main.cpp,40,"fprintf(stdout, ""SizeofResource returned datasize='%d'\n"", datasize);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2010.cpp,"{
      fprintf(stdout, ""LoadResource worked\n"");
      fprintf(stdout, ""SizeofResource returned datasize='%d'\n"", datasize);
      void* data = ::LockResource(hgbl);
      if (data) {
        fprintf(stdout, ""LockResource worked\n"");
        char* str = (char*)malloc(datasize + 4);
        if (str) {
          memcpy(str, data, datasize);
          str[datasize] = 'E';
          str[datasize + 1] = 'O';
          str[datasize + 2] = 'R';
          str[datasize + 3] = 0;
          fprintf(stdout, ""str='%s'\n"", str);
          free(str);

          ret = 0;

#ifdef CMAKE_RCDEFINE_NO_QUOTED_STRINGS
          fprintf(stdout, ""LoadString skipped\n"");
#else
          char buf[256];
          if (::LoadString(NULL, 1026, buf, sizeof(buf)) > 0) {
            fprintf(stdout, ""LoadString worked\n"");
            fprintf(stdout, ""buf='%s'\n"", buf);
          } else {
            fprintf(stdout, ""LoadString failed\n"");
            ret = 1;
          }
#endif
        }
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2010.cpp,"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 60, 0, 0, 3, 3, 0, 0, 2, 21, 0, 0, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 56, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 3, 3, 2, 0, 14, 0, 0, 16, 0, 30, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2010.cpp,30
second/download/CMake/CMake/CMake/Tests/VSResource/main.cpp,43,"fprintf(stdout, ""LockResource worked\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2011.cpp,"{
        fprintf(stdout, ""LockResource worked\n"");
        char* str = (char*)malloc(datasize + 4);
        if (str) {
          memcpy(str, data, datasize);
          str[datasize] = 'E';
          str[datasize + 1] = 'O';
          str[datasize + 2] = 'R';
          str[datasize + 3] = 0;
          fprintf(stdout, ""str='%s'\n"", str);
          free(str);

          ret = 0;

#ifdef CMAKE_RCDEFINE_NO_QUOTED_STRINGS
          fprintf(stdout, ""LoadString skipped\n"");
#else
          char buf[256];
          if (::LoadString(NULL, 1026, buf, sizeof(buf)) > 0) {
            fprintf(stdout, ""LoadString worked\n"");
            fprintf(stdout, ""buf='%s'\n"", buf);
          } else {
            fprintf(stdout, ""LoadString failed\n"");
            ret = 1;
          }
#endif
        }
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2011.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 49, 0, 0, 2, 2, 0, 0, 1, 19, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 46, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 2, 2, 2, 0, 11, 0, 0, 14, 0, 24, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2011.cpp,33
second/download/CMake/CMake/CMake/Tests/VSResource/main.cpp,51,"fprintf(stdout, ""str='%s'\n"", str);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2012.cpp,"{
          memcpy(str, data, datasize);
          str[datasize] = 'E';
          str[datasize + 1] = 'O';
          str[datasize + 2] = 'R';
          str[datasize + 3] = 0;
          fprintf(stdout, ""str='%s'\n"", str);
          free(str);

          ret = 0;

#ifdef CMAKE_RCDEFINE_NO_QUOTED_STRINGS
          fprintf(stdout, ""LoadString skipped\n"");
#else
          char buf[256];
          if (::LoadString(NULL, 1026, buf, sizeof(buf)) > 0) {
            fprintf(stdout, ""LoadString worked\n"");
            fprintf(stdout, ""buf='%s'\n"", buf);
          } else {
            fprintf(stdout, ""LoadString failed\n"");
            ret = 1;
          }
#endif
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2012.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 41, 0, 0, 1, 1, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 40, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 1, 1, 2, 0, 9, 0, 0, 13, 0, 21, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2012.cpp,41
second/download/CMake/CMake/CMake/Tests/VSResource/main.cpp,57,"fprintf(stdout, ""LoadString skipped\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2013.cpp,"{
          memcpy(str, data, datasize);
          str[datasize] = 'E';
          str[datasize + 1] = 'O';
          str[datasize + 2] = 'R';
          str[datasize + 3] = 0;
          fprintf(stdout, ""str='%s'\n"", str);
          free(str);

          ret = 0;

#ifdef CMAKE_RCDEFINE_NO_QUOTED_STRINGS
          fprintf(stdout, ""LoadString skipped\n"");
#else
          char buf[256];
          if (::LoadString(NULL, 1026, buf, sizeof(buf)) > 0) {
            fprintf(stdout, ""LoadString worked\n"");
            fprintf(stdout, ""buf='%s'\n"", buf);
          } else {
            fprintf(stdout, ""LoadString failed\n"");
            ret = 1;
          }
#endif
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2013.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 41, 0, 0, 1, 1, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 40, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 1, 1, 2, 0, 9, 0, 0, 13, 0, 21, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2013.cpp,47
second/download/CMake/CMake/CMake/Tests/VSResource/main.cpp,61,"fprintf(stdout, ""LoadString worked\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2014.cpp,"{
            fprintf(stdout, ""LoadString worked\n"");
            fprintf(stdout, ""buf='%s'\n"", buf);
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2014.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2014.cpp,51
second/download/CMake/CMake/CMake/Tests/VSResource/main.cpp,62,"fprintf(stdout, ""buf='%s'\n"", buf);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2015.cpp,"{
            fprintf(stdout, ""LoadString worked\n"");
            fprintf(stdout, ""buf='%s'\n"", buf);
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2015.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2015.cpp,52
second/download/CMake/CMake/CMake/Tests/VSResource/main.cpp,64,"fprintf(stdout, ""LoadString failed\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2016.cpp,"{
            fprintf(stdout, ""LoadString failed\n"");
            ret = 1;
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2016.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2016.cpp,54
second/download/CMake/CMake/CMake/Tests/CTestConfig/CTestConfig.cpp,6,"fprintf(stdout, ""%s\n"", argv[i]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2017.cpp,"{
    fprintf(stdout, ""%s\n"", argv[i]);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2017.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2017.cpp,4
second/download/CMake/CMake/CMake/Tests/CTestConfig/CTestConfig.cpp,10,"fprintf(stdout, ""CMAKE_BUILD_TYPE is %s\n"", CMAKE_BUILD_TYPE);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2018.cpp,"{
  int i = 0;
  for (; i < argc; ++i) {
    fprintf(stdout, ""%s\n"", argv[i]);
  }

#ifdef CMAKE_BUILD_TYPE
  fprintf(stdout, ""CMAKE_BUILD_TYPE is %s\n"", CMAKE_BUILD_TYPE);
#endif

#ifdef CMAKE_INTDIR
  fprintf(stdout, ""CMAKE_INTDIR is %s\n"", CMAKE_INTDIR);
#endif

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2018.cpp,"[0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 1, 1, 0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 3, 0, 0, 3, 0, 9, 4, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2018.cpp,8
second/download/CMake/CMake/CMake/Tests/CTestConfig/CTestConfig.cpp,14,"fprintf(stdout, ""CMAKE_INTDIR is %s\n"", CMAKE_INTDIR);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2019.cpp,"{
  int i = 0;
  for (; i < argc; ++i) {
    fprintf(stdout, ""%s\n"", argv[i]);
  }

#ifdef CMAKE_BUILD_TYPE
  fprintf(stdout, ""CMAKE_BUILD_TYPE is %s\n"", CMAKE_BUILD_TYPE);
#endif

#ifdef CMAKE_INTDIR
  fprintf(stdout, ""CMAKE_INTDIR is %s\n"", CMAKE_INTDIR);
#endif

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2019.cpp,"[0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 1, 1, 0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 3, 0, 0, 3, 0, 9, 4, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2019.cpp,12
second/download/CMake/CMake/CMake/Tests/GeneratorExpression/pwd.cpp,29,"printf(""%s\n"", buf);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2020.cpp,"{
#define BUFSZ 20000
  char buf[BUFSZ + 1];
#ifdef _WIN32
  char* pos;
#endif
  getcurdir(buf, BUFSZ);
#ifdef _WIN32
  pos = buf;
  while (*pos) {
    if (*pos == '\\') {
      *pos = '/';
    }
    ++pos;
  }
#endif
  printf(""%s\n"", buf);
  return EXIT_SUCCESS;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2020.cpp,"[1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 21, 0, 0, 2, 2, 0, 0, 0, 4, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 2, 1, 0, 0, 2, 0, 0, 5, 0, 4, 5, 0, 1, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2020.cpp,17
second/download/CMake/CMake/CMake/Tests/GeneratorExpression/echo.cpp,8,"printf(""%s\n"", argv[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2021.cpp,"{
#ifndef SRC_GENEX_WORKS
#error SRC_GENEX_WORKS not defined
#endif
  printf(""%s\n"", argv[1]);
  return EXIT_SUCCESS;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2021.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2021.cpp,5
second/download/CMake/CMake/CMake/Tests/CTestTestTimeout/sleep.cpp,10,"fprintf(stderr, ""before sleep\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2022.cpp,"{
  fprintf(stderr, ""before sleep\n"");
  fflush(stderr); /* should not be needed, but just in case */
#if defined(_WIN32)
  Sleep((TIMEOUT + 4) * 1000);
#else
  sleep((TIMEOUT + 4));
#endif
  fprintf(stderr, ""after sleep\n"");
  fflush(stderr); /* should not be needed, but just in case */
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2022.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 6, 0, 9, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2022.cpp,2
second/download/CMake/CMake/CMake/Tests/CTestTestTimeout/sleep.cpp,17,"fprintf(stderr, ""after sleep\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2023.cpp,"{
  fprintf(stderr, ""before sleep\n"");
  fflush(stderr); /* should not be needed, but just in case */
#if defined(_WIN32)
  Sleep((TIMEOUT + 4) * 1000);
#else
  sleep((TIMEOUT + 4));
#endif
  fprintf(stderr, ""after sleep\n"");
  fflush(stderr); /* should not be needed, but just in case */
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2023.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 6, 0, 9, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2023.cpp,9
second/download/CMake/CMake/CMake/Tests/Assembler/main.cpp,11,"printf(""hello assembler world, %d arguments  given\n"", argc);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2024.cpp,"{
#endif
  printf(""hello assembler world, %d arguments  given\n"", argc);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2024.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 1, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2024.cpp,3
second/download/CMake/CMake/CMake/Tests/Complex/Library/testConly.cpp,6,"printf(""TEST_C_FLAGS failed\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2025.cpp,"{
#ifndef TEST_C_FLAGS
  printf(""TEST_C_FLAGS failed\n"");
  return 0;
#else
  printf(""Passed: TEST_C_FLAGS passed\n"");
#endif
  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2025.cpp,"[0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 2, 0, 2, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2025.cpp,3
second/download/CMake/CMake/CMake/Tests/Complex/Library/testConly.cpp,9,"printf(""Passed: TEST_C_FLAGS passed\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2026.cpp,"{
#ifndef TEST_C_FLAGS
  printf(""TEST_C_FLAGS failed\n"");
  return 0;
#else
  printf(""Passed: TEST_C_FLAGS passed\n"");
#endif
  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2026.cpp,"[0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 2, 0, 2, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2026.cpp,6
second/download/CMake/CMake/CMake/Tests/Complex/Library/create_file.cpp,6,"fprintf(stderr, ""Missing name of file to create.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2027.cpp,"{
    fprintf(stderr, ""Missing name of file to create.\n"");
    return EXIT_FAILURE;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2027.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2027.cpp,3
second/download/CMake/CMake/CMake/Tests/Complex/Library/create_file.cpp,12,"fprintf(stderr, ""Unable to open %s for writing!\n"", argv[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2028.cpp,"{
    fprintf(stderr, ""Unable to open %s for writing!\n"", argv[1]);
    return EXIT_FAILURE;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2028.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2028.cpp,9
second/download/CMake/CMake/CMake/Tests/Complex/Library/create_file.cpp,17,"fprintf(stderr, ""Unable to close %s!\n"", argv[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2029.cpp,"{
    fprintf(stderr, ""Unable to close %s!\n"", argv[1]);
    return EXIT_FAILURE;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2029.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2029.cpp,14
second/download/CMake/CMake/CMake/Tests/Complex/Library/create_file.cpp,21,"fprintf(stdout, "">> Creating %s!\n"", argv[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2030.cpp,"{
  if (argc < 2) {
    fprintf(stderr, ""Missing name of file to create.\n"");
    return EXIT_FAILURE;
  }

  FILE* stream = fopen(argv[1], ""w"");
  if (stream == NULL) {
    fprintf(stderr, ""Unable to open %s for writing!\n"", argv[1]);
    return EXIT_FAILURE;
  }

  if (fclose(stream)) {
    fprintf(stderr, ""Unable to close %s!\n"", argv[1]);
    return EXIT_FAILURE;
  }

  fprintf(stdout, "">> Creating %s!\n"", argv[1]);

  return EXIT_SUCCESS;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2030.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 28, 0, 0, 1, 1, 0, 0, 1, 10, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 3, 0, 0, 6, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2030.cpp,18
second/download/CMake/CMake/CMake/Tests/TargetName/executables/hello_world.cpp,3,"printf(""hello, world\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2031.cpp,"{
  printf(""hello, world\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2031.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2031.cpp,2
second/download/CMake/CMake/CMake/Tests/RunCMake/exit_code.cpp,26,"fprintf(stderr, ""Failed to find string '%s' in '%s'\n"", substring_success,
          str);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2032.cpp,"{
  const char* substring_failure = ""non_zero_exit"";
  const char* substring_success = ""zero_exit"";
  const char* str = argv[1];
  if (argc < 2) {
    return EXIT_FAILURE;
  }
  if (strcmp(str, substring_success) == 0) {
    return EXIT_SUCCESS;
  } else if (strcmp(str, substring_failure) == 0) {
    return EXIT_FAILURE;
  }
  fprintf(stderr, ""Failed to find string '%s' in '%s'\n"", substring_success,
          str);
  return EXIT_FAILURE;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2032.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 23, 0, 0, 3, 3, 0, 0, 3, 7, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 3, 3, 0, 0, 3, 0, 0, 1, 1, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2032.cpp,13
second/download/CMake/CMake/CMake/Tests/RunCMake/pseudo_emulator.cpp,6,"printf(""Command:"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2033.cpp,"{
  int ii;

  printf(""Command:"");
  for (ii = 1; ii < argc; ++ii) {
    printf("" \""%s\"""", argv[ii]);
  }
  printf(""\n"");

  return 42;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2033.cpp,"[0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 1, 1, 0, 0, 1, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 3, 0, 0, 3, 0, 4, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2033.cpp,4
second/download/CMake/CMake/CMake/Tests/RunCMake/pseudo_emulator.cpp,8,"printf("" \""%s\"""", argv[ii]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2034.cpp,"{
    printf("" \""%s\"""", argv[ii]);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2034.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2034.cpp,6
second/download/CMake/CMake/CMake/Tests/RunCMake/pseudo_emulator.cpp,10,"printf(""\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2035.cpp,"{
  int ii;

  printf(""Command:"");
  for (ii = 1; ii < argc; ++ii) {
    printf("" \""%s\"""", argv[ii]);
  }
  printf(""\n"");

  return 42;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2035.cpp,"[0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 1, 1, 0, 0, 1, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 3, 0, 0, 3, 0, 4, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2035.cpp,8
second/download/CMake/CMake/CMake/Tests/RunCMake/pseudo_emulator_custom_command.cpp,28,"fprintf(stderr, ""Failed to find string '%s' in '%s'\n"", substring_success,
          str);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2036.cpp,"{
  const char* substring_failure = ""generated_exe_emulator_unexpected"";
  // Require a slash to make sure it is a path and not a target name.
  const char* substring_success = ""/generated_exe_emulator_expected"";
  const char* str = argv[1];
  if (argc < 2) {
    return EXIT_FAILURE;
  }
  if (strstr(str, substring_success) != 0) {
    return EXIT_SUCCESS;
  }
  if (strstr(str, substring_failure) != 0) {
    return EXIT_FAILURE;
  }
  fprintf(stderr, ""Failed to find string '%s' in '%s'\n"", substring_success,
          str);
  return EXIT_FAILURE;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2036.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 23, 0, 0, 3, 3, 0, 0, 3, 7, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 3, 3, 0, 0, 3, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2036.cpp,15
second/download/CMake/CMake/CMake/Tests/RunCMake/pseudo_tidy.cpp,8,"fprintf(stdout, ""stdout from bad command line arg '-bad'\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2037.cpp,"{
      fprintf(stdout, ""stdout from bad command line arg '-bad'\n"");
      fprintf(stderr, ""stderr from bad command line arg '-bad'\n"");
      return 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2037.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2037.cpp,5
second/download/CMake/CMake/CMake/Tests/RunCMake/pseudo_tidy.cpp,9,"fprintf(stderr, ""stderr from bad command line arg '-bad'\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2038.cpp,"{
      fprintf(stdout, ""stdout from bad command line arg '-bad'\n"");
      fprintf(stderr, ""stderr from bad command line arg '-bad'\n"");
      return 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2038.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2038.cpp,6
second/download/CMake/CMake/CMake/Tests/RunCMake/pseudo_tidy.cpp,13,"fprintf(stdout, ""%s:0:0: warning: message [checker]\n"", argv[i]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2039.cpp,"{
      fprintf(stdout, ""%s:0:0: warning: message [checker]\n"", argv[i]);
      break;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2039.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2039.cpp,10
second/download/CMake/CMake/CMake/Tests/RunCMake/pseudo_tidy.cpp,17,"fprintf(stderr, ""1 warning generated.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2040.cpp,"{
  int i;
  for (i = 1; i < argc; ++i) {
    if (strcmp(argv[i], ""-bad"") == 0) {
      fprintf(stdout, ""stdout from bad command line arg '-bad'\n"");
      fprintf(stderr, ""stderr from bad command line arg '-bad'\n"");
      return 1;
    }
    if (argv[i][0] != '-') {
      fprintf(stdout, ""%s:0:0: warning: message [checker]\n"", argv[i]);
      break;
    }
  }
  fprintf(stderr, ""1 warning generated.\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2040.cpp,"[2, 0, 1, 0, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 24, 0, 0, 1, 1, 0, 0, 1, 11, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 2, 0, 0, 5, 0, 0, 4, 0, 11, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2040.cpp,14
second/download/CMake/CMake/CMake/Tests/RunCMake/pseudo_iwyu.cpp,4,"fprintf(stderr, ""should add these lines:\n#include <...>\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2041.cpp,"{
  fprintf(stderr, ""should add these lines:\n#include <...>\n"");
  /* include-what-you-use always returns failure */
  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2041.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2041.cpp,2
second/download/CMake/CMake/CMake/Tests/RunCMake/pseudo_cpplint.cpp,13,"fprintf(stderr, ""%s:0:  message  [category/category] [0]\n"", argv[i]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2042.cpp,"{
        fprintf(stderr, ""%s:0:  message  [category/category] [0]\n"", argv[i]);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2042.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2042.cpp,10
second/download/CMake/CMake/CMake/Tests/RunCMake/pseudo_cpplint.cpp,15,"fprintf(stdout, ""Done processing %s\nTotal errors found: %i\n"", argv[i],
              error);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2043.cpp,"{
      if (error) {
        fprintf(stderr, ""%s:0:  message  [category/category] [0]\n"", argv[i]);
      }
      fprintf(stdout, ""Done processing %s\nTotal errors found: %i\n"", argv[i],
              error);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2043.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2043.cpp,12
second/download/CMake/CMake/CMake/Tests/RunCMake/CMP0065/subproject/main.cpp,4,"printf(""Hello World\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2044.cpp,"{
  printf(""Hello World\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2044.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2044.cpp,2
second/download/CMake/CMake/CMake/Tests/RunCMake/ctest_labels_for_subprojects/MyProductionCode/production.cpp,6,"printf(""This doesn't happen.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2045.cpp,"{
    printf(""This doesn't happen.\n"");
    printf(""Neither does this.\n"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2045.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2045.cpp,4
second/download/CMake/CMake/CMake/Tests/RunCMake/ctest_labels_for_subprojects/MyProductionCode/production.cpp,7,"printf(""Neither does this.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2046.cpp,"{
    printf(""This doesn't happen.\n"");
    printf(""Neither does this.\n"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2046.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2046.cpp,5
second/download/CMake/CMake/CMake/Tests/RunCMake/ctest_labels_for_subprojects/MyProductionCode/production.cpp,11,"printf(""This does happen.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2047.cpp,"{
    printf(""This does happen.\n"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2047.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2047.cpp,9
second/download/CMake/CMake/CMake/Tests/RunCMake/ctest_labels_for_subprojects/MyExperimentalFeature/experimental.cpp,6,"printf(""This doesn't happen.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2048.cpp,"{
    printf(""This doesn't happen.\n"");
    printf(""Neither does this.\n"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2048.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2048.cpp,4
second/download/CMake/CMake/CMake/Tests/RunCMake/ctest_labels_for_subprojects/MyExperimentalFeature/experimental.cpp,7,"printf(""Neither does this.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2049.cpp,"{
    printf(""This doesn't happen.\n"");
    printf(""Neither does this.\n"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2049.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2049.cpp,5
second/download/CMake/CMake/CMake/Tests/RunCMake/ctest_labels_for_subprojects/MyExperimentalFeature/experimental.cpp,11,"printf(""This does happen.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2050.cpp,"{
    printf(""This does happen.\n"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2050.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2050.cpp,9
second/download/CMake/CMake/CMake/Tests/RunCMake/ctest_labels_for_subprojects/MyThirdPartyDependency/src/thirdparty.cpp,11,);;,second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2051.cpp,"{
  printf(This function has an error!\n"");
  n = 5;
  return 0;
}

int notcalled()
{
  printf(This function doesn't get called.\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2051.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2051.cpp,9
second/download/CMake/CMake/CMake/Tests/RunCMake/CrosscompilingEmulator/generated_exe_emulator_unexpected.cpp,5,"fprintf(stderr, ""unexpected argument: '%s'\n"", argv[i]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2052.cpp,"{
    fprintf(stderr, ""unexpected argument: '%s'\n"", argv[i]);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2052.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2052.cpp,3
second/download/CMake/CMake/CMake/Tests/RunCMake/AutoExportDll/world.cpp,4,"printf(""world"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2053.cpp,"{
  printf(""world"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2053.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2053.cpp,2
second/download/CMake/CMake/CMake/Tests/RunCMake/AutoExportDll/hello2.cpp,6,"printf(""hello exec:%i"", own_auto_export_function(41));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2054.cpp,"{
  printf(""hello exec:%i"", own_auto_export_function(41));
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2054.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2054.cpp,2
second/download/CMake/CMake/CMake/Tests/RunCMake/AutoExportDll/say.cpp,37,"printf("" "");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2055.cpp,"{
  // test static data (needs declspec to work)
  Hello::Data = 120;
  Hello h;
  h.real();
  hello();
  printf("" "");
  world();
  printf(""\n"");
  foo();
  printf(""\n"");
  bar();
  objlib();
  printf(""\n"");
#ifdef HAS_JUSTNOP
  justnop();
#endif
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2055.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 19, 0, 0, 1, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 12, 0, 4, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2055.cpp,7
second/download/CMake/CMake/CMake/Tests/RunCMake/AutoExportDll/say.cpp,39,"printf(""\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2056.cpp,"{
  // test static data (needs declspec to work)
  Hello::Data = 120;
  Hello h;
  h.real();
  hello();
  printf("" "");
  world();
  printf(""\n"");
  foo();
  printf(""\n"");
  bar();
  objlib();
  printf(""\n"");
#ifdef HAS_JUSTNOP
  justnop();
#endif
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2056.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 19, 0, 0, 1, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 12, 0, 4, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2056.cpp,9
second/download/CMake/CMake/CMake/Tests/RunCMake/AutoExportDll/say.cpp,41,"printf(""\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2057.cpp,"{
  // test static data (needs declspec to work)
  Hello::Data = 120;
  Hello h;
  h.real();
  hello();
  printf("" "");
  world();
  printf(""\n"");
  foo();
  printf(""\n"");
  bar();
  objlib();
  printf(""\n"");
#ifdef HAS_JUSTNOP
  justnop();
#endif
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2057.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 19, 0, 0, 1, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 12, 0, 4, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2057.cpp,11
second/download/CMake/CMake/CMake/Tests/RunCMake/AutoExportDll/say.cpp,44,"printf(""\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2058.cpp,"{
  // test static data (needs declspec to work)
  Hello::Data = 120;
  Hello h;
  h.real();
  hello();
  printf("" "");
  world();
  printf(""\n"");
  foo();
  printf(""\n"");
  bar();
  objlib();
  printf(""\n"");
#ifdef HAS_JUSTNOP
  justnop();
#endif
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2058.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 19, 0, 0, 1, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 12, 0, 4, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2058.cpp,14
second/download/CMake/CMake/CMake/Tests/RunCMake/AutoExportDll/sub/sub.cpp,3,"printf("""");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2059.cpp,"{
  printf("""");
  return 10;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2059.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2059.cpp,2
second/download/CMake/CMake/CMake/Tests/RunCMake/Ninja/hello.cpp,4,"printf(""Hello world!\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2060.cpp,"{
  printf(""Hello world!\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2060.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2060.cpp,2
second/download/CMake/CMake/CMake/Tests/RunCMake/Ninja/greeting.cpp,7,"printf(""Hello world!\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2061.cpp,"{
  printf(""Hello world!\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2061.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2061.cpp,2
second/download/CMake/CMake/CMake/Tests/RunCMake/Ninja/SubDirPrefix/greeting.cpp,7,"printf(""Hello world!\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2062.cpp,"{
  printf(""Hello world!\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2062.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2062.cpp,2
second/download/CMake/CMake/CMake/Tests/Dependency/Exec4/ExecMain.cpp,10,"printf(""Dependency test executable ran successfully.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2063.cpp,"{
  FiveFunction();
  TwoFunction();

  printf(""Dependency test executable ran successfully.\n"");

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2063.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2063.cpp,5
second/download/CMake/CMake/CMake/Tests/Dependency/Case5/foo.cpp,7,"printf(""foo()\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2064.cpp,"{
  printf(""foo()\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2064.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2064.cpp,2
second/download/CMake/CMake/CMake/Tests/Dependency/Case5/bar.cpp,10,"printf(""bar()\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2065.cpp,"{
  foo();
  printf(""bar()\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2065.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2065.cpp,3
second/download/CMake/CMake/CMake/Tests/Dependency/Exec/ExecMain.cpp,14,"printf(""Dependency test executable ran successfully.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2066.cpp,"{
  SixAFunction();
  SixBFunction();
  NoDepBFunction();
  NoDepCFunction();

  printf(""Dependency test executable ran successfully.\n"");

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2066.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2066.cpp,7
second/download/CMake/CMake/CMake/Tests/Dependency/Exec2/ExecMain.cpp,10,"printf(""Dependency test executable ran successfully.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2067.cpp,"{
  FiveFunction();
  EightFunction();

  printf(""Dependency test executable ran successfully.\n"");

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2067.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2067.cpp,5
second/download/CMake/CMake/CMake/Tests/Dependency/Exec3/ExecMain.cpp,10,"printf(""Dependency test executable ran successfully.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2068.cpp,"{
  FiveFunction();
  EightFunction();

  printf(""Dependency test executable ran successfully.\n"");

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2068.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2068.cpp,5
second/download/CMake/CMake/CMake/Tests/SystemInformation/DumpInformation.cpp,6,"fprintf(fout, ""Avoid ctest truncation of output: CTEST_FULL_OUTPUT\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2069.cpp,"{
  fprintf(fout, ""Avoid ctest truncation of output: CTEST_FULL_OUTPUT\n"");
  fprintf(
    fout,
    ""================================================================\n"");
  struct stat fs;
  if (stat(name, &fs) != 0) {
    fprintf(fout, ""The file \""%s\"" does not exist.\n"", name);
    fflush(fout);
    return;
  }

  FILE* fin = fopen(name, ""r"");
  if (fin) {
    fprintf(
      fout,
      ""Contents of \""%s\"":\n""
      ""----------------------------------------------------------------\n"",
      name);
    const int bufferSize = 4096;
    char buffer[bufferSize];
    int n;
    while ((n = fread(buffer, 1, bufferSize, fin)) > 0) {
      for (char* c = buffer; c < buffer + n; ++c) {
        switch (*c) {
          case '<':
            fprintf(fout, ""&lt;"");
            break;
          case '>':
            fprintf(fout, ""&gt;"");
            break;
          case '&':
            fprintf(fout, ""&amp;"");
            break;
          default:
            putc(*c, fout);
            break;
        }
      }
      fflush(fout);
    }
    fclose(fin);
  } else {
    fprintf(fout, ""Error opening \""%s\"" for reading.\n"", name);
    fflush(fout);
  }
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2069.cpp,"[2, 1, 1, 0, 4, 0, 1, 1, 3, 1, 7, 0, 0, 0, 1, 63, 0, 0, 5, 6, 0, 0, 4, 17, 0, 0, 0, 0, 2, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 5, 2, 1, 0, 16, 0, 0, 13, 0, 33, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2069.cpp,2
second/download/CMake/CMake/CMake/Tests/SystemInformation/DumpInformation.cpp,7,"fprintf(
    fout,
    ""================================================================\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2070.cpp,"{
  fprintf(fout, ""Avoid ctest truncation of output: CTEST_FULL_OUTPUT\n"");
  fprintf(
    fout,
    ""================================================================\n"");
  struct stat fs;
  if (stat(name, &fs) != 0) {
    fprintf(fout, ""The file \""%s\"" does not exist.\n"", name);
    fflush(fout);
    return;
  }

  FILE* fin = fopen(name, ""r"");
  if (fin) {
    fprintf(
      fout,
      ""Contents of \""%s\"":\n""
      ""----------------------------------------------------------------\n"",
      name);
    const int bufferSize = 4096;
    char buffer[bufferSize];
    int n;
    while ((n = fread(buffer, 1, bufferSize, fin)) > 0) {
      for (char* c = buffer; c < buffer + n; ++c) {
        switch (*c) {
          case '<':
            fprintf(fout, ""&lt;"");
            break;
          case '>':
            fprintf(fout, ""&gt;"");
            break;
          case '&':
            fprintf(fout, ""&amp;"");
            break;
          default:
            putc(*c, fout);
            break;
        }
      }
      fflush(fout);
    }
    fclose(fin);
  } else {
    fprintf(fout, ""Error opening \""%s\"" for reading.\n"", name);
    fflush(fout);
  }
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2070.cpp,"[2, 1, 1, 0, 4, 0, 1, 1, 3, 1, 7, 0, 0, 0, 1, 63, 0, 0, 5, 6, 0, 0, 4, 17, 0, 0, 0, 0, 2, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 5, 2, 1, 0, 16, 0, 0, 13, 0, 33, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2070.cpp,3
second/download/CMake/CMake/CMake/Tests/SystemInformation/DumpInformation.cpp,12,"fprintf(fout, ""The file \""%s\"" does not exist.\n"", name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2071.cpp,"{
    fprintf(fout, ""The file \""%s\"" does not exist.\n"", name);
    fflush(fout);
    return;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2071.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2071.cpp,8
second/download/CMake/CMake/CMake/Tests/SystemInformation/DumpInformation.cpp,19,"fprintf(
      fout,
      ""Contents of \""%s\"":\n""
      ""----------------------------------------------------------------\n"",
      name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2072.cpp,"{
    fprintf(
      fout,
      ""Contents of \""%s\"":\n""
      ""----------------------------------------------------------------\n"",
      name);
    const int bufferSize = 4096;
    char buffer[bufferSize];
    int n;
    while ((n = fread(buffer, 1, bufferSize, fin)) > 0) {
      for (char* c = buffer; c < buffer + n; ++c) {
        switch (*c) {
          case '<':
            fprintf(fout, ""&lt;"");
            break;
          case '>':
            fprintf(fout, ""&gt;"");
            break;
          case '&':
            fprintf(fout, ""&amp;"");
            break;
          default:
            putc(*c, fout);
            break;
        }
      }
      fflush(fout);
    }
    fclose(fin);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2072.cpp,"[0, 1, 1, 0, 4, 0, 0, 1, 3, 1, 4, 0, 0, 0, 1, 37, 0, 0, 3, 4, 0, 0, 3, 11, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 3, 0, 0, 0, 8, 0, 0, 7, 0, 17, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2072.cpp,15
second/download/CMake/CMake/CMake/Tests/SystemInformation/DumpInformation.cpp,31,"fprintf(fout, ""&lt;"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2073.cpp,"{
          case '<':
            fprintf(fout, ""&lt;"");
            break;
          case '>':
            fprintf(fout, ""&gt;"");
            break;
          case '&':
            fprintf(fout, ""&amp;"");
            break;
          default:
            putc(*c, fout);
            break;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2073.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 3, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2073.cpp,27
second/download/CMake/CMake/CMake/Tests/SystemInformation/DumpInformation.cpp,34,"fprintf(fout, ""&gt;"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2074.cpp,"{
          case '<':
            fprintf(fout, ""&lt;"");
            break;
          case '>':
            fprintf(fout, ""&gt;"");
            break;
          case '&':
            fprintf(fout, ""&amp;"");
            break;
          default:
            putc(*c, fout);
            break;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2074.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 3, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2074.cpp,30
second/download/CMake/CMake/CMake/Tests/SystemInformation/DumpInformation.cpp,37,"fprintf(fout, ""&amp;"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2075.cpp,"{
          case '<':
            fprintf(fout, ""&lt;"");
            break;
          case '>':
            fprintf(fout, ""&gt;"");
            break;
          case '&':
            fprintf(fout, ""&amp;"");
            break;
          default:
            putc(*c, fout);
            break;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2075.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 3, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2075.cpp,33
second/download/CMake/CMake/CMake/Tests/SystemInformation/DumpInformation.cpp,48,"fprintf(fout, ""Error opening \""%s\"" for reading.\n"", name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2076.cpp,"{
    fprintf(fout, ""Error opening \""%s\"" for reading.\n"", name);
    fflush(fout);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2076.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2076.cpp,44
second/download/CMake/CMake/CMake/Tests/BuildDepends/Project/zot.cpp,9,"printf(""[%s] [%s] [%s] [%s]\n"", zot, zot_custom, zot_macro_dir_f(),
         zot_macro_tgt_f());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2077.cpp,"{
  printf(""[%s] [%s] [%s] [%s]\n"", zot, zot_custom, zot_macro_dir_f(),
         zot_macro_tgt_f());
  fflush(stdout);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2077.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2077.cpp,2
second/download/CMake/CMake/CMake/Tests/BuildDepends/Project/bar.cpp,9,"printf(""FAILED: noregen.h was regenerated!\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2078.cpp,"{
    printf(""FAILED: noregen.h was regenerated!\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2078.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2078.cpp,4
second/download/CMake/CMake/CMake/Tests/BuildDepends/Project/bar.cpp,14,"printf(""%s\n"", regen_string);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2079.cpp,"{
  /* Make sure the noregen header was not regenerated.  */
  if (strcmp(""foo"", noregen_string) != 0) {
    printf(""FAILED: noregen.h was regenerated!\n"");
    return 1;
  }

  /* Print out the string that should have been regenerated.  */
  printf(""%s\n"", regen_string);
  fflush(stdout);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2079.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2079.cpp,9
second/download/CMake/CMake/CMake/Tests/BuildDepends/Project/generator.cpp,7,"fprintf(stderr, ""Must specify output file and symbol prefix!"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2080.cpp,"{
    fprintf(stderr, ""Must specify output file and symbol prefix!"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2080.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2080.cpp,3
second/download/CMake/CMake/CMake/Tests/BuildDepends/Project/generator.cpp,11,"fprintf(fout, ""static const char* %s_string = \""%s\"";\n"", argv[2], foo());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2081.cpp,"{
    fprintf(fout, ""static const char* %s_string = \""%s\"";\n"", argv[2], foo());
    fclose(fout);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2081.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2081.cpp,7
second/download/CMake/CMake/CMake/Tests/BuildDepends/Project/generator.cpp,14,"fprintf(stderr, ""Could not open output file \""%s\"""", argv[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2082.cpp,"{
    fprintf(stderr, ""Could not open output file \""%s\"""", argv[1]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2082.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2082.cpp,10
second/download/CMake/CMake/CMake/Tests/BuildDepends/Project/ninjadep.cpp,5,"printf(""HEADER_STRING: %s\n"", HEADER_STRING);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2083.cpp,"{
  printf(""HEADER_STRING: %s\n"", HEADER_STRING);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2083.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2083.cpp,2
second/download/CMake/CMake/CMake/Tests/CMakeLib/CMakeLibTests.cpp,104,"printf(""Available tests:\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2084.cpp,"{
    /* Ask for a test.  */
    printf(""Available tests:\n"");
    for (i = 0; i < NumTests; ++i) {
      printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
    }
    printf(""To run a test, enter the test number: "");
    fflush(stdout);
    if (scanf(""%d"", &testNum) != 1) {
      printf(""Couldn't parse that input as a number\n"");
      return -1;
    }
    if (testNum >= NumTests) {
      printf(""%3d is an invalid test number.\n"", testNum);
      return -1;
    }
    testToRun = testNum;
    ac--;
    av++;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2084.cpp,"[2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 2, 0, 0, 7, 0, 0, 9, 0, 11, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2084.cpp,12
second/download/CMake/CMake/CMake/Tests/CMakeLib/CMakeLibTests.cpp,106,"printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2085.cpp,"{
      printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2085.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2085.cpp,14
second/download/CMake/CMake/CMake/Tests/CMakeLib/CMakeLibTests.cpp,108,"printf(""To run a test, enter the test number: "");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2086.cpp,"{
    /* Ask for a test.  */
    printf(""Available tests:\n"");
    for (i = 0; i < NumTests; ++i) {
      printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
    }
    printf(""To run a test, enter the test number: "");
    fflush(stdout);
    if (scanf(""%d"", &testNum) != 1) {
      printf(""Couldn't parse that input as a number\n"");
      return -1;
    }
    if (testNum >= NumTests) {
      printf(""%3d is an invalid test number.\n"", testNum);
      return -1;
    }
    testToRun = testNum;
    ac--;
    av++;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2086.cpp,"[2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 2, 0, 0, 7, 0, 0, 9, 0, 11, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2086.cpp,16
second/download/CMake/CMake/CMake/Tests/CMakeLib/CMakeLibTests.cpp,111,"printf(""Couldn't parse that input as a number\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2087.cpp,"{
      printf(""Couldn't parse that input as a number\n"");
      return -1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2087.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2087.cpp,19
second/download/CMake/CMake/CMake/Tests/CMakeLib/CMakeLibTests.cpp,115,"printf(""%3d is an invalid test number.\n"", testNum);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2088.cpp,"{
      printf(""%3d is an invalid test number.\n"", testNum);
      return -1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2088.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2088.cpp,23
second/download/CMake/CMake/CMake/Tests/CMakeLib/CMakeLibTests.cpp,129,"printf(""-R needs an additional parameter.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2089.cpp,"{
    printf(""-R needs an additional parameter.\n"");
    return -1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2089.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2089.cpp,37
second/download/CMake/CMake/CMake/Tests/CMakeLib/CMakeLibTests.cpp,153,"printf(""testToRun was modified by TestDriver code to an invalid value: ""
             ""%3d.\n"",
             testNum);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2090.cpp,"{
      printf(""testToRun was modified by TestDriver code to an invalid value: ""
             ""%3d.\n"",
             testNum);
      return -1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2090.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2090.cpp,61
second/download/CMake/CMake/CMake/Tests/CMakeLib/CMakeLibTests.cpp,164,"printf(""Available tests:\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2091.cpp,"{
  int i, testNum = 0, partial_match;
  char *arg, *test_name;
  int testToRun = -1;

  

  /* If no test name was given */
  /* process command line with user function.  */
  if (ac < 2) {
    /* Ask for a test.  */
    printf(""Available tests:\n"");
    for (i = 0; i < NumTests; ++i) {
      printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
    }
    printf(""To run a test, enter the test number: "");
    fflush(stdout);
    if (scanf(""%d"", &testNum) != 1) {
      printf(""Couldn't parse that input as a number\n"");
      return -1;
    }
    if (testNum >= NumTests) {
      printf(""%3d is an invalid test number.\n"", testNum);
      return -1;
    }
    testToRun = testNum;
    ac--;
    av++;
  }
  partial_match = 0;
  arg = NULL; /* NOLINT */
  /* If partial match is requested.  */
  if (testToRun == -1 && ac > 1) {
    partial_match = (strcmp(av[1], ""-R"") == 0) ? 1 : 0;
  }
  if (partial_match != 0 && ac < 3) {
    printf(""-R needs an additional parameter.\n"");
    return -1;
  }
  if (testToRun == -1) {
    arg = lowercase(av[1 + partial_match]);
  }
  for (i = 0; i < NumTests && testToRun == -1; ++i) {
    test_name = lowercase(cmakeGeneratedFunctionMapEntries[i].name);
    if (partial_match != 0 && strstr(test_name, arg) != NULL) { /* NOLINT */
      testToRun = i;
      ac -= 2;
      av += 2;
    } else if (partial_match == 0 && strcmp(test_name, arg) == 0) {
      testToRun = i;
      ac--;
      av++;
    }
    free(test_name);
  }
  free(arg);
  if (testToRun != -1) {
    int result;

    if (testToRun < 0 || testToRun >= NumTests) {
      printf(""testToRun was modified by TestDriver code to an invalid value: ""
             ""%3d.\n"",
             testNum);
      return -1;
    }
    result = (*cmakeGeneratedFunctionMapEntries[testToRun].func)(ac, av);

    return result;
  }

  /* Nothing was run, display the test names.  */
  printf(""Available tests:\n"");
  for (i = 0; i < NumTests; ++i) {
    printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
  }
  printf(""Failed: %s is an invalid test name.\n"", av[1]);

  return -1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2091.cpp,"[10, 0, 3, 0, 0, 0, 6, 0, 0, 0, 14, 0, 0, 0, 0, 115, 0, 0, 4, 7, 0, 0, 5, 45, 0, 0, 0, 0, 2, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 1, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 14, 11, 1, 0, 19, 0, 0, 28, 1, 30, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2091.cpp,72
second/download/CMake/CMake/CMake/Tests/CMakeLib/CMakeLibTests.cpp,166,"printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2092.cpp,"{
    printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2092.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2092.cpp,74
second/download/CMake/CMake/CMake/Tests/CMakeLib/CMakeLibTests.cpp,168,"printf(""Failed: %s is an invalid test name.\n"", av[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2093.cpp,"{
  int i, testNum = 0, partial_match;
  char *arg, *test_name;
  int testToRun = -1;

  

  /* If no test name was given */
  /* process command line with user function.  */
  if (ac < 2) {
    /* Ask for a test.  */
    printf(""Available tests:\n"");
    for (i = 0; i < NumTests; ++i) {
      printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
    }
    printf(""To run a test, enter the test number: "");
    fflush(stdout);
    if (scanf(""%d"", &testNum) != 1) {
      printf(""Couldn't parse that input as a number\n"");
      return -1;
    }
    if (testNum >= NumTests) {
      printf(""%3d is an invalid test number.\n"", testNum);
      return -1;
    }
    testToRun = testNum;
    ac--;
    av++;
  }
  partial_match = 0;
  arg = NULL; /* NOLINT */
  /* If partial match is requested.  */
  if (testToRun == -1 && ac > 1) {
    partial_match = (strcmp(av[1], ""-R"") == 0) ? 1 : 0;
  }
  if (partial_match != 0 && ac < 3) {
    printf(""-R needs an additional parameter.\n"");
    return -1;
  }
  if (testToRun == -1) {
    arg = lowercase(av[1 + partial_match]);
  }
  for (i = 0; i < NumTests && testToRun == -1; ++i) {
    test_name = lowercase(cmakeGeneratedFunctionMapEntries[i].name);
    if (partial_match != 0 && strstr(test_name, arg) != NULL) { /* NOLINT */
      testToRun = i;
      ac -= 2;
      av += 2;
    } else if (partial_match == 0 && strcmp(test_name, arg) == 0) {
      testToRun = i;
      ac--;
      av++;
    }
    free(test_name);
  }
  free(arg);
  if (testToRun != -1) {
    int result;

    if (testToRun < 0 || testToRun >= NumTests) {
      printf(""testToRun was modified by TestDriver code to an invalid value: ""
             ""%3d.\n"",
             testNum);
      return -1;
    }
    result = (*cmakeGeneratedFunctionMapEntries[testToRun].func)(ac, av);

    return result;
  }

  /* Nothing was run, display the test names.  */
  printf(""Available tests:\n"");
  for (i = 0; i < NumTests; ++i) {
    printf(""%3d. %s\n"", i, cmakeGeneratedFunctionMapEntries[i].name);
  }
  printf(""Failed: %s is an invalid test name.\n"", av[1]);

  return -1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2093.cpp,"[10, 0, 3, 0, 0, 0, 6, 0, 0, 0, 14, 0, 0, 0, 0, 115, 0, 0, 4, 7, 0, 0, 5, 45, 0, 0, 0, 0, 2, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 1, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 14, 11, 1, 0, 19, 0, 0, 28, 1, 30, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2093.cpp,76
second/download/CMake/CMake/CMake/Tests/CMakeLib/testXMLSafe.cpp,35,"printf(""expected [%s], got [%s]\n"", p->out, out.c_str());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2094.cpp,"{
      printf(""expected [%s], got [%s]\n"", p->out, out.c_str());
      result = 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2094.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2094.cpp,9
second/download/CMake/CMake/CMake/Tests/CMakeLib/testUTF8.cpp,10,"printf(""[0x%02X,0x%02X,0x%02X,0x%02X]"", (int)d[0], (int)d[1], (int)d[2],
         (int)d[3]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2095.cpp,"{
  unsigned char const* d = reinterpret_cast<unsigned char const*>(c);
  printf(""[0x%02X,0x%02X,0x%02X,0x%02X]"", (int)d[0], (int)d[1], (int)d[2],
         (int)d[3]);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2095.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 19, 0, 0, 1, 1, 0, 0, 1, 5, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2095.cpp,3
second/download/CMake/CMake/CMake/Tests/CMakeLib/testUTF8.cpp,37,"printf(""%s: decoding good "", passed ? ""pass"" : ""FAIL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2096.cpp,"{
  printf(""%s: decoding good "", passed ? ""pass"" : ""FAIL"");
  test_utf8_char_print(c);
  printf("" (%s) "", c);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2096.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2096.cpp,2
second/download/CMake/CMake/CMake/Tests/CMakeLib/testUTF8.cpp,39,"printf("" (%s) "", c);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2097.cpp,"{
  printf(""%s: decoding good "", passed ? ""pass"" : ""FAIL"");
  test_utf8_char_print(c);
  printf("" (%s) "", c);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2097.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2097.cpp,4
second/download/CMake/CMake/CMake/Tests/CMakeLib/testUTF8.cpp,44,"printf(""%s: decoding bad  "", passed ? ""pass"" : ""FAIL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2098.cpp,"{
  printf(""%s: decoding bad  "", passed ? ""pass"" : ""FAIL"");
  test_utf8_char_print(c);
  printf("" "");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2098.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2098.cpp,2
second/download/CMake/CMake/CMake/Tests/CMakeLib/testUTF8.cpp,46,"printf("" "");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2099.cpp,"{
  printf(""%s: decoding bad  "", passed ? ""pass"" : ""FAIL"");
  test_utf8_char_print(c);
  printf("" "");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2099.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2099.cpp,4
second/download/CMake/CMake/CMake/Tests/CMakeLib/testUTF8.cpp,57,"printf(""expected 0x%04X, got 0x%04X\n"", entry.chr, uc);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2100.cpp,"{
      report_good(false, entry.str);
      printf(""expected 0x%04X, got 0x%04X\n"", entry.chr, uc);
      return false;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2100.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2100.cpp,8
second/download/CMake/CMake/CMake/Tests/CMakeLib/testUTF8.cpp,62,"printf(""had %d bytes, used %d\n"", entry.n, used);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2101.cpp,"{
      report_good(false, entry.str);
      printf(""had %d bytes, used %d\n"", entry.n, used);
      return false;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2101.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2101.cpp,13
second/download/CMake/CMake/CMake/Tests/CMakeLib/testUTF8.cpp,66,"printf(""got 0x%04X\n"", uc);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2102.cpp,"{
    int used = static_cast<int>(e - entry.str);
    if (uc != entry.chr) {
      report_good(false, entry.str);
      printf(""expected 0x%04X, got 0x%04X\n"", entry.chr, uc);
      return false;
    }
    if (used != entry.n) {
      report_good(false, entry.str);
      printf(""had %d bytes, used %d\n"", entry.n, used);
      return false;
    }
    report_good(true, entry.str);
    printf(""got 0x%04X\n"", uc);
    return true;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2102.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 39, 0, 0, 1, 1, 0, 0, 1, 9, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 28, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 0, 8, 0, 0, 6, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2102.cpp,17
second/download/CMake/CMake/CMake/Tests/CMakeLib/testUTF8.cpp,70,"printf(""failed\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2103.cpp,"{
  unsigned int uc;
  if (const char* e =
        cm_utf8_decode_character(entry.str, entry.str + 4, &uc)) {
    int used = static_cast<int>(e - entry.str);
    if (uc != entry.chr) {
      report_good(false, entry.str);
      printf(""expected 0x%04X, got 0x%04X\n"", entry.chr, uc);
      return false;
    }
    if (used != entry.n) {
      report_good(false, entry.str);
      printf(""had %d bytes, used %d\n"", entry.n, used);
      return false;
    }
    report_good(true, entry.str);
    printf(""got 0x%04X\n"", uc);
    return true;
  }
  report_good(false, entry.str);
  printf(""failed\n"");
  return false;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2103.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 1, 57, 0, 0, 2, 3, 0, 0, 2, 13, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 38, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 3, 0, 0, 11, 0, 0, 8, 0, 22, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2103.cpp,21
second/download/CMake/CMake/CMake/Tests/CMakeLib/testUTF8.cpp,80,"printf(""expected failure, got 0x%04X\n"", uc);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2104.cpp,"{
    report_bad(false, s);
    printf(""expected failure, got 0x%04X\n"", uc);
    return false;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2104.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2104.cpp,6
second/download/CMake/CMake/CMake/Tests/CMakeLib/testUTF8.cpp,84,"printf(""failed as expected\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2105.cpp,"{
  unsigned int uc = 0xFFFFu;
  const char* e = cm_utf8_decode_character(s, s + 4, &uc);
  if (e) {
    report_bad(false, s);
    printf(""expected failure, got 0x%04X\n"", uc);
    return false;
  }
  report_bad(true, s);
  printf(""failed as expected\n"");
  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2105.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 17, 0, 0, 2, 2, 0, 0, 2, 8, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2105.cpp,10
second/download/CMake/CMake/CMake/Tests/BundleUtilities/testbundleutils3.cpp,19,"printf(""Failed to open module3\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2106.cpp,"{
    printf(""Failed to open module3\n"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2106.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2106.cpp,8
second/download/CMake/CMake/CMake/Tests/BundleUtilities/testbundleutils3.cpp,24,"printf(""Failed to open module3\n%s\n"", dlerror());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2107.cpp,"{
    printf(""Failed to open module3\n%s\n"", dlerror());
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2107.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2107.cpp,13
second/download/CMake/CMake/CMake/Tests/BundleUtilities/testbundleutils1.cpp,19,"printf(""Failed to open module1\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2108.cpp,"{
    printf(""Failed to open module1\n"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2108.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2108.cpp,8
second/download/CMake/CMake/CMake/Tests/BundleUtilities/testbundleutils1.cpp,24,"printf(""Failed to open module1\n%s\n"", dlerror());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2109.cpp,"{
    printf(""Failed to open module1\n%s\n"", dlerror());
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2109.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2109.cpp,13
second/download/CMake/CMake/CMake/Tests/BundleUtilities/testbundleutils2.cpp,19,"printf(""Failed to open module2\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2110.cpp,"{
    printf(""Failed to open module2\n"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2110.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2110.cpp,8
second/download/CMake/CMake/CMake/Tests/BundleUtilities/testbundleutils2.cpp,24,"printf(""Failed to open module2\n%s\n"", dlerror());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2111.cpp,"{
    printf(""Failed to open module2\n%s\n"", dlerror());
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2111.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2111.cpp,13
second/download/CMake/CMake/CMake/Tests/CFBundleTest/np_macmain.cpp,34,"printf(""NP_GetEntryPoints()\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2112.cpp,"{
  printf(""NP_GetEntryPoints()\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2112.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2112.cpp,2
second/download/CMake/CMake/CMake/Tests/CFBundleTest/np_macmain.cpp,40,"printf(""NP_Initialize()\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2113.cpp,"{
  printf(""NP_Initialize()\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2113.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2113.cpp,2
second/download/CMake/CMake/CMake/Tests/JavaJavah/C.cpp,8,"printf(""C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2114.cpp,"{
  printf(""C\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2114.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2114.cpp,2
second/download/CMake/CMake/CMake/Tests/JavaJavah/B.cpp,8,"printf(""B\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2115.cpp,"{
  printf(""B\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2115.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2115.cpp,2
second/download/CMake/CMake/CMake/Tests/SimpleInstall/inst.cpp,20,"printf(""Problem with lib1\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2116.cpp,"{
    printf(""Problem with lib1\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2116.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2116.cpp,3
second/download/CMake/CMake/CMake/Tests/SimpleInstall/inst.cpp,24,"printf(""Problem with lib2\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2117.cpp,"{
    printf(""Problem with lib2\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2117.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2117.cpp,7
second/download/CMake/CMake/CMake/Tests/SimpleInstall/inst.cpp,28,"printf(""Problem with lib4\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2118.cpp,"{
    printf(""Problem with lib4\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2118.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2118.cpp,11
second/download/CMake/CMake/CMake/Tests/SimpleInstall/inst.cpp,31,"printf(""The value of Foo: %s\n"", foo);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2119.cpp,"{
  if (Lib1Func() != 2.0) {
    printf(""Problem with lib1\n"");
    return 1;
  }
  if (Lib2Func() != 1.0) {
    printf(""Problem with lib2\n"");
    return 1;
  }
  if (Lib4Func() != 4.0) {
    printf(""Problem with lib4\n"");
    return 1;
  }
  printf(""The value of Foo: %s\n"", foo);
  return SomeFunctionInFoo() - 5;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2119.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 8, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2119.cpp,14
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/vcl_algorithm+vcl_pair+double.foo.cpp,4,"printf(""Placeholder for a file with strange name\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2120.cpp,"{
  printf(""Placeholder for a file with strange name\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2120.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2120.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/vcl_algorithm_vcl_pair_double.foo.cpp,4,"printf(""Placeholder for a file with strange name\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2121.cpp,"{
  printf(""Placeholder for a file with strange name\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2121.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2121.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/Executable/test.cpp,27,"printf(""Usage: %s <file>\n"", av[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2122.cpp,"{
    printf(""Usage: %s <file>\n"", av[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2122.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2122.cpp,3
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/Executable/test.cpp,31,"printf(""Missing file %s\n"", av[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2123.cpp,"{
    printf(""Missing file %s\n"", av[1]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2123.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2123.cpp,7
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/Executable/test.cpp,35,"printf(""File %s should be in subdirectory\n"", av[2]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2124.cpp,"{
    printf(""File %s should be in subdirectory\n"", av[2]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2124.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2124.cpp,11
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/Executable/test.cpp,38,"printf(""%s is not there! Good."", av[2]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2125.cpp,"{
  if (ac <= 1) {
    printf(""Usage: %s <file>\n"", av[0]);
    return 1;
  }
  if (!FileExists(av[1])) {
    printf(""Missing file %s\n"", av[1]);
    return 1;
  }
  if (FileExists(av[2])) {
    printf(""File %s should be in subdirectory\n"", av[2]);
    return 1;
  }
  printf(""%s is not there! Good."", av[2]);
  printf(""%s is there! Good."", av[1]);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2125.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 3, 0, 0, 7, 0, 0, 5, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2125.cpp,14
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/Executable/test.cpp,39,"printf(""%s is there! Good."", av[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2126.cpp,"{
  if (ac <= 1) {
    printf(""Usage: %s <file>\n"", av[0]);
    return 1;
  }
  if (!FileExists(av[1])) {
    printf(""Missing file %s\n"", av[1]);
    return 1;
  }
  if (FileExists(av[2])) {
    printf(""File %s should be in subdirectory\n"", av[2]);
    return 1;
  }
  printf(""%s is not there! Good."", av[2]);
  printf(""%s is there! Good."", av[1]);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2126.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 3, 0, 0, 7, 0, 0, 5, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2126.cpp,15
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/ThirdSubDir/pair_p_int.int1.cpp,4,"printf(""Placeholder for another strange file in subdirectory\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2127.cpp,"{
  printf(""Placeholder for another strange file in subdirectory\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2127.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2127.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/ThirdSubDir/thirdone.cpp,4,"printf(""Hello again\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2128.cpp,"{
  printf(""Hello again\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2128.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2128.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/ThirdSubDir/pair_int.int1.cpp,4,"printf(""Placeholder for a strange file in subdirectory\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2129.cpp,"{
  printf(""Placeholder for a strange file in subdirectory\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2129.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2129.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/ThirdSubDir/testfromauxsubdir.cpp,11,"printf(""Hello from subdirectory\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2130.cpp,"{
  printf(""Hello from subdirectory\n"");
  secondone();
#ifdef CMAKE_PAREN
  testOdd();
#endif
  pair_stuff();
  pair_p_stuff();
  vcl_stuff();
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2130.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 6, 0, 1, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2130.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/ThirdSubDir/pair+int.int1.cpp,4,"printf(""Placeholder for a strange file in subdirectory\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2131.cpp,"{
  printf(""Placeholder for a strange file in subdirectory\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2131.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2131.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/Another Subdir/pair_int.int.cpp,4,"printf(""Placeholder for a strange file in subdirectory\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2132.cpp,"{
  printf(""Placeholder for a strange file in subdirectory\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2132.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2132.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/Another Subdir/pair+int.int.cpp,4,"printf(""Placeholder for a strange file in subdirectory\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2133.cpp,"{
  printf(""Placeholder for a strange file in subdirectory\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2133.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2133.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/Another Subdir/testfromsubdir.cpp,8,"printf(""Hello from subdirectory\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2134.cpp,"{
  printf(""Hello from subdirectory\n"");
  secondone();
  pair_stuff();
  vcl_stuff();
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2134.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2134.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/Another Subdir/secondone.cpp,4,"printf(""Hello again\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2135.cpp,"{
  printf(""Hello again\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2135.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2135.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/Executable Sources/test.cpp,27,"printf(""Usage: %s <file>\n"", av[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2136.cpp,"{
    printf(""Usage: %s <file>\n"", av[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2136.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2136.cpp,3
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/Executable Sources/test.cpp,31,"printf(""Missing file %s\n"", av[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2137.cpp,"{
    printf(""Missing file %s\n"", av[1]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2137.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2137.cpp,7
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/Executable Sources/test.cpp,35,"printf(""File %s should be in subdirectory\n"", av[2]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2138.cpp,"{
    printf(""File %s should be in subdirectory\n"", av[2]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2138.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2138.cpp,11
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/Executable Sources/test.cpp,38,"printf(""%s is not there! Good."", av[2]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2139.cpp,"{
  if (ac <= 1) {
    printf(""Usage: %s <file>\n"", av[0]);
    return 1;
  }
  if (!FileExists(av[1])) {
    printf(""Missing file %s\n"", av[1]);
    return 1;
  }
  if (FileExists(av[2])) {
    printf(""File %s should be in subdirectory\n"", av[2]);
    return 1;
  }
  printf(""%s is not there! Good."", av[2]);
  printf(""%s is there! Good."", av[1]);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2139.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 3, 0, 0, 7, 0, 0, 5, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2139.cpp,14
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/Executable Sources/test.cpp,39,"printf(""%s is there! Good."", av[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2140.cpp,"{
  if (ac <= 1) {
    printf(""Usage: %s <file>\n"", av[0]);
    return 1;
  }
  if (!FileExists(av[1])) {
    printf(""Missing file %s\n"", av[1]);
    return 1;
  }
  if (FileExists(av[2])) {
    printf(""File %s should be in subdirectory\n"", av[2]);
    return 1;
  }
  printf(""%s is not there! Good."", av[2]);
  printf(""%s is there! Good."", av[1]);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2140.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 3, 0, 0, 7, 0, 0, 5, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2140.cpp,15
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/Some Examples/example2/example2.cpp,4,"printf(""example2\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2141.cpp,"{
  printf(""example2\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2141.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2141.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDirSpaces/Some Examples/example1/example1.cpp,4,"printf(""example1\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2142.cpp,"{
  printf(""example1\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2142.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2142.cpp,2
second/download/CMake/CMake/CMake/Tests/FindPackageModeMakefileTest/main.cpp,5,"printf(""foo is: %d\n"", foo());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2143.cpp,"{
  printf(""foo is: %d\n"", foo());
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2143.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2143.cpp,2
second/download/CMake/CMake/CMake/Tests/FindLTTngUST/Test/main.cpp,17,"snprintf(lttng_version_string, 16, ""%u.%u.%u"", LTTNG_UST_MAJOR_VERSION,
           LTTNG_UST_MINOR_VERSION, LTTNG_UST_PATCHLEVEL_VERSION);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2144.cpp,"{
  char lttng_version_string[16];

  snprintf(lttng_version_string, 16, ""%u.%u.%u"", LTTNG_UST_MAJOR_VERSION,
           LTTNG_UST_MINOR_VERSION, LTTNG_UST_PATCHLEVEL_VERSION);
  assert(!strcmp(lttng_version_string, CMAKE_EXPECTED_LTTNGUST_VERSION));

#ifdef CMAKE_LTTNGUST_HAS_TRACEF
  tracef(""calling tracef()! %d %s"", -23, CMAKE_EXPECTED_LTTNGUST_VERSION);
#endif

#ifdef CMAKE_LTTNGUST_HAS_TRACELOG
  tracelog(TRACE_WARNING, ""calling tracelog()! %d"", 17);
#endif

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2144.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 5, 0, 0, 4, 0, 15, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2144.cpp,4
second/download/CMake/CMake/CMake/Tests/LoadCommandOneConfig/CMakeCommands/cmTestCommand.cpp,76,"sprintf(buffer, ""Cache version: %d.%d, CMake version: %d.%d"",
          info->CAPI->GetCacheMajorVersion(mf),
          info->CAPI->GetCacheMinorVersion(mf),
          info->CAPI->GetMajorVersion(mf), info->CAPI->GetMinorVersion(mf));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2145.cpp,"{
  char* file;
  char* str;
  char* srcs;
  const char* cstr;
  char buffer[1024];
  void* source_file;
  char* args[2];
  char* ccArgs[4];
  char* ccDep[1];
  char* ccOut[1];
  cmLoadedCommandInfo* info = (cmLoadedCommandInfo*)inf;

  cmVTKWrapTclData* cdata =
    (cmVTKWrapTclData*)malloc(sizeof(cmVTKWrapTclData));
  cdata->LibraryName = ""BOO"";
  cdata->Argc = argc;
  cdata->Argv = argv;
  info->CAPI->SetClientData(info, cdata);

  /* Now check and see if the value has been stored in the cache */
  /* already, if so use that value and don't look for the program */
  if (!info->CAPI->IsOn(mf, ""TEST_COMMAND_TEST1"")) {
    info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
    return 1;
  }

  info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
  cdata->LibraryName = ""HOO"";

  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE"", ""ON"",
                                 ""Test cache variable"", CM_CACHE_BOOL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE1"", """",
                                 ""Test cache variable 1"", CM_CACHE_PATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE2"", """",
                                 ""Test cache variable 2"", CM_CACHE_FILEPATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE3"", """",
                                 ""Test cache variable 3"", CM_CACHE_STRING);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE4"", """",
                                 ""Test cache variable 4"", CM_CACHE_INTERNAL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE5"", """",
                                 ""Test cache variable 5"", CM_CACHE_STATIC);

  file = info->CAPI->ExpandVariablesInString(mf, ""${CMAKE_COMMAND}"", 0, 0);

  str = info->CAPI->GetFilenameWithoutExtension(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->GetFilenamePath(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->Capitalized(""cmake"");
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);

  info->CAPI->DisplaySatus(mf, info->CAPI->GetProjectName(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentOutputDirectory(mf));
  sprintf(buffer, ""Cache version: %d.%d, CMake version: %d.%d"",
          info->CAPI->GetCacheMajorVersion(mf),
          info->CAPI->GetCacheMinorVersion(mf),
          info->CAPI->GetMajorVersion(mf), info->CAPI->GetMinorVersion(mf));
  info->CAPI->DisplaySatus(mf, buffer);
  if (info->CAPI->CommandExists(mf, ""SET"")) {
    info->CAPI->DisplaySatus(mf, ""Command SET exists"");
  }
  if (info->CAPI->CommandExists(mf, ""SET_FOO_BAR"")) {
    info->CAPI->SetError(mf, ""Command SET_FOO_BAR should not exists"");
    return 0;
  }
  info->CAPI->AddDefineFlag(mf, ""-DADDED_DEFINITION"");

  source_file = info->CAPI->CreateNewSourceFile(mf);
  cstr = info->CAPI->SourceFileGetSourceName(source_file);
  sprintf(buffer, ""Shold be empty (source file name): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  cstr = info->CAPI->SourceFileGetFullPath(source_file);
  sprintf(buffer, ""Should be empty (source file full path): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY"", ""unused old prop"",
                                       ""This property is no longer used"", 0);
  if (info->CAPI->SourceFileGetPropertyAsBool(source_file, ""SOME_PROPERTY"")) {
    info->CAPI->SetError(mf, ""Property SOME_PROPERTY should not be defined"");
    return 0;
  }
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY2"", ""nice prop"",
                                       ""This property is for testing."", 0);
  info->CAPI->SourceFileSetProperty(source_file, ""SOME_PROPERTY2"", ""HERE"");
  cstr = info->CAPI->SourceFileGetProperty(source_file, ""ABSTRACT"");
  sprintf(buffer, ""Should be 0 (source file abstract property): [%p]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);

  info->CAPI->DestroySourceFile(source_file);

  srcs = argv[2];
  info->CAPI->AddExecutable(mf, ""LoadedCommand"", 1, &srcs, 0);

  /* add customs commands to generate the source file */
  ccArgs[0] = ""-E"";
  ccArgs[1] = ""copy"";
  ccArgs[2] = argv[0];
  ccArgs[3] = argv[1];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommand(mf, ""LoadedCommand.cxx.in"", file, 4, ccArgs, 1,
                               ccDep, 1, ccOut, ""LoadedCommand"");

  ccArgs[2] = argv[1];
  ccArgs[3] = argv[2];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommandToOutput(mf, ccOut[0], file, 4, ccArgs, ccDep[0],
                                       0, 0);

  ccArgs[1] = ""echo"";
  ccArgs[2] = ""Build has finished"";
  info->CAPI->AddCustomCommandToTarget(mf, ""LoadedCommand"", file, 3, ccArgs,
                                       CM_POST_BUILD);

  info->CAPI->Free(file);

  args[0] = ""TEST_EXEC"";
  args[1] = ""TRUE"";

  /* code coverage */
  if (info->CAPI->GetTotalArgumentSize(2, args) != 13) {
    return 0;
  }
  info->CAPI->ExecuteCommand(mf, ""SET"", 2, args);

  /* make sure we can find the source file */
  if (!info->CAPI->GetSource(mf, argv[1])) {
    info->CAPI->SetError(mf, ""Source file could not be found!"");
    return 0;
  }

  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2145.cpp,"[6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 1, 474, 0, 0, 12, 12, 0, 0, 2, 112, 0, 0, 0, 0, 11, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 296, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 31, 0, 6, 6, 0, 0, 72, 0, 0, 72, 0, 179, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2145.cpp,63
second/download/CMake/CMake/CMake/Tests/LoadCommandOneConfig/CMakeCommands/cmTestCommand.cpp,92,"sprintf(buffer, ""Shold be empty (source file name): [%s]"", cstr);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2146.cpp,"{
  char* file;
  char* str;
  char* srcs;
  const char* cstr;
  char buffer[1024];
  void* source_file;
  char* args[2];
  char* ccArgs[4];
  char* ccDep[1];
  char* ccOut[1];
  cmLoadedCommandInfo* info = (cmLoadedCommandInfo*)inf;

  cmVTKWrapTclData* cdata =
    (cmVTKWrapTclData*)malloc(sizeof(cmVTKWrapTclData));
  cdata->LibraryName = ""BOO"";
  cdata->Argc = argc;
  cdata->Argv = argv;
  info->CAPI->SetClientData(info, cdata);

  /* Now check and see if the value has been stored in the cache */
  /* already, if so use that value and don't look for the program */
  if (!info->CAPI->IsOn(mf, ""TEST_COMMAND_TEST1"")) {
    info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
    return 1;
  }

  info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
  cdata->LibraryName = ""HOO"";

  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE"", ""ON"",
                                 ""Test cache variable"", CM_CACHE_BOOL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE1"", """",
                                 ""Test cache variable 1"", CM_CACHE_PATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE2"", """",
                                 ""Test cache variable 2"", CM_CACHE_FILEPATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE3"", """",
                                 ""Test cache variable 3"", CM_CACHE_STRING);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE4"", """",
                                 ""Test cache variable 4"", CM_CACHE_INTERNAL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE5"", """",
                                 ""Test cache variable 5"", CM_CACHE_STATIC);

  file = info->CAPI->ExpandVariablesInString(mf, ""${CMAKE_COMMAND}"", 0, 0);

  str = info->CAPI->GetFilenameWithoutExtension(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->GetFilenamePath(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->Capitalized(""cmake"");
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);

  info->CAPI->DisplaySatus(mf, info->CAPI->GetProjectName(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentOutputDirectory(mf));
  sprintf(buffer, ""Cache version: %d.%d, CMake version: %d.%d"",
          info->CAPI->GetCacheMajorVersion(mf),
          info->CAPI->GetCacheMinorVersion(mf),
          info->CAPI->GetMajorVersion(mf), info->CAPI->GetMinorVersion(mf));
  info->CAPI->DisplaySatus(mf, buffer);
  if (info->CAPI->CommandExists(mf, ""SET"")) {
    info->CAPI->DisplaySatus(mf, ""Command SET exists"");
  }
  if (info->CAPI->CommandExists(mf, ""SET_FOO_BAR"")) {
    info->CAPI->SetError(mf, ""Command SET_FOO_BAR should not exists"");
    return 0;
  }
  info->CAPI->AddDefineFlag(mf, ""-DADDED_DEFINITION"");

  source_file = info->CAPI->CreateNewSourceFile(mf);
  cstr = info->CAPI->SourceFileGetSourceName(source_file);
  sprintf(buffer, ""Shold be empty (source file name): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  cstr = info->CAPI->SourceFileGetFullPath(source_file);
  sprintf(buffer, ""Should be empty (source file full path): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY"", ""unused old prop"",
                                       ""This property is no longer used"", 0);
  if (info->CAPI->SourceFileGetPropertyAsBool(source_file, ""SOME_PROPERTY"")) {
    info->CAPI->SetError(mf, ""Property SOME_PROPERTY should not be defined"");
    return 0;
  }
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY2"", ""nice prop"",
                                       ""This property is for testing."", 0);
  info->CAPI->SourceFileSetProperty(source_file, ""SOME_PROPERTY2"", ""HERE"");
  cstr = info->CAPI->SourceFileGetProperty(source_file, ""ABSTRACT"");
  sprintf(buffer, ""Should be 0 (source file abstract property): [%p]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);

  info->CAPI->DestroySourceFile(source_file);

  srcs = argv[2];
  info->CAPI->AddExecutable(mf, ""LoadedCommand"", 1, &srcs, 0);

  /* add customs commands to generate the source file */
  ccArgs[0] = ""-E"";
  ccArgs[1] = ""copy"";
  ccArgs[2] = argv[0];
  ccArgs[3] = argv[1];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommand(mf, ""LoadedCommand.cxx.in"", file, 4, ccArgs, 1,
                               ccDep, 1, ccOut, ""LoadedCommand"");

  ccArgs[2] = argv[1];
  ccArgs[3] = argv[2];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommandToOutput(mf, ccOut[0], file, 4, ccArgs, ccDep[0],
                                       0, 0);

  ccArgs[1] = ""echo"";
  ccArgs[2] = ""Build has finished"";
  info->CAPI->AddCustomCommandToTarget(mf, ""LoadedCommand"", file, 3, ccArgs,
                                       CM_POST_BUILD);

  info->CAPI->Free(file);

  args[0] = ""TEST_EXEC"";
  args[1] = ""TRUE"";

  /* code coverage */
  if (info->CAPI->GetTotalArgumentSize(2, args) != 13) {
    return 0;
  }
  info->CAPI->ExecuteCommand(mf, ""SET"", 2, args);

  /* make sure we can find the source file */
  if (!info->CAPI->GetSource(mf, argv[1])) {
    info->CAPI->SetError(mf, ""Source file could not be found!"");
    return 0;
  }

  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2146.cpp,"[6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 1, 474, 0, 0, 12, 12, 0, 0, 2, 112, 0, 0, 0, 0, 11, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 296, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 31, 0, 6, 6, 0, 0, 72, 0, 0, 72, 0, 179, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2146.cpp,79
second/download/CMake/CMake/CMake/Tests/LoadCommandOneConfig/CMakeCommands/cmTestCommand.cpp,95,"sprintf(buffer, ""Should be empty (source file full path): [%s]"", cstr);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2147.cpp,"{
  char* file;
  char* str;
  char* srcs;
  const char* cstr;
  char buffer[1024];
  void* source_file;
  char* args[2];
  char* ccArgs[4];
  char* ccDep[1];
  char* ccOut[1];
  cmLoadedCommandInfo* info = (cmLoadedCommandInfo*)inf;

  cmVTKWrapTclData* cdata =
    (cmVTKWrapTclData*)malloc(sizeof(cmVTKWrapTclData));
  cdata->LibraryName = ""BOO"";
  cdata->Argc = argc;
  cdata->Argv = argv;
  info->CAPI->SetClientData(info, cdata);

  /* Now check and see if the value has been stored in the cache */
  /* already, if so use that value and don't look for the program */
  if (!info->CAPI->IsOn(mf, ""TEST_COMMAND_TEST1"")) {
    info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
    return 1;
  }

  info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
  cdata->LibraryName = ""HOO"";

  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE"", ""ON"",
                                 ""Test cache variable"", CM_CACHE_BOOL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE1"", """",
                                 ""Test cache variable 1"", CM_CACHE_PATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE2"", """",
                                 ""Test cache variable 2"", CM_CACHE_FILEPATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE3"", """",
                                 ""Test cache variable 3"", CM_CACHE_STRING);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE4"", """",
                                 ""Test cache variable 4"", CM_CACHE_INTERNAL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE5"", """",
                                 ""Test cache variable 5"", CM_CACHE_STATIC);

  file = info->CAPI->ExpandVariablesInString(mf, ""${CMAKE_COMMAND}"", 0, 0);

  str = info->CAPI->GetFilenameWithoutExtension(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->GetFilenamePath(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->Capitalized(""cmake"");
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);

  info->CAPI->DisplaySatus(mf, info->CAPI->GetProjectName(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentOutputDirectory(mf));
  sprintf(buffer, ""Cache version: %d.%d, CMake version: %d.%d"",
          info->CAPI->GetCacheMajorVersion(mf),
          info->CAPI->GetCacheMinorVersion(mf),
          info->CAPI->GetMajorVersion(mf), info->CAPI->GetMinorVersion(mf));
  info->CAPI->DisplaySatus(mf, buffer);
  if (info->CAPI->CommandExists(mf, ""SET"")) {
    info->CAPI->DisplaySatus(mf, ""Command SET exists"");
  }
  if (info->CAPI->CommandExists(mf, ""SET_FOO_BAR"")) {
    info->CAPI->SetError(mf, ""Command SET_FOO_BAR should not exists"");
    return 0;
  }
  info->CAPI->AddDefineFlag(mf, ""-DADDED_DEFINITION"");

  source_file = info->CAPI->CreateNewSourceFile(mf);
  cstr = info->CAPI->SourceFileGetSourceName(source_file);
  sprintf(buffer, ""Shold be empty (source file name): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  cstr = info->CAPI->SourceFileGetFullPath(source_file);
  sprintf(buffer, ""Should be empty (source file full path): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY"", ""unused old prop"",
                                       ""This property is no longer used"", 0);
  if (info->CAPI->SourceFileGetPropertyAsBool(source_file, ""SOME_PROPERTY"")) {
    info->CAPI->SetError(mf, ""Property SOME_PROPERTY should not be defined"");
    return 0;
  }
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY2"", ""nice prop"",
                                       ""This property is for testing."", 0);
  info->CAPI->SourceFileSetProperty(source_file, ""SOME_PROPERTY2"", ""HERE"");
  cstr = info->CAPI->SourceFileGetProperty(source_file, ""ABSTRACT"");
  sprintf(buffer, ""Should be 0 (source file abstract property): [%p]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);

  info->CAPI->DestroySourceFile(source_file);

  srcs = argv[2];
  info->CAPI->AddExecutable(mf, ""LoadedCommand"", 1, &srcs, 0);

  /* add customs commands to generate the source file */
  ccArgs[0] = ""-E"";
  ccArgs[1] = ""copy"";
  ccArgs[2] = argv[0];
  ccArgs[3] = argv[1];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommand(mf, ""LoadedCommand.cxx.in"", file, 4, ccArgs, 1,
                               ccDep, 1, ccOut, ""LoadedCommand"");

  ccArgs[2] = argv[1];
  ccArgs[3] = argv[2];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommandToOutput(mf, ccOut[0], file, 4, ccArgs, ccDep[0],
                                       0, 0);

  ccArgs[1] = ""echo"";
  ccArgs[2] = ""Build has finished"";
  info->CAPI->AddCustomCommandToTarget(mf, ""LoadedCommand"", file, 3, ccArgs,
                                       CM_POST_BUILD);

  info->CAPI->Free(file);

  args[0] = ""TEST_EXEC"";
  args[1] = ""TRUE"";

  /* code coverage */
  if (info->CAPI->GetTotalArgumentSize(2, args) != 13) {
    return 0;
  }
  info->CAPI->ExecuteCommand(mf, ""SET"", 2, args);

  /* make sure we can find the source file */
  if (!info->CAPI->GetSource(mf, argv[1])) {
    info->CAPI->SetError(mf, ""Source file could not be found!"");
    return 0;
  }

  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2147.cpp,"[6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 1, 474, 0, 0, 12, 12, 0, 0, 2, 112, 0, 0, 0, 0, 11, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 296, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 31, 0, 6, 6, 0, 0, 72, 0, 0, 72, 0, 179, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2147.cpp,82
second/download/CMake/CMake/CMake/Tests/LoadCommandOneConfig/CMakeCommands/cmTestCommand.cpp,107,"sprintf(buffer, ""Should be 0 (source file abstract property): [%p]"", cstr);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2148.cpp,"{
  char* file;
  char* str;
  char* srcs;
  const char* cstr;
  char buffer[1024];
  void* source_file;
  char* args[2];
  char* ccArgs[4];
  char* ccDep[1];
  char* ccOut[1];
  cmLoadedCommandInfo* info = (cmLoadedCommandInfo*)inf;

  cmVTKWrapTclData* cdata =
    (cmVTKWrapTclData*)malloc(sizeof(cmVTKWrapTclData));
  cdata->LibraryName = ""BOO"";
  cdata->Argc = argc;
  cdata->Argv = argv;
  info->CAPI->SetClientData(info, cdata);

  /* Now check and see if the value has been stored in the cache */
  /* already, if so use that value and don't look for the program */
  if (!info->CAPI->IsOn(mf, ""TEST_COMMAND_TEST1"")) {
    info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
    return 1;
  }

  info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
  cdata->LibraryName = ""HOO"";

  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE"", ""ON"",
                                 ""Test cache variable"", CM_CACHE_BOOL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE1"", """",
                                 ""Test cache variable 1"", CM_CACHE_PATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE2"", """",
                                 ""Test cache variable 2"", CM_CACHE_FILEPATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE3"", """",
                                 ""Test cache variable 3"", CM_CACHE_STRING);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE4"", """",
                                 ""Test cache variable 4"", CM_CACHE_INTERNAL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE5"", """",
                                 ""Test cache variable 5"", CM_CACHE_STATIC);

  file = info->CAPI->ExpandVariablesInString(mf, ""${CMAKE_COMMAND}"", 0, 0);

  str = info->CAPI->GetFilenameWithoutExtension(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->GetFilenamePath(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->Capitalized(""cmake"");
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);

  info->CAPI->DisplaySatus(mf, info->CAPI->GetProjectName(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentOutputDirectory(mf));
  sprintf(buffer, ""Cache version: %d.%d, CMake version: %d.%d"",
          info->CAPI->GetCacheMajorVersion(mf),
          info->CAPI->GetCacheMinorVersion(mf),
          info->CAPI->GetMajorVersion(mf), info->CAPI->GetMinorVersion(mf));
  info->CAPI->DisplaySatus(mf, buffer);
  if (info->CAPI->CommandExists(mf, ""SET"")) {
    info->CAPI->DisplaySatus(mf, ""Command SET exists"");
  }
  if (info->CAPI->CommandExists(mf, ""SET_FOO_BAR"")) {
    info->CAPI->SetError(mf, ""Command SET_FOO_BAR should not exists"");
    return 0;
  }
  info->CAPI->AddDefineFlag(mf, ""-DADDED_DEFINITION"");

  source_file = info->CAPI->CreateNewSourceFile(mf);
  cstr = info->CAPI->SourceFileGetSourceName(source_file);
  sprintf(buffer, ""Shold be empty (source file name): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  cstr = info->CAPI->SourceFileGetFullPath(source_file);
  sprintf(buffer, ""Should be empty (source file full path): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY"", ""unused old prop"",
                                       ""This property is no longer used"", 0);
  if (info->CAPI->SourceFileGetPropertyAsBool(source_file, ""SOME_PROPERTY"")) {
    info->CAPI->SetError(mf, ""Property SOME_PROPERTY should not be defined"");
    return 0;
  }
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY2"", ""nice prop"",
                                       ""This property is for testing."", 0);
  info->CAPI->SourceFileSetProperty(source_file, ""SOME_PROPERTY2"", ""HERE"");
  cstr = info->CAPI->SourceFileGetProperty(source_file, ""ABSTRACT"");
  sprintf(buffer, ""Should be 0 (source file abstract property): [%p]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);

  info->CAPI->DestroySourceFile(source_file);

  srcs = argv[2];
  info->CAPI->AddExecutable(mf, ""LoadedCommand"", 1, &srcs, 0);

  /* add customs commands to generate the source file */
  ccArgs[0] = ""-E"";
  ccArgs[1] = ""copy"";
  ccArgs[2] = argv[0];
  ccArgs[3] = argv[1];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommand(mf, ""LoadedCommand.cxx.in"", file, 4, ccArgs, 1,
                               ccDep, 1, ccOut, ""LoadedCommand"");

  ccArgs[2] = argv[1];
  ccArgs[3] = argv[2];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommandToOutput(mf, ccOut[0], file, 4, ccArgs, ccDep[0],
                                       0, 0);

  ccArgs[1] = ""echo"";
  ccArgs[2] = ""Build has finished"";
  info->CAPI->AddCustomCommandToTarget(mf, ""LoadedCommand"", file, 3, ccArgs,
                                       CM_POST_BUILD);

  info->CAPI->Free(file);

  args[0] = ""TEST_EXEC"";
  args[1] = ""TRUE"";

  /* code coverage */
  if (info->CAPI->GetTotalArgumentSize(2, args) != 13) {
    return 0;
  }
  info->CAPI->ExecuteCommand(mf, ""SET"", 2, args);

  /* make sure we can find the source file */
  if (!info->CAPI->GetSource(mf, argv[1])) {
    info->CAPI->SetError(mf, ""Source file could not be found!"");
    return 0;
  }

  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2148.cpp,"[6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 1, 474, 0, 0, 12, 12, 0, 0, 2, 112, 0, 0, 0, 0, 11, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 296, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 31, 0, 6, 6, 0, 0, 72, 0, 0, 72, 0, 179, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2148.cpp,94
second/download/CMake/CMake/CMake/Tests/LoadCommandOneConfig/CMakeCommands/cmTestCommand.cpp,164,"fprintf(stderr, ""*** Failed LOADED COMMAND Final Pass\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2149.cpp,"{
    fprintf(stderr, ""*** Failed LOADED COMMAND Final Pass\n"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2149.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2149.cpp,7
second/download/CMake/CMake/CMake/Tests/SubDir/vcl_algorithm+vcl_pair+double.foo.cpp,4,"printf(""Placeholder for a file with strange name\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2150.cpp,"{
  printf(""Placeholder for a file with strange name\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2150.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2150.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDir/vcl_algorithm_vcl_pair_double.foo.cpp,4,"printf(""Placeholder for a file with strange name\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2151.cpp,"{
  printf(""Placeholder for a file with strange name\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2151.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2151.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDir/Executable/test.cpp,27,"printf(""Usage: %s <file>\n"", av[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2152.cpp,"{
    printf(""Usage: %s <file>\n"", av[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2152.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2152.cpp,3
second/download/CMake/CMake/CMake/Tests/SubDir/Executable/test.cpp,31,"printf(""Missing file %s\n"", av[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2153.cpp,"{
    printf(""Missing file %s\n"", av[1]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2153.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2153.cpp,7
second/download/CMake/CMake/CMake/Tests/SubDir/Executable/test.cpp,35,"printf(""File %s should be in subdirectory\n"", av[2]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2154.cpp,"{
    printf(""File %s should be in subdirectory\n"", av[2]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2154.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2154.cpp,11
second/download/CMake/CMake/CMake/Tests/SubDir/Executable/test.cpp,38,"printf(""%s is not there! Good."", av[2]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2155.cpp,"{
  if (ac <= 1) {
    printf(""Usage: %s <file>\n"", av[0]);
    return 1;
  }
  if (!FileExists(av[1])) {
    printf(""Missing file %s\n"", av[1]);
    return 1;
  }
  if (FileExists(av[2])) {
    printf(""File %s should be in subdirectory\n"", av[2]);
    return 1;
  }
  printf(""%s is not there! Good."", av[2]);
  printf(""%s is there! Good."", av[1]);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2155.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 3, 0, 0, 7, 0, 0, 5, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2155.cpp,14
second/download/CMake/CMake/CMake/Tests/SubDir/Executable/test.cpp,39,"printf(""%s is there! Good."", av[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2156.cpp,"{
  if (ac <= 1) {
    printf(""Usage: %s <file>\n"", av[0]);
    return 1;
  }
  if (!FileExists(av[1])) {
    printf(""Missing file %s\n"", av[1]);
    return 1;
  }
  if (FileExists(av[2])) {
    printf(""File %s should be in subdirectory\n"", av[2]);
    return 1;
  }
  printf(""%s is not there! Good."", av[2]);
  printf(""%s is there! Good."", av[1]);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2156.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 3, 0, 0, 7, 0, 0, 5, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2156.cpp,15
second/download/CMake/CMake/CMake/Tests/SubDir/Examples/example2/example2.cpp,4,"printf(""example2\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2157.cpp,"{
  printf(""example2\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2157.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2157.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDir/Examples/example1/example1.cpp,4,"printf(""example1\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2158.cpp,"{
  printf(""example1\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2158.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2158.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDir/AnotherSubdir/pair_int.int.cpp,4,"printf(""Placeholder for a strange file in subdirectory\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2159.cpp,"{
  printf(""Placeholder for a strange file in subdirectory\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2159.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2159.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDir/AnotherSubdir/pair+int.int.cpp,4,"printf(""Placeholder for a strange file in subdirectory\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2160.cpp,"{
  printf(""Placeholder for a strange file in subdirectory\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2160.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2160.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDir/AnotherSubdir/testfromsubdir.cpp,8,"printf(""Hello from subdirectory\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2161.cpp,"{
  printf(""Hello from subdirectory\n"");
  secondone();
  pair_stuff();
  vcl_stuff();
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2161.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2161.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDir/AnotherSubdir/secondone.cpp,4,"printf(""Hello again\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2162.cpp,"{
  printf(""Hello again\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2162.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2162.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDir/ThirdSubDir/pair_p_int.int1.cpp,4,"printf(""Placeholder for another strange file in subdirectory\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2163.cpp,"{
  printf(""Placeholder for another strange file in subdirectory\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2163.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2163.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDir/ThirdSubDir/thirdone.cpp,4,"printf(""Hello again\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2164.cpp,"{
  printf(""Hello again\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2164.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2164.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDir/ThirdSubDir/pair_int.int1.cpp,4,"printf(""Placeholder for a strange file in subdirectory\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2165.cpp,"{
  printf(""Placeholder for a strange file in subdirectory\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2165.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2165.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDir/ThirdSubDir/testfromauxsubdir.cpp,9,"printf(""Hello from subdirectory\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2166.cpp,"{
  printf(""Hello from subdirectory\n"");
  secondone();
  pair_stuff();
  pair_p_stuff();
  vcl_stuff();
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2166.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2166.cpp,2
second/download/CMake/CMake/CMake/Tests/SubDir/ThirdSubDir/pair+int.int1.cpp,4,"printf(""Placeholder for a strange file in subdirectory\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2167.cpp,"{
  printf(""Placeholder for a strange file in subdirectory\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2167.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2167.cpp,2
second/download/CMake/CMake/CMake/Tests/COnly/conly.cpp,11,"printf(""Problem with libc1\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2168.cpp,"{
    printf(""Problem with libc1\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2168.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2168.cpp,4
second/download/CMake/CMake/CMake/Tests/COnly/conly.cpp,15,"printf(""Problem with libc2\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2169.cpp,"{
    printf(""Problem with libc2\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2169.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2169.cpp,8
second/download/CMake/CMake/CMake/Tests/COnly/conly.cpp,18,"printf(""Foo: %s %d\n"", foo, class);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2170.cpp,"{
  int class = 0;
  if (LibC1Func() != 2.0) {
    printf(""Problem with libc1\n"");
    return 1;
  }
  if (LibC2Func() != 1.0) {
    printf(""Problem with libc2\n"");
    return 1;
  }
  printf(""Foo: %s %d\n"", foo, class);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2170.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 10, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 0, 5, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2170.cpp,11
second/download/CMake/CMake/CMake/Tests/OutOfSource/OutOfSourceSubdir/simple.cpp,18,"fprintf(stderr, ""Get definitions from a subdir did not work\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2171.cpp,"{
    fprintf(stderr, ""Get definitions from a subdir did not work\n"");
    return -2;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2171.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2171.cpp,6
second/download/CMake/CMake/CMake/Tests/MathTest/MathTestExec.cpp,13,"printf(""Usage: %s\n"", argv[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2172.cpp,"{
    printf(""Usage: %s\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2172.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2172.cpp,3
second/download/CMake/CMake/CMake/Tests/MathTest/MathTestExec.cpp,19,"printf(""%s: %d math tests failed\n"", argv[0], res);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2173.cpp,"{
    printf(""%s: %d math tests failed\n"", argv[0], res);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2173.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2173.cpp,9
second/download/CMake/CMake/CMake/Tests/CTestTest/SmallAndFast/echoargs.cpp,6,"fprintf(stdout, ""%s\n"", argv[i]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2174.cpp,"{
    fprintf(stdout, ""%s\n"", argv[i]);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2174.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2174.cpp,4
second/download/CMake/CMake/CMake/Tests/CTestTest/SmallAndFast/intentional_compile_warning.cpp,7,"fprintf(stdout, ""%s\n"", argv[i]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2175.cpp,"{
    fprintf(stdout, ""%s\n"", argv[i]);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2175.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2175.cpp,5
second/download/CMake/CMake/CMake/Tests/FindOpenMP/Test/scaltest.cpp,17,"printf(""%f\n"", rk);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2176.cpp,"{
  double a[5] = { 1., 2., 3., 4., 5. };
  double b[5] = { 2., 3., 4., 5., 6. };
  double rk;
  scalprod(5, a, b, &rk);
#ifdef __cplusplus
  std::cout << rk << std::endl;
#else
  printf(""%f\n"", rk);
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2176.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 22, 0, 0, 3, 3, 0, 0, 2, 14, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 0, 1, 0, 2, 0, 0, 3, 0, 6, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2176.cpp,9
second/download/CMake/CMake/CMake/Tests/SimpleInstallS2/inst.cpp,20,"printf(""Problem with lib1\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2177.cpp,"{
    printf(""Problem with lib1\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2177.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2177.cpp,3
second/download/CMake/CMake/CMake/Tests/SimpleInstallS2/inst.cpp,24,"printf(""Problem with lib2\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2178.cpp,"{
    printf(""Problem with lib2\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2178.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2178.cpp,7
second/download/CMake/CMake/CMake/Tests/SimpleInstallS2/inst.cpp,28,"printf(""Problem with lib4\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2179.cpp,"{
    printf(""Problem with lib4\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2179.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2179.cpp,11
second/download/CMake/CMake/CMake/Tests/SimpleInstallS2/inst.cpp,31,"printf(""The value of Foo: %s\n"", foo);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2180.cpp,"{
  if (Lib1Func() != 2.0) {
    printf(""Problem with lib1\n"");
    return 1;
  }
  if (Lib2Func() != 1.0) {
    printf(""Problem with lib2\n"");
    return 1;
  }
  if (Lib4Func() != 4.0) {
    printf(""Problem with lib4\n"");
    return 1;
  }
  printf(""The value of Foo: %s\n"", foo);
  return SomeFunctionInFoo() - 5;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2180.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 8, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2180.cpp,14
second/download/CMake/CMake/CMake/Tests/CxxOnly/cxxonly.cpp,14,"printf(""Problem with libcxx1\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2181.cpp,"{
    printf(""Problem with libcxx1\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2181.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2181.cpp,6
second/download/CMake/CMake/CMake/Tests/CxxOnly/cxxonly.cpp,18,"printf(""Problem with libcxx2\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2182.cpp,"{
    printf(""Problem with libcxx2\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2182.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2182.cpp,10
second/download/CMake/CMake/CMake/Tests/SubProject/foo/foo.cpp,8,"printf(""bar = %d\n"", ret);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2183.cpp,"{
  (void)ac;
  (void)av;
  int ret = bar();
  printf(""bar = %d\n"", ret);
  if (ret == 10) {
    return 0;
  }
  return -1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2183.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 10, 0, 0, 1, 1, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2183.cpp,5
second/download/CMake/CMake/CMake/Tests/TestDriver/test2.cpp,3,"printf(""test2\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2184.cpp,"{
  printf(""test2\n"");
  for (int i = 0; i < ac; i++)
    printf(""arg %d is %s\n"", ac, av[i]);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2184.cpp,"[0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2184.cpp,2
second/download/CMake/CMake/CMake/Tests/TestDriver/test2.cpp,5,"printf(""arg %d is %s\n"", ac, av[i]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2185.cpp,"printf(""arg %d is %s\n"", ac, av[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2185.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2185.cpp,4
second/download/CMake/CMake/CMake/Tests/TestDriver/testArgs.cpp,7,"printf(""number of threads is %s\n"", argv[2]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2186.cpp,"{
    printf(""number of threads is %s\n"", argv[2]);
    *av += 2;
    *ac -= 2;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2186.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2186.cpp,7
second/download/CMake/CMake/CMake/Tests/TestDriver/testArgs.cpp,11,"printf(""no threads\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2187.cpp,"{
    printf(""no threads\n"");
    *av += 1;
    *ac -= 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2187.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2187.cpp,11
second/download/CMake/CMake/CMake/Tests/TestDriver/test1.cpp,17,"printf(""test1\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2188.cpp,"{
  if (!testExtraStuff2()) {
    return -1;
  }
  if (!testExtraStuff()) {
    return -1;
  }
  if (!testExtraStuff3()) {
    return -1;
  }

  printf(""test1\n"");
  for (int i = 0; i < ac; i++)
    printf(""arg %d is %s\n"", ac, av[i]);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2188.cpp,"[3, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 0, 14, 0, 0, 0, 1, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 4, 3, 0, 0, 5, 0, 0, 2, 0, 4, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2188.cpp,12
second/download/CMake/CMake/CMake/Tests/TestDriver/test1.cpp,19,"printf(""arg %d is %s\n"", ac, av[i]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2189.cpp,"printf(""arg %d is %s\n"", ac, av[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2189.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2189.cpp,14
second/download/CMake/CMake/CMake/Tests/TestDriver/subdir/test3.cpp,3,"printf(""test3\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2190.cpp,"{
  printf(""test3\n"");
  for (int i = 0; i < ac; i++)
    printf(""arg %d is %s\n"", ac, av[i]);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2190.cpp,"[0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2190.cpp,2
second/download/CMake/CMake/CMake/Tests/TestDriver/subdir/test3.cpp,5,"printf(""arg %d is %s\n"", ac, av[i]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2191.cpp,"printf(""arg %d is %s\n"", ac, av[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2191.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2191.cpp,4
second/download/CMake/CMake/CMake/Tests/FindPNG/Test/main.cpp,11,"snprintf(png_version_string, 16, ""%i.%i.%i"", png_version / 10000,
           (png_version % 10000) / 100, png_version % 100);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2192.cpp,"{
  png_uint_32 png_version;
  char png_version_string[16];

  png_version = png_access_version_number();

  snprintf(png_version_string, 16, ""%i.%i.%i"", png_version / 10000,
           (png_version % 10000) / 100, png_version % 100);

  assert(strcmp(png_version_string, CMAKE_EXPECTED_PNG_VERSION) == 0);

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2192.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 2, 2, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2192.cpp,7
second/download/CMake/CMake/CMake/Tests/Environment/main.cpp,10,"fprintf(stdout, ""Environment:\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2193.cpp,"{
  char* var = getenv(""CMAKE_ENVIRONMENT_TEST_VAR"");
  if (!var) {
    var = ""(null)"";
  }

  fprintf(stdout, ""Environment:\n"");
  fprintf(stdout, ""  CMAKE_ENVIRONMENT_TEST_VAR='%s'\n"", var);

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2193.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 10, 0, 0, 1, 1, 0, 0, 1, 5, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2193.cpp,7
second/download/CMake/CMake/CMake/Tests/Environment/main.cpp,11,"fprintf(stdout, ""  CMAKE_ENVIRONMENT_TEST_VAR='%s'\n"", var);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2194.cpp,"{
  char* var = getenv(""CMAKE_ENVIRONMENT_TEST_VAR"");
  if (!var) {
    var = ""(null)"";
  }

  fprintf(stdout, ""Environment:\n"");
  fprintf(stdout, ""  CMAKE_ENVIRONMENT_TEST_VAR='%s'\n"", var);

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2194.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 10, 0, 0, 1, 1, 0, 0, 1, 5, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2194.cpp,8
second/download/CMake/CMake/CMake/Tests/QtAutogen/complex/yaf_p.cpp,15,"printf(""I am yet another file !\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2195.cpp,"{ printf(""I am yet another file !\n""); }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2195.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2195.cpp,0
second/download/CMake/CMake/CMake/Tests/QtAutogen/complex/bar.cpp,13,"printf(""Hello bar !\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2196.cpp,"{
  printf(""Hello bar !\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2196.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2196.cpp,2
second/download/CMake/CMake/CMake/Tests/QtAutogen/complex/abc_p.cpp,15,"printf(""I am private abc !\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2197.cpp,"{ printf(""I am private abc !\n""); }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2197.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2197.cpp,0
second/download/CMake/CMake/CMake/Tests/ExportImport/Export/testExe1.cpp,7,"fprintf(stderr, ""Must specify output file.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2198.cpp,"{
    fprintf(stderr, ""Must specify output file.\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2198.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2198.cpp,3
second/download/CMake/CMake/CMake/Tests/ExportImport/Export/testExe1.cpp,13,"fprintf(f, ""int generated_by_testExe1() { return 0; }\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2199.cpp,"{
      fprintf(f, ""int generated_by_testExe1() { return 0; }\n"");
      fclose(f);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2199.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2199.cpp,9
second/download/CMake/CMake/CMake/Tests/ExportImport/Export/testExe1.cpp,16,"fprintf(stderr, ""Error writing to %s\n"", argv[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2200.cpp,"{
      fprintf(stderr, ""Error writing to %s\n"", argv[1]);
      return 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2200.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2200.cpp,12
second/download/CMake/CMake/CMake/Tests/ExportImport/Export/testExe4.cpp,5,"fprintf(stderr, ""Must specify output file.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2201.cpp,"{
    fprintf(stderr, ""Must specify output file.\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2201.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2201.cpp,3
second/download/CMake/CMake/CMake/Tests/ExportImport/Export/testExe4.cpp,11,"fprintf(f, ""int generated_by_testExe4() { return 0; }\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2202.cpp,"{
      fprintf(f, ""int generated_by_testExe4() { return 0; }\n"");
      fclose(f);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2202.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2202.cpp,9
second/download/CMake/CMake/CMake/Tests/ExportImport/Export/testExe4.cpp,14,"fprintf(stderr, ""Error writing to %s\n"", argv[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2203.cpp,"{
      fprintf(stderr, ""Error writing to %s\n"", argv[1]);
      return 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2203.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2203.cpp,12
second/download/CMake/CMake/CMake/Tests/ExportImport/Export/testExe3.cpp,5,"fprintf(stderr, ""Must specify output file.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2204.cpp,"{
    fprintf(stderr, ""Must specify output file.\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2204.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2204.cpp,3
second/download/CMake/CMake/CMake/Tests/ExportImport/Export/testExe3.cpp,11,"fprintf(f, ""int generated_by_testExe3() { return 0; }\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2205.cpp,"{
      fprintf(f, ""int generated_by_testExe3() { return 0; }\n"");
      fclose(f);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2205.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2205.cpp,9
second/download/CMake/CMake/CMake/Tests/ExportImport/Export/testExe3.cpp,14,"fprintf(stderr, ""Error writing to %s\n"", argv[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2206.cpp,"{
      fprintf(stderr, ""Error writing to %s\n"", argv[1]);
      return 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2206.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2206.cpp,12
second/download/CMake/CMake/CMake/Tests/CTestTestResourceLock/lockFile.cpp,21,"fprintf(file, ""%s"", ""x"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2207.cpp,"{
    fprintf(file, ""%s"", ""x"");
    fflush(file);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2207.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2207.cpp,13
second/download/CMake/CMake/CMake/Tests/Plugin/src/example_mod_1.cpp,19,"printf(""world\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2208.cpp,"{
  int result = example_exe_function() + n;
  printf(""world\n"");
  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2208.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2208.cpp,3
second/download/CMake/CMake/CMake/Tests/BundleTest/BundleLib.cpp,13,"printf(""Cannot find file: %s\n"", filename);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2209.cpp,"{
    printf(""Cannot find file: %s\n"", filename);
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2209.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2209.cpp,6
second/download/CMake/CMake/CMake/Tests/BundleTest/BundleLib.cpp,26,"printf(""Process executable name: %s\n"", exec);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2210.cpp,"{
  int res;
  char* nexec = strdup(exec);
  char* fpath = (char*)malloc(strlen(exec) + 100);
  int cc;
  int cnt = 0;
  printf(""Process executable name: %s\n"", exec);

  // Remove the executable name and directory name
  for (cc = strlen(nexec) - 1; cc > 0; cc--) {
    if (nexec[cc] == '/') {
      nexec[cc] = 0;
      if (cnt == 1) {
        break;
      }
      cnt++;
    }
  }
  printf(""Process executable path: %s\n"", nexec);
  sprintf(fpath, ""%s/%s"", nexec, file);
  printf(""Check for file: %s\n"", fpath);
  res = fileExists(fpath);
  free(nexec);
  free(fpath);
  return res;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2210.cpp,"[2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 47, 0, 0, 5, 5, 0, 0, 4, 11, 0, 0, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 3, 2, 0, 0, 11, 0, 0, 9, 0, 17, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2210.cpp,7
second/download/CMake/CMake/CMake/Tests/BundleTest/BundleLib.cpp,38,"printf(""Process executable path: %s\n"", nexec);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2211.cpp,"{
  int res;
  char* nexec = strdup(exec);
  char* fpath = (char*)malloc(strlen(exec) + 100);
  int cc;
  int cnt = 0;
  printf(""Process executable name: %s\n"", exec);

  // Remove the executable name and directory name
  for (cc = strlen(nexec) - 1; cc > 0; cc--) {
    if (nexec[cc] == '/') {
      nexec[cc] = 0;
      if (cnt == 1) {
        break;
      }
      cnt++;
    }
  }
  printf(""Process executable path: %s\n"", nexec);
  sprintf(fpath, ""%s/%s"", nexec, file);
  printf(""Check for file: %s\n"", fpath);
  res = fileExists(fpath);
  free(nexec);
  free(fpath);
  return res;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2211.cpp,"[2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 47, 0, 0, 5, 5, 0, 0, 4, 11, 0, 0, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 3, 2, 0, 0, 11, 0, 0, 9, 0, 17, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2211.cpp,19
second/download/CMake/CMake/CMake/Tests/BundleTest/BundleLib.cpp,39,"sprintf(fpath, ""%s/%s"", nexec, file);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2212.cpp,"{
  int res;
  char* nexec = strdup(exec);
  char* fpath = (char*)malloc(strlen(exec) + 100);
  int cc;
  int cnt = 0;
  printf(""Process executable name: %s\n"", exec);

  // Remove the executable name and directory name
  for (cc = strlen(nexec) - 1; cc > 0; cc--) {
    if (nexec[cc] == '/') {
      nexec[cc] = 0;
      if (cnt == 1) {
        break;
      }
      cnt++;
    }
  }
  printf(""Process executable path: %s\n"", nexec);
  sprintf(fpath, ""%s/%s"", nexec, file);
  printf(""Check for file: %s\n"", fpath);
  res = fileExists(fpath);
  free(nexec);
  free(fpath);
  return res;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2212.cpp,"[2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 47, 0, 0, 5, 5, 0, 0, 4, 11, 0, 0, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 3, 2, 0, 0, 11, 0, 0, 9, 0, 17, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2212.cpp,20
second/download/CMake/CMake/CMake/Tests/BundleTest/BundleLib.cpp,40,"printf(""Check for file: %s\n"", fpath);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2213.cpp,"{
  int res;
  char* nexec = strdup(exec);
  char* fpath = (char*)malloc(strlen(exec) + 100);
  int cc;
  int cnt = 0;
  printf(""Process executable name: %s\n"", exec);

  // Remove the executable name and directory name
  for (cc = strlen(nexec) - 1; cc > 0; cc--) {
    if (nexec[cc] == '/') {
      nexec[cc] = 0;
      if (cnt == 1) {
        break;
      }
      cnt++;
    }
  }
  printf(""Process executable path: %s\n"", nexec);
  sprintf(fpath, ""%s/%s"", nexec, file);
  printf(""Check for file: %s\n"", fpath);
  res = fileExists(fpath);
  free(nexec);
  free(fpath);
  return res;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2213.cpp,"[2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 47, 0, 0, 5, 5, 0, 0, 4, 11, 0, 0, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 3, 2, 0, 0, 11, 0, 0, 9, 0, 17, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2213.cpp,21
second/download/CMake/CMake/CMake/Tests/BundleTest/BundleTest.cpp,8,"printf(""Started with: %d arguments\n"", argc);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2214.cpp,"{
  printf(""Started with: %d arguments\n"", argc);

  // Call a CoreFoundation function... but pull in the link dependency on
  // ""-framework
  // CoreFoundation"" via CMake's dependency chaining mechanism. This code
  // exists to
  // verify that the chaining mechanism works with ""-framework blah"" style
  // link dependencies.
  //
  CFBundleRef br = CFBundleGetMainBundle();
  (void)br;

  return foo(argv[0]);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2214.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2214.cpp,2
second/download/CMake/CMake/CMake/Tests/TestsWorkingDirectory/main.cpp,21,"fprintf(stderr, ""No current working directory.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2215.cpp,"{
    fprintf(stderr, ""No current working directory.\n"");
    abort();
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2215.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2215.cpp,5
second/download/CMake/CMake/CMake/Tests/TestsWorkingDirectory/main.cpp,45,"fprintf(stderr, ""No current working directory\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2216.cpp,"{
    fprintf(stderr, ""No current working directory\n"");
    abort();
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2216.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2216.cpp,4
second/download/CMake/CMake/CMake/Tests/FindGTK2/cairo/main.cpp,10,"fprintf(stderr, ""Usage: %s OUTPUT_FILENAME\n"", argv[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2217.cpp,"{
    fprintf(stderr, ""Usage: %s OUTPUT_FILENAME\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2217.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2217.cpp,4
second/download/CMake/CMake/CMake/Tests/FindGTK2/cairo/main.cpp,44,"fprintf(stderr, ""Could not save png to '%s'\n"", filename);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2218.cpp,"{
    fprintf(stderr, ""Could not save png to '%s'\n"", filename);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2218.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2218.cpp,38
second/download/CMake/CMake/CMake/Tests/CustComDepend/foo.cpp,5,"printf(""create %s\n"", av[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2219.cpp,"{
  FILE* fout = fopen(av[1], ""w"");
  printf(""create %s\n"", av[1]);
  if (!fout) {
    return -1;
  }
  fprintf(fout, ""#include <bar.h>\nBAR_EXPORT int bar(){ return 10;}\n"");
  fclose(fout);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2219.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 13, 0, 0, 1, 1, 0, 0, 1, 7, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 4, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2219.cpp,3
second/download/CMake/CMake/CMake/Tests/CustComDepend/foo.cpp,9,"fprintf(fout, ""#include <bar.h>\nBAR_EXPORT int bar(){ return 10;}\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2220.cpp,"{
  FILE* fout = fopen(av[1], ""w"");
  printf(""create %s\n"", av[1]);
  if (!fout) {
    return -1;
  }
  fprintf(fout, ""#include <bar.h>\nBAR_EXPORT int bar(){ return 10;}\n"");
  fclose(fout);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2220.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 13, 0, 0, 1, 1, 0, 0, 1, 7, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 4, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2220.cpp,7
second/download/CMake/CMake/CMake/Tests/SourceGroups/main.cpp,15,"printf(""foo: %d bar: %d foobar: %d barbar: %d baz: %d\n"", foo(), bar(),
         foobar(), barbar(), baz());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2221.cpp,"{
  printf(""foo: %d bar: %d foobar: %d barbar: %d baz: %d\n"", foo(), bar(),
         foobar(), barbar(), baz());

  printf(""tree_prefix_foo: %d tree_prefix_bar: %d tree_bar: %d tree_foobar: ""
         ""%d tree_baz: %d\n"",
         tree_prefix_foo(), tree_prefix_bar(), tree_bar(), tree_foobar(),
         tree_baz());
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2221.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 2, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2221.cpp,2
second/download/CMake/CMake/CMake/Tests/SourceGroups/main.cpp,18,"printf(""tree_prefix_foo: %d tree_prefix_bar: %d tree_bar: %d tree_foobar: ""
         ""%d tree_baz: %d\n"",
         tree_prefix_foo(), tree_prefix_bar(), tree_bar(), tree_foobar(),
         tree_baz());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2222.cpp,"{
  printf(""foo: %d bar: %d foobar: %d barbar: %d baz: %d\n"", foo(), bar(),
         foobar(), barbar(), baz());

  printf(""tree_prefix_foo: %d tree_prefix_bar: %d tree_bar: %d tree_foobar: ""
         ""%d tree_baz: %d\n"",
         tree_prefix_foo(), tree_prefix_bar(), tree_bar(), tree_foobar(),
         tree_baz());
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2222.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 2, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2222.cpp,5
second/download/CMake/CMake/CMake/Tests/SimpleExclude/dirD/t8.cpp,4,"printf(""This is T8\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2223.cpp,"{
  printf(""This is T8\n"");
  return 8;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2223.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2223.cpp,2
second/download/CMake/CMake/CMake/Tests/SimpleExclude/dirD/t9.cpp,16,"printf(""This is T9. This one should work.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2224.cpp,"{
#endif
  if (ac > 1000) {
    return *av[0];
  }
  printf(""This is T9. This one should work.\n"");

  if (tlib7func() != 7) {
    fprintf(stderr, ""Something wrong with T7\n"");
    return 1;
  }
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2224.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 2, 0, 0, 3, 0, 0, 2, 0, 3, 1, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2224.cpp,6
second/download/CMake/CMake/CMake/Tests/SimpleExclude/dirD/t9.cpp,19,"fprintf(stderr, ""Something wrong with T7\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2225.cpp,"{
    fprintf(stderr, ""Something wrong with T7\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2225.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2225.cpp,9
second/download/CMake/CMake/CMake/Tests/SimpleExclude/dirC/dirB/t7.cpp,6,"printf(""This is T7\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2226.cpp,"{
  printf(""This is T7\n"");

  if (tlib2func() != 2) {
    fprintf(stderr, ""Something wrong with T2\n"");
    return 1;
  }

  return 7;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2226.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2226.cpp,2
second/download/CMake/CMake/CMake/Tests/SimpleExclude/dirC/dirB/t7.cpp,9,"fprintf(stderr, ""Something wrong with T2\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2227.cpp,"{
    fprintf(stderr, ""Something wrong with T2\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2227.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2227.cpp,5
second/download/CMake/CMake/CMake/Tests/SimpleExclude/dirC/dirB/t6.cpp,5,"printf(""This is T6\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2228.cpp,"{
  Should not be build unless target directory B, or C are build;
  printf(""This is T6\n"");
  return 6;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2228.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2228.cpp,3
second/download/CMake/CMake/CMake/Tests/SimpleExclude/dirC/dirA/t4.cpp,14,"printf(""This is T4. This one should work.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2229.cpp,"{
#endif
  if (ac > 1000) {
    return *av[0];
  }
  printf(""This is T4. This one should work.\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2229.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2229.cpp,6
second/download/CMake/CMake/CMake/Tests/SimpleExclude/dirC/dirA/t1.cpp,5,"printf(""This is T1\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2230.cpp,"{
  Should not be build unless target directory A, B, or C are build;
  printf(""This is T1\n"");
  return 5;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2230.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2230.cpp,3
second/download/CMake/CMake/CMake/Tests/SimpleExclude/dirC/dirA/t2.cpp,4,"printf(""This is T2\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2231.cpp,"{
  printf(""This is T2\n"");
  return 2;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2231.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2231.cpp,2
second/download/CMake/CMake/CMake/Tests/NewlineArgs/cxxonly.cpp,8,"printf(""Problem with libcxx1\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2232.cpp,"{
    printf(""Problem with libcxx1\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2232.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2232.cpp,3
second/download/CMake/CMake/CMake/Tests/NewlineArgs/cxxonly.cpp,14,"printf(""Problem with libcxx2.h include dir probably!\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2233.cpp,"{
  if (LibCxx1Class::Method() != 2.0) {
    printf(""Problem with libcxx1\n"");
    return 1;
  }
#ifdef TEST_FLAG_3
  return 0;
#else
  printf(""Problem with libcxx2.h include dir probably!\n"");
  return 1;
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2233.cpp,"[1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 2, 0, 2, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2233.cpp,9
second/download/CMake/CMake/CMake/Tests/LoadCommand/CMakeCommands/cmTestCommand.cpp,76,"sprintf(buffer, ""Cache version: %d.%d, CMake version: %d.%d"",
          info->CAPI->GetCacheMajorVersion(mf),
          info->CAPI->GetCacheMinorVersion(mf),
          info->CAPI->GetMajorVersion(mf), info->CAPI->GetMinorVersion(mf));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2234.cpp,"{
  char* file;
  char* str;
  char* srcs;
  const char* cstr;
  char buffer[1024];
  void* source_file;
  char* args[2];
  char* ccArgs[4];
  char* ccDep[1];
  char* ccOut[1];
  cmLoadedCommandInfo* info = (cmLoadedCommandInfo*)inf;

  cmVTKWrapTclData* cdata =
    (cmVTKWrapTclData*)malloc(sizeof(cmVTKWrapTclData));
  cdata->LibraryName = ""BOO"";
  cdata->Argc = argc;
  cdata->Argv = argv;
  info->CAPI->SetClientData(info, cdata);

  /* Now check and see if the value has been stored in the cache */
  /* already, if so use that value and don't look for the program */
  if (!info->CAPI->IsOn(mf, ""TEST_COMMAND_TEST1"")) {
    info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
    return 1;
  }

  info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
  cdata->LibraryName = ""HOO"";

  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE"", ""ON"",
                                 ""Test cache variable"", CM_CACHE_BOOL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE1"", """",
                                 ""Test cache variable 1"", CM_CACHE_PATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE2"", """",
                                 ""Test cache variable 2"", CM_CACHE_FILEPATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE3"", """",
                                 ""Test cache variable 3"", CM_CACHE_STRING);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE4"", """",
                                 ""Test cache variable 4"", CM_CACHE_INTERNAL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE5"", """",
                                 ""Test cache variable 5"", CM_CACHE_STATIC);

  file = info->CAPI->ExpandVariablesInString(mf, ""${CMAKE_COMMAND}"", 0, 0);

  str = info->CAPI->GetFilenameWithoutExtension(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->GetFilenamePath(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->Capitalized(""cmake"");
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);

  info->CAPI->DisplaySatus(mf, info->CAPI->GetProjectName(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentOutputDirectory(mf));
  sprintf(buffer, ""Cache version: %d.%d, CMake version: %d.%d"",
          info->CAPI->GetCacheMajorVersion(mf),
          info->CAPI->GetCacheMinorVersion(mf),
          info->CAPI->GetMajorVersion(mf), info->CAPI->GetMinorVersion(mf));
  info->CAPI->DisplaySatus(mf, buffer);
  if (info->CAPI->CommandExists(mf, ""SET"")) {
    info->CAPI->DisplaySatus(mf, ""Command SET exists"");
  }
  if (info->CAPI->CommandExists(mf, ""SET_FOO_BAR"")) {
    info->CAPI->SetError(mf, ""Command SET_FOO_BAR should not exists"");
    return 0;
  }
  info->CAPI->AddDefineFlag(mf, ""-DADDED_DEFINITION"");

  source_file = info->CAPI->CreateNewSourceFile(mf);
  cstr = info->CAPI->SourceFileGetSourceName(source_file);
  sprintf(buffer, ""Shold be empty (source file name): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  cstr = info->CAPI->SourceFileGetFullPath(source_file);
  sprintf(buffer, ""Should be empty (source file full path): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY"", ""unused old prop"",
                                       ""This property is no longer used"", 0);
  if (info->CAPI->SourceFileGetPropertyAsBool(source_file, ""SOME_PROPERTY"")) {
    info->CAPI->SetError(mf, ""Property SOME_PROPERTY should not be defined"");
    return 0;
  }
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY2"", ""nice prop"",
                                       ""This property is for testing."", 0);
  info->CAPI->SourceFileSetProperty(source_file, ""SOME_PROPERTY2"", ""HERE"");
  cstr = info->CAPI->SourceFileGetProperty(source_file, ""ABSTRACT"");
  sprintf(buffer, ""Should be 0 (source file abstract property): [%p]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);

  info->CAPI->DestroySourceFile(source_file);

  srcs = argv[2];
  info->CAPI->AddExecutable(mf, ""LoadedCommand"", 1, &srcs, 0);

  /* add customs commands to generate the source file */
  ccArgs[0] = ""-E"";
  ccArgs[1] = ""copy"";
  ccArgs[2] = argv[0];
  ccArgs[3] = argv[1];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommand(mf, ""LoadedCommand.cxx.in"", file, 4, ccArgs, 1,
                               ccDep, 1, ccOut, ""LoadedCommand"");

  ccArgs[2] = argv[1];
  ccArgs[3] = argv[2];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommandToOutput(mf, ccOut[0], file, 4, ccArgs, ccDep[0],
                                       0, 0);

  ccArgs[1] = ""echo"";
  ccArgs[2] = ""Build has finished"";
  info->CAPI->AddCustomCommandToTarget(mf, ""LoadedCommand"", file, 3, ccArgs,
                                       CM_POST_BUILD);

  info->CAPI->Free(file);

  args[0] = ""TEST_EXEC"";
  args[1] = ""TRUE"";

  /* code coverage */
  if (info->CAPI->GetTotalArgumentSize(2, args) != 13) {
    return 0;
  }
  info->CAPI->ExecuteCommand(mf, ""SET"", 2, args);

  /* make sure we can find the source file */
  if (!info->CAPI->GetSource(mf, argv[1])) {
    info->CAPI->SetError(mf, ""Source file could not be found!"");
    return 0;
  }

  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2234.cpp,"[6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 1, 474, 0, 0, 12, 12, 0, 0, 2, 112, 0, 0, 0, 0, 11, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 296, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 31, 0, 6, 6, 0, 0, 72, 0, 0, 72, 0, 179, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2234.cpp,63
second/download/CMake/CMake/CMake/Tests/LoadCommand/CMakeCommands/cmTestCommand.cpp,92,"sprintf(buffer, ""Shold be empty (source file name): [%s]"", cstr);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2235.cpp,"{
  char* file;
  char* str;
  char* srcs;
  const char* cstr;
  char buffer[1024];
  void* source_file;
  char* args[2];
  char* ccArgs[4];
  char* ccDep[1];
  char* ccOut[1];
  cmLoadedCommandInfo* info = (cmLoadedCommandInfo*)inf;

  cmVTKWrapTclData* cdata =
    (cmVTKWrapTclData*)malloc(sizeof(cmVTKWrapTclData));
  cdata->LibraryName = ""BOO"";
  cdata->Argc = argc;
  cdata->Argv = argv;
  info->CAPI->SetClientData(info, cdata);

  /* Now check and see if the value has been stored in the cache */
  /* already, if so use that value and don't look for the program */
  if (!info->CAPI->IsOn(mf, ""TEST_COMMAND_TEST1"")) {
    info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
    return 1;
  }

  info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
  cdata->LibraryName = ""HOO"";

  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE"", ""ON"",
                                 ""Test cache variable"", CM_CACHE_BOOL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE1"", """",
                                 ""Test cache variable 1"", CM_CACHE_PATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE2"", """",
                                 ""Test cache variable 2"", CM_CACHE_FILEPATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE3"", """",
                                 ""Test cache variable 3"", CM_CACHE_STRING);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE4"", """",
                                 ""Test cache variable 4"", CM_CACHE_INTERNAL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE5"", """",
                                 ""Test cache variable 5"", CM_CACHE_STATIC);

  file = info->CAPI->ExpandVariablesInString(mf, ""${CMAKE_COMMAND}"", 0, 0);

  str = info->CAPI->GetFilenameWithoutExtension(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->GetFilenamePath(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->Capitalized(""cmake"");
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);

  info->CAPI->DisplaySatus(mf, info->CAPI->GetProjectName(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentOutputDirectory(mf));
  sprintf(buffer, ""Cache version: %d.%d, CMake version: %d.%d"",
          info->CAPI->GetCacheMajorVersion(mf),
          info->CAPI->GetCacheMinorVersion(mf),
          info->CAPI->GetMajorVersion(mf), info->CAPI->GetMinorVersion(mf));
  info->CAPI->DisplaySatus(mf, buffer);
  if (info->CAPI->CommandExists(mf, ""SET"")) {
    info->CAPI->DisplaySatus(mf, ""Command SET exists"");
  }
  if (info->CAPI->CommandExists(mf, ""SET_FOO_BAR"")) {
    info->CAPI->SetError(mf, ""Command SET_FOO_BAR should not exists"");
    return 0;
  }
  info->CAPI->AddDefineFlag(mf, ""-DADDED_DEFINITION"");

  source_file = info->CAPI->CreateNewSourceFile(mf);
  cstr = info->CAPI->SourceFileGetSourceName(source_file);
  sprintf(buffer, ""Shold be empty (source file name): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  cstr = info->CAPI->SourceFileGetFullPath(source_file);
  sprintf(buffer, ""Should be empty (source file full path): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY"", ""unused old prop"",
                                       ""This property is no longer used"", 0);
  if (info->CAPI->SourceFileGetPropertyAsBool(source_file, ""SOME_PROPERTY"")) {
    info->CAPI->SetError(mf, ""Property SOME_PROPERTY should not be defined"");
    return 0;
  }
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY2"", ""nice prop"",
                                       ""This property is for testing."", 0);
  info->CAPI->SourceFileSetProperty(source_file, ""SOME_PROPERTY2"", ""HERE"");
  cstr = info->CAPI->SourceFileGetProperty(source_file, ""ABSTRACT"");
  sprintf(buffer, ""Should be 0 (source file abstract property): [%p]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);

  info->CAPI->DestroySourceFile(source_file);

  srcs = argv[2];
  info->CAPI->AddExecutable(mf, ""LoadedCommand"", 1, &srcs, 0);

  /* add customs commands to generate the source file */
  ccArgs[0] = ""-E"";
  ccArgs[1] = ""copy"";
  ccArgs[2] = argv[0];
  ccArgs[3] = argv[1];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommand(mf, ""LoadedCommand.cxx.in"", file, 4, ccArgs, 1,
                               ccDep, 1, ccOut, ""LoadedCommand"");

  ccArgs[2] = argv[1];
  ccArgs[3] = argv[2];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommandToOutput(mf, ccOut[0], file, 4, ccArgs, ccDep[0],
                                       0, 0);

  ccArgs[1] = ""echo"";
  ccArgs[2] = ""Build has finished"";
  info->CAPI->AddCustomCommandToTarget(mf, ""LoadedCommand"", file, 3, ccArgs,
                                       CM_POST_BUILD);

  info->CAPI->Free(file);

  args[0] = ""TEST_EXEC"";
  args[1] = ""TRUE"";

  /* code coverage */
  if (info->CAPI->GetTotalArgumentSize(2, args) != 13) {
    return 0;
  }
  info->CAPI->ExecuteCommand(mf, ""SET"", 2, args);

  /* make sure we can find the source file */
  if (!info->CAPI->GetSource(mf, argv[1])) {
    info->CAPI->SetError(mf, ""Source file could not be found!"");
    return 0;
  }

  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2235.cpp,"[6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 1, 474, 0, 0, 12, 12, 0, 0, 2, 112, 0, 0, 0, 0, 11, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 296, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 31, 0, 6, 6, 0, 0, 72, 0, 0, 72, 0, 179, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2235.cpp,79
second/download/CMake/CMake/CMake/Tests/LoadCommand/CMakeCommands/cmTestCommand.cpp,95,"sprintf(buffer, ""Should be empty (source file full path): [%s]"", cstr);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2236.cpp,"{
  char* file;
  char* str;
  char* srcs;
  const char* cstr;
  char buffer[1024];
  void* source_file;
  char* args[2];
  char* ccArgs[4];
  char* ccDep[1];
  char* ccOut[1];
  cmLoadedCommandInfo* info = (cmLoadedCommandInfo*)inf;

  cmVTKWrapTclData* cdata =
    (cmVTKWrapTclData*)malloc(sizeof(cmVTKWrapTclData));
  cdata->LibraryName = ""BOO"";
  cdata->Argc = argc;
  cdata->Argv = argv;
  info->CAPI->SetClientData(info, cdata);

  /* Now check and see if the value has been stored in the cache */
  /* already, if so use that value and don't look for the program */
  if (!info->CAPI->IsOn(mf, ""TEST_COMMAND_TEST1"")) {
    info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
    return 1;
  }

  info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
  cdata->LibraryName = ""HOO"";

  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE"", ""ON"",
                                 ""Test cache variable"", CM_CACHE_BOOL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE1"", """",
                                 ""Test cache variable 1"", CM_CACHE_PATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE2"", """",
                                 ""Test cache variable 2"", CM_CACHE_FILEPATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE3"", """",
                                 ""Test cache variable 3"", CM_CACHE_STRING);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE4"", """",
                                 ""Test cache variable 4"", CM_CACHE_INTERNAL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE5"", """",
                                 ""Test cache variable 5"", CM_CACHE_STATIC);

  file = info->CAPI->ExpandVariablesInString(mf, ""${CMAKE_COMMAND}"", 0, 0);

  str = info->CAPI->GetFilenameWithoutExtension(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->GetFilenamePath(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->Capitalized(""cmake"");
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);

  info->CAPI->DisplaySatus(mf, info->CAPI->GetProjectName(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentOutputDirectory(mf));
  sprintf(buffer, ""Cache version: %d.%d, CMake version: %d.%d"",
          info->CAPI->GetCacheMajorVersion(mf),
          info->CAPI->GetCacheMinorVersion(mf),
          info->CAPI->GetMajorVersion(mf), info->CAPI->GetMinorVersion(mf));
  info->CAPI->DisplaySatus(mf, buffer);
  if (info->CAPI->CommandExists(mf, ""SET"")) {
    info->CAPI->DisplaySatus(mf, ""Command SET exists"");
  }
  if (info->CAPI->CommandExists(mf, ""SET_FOO_BAR"")) {
    info->CAPI->SetError(mf, ""Command SET_FOO_BAR should not exists"");
    return 0;
  }
  info->CAPI->AddDefineFlag(mf, ""-DADDED_DEFINITION"");

  source_file = info->CAPI->CreateNewSourceFile(mf);
  cstr = info->CAPI->SourceFileGetSourceName(source_file);
  sprintf(buffer, ""Shold be empty (source file name): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  cstr = info->CAPI->SourceFileGetFullPath(source_file);
  sprintf(buffer, ""Should be empty (source file full path): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY"", ""unused old prop"",
                                       ""This property is no longer used"", 0);
  if (info->CAPI->SourceFileGetPropertyAsBool(source_file, ""SOME_PROPERTY"")) {
    info->CAPI->SetError(mf, ""Property SOME_PROPERTY should not be defined"");
    return 0;
  }
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY2"", ""nice prop"",
                                       ""This property is for testing."", 0);
  info->CAPI->SourceFileSetProperty(source_file, ""SOME_PROPERTY2"", ""HERE"");
  cstr = info->CAPI->SourceFileGetProperty(source_file, ""ABSTRACT"");
  sprintf(buffer, ""Should be 0 (source file abstract property): [%p]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);

  info->CAPI->DestroySourceFile(source_file);

  srcs = argv[2];
  info->CAPI->AddExecutable(mf, ""LoadedCommand"", 1, &srcs, 0);

  /* add customs commands to generate the source file */
  ccArgs[0] = ""-E"";
  ccArgs[1] = ""copy"";
  ccArgs[2] = argv[0];
  ccArgs[3] = argv[1];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommand(mf, ""LoadedCommand.cxx.in"", file, 4, ccArgs, 1,
                               ccDep, 1, ccOut, ""LoadedCommand"");

  ccArgs[2] = argv[1];
  ccArgs[3] = argv[2];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommandToOutput(mf, ccOut[0], file, 4, ccArgs, ccDep[0],
                                       0, 0);

  ccArgs[1] = ""echo"";
  ccArgs[2] = ""Build has finished"";
  info->CAPI->AddCustomCommandToTarget(mf, ""LoadedCommand"", file, 3, ccArgs,
                                       CM_POST_BUILD);

  info->CAPI->Free(file);

  args[0] = ""TEST_EXEC"";
  args[1] = ""TRUE"";

  /* code coverage */
  if (info->CAPI->GetTotalArgumentSize(2, args) != 13) {
    return 0;
  }
  info->CAPI->ExecuteCommand(mf, ""SET"", 2, args);

  /* make sure we can find the source file */
  if (!info->CAPI->GetSource(mf, argv[1])) {
    info->CAPI->SetError(mf, ""Source file could not be found!"");
    return 0;
  }

  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2236.cpp,"[6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 1, 474, 0, 0, 12, 12, 0, 0, 2, 112, 0, 0, 0, 0, 11, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 296, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 31, 0, 6, 6, 0, 0, 72, 0, 0, 72, 0, 179, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2236.cpp,82
second/download/CMake/CMake/CMake/Tests/LoadCommand/CMakeCommands/cmTestCommand.cpp,107,"sprintf(buffer, ""Should be 0 (source file abstract property): [%p]"", cstr);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2237.cpp,"{
  char* file;
  char* str;
  char* srcs;
  const char* cstr;
  char buffer[1024];
  void* source_file;
  char* args[2];
  char* ccArgs[4];
  char* ccDep[1];
  char* ccOut[1];
  cmLoadedCommandInfo* info = (cmLoadedCommandInfo*)inf;

  cmVTKWrapTclData* cdata =
    (cmVTKWrapTclData*)malloc(sizeof(cmVTKWrapTclData));
  cdata->LibraryName = ""BOO"";
  cdata->Argc = argc;
  cdata->Argv = argv;
  info->CAPI->SetClientData(info, cdata);

  /* Now check and see if the value has been stored in the cache */
  /* already, if so use that value and don't look for the program */
  if (!info->CAPI->IsOn(mf, ""TEST_COMMAND_TEST1"")) {
    info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
    return 1;
  }

  info->CAPI->AddDefinition(mf, ""TEST_DEF"", ""HOO"");
  cdata->LibraryName = ""HOO"";

  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE"", ""ON"",
                                 ""Test cache variable"", CM_CACHE_BOOL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE1"", """",
                                 ""Test cache variable 1"", CM_CACHE_PATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE2"", """",
                                 ""Test cache variable 2"", CM_CACHE_FILEPATH);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE3"", """",
                                 ""Test cache variable 3"", CM_CACHE_STRING);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE4"", """",
                                 ""Test cache variable 4"", CM_CACHE_INTERNAL);
  info->CAPI->AddCacheDefinition(mf, ""SOME_CACHE_VARIABLE5"", """",
                                 ""Test cache variable 5"", CM_CACHE_STATIC);

  file = info->CAPI->ExpandVariablesInString(mf, ""${CMAKE_COMMAND}"", 0, 0);

  str = info->CAPI->GetFilenameWithoutExtension(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->GetFilenamePath(file);
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);
  str = info->CAPI->Capitalized(""cmake"");
  info->CAPI->DisplaySatus(mf, str);
  info->CAPI->Free(str);

  info->CAPI->DisplaySatus(mf, info->CAPI->GetProjectName(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetHomeOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetStartOutputDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentDirectory(mf));
  info->CAPI->DisplaySatus(mf, info->CAPI->GetCurrentOutputDirectory(mf));
  sprintf(buffer, ""Cache version: %d.%d, CMake version: %d.%d"",
          info->CAPI->GetCacheMajorVersion(mf),
          info->CAPI->GetCacheMinorVersion(mf),
          info->CAPI->GetMajorVersion(mf), info->CAPI->GetMinorVersion(mf));
  info->CAPI->DisplaySatus(mf, buffer);
  if (info->CAPI->CommandExists(mf, ""SET"")) {
    info->CAPI->DisplaySatus(mf, ""Command SET exists"");
  }
  if (info->CAPI->CommandExists(mf, ""SET_FOO_BAR"")) {
    info->CAPI->SetError(mf, ""Command SET_FOO_BAR should not exists"");
    return 0;
  }
  info->CAPI->AddDefineFlag(mf, ""-DADDED_DEFINITION"");

  source_file = info->CAPI->CreateNewSourceFile(mf);
  cstr = info->CAPI->SourceFileGetSourceName(source_file);
  sprintf(buffer, ""Shold be empty (source file name): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  cstr = info->CAPI->SourceFileGetFullPath(source_file);
  sprintf(buffer, ""Should be empty (source file full path): [%s]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY"", ""unused old prop"",
                                       ""This property is no longer used"", 0);
  if (info->CAPI->SourceFileGetPropertyAsBool(source_file, ""SOME_PROPERTY"")) {
    info->CAPI->SetError(mf, ""Property SOME_PROPERTY should not be defined"");
    return 0;
  }
  info->CAPI->DefineSourceFileProperty(mf, ""SOME_PROPERTY2"", ""nice prop"",
                                       ""This property is for testing."", 0);
  info->CAPI->SourceFileSetProperty(source_file, ""SOME_PROPERTY2"", ""HERE"");
  cstr = info->CAPI->SourceFileGetProperty(source_file, ""ABSTRACT"");
  sprintf(buffer, ""Should be 0 (source file abstract property): [%p]"", cstr);
  info->CAPI->DisplaySatus(mf, buffer);

  info->CAPI->DestroySourceFile(source_file);

  srcs = argv[2];
  info->CAPI->AddExecutable(mf, ""LoadedCommand"", 1, &srcs, 0);

  /* add customs commands to generate the source file */
  ccArgs[0] = ""-E"";
  ccArgs[1] = ""copy"";
  ccArgs[2] = argv[0];
  ccArgs[3] = argv[1];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommand(mf, ""LoadedCommand.cxx.in"", file, 4, ccArgs, 1,
                               ccDep, 1, ccOut, ""LoadedCommand"");

  ccArgs[2] = argv[1];
  ccArgs[3] = argv[2];
  ccDep[0] = ccArgs[2];
  ccOut[0] = ccArgs[3];
  info->CAPI->AddCustomCommandToOutput(mf, ccOut[0], file, 4, ccArgs, ccDep[0],
                                       0, 0);

  ccArgs[1] = ""echo"";
  ccArgs[2] = ""Build has finished"";
  info->CAPI->AddCustomCommandToTarget(mf, ""LoadedCommand"", file, 3, ccArgs,
                                       CM_POST_BUILD);

  info->CAPI->Free(file);

  args[0] = ""TEST_EXEC"";
  args[1] = ""TRUE"";

  /* code coverage */
  if (info->CAPI->GetTotalArgumentSize(2, args) != 13) {
    return 0;
  }
  info->CAPI->ExecuteCommand(mf, ""SET"", 2, args);

  /* make sure we can find the source file */
  if (!info->CAPI->GetSource(mf, argv[1])) {
    info->CAPI->SetError(mf, ""Source file could not be found!"");
    return 0;
  }

  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2237.cpp,"[6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 1, 474, 0, 0, 12, 12, 0, 0, 2, 112, 0, 0, 0, 0, 11, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 296, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 31, 0, 6, 6, 0, 0, 72, 0, 0, 72, 0, 179, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2237.cpp,94
second/download/CMake/CMake/CMake/Tests/LoadCommand/CMakeCommands/cmTestCommand.cpp,164,"fprintf(stderr, ""*** Failed LOADED COMMAND Final Pass\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2238.cpp,"{
    fprintf(stderr, ""*** Failed LOADED COMMAND Final Pass\n"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2238.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2238.cpp,7
second/download/CMake/CMake/CMake/Tests/Wrapping/qtwrappingmain.cpp,20,"printf(""Environment variable DISPLAY is not set. I will pretend like the ""
           ""test passed, but you should really set it.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2239.cpp,"{
    printf(""Environment variable DISPLAY is not set. I will pretend like the ""
           ""test passed, but you should really set it.\n"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2239.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2239.cpp,12
second/download/CMake/CMake/CMake/Tests/Wrapping/Wrap.cpp,10,"printf(""Wrap creating \""%s\""\n"", argv[argc - 1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2240.cpp,"{
  FILE* fout = fopen(argv[argc - 1], ""w"");
  printf(""Wrap creating \""%s\""\n"", argv[argc - 1]);
  if (fout) {
    fprintf(fout, ""int foo() { return 0; }\n"");
    fclose(fout);
  } else {
    return -1;
  }
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2240.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 1, 1, 0, 0, 1, 7, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 1, 0, 4, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2240.cpp,10
second/download/CMake/CMake/CMake/Tests/Wrapping/Wrap.cpp,12,"fprintf(fout, ""int foo() { return 0; }\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2241.cpp,"{
    fprintf(fout, ""int foo() { return 0; }\n"");
    fclose(fout);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2241.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2241.cpp,12
second/download/CMake/CMake/CMake/Tests/Wrapping/fakefluid.cpp,6,"fprintf(stdout, ""fakefluid is creating file \""%s\""\n"", av[i + 1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2242.cpp,"{
      fprintf(stdout, ""fakefluid is creating file \""%s\""\n"", av[i + 1]);
      FILE* file = fopen(av[i + 1], ""w"");
      fprintf(file, ""// Solaris needs non-empty content so ensure\n""
                    ""// we have at least one symbol\n""
                    ""int Solaris_requires_a_symbol_here = 0;\n"");
      fclose(file);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2242.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 1, 1, 0, 0, 1, 7, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2242.cpp,4
second/download/CMake/CMake/CMake/Tests/Wrapping/fakefluid.cpp,8,"fprintf(file, ""// Solaris needs non-empty content so ensure\n""
                    ""// we have at least one symbol\n""
                    ""int Solaris_requires_a_symbol_here = 0;\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2243.cpp,"{
      fprintf(stdout, ""fakefluid is creating file \""%s\""\n"", av[i + 1]);
      FILE* file = fopen(av[i + 1], ""w"");
      fprintf(file, ""// Solaris needs non-empty content so ensure\n""
                    ""// we have at least one symbol\n""
                    ""int Solaris_requires_a_symbol_here = 0;\n"");
      fclose(file);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2243.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 1, 1, 0, 0, 1, 7, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2243.cpp,6
second/download/CMake/CMake/CMake/Tests/JCTest/TestTime.cpp,9,"printf(""%f"", d);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2244.cpp,"{
  float d = 10.0;
  for (int i = 0; i < atoi(av[1]); i++) {
    d *= .2;
  }
  printf(""%f"", d);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2244.cpp,"[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 1, 2, 0, 0, 3, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2244.cpp,6
second/download/CMake/CMake/CMake/Tests/ComplexOneConfig/Library/testConly.cpp,6,"printf(""TEST_C_FLAGS failed\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2245.cpp,"{
#ifndef TEST_C_FLAGS
  printf(""TEST_C_FLAGS failed\n"");
  return 0;
#else
  printf(""Passed: TEST_C_FLAGS passed\n"");
#endif
  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2245.cpp,"[0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 2, 0, 2, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2245.cpp,3
second/download/CMake/CMake/CMake/Tests/ComplexOneConfig/Library/testConly.cpp,9,"printf(""Passed: TEST_C_FLAGS passed\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2246.cpp,"{
#ifndef TEST_C_FLAGS
  printf(""TEST_C_FLAGS failed\n"");
  return 0;
#else
  printf(""Passed: TEST_C_FLAGS passed\n"");
#endif
  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2246.cpp,"[0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 2, 0, 2, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2246.cpp,6
second/download/CMake/CMake/CMake/Tests/ComplexOneConfig/Library/create_file.cpp,6,"fprintf(stderr, ""Missing name of file to create.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2247.cpp,"{
    fprintf(stderr, ""Missing name of file to create.\n"");
    return EXIT_FAILURE;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2247.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2247.cpp,3
second/download/CMake/CMake/CMake/Tests/ComplexOneConfig/Library/create_file.cpp,12,"fprintf(stderr, ""Unable to open %s for writing!\n"", argv[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2248.cpp,"{
    fprintf(stderr, ""Unable to open %s for writing!\n"", argv[1]);
    return EXIT_FAILURE;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2248.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2248.cpp,9
second/download/CMake/CMake/CMake/Tests/ComplexOneConfig/Library/create_file.cpp,17,"fprintf(stderr, ""Unable to close %s!\n"", argv[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2249.cpp,"{
    fprintf(stderr, ""Unable to close %s!\n"", argv[1]);
    return EXIT_FAILURE;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2249.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2249.cpp,14
second/download/CMake/CMake/CMake/Tests/ComplexOneConfig/Library/create_file.cpp,21,"fprintf(stdout, "">> Creating %s!\n"", argv[1]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2250.cpp,"{
  if (argc < 2) {
    fprintf(stderr, ""Missing name of file to create.\n"");
    return EXIT_FAILURE;
  }

  FILE* stream = fopen(argv[1], ""w"");
  if (stream == NULL) {
    fprintf(stderr, ""Unable to open %s for writing!\n"", argv[1]);
    return EXIT_FAILURE;
  }

  if (fclose(stream)) {
    fprintf(stderr, ""Unable to close %s!\n"", argv[1]);
    return EXIT_FAILURE;
  }

  fprintf(stdout, "">> Creating %s!\n"", argv[1]);

  return EXIT_SUCCESS;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2250.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 28, 0, 0, 1, 1, 0, 0, 1, 10, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 3, 0, 0, 6, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2250.cpp,18
second/download/CMake/CMake/CMake/Tests/CustomCommand/generator.cpp,5,"fprintf(stderr, ""Usage: %s <file>\n"", argv[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2251.cpp,"{
    fprintf(stderr, ""Usage: %s <file>\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2251.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2251.cpp,3
second/download/CMake/CMake/CMake/Tests/CustomCommand/generator.cpp,10,"fprintf(fp, ""int generated() { return 3; }\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2252.cpp,"{
  if (argc < 2) {
    fprintf(stderr, ""Usage: %s <file>\n"", argv[0]);
    return 1;
  }
  FILE* fp = fopen(argv[1], ""w"");
#ifdef GENERATOR_EXTERN
  fprintf(fp, ""int generated() { return 3; }\n"");
#else
  fprintf(fp, ""extern int gen_redirect(void);\n"");
  fprintf(fp, ""int generated() { return gen_redirect(); }\n"");
#endif
  fclose(fp);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2252.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 1, 1, 0, 0, 1, 10, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 1, 0, 6, 0, 0, 5, 0, 12, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2252.cpp,8
second/download/CMake/CMake/CMake/Tests/CustomCommand/generator.cpp,12,"fprintf(fp, ""extern int gen_redirect(void);\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2253.cpp,"{
  if (argc < 2) {
    fprintf(stderr, ""Usage: %s <file>\n"", argv[0]);
    return 1;
  }
  FILE* fp = fopen(argv[1], ""w"");
#ifdef GENERATOR_EXTERN
  fprintf(fp, ""int generated() { return 3; }\n"");
#else
  fprintf(fp, ""extern int gen_redirect(void);\n"");
  fprintf(fp, ""int generated() { return gen_redirect(); }\n"");
#endif
  fclose(fp);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2253.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 1, 1, 0, 0, 1, 10, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 1, 0, 6, 0, 0, 5, 0, 12, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2253.cpp,10
second/download/CMake/CMake/CMake/Tests/CustomCommand/generator.cpp,13,"fprintf(fp, ""int generated() { return gen_redirect(); }\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2254.cpp,"{
  if (argc < 2) {
    fprintf(stderr, ""Usage: %s <file>\n"", argv[0]);
    return 1;
  }
  FILE* fp = fopen(argv[1], ""w"");
#ifdef GENERATOR_EXTERN
  fprintf(fp, ""int generated() { return 3; }\n"");
#else
  fprintf(fp, ""extern int gen_redirect(void);\n"");
  fprintf(fp, ""int generated() { return gen_redirect(); }\n"");
#endif
  fclose(fp);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2254.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 1, 1, 0, 0, 1, 10, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 1, 0, 6, 0, 0, 5, 0, 12, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2254.cpp,11
second/download/CMake/CMake/CMake/Tests/CustomCommand/wrapper.cpp,6,"fprintf(stderr, ""Usage: %s <file1> <file2>\n"", argv[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2255.cpp,"{
    fprintf(stderr, ""Usage: %s <file1> <file2>\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2255.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2255.cpp,3
second/download/CMake/CMake/CMake/Tests/CustomCommand/wrapper.cpp,10,"fprintf(fp, ""extern int wrapped_help();\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2256.cpp,"{
  if (argc < 3) {
    fprintf(stderr, ""Usage: %s <file1> <file2>\n"", argv[0]);
    return 1;
  }
  FILE* fp = fopen(argv[1], ""w"");
  fprintf(fp, ""extern int wrapped_help();\n"");
  fprintf(fp, ""int wrapped() { return wrapped_help(); }\n"");
  fclose(fp);
  fp = fopen(argv[2], ""w"");
  fprintf(fp, ""int wrapped_help() { return 5; }\n"");
  fclose(fp);
#ifdef CMAKE_INTDIR
  const char* cfg = (argc >= 4) ? argv[3] : """";
  if (strcmp(cfg, CMAKE_INTDIR) != 0) {
    fprintf(stderr, ""Did not receive expected configuration argument:\n""
                    ""  expected ["" CMAKE_INTDIR ""]\n""
                    ""  received [%s]\n"",
            cfg);
    return 1;
  }
#endif
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2256.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 1, 37, 0, 0, 2, 2, 0, 0, 2, 21, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 3, 3, 1, 0, 10, 0, 0, 8, 0, 20, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2256.cpp,7
second/download/CMake/CMake/CMake/Tests/CustomCommand/wrapper.cpp,11,"fprintf(fp, ""int wrapped() { return wrapped_help(); }\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2257.cpp,"{
  if (argc < 3) {
    fprintf(stderr, ""Usage: %s <file1> <file2>\n"", argv[0]);
    return 1;
  }
  FILE* fp = fopen(argv[1], ""w"");
  fprintf(fp, ""extern int wrapped_help();\n"");
  fprintf(fp, ""int wrapped() { return wrapped_help(); }\n"");
  fclose(fp);
  fp = fopen(argv[2], ""w"");
  fprintf(fp, ""int wrapped_help() { return 5; }\n"");
  fclose(fp);
#ifdef CMAKE_INTDIR
  const char* cfg = (argc >= 4) ? argv[3] : """";
  if (strcmp(cfg, CMAKE_INTDIR) != 0) {
    fprintf(stderr, ""Did not receive expected configuration argument:\n""
                    ""  expected ["" CMAKE_INTDIR ""]\n""
                    ""  received [%s]\n"",
            cfg);
    return 1;
  }
#endif
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2257.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 1, 37, 0, 0, 2, 2, 0, 0, 2, 21, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 3, 3, 1, 0, 10, 0, 0, 8, 0, 20, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2257.cpp,8
second/download/CMake/CMake/CMake/Tests/CustomCommand/wrapper.cpp,14,"fprintf(fp, ""int wrapped_help() { return 5; }\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2258.cpp,"{
  if (argc < 3) {
    fprintf(stderr, ""Usage: %s <file1> <file2>\n"", argv[0]);
    return 1;
  }
  FILE* fp = fopen(argv[1], ""w"");
  fprintf(fp, ""extern int wrapped_help();\n"");
  fprintf(fp, ""int wrapped() { return wrapped_help(); }\n"");
  fclose(fp);
  fp = fopen(argv[2], ""w"");
  fprintf(fp, ""int wrapped_help() { return 5; }\n"");
  fclose(fp);
#ifdef CMAKE_INTDIR
  const char* cfg = (argc >= 4) ? argv[3] : """";
  if (strcmp(cfg, CMAKE_INTDIR) != 0) {
    fprintf(stderr, ""Did not receive expected configuration argument:\n""
                    ""  expected ["" CMAKE_INTDIR ""]\n""
                    ""  received [%s]\n"",
            cfg);
    return 1;
  }
#endif
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2258.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 1, 37, 0, 0, 2, 2, 0, 0, 2, 21, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 3, 3, 1, 0, 10, 0, 0, 8, 0, 20, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2258.cpp,11
second/download/CMake/CMake/CMake/Tests/CustomCommand/wrapper.cpp,19,"fprintf(stderr, ""Did not receive expected configuration argument:\n""
                    ""  expected ["" CMAKE_INTDIR ""]\n""
                    ""  received [%s]\n"",
            cfg);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2259.cpp,"{
    fprintf(stderr, ""Did not receive expected configuration argument:\n""
                    ""  expected ["" CMAKE_INTDIR ""]\n""
                    ""  received [%s]\n"",
            cfg);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2259.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2259.cpp,16
second/download/CMake/CMake/CMake/Tests/FindOpenGL/Test/main.cpp,14,"printf(""&glGetString = %p\n"", &glGetString);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2260.cpp,"{
  /* Reference a GL symbol without requiring a context at runtime.  */
  printf(""&glGetString = %p\n"", &glGetString);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2260.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2260.cpp,3
second/download/CMake/CMake/CMake/Tests/CTestTestParallel/lockFile.cpp,13,"fprintf(file, ""%s"", ""x"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2261.cpp,"{
    fprintf(file, ""%s"", ""x"");
    fflush(file);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2261.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2261.cpp,8
second/download/CMake/CMake/CMake/Tests/FunctionTest/functionTest.cpp,4,"printf(""Running command: %s with %d arguments\n"", argv[0], argc);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2262.cpp,"{
  printf(""Running command: %s with %d arguments\n"", argv[0], argc);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2262.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2262.cpp,2
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,12,"fprintf(stderr, ""FILE_STRING has wrong value in C [%s]\n"", FILE_STRING);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2263.cpp,"{
    fprintf(stderr, ""FILE_STRING has wrong value in C [%s]\n"", FILE_STRING);
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2263.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2263.cpp,4
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,16,"fprintf(stderr, ""TARGET_STRING has wrong value in C [%s]\n"",
            TARGET_STRING);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2264.cpp,"{
    fprintf(stderr, ""TARGET_STRING has wrong value in C [%s]\n"",
            TARGET_STRING);
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2264.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2264.cpp,8
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,24,"fprintf(stderr, ""FILE_EXPR did not work in C [%s]\n"",
              TO_STRING(FILE_EXPR));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2265.cpp,"{
      fprintf(stderr, ""FILE_EXPR did not work in C [%s]\n"",
              TO_STRING(FILE_EXPR));
      result = 0;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2265.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2265.cpp,16
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,29,"fprintf(stderr, ""TARGET_EXPR did not work in C [%s]\n"",
              TO_STRING(FILE_EXPR));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2266.cpp,"{
      fprintf(stderr, ""TARGET_EXPR did not work in C [%s]\n"",
              TO_STRING(FILE_EXPR));
      result = 0;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2266.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2266.cpp,21
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,37,"fprintf(stderr, ""FILE_DEF_DEBUG should not be defined in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2267.cpp,"{
    fprintf(stderr, ""FILE_DEF_DEBUG should not be defined in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2267.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2267.cpp,29
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,43,"fprintf(stderr, ""TARGET_DEF_DEBUG should not be defined in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2268.cpp,"{
    fprintf(stderr, ""TARGET_DEF_DEBUG should not be defined in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2268.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2268.cpp,35
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,49,"fprintf(stderr, ""DIRECTORY_DEF_DEBUG should not be defined in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2269.cpp,"{
    fprintf(stderr, ""DIRECTORY_DEF_DEBUG should not be defined in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2269.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2269.cpp,41
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,56,"fprintf(stderr, ""FILE_DEF_RELEASE should be defined in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2270.cpp,"{
    fprintf(stderr, ""FILE_DEF_RELEASE should be defined in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2270.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2270.cpp,48
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,63,"fprintf(stderr, ""TARGET_DEF_RELEASE should be defined in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2271.cpp,"{
    fprintf(stderr, ""TARGET_DEF_RELEASE should be defined in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2271.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2271.cpp,55
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,69,"fprintf(stderr, ""DIRECTORY_DEF_RELEASE should be defined in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2272.cpp,"{
    fprintf(stderr, ""DIRECTORY_DEF_RELEASE should be defined in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2272.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2272.cpp,61
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,78,"fprintf(stderr, ""FILE_DEF_DEBUG should be defined in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2273.cpp,"{
    fprintf(stderr, ""FILE_DEF_DEBUG should be defined in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2273.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2273.cpp,70
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,85,"fprintf(stderr, ""TARGET_DEF_DEBUG should be defined in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2274.cpp,"{
    fprintf(stderr, ""TARGET_DEF_DEBUG should be defined in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2274.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2274.cpp,77
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,91,"fprintf(stderr, ""DIRECTORY_DEF_DEBUG should be defined in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2275.cpp,"{
    fprintf(stderr, ""DIRECTORY_DEF_DEBUG should be defined in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2275.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2275.cpp,83
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,97,"fprintf(stderr, ""FILE_DEF_RELEASE should not be defined in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2276.cpp,"{
    fprintf(stderr, ""FILE_DEF_RELEASE should not be defined in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2276.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2276.cpp,89
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,103,"fprintf(stderr, ""TARGET_DEF_RELEASE should not be defined in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2277.cpp,"{
    fprintf(stderr, ""TARGET_DEF_RELEASE should not be defined in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2277.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2277.cpp,95
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,109,"fprintf(stderr, ""DIRECTORY_DEF_RELEASE should not be defined in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2278.cpp,"{
    fprintf(stderr, ""DIRECTORY_DEF_RELEASE should not be defined in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2278.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2278.cpp,101
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,118,"fprintf(stderr, ""FILE_DEF_DEBUG and TARGET_DEF_DEBUG inconsistent in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2279.cpp,"{
    fprintf(stderr, ""FILE_DEF_DEBUG and TARGET_DEF_DEBUG inconsistent in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2279.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2279.cpp,110
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,125,"fprintf(stderr, ""DEBUG and RELEASE definitions inconsistent in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2280.cpp,"{
    fprintf(stderr, ""DEBUG and RELEASE definitions inconsistent in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2280.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2280.cpp,117
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,134,"fprintf(stderr,
            ""FILE_DEF_RELEASE and TARGET_DEF_RELEASE inconsistent in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2281.cpp,"{
    fprintf(stderr,
            ""FILE_DEF_RELEASE and TARGET_DEF_RELEASE inconsistent in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2281.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2281.cpp,126
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,142,"fprintf(stderr, ""RELEASE and DEBUG definitions inconsistent in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2282.cpp,"{
    fprintf(stderr, ""RELEASE and DEBUG definitions inconsistent in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2282.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2282.cpp,134
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,149,"fprintf(stderr, ""FILE_PATH_DEF not defined in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2283.cpp,"{
    fprintf(stderr, ""FILE_PATH_DEF not defined in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2283.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2283.cpp,141
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,155,"fprintf(stderr, ""TARGET_PATH_DEF not defined in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2284.cpp,"{
    fprintf(stderr, ""TARGET_PATH_DEF not defined in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2284.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2284.cpp,147
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,161,"fprintf(stderr, ""FILE_DEF not defined in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2285.cpp,"{
    fprintf(stderr, ""FILE_DEF not defined in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2285.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2285.cpp,153
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,167,"fprintf(stderr, ""TARGET_DEF not defined in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2286.cpp,"{
    fprintf(stderr, ""TARGET_DEF not defined in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2286.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2286.cpp,159
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,173,"fprintf(stderr, ""DIRECTORY_DEF not defined in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2287.cpp,"{
    fprintf(stderr, ""DIRECTORY_DEF not defined in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2287.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2287.cpp,165
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,179,"fprintf(stderr, ""OLD_DEF not defined in C\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2288.cpp,"{
    fprintf(stderr, ""OLD_DEF not defined in C\n"");
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2288.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2288.cpp,171
second/download/CMake/CMake/CMake/Tests/Preprocess/preprocess.cpp,185,"fprintf(stderr, ""OLD_EXPR id not work in C [%s]\n"", TO_STRING(OLD_EXPR));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2289.cpp,"{
    fprintf(stderr, ""OLD_EXPR id not work in C [%s]\n"", TO_STRING(OLD_EXPR));
    result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2289.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2289.cpp,177
second/download/CMake/CMake/CMake/Tests/Tutorial/Step5/tutorial.cpp,13,"fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2290.cpp,"{
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2290.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2290.cpp,3
second/download/CMake/CMake/CMake/Tests/Tutorial/Step5/tutorial.cpp,15,"fprintf(stdout, ""Usage: %s number\n"", argv[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2291.cpp,"{
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2291.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2291.cpp,5
second/download/CMake/CMake/CMake/Tests/Tutorial/Step5/tutorial.cpp,30,"fprintf(stdout, ""The square root of %g is %g\n"", inputValue, outputValue);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2292.cpp,"{
  if (argc < 2) {
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }

  double inputValue = atof(argv[1]);
  double outputValue = 0;

  if (inputValue >= 0) {
#ifdef USE_MYMATH
    outputValue = mysqrt(inputValue);
#else
    outputValue = sqrt(inputValue);
#endif
  }

  fprintf(stdout, ""The square root of %g is %g\n"", inputValue, outputValue);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2292.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 30, 0, 0, 2, 2, 0, 0, 2, 11, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 2, 2, 1, 0, 6, 0, 0, 5, 0, 15, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2292.cpp,20
second/download/CMake/CMake/CMake/Tests/Tutorial/Step5/MathFunctions/mysqrt.cpp,35,"fprintf(stdout, ""Computing sqrt of %g to be %g\n"", x, result);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2293.cpp,"{
    if (result <= 0) {
      result = 0.1;
    }
    delta = x - (result * result);
    result = result + 0.5 * delta / result;
    fprintf(stdout, ""Computing sqrt of %g to be %g\n"", x, result);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2293.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2293.cpp,25
second/download/CMake/CMake/CMake/Tests/Tutorial/Step5/MathFunctions/MakeTable.cpp,21,"fprintf(fout, ""double sqrtTable[] = {\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2294.cpp,"{
  int i;
  double result;

  // make sure we have enough arguments
  if (argc < 2) {
    return 1;
  }

  // open the output file
  FILE* fout = fopen(argv[1], ""w"");
  if (!fout) {
    return 1;
  }

  // create a source file with a table of square roots
  fprintf(fout, ""double sqrtTable[] = {\n"");
  for (i = 0; i < 10; ++i) {
    result = sqrt(static_cast<double>(i));
    fprintf(fout, ""%g,\n"", result);
  }

  // close the table with a zero
  fprintf(fout, ""0};\n"");
  fclose(fout);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2294.cpp,"[2, 0, 1, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 27, 0, 0, 3, 3, 0, 0, 2, 11, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 28, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 3, 2, 0, 0, 8, 0, 0, 5, 0, 13, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2294.cpp,17
second/download/CMake/CMake/CMake/Tests/Tutorial/Step5/MathFunctions/MakeTable.cpp,24,"fprintf(fout, ""%g,\n"", result);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2295.cpp,"{
    result = sqrt(static_cast<double>(i));
    fprintf(fout, ""%g,\n"", result);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2295.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2295.cpp,20
second/download/CMake/CMake/CMake/Tests/Tutorial/Step5/MathFunctions/MakeTable.cpp,28,"fprintf(fout, ""0};\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2296.cpp,"{
  int i;
  double result;

  // make sure we have enough arguments
  if (argc < 2) {
    return 1;
  }

  // open the output file
  FILE* fout = fopen(argv[1], ""w"");
  if (!fout) {
    return 1;
  }

  // create a source file with a table of square roots
  fprintf(fout, ""double sqrtTable[] = {\n"");
  for (i = 0; i < 10; ++i) {
    result = sqrt(static_cast<double>(i));
    fprintf(fout, ""%g,\n"", result);
  }

  // close the table with a zero
  fprintf(fout, ""0};\n"");
  fclose(fout);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2296.cpp,"[2, 0, 1, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 27, 0, 0, 3, 3, 0, 0, 2, 11, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 28, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 3, 2, 0, 0, 8, 0, 0, 5, 0, 13, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2296.cpp,24
second/download/CMake/CMake/CMake/Tests/Tutorial/Step3/tutorial.cpp,13,"fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2297.cpp,"{
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2297.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2297.cpp,3
second/download/CMake/CMake/CMake/Tests/Tutorial/Step3/tutorial.cpp,15,"fprintf(stdout, ""Usage: %s number\n"", argv[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2298.cpp,"{
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2298.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2298.cpp,5
second/download/CMake/CMake/CMake/Tests/Tutorial/Step3/tutorial.cpp,30,"fprintf(stdout, ""The square root of %g is %g\n"", inputValue, outputValue);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2299.cpp,"{
  if (argc < 2) {
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }

  double inputValue = atof(argv[1]);
  double outputValue = 0;

  if (inputValue >= 0) {
#ifdef USE_MYMATH
    outputValue = mysqrt(inputValue);
#else
    outputValue = sqrt(inputValue);
#endif
  }

  fprintf(stdout, ""The square root of %g is %g\n"", inputValue, outputValue);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2299.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 30, 0, 0, 2, 2, 0, 0, 2, 11, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 2, 2, 1, 0, 6, 0, 0, 5, 0, 15, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2299.cpp,20
second/download/CMake/CMake/CMake/Tests/Tutorial/Step3/MathFunctions/mysqrt.cpp,22,"fprintf(stdout, ""Computing sqrt of %g to be %g\n"", x, result);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2300.cpp,"{
    if (result <= 0) {
      result = 0.1;
    }
    delta = x - (result * result);
    result = result + 0.5 * delta / result;
    fprintf(stdout, ""Computing sqrt of %g to be %g\n"", x, result);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2300.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2300.cpp,18
second/download/CMake/CMake/CMake/Tests/Tutorial/Step7/tutorial.cpp,13,"fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2301.cpp,"{
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2301.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2301.cpp,3
second/download/CMake/CMake/CMake/Tests/Tutorial/Step7/tutorial.cpp,15,"fprintf(stdout, ""Usage: %s number\n"", argv[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2302.cpp,"{
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2302.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2302.cpp,5
second/download/CMake/CMake/CMake/Tests/Tutorial/Step7/tutorial.cpp,30,"fprintf(stdout, ""The square root of %g is %g\n"", inputValue, outputValue);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2303.cpp,"{
  if (argc < 2) {
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }

  double inputValue = atof(argv[1]);
  double outputValue = 0;

  if (inputValue >= 0) {
#ifdef USE_MYMATH
    outputValue = mysqrt(inputValue);
#else
    outputValue = sqrt(inputValue);
#endif
  }

  fprintf(stdout, ""The square root of %g is %g\n"", inputValue, outputValue);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2303.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 30, 0, 0, 2, 2, 0, 0, 2, 11, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 2, 2, 1, 0, 6, 0, 0, 5, 0, 15, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2303.cpp,20
second/download/CMake/CMake/CMake/Tests/Tutorial/Step7/MathFunctions/mysqrt.cpp,35,"fprintf(stdout, ""Computing sqrt of %g to be %g\n"", x, result);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2304.cpp,"{
    if (result <= 0) {
      result = 0.1;
    }
    delta = x - (result * result);
    result = result + 0.5 * delta / result;
    fprintf(stdout, ""Computing sqrt of %g to be %g\n"", x, result);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2304.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2304.cpp,25
second/download/CMake/CMake/CMake/Tests/Tutorial/Step7/MathFunctions/MakeTable.cpp,21,"fprintf(fout, ""double sqrtTable[] = {\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2305.cpp,"{
  int i;
  double result;

  // make sure we have enough arguments
  if (argc < 2) {
    return 1;
  }

  // open the output file
  FILE* fout = fopen(argv[1], ""w"");
  if (!fout) {
    return 1;
  }

  // create a source file with a table of square roots
  fprintf(fout, ""double sqrtTable[] = {\n"");
  for (i = 0; i < 10; ++i) {
    result = sqrt(static_cast<double>(i));
    fprintf(fout, ""%g,\n"", result);
  }

  // close the table with a zero
  fprintf(fout, ""0};\n"");
  fclose(fout);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2305.cpp,"[2, 0, 1, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 27, 0, 0, 3, 3, 0, 0, 2, 11, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 28, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 3, 2, 0, 0, 8, 0, 0, 5, 0, 13, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2305.cpp,17
second/download/CMake/CMake/CMake/Tests/Tutorial/Step7/MathFunctions/MakeTable.cpp,24,"fprintf(fout, ""%g,\n"", result);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2306.cpp,"{
    result = sqrt(static_cast<double>(i));
    fprintf(fout, ""%g,\n"", result);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2306.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2306.cpp,20
second/download/CMake/CMake/CMake/Tests/Tutorial/Step7/MathFunctions/MakeTable.cpp,28,"fprintf(fout, ""0};\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2307.cpp,"{
  int i;
  double result;

  // make sure we have enough arguments
  if (argc < 2) {
    return 1;
  }

  // open the output file
  FILE* fout = fopen(argv[1], ""w"");
  if (!fout) {
    return 1;
  }

  // create a source file with a table of square roots
  fprintf(fout, ""double sqrtTable[] = {\n"");
  for (i = 0; i < 10; ++i) {
    result = sqrt(static_cast<double>(i));
    fprintf(fout, ""%g,\n"", result);
  }

  // close the table with a zero
  fprintf(fout, ""0};\n"");
  fclose(fout);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2307.cpp,"[2, 0, 1, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 27, 0, 0, 3, 3, 0, 0, 2, 11, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 28, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 3, 2, 0, 0, 8, 0, 0, 5, 0, 13, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2307.cpp,24
second/download/CMake/CMake/CMake/Tests/Tutorial/Step4/tutorial.cpp,13,"fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2308.cpp,"{
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2308.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2308.cpp,3
second/download/CMake/CMake/CMake/Tests/Tutorial/Step4/tutorial.cpp,15,"fprintf(stdout, ""Usage: %s number\n"", argv[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2309.cpp,"{
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2309.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2309.cpp,5
second/download/CMake/CMake/CMake/Tests/Tutorial/Step4/tutorial.cpp,30,"fprintf(stdout, ""The square root of %g is %g\n"", inputValue, outputValue);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2310.cpp,"{
  if (argc < 2) {
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }

  double inputValue = atof(argv[1]);
  double outputValue = 0;

  if (inputValue >= 0) {
#ifdef USE_MYMATH
    outputValue = mysqrt(inputValue);
#else
    outputValue = sqrt(inputValue);
#endif
  }

  fprintf(stdout, ""The square root of %g is %g\n"", inputValue, outputValue);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2310.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 30, 0, 0, 2, 2, 0, 0, 2, 11, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 2, 2, 1, 0, 6, 0, 0, 5, 0, 15, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2310.cpp,20
second/download/CMake/CMake/CMake/Tests/Tutorial/Step4/MathFunctions/mysqrt.cpp,18,"fprintf(stdout, ""Computing sqrt of %g to be %g using log\n"", x, result);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2311.cpp,"{
  if (x <= 0) {
    return 0;
  }

  double result;

// if we have both log and exp then use them
#if defined(HAVE_LOG) && defined(HAVE_EXP)
  result = exp(log(x) * 0.5);
  fprintf(stdout, ""Computing sqrt of %g to be %g using log\n"", x, result);
#else
  double delta;
  result = x;

  // do ten iterations
  int i;
  for (i = 0; i < 10; ++i) {
    if (result <= 0) {
      result = 0.1;
    }
    delta = x - (result * result);
    result = result + 0.5 * delta / result;
    fprintf(stdout, ""Computing sqrt of %g to be %g\n"", x, result);
  }
#endif
  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2311.cpp,"[3, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 39, 0, 0, 3, 3, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 2, 1, 0, 6, 0, 0, 7, 0, 12, 3, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2311.cpp,11
second/download/CMake/CMake/CMake/Tests/Tutorial/Step4/MathFunctions/mysqrt.cpp,31,"fprintf(stdout, ""Computing sqrt of %g to be %g\n"", x, result);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2312.cpp,"{
    if (result <= 0) {
      result = 0.1;
    }
    delta = x - (result * result);
    result = result + 0.5 * delta / result;
    fprintf(stdout, ""Computing sqrt of %g to be %g\n"", x, result);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2312.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2312.cpp,24
second/download/CMake/CMake/CMake/Tests/Tutorial/Step2/tutorial.cpp,13,"fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2313.cpp,"{
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2313.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2313.cpp,3
second/download/CMake/CMake/CMake/Tests/Tutorial/Step2/tutorial.cpp,15,"fprintf(stdout, ""Usage: %s number\n"", argv[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2314.cpp,"{
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2314.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2314.cpp,5
second/download/CMake/CMake/CMake/Tests/Tutorial/Step2/tutorial.cpp,30,"fprintf(stdout, ""The square root of %g is %g\n"", inputValue, outputValue);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2315.cpp,"{
  if (argc < 2) {
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }

  double inputValue = atof(argv[1]);
  double outputValue = 0;

  if (inputValue >= 0) {
#ifdef USE_MYMATH
    outputValue = mysqrt(inputValue);
#else
    outputValue = sqrt(inputValue);
#endif
  }

  fprintf(stdout, ""The square root of %g is %g\n"", inputValue, outputValue);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2315.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 30, 0, 0, 2, 2, 0, 0, 2, 11, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 2, 2, 1, 0, 6, 0, 0, 5, 0, 15, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2315.cpp,20
second/download/CMake/CMake/CMake/Tests/Tutorial/Step2/MathFunctions/mysqrt.cpp,22,"fprintf(stdout, ""Computing sqrt of %g to be %g\n"", x, result);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2316.cpp,"{
    if (result <= 0) {
      result = 0.1;
    }
    delta = x - (result * result);
    result = result + 0.5 * delta / result;
    fprintf(stdout, ""Computing sqrt of %g to be %g\n"", x, result);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2316.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2316.cpp,18
second/download/CMake/CMake/CMake/Tests/Tutorial/Step6/tutorial.cpp,13,"fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2317.cpp,"{
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2317.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2317.cpp,3
second/download/CMake/CMake/CMake/Tests/Tutorial/Step6/tutorial.cpp,15,"fprintf(stdout, ""Usage: %s number\n"", argv[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2318.cpp,"{
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2318.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2318.cpp,5
second/download/CMake/CMake/CMake/Tests/Tutorial/Step6/tutorial.cpp,30,"fprintf(stdout, ""The square root of %g is %g\n"", inputValue, outputValue);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2319.cpp,"{
  if (argc < 2) {
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }

  double inputValue = atof(argv[1]);
  double outputValue = 0;

  if (inputValue >= 0) {
#ifdef USE_MYMATH
    outputValue = mysqrt(inputValue);
#else
    outputValue = sqrt(inputValue);
#endif
  }

  fprintf(stdout, ""The square root of %g is %g\n"", inputValue, outputValue);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2319.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 30, 0, 0, 2, 2, 0, 0, 2, 11, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 2, 2, 1, 0, 6, 0, 0, 5, 0, 15, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2319.cpp,20
second/download/CMake/CMake/CMake/Tests/Tutorial/Step6/MathFunctions/mysqrt.cpp,35,"fprintf(stdout, ""Computing sqrt of %g to be %g\n"", x, result);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2320.cpp,"{
    if (result <= 0) {
      result = 0.1;
    }
    delta = x - (result * result);
    result = result + 0.5 * delta / result;
    fprintf(stdout, ""Computing sqrt of %g to be %g\n"", x, result);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2320.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2320.cpp,25
second/download/CMake/CMake/CMake/Tests/Tutorial/Step6/MathFunctions/MakeTable.cpp,21,"fprintf(fout, ""double sqrtTable[] = {\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2321.cpp,"{
  int i;
  double result;

  // make sure we have enough arguments
  if (argc < 2) {
    return 1;
  }

  // open the output file
  FILE* fout = fopen(argv[1], ""w"");
  if (!fout) {
    return 1;
  }

  // create a source file with a table of square roots
  fprintf(fout, ""double sqrtTable[] = {\n"");
  for (i = 0; i < 10; ++i) {
    result = sqrt(static_cast<double>(i));
    fprintf(fout, ""%g,\n"", result);
  }

  // close the table with a zero
  fprintf(fout, ""0};\n"");
  fclose(fout);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2321.cpp,"[2, 0, 1, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 27, 0, 0, 3, 3, 0, 0, 2, 11, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 28, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 3, 2, 0, 0, 8, 0, 0, 5, 0, 13, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2321.cpp,17
second/download/CMake/CMake/CMake/Tests/Tutorial/Step6/MathFunctions/MakeTable.cpp,24,"fprintf(fout, ""%g,\n"", result);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2322.cpp,"{
    result = sqrt(static_cast<double>(i));
    fprintf(fout, ""%g,\n"", result);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2322.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2322.cpp,20
second/download/CMake/CMake/CMake/Tests/Tutorial/Step6/MathFunctions/MakeTable.cpp,28,"fprintf(fout, ""0};\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2323.cpp,"{
  int i;
  double result;

  // make sure we have enough arguments
  if (argc < 2) {
    return 1;
  }

  // open the output file
  FILE* fout = fopen(argv[1], ""w"");
  if (!fout) {
    return 1;
  }

  // create a source file with a table of square roots
  fprintf(fout, ""double sqrtTable[] = {\n"");
  for (i = 0; i < 10; ++i) {
    result = sqrt(static_cast<double>(i));
    fprintf(fout, ""%g,\n"", result);
  }

  // close the table with a zero
  fprintf(fout, ""0};\n"");
  fclose(fout);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2323.cpp,"[2, 0, 1, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 27, 0, 0, 3, 3, 0, 0, 2, 11, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 28, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 3, 2, 0, 0, 8, 0, 0, 5, 0, 13, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2323.cpp,24
second/download/CMake/CMake/CMake/Tests/Tutorial/Step1/tutorial.cpp,9,"fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2324.cpp,"{
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2324.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2324.cpp,3
second/download/CMake/CMake/CMake/Tests/Tutorial/Step1/tutorial.cpp,11,"fprintf(stdout, ""Usage: %s number\n"", argv[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2325.cpp,"{
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2325.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2325.cpp,5
second/download/CMake/CMake/CMake/Tests/Tutorial/Step1/tutorial.cpp,16,"fprintf(stdout, ""The square root of %g is %g\n"", inputValue, outputValue);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2326.cpp,"{
  if (argc < 2) {
    fprintf(stdout, ""%s Version %d.%d\n"", argv[0], Tutorial_VERSION_MAJOR,
            Tutorial_VERSION_MINOR);
    fprintf(stdout, ""Usage: %s number\n"", argv[0]);
    return 1;
  }
  double inputValue = atof(argv[1]);
  double outputValue = sqrt(inputValue);
  fprintf(stdout, ""The square root of %g is %g\n"", inputValue, outputValue);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2326.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 24, 0, 0, 2, 2, 0, 0, 2, 9, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 1, 0, 0, 5, 0, 0, 3, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2326.cpp,10
second/download/CMake/CMake/CMake/Tests/CompileDefinitions/runtest.cpp,15,"fprintf(stderr, ""build_config_name=\""%s\""\n"", build_config_name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2327.cpp,"{
  char build_config_name[] = BUILD_CONFIG_NAME;
  char* c;
  for (c = build_config_name; *c; ++c) {
    *c = (char)tolower((int)*c);
  }
  fprintf(stderr, ""build_config_name=\""%s\""\n"", build_config_name);
#ifdef TEST_CONFIG_DEBUG
  if (strcmp(build_config_name, ""debug"") != 0) {
    fprintf(stderr, ""build_config_name is not \""debug\""\n"");
    return 1;
  }
#endif
#ifdef TEST_CONFIG_RELEASE
  if (strcmp(build_config_name, ""release"") != 0) {
    fprintf(stderr, ""build_config_name is not \""release\""\n"");
    return 1;
  }
#endif
#ifdef TEST_CONFIG_MINSIZEREL
  if (strcmp(build_config_name, ""minsizerel"") != 0) {
    fprintf(stderr, ""build_config_name is not \""minsizerel\""\n"");
    return 1;
  }
#endif
#ifdef TEST_CONFIG_RELWITHDEBINFO
  if (strcmp(build_config_name, ""relwithdebinfo"") != 0) {
    fprintf(stderr, ""build_config_name is not \""relwithdebinfo\""\n"");
    return 1;
  }
#endif
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2327.cpp,"[4, 0, 1, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 38, 0, 0, 2, 2, 0, 0, 2, 18, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 5, 4, 0, 0, 10, 0, 0, 6, 0, 20, 8, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2327.cpp,7
second/download/CMake/CMake/CMake/Tests/CompileDefinitions/runtest.cpp,18,"fprintf(stderr, ""build_config_name is not \""debug\""\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2328.cpp,"{
    fprintf(stderr, ""build_config_name is not \""debug\""\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2328.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2328.cpp,10
second/download/CMake/CMake/CMake/Tests/CompileDefinitions/runtest.cpp,24,"fprintf(stderr, ""build_config_name is not \""release\""\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2329.cpp,"{
    fprintf(stderr, ""build_config_name is not \""release\""\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2329.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2329.cpp,16
second/download/CMake/CMake/CMake/Tests/CompileDefinitions/runtest.cpp,30,"fprintf(stderr, ""build_config_name is not \""minsizerel\""\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2330.cpp,"{
    fprintf(stderr, ""build_config_name is not \""minsizerel\""\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2330.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2330.cpp,22
second/download/CMake/CMake/CMake/Tests/CompileDefinitions/runtest.cpp,36,"fprintf(stderr, ""build_config_name is not \""relwithdebinfo\""\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2331.cpp,"{
    fprintf(stderr, ""build_config_name is not \""relwithdebinfo\""\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2331.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2331.cpp,28
second/download/CMake/CMake/CMake/Tests/X11/X11.cpp,8,"printf(""There is X on this computer\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2332.cpp,"{
  printf(""There is X on this computer\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2332.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2332.cpp,2
second/download/CMake/CMake/CMake/Tests/X11/X11.cpp,16,"printf(""No X on this computer\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2333.cpp,"{
  printf(""No X on this computer\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2333.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2333.cpp,2
second/download/CMake/CMake/CMake/Tests/X11/HelloWorldX11.cpp,92,"printf(""You pressed the %c key!\n"", text[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2334.cpp,"{
            // echo key press
            printf(""You pressed the %c key!\n"", text[0]);
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2334.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2334.cpp,92
second/download/CMake/CMake/CMake/Tests/X11/HelloWorldX11.cpp,106,"printf(""Unhandled event.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2335.cpp,"{
      int x;
      int y;
      case Expose:
        if (event.xexpose.count == 0) {
          redraw();
        }
        break;
      case KeyPress:
        if (XLookupString(&event.xkey, text, 255, &key, 0) == 1) {
          // use the XLookupString routine to convert the invent
          // KeyPress data into regular text.  Weird but necessary...
          if ((text[0] == 'q') || (text[0] == 'Q')) {
            close_x();
          } else {
            // echo key press
            printf(""You pressed the %c key!\n"", text[0]);
          }
        }
        break;
      case ButtonPress:
        // get cursor position
        x = event.xbutton.x;
        y = event.xbutton.y;
        strcpy(text, ""X is FUN!"");
        XSetForeground(dis, gc, rand() % event.xbutton.x % 255);
        // draw text at cursor
        XDrawString(dis, win, gc, x, y, text, strlen(text));
        break;
      default:
        printf(""Unhandled event.\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2335.cpp,"[3, 0, 0, 0, 3, 0, 0, 0, 3, 1, 5, 0, 0, 0, 0, 56, 0, 0, 2, 2, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 3, 3, 1, 0, 10, 0, 0, 9, 0, 21, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2335.cpp,106
second/download/CMake/CMake/CMake/Tests/VSMidl/src/main.cpp,10,"printf(""Running '%s'\n"", argv[0]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2336.cpp,"{
  IID libid = LIBID_CMakeMidlTestLib;
  CLSID clsid = CLSID_CMakeMidlTest;
  IID iid = IID_ICMakeMidlTest;

  printf(""Running '%s'\n"", argv[0]);
  printf(""  libid starts with '0x%08lx'\n"", (long)libid.Data1);
  printf(""  clsid starts with '0x%08lx'\n"", (long)clsid.Data1);
  printf(""    iid starts with '0x%08lx'\n"", (long)iid.Data1);

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2336.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 27, 0, 0, 3, 3, 0, 0, 3, 6, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2336.cpp,6
second/download/CMake/CMake/CMake/Tests/VSMidl/src/main.cpp,11,"printf(""  libid starts with '0x%08lx'\n"", (long)libid.Data1);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2337.cpp,"{
  IID libid = LIBID_CMakeMidlTestLib;
  CLSID clsid = CLSID_CMakeMidlTest;
  IID iid = IID_ICMakeMidlTest;

  printf(""Running '%s'\n"", argv[0]);
  printf(""  libid starts with '0x%08lx'\n"", (long)libid.Data1);
  printf(""  clsid starts with '0x%08lx'\n"", (long)clsid.Data1);
  printf(""    iid starts with '0x%08lx'\n"", (long)iid.Data1);

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2337.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 27, 0, 0, 3, 3, 0, 0, 3, 6, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2337.cpp,7
second/download/CMake/CMake/CMake/Tests/VSMidl/src/main.cpp,12,"printf(""  clsid starts with '0x%08lx'\n"", (long)clsid.Data1);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2338.cpp,"{
  IID libid = LIBID_CMakeMidlTestLib;
  CLSID clsid = CLSID_CMakeMidlTest;
  IID iid = IID_ICMakeMidlTest;

  printf(""Running '%s'\n"", argv[0]);
  printf(""  libid starts with '0x%08lx'\n"", (long)libid.Data1);
  printf(""  clsid starts with '0x%08lx'\n"", (long)clsid.Data1);
  printf(""    iid starts with '0x%08lx'\n"", (long)iid.Data1);

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2338.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 27, 0, 0, 3, 3, 0, 0, 3, 6, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2338.cpp,8
second/download/CMake/CMake/CMake/Tests/VSMidl/src/main.cpp,13,"printf(""    iid starts with '0x%08lx'\n"", (long)iid.Data1);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2339.cpp,"{
  IID libid = LIBID_CMakeMidlTestLib;
  CLSID clsid = CLSID_CMakeMidlTest;
  IID iid = IID_ICMakeMidlTest;

  printf(""Running '%s'\n"", argv[0]);
  printf(""  libid starts with '0x%08lx'\n"", (long)libid.Data1);
  printf(""  clsid starts with '0x%08lx'\n"", (long)clsid.Data1);
  printf(""    iid starts with '0x%08lx'\n"", (long)iid.Data1);

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2339.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 27, 0, 0, 3, 3, 0, 0, 3, 6, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2339.cpp,9
second/download/CMake/CMake/CMake/Tests/SameName/Exe1/conly.cpp,6,"printf(""Problem with libc1\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2340.cpp,"{
    printf(""Problem with libc1\n"");
    return 1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2340.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2340.cpp,3
second/download/CMake/CMake/CMake/Tests/TryCompile/exit_success.cpp,4,"printf(""hello world\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2341.cpp,"{
  printf(""hello world\n"");
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2341.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2341.cpp,2
second/download/CMake/CMake/CMake/Tests/TryCompile/exit_with_error.cpp,4,"printf(""hello world\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2342.cpp,"{
  printf(""hello world\n"");
  return -1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2342.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2342.cpp,2
second/download/CMake/CMake/CMake/Tests/TryCompile/expect_arg.cpp,5,"printf(""ac = [%d]\n"", ac);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2343.cpp,"{
  int i;
  printf(""ac = [%d]\n"", ac);
  for (i = 0; i < ac; i++) {
    printf(""arg[%d] = %s\n"", i, av[i]);
  }
  if (ac == 3) {
    if (strcmp(av[1], ""arg1"") == 0 && strcmp(av[2], ""arg2"") == 0) {
      printf(""arg1 and arg2 present and accounted for!\n"");
      return 0;
    }
  }
  printf(""arg1 and arg2 missing!\n"");
  return -1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2343.cpp,"[2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 22, 0, 0, 1, 1, 0, 0, 1, 14, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 3, 2, 0, 0, 6, 0, 0, 4, 0, 11, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2343.cpp,3
second/download/CMake/CMake/CMake/Tests/TryCompile/expect_arg.cpp,7,"printf(""arg[%d] = %s\n"", i, av[i]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2344.cpp,"{
    printf(""arg[%d] = %s\n"", i, av[i]);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2344.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2344.cpp,5
second/download/CMake/CMake/CMake/Tests/TryCompile/expect_arg.cpp,11,"printf(""arg1 and arg2 present and accounted for!\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2345.cpp,"{
      printf(""arg1 and arg2 present and accounted for!\n"");
      return 0;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2345.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2345.cpp,9
second/download/CMake/CMake/CMake/Tests/TryCompile/expect_arg.cpp,15,"printf(""arg1 and arg2 missing!\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2346.cpp,"{
  int i;
  printf(""ac = [%d]\n"", ac);
  for (i = 0; i < ac; i++) {
    printf(""arg[%d] = %s\n"", i, av[i]);
  }
  if (ac == 3) {
    if (strcmp(av[1], ""arg1"") == 0 && strcmp(av[2], ""arg2"") == 0) {
      printf(""arg1 and arg2 present and accounted for!\n"");
      return 0;
    }
  }
  printf(""arg1 and arg2 missing!\n"");
  return -1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2346.cpp,"[2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 22, 0, 0, 1, 1, 0, 0, 1, 14, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 3, 2, 0, 0, 6, 0, 0, 4, 0, 11, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2346.cpp,13
