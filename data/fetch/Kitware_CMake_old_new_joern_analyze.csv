sha,message,issue,file_name,old_file,new_file,patch_file,old_hunk_file,new_hunk_file,old_hunk_loc,new_hunk_loc,old_loc,new_loc,old_log,new_log,action_type,old_log_file,new_log_file,old_block,old_block_file,old_block_feature,old_function_file,old_fucntion_loc,old_ddg_feature,old_cdg_feature
6df1bda1c57193b289866389a994ea79a2f5e1d8,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-07-09 (98a69539)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_2.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_21.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_21.cpp,4044,4083,4090,4125,"archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");","archive_strcat(&errlist, name);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_2.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_2.cpp,"{
						warning_done = 1;
						archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_2.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_2.cpp,39,[],"[""int"", ""!""]"
6df1bda1c57193b289866389a994ea79a2f5e1d8,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-07-09 (98a69539)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_2.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_21.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_21.cpp,4044,4083,4097,4168,"archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Cannot restore extended ""
			    ""attributes on this file system."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_3.cpp,"archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"")",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_3.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_3.cpp,46,"[""member"", ""unkown"", ""string""]","[""unkown"", ""macro"", ""=="", ""unkown"", ""macro"", ""=="", ""||"", ""!""]"
6df1bda1c57193b289866389a994ea79a2f5e1d8,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-07-09 (98a69539)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_2.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_21.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_21.cpp,4044,4083,4102,4154,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid extended attribute encountered"");","archive_strappend_char(&errlist, ' ');",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_4.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_4.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid extended attribute encountered"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_4.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_4.cpp,51,"[""member"", ""macro"", ""string""]","[""const char *"", ""null"", ""!="", ""strncmp_ret"", ""null"", ""!="", ""strncmp_ret"", ""null"", ""!="", ""&&"", ""&&"", ""!""]"
6df1bda1c57193b289866389a994ea79a2f5e1d8,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-07-09 (98a69539)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_2.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_21.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_21.cpp,4044,4083,4108,4164,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Cannot restore extended attributes: %s"",
			    errlist.s);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_5.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_5.cpp,"{
	struct archive_entry *entry = a->entry;
	static int warning_done = 0;
	int ret = ARCHIVE_OK;
	int i = archive_entry_xattr_reset(entry);

	while (i--) {
		const char *name;
		const void *value;
		size_t size;
		archive_entry_xattr_next(entry, &name, &value, &size);
		if (name != NULL &&
				strncmp(name, ""xfsroot."", 8) != 0 &&
				strncmp(name, ""system."", 7) != 0) {
			int e;
#if HAVE_FSETXATTR
			if (a->fd >= 0)
				e = fsetxattr(a->fd, name, value, size, 0);
			else
#elif HAVE_FSETEA
			if (a->fd >= 0)
				e = fsetea(a->fd, name, value, size, 0);
			else
#endif
			{
#if HAVE_LSETXATTR
				e = lsetxattr(archive_entry_pathname(entry),
				    name, value, size, 0);
#elif HAVE_LSETEA
				e = lsetea(archive_entry_pathname(entry),
				    name, value, size, 0);
#endif
			}
			if (e == -1) {
				if (errno == ENOTSUP || errno == ENOSYS) {
					if (!warning_done) {
						warning_done = 1;
						archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");
					}
				} else
					archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");
				ret = ARCHIVE_WARN;
			}
		} else {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid extended attribute encountered"");
			ret = ARCHIVE_WARN;
		}
	}
	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_5.cpp,"[8, 1, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 3, 103, 0, 0, 8, 8, 0, 0, 4, 20, 0, 0, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 7, 6, 3, 0, 13, 0, 0, 11, 1, 42, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_5.cpp,57,[],[]
6df1bda1c57193b289866389a994ea79a2f5e1d8,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-07-09 (98a69539)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_2.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_22.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_22.cpp,4134,4203,4137,4207,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Can't restore extended attribute ``%s''"",
				    name);","archive_strappend_char(&errlist, ' ');",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_6.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_6.cpp,"{
				/* Warn about other extended attributes. */
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Can't restore extended attribute ``%s''"",
				    name);
				ret = ARCHIVE_WARN;
				continue;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_6.cpp,"[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_6.cpp,23,"[""member"", ""macro"", ""string"", ""const char *""]","[""strncmp_ret"", ""null"", ""=="", ""!""]"
6df1bda1c57193b289866389a994ea79a2f5e1d8,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-07-09 (98a69539)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_2.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_22.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_22.cpp,4134,4203,4161,4240,"archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Cannot restore extended ""
			    ""attributes on this file system."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_7.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_7.cpp,"{
						warning_done = 1;
						archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_7.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_7.cpp,47,[],"[""int"", ""!""]"
6df1bda1c57193b289866389a994ea79a2f5e1d8,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-07-09 (98a69539)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_2.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_22.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_22.cpp,4134,4203,4168,4236,"archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Cannot restore extended attributes: %s"",
			    errlist.s);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_8.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_8.cpp,"{
					archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_8.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_8.cpp,54,"[""member"", ""null"", ""string""]","[""null"", ""macro"", ""=="", ""null"", ""macro"", ""=="", ""||"", ""!""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_24.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_24.cpp,328,334,334,-1,"archive_set_error(&a->archive, errno,
			    ""Can't change dir to read extended attributes"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_10.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_10.cpp,"{
		archive_set_error(&a->archive, errno,
			    ""Can't change dir to read extended attributes"");
			return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_10.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_10.cpp,18,"[""member"", ""unkown"", ""string""]","[""member"", ""null"", ""!="", ""a -> tree_enter_working_dir_ret"", ""null"", ""!="", ""&&""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_24.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_24.cpp,328,334,339,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't open file to read extended attributes: No name"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_11.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_11.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't open file to read extended attributes: No name"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_11.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_11.cpp,23,"[""member"", ""macro"", ""string""]","[""archive_entry_pathname_ret"", ""null"", ""==""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,476,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ACLs"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_12.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_12.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ACLs"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_12.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_12.cpp,26,"[""member"", ""macro"", ""string""]","[""archive_entry_sourcepath_ret"", ""null"", ""==""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,549,-1,"archive_set_error(&a->archive, errno,
			    ""Couldn't translate ""
#if !HAVE_SUN_ACL
			    ""NFSv4 ""
#endif
			    ""ACLs"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_13.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_13.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Couldn't translate ""
#if !HAVE_SUN_ACL
			    ""NFSv4 ""
#endif
			    ""ACLs"");
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_13.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_13.cpp,99,[],"[""translate_acl_ret"", ""macro"", ""!=""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,605,-1,"archive_set_error(&a->archive, errno,
			    ""Couldn't translate access ACLs"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_14.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_14.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Couldn't translate access ACLs"");
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_14.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_14.cpp,155,"[""member"", ""unkown"", ""string""]","[""translate_acl_ret"", ""macro"", ""!=""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,624,-1,"archive_set_error(&a->archive, errno,
				    ""Couldn't translate default ACLs"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_15.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_15.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Couldn't translate default ACLs"");
				return (r);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_15.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_15.cpp,174,"[""member"", ""unkown"", ""string""]","[""translate_acl_ret"", ""macro"", ""!=""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1188,-1,"archive_set_error(&a->archive, errno,
		    ""Failed to read ACL brand"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_16.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_16.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to read ACL brand"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_16.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_16.cpp,26,"[""member"", ""unkown"", ""string""]","[""acl_get_brand_np_ret"", ""null"", ""!=""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1199,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for POSIX.1e ACL"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_17.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_17.cpp,"{
		case ARCHIVE_ENTRY_ACL_TYPE_ACCESS:
		case ARCHIVE_ENTRY_ACL_TYPE_DEFAULT:
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for POSIX.1e ACL"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_17.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_17.cpp,37,"[""member"", ""macro"", ""constant""]","[""int""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1206,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for NFSv4 ACL"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_18.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_18.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for NFSv4 ACL"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_18.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_18.cpp,44,"[""member"", ""macro"", ""string""]","[""bool""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1212,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown ACL brand"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_19.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_19.cpp,"{
	case ACL_BRAND_POSIX:
		switch (default_entry_acl_type) {
		case ARCHIVE_ENTRY_ACL_TYPE_ACCESS:
		case ARCHIVE_ENTRY_ACL_TYPE_DEFAULT:
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for POSIX.1e ACL"");
			return (ARCHIVE_WARN);
		}
		break;
	case ACL_BRAND_NFS4:
		if (default_entry_acl_type & ~ARCHIVE_ENTRY_ACL_TYPE_NFS4) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for NFSv4 ACL"");
			return (ARCHIVE_WARN);
		}
		break;
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown ACL brand"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_19.cpp,"[1, 0, 0, 0, 3, 0, 3, 1, 4, 2, 3, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_19.cpp,50,"[""member"", ""macro"", ""string""]","[""int""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1220,-1,"archive_set_error(&a->archive, errno,
		    ""Failed to get first ACL entry"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_20.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_20.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to get first ACL entry"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_20.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_20.cpp,58,"[""member"", ""unkown"", ""string""]","[""acl_get_entry_ret"", ""int"", ""==""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1236,-1,"archive_set_error(&a->archive, errno,
			    ""Failed to get ACL tag type"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_21.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_21.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to get ACL tag type"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_21.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_21.cpp,74,"[""member"", ""unkown"", ""string""]","[""acl_get_tag_type_ret"", ""null"", ""!=""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1316,-1,"archive_set_error(&a->archive, errno, ""Failed ""
				    ""to get ACL type from a NFSv4 ACL entry"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_22.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_22.cpp,"{
				archive_set_error(&a->archive, errno, ""Failed ""
				    ""to get ACL type from a NFSv4 ACL entry"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_22.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_22.cpp,154,[],"[""acl_get_entry_type_np_ret"", ""null"", ""!=""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1334,-1,"archive_set_error(&a->archive, errno,
				    ""Invalid NFSv4 ACL entry type"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_23.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_23.cpp,"{
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			default:
				archive_set_error(&a->archive, errno,
				    ""Invalid NFSv4 ACL entry type"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_23.cpp,"[0, 0, 0, 0, 4, 0, 1, 0, 4, 1, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 5, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_23.cpp,172,"[""member"", ""unkown"", ""string""]","[""acl_entry_type_t""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1347,-1,"archive_set_error(&a->archive, errno,
				    ""Failed to get flagset from a NFSv4 ACL entry"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_24.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_24.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Failed to get flagset from a NFSv4 ACL entry"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_24.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_24.cpp,185,"[""member"", ""unkown"", ""string""]","[""acl_get_flagset_np_ret"", ""null"", ""!=""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1355,-1,"archive_set_error(&a->archive, errno,
					    ""Failed to check flag in a NFSv4 ""
					    ""ACL flagset"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_25.cpp,"{
					archive_set_error(&a->archive, errno,
					    ""Failed to check flag in a NFSv4 ""
					    ""ACL flagset"");
					return (ARCHIVE_WARN);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_25.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_25.cpp,193,[],"[""acl_get_flag_np_ret"", ""int"", ""==""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1366,-1,"archive_set_error(&a->archive, errno,
			    ""Failed to get ACL permission set"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_26.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_26.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to get ACL permission set"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_26.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_26.cpp,204,"[""member"", ""unkown"", ""string""]","[""acl_get_permset_ret"", ""null"", ""!=""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1377,-1,"archive_set_error(&a->archive, errno,
				    ""Failed to check permission in an ACL permission set"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_27.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_27.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Failed to check permission in an ACL permission set"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_27.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_27.cpp,215,"[""member"", ""unkown"", ""string""]","[""ACL_GET_PERM_ret"", ""int"", ""==""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1391,-1,"archive_set_error(&a->archive, errno,
			    ""Failed to get next ACL entry"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_28.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_28.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to get next ACL entry"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_28.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_28.cpp,229,"[""member"", ""unkown"", ""string""]","[""acl_get_entry_ret"", ""int"", ""==""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_28.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_28.cpp,1499,532,1506,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_29.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_29.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_29.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_29.cpp,16,[],"[""archive_entry_sourcepath_ret"", ""null"", ""==""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_30.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_30.cpp,1658,710,1665,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_30.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_30.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_30.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_30.cpp,18,[],"[""archive_entry_pathname_ret"", ""null"", ""==""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_31.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_31.cpp,1880,920,1898,-1,"archive_set_error(&a->archive, errno,
			    ""Can't open `%s'"", path);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_31.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_31.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't open `%s'"", path);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_31.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_31.cpp,25,"[""member"", ""unkown"", ""string"", ""archive_entry_sourcepath_ret""]","[""int *"", ""null"", ""<""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_support_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_4.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_4.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_4.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_33.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_33.cpp,1535,1533,1542,1540,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symbolic mode \""%s\"" unsupported"", val);","archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symbolic or non-octal mode \""%s\"" unsupported"", val);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_32.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_32.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symbolic mode \""%s\"" unsupported"", val);
				return ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_32.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_32.cpp,97,"[""member"", ""macro"", ""string"", ""strchr_ret""]","[""member"", ""char"", "">="", ""member"", ""char"", ""<="", ""&&"", ""!""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_5.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_34.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_34.cpp,2467,2506,2469,2508,"archive_string_sprintf(a_estr, errstr, path);","archive_string_sprintf(a_estr, ""%s%s"", errstr, path);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_33.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_33.cpp,"archive_string_sprintf(a_estr, errstr, path)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_33.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_33.cpp,7,"[""struct archive_string *"", ""const char *"", ""const char *""]","[""struct archive_string *""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_5.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_43.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_43.cpp,4044,4083,4090,4125,"archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");","archive_strcat(&errlist, name);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_41.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_41.cpp,"{
						warning_done = 1;
						archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_41.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_41.cpp,39,[],"[""int"", ""!""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_5.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_43.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_43.cpp,4044,4083,4097,4168,"archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Cannot restore extended ""
			    ""attributes on this file system."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_42.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_42.cpp,"archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"")",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_42.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_42.cpp,46,"[""member"", ""unkown"", ""string""]","[""unkown"", ""macro"", ""=="", ""unkown"", ""macro"", ""=="", ""||"", ""!""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_5.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_43.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_43.cpp,4044,4083,4102,4154,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid extended attribute encountered"");","archive_strappend_char(&errlist, ' ');",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_43.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_43.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid extended attribute encountered"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_43.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_43.cpp,51,"[""member"", ""macro"", ""string""]","[""const char *"", ""null"", ""!="", ""strncmp_ret"", ""null"", ""!="", ""strncmp_ret"", ""null"", ""!="", ""&&"", ""&&"", ""!""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_5.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_43.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_43.cpp,4044,4083,4108,4164,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Cannot restore extended attributes: %s"",
			    errlist.s);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_44.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_44.cpp,"{
	struct archive_entry *entry = a->entry;
	static int warning_done = 0;
	int ret = ARCHIVE_OK;
	int i = archive_entry_xattr_reset(entry);

	while (i--) {
		const char *name;
		const void *value;
		size_t size;
		archive_entry_xattr_next(entry, &name, &value, &size);
		if (name != NULL &&
				strncmp(name, ""xfsroot."", 8) != 0 &&
				strncmp(name, ""system."", 7) != 0) {
			int e;
#if HAVE_FSETXATTR
			if (a->fd >= 0)
				e = fsetxattr(a->fd, name, value, size, 0);
			else
#elif HAVE_FSETEA
			if (a->fd >= 0)
				e = fsetea(a->fd, name, value, size, 0);
			else
#endif
			{
#if HAVE_LSETXATTR
				e = lsetxattr(archive_entry_pathname(entry),
				    name, value, size, 0);
#elif HAVE_LSETEA
				e = lsetea(archive_entry_pathname(entry),
				    name, value, size, 0);
#endif
			}
			if (e == -1) {
				if (errno == ENOTSUP || errno == ENOSYS) {
					if (!warning_done) {
						warning_done = 1;
						archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");
					}
				} else
					archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");
				ret = ARCHIVE_WARN;
			}
		} else {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid extended attribute encountered"");
			ret = ARCHIVE_WARN;
		}
	}
	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_44.cpp,"[8, 1, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 3, 103, 0, 0, 8, 8, 0, 0, 4, 20, 0, 0, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 7, 6, 3, 0, 13, 0, 0, 11, 1, 42, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_44.cpp,57,[],[]
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_5.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_44.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_44.cpp,4134,4203,4137,4207,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Can't restore extended attribute ``%s''"",
				    name);","archive_strappend_char(&errlist, ' ');",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_45.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_45.cpp,"{
				/* Warn about other extended attributes. */
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Can't restore extended attribute ``%s''"",
				    name);
				ret = ARCHIVE_WARN;
				continue;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_45.cpp,"[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_45.cpp,23,"[""member"", ""macro"", ""string"", ""const char *""]","[""strncmp_ret"", ""null"", ""=="", ""!""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_5.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_44.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_44.cpp,4134,4203,4161,4240,"archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Cannot restore extended ""
			    ""attributes on this file system."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_46.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_46.cpp,"{
						warning_done = 1;
						archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_46.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_46.cpp,47,[],"[""int"", ""!""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_5.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_44.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_44.cpp,4134,4203,4168,4236,"archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Cannot restore extended attributes: %s"",
			    errlist.s);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_47.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_47.cpp,"{
					archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_47.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_47.cpp,54,"[""member"", ""null"", ""string""]","[""null"", ""macro"", ""=="", ""null"", ""macro"", ""=="", ""||"", ""!""]"
47b3a57c9bc5c7db608bc3b59b139a902535255f,"Display subproject timing summary

Use the '--no-subproject-summary' option to disable timing summary.",[],Source/CTest/cmCTestTestHandler.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_6.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_6.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_6.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_46.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_46.cpp,688,693,689,749,,"sprintf(buf, ""%6.2f sec"", labelTimes[*i]);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_48.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_48.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_48.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_48.cpp,0,[],[]
df1c187f2fdfa48bd36d770bac23f6503fd9b071,Merge branch 'update-curl' into release-3.9,[],Utilities/cmcurl/lib/file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_7.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_7.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_7.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_47.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_47.cpp,475,473,477,476,"snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);","snprintf(header, sizeof(header),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_49.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_49.cpp,"{
    time_t filetime;
    struct tm buffer;
    const struct tm *tm = &buffer;
    snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(result)
      return result;

    result = Curl_client_write(conn, CLIENTWRITE_BOTH,
                               (char *)""Accept-ranges: bytes\r\n"", 0);
    if(result)
      return result;

    filetime = (time_t)statbuf.st_mtime;
    result = Curl_gmtime(filetime, &buffer);
    if(result)
      return result;

    /* format: ""Tue, 15 Nov 1994 12:45:26 GMT"" */
    snprintf(buf, BUFSIZE-1,
             ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
             Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
             tm->tm_mday,
             Curl_month[tm->tm_mon],
             tm->tm_year + 1900,
             tm->tm_hour,
             tm->tm_min,
             tm->tm_sec);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(!result)
      /* set the file size to make it available post transfer */
      Curl_pgrsSetDownloadSize(data, expected_size);
    return result;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_49.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 1, 86, 0, 0, 3, 3, 0, 0, 1, 11, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 1, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 5, 5, 1, 0, 8, 0, 0, 8, 0, 31, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_49.cpp,58,[],"[""member"", ""member"", ""macro"", ""&&"", ""&&""]"
df1c187f2fdfa48bd36d770bac23f6503fd9b071,Merge branch 'update-curl' into release-3.9,[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_8.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_8.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_8.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_49.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_49.cpp,2101,2100,2109,2108,"snprintf(buf, CURL_BUFSIZE(conn->data->set.buffer_size),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);","snprintf(timebuf, sizeof(timebuf),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_50.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_50.cpp,"{
        /* we have a time, reformat it */
        time_t secs=time(NULL);
        /* using the good old yacc/bison yuck */
        snprintf(buf, CURL_BUFSIZE(conn->data->set.buffer_size),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);
        /* now, convert this into a time() value: */
        data->info.filetime = (long)curl_getdate(buf, &secs);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_50.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 26, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_50.cpp,20,"[""char *"", ""CURL_BUFSIZE_ret"", ""string"", ""int"", ""int"", ""int"", ""int"", ""int"", ""int""]","[""int"", ""sscanf_ret"", ""==""]"
df1c187f2fdfa48bd36d770bac23f6503fd9b071,Merge branch 'update-curl' into release-3.9,[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_8.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_8.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_8.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_51.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_51.cpp,2318,2318,2320,2321,"snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);","snprintf(clbuf, sizeof(clbuf),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_51.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_51.cpp,"{
      snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);
      result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
      if(result)
        return result;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_51.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_51.cpp,15,[],"[""int"", ""curlx_strtoofft_ret"", ""!=""]"
df1c187f2fdfa48bd36d770bac23f6503fd9b071,Merge branch 'update-curl' into release-3.9,[],Utilities/cmcurl/lib/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_9.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_9.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_9.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_52.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_52.cpp,297,298,299,300,"f(data->state.buffer, CURL_BUFSIZE(data->set.buffer_size),
           ""%s:%s"", user, pwd);","= aprintf(""%s:%s"", user, pwd);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_52.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_52.cpp,"{
  size_t size = 0;
  char *authorization = NULL;
  struct Curl_easy *data = conn->data;
  char **userp;
  const char *user;
  const char *pwd;
  CURLcode result;

  if(proxy) {
    userp = &conn->allocptr.proxyuserpwd;
    user = conn->http_proxy.user;
    pwd = conn->http_proxy.passwd;
  }
  else {
    userp = &conn->allocptr.userpwd;
    user = conn->user;
    pwd = conn->passwd;
  }

  snprintf(data->state.buffer, CURL_BUFSIZE(data->set.buffer_size),
           ""%s:%s"", user, pwd);

  result = Curl_base64_encode(data,
                              data->state.buffer, strlen(data->state.buffer),
                              &authorization, &size);
  if(result)
    return result;

  if(!authorization)
    return CURLE_REMOTE_ACCESS_DENIED;

  free(*userp);
  *userp = aprintf(""%sAuthorization: Basic %s\r\n"",
                   proxy ? ""Proxy-"" : """",
                   authorization);
  free(authorization);
  if(!*userp)
    return CURLE_OUT_OF_MEMORY;

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_52.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 2, 90, 0, 0, 7, 7, 0, 0, 3, 5, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 1, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 5, 5, 2, 0, 7, 0, 0, 11, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_52.cpp,21,"[""member"", ""CURL_BUFSIZE_ret"", ""string"", ""member"", ""member""]",[]
df1c187f2fdfa48bd36d770bac23f6503fd9b071,Merge branch 'update-curl' into release-3.9,[],Utilities/cmcurl/lib/sendf.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_10.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_10.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_10.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_54.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_54.cpp,243,243,247,248,"vsnprintf(data->state.buffer, BUFSIZE, fmt, ap);","vsnprintf(error, CURL_ERROR_SIZE, fmt, ap);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_53.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_53.cpp,"{
  va_list ap;
  size_t len;
  va_start(ap, fmt);

  vsnprintf(data->state.buffer, BUFSIZE, fmt, ap);

  if(data->set.errorbuffer && !data->state.errorbuf) {
    snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, ""%s"", data->state.buffer);
    data->state.errorbuf = TRUE; /* wrote error string */
  }
  if(data->set.verbose) {
    len = strlen(data->state.buffer);
    if(len < BUFSIZE - 1) {
      data->state.buffer[len] = '\n';
      data->state.buffer[++len] = '\0';
    }
    Curl_debug(data, CURLINFO_TEXT, data->state.buffer, len, NULL);
  }

  va_end(ap);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_53.cpp,"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 71, 0, 0, 2, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 3, 0, 0, 6, 0, 0, 9, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_53.cpp,6,"[""member"", ""macro"", ""const char *"", ""va_list""]",[]
df1c187f2fdfa48bd36d770bac23f6503fd9b071,Merge branch 'update-curl' into release-3.9,[],Utilities/cmcurl/lib/sendf.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_10.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_10.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_10.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_54.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_54.cpp,243,243,250,252,"snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, ""%s"", data->state.buffer);","strcpy(data->set.errorbuffer, error);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_54.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_54.cpp,"{
    snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, ""%s"", data->state.buffer);
    data->state.errorbuf = TRUE; /* wrote error string */
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_54.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_54.cpp,9,"[""member"", ""macro"", ""string"", ""member""]","[""member"", ""member"", ""&&""]"
df1c187f2fdfa48bd36d770bac23f6503fd9b071,Merge branch 'update-curl' into release-3.9,[],Utilities/cmcurl/lib/vauth/digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_12.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_12.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_12.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_57.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_57.cpp,387,386,395,-1,"snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_55.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_55.cpp,"{
  CURLcode result = CURLE_OK;
  size_t i;
  MD5_context *ctxt;
  char *response = NULL;
  unsigned char digest[MD5_DIGEST_LEN];
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  char nonce[64];
  char realm[128];
  char algorithm[64];
  char qop_options[64];
  int qop_values;
  char cnonce[33];
  unsigned int entropy[4];
  char nonceCount[] = ""00000001"";
  char method[]     = ""AUTHENTICATE"";
  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  char *spn         = NULL;

  /* Decode the challenge message */
  result = auth_decode_digest_md5_message(chlg64, nonce, sizeof(nonce),
                                          realm, sizeof(realm),
                                          algorithm, sizeof(algorithm),
                                          qop_options, sizeof(qop_options));
  if(result)
    return result;

  /* We only support md5 sessions */
  if(strcmp(algorithm, ""md5-sess"") != 0)
    return CURLE_BAD_CONTENT_ENCODING;

  /* Get the qop-values from the qop-options */
  result = auth_digest_get_qop_values(qop_options, &qop_values);
  if(result)
    return result;

  /* We only support auth quality-of-protection */
  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
    return CURLE_BAD_CONTENT_ENCODING;

  /* Generate 16 bytes of random data */
  result = Curl_rand(data, &entropy[0], 4);
  if(result)
    return result;

  /* Convert the random data into a 32 byte hex string */
  snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);

  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) userp,
                  curlx_uztoui(strlen(userp)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) realm,
                  curlx_uztoui(strlen(realm)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
                  curlx_uztoui(strlen(passwdp)));
  Curl_MD5_final(ctxt, digest);

  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_final(ctxt, digest);

  /* Convert calculated 16 octet hex into 32 bytes string */
  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate our SPN */
  spn = Curl_auth_build_spn(service, realm, NULL);
  if(!spn)
    return CURLE_OUT_OF_MEMORY;

  /* Calculate H(A2) */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) method,
                  curlx_uztoui(strlen(method)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) spn,
                  curlx_uztoui(strlen(spn)));
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Now calculate the response hash */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
                  curlx_uztoui(strlen(nonceCount)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) qop,
                  curlx_uztoui(strlen(qop)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate the response */
  response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  free(spn);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_55.cpp,"[11, 0, 3, 0, 0, 0, 12, 0, 0, 0, 15, 0, 0, 0, 24, 349, 0, 0, 19, 19, 0, 0, 9, 61, 0, 0, 0, 0, 3, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 0, 272, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 24, 0, 14, 11, 0, 0, 74, 0, 0, 46, 0, 167, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_55.cpp,54,"[""char *"", ""unkown"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""Curl_rand_ret"", ""!""]"
df1c187f2fdfa48bd36d770bac23f6503fd9b071,Merge branch 'update-curl' into release-3.9,[],Utilities/cmcurl/lib/vauth/digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_12.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_12.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_12.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_58.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_58.cpp,684,679,690,-1,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             rnd[0], rnd[1], rnd[2], rnd[3]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_56.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_56.cpp,"{
    unsigned int rnd[4];
    result = Curl_rand(data, &rnd[0], 4);
    if(result)
      return result;
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             rnd[0], rnd[1], rnd[2], rnd[3]);

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_56.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 36, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 31, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 2, 2, 0, 0, 5, 0, 0, 4, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_56.cpp,29,"[""char *"", ""unkown"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""Curl_rand_ret"", ""!""]"
a3ef36f153f51c33ea2154cff17bbf9abb7ee073,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-06-14 (54b636f1)

Resolve a logical conflict in `Utilities/cmcurl/CMakeLists.txt`
by disabling CA bundle/path detection for build within CMake.
CMake already handles locating a CA bundle/path at runtime.",[],Utilities/cmcurl/lib/file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_14.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_14.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_14.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_60.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_60.cpp,475,473,477,476,"snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);","snprintf(header, sizeof(header),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_57.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_57.cpp,"{
    time_t filetime;
    struct tm buffer;
    const struct tm *tm = &buffer;
    snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(result)
      return result;

    result = Curl_client_write(conn, CLIENTWRITE_BOTH,
                               (char *)""Accept-ranges: bytes\r\n"", 0);
    if(result)
      return result;

    filetime = (time_t)statbuf.st_mtime;
    result = Curl_gmtime(filetime, &buffer);
    if(result)
      return result;

    /* format: ""Tue, 15 Nov 1994 12:45:26 GMT"" */
    snprintf(buf, BUFSIZE-1,
             ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
             Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
             tm->tm_mday,
             Curl_month[tm->tm_mon],
             tm->tm_year + 1900,
             tm->tm_hour,
             tm->tm_min,
             tm->tm_sec);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(!result)
      /* set the file size to make it available post transfer */
      Curl_pgrsSetDownloadSize(data, expected_size);
    return result;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_57.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 1, 86, 0, 0, 3, 3, 0, 0, 1, 11, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 1, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 5, 5, 1, 0, 8, 0, 0, 8, 0, 31, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_57.cpp,58,[],"[""member"", ""member"", ""bool"", ""&&"", ""&&""]"
a3ef36f153f51c33ea2154cff17bbf9abb7ee073,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-06-14 (54b636f1)

Resolve a logical conflict in `Utilities/cmcurl/CMakeLists.txt`
by disabling CA bundle/path detection for build within CMake.
CMake already handles locating a CA bundle/path at runtime.",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_15.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_15.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_15.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_62.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_62.cpp,2101,2100,2109,2108,"snprintf(buf, CURL_BUFSIZE(conn->data->set.buffer_size),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);","snprintf(timebuf, sizeof(timebuf),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_58.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_58.cpp,"{
        /* we have a time, reformat it */
        time_t secs=time(NULL);
        /* using the good old yacc/bison yuck */
        snprintf(buf, CURL_BUFSIZE(conn->data->set.buffer_size),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);
        /* now, convert this into a time() value: */
        data->info.filetime = (long)curl_getdate(buf, &secs);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_58.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 26, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_58.cpp,20,"[""char *"", ""CURL_BUFSIZE_ret"", ""string"", ""int"", ""int"", ""int"", ""int"", ""int"", ""int""]","[""int"", ""sscanf_ret"", ""==""]"
a3ef36f153f51c33ea2154cff17bbf9abb7ee073,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-06-14 (54b636f1)

Resolve a logical conflict in `Utilities/cmcurl/CMakeLists.txt`
by disabling CA bundle/path detection for build within CMake.
CMake already handles locating a CA bundle/path at runtime.",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_15.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_15.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_15.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_64.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_64.cpp,2318,2318,2320,2321,"snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);","snprintf(clbuf, sizeof(clbuf),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_59.cpp,"{
      snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);
      result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
      if(result)
        return result;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_59.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_59.cpp,15,[],"[""int"", ""curlx_strtoofft_ret"", ""!=""]"
a3ef36f153f51c33ea2154cff17bbf9abb7ee073,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-06-14 (54b636f1)

Resolve a logical conflict in `Utilities/cmcurl/CMakeLists.txt`
by disabling CA bundle/path detection for build within CMake.
CMake already handles locating a CA bundle/path at runtime.",[],Utilities/cmcurl/lib/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_16.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_16.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_16.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_65.cpp,297,298,299,300,"f(data->state.buffer, CURL_BUFSIZE(data->set.buffer_size),
           ""%s:%s"", user, pwd);","= aprintf(""%s:%s"", user, pwd);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_60.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_60.cpp,"{
  size_t size = 0;
  char *authorization = NULL;
  struct Curl_easy *data = conn->data;
  char **userp;
  const char *user;
  const char *pwd;
  CURLcode result;

  if(proxy) {
    userp = &conn->allocptr.proxyuserpwd;
    user = conn->http_proxy.user;
    pwd = conn->http_proxy.passwd;
  }
  else {
    userp = &conn->allocptr.userpwd;
    user = conn->user;
    pwd = conn->passwd;
  }

  snprintf(data->state.buffer, CURL_BUFSIZE(data->set.buffer_size),
           ""%s:%s"", user, pwd);

  result = Curl_base64_encode(data,
                              data->state.buffer, strlen(data->state.buffer),
                              &authorization, &size);
  if(result)
    return result;

  if(!authorization)
    return CURLE_REMOTE_ACCESS_DENIED;

  free(*userp);
  *userp = aprintf(""%sAuthorization: Basic %s\r\n"",
                   proxy ? ""Proxy-"" : """",
                   authorization);
  free(authorization);
  if(!*userp)
    return CURLE_OUT_OF_MEMORY;

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_60.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 2, 90, 0, 0, 7, 7, 0, 0, 3, 5, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 1, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 5, 5, 2, 0, 7, 0, 0, 11, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_60.cpp,21,"[""member"", ""CURL_BUFSIZE_ret"", ""string"", ""member"", ""member""]",[]
a3ef36f153f51c33ea2154cff17bbf9abb7ee073,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-06-14 (54b636f1)

Resolve a logical conflict in `Utilities/cmcurl/CMakeLists.txt`
by disabling CA bundle/path detection for build within CMake.
CMake already handles locating a CA bundle/path at runtime.",[],Utilities/cmcurl/lib/sendf.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_17.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_17.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_17.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_67.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_67.cpp,243,243,247,248,"vsnprintf(data->state.buffer, BUFSIZE, fmt, ap);","vsnprintf(error, CURL_ERROR_SIZE, fmt, ap);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_61.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_61.cpp,"{
  va_list ap;
  size_t len;
  va_start(ap, fmt);

  vsnprintf(data->state.buffer, BUFSIZE, fmt, ap);

  if(data->set.errorbuffer && !data->state.errorbuf) {
    snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, ""%s"", data->state.buffer);
    data->state.errorbuf = TRUE; /* wrote error string */
  }
  if(data->set.verbose) {
    len = strlen(data->state.buffer);
    if(len < BUFSIZE - 1) {
      data->state.buffer[len] = '\n';
      data->state.buffer[++len] = '\0';
    }
    Curl_debug(data, CURLINFO_TEXT, data->state.buffer, len, NULL);
  }

  va_end(ap);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_61.cpp,"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 71, 0, 0, 2, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 3, 0, 0, 6, 0, 0, 9, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_61.cpp,6,"[""member"", ""macro"", ""const char *"", ""va_list""]",[]
a3ef36f153f51c33ea2154cff17bbf9abb7ee073,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-06-14 (54b636f1)

Resolve a logical conflict in `Utilities/cmcurl/CMakeLists.txt`
by disabling CA bundle/path detection for build within CMake.
CMake already handles locating a CA bundle/path at runtime.",[],Utilities/cmcurl/lib/sendf.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_17.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_17.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_17.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_67.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_67.cpp,243,243,250,252,"snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, ""%s"", data->state.buffer);","strcpy(data->set.errorbuffer, error);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_62.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_62.cpp,"{
    snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, ""%s"", data->state.buffer);
    data->state.errorbuf = TRUE; /* wrote error string */
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_62.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_62.cpp,9,"[""member"", ""macro"", ""string"", ""member""]","[""member"", ""member"", ""&&""]"
a3ef36f153f51c33ea2154cff17bbf9abb7ee073,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-06-14 (54b636f1)

Resolve a logical conflict in `Utilities/cmcurl/CMakeLists.txt`
by disabling CA bundle/path detection for build within CMake.
CMake already handles locating a CA bundle/path at runtime.",[],Utilities/cmcurl/lib/vauth/digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_19.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_19.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_19.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_70.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_70.cpp,387,386,395,-1,"snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_63.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_63.cpp,"{
  CURLcode result = CURLE_OK;
  size_t i;
  MD5_context *ctxt;
  char *response = NULL;
  unsigned char digest[MD5_DIGEST_LEN];
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  char nonce[64];
  char realm[128];
  char algorithm[64];
  char qop_options[64];
  int qop_values;
  char cnonce[33];
  unsigned int entropy[4];
  char nonceCount[] = ""00000001"";
  char method[]     = ""AUTHENTICATE"";
  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  char *spn         = NULL;

  /* Decode the challenge message */
  result = auth_decode_digest_md5_message(chlg64, nonce, sizeof(nonce),
                                          realm, sizeof(realm),
                                          algorithm, sizeof(algorithm),
                                          qop_options, sizeof(qop_options));
  if(result)
    return result;

  /* We only support md5 sessions */
  if(strcmp(algorithm, ""md5-sess"") != 0)
    return CURLE_BAD_CONTENT_ENCODING;

  /* Get the qop-values from the qop-options */
  result = auth_digest_get_qop_values(qop_options, &qop_values);
  if(result)
    return result;

  /* We only support auth quality-of-protection */
  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
    return CURLE_BAD_CONTENT_ENCODING;

  /* Generate 16 bytes of random data */
  result = Curl_rand(data, &entropy[0], 4);
  if(result)
    return result;

  /* Convert the random data into a 32 byte hex string */
  snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);

  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) userp,
                  curlx_uztoui(strlen(userp)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) realm,
                  curlx_uztoui(strlen(realm)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
                  curlx_uztoui(strlen(passwdp)));
  Curl_MD5_final(ctxt, digest);

  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_final(ctxt, digest);

  /* Convert calculated 16 octet hex into 32 bytes string */
  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate our SPN */
  spn = Curl_auth_build_spn(service, realm, NULL);
  if(!spn)
    return CURLE_OUT_OF_MEMORY;

  /* Calculate H(A2) */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) method,
                  curlx_uztoui(strlen(method)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) spn,
                  curlx_uztoui(strlen(spn)));
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Now calculate the response hash */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
                  curlx_uztoui(strlen(nonceCount)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) qop,
                  curlx_uztoui(strlen(qop)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate the response */
  response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  free(spn);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_63.cpp,"[11, 0, 3, 0, 0, 0, 12, 0, 0, 0, 15, 0, 0, 0, 24, 349, 0, 0, 19, 19, 0, 0, 9, 61, 0, 0, 0, 0, 3, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 0, 272, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 24, 0, 14, 11, 0, 0, 74, 0, 0, 46, 0, 167, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_63.cpp,54,"[""char *"", ""unkown"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""Curl_rand_ret"", ""!""]"
a3ef36f153f51c33ea2154cff17bbf9abb7ee073,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-06-14 (54b636f1)

Resolve a logical conflict in `Utilities/cmcurl/CMakeLists.txt`
by disabling CA bundle/path detection for build within CMake.
CMake already handles locating a CA bundle/path at runtime.",[],Utilities/cmcurl/lib/vauth/digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_19.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_19.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_19.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_71.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_71.cpp,684,679,690,-1,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             rnd[0], rnd[1], rnd[2], rnd[3]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_64.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_64.cpp,"{
    unsigned int rnd[4];
    result = Curl_rand(data, &rnd[0], 4);
    if(result)
      return result;
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             rnd[0], rnd[1], rnd[2], rnd[3]);

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_64.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 36, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 31, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 2, 2, 0, 0, 5, 0, 0, 4, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_64.cpp,29,"[""char *"", ""unkown"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""Curl_rand_ret"", ""!""]"
06d6d6c4aee149cd6560b919ef6935ef0867d921,"curl 2017-06-14 (54b636f1)

Code extracted from:

    https://github.com/curl/curl.git

at commit 54b636f14546d3fde9f9c67c3b32701d78563161 (curl-7_54_1).",[],lib/file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_21.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_21.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_21.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_73.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_73.cpp,475,473,477,476,"snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);","snprintf(header, sizeof(header),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_65.cpp,"{
    time_t filetime;
    struct tm buffer;
    const struct tm *tm = &buffer;
    snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(result)
      return result;

    result = Curl_client_write(conn, CLIENTWRITE_BOTH,
                               (char *)""Accept-ranges: bytes\r\n"", 0);
    if(result)
      return result;

    filetime = (time_t)statbuf.st_mtime;
    result = Curl_gmtime(filetime, &buffer);
    if(result)
      return result;

    /* format: ""Tue, 15 Nov 1994 12:45:26 GMT"" */
    snprintf(buf, BUFSIZE-1,
             ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
             Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
             tm->tm_mday,
             Curl_month[tm->tm_mon],
             tm->tm_year + 1900,
             tm->tm_hour,
             tm->tm_min,
             tm->tm_sec);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(!result)
      /* set the file size to make it available post transfer */
      Curl_pgrsSetDownloadSize(data, expected_size);
    return result;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_65.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 1, 86, 0, 0, 3, 3, 0, 0, 1, 11, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 1, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 5, 5, 1, 0, 8, 0, 0, 8, 0, 31, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_65.cpp,58,[],"[""member"", ""member"", ""bool"", ""&&"", ""&&""]"
06d6d6c4aee149cd6560b919ef6935ef0867d921,"curl 2017-06-14 (54b636f1)

Code extracted from:

    https://github.com/curl/curl.git

at commit 54b636f14546d3fde9f9c67c3b32701d78563161 (curl-7_54_1).",[],lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_22.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_22.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_22.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_75.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_75.cpp,2101,2100,2109,2108,"snprintf(buf, CURL_BUFSIZE(conn->data->set.buffer_size),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);","snprintf(timebuf, sizeof(timebuf),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_66.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_66.cpp,"{
        /* we have a time, reformat it */
        time_t secs=time(NULL);
        /* using the good old yacc/bison yuck */
        snprintf(buf, CURL_BUFSIZE(conn->data->set.buffer_size),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);
        /* now, convert this into a time() value: */
        data->info.filetime = (long)curl_getdate(buf, &secs);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_66.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 26, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_66.cpp,20,"[""char *"", ""CURL_BUFSIZE_ret"", ""string"", ""int"", ""int"", ""int"", ""int"", ""int"", ""int""]","[""int"", ""sscanf_ret"", ""==""]"
06d6d6c4aee149cd6560b919ef6935ef0867d921,"curl 2017-06-14 (54b636f1)

Code extracted from:

    https://github.com/curl/curl.git

at commit 54b636f14546d3fde9f9c67c3b32701d78563161 (curl-7_54_1).",[],lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_22.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_22.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_22.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_77.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_77.cpp,2318,2318,2320,2321,"snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);","snprintf(clbuf, sizeof(clbuf),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_67.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_67.cpp,"{
      snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);
      result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
      if(result)
        return result;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_67.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_67.cpp,15,[],"[""int"", ""curlx_strtoofft_ret"", ""!=""]"
06d6d6c4aee149cd6560b919ef6935ef0867d921,"curl 2017-06-14 (54b636f1)

Code extracted from:

    https://github.com/curl/curl.git

at commit 54b636f14546d3fde9f9c67c3b32701d78563161 (curl-7_54_1).",[],lib/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_23.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_23.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_23.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_78.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_78.cpp,297,298,299,300,"f(data->state.buffer, CURL_BUFSIZE(data->set.buffer_size),
           ""%s:%s"", user, pwd);","= aprintf(""%s:%s"", user, pwd);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_68.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_68.cpp,"{
  size_t size = 0;
  char *authorization = NULL;
  struct Curl_easy *data = conn->data;
  char **userp;
  const char *user;
  const char *pwd;
  CURLcode result;

  if(proxy) {
    userp = &conn->allocptr.proxyuserpwd;
    user = conn->http_proxy.user;
    pwd = conn->http_proxy.passwd;
  }
  else {
    userp = &conn->allocptr.userpwd;
    user = conn->user;
    pwd = conn->passwd;
  }

  snprintf(data->state.buffer, CURL_BUFSIZE(data->set.buffer_size),
           ""%s:%s"", user, pwd);

  result = Curl_base64_encode(data,
                              data->state.buffer, strlen(data->state.buffer),
                              &authorization, &size);
  if(result)
    return result;

  if(!authorization)
    return CURLE_REMOTE_ACCESS_DENIED;

  free(*userp);
  *userp = aprintf(""%sAuthorization: Basic %s\r\n"",
                   proxy ? ""Proxy-"" : """",
                   authorization);
  free(authorization);
  if(!*userp)
    return CURLE_OUT_OF_MEMORY;

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_68.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 2, 90, 0, 0, 7, 7, 0, 0, 3, 5, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 1, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 5, 5, 2, 0, 7, 0, 0, 11, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_68.cpp,21,"[""member"", ""CURL_BUFSIZE_ret"", ""string"", ""member"", ""member""]",[]
06d6d6c4aee149cd6560b919ef6935ef0867d921,"curl 2017-06-14 (54b636f1)

Code extracted from:

    https://github.com/curl/curl.git

at commit 54b636f14546d3fde9f9c67c3b32701d78563161 (curl-7_54_1).",[],lib/sendf.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_24.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_24.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_24.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_80.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_80.cpp,243,243,247,248,"vsnprintf(data->state.buffer, BUFSIZE, fmt, ap);","vsnprintf(error, CURL_ERROR_SIZE, fmt, ap);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_69.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_69.cpp,"{
  va_list ap;
  size_t len;
  va_start(ap, fmt);

  vsnprintf(data->state.buffer, BUFSIZE, fmt, ap);

  if(data->set.errorbuffer && !data->state.errorbuf) {
    snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, ""%s"", data->state.buffer);
    data->state.errorbuf = TRUE; /* wrote error string */
  }
  if(data->set.verbose) {
    len = strlen(data->state.buffer);
    if(len < BUFSIZE - 1) {
      data->state.buffer[len] = '\n';
      data->state.buffer[++len] = '\0';
    }
    Curl_debug(data, CURLINFO_TEXT, data->state.buffer, len, NULL);
  }

  va_end(ap);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_69.cpp,"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 71, 0, 0, 2, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 3, 0, 0, 6, 0, 0, 9, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_69.cpp,6,"[""member"", ""macro"", ""const char *"", ""va_list""]",[]
06d6d6c4aee149cd6560b919ef6935ef0867d921,"curl 2017-06-14 (54b636f1)

Code extracted from:

    https://github.com/curl/curl.git

at commit 54b636f14546d3fde9f9c67c3b32701d78563161 (curl-7_54_1).",[],lib/sendf.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_24.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_24.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_24.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_80.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_80.cpp,243,243,250,252,"snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, ""%s"", data->state.buffer);","strcpy(data->set.errorbuffer, error);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_70.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_70.cpp,"{
    snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, ""%s"", data->state.buffer);
    data->state.errorbuf = TRUE; /* wrote error string */
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_70.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_70.cpp,9,"[""member"", ""macro"", ""string"", ""member""]","[""member"", ""member"", ""&&""]"
06d6d6c4aee149cd6560b919ef6935ef0867d921,"curl 2017-06-14 (54b636f1)

Code extracted from:

    https://github.com/curl/curl.git

at commit 54b636f14546d3fde9f9c67c3b32701d78563161 (curl-7_54_1).",[],lib/vauth/digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_26.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_26.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_26.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_83.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_83.cpp,387,386,395,-1,"snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_71.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_71.cpp,"{
  CURLcode result = CURLE_OK;
  size_t i;
  MD5_context *ctxt;
  char *response = NULL;
  unsigned char digest[MD5_DIGEST_LEN];
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  char nonce[64];
  char realm[128];
  char algorithm[64];
  char qop_options[64];
  int qop_values;
  char cnonce[33];
  unsigned int entropy[4];
  char nonceCount[] = ""00000001"";
  char method[]     = ""AUTHENTICATE"";
  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  char *spn         = NULL;

  /* Decode the challenge message */
  result = auth_decode_digest_md5_message(chlg64, nonce, sizeof(nonce),
                                          realm, sizeof(realm),
                                          algorithm, sizeof(algorithm),
                                          qop_options, sizeof(qop_options));
  if(result)
    return result;

  /* We only support md5 sessions */
  if(strcmp(algorithm, ""md5-sess"") != 0)
    return CURLE_BAD_CONTENT_ENCODING;

  /* Get the qop-values from the qop-options */
  result = auth_digest_get_qop_values(qop_options, &qop_values);
  if(result)
    return result;

  /* We only support auth quality-of-protection */
  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
    return CURLE_BAD_CONTENT_ENCODING;

  /* Generate 16 bytes of random data */
  result = Curl_rand(data, &entropy[0], 4);
  if(result)
    return result;

  /* Convert the random data into a 32 byte hex string */
  snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);

  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) userp,
                  curlx_uztoui(strlen(userp)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) realm,
                  curlx_uztoui(strlen(realm)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
                  curlx_uztoui(strlen(passwdp)));
  Curl_MD5_final(ctxt, digest);

  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_final(ctxt, digest);

  /* Convert calculated 16 octet hex into 32 bytes string */
  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate our SPN */
  spn = Curl_auth_build_spn(service, realm, NULL);
  if(!spn)
    return CURLE_OUT_OF_MEMORY;

  /* Calculate H(A2) */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) method,
                  curlx_uztoui(strlen(method)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) spn,
                  curlx_uztoui(strlen(spn)));
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Now calculate the response hash */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
                  curlx_uztoui(strlen(nonceCount)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) qop,
                  curlx_uztoui(strlen(qop)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate the response */
  response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  free(spn);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_71.cpp,"[11, 0, 3, 0, 0, 0, 12, 0, 0, 0, 15, 0, 0, 0, 24, 349, 0, 0, 19, 19, 0, 0, 9, 61, 0, 0, 0, 0, 3, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 0, 272, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 24, 0, 14, 11, 0, 0, 74, 0, 0, 46, 0, 167, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_71.cpp,54,"[""char *"", ""unkown"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""Curl_rand_ret"", ""!""]"
06d6d6c4aee149cd6560b919ef6935ef0867d921,"curl 2017-06-14 (54b636f1)

Code extracted from:

    https://github.com/curl/curl.git

at commit 54b636f14546d3fde9f9c67c3b32701d78563161 (curl-7_54_1).",[],lib/vauth/digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_26.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_26.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_26.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_84.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_84.cpp,684,679,690,-1,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             rnd[0], rnd[1], rnd[2], rnd[3]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_72.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_72.cpp,"{
    unsigned int rnd[4];
    result = Curl_rand(data, &rnd[0], 4);
    if(result)
      return result;
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             rnd[0], rnd[1], rnd[2], rnd[3]);

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_72.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 36, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 31, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 2, 2, 0, 0, 5, 0, 0, 4, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_72.cpp,29,"[""char *"", ""unkown"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""Curl_rand_ret"", ""!""]"
16ebd9f6152fedd1804f13c91ed14e8963e53d3f,"Merge branch 'upstream-KWSys' into update-kwsys

* upstream-KWSys:
  KWSys 2017-05-16 (fe1f22ce)",[],Source/kwsys/ProcessUNIX.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_29.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_29.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_29.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_88.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_88.cpp,2243,2273,2246,2276,"sprintf(cp->ExitExceptionString, ""Signal %d"", sig);","sprintf(cp->ProcessResults[idx].ExitExceptionString, ""Signal %d"", sig);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_74.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_74.cpp,"{
#ifdef SIGSEGV
    case SIGSEGV:
      KWSYSPE_CASE(Fault, ""Segmentation fault"");
      break;
#endif
#ifdef SIGBUS
#if !defined(SIGSEGV) || SIGBUS != SIGSEGV
    case SIGBUS:
      KWSYSPE_CASE(Fault, ""Bus error"");
      break;
#endif
#endif
#ifdef SIGFPE
    case SIGFPE:
      KWSYSPE_CASE(Numerical, ""Floating-point exception"");
      break;
#endif
#ifdef SIGILL
    case SIGILL:
      KWSYSPE_CASE(Illegal, ""Illegal instruction"");
      break;
#endif
#ifdef SIGINT
    case SIGINT:
      KWSYSPE_CASE(Interrupt, ""User interrupt"");
      break;
#endif
#ifdef SIGABRT
    case SIGABRT:
      KWSYSPE_CASE(Other, ""Child aborted"");
      break;
#endif
#ifdef SIGKILL
    case SIGKILL:
      KWSYSPE_CASE(Other, ""Child killed"");
      break;
#endif
#ifdef SIGTERM
    case SIGTERM:
      KWSYSPE_CASE(Other, ""Child terminated"");
      break;
#endif
#ifdef SIGHUP
    case SIGHUP:
      KWSYSPE_CASE(Other, ""SIGHUP"");
      break;
#endif
#ifdef SIGQUIT
    case SIGQUIT:
      KWSYSPE_CASE(Other, ""SIGQUIT"");
      break;
#endif
#ifdef SIGTRAP
    case SIGTRAP:
      KWSYSPE_CASE(Other, ""SIGTRAP"");
      break;
#endif
#ifdef SIGIOT
#if !defined(SIGABRT) || SIGIOT != SIGABRT
    case SIGIOT:
      KWSYSPE_CASE(Other, ""SIGIOT"");
      break;
#endif
#endif
#ifdef SIGUSR1
    case SIGUSR1:
      KWSYSPE_CASE(Other, ""SIGUSR1"");
      break;
#endif
#ifdef SIGUSR2
    case SIGUSR2:
      KWSYSPE_CASE(Other, ""SIGUSR2"");
      break;
#endif
#ifdef SIGPIPE
    case SIGPIPE:
      KWSYSPE_CASE(Other, ""SIGPIPE"");
      break;
#endif
#ifdef SIGALRM
    case SIGALRM:
      KWSYSPE_CASE(Other, ""SIGALRM"");
      break;
#endif
#ifdef SIGSTKFLT
    case SIGSTKFLT:
      KWSYSPE_CASE(Other, ""SIGSTKFLT"");
      break;
#endif
#ifdef SIGCHLD
    case SIGCHLD:
      KWSYSPE_CASE(Other, ""SIGCHLD"");
      break;
#elif defined(SIGCLD)
    case SIGCLD:
      KWSYSPE_CASE(Other, ""SIGCLD"");
      break;
#endif
#ifdef SIGCONT
    case SIGCONT:
      KWSYSPE_CASE(Other, ""SIGCONT"");
      break;
#endif
#ifdef SIGSTOP
    case SIGSTOP:
      KWSYSPE_CASE(Other, ""SIGSTOP"");
      break;
#endif
#ifdef SIGTSTP
    case SIGTSTP:
      KWSYSPE_CASE(Other, ""SIGTSTP"");
      break;
#endif
#ifdef SIGTTIN
    case SIGTTIN:
      KWSYSPE_CASE(Other, ""SIGTTIN"");
      break;
#endif
#ifdef SIGTTOU
    case SIGTTOU:
      KWSYSPE_CASE(Other, ""SIGTTOU"");
      break;
#endif
#ifdef SIGURG
    case SIGURG:
      KWSYSPE_CASE(Other, ""SIGURG"");
      break;
#endif
#ifdef SIGXCPU
    case SIGXCPU:
      KWSYSPE_CASE(Other, ""SIGXCPU"");
      break;
#endif
#ifdef SIGXFSZ
    case SIGXFSZ:
      KWSYSPE_CASE(Other, ""SIGXFSZ"");
      break;
#endif
#ifdef SIGVTALRM
    case SIGVTALRM:
      KWSYSPE_CASE(Other, ""SIGVTALRM"");
      break;
#endif
#ifdef SIGPROF
    case SIGPROF:
      KWSYSPE_CASE(Other, ""SIGPROF"");
      break;
#endif
#ifdef SIGWINCH
    case SIGWINCH:
      KWSYSPE_CASE(Other, ""SIGWINCH"");
      break;
#endif
#ifdef SIGPOLL
    case SIGPOLL:
      KWSYSPE_CASE(Other, ""SIGPOLL"");
      break;
#endif
#ifdef SIGIO
#if !defined(SIGPOLL) || SIGIO != SIGPOLL
    case SIGIO:
      KWSYSPE_CASE(Other, ""SIGIO"");
      break;
#endif
#endif
#ifdef SIGPWR
    case SIGPWR:
      KWSYSPE_CASE(Other, ""SIGPWR"");
      break;
#endif
#ifdef SIGSYS
    case SIGSYS:
      KWSYSPE_CASE(Other, ""SIGSYS"");
      break;
#endif
#ifdef SIGUNUSED
#if !defined(SIGSYS) || SIGUNUSED != SIGSYS
    case SIGUNUSED:
      KWSYSPE_CASE(Other, ""SIGUNUSED"");
      break;
#endif
#endif
    default:
      cp->ExitException = kwsysProcess_Exception_Other;
      sprintf(cp->ExitExceptionString, ""Signal %d"", sig);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_74.cpp,"[4, 0, 0, 0, 36, 0, 0, 0, 35, 1, 1, 0, 0, 0, 0, 166, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 37, 0, 78, 77, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_74.cpp,187,"[""member"", ""string"", ""int""]","[""int""]"
16ebd9f6152fedd1804f13c91ed14e8963e53d3f,"Merge branch 'upstream-KWSys' into update-kwsys

* upstream-KWSys:
  KWSys 2017-05-16 (fe1f22ce)",[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_30.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_30.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_30.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_89.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_89.cpp,2120,2142,2123,2145,"_snprintf(cp->ExitExceptionString, KWSYSPE_PIPE_BUFFER_SIZE,
                ""Exit code 0x%x\n"", code);","_snprintf(cp->ProcessResults[idx].ExitExceptionString,
                KWSYSPE_PIPE_BUFFER_SIZE, ""Exit code 0x%x\n"", code);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_75.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_75.cpp,"{
    case STATUS_CONTROL_C_EXIT:
      KWSYSPE_CASE(Interrupt, ""User interrupt"");
      break;

    case STATUS_FLOAT_DENORMAL_OPERAND:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (denormal operand)"");
      break;
    case STATUS_FLOAT_DIVIDE_BY_ZERO:
      KWSYSPE_CASE(Numerical, ""Divide-by-zero"");
      break;
    case STATUS_FLOAT_INEXACT_RESULT:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (inexact result)"");
      break;
    case STATUS_FLOAT_INVALID_OPERATION:
      KWSYSPE_CASE(Numerical, ""Invalid floating-point operation"");
      break;
    case STATUS_FLOAT_OVERFLOW:
      KWSYSPE_CASE(Numerical, ""Floating-point overflow"");
      break;
    case STATUS_FLOAT_STACK_CHECK:
      KWSYSPE_CASE(Numerical, ""Floating-point stack check failed"");
      break;
    case STATUS_FLOAT_UNDERFLOW:
      KWSYSPE_CASE(Numerical, ""Floating-point underflow"");
      break;
#ifdef STATUS_FLOAT_MULTIPLE_FAULTS
    case STATUS_FLOAT_MULTIPLE_FAULTS:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (multiple faults)"");
      break;
#endif
#ifdef STATUS_FLOAT_MULTIPLE_TRAPS
    case STATUS_FLOAT_MULTIPLE_TRAPS:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (multiple traps)"");
      break;
#endif
    case STATUS_INTEGER_DIVIDE_BY_ZERO:
      KWSYSPE_CASE(Numerical, ""Integer divide-by-zero"");
      break;
    case STATUS_INTEGER_OVERFLOW:
      KWSYSPE_CASE(Numerical, ""Integer overflow"");
      break;

    case STATUS_DATATYPE_MISALIGNMENT:
      KWSYSPE_CASE(Fault, ""Datatype misalignment"");
      break;
    case STATUS_ACCESS_VIOLATION:
      KWSYSPE_CASE(Fault, ""Access violation"");
      break;
    case STATUS_IN_PAGE_ERROR:
      KWSYSPE_CASE(Fault, ""In-page error"");
      break;
    case STATUS_INVALID_HANDLE:
      KWSYSPE_CASE(Fault, ""Invalid hanlde"");
      break;
    case STATUS_NONCONTINUABLE_EXCEPTION:
      KWSYSPE_CASE(Fault, ""Noncontinuable exception"");
      break;
    case STATUS_INVALID_DISPOSITION:
      KWSYSPE_CASE(Fault, ""Invalid disposition"");
      break;
    case STATUS_ARRAY_BOUNDS_EXCEEDED:
      KWSYSPE_CASE(Fault, ""Array bounds exceeded"");
      break;
    case STATUS_STACK_OVERFLOW:
      KWSYSPE_CASE(Fault, ""Stack overflow"");
      break;

    case STATUS_ILLEGAL_INSTRUCTION:
      KWSYSPE_CASE(Illegal, ""Illegal instruction"");
      break;
    case STATUS_PRIVILEGED_INSTRUCTION:
      KWSYSPE_CASE(Illegal, ""Privileged instruction"");
      break;

    case STATUS_NO_MEMORY:
    default:
      cp->ExitException = kwsysProcess_Exception_Other;
      _snprintf(cp->ExitExceptionString, KWSYSPE_PIPE_BUFFER_SIZE,
                ""Exit code 0x%x\n"", code);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_75.cpp,"[0, 0, 0, 0, 23, 0, 0, 0, 23, 1, 1, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 24, 0, 48, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_75.cpp,80,"[""member"", ""macro"", ""string"", ""int""]","[""int""]"
7be70ca6cc888df532d2f1560e74d13642730ee5,"KWSys 2017-05-16 (fe1f22ce)

Code extracted from:

    https://gitlab.kitware.com/utils/kwsys.git

at commit fe1f22ceefdae18df33e5bab8483fec7a82d4cee (master).

Upstream Shortlog
-----------------

Adam Weisi (3):
      8a799e36 Process: Improve definition ordering in header file
      7d56ef24 Process: Save results from all children internally
      b7eba998 Process: Add APIs to get results of individual processes

Ben Boeckel (2):
      cea71543 style: remove separator comments
      874dc559 style: help clang-format near macros",[],ProcessUNIX.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_32.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_32.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_32.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_91.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_91.cpp,2243,2273,2246,2276,"sprintf(cp->ExitExceptionString, ""Signal %d"", sig);","sprintf(cp->ProcessResults[idx].ExitExceptionString, ""Signal %d"", sig);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_76.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_76.cpp,"{
#ifdef SIGSEGV
    case SIGSEGV:
      KWSYSPE_CASE(Fault, ""Segmentation fault"");
      break;
#endif
#ifdef SIGBUS
#if !defined(SIGSEGV) || SIGBUS != SIGSEGV
    case SIGBUS:
      KWSYSPE_CASE(Fault, ""Bus error"");
      break;
#endif
#endif
#ifdef SIGFPE
    case SIGFPE:
      KWSYSPE_CASE(Numerical, ""Floating-point exception"");
      break;
#endif
#ifdef SIGILL
    case SIGILL:
      KWSYSPE_CASE(Illegal, ""Illegal instruction"");
      break;
#endif
#ifdef SIGINT
    case SIGINT:
      KWSYSPE_CASE(Interrupt, ""User interrupt"");
      break;
#endif
#ifdef SIGABRT
    case SIGABRT:
      KWSYSPE_CASE(Other, ""Child aborted"");
      break;
#endif
#ifdef SIGKILL
    case SIGKILL:
      KWSYSPE_CASE(Other, ""Child killed"");
      break;
#endif
#ifdef SIGTERM
    case SIGTERM:
      KWSYSPE_CASE(Other, ""Child terminated"");
      break;
#endif
#ifdef SIGHUP
    case SIGHUP:
      KWSYSPE_CASE(Other, ""SIGHUP"");
      break;
#endif
#ifdef SIGQUIT
    case SIGQUIT:
      KWSYSPE_CASE(Other, ""SIGQUIT"");
      break;
#endif
#ifdef SIGTRAP
    case SIGTRAP:
      KWSYSPE_CASE(Other, ""SIGTRAP"");
      break;
#endif
#ifdef SIGIOT
#if !defined(SIGABRT) || SIGIOT != SIGABRT
    case SIGIOT:
      KWSYSPE_CASE(Other, ""SIGIOT"");
      break;
#endif
#endif
#ifdef SIGUSR1
    case SIGUSR1:
      KWSYSPE_CASE(Other, ""SIGUSR1"");
      break;
#endif
#ifdef SIGUSR2
    case SIGUSR2:
      KWSYSPE_CASE(Other, ""SIGUSR2"");
      break;
#endif
#ifdef SIGPIPE
    case SIGPIPE:
      KWSYSPE_CASE(Other, ""SIGPIPE"");
      break;
#endif
#ifdef SIGALRM
    case SIGALRM:
      KWSYSPE_CASE(Other, ""SIGALRM"");
      break;
#endif
#ifdef SIGSTKFLT
    case SIGSTKFLT:
      KWSYSPE_CASE(Other, ""SIGSTKFLT"");
      break;
#endif
#ifdef SIGCHLD
    case SIGCHLD:
      KWSYSPE_CASE(Other, ""SIGCHLD"");
      break;
#elif defined(SIGCLD)
    case SIGCLD:
      KWSYSPE_CASE(Other, ""SIGCLD"");
      break;
#endif
#ifdef SIGCONT
    case SIGCONT:
      KWSYSPE_CASE(Other, ""SIGCONT"");
      break;
#endif
#ifdef SIGSTOP
    case SIGSTOP:
      KWSYSPE_CASE(Other, ""SIGSTOP"");
      break;
#endif
#ifdef SIGTSTP
    case SIGTSTP:
      KWSYSPE_CASE(Other, ""SIGTSTP"");
      break;
#endif
#ifdef SIGTTIN
    case SIGTTIN:
      KWSYSPE_CASE(Other, ""SIGTTIN"");
      break;
#endif
#ifdef SIGTTOU
    case SIGTTOU:
      KWSYSPE_CASE(Other, ""SIGTTOU"");
      break;
#endif
#ifdef SIGURG
    case SIGURG:
      KWSYSPE_CASE(Other, ""SIGURG"");
      break;
#endif
#ifdef SIGXCPU
    case SIGXCPU:
      KWSYSPE_CASE(Other, ""SIGXCPU"");
      break;
#endif
#ifdef SIGXFSZ
    case SIGXFSZ:
      KWSYSPE_CASE(Other, ""SIGXFSZ"");
      break;
#endif
#ifdef SIGVTALRM
    case SIGVTALRM:
      KWSYSPE_CASE(Other, ""SIGVTALRM"");
      break;
#endif
#ifdef SIGPROF
    case SIGPROF:
      KWSYSPE_CASE(Other, ""SIGPROF"");
      break;
#endif
#ifdef SIGWINCH
    case SIGWINCH:
      KWSYSPE_CASE(Other, ""SIGWINCH"");
      break;
#endif
#ifdef SIGPOLL
    case SIGPOLL:
      KWSYSPE_CASE(Other, ""SIGPOLL"");
      break;
#endif
#ifdef SIGIO
#if !defined(SIGPOLL) || SIGIO != SIGPOLL
    case SIGIO:
      KWSYSPE_CASE(Other, ""SIGIO"");
      break;
#endif
#endif
#ifdef SIGPWR
    case SIGPWR:
      KWSYSPE_CASE(Other, ""SIGPWR"");
      break;
#endif
#ifdef SIGSYS
    case SIGSYS:
      KWSYSPE_CASE(Other, ""SIGSYS"");
      break;
#endif
#ifdef SIGUNUSED
#if !defined(SIGSYS) || SIGUNUSED != SIGSYS
    case SIGUNUSED:
      KWSYSPE_CASE(Other, ""SIGUNUSED"");
      break;
#endif
#endif
    default:
      cp->ExitException = kwsysProcess_Exception_Other;
      sprintf(cp->ExitExceptionString, ""Signal %d"", sig);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_76.cpp,"[4, 0, 0, 0, 36, 0, 0, 0, 35, 1, 1, 0, 0, 0, 0, 166, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 37, 0, 78, 77, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_76.cpp,187,"[""member"", ""string"", ""int""]","[""int""]"
7be70ca6cc888df532d2f1560e74d13642730ee5,"KWSys 2017-05-16 (fe1f22ce)

Code extracted from:

    https://gitlab.kitware.com/utils/kwsys.git

at commit fe1f22ceefdae18df33e5bab8483fec7a82d4cee (master).

Upstream Shortlog
-----------------

Adam Weisi (3):
      8a799e36 Process: Improve definition ordering in header file
      7d56ef24 Process: Save results from all children internally
      b7eba998 Process: Add APIs to get results of individual processes

Ben Boeckel (2):
      cea71543 style: remove separator comments
      874dc559 style: help clang-format near macros",[],ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_33.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_33.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_33.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_92.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_92.cpp,2120,2142,2123,2145,"_snprintf(cp->ExitExceptionString, KWSYSPE_PIPE_BUFFER_SIZE,
                ""Exit code 0x%x\n"", code);","_snprintf(cp->ProcessResults[idx].ExitExceptionString,
                KWSYSPE_PIPE_BUFFER_SIZE, ""Exit code 0x%x\n"", code);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_77.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_77.cpp,"{
    case STATUS_CONTROL_C_EXIT:
      KWSYSPE_CASE(Interrupt, ""User interrupt"");
      break;

    case STATUS_FLOAT_DENORMAL_OPERAND:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (denormal operand)"");
      break;
    case STATUS_FLOAT_DIVIDE_BY_ZERO:
      KWSYSPE_CASE(Numerical, ""Divide-by-zero"");
      break;
    case STATUS_FLOAT_INEXACT_RESULT:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (inexact result)"");
      break;
    case STATUS_FLOAT_INVALID_OPERATION:
      KWSYSPE_CASE(Numerical, ""Invalid floating-point operation"");
      break;
    case STATUS_FLOAT_OVERFLOW:
      KWSYSPE_CASE(Numerical, ""Floating-point overflow"");
      break;
    case STATUS_FLOAT_STACK_CHECK:
      KWSYSPE_CASE(Numerical, ""Floating-point stack check failed"");
      break;
    case STATUS_FLOAT_UNDERFLOW:
      KWSYSPE_CASE(Numerical, ""Floating-point underflow"");
      break;
#ifdef STATUS_FLOAT_MULTIPLE_FAULTS
    case STATUS_FLOAT_MULTIPLE_FAULTS:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (multiple faults)"");
      break;
#endif
#ifdef STATUS_FLOAT_MULTIPLE_TRAPS
    case STATUS_FLOAT_MULTIPLE_TRAPS:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (multiple traps)"");
      break;
#endif
    case STATUS_INTEGER_DIVIDE_BY_ZERO:
      KWSYSPE_CASE(Numerical, ""Integer divide-by-zero"");
      break;
    case STATUS_INTEGER_OVERFLOW:
      KWSYSPE_CASE(Numerical, ""Integer overflow"");
      break;

    case STATUS_DATATYPE_MISALIGNMENT:
      KWSYSPE_CASE(Fault, ""Datatype misalignment"");
      break;
    case STATUS_ACCESS_VIOLATION:
      KWSYSPE_CASE(Fault, ""Access violation"");
      break;
    case STATUS_IN_PAGE_ERROR:
      KWSYSPE_CASE(Fault, ""In-page error"");
      break;
    case STATUS_INVALID_HANDLE:
      KWSYSPE_CASE(Fault, ""Invalid hanlde"");
      break;
    case STATUS_NONCONTINUABLE_EXCEPTION:
      KWSYSPE_CASE(Fault, ""Noncontinuable exception"");
      break;
    case STATUS_INVALID_DISPOSITION:
      KWSYSPE_CASE(Fault, ""Invalid disposition"");
      break;
    case STATUS_ARRAY_BOUNDS_EXCEEDED:
      KWSYSPE_CASE(Fault, ""Array bounds exceeded"");
      break;
    case STATUS_STACK_OVERFLOW:
      KWSYSPE_CASE(Fault, ""Stack overflow"");
      break;

    case STATUS_ILLEGAL_INSTRUCTION:
      KWSYSPE_CASE(Illegal, ""Illegal instruction"");
      break;
    case STATUS_PRIVILEGED_INSTRUCTION:
      KWSYSPE_CASE(Illegal, ""Privileged instruction"");
      break;

    case STATUS_NO_MEMORY:
    default:
      cp->ExitException = kwsysProcess_Exception_Other;
      _snprintf(cp->ExitExceptionString, KWSYSPE_PIPE_BUFFER_SIZE,
                ""Exit code 0x%x\n"", code);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_77.cpp,"[0, 0, 0, 0, 23, 0, 0, 0, 23, 1, 1, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 24, 0, 48, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_77.cpp,80,"[""member"", ""macro"", ""string"", ""int""]","[""int""]"
299975908ada992800791fac7f3739050e0ae2a9,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-04-19 (d957e218)

Resolve conflicts in `CMakeLists.txt` in favor of the upstream version.
We will re-apply our logic as needed in following commits.",[],Utilities/cmcurl/lib/conncache.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_35.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_35.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_35.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_94.cpp,141,136,143,141,"aprintf(""%s:%d"", hostname, conn->port);","snprintf(buf, len, ""%ld%s"", conn->port, hostname);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_78.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_78.cpp,"{
  const char *hostname;

  if(conn->bits.socksproxy)
    hostname = conn->socks_proxy.host.name;
  else if(conn->bits.httpproxy)
    hostname = conn->http_proxy.host.name;
  else if(conn->bits.conn_to_host)
    hostname = conn->conn_to_host.name;
  else
    hostname = conn->host.name;

  return aprintf(""%s:%d"", hostname, conn->port);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_78.cpp,"[3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 1, 41, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 3, 1, 0, 1, 0, 0, 4, 2, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_78.cpp,13,"[""string"", ""member"", ""member""]",[]
299975908ada992800791fac7f3739050e0ae2a9,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-04-19 (d957e218)

Resolve conflicts in `CMakeLists.txt` in favor of the upstream version.
We will re-apply our logic as needed in following commits.",[],Utilities/cmcurl/lib/file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_36.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_36.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_36.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_95.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_95.cpp,476,475,478,477,"snprintf(buf, sizeof(data->state.buffer),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);","snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_79.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_79.cpp,"{
    time_t filetime;
    struct tm buffer;
    const struct tm *tm = &buffer;
    snprintf(buf, sizeof(data->state.buffer),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(result)
      return result;

    result = Curl_client_write(conn, CLIENTWRITE_BOTH,
                               (char *)""Accept-ranges: bytes\r\n"", 0);
    if(result)
      return result;

    filetime = (time_t)statbuf.st_mtime;
    result = Curl_gmtime(filetime, &buffer);
    if(result)
      return result;

    /* format: ""Tue, 15 Nov 1994 12:45:26 GMT"" */
    snprintf(buf, BUFSIZE-1,
             ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
             Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
             tm->tm_mday,
             Curl_month[tm->tm_mon],
             tm->tm_year + 1900,
             tm->tm_hour,
             tm->tm_min,
             tm->tm_sec);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(!result)
      /* set the file size to make it available post transfer */
      Curl_pgrsSetDownloadSize(data, expected_size);
    return result;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_79.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 1, 85, 0, 0, 3, 3, 0, 0, 1, 11, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 1, 53, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 5, 5, 1, 0, 8, 0, 0, 8, 0, 31, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_79.cpp,58,[],"[""member"", ""member"", ""bool"", ""&&"", ""&&""]"
299975908ada992800791fac7f3739050e0ae2a9,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-04-19 (d957e218)

Resolve conflicts in `CMakeLists.txt` in favor of the upstream version.
We will re-apply our logic as needed in following commits.",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_37.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_37.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_37.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_96.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_96.cpp,2107,2107,2109,2109,"snprintf(buf, sizeof(conn->data->state.buffer),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);","snprintf(buf, CURL_BUFSIZE(conn->data->set.buffer_size),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_80.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_80.cpp,"{
        /* we have a time, reformat it */
        time_t secs=time(NULL);
        /* using the good old yacc/bison yuck */
        snprintf(buf, sizeof(conn->data->state.buffer),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);
        /* now, convert this into a time() value: */
        data->info.filetime = (long)curl_getdate(buf, &secs);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_80.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 25, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 16, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_80.cpp,20,"[""char *"", ""member"", ""string"", ""int"", ""int"", ""int"", ""int"", ""int"", ""int""]","[""int"", ""sscanf_ret"", ""==""]"
299975908ada992800791fac7f3739050e0ae2a9,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-04-19 (d957e218)

Resolve conflicts in `CMakeLists.txt` in favor of the upstream version.
We will re-apply our logic as needed in following commits.",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_37.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_37.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_37.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_97.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_97.cpp,2318,2318,2320,2320,"snprintf(buf, sizeof(data->state.buffer),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);","snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_81.cpp,"{
      snprintf(buf, sizeof(data->state.buffer),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);
      result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
      if(result)
        return result;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_81.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 13, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_81.cpp,15,[],"[""int"", ""curlx_strtoofft_ret"", ""!=""]"
299975908ada992800791fac7f3739050e0ae2a9,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-04-19 (d957e218)

Resolve conflicts in `CMakeLists.txt` in favor of the upstream version.
We will re-apply our logic as needed in following commits.",[],Utilities/cmcurl/lib/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_38.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_38.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_38.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_99.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_99.cpp,297,297,299,299,"f(data->state.buffer, sizeof(data->state.buffer), ""%s:%s"", user, pwd);","f(data->state.buffer, CURL_BUFSIZE(data->set.buffer_size),
           ""%s:%s"", user, pwd);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_82.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_82.cpp,"{
  size_t size = 0;
  char *authorization = NULL;
  struct Curl_easy *data = conn->data;
  char **userp;
  const char *user;
  const char *pwd;
  CURLcode result;

  if(proxy) {
    userp = &conn->allocptr.proxyuserpwd;
    user = conn->http_proxy.user;
    pwd = conn->http_proxy.passwd;
  }
  else {
    userp = &conn->allocptr.userpwd;
    user = conn->user;
    pwd = conn->passwd;
  }

  snprintf(data->state.buffer, sizeof(data->state.buffer), ""%s:%s"", user, pwd);

  result = Curl_base64_encode(data,
                              data->state.buffer, strlen(data->state.buffer),
                              &authorization, &size);
  if(result)
    return result;

  if(!authorization)
    return CURLE_REMOTE_ACCESS_DENIED;

  free(*userp);
  *userp = aprintf(""%sAuthorization: Basic %s\r\n"",
                   proxy ? ""Proxy-"" : """",
                   authorization);
  free(authorization);
  if(!*userp)
    return CURLE_OUT_OF_MEMORY;

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_82.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 2, 89, 0, 0, 7, 7, 0, 0, 3, 5, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 1, 42, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 5, 5, 2, 0, 7, 0, 0, 11, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_82.cpp,21,"[""member"", ""member"", ""string"", ""member"", ""member""]",[]
299975908ada992800791fac7f3739050e0ae2a9,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-04-19 (d957e218)

Resolve conflicts in `CMakeLists.txt` in favor of the upstream version.
We will re-apply our logic as needed in following commits.",[],Utilities/cmcurl/lib/url.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_40.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_40.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_40.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_101.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_101.cpp,641,644,644,648,,"DEBUGF(fprintf(stderr, ""Error: malloc of buffer failed\n""));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_83.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_83.cpp,"f(!data->state.headerbuff) {
    DEBUGF(fprintf(stderr, ""Error: malloc of headerbuff failed\n""));
    result = CURLE_OUT_OF_MEMORY;
  }
  else {
    result = Curl_init_userdefined(&data->set);

    data->state.headersize=HEADERSIZE;

    Curl_convert_init(data);

    Curl_initinfo(data);

    /* most recent connection is not yet defined */
    data->state.lastconnect = NULL;

    data->progress.flags |= PGRS_HIDE;
    data->state.current_speed = -1; /* init to negative == impossible */

    data->wildcard.state = CURLWC_INIT;
    data->wildcard.filelist = NULL;
    data->set.fnmatch = ZERO_NULL;
    data->set.maxconnects = DEFAULT_CONNCACHE_SIZE; /* for easy handles */

    Curl_http2_init_state(&data->state);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_83.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 14, 0, 8, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_83.cpp,25,[],"[""Curl_resolver_init_ret"", ""!""]"
299975908ada992800791fac7f3739050e0ae2a9,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-04-19 (d957e218)

Resolve conflicts in `CMakeLists.txt` in favor of the upstream version.
We will re-apply our logic as needed in following commits.",[],Utilities/cmcurl/lib/vtls/cyassl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_42.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_42.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_42.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_104.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_104.cpp,720,741,723,744,,"snprintf(buffer, size, ""wolfSSL/%s"", wolfSSL_lib_version());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_85.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_85.cpp,"{
#ifdef WOLFSSL_VERSION
  return snprintf(buffer, size, ""wolfSSL/%s"", WOLFSSL_VERSION);
#elif defined(CYASSL_VERSION)
  return snprintf(buffer, size, ""CyaSSL/%s"", CYASSL_VERSION);
#else
  return snprintf(buffer, size, ""CyaSSL/%s"", ""<1.8.8"");
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_85.cpp,"[0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 13, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_85.cpp,3,"[""char *"", ""size_t"", ""string"", ""macro""]",[]
fd7d521c9d70655618db8232d45e5aaf81700f91,"curl 2017-04-19 (d957e218)

Code extracted from:

    https://github.com/curl/curl.git

at commit d957e2189fdc73cef0ff3d1fb58043d354754449 (curl-7_54_0).",[],lib/conncache.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_44.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_44.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_44.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_106.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_106.cpp,141,136,143,141,"aprintf(""%s:%d"", hostname, conn->port);","snprintf(buf, len, ""%ld%s"", conn->port, hostname);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_86.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_86.cpp,"{
  const char *hostname;

  if(conn->bits.socksproxy)
    hostname = conn->socks_proxy.host.name;
  else if(conn->bits.httpproxy)
    hostname = conn->http_proxy.host.name;
  else if(conn->bits.conn_to_host)
    hostname = conn->conn_to_host.name;
  else
    hostname = conn->host.name;

  return aprintf(""%s:%d"", hostname, conn->port);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_86.cpp,"[3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 1, 41, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 3, 1, 0, 1, 0, 0, 4, 2, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_86.cpp,13,"[""string"", ""member"", ""member""]",[]
fd7d521c9d70655618db8232d45e5aaf81700f91,"curl 2017-04-19 (d957e218)

Code extracted from:

    https://github.com/curl/curl.git

at commit d957e2189fdc73cef0ff3d1fb58043d354754449 (curl-7_54_0).",[],lib/file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_45.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_45.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_45.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_107.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_107.cpp,476,475,478,477,"snprintf(buf, sizeof(data->state.buffer),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);","snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_87.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_87.cpp,"{
    time_t filetime;
    struct tm buffer;
    const struct tm *tm = &buffer;
    snprintf(buf, sizeof(data->state.buffer),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(result)
      return result;

    result = Curl_client_write(conn, CLIENTWRITE_BOTH,
                               (char *)""Accept-ranges: bytes\r\n"", 0);
    if(result)
      return result;

    filetime = (time_t)statbuf.st_mtime;
    result = Curl_gmtime(filetime, &buffer);
    if(result)
      return result;

    /* format: ""Tue, 15 Nov 1994 12:45:26 GMT"" */
    snprintf(buf, BUFSIZE-1,
             ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
             Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
             tm->tm_mday,
             Curl_month[tm->tm_mon],
             tm->tm_year + 1900,
             tm->tm_hour,
             tm->tm_min,
             tm->tm_sec);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(!result)
      /* set the file size to make it available post transfer */
      Curl_pgrsSetDownloadSize(data, expected_size);
    return result;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_87.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 1, 85, 0, 0, 3, 3, 0, 0, 1, 11, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 1, 53, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 5, 5, 1, 0, 8, 0, 0, 8, 0, 31, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_87.cpp,58,[],"[""member"", ""member"", ""macro"", ""&&"", ""&&""]"
fd7d521c9d70655618db8232d45e5aaf81700f91,"curl 2017-04-19 (d957e218)

Code extracted from:

    https://github.com/curl/curl.git

at commit d957e2189fdc73cef0ff3d1fb58043d354754449 (curl-7_54_0).",[],lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_46.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_46.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_46.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_108.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_108.cpp,2107,2107,2109,2109,"snprintf(buf, sizeof(conn->data->state.buffer),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);","snprintf(buf, CURL_BUFSIZE(conn->data->set.buffer_size),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_88.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_88.cpp,"{
        /* we have a time, reformat it */
        time_t secs=time(NULL);
        /* using the good old yacc/bison yuck */
        snprintf(buf, sizeof(conn->data->state.buffer),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);
        /* now, convert this into a time() value: */
        data->info.filetime = (long)curl_getdate(buf, &secs);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_88.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 25, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 16, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_88.cpp,20,"[""char *"", ""member"", ""string"", ""int"", ""int"", ""int"", ""int"", ""int"", ""int""]","[""int"", ""sscanf_ret"", ""==""]"
fd7d521c9d70655618db8232d45e5aaf81700f91,"curl 2017-04-19 (d957e218)

Code extracted from:

    https://github.com/curl/curl.git

at commit d957e2189fdc73cef0ff3d1fb58043d354754449 (curl-7_54_0).",[],lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_46.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_46.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_46.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_109.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_109.cpp,2318,2318,2320,2320,"snprintf(buf, sizeof(data->state.buffer),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);","snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_89.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_89.cpp,"{
      snprintf(buf, sizeof(data->state.buffer),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);
      result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
      if(result)
        return result;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_89.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 13, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_89.cpp,15,[],"[""int"", ""curlx_strtoofft_ret"", ""!=""]"
fd7d521c9d70655618db8232d45e5aaf81700f91,"curl 2017-04-19 (d957e218)

Code extracted from:

    https://github.com/curl/curl.git

at commit d957e2189fdc73cef0ff3d1fb58043d354754449 (curl-7_54_0).",[],lib/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_47.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_47.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_47.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_111.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_111.cpp,297,297,299,299,"f(data->state.buffer, sizeof(data->state.buffer), ""%s:%s"", user, pwd);","f(data->state.buffer, CURL_BUFSIZE(data->set.buffer_size),
           ""%s:%s"", user, pwd);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_90.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_90.cpp,"{
  size_t size = 0;
  char *authorization = NULL;
  struct Curl_easy *data = conn->data;
  char **userp;
  const char *user;
  const char *pwd;
  CURLcode result;

  if(proxy) {
    userp = &conn->allocptr.proxyuserpwd;
    user = conn->http_proxy.user;
    pwd = conn->http_proxy.passwd;
  }
  else {
    userp = &conn->allocptr.userpwd;
    user = conn->user;
    pwd = conn->passwd;
  }

  snprintf(data->state.buffer, sizeof(data->state.buffer), ""%s:%s"", user, pwd);

  result = Curl_base64_encode(data,
                              data->state.buffer, strlen(data->state.buffer),
                              &authorization, &size);
  if(result)
    return result;

  if(!authorization)
    return CURLE_REMOTE_ACCESS_DENIED;

  free(*userp);
  *userp = aprintf(""%sAuthorization: Basic %s\r\n"",
                   proxy ? ""Proxy-"" : """",
                   authorization);
  free(authorization);
  if(!*userp)
    return CURLE_OUT_OF_MEMORY;

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_90.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 2, 89, 0, 0, 7, 7, 0, 0, 3, 5, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 1, 42, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 5, 5, 2, 0, 7, 0, 0, 11, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_90.cpp,21,"[""member"", ""member"", ""string"", ""member"", ""member""]",[]
fd7d521c9d70655618db8232d45e5aaf81700f91,"curl 2017-04-19 (d957e218)

Code extracted from:

    https://github.com/curl/curl.git

at commit d957e2189fdc73cef0ff3d1fb58043d354754449 (curl-7_54_0).",[],lib/url.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_49.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_49.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_49.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_113.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_113.cpp,641,644,644,648,,"DEBUGF(fprintf(stderr, ""Error: malloc of buffer failed\n""));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_91.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_91.cpp,"f(!data->state.headerbuff) {
    DEBUGF(fprintf(stderr, ""Error: malloc of headerbuff failed\n""));
    result = CURLE_OUT_OF_MEMORY;
  }
  else {
    result = Curl_init_userdefined(&data->set);

    data->state.headersize=HEADERSIZE;

    Curl_convert_init(data);

    Curl_initinfo(data);

    /* most recent connection is not yet defined */
    data->state.lastconnect = NULL;

    data->progress.flags |= PGRS_HIDE;
    data->state.current_speed = -1; /* init to negative == impossible */

    data->wildcard.state = CURLWC_INIT;
    data->wildcard.filelist = NULL;
    data->set.fnmatch = ZERO_NULL;
    data->set.maxconnects = DEFAULT_CONNCACHE_SIZE; /* for easy handles */

    Curl_http2_init_state(&data->state);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_91.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 14, 0, 8, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_91.cpp,25,[],"[""Curl_resolver_init_ret"", ""!""]"
fd7d521c9d70655618db8232d45e5aaf81700f91,"curl 2017-04-19 (d957e218)

Code extracted from:

    https://github.com/curl/curl.git

at commit d957e2189fdc73cef0ff3d1fb58043d354754449 (curl-7_54_0).",[],lib/vtls/cyassl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_51.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_51.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_51.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_116.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_116.cpp,720,741,723,744,,"snprintf(buffer, size, ""wolfSSL/%s"", wolfSSL_lib_version());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_93.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_93.cpp,"{
#ifdef WOLFSSL_VERSION
  return snprintf(buffer, size, ""wolfSSL/%s"", WOLFSSL_VERSION);
#elif defined(CYASSL_VERSION)
  return snprintf(buffer, size, ""CyaSSL/%s"", CYASSL_VERSION);
#else
  return snprintf(buffer, size, ""CyaSSL/%s"", ""<1.8.8"");
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_93.cpp,"[0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 13, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_93.cpp,3,"[""char *"", ""size_t"", ""string"", ""macro""]",[]
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_129.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_129.cpp,302,321,312,324,"archive_set_error(&a->archive, errno,
				    ""Couldn't change dir"");","archive_set_error(&a->archive, errno,
			    ""Can't change dir to read extended attributes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_94.cpp,"{
			archive_set_error(&a->archive, errno,
				    ""Couldn't change dir"");
				return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_94.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_94.cpp,25,"[""member"", ""unkown"", ""string""]","[""a -> tree_enter_working_dir_ret"", ""null"", ""!=""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_131.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_131.cpp,436,505,450,539,,"archive_set_error(&a->archive, errno,
			    ""Couldn't translate ""
#if !HAVE_SUN_ACL
			    ""NFSv4 ""
#endif
			    ""ACLs"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_96.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_96.cpp,"{
		translate_acl(a, entry, acl, ARCHIVE_ENTRY_ACL_TYPE_NFS4);
		acl_free(acl);
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_96.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_96.cpp,43,[],"[""acl_get_fd_ret"", ""null"", ""!=""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_132.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_132.cpp,467,577,472,595,,"archive_set_error(&a->archive, errno,
			    ""Couldn't translate access ACLs"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_97.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_97.cpp,"{
		translate_acl(a, entry, acl,
		    ARCHIVE_ENTRY_ACL_TYPE_ACCESS);
		acl_free(acl);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_97.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_97.cpp,65,"[""acl_get_link_np_ret""]","[""acl_get_fd_ret"", ""null"", ""!=""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_132.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_132.cpp,467,577,481,614,,"archive_set_error(&a->archive, errno,
				    ""Couldn't translate default ACLs"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_98.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_98.cpp,"{
			translate_acl(a, entry, acl,
			    ARCHIVE_ENTRY_ACL_TYPE_DEFAULT);
			acl_free(acl);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_98.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_98.cpp,74,"[""acl_get_file_ret""]","[""acl_get_file_ret"", ""null"", ""!=""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_132.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_132.cpp,467,577,577,1178,,"archive_set_error(&a->archive, errno,
		    ""Failed to read ACL brand"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_99.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_99.cpp,"(s == 1) {
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_99.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 25, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_99.cpp,48,[],"[""int""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_132.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_132.cpp,467,577,577,1210,,"archive_set_error(&a->archive, errno,
		    ""Failed to get first ACL entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_103.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_103.cpp,"(s == 1) {
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_103.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 25, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_103.cpp,48,[],"[""int""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_132.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_132.cpp,467,577,577,1226,,"archive_set_error(&a->archive, errno,
			    ""Failed to get ACL tag type"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_104.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_104.cpp,"(s == 1) {
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_104.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 25, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_104.cpp,48,[],"[""bool"", ""!""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_133.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_133.cpp,604,1262,624,1306,,"archive_set_error(&a->archive, errno, ""Failed ""
				    ""to get ACL type from a NFSv4 ACL entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_105.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_105.cpp,"(acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_105.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_105.cpp,95,[],"[""acl_get_entry_type_np_ret"", ""null"", ""==""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_134.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_134.cpp,635,1321,644,1324,,"archive_set_error(&a->archive, errno,
				    ""Invalid NFSv4 ACL entry type"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_106.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_106.cpp,"{
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_106.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 28, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_106.cpp,115,"[""acl_entry_t"", ""unkown""]","[""acl_tag_t""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_134.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_134.cpp,635,1321,644,1337,,"archive_set_error(&a->archive, errno,
				    ""Failed to get flagset from a NFSv4 ACL entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_107.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_107.cpp,"{
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_107.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 28, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_107.cpp,115,"[""acl_entry_t"", ""unkown""]","[""acl_tag_t""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_134.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_134.cpp,635,1321,646,1345,,"archive_set_error(&a->archive, errno,
					    ""Failed to check flag in a NFSv4 ""
					    ""ACL flagset"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_108.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_108.cpp,"(acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_108.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_108.cpp,117,"[""acl_flagset_t"", ""member""]","[""null"", ""unkown"", ""<""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_134.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_134.cpp,635,1321,653,1356,,"archive_set_error(&a->archive, errno,
			    ""Failed to get ACL permission set"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_109.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_109.cpp,"{
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_109.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 28, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_109.cpp,124,"[""acl_entry_t"", ""unkown""]","[""acl_tag_t""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_134.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_134.cpp,635,1321,659,1367,,"archive_set_error(&a->archive, errno,
				    ""Failed to check permission in an ACL permission set"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_110.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_110.cpp,"(ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_110.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_110.cpp,130,"[""acl_permset_t"", ""member""]","[""null"", ""unkown"", ""<""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_136.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_136.cpp,772,1486,785,1496,"archive_set_error(&a->archive, errno,
				    ""Couldn't access %s"", path);","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_112.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_112.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Couldn't access %s"", path);
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_112.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_112.cpp,19,"[""member"", ""unkown"", ""string"", ""archive_entry_pathname_ret""]","[""a -> tree_enter_working_dir_ret"", ""null"", ""!=""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_137.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_137.cpp,932,1645,945,1655,"archive_set_error(&a->archive, errno,
				    ""Couldn't access %s"", path);","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_113.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_113.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Couldn't access %s"", path);
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_113.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_113.cpp,21,"[""member"", ""unkown"", ""string"", ""archive_entry_pathname_ret""]","[""a -> tree_enter_working_dir_ret"", ""null"", ""!=""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_60.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_60.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_60.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_139.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_139.cpp,938,938,939,939,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_114.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_114.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_114.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_114.cpp,66,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_path_excluded_ret"", ""null"", ""<""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_60.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_60.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_60.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_140.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_140.cpp,1041,1041,1042,1042,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_115.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_115.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_115.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_115.cpp,169,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_time_excluded_ret"", ""null"", ""<""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_60.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_60.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_60.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_141.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_141.cpp,1067,1067,1068,1068,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_116.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_116.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_116.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_116.cpp,195,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_owner_excluded_ret"", ""null"", ""<""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_61.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_61.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_61.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_143.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_143.cpp,803,802,804,803,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_117.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_117.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_117.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_117.cpp,50,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_path_excluded_ret"", ""null"", ""<""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_61.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_61.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_61.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_144.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_144.cpp,875,874,876,875,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_118.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_118.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_118.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_118.cpp,122,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_time_excluded_ret"", ""null"", ""<""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_61.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_61.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_61.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_145.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_145.cpp,901,900,902,901,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_119.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_119.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_119.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_119.cpp,148,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_owner_excluded_ret"", ""null"", ""<""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_63.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_63.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_63.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_150.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_150.cpp,706,706,708,709,,"archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""truncated lz4 input"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_120.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_120.cpp,"{
	struct private_data *state = (struct private_data *)self->data;
	int compressed;
	const char *read_buf;
	ssize_t ret;

	*p = NULL;
	ret = lz4_allocate_out_block_for_legacy(self);
	if (ret != ARCHIVE_OK)
		return ret;

	/* Make sure we have 4 bytes for a block size. */
	read_buf = __archive_read_filter_ahead(self->upstream, 4, NULL);
	if (read_buf == NULL) {
		if (state->stage == SELECT_STREAM) {
			state->stage = READ_LEGACY_STREAM;
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated lz4 input"");
			return (ARCHIVE_FATAL);
		}
		state->stage = SELECT_STREAM;
		return 0;
	}
	state->stage = READ_LEGACY_BLOCK;
	compressed = archive_le32dec(read_buf);
	if (compressed > LZ4_COMPRESSBOUND(LEGACY_BLOCK_SIZE)) {
		state->stage = SELECT_STREAM;
		return 0;
	}

	/* Make sure we have a whole block. */
	read_buf = __archive_read_filter_ahead(self->upstream,
	    4 + compressed, NULL);
	ret = LZ4_decompress_safe(read_buf + 4, state->out_block,
	    compressed, (int)state->out_block_size);
	if (ret < 0) {
		archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""lz4 decompression failed"");
		return (ARCHIVE_FATAL);
	}
	*p = state->out_block;
	state->unconsumed = 4 + compressed;
	return ret;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_120.cpp,"[5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 1, 98, 0, 0, 4, 4, 0, 0, 1, 9, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 5, 0, 0, 8, 0, 0, 14, 0, 19, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_120.cpp,36,"[""__archive_read_filter_ahead_ret"", ""member"", ""archive_le32dec_ret"", ""member""]","[""archive_le32dec_ret"", ""LZ4_COMPRESSBOUND_ret"", "">"", ""!""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_154.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_154.cpp,763,744,789,-1,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for lzma decompression"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_121.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_121.cpp,"{
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for lzma decompression"");
		free(out_block);
		free(state);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_121.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_121.cpp,14,"[""member"", ""macro"", ""string""]","[""calloc_ret"", ""null"", ""=="", ""malloc_ret"", ""null"", ""=="", ""||""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_154.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_154.cpp,763,744,820,-1,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""Internal error initializing lzma library"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_122.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_122.cpp,"{
	static const size_t out_block_size = 64 * 1024;
	void *out_block;
	struct private_data *state;
	ssize_t ret, avail_in;

	self->code = ARCHIVE_FILTER_LZMA;
	self->name = ""lzma"";

	state = (struct private_data *)calloc(sizeof(*state), 1);
	out_block = (unsigned char *)malloc(out_block_size);
	if (state == NULL || out_block == NULL) {
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for lzma decompression"");
		free(out_block);
		free(state);
		return (ARCHIVE_FATAL);
	}

	self->data = state;
	state->out_block_size = out_block_size;
	state->out_block = out_block;
	self->read = lzma_filter_read;
	self->skip = NULL; /* not supported */
	self->close = lzma_filter_close;

	/* Prime the lzma library with 18 bytes of input. */
	state->stream.next_in = (unsigned char *)(uintptr_t)
	    __archive_read_filter_ahead(self->upstream, 18, &avail_in);
	if (state->stream.next_in == NULL)
		return (ARCHIVE_FATAL);
	state->stream.avail_in = avail_in;
	state->stream.next_out = state->out_block;
	state->stream.avail_out = state->out_block_size;

	/* Initialize compression library. */
	ret = lzmadec_init(&(state->stream));
	__archive_read_filter_consume(self->upstream,
	    avail_in - state->stream.avail_in);
	if (ret == LZMADEC_OK)
		return (ARCHIVE_OK);

	/* Library setup failed: Clean up. */
	archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""Internal error initializing lzma library"");

	/* Override the error message if we know what really went wrong. */
	switch (ret) {
	case LZMADEC_HEADER_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid header"");
		break;
	case LZMADEC_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	}

	free(state->out_block);
	free(state);
	self->data = NULL;
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_122.cpp,"[3, 0, 0, 0, 2, 0, 4, 1, 2, 0, 5, 0, 0, 0, 2, 152, 0, 0, 4, 5, 0, 0, 1, 11, 0, 0, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 62, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 4, 3, 0, 0, 14, 0, 0, 25, 0, 26, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_122.cpp,45,"[""member"", ""macro"", ""string""]","[""lzmadec_init_ret"", ""macro"", ""=="", ""!""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_154.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_154.cpp,763,744,826,-1,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid header"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_123.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_123.cpp,"{
	case LZMADEC_HEADER_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid header"");
		break;
	case LZMADEC_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_123.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_123.cpp,51,[],"[""lzmadec_init_ret""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_154.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_154.cpp,763,744,832,-1,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_124.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_124.cpp,"{
	case LZMADEC_HEADER_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid header"");
		break;
	case LZMADEC_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_124.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_124.cpp,57,[],"[""lzmadec_init_ret""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_154.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_154.cpp,763,744,865,-1,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated lzma input"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_125.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_125.cpp,"{
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated lzma input"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_125.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_125.cpp,18,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""=="", ""ssize_t"", ""null"", ""<"", ""&&""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_154.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_154.cpp,763,744,883,-1,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_126.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_126.cpp,"{
		case LZMADEC_STREAM_END: /* Found end of stream. */
			state->eof = 1;
			/* FALL THROUGH */
		case LZMADEC_OK: /* Decompressor made some progress. */
			__archive_read_filter_consume(self->upstream,
			    avail_in - state->stream.avail_in);
			break;
		case LZMADEC_BUF_ERROR: /* Insufficient input data? */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");
			return (ARCHIVE_FATAL);
		default:
			/* Return an error. */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Lzma decompression failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_126.cpp,"[0, 0, 0, 0, 1, 0, 2, 0, 3, 1, 1, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_126.cpp,36,"[""member"", ""macro"", ""string""]","[""lzmadec_decode_ret""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_154.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_154.cpp,763,744,889,-1,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Lzma decompression failed"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_127.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_127.cpp,"{
		case LZMADEC_STREAM_END: /* Found end of stream. */
			state->eof = 1;
			/* FALL THROUGH */
		case LZMADEC_OK: /* Decompressor made some progress. */
			__archive_read_filter_consume(self->upstream,
			    avail_in - state->stream.avail_in);
			break;
		case LZMADEC_BUF_ERROR: /* Insufficient input data? */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");
			return (ARCHIVE_FATAL);
		default:
			/* Return an error. */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Lzma decompression failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_127.cpp,"[0, 0, 0, 0, 1, 0, 2, 0, 3, 1, 1, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_127.cpp,42,"[""member"", ""macro"", ""string""]","[""lzmadec_decode_ret""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_154.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_154.cpp,763,744,920,-1,"archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up %s compressor"",
		    self->archive->archive.compression_name);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_128.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_128.cpp,"{
	case LZMADEC_OK:
		break;
	default:
		archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up %s compressor"",
		    self->archive->archive.compression_name);
		ret = ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_128.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_128.cpp,12,"[""member"", ""macro"", ""string"", ""member""]","[""lzmadec_end_ret""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_72.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_172.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_172.cpp,935,989,939,991,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Solaris NFSv4 ACLs not supported"");",acl_type = ARCHIVE_ENTRY_ACL_TYPE_ACCESS;,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_129.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_129.cpp,"{
	case 01000000:
		/* POSIX.1e ACL */
		break;
	case 03000000:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Solaris NFSv4 ACLs not supported"");
		return (ARCHIVE_WARN);
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Malformed Solaris ACL attribute (unsupported type %o)"",
		    (int)type);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_129.cpp,"[0, 0, 0, 0, 1, 0, 2, 0, 2, 1, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_129.cpp,53,"[""member"", ""macro"", ""string""]","[""bool""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_72.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_174.cpp,1128,1183,1129,1184,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry has negative size?"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry has negative size"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_130.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_130.cpp,"{
		tar->entry_bytes_remaining = 0;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry has negative size?"");
		err = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_130.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_130.cpp,23,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""<""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_72.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_174.cpp,1128,1183,1133,1191,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry size overflow"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_131.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_131.cpp,"{
	const struct archive_entry_header_ustar	*header;
	char	tartype;
	int     err = ARCHIVE_OK;

	header = (const struct archive_entry_header_ustar *)h;
	if (header->linkname[0])
		archive_strncpy(&(tar->entry_linkpath),
		    header->linkname, sizeof(header->linkname));
	else
		archive_string_empty(&(tar->entry_linkpath));

	/* Parse out the numeric fields (all are octal) */
	archive_entry_set_mode(entry,
		(mode_t)tar_atol(header->mode, sizeof(header->mode)));
	archive_entry_set_uid(entry, tar_atol(header->uid, sizeof(header->uid)));
	archive_entry_set_gid(entry, tar_atol(header->gid, sizeof(header->gid)));
	tar->entry_bytes_remaining = tar_atol(header->size, sizeof(header->size));
	if (tar->entry_bytes_remaining < 0) {
		tar->entry_bytes_remaining = 0;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry has negative size?"");
		err = ARCHIVE_WARN;
	}
	tar->realsize = tar->entry_bytes_remaining;
	archive_entry_set_size(entry, tar->entry_bytes_remaining);
	archive_entry_set_mtime(entry, tar_atol(header->mtime, sizeof(header->mtime)), 0);

	/* Handle the tar type flag appropriately. */
	tartype = header->typeflag[0];

	switch (tartype) {
	case '1': /* Hard link */
		if (archive_entry_copy_hardlink_l(entry, tar->entry_linkpath.s,
		    archive_strlen(&(tar->entry_linkpath)), tar->sconv) != 0) {
			err = set_conversion_failed_error(a, tar->sconv,
			    ""Linkname"");
			if (err == ARCHIVE_FATAL)
				return (err);
		}
		/*
		 * The following may seem odd, but: Technically, tar
		 * does not store the file type for a ""hard link""
		 * entry, only the fact that it is a hard link.  So, I
		 * leave the type zero normally.  But, pax interchange
		 * format allows hard links to have data, which
		 * implies that the underlying entry is a regular
		 * file.
		 */
		if (archive_entry_size(entry) > 0)
			archive_entry_set_filetype(entry, AE_IFREG);

		/*
		 * A tricky point: Traditionally, tar readers have
		 * ignored the size field when reading hardlink
		 * entries, and some writers put non-zero sizes even
		 * though the body is empty.  POSIX blessed this
		 * convention in the 1988 standard, but broke with
		 * this tradition in 2001 by permitting hardlink
		 * entries to store valid bodies in pax interchange
		 * format, but not in ustar format.  Since there is no
		 * hard and fast way to distinguish pax interchange
		 * from earlier archives (the 'x' and 'g' entries are
		 * optional, after all), we need a heuristic.
		 */
		if (archive_entry_size(entry) == 0) {
			/* If the size is already zero, we're done. */
		}  else if (a->archive.archive_format
		    == ARCHIVE_FORMAT_TAR_PAX_INTERCHANGE) {
			/* Definitely pax extended; must obey hardlink size. */
		} else if (a->archive.archive_format == ARCHIVE_FORMAT_TAR
		    || a->archive.archive_format == ARCHIVE_FORMAT_TAR_GNUTAR)
		{
			/* Old-style or GNU tar: we must ignore the size. */
			archive_entry_set_size(entry, 0);
			tar->entry_bytes_remaining = 0;
		} else if (archive_read_format_tar_bid(a, 50) > 50) {
			/*
			 * We don't know if it's pax: If the bid
			 * function sees a valid ustar header
			 * immediately following, then let's ignore
			 * the hardlink size.
			 */
			archive_entry_set_size(entry, 0);
			tar->entry_bytes_remaining = 0;
		}
		/*
		 * TODO: There are still two cases I'd like to handle:
		 *   = a ustar non-pax archive with a hardlink entry at
		 *     end-of-archive.  (Look for block of nulls following?)
		 *   = a pax archive that has not seen any pax headers
		 *     and has an entry which is a hardlink entry storing
		 *     a body containing an uncompressed tar archive.
		 * The first is worth addressing; I don't see any reliable
		 * way to deal with the second possibility.
		 */
		break;
	case '2': /* Symlink */
		archive_entry_set_filetype(entry, AE_IFLNK);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		if (archive_entry_copy_symlink_l(entry, tar->entry_linkpath.s,
		    archive_strlen(&(tar->entry_linkpath)), tar->sconv) != 0) {
			err = set_conversion_failed_error(a, tar->sconv,
			    ""Linkname"");
			if (err == ARCHIVE_FATAL)
				return (err);
		}
		break;
	case '3': /* Character device */
		archive_entry_set_filetype(entry, AE_IFCHR);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		break;
	case '4': /* Block device */
		archive_entry_set_filetype(entry, AE_IFBLK);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		break;
	case '5': /* Dir */
		archive_entry_set_filetype(entry, AE_IFDIR);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		break;
	case '6': /* FIFO device */
		archive_entry_set_filetype(entry, AE_IFIFO);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		break;
	case 'D': /* GNU incremental directory type */
		/*
		 * No special handling is actually required here.
		 * It might be nice someday to preprocess the file list and
		 * provide it to the client, though.
		 */
		archive_entry_set_filetype(entry, AE_IFDIR);
		break;
	case 'M': /* GNU ""Multi-volume"" (remainder of file from last archive)*/
		/*
		 * As far as I can tell, this is just like a regular file
		 * entry, except that the contents should be _appended_ to
		 * the indicated file at the indicated offset.  This may
		 * require some API work to fully support.
		 */
		break;
	case 'N': /* Old GNU ""long filename"" entry. */
		/* The body of this entry is a script for renaming
		 * previously-extracted entries.  Ugh.  It will never
		 * be supported by libarchive. */
		archive_entry_set_filetype(entry, AE_IFREG);
		break;
	case 'S': /* GNU sparse files */
		/*
		 * Sparse files are really just regular files with
		 * sparse information in the extended area.
		 */
		/* FALLTHROUGH */
	default: /* Regular file  and non-standard types */
		/*
		 * Per POSIX: non-recognized types should always be
		 * treated as regular files.
		 */
		archive_entry_set_filetype(entry, AE_IFREG);
		break;
	}
	return (err);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_131.cpp,"[11, 0, 0, 0, 10, 0, 3, 1, 10, 1, 14, 0, 0, 0, 2, 233, 0, 0, 3, 3, 0, 0, 1, 38, 0, 0, 0, 0, 1, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 153, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 12, 11, 1, 0, 44, 0, 0, 39, 3, 86, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_131.cpp,27,[],[]
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_72.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_176.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_176.cpp,1721,1854,1724,1859,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Non-regular file cannot be sparse"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_135.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_135.cpp,"(strcmp(key, ""GNU.sparse.numblocks"") == 0) {
			tar->sparse_offset = -1;
			tar->sparse_numbytes = -1;
			tar->sparse_gnu_major = 0;
			tar->sparse_gnu_minor = 0;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_135.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_135.cpp,14,"[""const char *"", ""constant""]","[""member""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_72.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_177.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_177.cpp,1803,1944,1819,-1,"archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.access"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_136.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_136.cpp,"{
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.access"");
					return (err);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_136.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_136.cpp,109,[],"[""archive_acl_parse_l_ret"", ""macro"", ""==""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_72.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_177.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_177.cpp,1803,1944,1824,-1,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SCHILY.acl.access"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_137.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_137.cpp,"{
				err = r;
				if (err == ARCHIVE_FATAL) {
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.access"");
					return (err);
				}
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SCHILY.acl.access"");
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_137.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_137.cpp,114,"[""member"", ""macro"", ""constant""]","[""archive_acl_parse_l_ret"", ""macro"", ""=="", ""!""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_72.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_177.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_177.cpp,1803,1944,1843,-1,"archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.default"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_138.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_138.cpp,"{
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.default"");
					return (err);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_138.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_138.cpp,133,[],"[""archive_acl_parse_l_ret"", ""macro"", ""==""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_72.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_177.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_177.cpp,1803,1944,1848,-1,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SCHILY.acl.default"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_139.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_139.cpp,"{
				err = r;
				if (err == ARCHIVE_FATAL) {
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.default"");
					return (err);
				}
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SCHILY.acl.default"");
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_139.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_139.cpp,138,"[""member"", ""macro"", ""constant""]","[""archive_acl_parse_l_ret"", ""macro"", ""=="", ""!""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_73.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_73.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_73.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_180.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_180.cpp,255,254,262,260,"archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Unsupported record version"");","archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Invalid record version"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_140.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_140.cpp,"{
		/* nawww, I wish they promised backward compatibility
		 * anyhoo, in their infinite wisdom the 28500 guys might
		 * come up with something we can't possibly handle so
		 * best end things here */
		archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Unsupported record version"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_140.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_140.cpp,52,"[""member"", ""macro"", ""string""]","[""_warc_rdver_ret"", ""constant"", "">""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_73.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_73.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_73.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_181.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_181.cpp,285,293,286,294,"archive_string_sprintf(&w->sver,
			""WARC/%u.%u"", ver / 10000, ver % 10000);","archive_string_sprintf(&w->sver,
			""WARC/%u.%u"", ver / 10000, (ver % 10000) / 100);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_142.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_142.cpp,"{
		/* stringify this entry's version */
		archive_string_sprintf(&w->sver,
			""WARC/%u.%u"", ver / 10000, ver % 10000);
		/* remember the version */
		w->pver = ver;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_142.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_142.cpp,76,"[""member"", ""constant"", ""_warc_rdver_ret"", ""_warc_rdver_ret""]","[""_warc_rdver_ret"", ""member"", ""!=""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_75.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_75.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_75.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_187.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_187.cpp,715,739,720,742,"fprintf(stderr,
		    ""Extra data field contents do not match reported size!\n"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Malformed extra data: Consumed %d bytes of %d bytes"",
		    (int)offset, (int)extra_length);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_151.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_151.cpp,"{
		fprintf(stderr,
		    ""Extra data field contents do not match reported size!\n"");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_151.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_151.cpp,300,"[""unkown"", ""string""]","[""int"", ""size_t"", ""!=""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_75.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_75.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_75.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_188.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_188.cpp,1136,1168,1143,1175,,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Overflow of 64-bit file sizes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_152.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_152.cpp,"{
				zip->entry->crc32 = archive_le32dec(p + 4);
				zip->entry->compressed_size =
					archive_le64dec(p + 8);
				zip->entry->uncompressed_size =
					archive_le64dec(p + 16);
				zip->unconsumed = 24;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_152.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_152.cpp,48,[],"[""bool""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_75.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_75.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_75.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_190.cpp,1417,1456,1422,1463,,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Overflow of 64-bit file sizes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_153.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_153.cpp,"{
			zip->entry->crc32 = archive_le32dec(p);
			zip->entry->compressed_size = archive_le64dec(p + 4);
			zip->entry->uncompressed_size = archive_le64dec(p + 12);
			zip->unconsumed += 20;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_153.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_153.cpp,167,[],"[""bool""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_76.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_76.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_76.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_200.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_200.cpp,2534,2807,2543,2817,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty pathname"");","fsobj_error(a_eno, a_estr, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty "", ""pathname"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_167.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_167.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty pathname"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_167.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_167.cpp,8,"[""member"", ""macro"", ""string""]","[""member"", ""char"", ""==""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_76.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_76.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_76.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_200.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_200.cpp,2534,2807,2554,2828,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			                  ""Path is absolute"");","fsobj_error(a_eno, a_estr, ARCHIVE_ERRNO_MISC,
			    ""Path is "", ""absolute"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_168.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_168.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			                  ""Path is absolute"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_168.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_168.cpp,19,"[""member"", ""macro"", ""string""]","[""bool""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_76.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_76.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_76.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_201.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_201.cpp,2580,2854,2583,2858,"archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Path contains '..'"");","fsobj_error(a_eno, a_estr,
						    ARCHIVE_ERRNO_MISC,
						    ""Path contains "", ""'..'"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_169.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_169.cpp,"{
						archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Path contains '..'"");
						return (ARCHIVE_FAILED);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_169.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_169.cpp,48,"[""member"", ""macro"", ""constant""]","[""bool""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_78.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_78.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_78.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_210.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_210.cpp,1086,1163,1094,-1,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.access"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_173.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_173.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.access"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_173.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_173.cpp,634,[],"[""unkown"", ""macro"", ""==""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_78.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_78.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_78.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_210.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_210.cpp,1086,1163,1099,-1,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate ACL.access to UTF-8"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_174.cpp,"{
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.access"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate ACL.access to UTF-8"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_174.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_174.cpp,639,"[""member"", ""macro"", ""constant""]","[""unkown"", ""macro"", ""=="", ""!""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_78.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_78.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_78.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_210.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_210.cpp,1086,1163,1113,-1,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.default"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_175.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_175.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.default"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_175.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_175.cpp,653,[],"[""unkown"", ""macro"", ""==""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_78.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_78.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_78.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_210.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_210.cpp,1086,1163,1118,-1,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate ACL.default to UTF-8"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_176.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_176.cpp,"{
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.default"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate ACL.default to UTF-8"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_176.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_176.cpp,658,"[""member"", ""macro"", ""constant""]","[""unkown"", ""macro"", ""=="", ""!""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_213.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_213.cpp,302,321,312,324,"archive_set_error(&a->archive, errno,
				    ""Couldn't change dir"");","archive_set_error(&a->archive, errno,
			    ""Can't change dir to read extended attributes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_177.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_177.cpp,"{
			archive_set_error(&a->archive, errno,
				    ""Couldn't change dir"");
				return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_177.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_177.cpp,25,"[""member"", ""unkown"", ""string""]","[""a -> tree_enter_working_dir_ret"", ""null"", ""!=""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_214.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_214.cpp,400,416,424,466,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ACLs"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_178.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_178.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_178.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_178.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_215.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_215.cpp,436,505,450,539,,"archive_set_error(&a->archive, errno,
			    ""Couldn't translate ""
#if !HAVE_SUN_ACL
			    ""NFSv4 ""
#endif
			    ""ACLs"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_179.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_179.cpp,"{
		translate_acl(a, entry, acl, ARCHIVE_ENTRY_ACL_TYPE_NFS4);
		acl_free(acl);
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_179.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_179.cpp,43,[],"[""acl_get_file_ret"", ""null"", ""!=""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_216.cpp,467,577,472,595,,"archive_set_error(&a->archive, errno,
			    ""Couldn't translate access ACLs"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_180.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_180.cpp,"{
		translate_acl(a, entry, acl,
		    ARCHIVE_ENTRY_ACL_TYPE_ACCESS);
		acl_free(acl);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_180.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_180.cpp,65,"[""acl_get_link_np_ret""]","[""acl_get_file_ret"", ""null"", ""!=""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_216.cpp,467,577,481,614,,"archive_set_error(&a->archive, errno,
				    ""Couldn't translate default ACLs"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_181.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_181.cpp,"{
			translate_acl(a, entry, acl,
			    ARCHIVE_ENTRY_ACL_TYPE_DEFAULT);
			acl_free(acl);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_181.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_181.cpp,74,"[""acl_get_file_ret""]","[""acl_get_file_ret"", ""null"", ""!=""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_216.cpp,467,577,577,1178,,"archive_set_error(&a->archive, errno,
		    ""Failed to read ACL brand"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_182.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_182.cpp,"(s == 1) {
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_182.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 25, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_182.cpp,48,[],"[""int""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_216.cpp,467,577,558,1189,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for POSIX.1e ACL"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_183.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_183.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_183.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_183.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_216.cpp,467,577,564,1196,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for NFSv4 ACL"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_184.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_184.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_184.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_184.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_216.cpp,467,577,569,1202,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown ACL brand"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_185.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_185.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_185.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_185.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_216.cpp,467,577,577,1210,,"archive_set_error(&a->archive, errno,
		    ""Failed to get first ACL entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_186.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_186.cpp,"(s == 1) {
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_186.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 25, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_186.cpp,48,[],"[""int""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_216.cpp,467,577,577,1226,,"archive_set_error(&a->archive, errno,
			    ""Failed to get ACL tag type"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_187.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_187.cpp,"(s == 1) {
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_187.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 25, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_187.cpp,48,[],"[""int""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_217.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_217.cpp,604,1262,624,1306,,"archive_set_error(&a->archive, errno, ""Failed ""
				    ""to get ACL type from a NFSv4 ACL entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_188.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_188.cpp,"(acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_188.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_188.cpp,95,[],"[""acl_get_entry_type_np_ret"", ""null"", ""==""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_218.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_218.cpp,635,1321,644,1324,,"archive_set_error(&a->archive, errno,
				    ""Invalid NFSv4 ACL entry type"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_189.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_189.cpp,"{
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_189.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 28, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_189.cpp,115,"[""acl_entry_t"", ""unkown""]","[""acl_tag_t""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_218.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_218.cpp,635,1321,644,1337,,"archive_set_error(&a->archive, errno,
				    ""Failed to get flagset from a NFSv4 ACL entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_190.cpp,"{
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_190.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 28, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_190.cpp,115,"[""acl_entry_t"", ""unkown""]","[""acl_tag_t""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_218.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_218.cpp,635,1321,646,1345,,"archive_set_error(&a->archive, errno,
					    ""Failed to check flag in a NFSv4 ""
					    ""ACL flagset"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_191.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_191.cpp,"(acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_191.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_191.cpp,117,"[""acl_flagset_t"", ""member""]","[""null"", ""unkown"", ""<""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_218.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_218.cpp,635,1321,653,1356,,"archive_set_error(&a->archive, errno,
			    ""Failed to get ACL permission set"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_192.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_192.cpp,"{
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_192.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 28, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_192.cpp,124,"[""acl_entry_t"", ""unkown""]","[""acl_tag_t""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_218.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_218.cpp,635,1321,659,1367,,"archive_set_error(&a->archive, errno,
				    ""Failed to check permission in an ACL permission set"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_193.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_193.cpp,"(ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_193.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_193.cpp,130,"[""acl_permset_t"", ""member""]","[""null"", ""unkown"", ""<""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_219.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_219.cpp,666,1377,671,1381,,"archive_set_error(&a->archive, errno,
			    ""Failed to get next ACL entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_194.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_194.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_194.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_194.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_220.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_220.cpp,772,1486,785,1496,"archive_set_error(&a->archive, errno,
				    ""Couldn't access %s"", path);","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_195.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_195.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Couldn't access %s"", path);
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_195.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_195.cpp,19,"[""member"", ""unkown"", ""string"", ""archive_entry_pathname_ret""]","[""a -> tree_enter_working_dir_ret"", ""null"", ""!=""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_221.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_221.cpp,932,1645,945,1655,"archive_set_error(&a->archive, errno,
				    ""Couldn't access %s"", path);","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_196.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_196.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Couldn't access %s"", path);
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_196.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_196.cpp,21,"[""member"", ""unkown"", ""string"", ""archive_entry_pathname_ret""]","[""a -> tree_enter_working_dir_ret"", ""null"", ""!=""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_82.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_82.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_82.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_223.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_223.cpp,938,938,939,939,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_197.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_197.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_197.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_197.cpp,66,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_path_excluded_ret"", ""null"", ""<""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_82.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_82.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_82.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_224.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_224.cpp,1041,1041,1042,1042,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_198.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_198.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_198.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_198.cpp,169,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_time_excluded_ret"", ""null"", ""<""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_82.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_82.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_82.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_225.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_225.cpp,1067,1067,1068,1068,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_199.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_199.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_199.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_199.cpp,195,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_owner_excluded_ret"", ""null"", ""<""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_83.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_83.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_83.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_227.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_227.cpp,803,802,804,803,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_200.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_200.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_200.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_200.cpp,50,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_path_excluded_ret"", ""null"", ""<""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_83.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_83.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_83.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_228.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_228.cpp,875,874,876,875,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_201.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_201.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_201.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_201.cpp,122,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_time_excluded_ret"", ""null"", ""<""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_83.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_83.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_83.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_229.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_229.cpp,901,900,902,901,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_202.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_202.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_202.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_202.cpp,148,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_owner_excluded_ret"", ""null"", ""<""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_filter_lz4.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_85.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_85.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_85.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_234.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_234.cpp,706,706,708,709,,"archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""truncated lz4 input"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_203.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_203.cpp,"{
	struct private_data *state = (struct private_data *)self->data;
	int compressed;
	const char *read_buf;
	ssize_t ret;

	*p = NULL;
	ret = lz4_allocate_out_block_for_legacy(self);
	if (ret != ARCHIVE_OK)
		return ret;

	/* Make sure we have 4 bytes for a block size. */
	read_buf = __archive_read_filter_ahead(self->upstream, 4, NULL);
	if (read_buf == NULL) {
		if (state->stage == SELECT_STREAM) {
			state->stage = READ_LEGACY_STREAM;
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated lz4 input"");
			return (ARCHIVE_FATAL);
		}
		state->stage = SELECT_STREAM;
		return 0;
	}
	state->stage = READ_LEGACY_BLOCK;
	compressed = archive_le32dec(read_buf);
	if (compressed > LZ4_COMPRESSBOUND(LEGACY_BLOCK_SIZE)) {
		state->stage = SELECT_STREAM;
		return 0;
	}

	/* Make sure we have a whole block. */
	read_buf = __archive_read_filter_ahead(self->upstream,
	    4 + compressed, NULL);
	ret = LZ4_decompress_safe(read_buf + 4, state->out_block,
	    compressed, (int)state->out_block_size);
	if (ret < 0) {
		archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""lz4 decompression failed"");
		return (ARCHIVE_FATAL);
	}
	*p = state->out_block;
	state->unconsumed = 4 + compressed;
	return ret;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_203.cpp,"[5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 1, 98, 0, 0, 4, 4, 0, 0, 1, 9, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 5, 0, 0, 8, 0, 0, 14, 0, 19, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_203.cpp,36,"[""__archive_read_filter_ahead_ret"", ""member"", ""archive_le32dec_ret"", ""member""]","[""archive_le32dec_ret"", ""LZ4_COMPRESSBOUND_ret"", "">"", ""!""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_87.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_238.cpp,763,744,789,-1,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for lzma decompression"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_204.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_204.cpp,"{
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for lzma decompression"");
		free(out_block);
		free(state);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_204.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_204.cpp,14,"[""member"", ""macro"", ""string""]","[""calloc_ret"", ""null"", ""=="", ""malloc_ret"", ""null"", ""=="", ""||""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_87.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_238.cpp,763,744,820,-1,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""Internal error initializing lzma library"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_205.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_205.cpp,"{
	static const size_t out_block_size = 64 * 1024;
	void *out_block;
	struct private_data *state;
	ssize_t ret, avail_in;

	self->code = ARCHIVE_FILTER_LZMA;
	self->name = ""lzma"";

	state = (struct private_data *)calloc(sizeof(*state), 1);
	out_block = (unsigned char *)malloc(out_block_size);
	if (state == NULL || out_block == NULL) {
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for lzma decompression"");
		free(out_block);
		free(state);
		return (ARCHIVE_FATAL);
	}

	self->data = state;
	state->out_block_size = out_block_size;
	state->out_block = out_block;
	self->read = lzma_filter_read;
	self->skip = NULL; /* not supported */
	self->close = lzma_filter_close;

	/* Prime the lzma library with 18 bytes of input. */
	state->stream.next_in = (unsigned char *)(uintptr_t)
	    __archive_read_filter_ahead(self->upstream, 18, &avail_in);
	if (state->stream.next_in == NULL)
		return (ARCHIVE_FATAL);
	state->stream.avail_in = avail_in;
	state->stream.next_out = state->out_block;
	state->stream.avail_out = state->out_block_size;

	/* Initialize compression library. */
	ret = lzmadec_init(&(state->stream));
	__archive_read_filter_consume(self->upstream,
	    avail_in - state->stream.avail_in);
	if (ret == LZMADEC_OK)
		return (ARCHIVE_OK);

	/* Library setup failed: Clean up. */
	archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""Internal error initializing lzma library"");

	/* Override the error message if we know what really went wrong. */
	switch (ret) {
	case LZMADEC_HEADER_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid header"");
		break;
	case LZMADEC_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	}

	free(state->out_block);
	free(state);
	self->data = NULL;
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_205.cpp,"[3, 0, 0, 0, 2, 0, 4, 1, 2, 0, 5, 0, 0, 0, 2, 152, 0, 0, 4, 5, 0, 0, 1, 11, 0, 0, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 62, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 4, 3, 0, 0, 14, 0, 0, 25, 0, 26, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_205.cpp,45,"[""member"", ""macro"", ""string""]","[""lzmadec_init_ret"", ""macro"", ""=="", ""!""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_87.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_238.cpp,763,744,826,-1,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid header"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_206.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_206.cpp,"{
	case LZMADEC_HEADER_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid header"");
		break;
	case LZMADEC_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_206.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_206.cpp,51,[],"[""lzmadec_init_ret""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_87.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_238.cpp,763,744,832,-1,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_207.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_207.cpp,"{
	case LZMADEC_HEADER_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid header"");
		break;
	case LZMADEC_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_207.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_207.cpp,57,[],"[""lzmadec_init_ret""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_87.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_238.cpp,763,744,865,-1,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated lzma input"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_208.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_208.cpp,"{
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated lzma input"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_208.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_208.cpp,18,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""=="", ""ssize_t"", ""null"", ""<"", ""&&""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_87.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_238.cpp,763,744,883,-1,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_209.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_209.cpp,"{
		case LZMADEC_STREAM_END: /* Found end of stream. */
			state->eof = 1;
			/* FALL THROUGH */
		case LZMADEC_OK: /* Decompressor made some progress. */
			__archive_read_filter_consume(self->upstream,
			    avail_in - state->stream.avail_in);
			break;
		case LZMADEC_BUF_ERROR: /* Insufficient input data? */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");
			return (ARCHIVE_FATAL);
		default:
			/* Return an error. */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Lzma decompression failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_209.cpp,"[0, 0, 0, 0, 1, 0, 2, 0, 3, 1, 1, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_209.cpp,36,"[""member"", ""macro"", ""string""]","[""lzmadec_decode_ret""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_87.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_238.cpp,763,744,889,-1,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Lzma decompression failed"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_210.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_210.cpp,"{
		case LZMADEC_STREAM_END: /* Found end of stream. */
			state->eof = 1;
			/* FALL THROUGH */
		case LZMADEC_OK: /* Decompressor made some progress. */
			__archive_read_filter_consume(self->upstream,
			    avail_in - state->stream.avail_in);
			break;
		case LZMADEC_BUF_ERROR: /* Insufficient input data? */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");
			return (ARCHIVE_FATAL);
		default:
			/* Return an error. */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Lzma decompression failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_210.cpp,"[0, 0, 0, 0, 1, 0, 2, 0, 3, 1, 1, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_210.cpp,42,"[""member"", ""macro"", ""string""]","[""lzmadec_decode_ret""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_87.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_238.cpp,763,744,920,-1,"archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up %s compressor"",
		    self->archive->archive.compression_name);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_211.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_211.cpp,"{
	case LZMADEC_OK:
		break;
	default:
		archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up %s compressor"",
		    self->archive->archive.compression_name);
		ret = ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_211.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_211.cpp,12,"[""member"", ""macro"", ""string"", ""member""]","[""lzmadec_end_ret""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_256.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_256.cpp,935,989,939,991,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Solaris NFSv4 ACLs not supported"");",acl_type = ARCHIVE_ENTRY_ACL_TYPE_ACCESS;,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_212.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_212.cpp,"{
	case 01000000:
		/* POSIX.1e ACL */
		break;
	case 03000000:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Solaris NFSv4 ACLs not supported"");
		return (ARCHIVE_WARN);
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Malformed Solaris ACL attribute (unsupported type %o)"",
		    (int)type);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_212.cpp,"[0, 0, 0, 0, 1, 0, 2, 0, 2, 1, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_212.cpp,53,"[""member"", ""macro"", ""string""]","[""bool""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_258.cpp,1128,1183,1129,1184,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry has negative size?"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry has negative size"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_213.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_213.cpp,"{
		tar->entry_bytes_remaining = 0;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry has negative size?"");
		err = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_213.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_213.cpp,23,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""<""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_258.cpp,1128,1183,1133,1191,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry size overflow"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_214.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_214.cpp,"{
	const struct archive_entry_header_ustar	*header;
	char	tartype;
	int     err = ARCHIVE_OK;

	header = (const struct archive_entry_header_ustar *)h;
	if (header->linkname[0])
		archive_strncpy(&(tar->entry_linkpath),
		    header->linkname, sizeof(header->linkname));
	else
		archive_string_empty(&(tar->entry_linkpath));

	/* Parse out the numeric fields (all are octal) */
	archive_entry_set_mode(entry,
		(mode_t)tar_atol(header->mode, sizeof(header->mode)));
	archive_entry_set_uid(entry, tar_atol(header->uid, sizeof(header->uid)));
	archive_entry_set_gid(entry, tar_atol(header->gid, sizeof(header->gid)));
	tar->entry_bytes_remaining = tar_atol(header->size, sizeof(header->size));
	if (tar->entry_bytes_remaining < 0) {
		tar->entry_bytes_remaining = 0;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry has negative size?"");
		err = ARCHIVE_WARN;
	}
	tar->realsize = tar->entry_bytes_remaining;
	archive_entry_set_size(entry, tar->entry_bytes_remaining);
	archive_entry_set_mtime(entry, tar_atol(header->mtime, sizeof(header->mtime)), 0);

	/* Handle the tar type flag appropriately. */
	tartype = header->typeflag[0];

	switch (tartype) {
	case '1': /* Hard link */
		if (archive_entry_copy_hardlink_l(entry, tar->entry_linkpath.s,
		    archive_strlen(&(tar->entry_linkpath)), tar->sconv) != 0) {
			err = set_conversion_failed_error(a, tar->sconv,
			    ""Linkname"");
			if (err == ARCHIVE_FATAL)
				return (err);
		}
		/*
		 * The following may seem odd, but: Technically, tar
		 * does not store the file type for a ""hard link""
		 * entry, only the fact that it is a hard link.  So, I
		 * leave the type zero normally.  But, pax interchange
		 * format allows hard links to have data, which
		 * implies that the underlying entry is a regular
		 * file.
		 */
		if (archive_entry_size(entry) > 0)
			archive_entry_set_filetype(entry, AE_IFREG);

		/*
		 * A tricky point: Traditionally, tar readers have
		 * ignored the size field when reading hardlink
		 * entries, and some writers put non-zero sizes even
		 * though the body is empty.  POSIX blessed this
		 * convention in the 1988 standard, but broke with
		 * this tradition in 2001 by permitting hardlink
		 * entries to store valid bodies in pax interchange
		 * format, but not in ustar format.  Since there is no
		 * hard and fast way to distinguish pax interchange
		 * from earlier archives (the 'x' and 'g' entries are
		 * optional, after all), we need a heuristic.
		 */
		if (archive_entry_size(entry) == 0) {
			/* If the size is already zero, we're done. */
		}  else if (a->archive.archive_format
		    == ARCHIVE_FORMAT_TAR_PAX_INTERCHANGE) {
			/* Definitely pax extended; must obey hardlink size. */
		} else if (a->archive.archive_format == ARCHIVE_FORMAT_TAR
		    || a->archive.archive_format == ARCHIVE_FORMAT_TAR_GNUTAR)
		{
			/* Old-style or GNU tar: we must ignore the size. */
			archive_entry_set_size(entry, 0);
			tar->entry_bytes_remaining = 0;
		} else if (archive_read_format_tar_bid(a, 50) > 50) {
			/*
			 * We don't know if it's pax: If the bid
			 * function sees a valid ustar header
			 * immediately following, then let's ignore
			 * the hardlink size.
			 */
			archive_entry_set_size(entry, 0);
			tar->entry_bytes_remaining = 0;
		}
		/*
		 * TODO: There are still two cases I'd like to handle:
		 *   = a ustar non-pax archive with a hardlink entry at
		 *     end-of-archive.  (Look for block of nulls following?)
		 *   = a pax archive that has not seen any pax headers
		 *     and has an entry which is a hardlink entry storing
		 *     a body containing an uncompressed tar archive.
		 * The first is worth addressing; I don't see any reliable
		 * way to deal with the second possibility.
		 */
		break;
	case '2': /* Symlink */
		archive_entry_set_filetype(entry, AE_IFLNK);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		if (archive_entry_copy_symlink_l(entry, tar->entry_linkpath.s,
		    archive_strlen(&(tar->entry_linkpath)), tar->sconv) != 0) {
			err = set_conversion_failed_error(a, tar->sconv,
			    ""Linkname"");
			if (err == ARCHIVE_FATAL)
				return (err);
		}
		break;
	case '3': /* Character device */
		archive_entry_set_filetype(entry, AE_IFCHR);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		break;
	case '4': /* Block device */
		archive_entry_set_filetype(entry, AE_IFBLK);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		break;
	case '5': /* Dir */
		archive_entry_set_filetype(entry, AE_IFDIR);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		break;
	case '6': /* FIFO device */
		archive_entry_set_filetype(entry, AE_IFIFO);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		break;
	case 'D': /* GNU incremental directory type */
		/*
		 * No special handling is actually required here.
		 * It might be nice someday to preprocess the file list and
		 * provide it to the client, though.
		 */
		archive_entry_set_filetype(entry, AE_IFDIR);
		break;
	case 'M': /* GNU ""Multi-volume"" (remainder of file from last archive)*/
		/*
		 * As far as I can tell, this is just like a regular file
		 * entry, except that the contents should be _appended_ to
		 * the indicated file at the indicated offset.  This may
		 * require some API work to fully support.
		 */
		break;
	case 'N': /* Old GNU ""long filename"" entry. */
		/* The body of this entry is a script for renaming
		 * previously-extracted entries.  Ugh.  It will never
		 * be supported by libarchive. */
		archive_entry_set_filetype(entry, AE_IFREG);
		break;
	case 'S': /* GNU sparse files */
		/*
		 * Sparse files are really just regular files with
		 * sparse information in the extended area.
		 */
		/* FALLTHROUGH */
	default: /* Regular file  and non-standard types */
		/*
		 * Per POSIX: non-recognized types should always be
		 * treated as regular files.
		 */
		archive_entry_set_filetype(entry, AE_IFREG);
		break;
	}
	return (err);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_214.cpp,"[11, 0, 0, 0, 10, 0, 3, 1, 10, 1, 14, 0, 0, 0, 2, 233, 0, 0, 3, 3, 0, 0, 1, 38, 0, 0, 0, 0, 1, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 153, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 12, 11, 1, 0, 44, 0, 0, 39, 3, 86, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_214.cpp,27,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_259.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_259.cpp,1695,1768,1696,1802,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown ACL type: %d"", type);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_215.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_215.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_215.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_215.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_259.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_259.cpp,1695,1768,1696,1819,,"archive_set_error(&a->archive, ENOMEM,
			    ""%s %s"", ""Can't allocate memory for "",
			    errstr);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_216.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_216.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_216.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_259.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_259.cpp,1695,1768,1696,1824,,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC, ""%s %s"", ""Parse error: "", errstr);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_217.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_217.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_217.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_217.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_260.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_260.cpp,1721,1854,1724,1859,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Non-regular file cannot be sparse"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_218.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_218.cpp,"(strcmp(key, ""GNU.sparse.numblocks"") == 0) {
			tar->sparse_offset = -1;
			tar->sparse_numbytes = -1;
			tar->sparse_gnu_major = 0;
			tar->sparse_gnu_minor = 0;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_218.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_218.cpp,14,"[""const char *"", ""constant""]","[""member""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_261.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_261.cpp,1803,1944,1819,-1,"archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.access"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_219.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_219.cpp,"{
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.access"");
					return (err);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_219.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_219.cpp,109,[],"[""archive_acl_parse_l_ret"", ""macro"", ""==""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_261.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_261.cpp,1803,1944,1824,-1,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SCHILY.acl.access"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_220.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_220.cpp,"{
				err = r;
				if (err == ARCHIVE_FATAL) {
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.access"");
					return (err);
				}
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SCHILY.acl.access"");
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_220.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_220.cpp,114,"[""member"", ""macro"", ""constant""]","[""archive_acl_parse_l_ret"", ""macro"", ""=="", ""!""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_261.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_261.cpp,1803,1944,1843,-1,"archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.default"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_221.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_221.cpp,"{
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.default"");
					return (err);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_221.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_221.cpp,133,[],"[""archive_acl_parse_l_ret"", ""macro"", ""==""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_261.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_261.cpp,1803,1944,1848,-1,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SCHILY.acl.default"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_222.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_222.cpp,"{
				err = r;
				if (err == ARCHIVE_FATAL) {
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.default"");
					return (err);
				}
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SCHILY.acl.default"");
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_222.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_222.cpp,138,"[""member"", ""macro"", ""constant""]","[""archive_acl_parse_l_ret"", ""macro"", ""=="", ""!""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_warc.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_95.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_95.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_95.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_264.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_264.cpp,255,254,262,260,"archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Unsupported record version"");","archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Invalid record version"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_223.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_223.cpp,"{
		/* nawww, I wish they promised backward compatibility
		 * anyhoo, in their infinite wisdom the 28500 guys might
		 * come up with something we can't possibly handle so
		 * best end things here */
		archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Unsupported record version"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_223.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_223.cpp,52,"[""member"", ""macro"", ""string""]","[""_warc_rdver_ret"", ""constant"", "">""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_warc.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_95.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_95.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_95.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_264.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_264.cpp,255,254,274,265,,"archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Unsupported record version: %u.%u"",
			ver / 10000, (ver % 10000) / 100);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_224.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_224.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_224.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_224.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_warc.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_95.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_95.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_95.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_265.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_265.cpp,285,293,286,294,"archive_string_sprintf(&w->sver,
			""WARC/%u.%u"", ver / 10000, ver % 10000);","archive_string_sprintf(&w->sver,
			""WARC/%u.%u"", ver / 10000, (ver % 10000) / 100);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_225.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_225.cpp,"{
		/* stringify this entry's version */
		archive_string_sprintf(&w->sver,
			""WARC/%u.%u"", ver / 10000, ver % 10000);
		/* remember the version */
		w->pver = ver;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_225.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_225.cpp,76,"[""member"", ""constant"", ""_warc_rdver_ret"", ""_warc_rdver_ret""]","[""_warc_rdver_ret"", ""member"", ""!=""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_97.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_269.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_269.cpp,418,418,417,430,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Too-small extra data: Need at least 4 bytes, but only found %d bytes"", (int)extra_length);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_230.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_230.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_230.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_230.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_97.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_270.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_270.cpp,440,452,443,457,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit uncompressed size"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_231.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_231.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_231.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_231.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_97.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_270.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_270.cpp,440,452,451,469,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit compressed size"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_232.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_232.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_232.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_232.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_97.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_270.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_270.cpp,440,452,459,481,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit local header offset"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_233.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_233.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_233.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_233.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_97.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_271.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_271.cpp,715,739,720,742,"fprintf(stderr,
		    ""Extra data field contents do not match reported size!\n"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Malformed extra data: Consumed %d bytes of %d bytes"",
		    (int)offset, (int)extra_length);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_234.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_234.cpp,"{
		fprintf(stderr,
		    ""Extra data field contents do not match reported size!\n"");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_234.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_234.cpp,300,"[""unkown"", ""string""]","[""int"", ""size_t"", ""!=""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_97.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_272.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_272.cpp,1136,1168,1143,1175,,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Overflow of 64-bit file sizes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_235.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_235.cpp,"{
				zip->entry->crc32 = archive_le32dec(p + 4);
				zip->entry->compressed_size =
					archive_le64dec(p + 8);
				zip->entry->uncompressed_size =
					archive_le64dec(p + 16);
				zip->unconsumed = 24;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_235.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_235.cpp,48,[],"[""bool""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_97.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_274.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_274.cpp,1417,1456,1422,1463,,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Overflow of 64-bit file sizes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_236.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_236.cpp,"{
			zip->entry->crc32 = archive_le32dec(p);
			zip->entry->compressed_size = archive_le64dec(p + 4);
			zip->entry->uncompressed_size = archive_le64dec(p + 12);
			zip->unconsumed += 20;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_236.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_236.cpp,167,[],"[""bool""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_98.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_282.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_282.cpp,2022,2078,2025,2092,,"archive_set_error(&a->archive, error_number, ""%s"",
			    error_string.s);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_237.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_237.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_237.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_237.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_98.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_282.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_282.cpp,2022,2078,2025,2105,,"archive_set_error(&a->archive, error_number, ""%s"",
			    error_string.s);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_238.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_238.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_238.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_98.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_283.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_283.cpp,2351,2457,2353,2467,,"archive_string_sprintf(a_estr, errstr, path);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_243.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_243.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_243.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_98.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_283.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_283.cpp,2351,2457,2460,2698,,"fsobj_error(a_eno, a_estr, errno,
			    ""chdir() failure"", """");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_248.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_248.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_248.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_248.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_98.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_284.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_284.cpp,2534,2807,2543,2817,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty pathname"");","fsobj_error(a_eno, a_estr, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty "", ""pathname"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_250.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_250.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty pathname"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_250.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_250.cpp,8,"[""member"", ""macro"", ""string""]","[""member"", ""char"", ""==""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_98.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_284.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_284.cpp,2534,2807,2554,2828,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			                  ""Path is absolute"");","fsobj_error(a_eno, a_estr, ARCHIVE_ERRNO_MISC,
			    ""Path is "", ""absolute"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_251.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_251.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			                  ""Path is absolute"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_251.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_251.cpp,19,"[""member"", ""macro"", ""string""]","[""bool""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_98.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_285.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_285.cpp,2580,2854,2583,2858,"archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Path contains '..'"");","fsobj_error(a_eno, a_estr,
						    ARCHIVE_ERRNO_MISC,
						    ""Path contains "", ""'..'"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_252.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_252.cpp,"{
						archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Path contains '..'"");
						return (ARCHIVE_FAILED);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_252.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_252.cpp,48,"[""member"", ""macro"", ""constant""]","[""bool""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_98.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_286.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_286.cpp,2629,2904,2630,2916,,"archive_set_error(&a->archive, error_number, ""%s"",
		    error_string.s);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_253.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_253.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_253.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_253.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_100.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_293.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_293.cpp,450,491,451,516,,"archive_set_error(&a->archive, ENOMEM, ""%s %s"",
			    ""Can't allocate memory for "", attr);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_254.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_254.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_254.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_100.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_293.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_293.cpp,450,491,451,520,,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT, ""%s %s %s"",
		    ""Can't translate "", attr, "" to UTF-8"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_255.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_255.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_255.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_255.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_100.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_294.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_294.cpp,1086,1163,1094,-1,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.access"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_256.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_256.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.access"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_256.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_256.cpp,634,[],"[""unkown"", ""macro"", ""==""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_100.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_294.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_294.cpp,1086,1163,1099,-1,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate ACL.access to UTF-8"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_257.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_257.cpp,"{
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.access"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate ACL.access to UTF-8"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_257.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_257.cpp,639,"[""member"", ""macro"", ""constant""]","[""unkown"", ""macro"", ""=="", ""!""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_100.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_294.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_294.cpp,1086,1163,1113,-1,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.default"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_258.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.default"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_258.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_258.cpp,653,[],"[""unkown"", ""macro"", ""==""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_100.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_294.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_294.cpp,1086,1163,1118,-1,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate ACL.default to UTF-8"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_259.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_259.cpp,"{
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.default"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate ACL.default to UTF-8"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_259.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_259.cpp,658,"[""member"", ""macro"", ""constant""]","[""unkown"", ""macro"", ""=="", ""!""]"
1df9d5f91944e0b5ba00815d55bb7dc545053b4c,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-12-22 (44b9b4d4)",[],Utilities/cmcurl/lib/socks_gssapi.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_104.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_104.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_104.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_298.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_298.cpp,134,135,150,152,"snprintf(service.value, service.length+1, ""%s@%s"",
             serviceptr, conn->proxy.name);","snprintf(service.value, service.length+1, ""%s@%s"",
             serviceptr, conn->socks_proxy.host.name);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_260.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_260.cpp,"{
    service.value = malloc(strlen(serviceptr) +strlen(conn->proxy.name)+2);
    if(!service.value)
      return CURLE_OUT_OF_MEMORY;
    service.length = strlen(serviceptr) +strlen(conn->proxy.name)+1;
    snprintf(service.value, service.length+1, ""%s@%s"",
             serviceptr, conn->proxy.name);

    gss_major_status = gss_import_name(&gss_minor_status, &service,
                                       GSS_C_NT_HOSTBASED_SERVICE, &server);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_260.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 7, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_260.cpp,49,"[""member"", ""member"", ""string"", ""const char *"", ""member""]","[""member"", ""!""]"
1df9d5f91944e0b5ba00815d55bb7dc545053b4c,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-12-22 (44b9b4d4)",[],Utilities/cmcurl/lib/vauth/digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_106.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_106.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_106.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_301.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_301.cpp,684,684,686,690,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));","snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             rnd[0], rnd[1], rnd[2], rnd[3]);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_261.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_261.cpp,"{
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_261.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 23, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 8, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_261.cpp,25,"[""char *"", ""unkown"", ""string"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret""]","[""member""]"
4cc2908fdaaf1ab8afe5c2ae5dbb3401859a9aab,"curl 2016-12-22 (44b9b4d4)

Code extracted from:

    https://github.com/curl/curl.git

at commit 44b9b4d4f56d6f6de92c89636994c03984e9cd01 (curl-7_52_1).",[],lib/socks_gssapi.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_111.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_111.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_111.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_307.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_307.cpp,134,135,150,152,"snprintf(service.value, service.length+1, ""%s@%s"",
             serviceptr, conn->proxy.name);","snprintf(service.value, service.length+1, ""%s@%s"",
             serviceptr, conn->socks_proxy.host.name);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_262.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_262.cpp,"{
    service.value = malloc(strlen(serviceptr) +strlen(conn->proxy.name)+2);
    if(!service.value)
      return CURLE_OUT_OF_MEMORY;
    service.length = strlen(serviceptr) +strlen(conn->proxy.name)+1;
    snprintf(service.value, service.length+1, ""%s@%s"",
             serviceptr, conn->proxy.name);

    gss_major_status = gss_import_name(&gss_minor_status, &service,
                                       GSS_C_NT_HOSTBASED_SERVICE, &server);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_262.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 7, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_262.cpp,49,"[""member"", ""member"", ""string"", ""const char *"", ""member""]","[""member"", ""!""]"
4cc2908fdaaf1ab8afe5c2ae5dbb3401859a9aab,"curl 2016-12-22 (44b9b4d4)

Code extracted from:

    https://github.com/curl/curl.git

at commit 44b9b4d4f56d6f6de92c89636994c03984e9cd01 (curl-7_52_1).",[],lib/vauth/digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_113.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_113.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_113.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_310.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_310.cpp,684,684,686,690,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));","snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             rnd[0], rnd[1], rnd[2], rnd[3]);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_263.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_263.cpp,"{
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_263.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 23, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 8, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_263.cpp,25,"[""char *"", ""unkown"", ""string"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret""]","[""member""]"
c5df1f165c7f8f1e31e3144d326c6836af2e678d,"Regenerate lexer source code

Revise the manual procedure in the `*Lexer.in.l` files.  Some of our
post-processing steps are no longer necessary with the current set of
supported compilers.  Some steps changed with newer versions of flex.

Then regenerate all lexers with flex version 2.6.1.",[],Source/cmCommandArgumentLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_117.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_117.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_117.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_321.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_321.cpp,1802,1809,1813,1820,"yy_fatal_error( ""cmCommandArgument_yyset_lineno called with no buffer"" , yyscanner);","YY_FATAL_ERROR( ""cmCommandArgument_yyset_lineno called with no buffer"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_264.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_264.cpp,"yy_fatal_error( ""cmCommandArgument_yyset_lineno called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_264.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_264.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
c5df1f165c7f8f1e31e3144d326c6836af2e678d,"Regenerate lexer source code

Revise the manual procedure in the `*Lexer.in.l` files.  Some of our
post-processing steps are no longer necessary with the current set of
supported compilers.  Some steps changed with newer versions of flex.

Then regenerate all lexers with flex version 2.6.1.",[],Source/cmCommandArgumentLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_117.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_117.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_117.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_321.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_321.cpp,1802,1809,1828,1835,"yy_fatal_error( ""cmCommandArgument_yyset_column called with no buffer"" , yyscanner);","YY_FATAL_ERROR( ""cmCommandArgument_yyset_column called with no buffer"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_265.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_265.cpp,"yy_fatal_error( ""cmCommandArgument_yyset_column called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_265.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_265.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
c5df1f165c7f8f1e31e3144d326c6836af2e678d,"Regenerate lexer source code

Revise the manual procedure in the `*Lexer.in.l` files.  Some of our
post-processing steps are no longer necessary with the current set of
supported compilers.  Some steps changed with newer versions of flex.

Then regenerate all lexers with flex version 2.6.1.",[],Source/cmExprLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_118.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_323.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_323.cpp,676,684,1097,1125,,"YY_FATAL_ERROR( ""out of dynamic memory in yy_get_next_buffer()"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_266.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_266.cpp,"{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
  char *source = yyg->yytext_ptr;
  int number_to_move, i;
  int ret_val;

  if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
    YY_FATAL_ERROR(
    ""fatal flex scanner internal error--end of buffer missed"" );

  if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
    { /* Don't try to fill the buffer, so this is an EOF. */
    if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
      {
      /* We matched a single character, the EOB, so
       * treat this as a final EOF.
       */
      return EOB_ACT_END_OF_FILE;
      }

    else
      {
      /* We matched some text prior to the EOB, first
       * process it.
       */
      return EOB_ACT_LAST_MATCH;
      }
    }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

  for ( i = 0; i < number_to_move; ++i )
    *(dest++) = *(source++);

  if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

  else
    {
      size_t nuto_read =
      YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while ( nuto_read <= 0 )
      { /* Not enough room in the buffer - grow it. */

      /* just a shorter name for the current buffer */
      YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

      int yy_c_buf_p_offset =
        (int) (yyg->yy_c_buf_p - b->yy_ch_buf);

      if ( b->yy_is_our_buffer )
        {
        int new_size = b->yy_buf_size * 2;

        if ( new_size <= 0 )
          b->yy_buf_size += b->yy_buf_size / 8;
        else
          b->yy_buf_size *= 2;

        b->yy_ch_buf = (char *)
          /* Include room in for 2 EOB chars. */
          cmExpr_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
        }
      else
        /* Can't grow it, we don't own it. */
        b->yy_ch_buf = 0;

      if ( ! b->yy_ch_buf )
        YY_FATAL_ERROR(
        ""fatal error - scanner input buffer overflow"" );

      yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

      nuto_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
            number_to_move - 1;

      }

    if ( nuto_read > YY_READ_BUF_SIZE )
      nuto_read = YY_READ_BUF_SIZE;

    /* Read in more data. */
    YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
      yyg->yy_n_chars, nuto_read );

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
    }

  if ( yyg->yy_n_chars == 0 )
    {
    if ( number_to_move == YY_MORE_ADJ )
      {
      ret_val = EOB_ACT_END_OF_FILE;
      cmExpr_yyrestart(yyin  ,yyscanner);
      }

    else
      {
      ret_val = EOB_ACT_LAST_MATCH;
      YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
        YY_BUFFER_EOF_PENDING;
      }
    }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  yyg->yy_n_chars += number_to_move;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

  yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

  return ret_val;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_266.cpp,"[10, 1, 1, 0, 0, 0, 3, 0, 0, 0, 19, 0, 0, 0, 0, 198, 0, 0, 9, 10, 0, 0, 8, 20, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 6, 0, 12, 10, 6, 0, 7, 0, 0, 23, 0, 12, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_266.cpp,116,[],"[""member"", ""null"", ""=="", ""!""]"
c5df1f165c7f8f1e31e3144d326c6836af2e678d,"Regenerate lexer source code

Revise the manual procedure in the `*Lexer.in.l` files.  Some of our
post-processing steps are no longer necessary with the current set of
supported compilers.  Some steps changed with newer versions of flex.

Then regenerate all lexers with flex version 2.6.1.",[],Source/cmExprLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_118.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_323.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_323.cpp,676,684,1167,1227,,"YY_FATAL_ERROR( ""flex scanner push-back overflow"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_267.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_267.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_267.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_267.cpp,0,[],[]
c5df1f165c7f8f1e31e3144d326c6836af2e678d,"Regenerate lexer source code

Revise the manual procedure in the `*Lexer.in.l` files.  Some of our
post-processing steps are no longer necessary with the current set of
supported compilers.  Some steps changed with newer versions of flex.

Then regenerate all lexers with flex version 2.6.1.",[],Source/cmExprLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_118.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_325.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_325.cpp,1454,1523,1491,1558,,"YY_FATAL_ERROR( ""out of dynamic memory in cmExpr_yyensure_buffer_stack()"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_268.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_268.cpp,"{

    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
         */
    nuto_alloc = 1;
    yyg->yy_buffer_stack = (struct yy_buffer_state**)cmExpr_yyalloc
                (nuto_alloc * sizeof(struct yy_buffer_state*)
                , yyscanner);

    memset(yyg->yy_buffer_stack, 0, nuto_alloc * sizeof(struct yy_buffer_state*));

    yyg->yy_buffer_stack_max = nuto_alloc;
    yyg->yy_buffer_stack_top = 0;
    return;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_268.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 12, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_268.cpp,18,[],"[""member""]"
c5df1f165c7f8f1e31e3144d326c6836af2e678d,"Regenerate lexer source code

Revise the manual procedure in the `*Lexer.in.l` files.  Some of our
post-processing steps are no longer necessary with the current set of
supported compilers.  Some steps changed with newer versions of flex.

Then regenerate all lexers with flex version 2.6.1.",[],Source/cmExprLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_118.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_325.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_325.cpp,1454,1523,1507,1578,,"YY_FATAL_ERROR( ""out of dynamic memory in cmExpr_yyensure_buffer_stack()"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_269.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_269.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_269.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_269.cpp,0,[],[]
c5df1f165c7f8f1e31e3144d326c6836af2e678d,"Regenerate lexer source code

Revise the manual procedure in the `*Lexer.in.l` files.  Some of our
post-processing steps are no longer necessary with the current set of
supported compilers.  Some steps changed with newer versions of flex.

Then regenerate all lexers with flex version 2.6.1.",[],Source/cmExprLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_118.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_327.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_327.cpp,1709,1784,1720,1795,"yy_fatal_error( ""cmExpr_yyset_lineno called with no buffer"" , yyscanner);","YY_FATAL_ERROR( ""cmExpr_yyset_lineno called with no buffer"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_270.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_270.cpp,"yy_fatal_error( ""cmExpr_yyset_lineno called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_270.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_270.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
c5df1f165c7f8f1e31e3144d326c6836af2e678d,"Regenerate lexer source code

Revise the manual procedure in the `*Lexer.in.l` files.  Some of our
post-processing steps are no longer necessary with the current set of
supported compilers.  Some steps changed with newer versions of flex.

Then regenerate all lexers with flex version 2.6.1.",[],Source/cmExprLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_118.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_327.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_327.cpp,1709,1784,1735,1810,"yy_fatal_error( ""cmExpr_yyset_column called with no buffer"" , yyscanner);","YY_FATAL_ERROR( ""cmExpr_yyset_column called with no buffer"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_271.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_271.cpp,"yy_fatal_error( ""cmExpr_yyset_column called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_271.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_271.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
f8a1ba202f51e70510f12f46fe0633ea908d5144,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-11-02 (3c561c65)",[],Utilities/cmcurl/lib/easy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_120.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_120.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_120.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_331.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_331.cpp,144,143,159,-1,"snprintf(buf, sizeof(buf), ""CHARSET=cp%u"", cp);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_272.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_272.cpp,"{
    snprintf(buf, sizeof(buf), ""CHARSET=cp%u"", cp);
    putenv(buf);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_272.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_272.cpp,7,"[""char *"", ""unkown"", ""string"", ""UINT""]","[""getenv_ret"", ""!"", ""UINT"", ""null"", "">"", ""&&""]"
f8a1ba202f51e70510f12f46fe0633ea908d5144,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-11-02 (3c561c65)",[],Utilities/cmcurl/lib/easy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_120.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_120.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_120.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_332.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_332.cpp,262,239,269,241,"DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));","f(Curl_resolver_global_init()) {
    DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));
    return CURLE_FAILED_INIT;;",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_273.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_273.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_273.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_273.cpp,47,"[""fprintf_ret""]","[""Curl_resolver_global_init_ret""]"
f8a1ba202f51e70510f12f46fe0633ea908d5144,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-11-02 (3c561c65)",[],Utilities/cmcurl/lib/easy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_120.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_120.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_120.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_332.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_332.cpp,262,239,269,242,,"DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_274.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_274.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_274.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_274.cpp,47,"[""fprintf_ret""]","[""Curl_resolver_global_init_ret""]"
f8a1ba202f51e70510f12f46fe0633ea908d5144,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-11-02 (3c561c65)",[],Utilities/cmcurl/lib/formdata.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_121.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_121.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_121.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_333.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_333.cpp,906,914,911,920,"vsnprintf(s, sizeof(s), fmt, ap);","s = curl_mvaprintf(fmt, ap);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_275.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_275.cpp,"{
  char s[4096];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(s, sizeof(s), fmt, ap);
  va_end(ap);

  return AddFormData(formp, FORM_DATA, s, 0, size);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_275.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 5, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_275.cpp,7,"[""char *"", ""unkown"", ""const char *"", ""va_list""]",[]
f8a1ba202f51e70510f12f46fe0633ea908d5144,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-11-02 (3c561c65)",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_122.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_122.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_122.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_334.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_334.cpp,4107,4103,4111,-1,"write_len = vsnprintf(s, SBUF_SIZE-3, fmt, ap);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_276.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_276.cpp,"{
  ssize_t bytes_written;
#define SBUF_SIZE 1024
  char s[SBUF_SIZE];
  size_t write_len;
  char *sptr=s;
  CURLcode result = CURLE_OK;
#ifdef HAVE_GSSAPI
  enum protection_level data_sec = conn->data_prot;
#endif

  va_list ap;
  va_start(ap, fmt);
  write_len = vsnprintf(s, SBUF_SIZE-3, fmt, ap);
  va_end(ap);

  strcpy(&s[write_len], ""\r\n""); /* append a trailing CRLF */
  write_len +=2;

  bytes_written=0;

  result = Curl_convert_to_network(conn->data, s, write_len);
  /* Curl_convert_to_network calls failf if unsuccessful */
  if(result)
    return result;

  for(;;) {
#ifdef HAVE_GSSAPI
    conn->data_prot = PROT_CMD;
#endif
    result = Curl_write(conn, conn->sock[FIRSTSOCKET], sptr, write_len,
                        &bytes_written);
#ifdef HAVE_GSSAPI
    DEBUGASSERT(data_sec > PROT_NONE && data_sec < PROT_LAST);
    conn->data_prot = data_sec;
#endif

    if(result)
      break;

    if(conn->data->set.verbose)
      Curl_debug(conn->data, CURLINFO_HEADER_OUT,
                 sptr, (size_t)bytes_written, conn);

    if(bytes_written != (ssize_t)write_len) {
      write_len -= bytes_written;
      sptr += bytes_written;
    }
    else
      break;
  }

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_276.cpp,"[4, 0, 1, 0, 2, 0, 2, 0, 0, 0, 7, 0, 0, 0, 0, 99, 0, 0, 7, 7, 0, 0, 4, 4, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 0, 5, 4, 1, 0, 8, 0, 0, 14, 0, 23, 7, 1, 1, 1, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_276.cpp,15,"[""char *"", ""macro"", ""const char *"", ""va_list""]",[]
f8a1ba202f51e70510f12f46fe0633ea908d5144,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-11-02 (3c561c65)",[],Utilities/cmcurl/lib/version.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_127.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_127.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_127.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_339.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_339.cpp,111,111,115,115,"len = snprintf(ptr, left, "" libidn/%s"", stringprep_check_version(NULL));","len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_277.cpp,"{
    len = snprintf(ptr, left, "" libidn/%s"", stringprep_check_version(NULL));
    left -= len;
    ptr += len;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_277.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_277.cpp,39,"[""snprintf_ret"", ""snprintf_ret"", ""string"", ""stringprep_check_version_ret""]","[""stringprep_check_version_ret""]"
93cc249f3dd7ecd621cd063e4c08bbdb54d971e8,"curl 2016-11-02 (3c561c65)

Code extracted from:

    https://github.com/curl/curl.git

at commit 3c561c657c2f0e553b19115a506592a8bbd744bc (curl-7_51_0).",[],lib/easy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_129.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_129.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_129.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_341.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_341.cpp,144,143,159,-1,"snprintf(buf, sizeof(buf), ""CHARSET=cp%u"", cp);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_278.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_278.cpp,"{
    snprintf(buf, sizeof(buf), ""CHARSET=cp%u"", cp);
    putenv(buf);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_278.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_278.cpp,7,"[""char *"", ""unkown"", ""string"", ""UINT""]","[""getenv_ret"", ""!"", ""UINT"", ""null"", "">"", ""&&""]"
93cc249f3dd7ecd621cd063e4c08bbdb54d971e8,"curl 2016-11-02 (3c561c65)

Code extracted from:

    https://github.com/curl/curl.git

at commit 3c561c657c2f0e553b19115a506592a8bbd744bc (curl-7_51_0).",[],lib/easy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_129.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_129.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_129.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_342.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_342.cpp,262,239,269,241,"DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));","f(Curl_resolver_global_init()) {
    DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));
    return CURLE_FAILED_INIT;;",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_279.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_279.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_279.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_279.cpp,47,"[""fprintf_ret""]","[""Curl_resolver_global_init_ret""]"
93cc249f3dd7ecd621cd063e4c08bbdb54d971e8,"curl 2016-11-02 (3c561c65)

Code extracted from:

    https://github.com/curl/curl.git

at commit 3c561c657c2f0e553b19115a506592a8bbd744bc (curl-7_51_0).",[],lib/easy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_129.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_129.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_129.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_342.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_342.cpp,262,239,269,242,,"DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_280.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_280.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_280.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_280.cpp,47,"[""fprintf_ret""]","[""Curl_resolver_global_init_ret""]"
93cc249f3dd7ecd621cd063e4c08bbdb54d971e8,"curl 2016-11-02 (3c561c65)

Code extracted from:

    https://github.com/curl/curl.git

at commit 3c561c657c2f0e553b19115a506592a8bbd744bc (curl-7_51_0).",[],lib/formdata.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_130.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_130.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_130.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_343.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_343.cpp,906,914,911,920,"vsnprintf(s, sizeof(s), fmt, ap);","s = curl_mvaprintf(fmt, ap);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_281.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_281.cpp,"{
  char s[4096];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(s, sizeof(s), fmt, ap);
  va_end(ap);

  return AddFormData(formp, FORM_DATA, s, 0, size);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_281.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 5, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_281.cpp,7,"[""char *"", ""unkown"", ""const char *"", ""va_list""]",[]
93cc249f3dd7ecd621cd063e4c08bbdb54d971e8,"curl 2016-11-02 (3c561c65)

Code extracted from:

    https://github.com/curl/curl.git

at commit 3c561c657c2f0e553b19115a506592a8bbd744bc (curl-7_51_0).",[],lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_131.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_131.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_131.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_344.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_344.cpp,4106,4102,4110,-1,"write_len = vsnprintf(s, SBUF_SIZE-3, fmt, ap);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_282.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_282.cpp,"{
  ssize_t bytes_written;
#define SBUF_SIZE 1024
  char s[SBUF_SIZE];
  size_t write_len;
  char *sptr=s;
  CURLcode result = CURLE_OK;
#ifdef HAVE_GSSAPI
  enum protection_level data_sec = conn->data_prot;
#endif

  va_list ap;
  va_start(ap, fmt);
  write_len = vsnprintf(s, SBUF_SIZE-3, fmt, ap);
  va_end(ap);

  strcpy(&s[write_len], ""\r\n""); /* append a trailing CRLF */
  write_len +=2;

  bytes_written=0;

  result = Curl_convert_to_network(conn->data, s, write_len);
  /* Curl_convert_to_network calls failf if unsuccessful */
  if(result)
    return result;

  for(;;) {
#ifdef HAVE_GSSAPI
    conn->data_prot = PROT_CMD;
#endif
    result = Curl_write(conn, conn->sock[FIRSTSOCKET], sptr, write_len,
                        &bytes_written);
#ifdef HAVE_GSSAPI
    DEBUGASSERT(data_sec > PROT_NONE && data_sec < PROT_LAST);
    conn->data_prot = data_sec;
#endif

    if(result)
      break;

    if(conn->data->set.verbose)
      Curl_debug(conn->data, CURLINFO_HEADER_OUT,
                 sptr, (size_t)bytes_written, conn);

    if(bytes_written != (ssize_t)write_len) {
      write_len -= bytes_written;
      sptr += bytes_written;
    }
    else
      break;
  }

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_282.cpp,"[4, 0, 1, 0, 2, 0, 2, 0, 0, 0, 7, 0, 0, 0, 0, 99, 0, 0, 7, 7, 0, 0, 4, 4, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 0, 5, 4, 1, 0, 8, 0, 0, 14, 0, 23, 7, 1, 1, 1, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_282.cpp,15,"[""char *"", ""macro"", ""const char *"", ""va_list""]",[]
93cc249f3dd7ecd621cd063e4c08bbdb54d971e8,"curl 2016-11-02 (3c561c65)

Code extracted from:

    https://github.com/curl/curl.git

at commit 3c561c657c2f0e553b19115a506592a8bbd744bc (curl-7_51_0).",[],lib/version.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_136.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_136.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_136.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_349.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_349.cpp,111,111,115,115,"len = snprintf(ptr, left, "" libidn/%s"", stringprep_check_version(NULL));","len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_283.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_283.cpp,"{
    len = snprintf(ptr, left, "" libidn/%s"", stringprep_check_version(NULL));
    left -= len;
    ptr += len;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_283.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_283.cpp,39,"[""snprintf_ret"", ""snprintf_ret"", ""string"", ""stringprep_check_version_ret""]","[""stringprep_check_version_ret""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/conncache.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_157.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_157.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_157.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_410.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_410.cpp,132,131,134,-1,"aprintf(""%s:%d"",
                 conn->bits.proxy?conn->proxy.name:conn->host.name,
                 conn->localport);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_284.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_284.cpp,"{
  return aprintf(""%s:%d"",
                 conn->bits.proxy?conn->proxy.name:conn->host.name,
                 conn->localport);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_284.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_284.cpp,2,"[""string"", ""member"", ""member""]",[]
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/conncache.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_157.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_157.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_157.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_410.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_410.cpp,132,131,134,142,,"aprintf(""%s:%d"", hostname, conn->port);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_285.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_285.cpp,"{
  return aprintf(""%s:%d"",
                 conn->bits.proxy?conn->proxy.name:conn->host.name,
                 conn->localport);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_285.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_285.cpp,2,"[""string"", ""member"", ""member""]",[]
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,168,-1,"snprintf((char *)&dest[i*2], 3, ""%02x"", source[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_286.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_286.cpp,"snprintf((char *)&dest[i*2], 3, ""%02x"", source[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_286.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_286.cpp,5,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""int"", ""<""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,277,-1,"aprintf(""%s/%s"", service, host);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_287.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_287.cpp,"{
  /* Generate and return our SPN */
  return aprintf(""%s/%s"", service, host);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_287.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_287.cpp,3,"[""string"", ""const char *"", ""const char *""]",[]
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,474,-1,"response = aprintf(
      ""%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"",
           userp, digest[0], digest[1], digest[2], digest[3], digest[4],
           digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
           digest[11], digest[12], digest[13], digest[14], digest[15]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_288.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_288.cpp,"{
  CURLcode result = CURLE_OK;
  size_t chlglen = 0;
  HMAC_context *ctxt;
  unsigned char digest[MD5_DIGEST_LEN];
  char *response;

  if(chlg)
    chlglen = strlen(chlg);

  /* Compute the digest using the password as the key */
  ctxt = Curl_HMAC_init(Curl_HMAC_MD5,
                        (const unsigned char *) passwdp,
                        curlx_uztoui(strlen(passwdp)));
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  /* Update the digest with the given challenge */
  if(chlglen > 0)
    Curl_HMAC_update(ctxt, (const unsigned char *) chlg,
                     curlx_uztoui(chlglen));

  /* Finalise the digest */
  Curl_HMAC_final(ctxt, digest);

  /* Generate the response */
  response = aprintf(
      ""%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"",
           userp, digest[0], digest[1], digest[2], digest[3], digest[4],
           digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
           digest[11], digest[12], digest[13], digest[14], digest[15]);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_288.cpp,"[4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 2, 86, 0, 0, 5, 5, 0, 0, 2, 20, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 17, 0, 4, 4, 0, 0, 10, 0, 0, 7, 0, 36, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_288.cpp,31,"[""string"", ""const char *"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""Curl_HMAC_init_ret"", ""!"", ""!""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,636,-1,"snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_289.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_289.cpp,"{
  CURLcode result = CURLE_OK;
  size_t i;
  MD5_context *ctxt;
  char *response = NULL;
  unsigned char digest[MD5_DIGEST_LEN];
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  char nonce[64];
  char realm[128];
  char algorithm[64];
  char qop_options[64];
  int qop_values;
  char cnonce[33];
  unsigned int entropy[4];
  char nonceCount[] = ""00000001"";
  char method[]     = ""AUTHENTICATE"";
  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  char *spn         = NULL;

  /* Decode the challange message */
  result = sasl_decode_digest_md5_message(chlg64, nonce, sizeof(nonce),
                                          realm, sizeof(realm),
                                          algorithm, sizeof(algorithm),
                                          qop_options, sizeof(qop_options));
  if(result)
    return result;

  /* We only support md5 sessions */
  if(strcmp(algorithm, ""md5-sess"") != 0)
    return CURLE_BAD_CONTENT_ENCODING;

  /* Get the qop-values from the qop-options */
  result = sasl_digest_get_qop_values(qop_options, &qop_values);
  if(result)
    return result;

  /* We only support auth quality-of-protection */
  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
    return CURLE_BAD_CONTENT_ENCODING;

  /* Generate 16 bytes of random data */
  entropy[0] = Curl_rand(data);
  entropy[1] = Curl_rand(data);
  entropy[2] = Curl_rand(data);
  entropy[3] = Curl_rand(data);

  /* Convert the random data into a 32 byte hex string */
  snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);

  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) userp,
                  curlx_uztoui(strlen(userp)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) realm,
                  curlx_uztoui(strlen(realm)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
                  curlx_uztoui(strlen(passwdp)));
  Curl_MD5_final(ctxt, digest);

  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_final(ctxt, digest);

  /* Convert calculated 16 octet hex into 32 bytes string */
  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate our SPN */
  spn = Curl_sasl_build_spn(service, realm);
  if(!spn)
    return CURLE_OUT_OF_MEMORY;

  /* Calculate H(A2) */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) method,
                  curlx_uztoui(strlen(method)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) spn,
                  curlx_uztoui(strlen(spn)));
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Now calculate the response hash */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
                  curlx_uztoui(strlen(nonceCount)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) qop,
                  curlx_uztoui(strlen(qop)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate the response */
  response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  free(spn);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_289.cpp,"[10, 0, 3, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 24, 357, 0, 0, 19, 19, 0, 0, 9, 63, 0, 0, 0, 0, 3, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 276, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 27, 0, 13, 10, 0, 0, 77, 0, 0, 49, 0, 167, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_289.cpp,55,"[""char *"", ""unkown"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""bool"", ""!"", ""!""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,669,-1,"snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_290.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_290.cpp,"snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_290.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_290.cpp,88,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""macro"", ""<""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,692,-1,"snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_291.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_291.cpp,"snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_291.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_291.cpp,111,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""macro"", ""<""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,722,-1,"snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_292.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_292.cpp,"snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_292.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_292.cpp,141,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""macro"", ""<""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,725,-1,"response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_293.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_293.cpp,"{
  CURLcode result = CURLE_OK;
  size_t i;
  MD5_context *ctxt;
  char *response = NULL;
  unsigned char digest[MD5_DIGEST_LEN];
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  char nonce[64];
  char realm[128];
  char algorithm[64];
  char qop_options[64];
  int qop_values;
  char cnonce[33];
  unsigned int entropy[4];
  char nonceCount[] = ""00000001"";
  char method[]     = ""AUTHENTICATE"";
  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  char *spn         = NULL;

  /* Decode the challange message */
  result = sasl_decode_digest_md5_message(chlg64, nonce, sizeof(nonce),
                                          realm, sizeof(realm),
                                          algorithm, sizeof(algorithm),
                                          qop_options, sizeof(qop_options));
  if(result)
    return result;

  /* We only support md5 sessions */
  if(strcmp(algorithm, ""md5-sess"") != 0)
    return CURLE_BAD_CONTENT_ENCODING;

  /* Get the qop-values from the qop-options */
  result = sasl_digest_get_qop_values(qop_options, &qop_values);
  if(result)
    return result;

  /* We only support auth quality-of-protection */
  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
    return CURLE_BAD_CONTENT_ENCODING;

  /* Generate 16 bytes of random data */
  entropy[0] = Curl_rand(data);
  entropy[1] = Curl_rand(data);
  entropy[2] = Curl_rand(data);
  entropy[3] = Curl_rand(data);

  /* Convert the random data into a 32 byte hex string */
  snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);

  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) userp,
                  curlx_uztoui(strlen(userp)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) realm,
                  curlx_uztoui(strlen(realm)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
                  curlx_uztoui(strlen(passwdp)));
  Curl_MD5_final(ctxt, digest);

  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_final(ctxt, digest);

  /* Convert calculated 16 octet hex into 32 bytes string */
  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate our SPN */
  spn = Curl_sasl_build_spn(service, realm);
  if(!spn)
    return CURLE_OUT_OF_MEMORY;

  /* Calculate H(A2) */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) method,
                  curlx_uztoui(strlen(method)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) spn,
                  curlx_uztoui(strlen(spn)));
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Now calculate the response hash */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
                  curlx_uztoui(strlen(nonceCount)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) qop,
                  curlx_uztoui(strlen(qop)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate the response */
  response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  free(spn);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_293.cpp,"[10, 0, 3, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 24, 357, 0, 0, 19, 19, 0, 0, 9, 63, 0, 0, 0, 0, 3, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 276, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 27, 0, 13, 10, 0, 0, 77, 0, 0, 49, 0, 167, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_293.cpp,144,[],"[""Curl_MD5_init_ret"", ""!"", ""!""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,921,-1,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_294.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_294.cpp,"{
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_294.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 23, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 8, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_294.cpp,25,"[""char *"", ""unkown"", ""string"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret""]","[""member""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,956,-1,"tmp = aprintf(""%s:%s:%s"", ha1, digest->nonce, digest->cnonce);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_296.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_296.cpp,"{
    /* nonce and cnonce are OUTSIDE the hash */
    tmp = aprintf(""%s:%s:%s"", ha1, digest->nonce, digest->cnonce);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* convert on non-ASCII machines */
    Curl_md5it(md5buf, (unsigned char *)tmp);
    free(tmp);
    sasl_digest_md5_to_ascii(md5buf, ha1);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_296.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 5, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_296.cpp,60,"[""string"", ""unsigned char *"", ""member"", ""member""]","[""member"", ""macro"", ""==""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,979,-1,"md5this = (unsigned char *)aprintf(""%s:%s"", request, uripath);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_297.cpp,"{
  CURLcode result;
  unsigned char md5buf[16]; /* 16 bytes/128 bits */
  unsigned char request_digest[33];
  unsigned char *md5this;
  unsigned char ha1[33];/* 32 digits and 1 zero byte */
  unsigned char ha2[33];/* 32 digits and 1 zero byte */
  char cnoncebuf[33];
  char *cnonce = NULL;
  size_t cnonce_sz = 0;
  char *userp_quoted;
  char *response = NULL;
  char *tmp = NULL;

  if(!digest->nc)
    digest->nc = 1;

  if(!digest->cnonce) {
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }

  /*
    if the algorithm is ""MD5"" or unspecified (which then defaults to MD5):

    A1 = unq(username-value) "":"" unq(realm-value) "":"" passwd

    if the algorithm is ""MD5-sess"" then:

    A1 = H( unq(username-value) "":"" unq(realm-value) "":"" passwd )
         "":"" unq(nonce-value) "":"" unq(cnonce-value)
  */

  md5this = (unsigned char *)
    aprintf(""%s:%s:%s"", userp, digest->realm, passwdp);
  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  free(md5this);
  sasl_digest_md5_to_ascii(md5buf, ha1);

  if(digest->algo == CURLDIGESTALGO_MD5SESS) {
    /* nonce and cnonce are OUTSIDE the hash */
    tmp = aprintf(""%s:%s:%s"", ha1, digest->nonce, digest->cnonce);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* convert on non-ASCII machines */
    Curl_md5it(md5buf, (unsigned char *)tmp);
    free(tmp);
    sasl_digest_md5_to_ascii(md5buf, ha1);
  }

  /*
    If the ""qop"" directive's value is ""auth"" or is unspecified, then A2 is:

      A2       = Method "":"" digest-uri-value

          If the ""qop"" value is ""auth-int"", then A2 is:

      A2       = Method "":"" digest-uri-value "":"" H(entity-body)

    (The ""Method"" value is the HTTP request method as specified in section
    5.1.1 of RFC 2616)
  */

  md5this = (unsigned char *)aprintf(""%s:%s"", request, uripath);

  if(digest->qop && Curl_raw_equal(digest->qop, ""auth-int"")) {
    /* We don't support auth-int for PUT or POST at the moment.
       TODO: replace md5 of empty string with entity-body for PUT/POST */
    unsigned char *md5this2 = (unsigned char *)
      aprintf(""%s:%s"", md5this, ""d41d8cd98f00b204e9800998ecf8427e"");
    free(md5this);
    md5this = md5this2;
  }

  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  free(md5this);
  sasl_digest_md5_to_ascii(md5buf, ha2);

  if(digest->qop) {
    md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       digest->nc,
                                       digest->cnonce,
                                       digest->qop,
                                       ha2);
  }
  else {
    md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       ha2);
  }

  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  free(md5this);
  sasl_digest_md5_to_ascii(md5buf, request_digest);

  /* for test case 64 (snooped from a Mozilla 1.3a request)

    Authorization: Digest username=""testuser"", realm=""testrealm"", \
    nonce=""1053604145"", uri=""/64"", response=""c55f7f30d83d774a3d2dcacf725abaca""

    Digest parameters are all quoted strings.  Username which is provided by
    the user will need double quotes and backslashes within it escaped.  For
    the other fields, this shouldn't be an issue.  realm, nonce, and opaque
    are copied as is from the server, escapes and all.  cnonce is generated
    with web-safe characters.  uri is already percent encoded.  nc is 8 hex
    characters.  algorithm and qop with standard values only contain web-safe
    chracters.
  */
  userp_quoted = sasl_digest_string_quoted(userp);
  if(!userp_quoted)
    return CURLE_OUT_OF_MEMORY;

  if(digest->qop) {
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""cnonce=\""%s\"", ""
                       ""nc=%08x, ""
                       ""qop=%s, ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       digest->cnonce,
                       digest->nc,
                       digest->qop,
                       request_digest);

    if(Curl_raw_equal(digest->qop, ""auth""))
      digest->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0
                       padded which tells to the server how many times you are
                       using the same nonce in the qop=auth mode */
  }
  else {
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       request_digest);
  }
  free(userp_quoted);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Add the optional fields */
  if(digest->opaque) {
    /* Append the opaque */
    tmp = aprintf(""%s, opaque=\""%s\"""", response, digest->opaque);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }

  if(digest->algorithm) {
    /* Append the algorithm */
    tmp = aprintf(""%s, algorithm=\""%s\"""", response, digest->algorithm);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }

  /* Return the output */
  *outptr = response;
  *outlen = strlen(response);

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_297.cpp,"[18, 0, 0, 0, 0, 0, 10, 0, 0, 0, 21, 0, 0, 0, 0, 287, 0, 0, 13, 13, 0, 0, 5, 32, 0, 0, 0, 0, 6, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 180, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 5, 0, 18, 18, 2, 0, 42, 0, 0, 40, 0, 102, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_297.cpp,83,"[""string"", ""const unsigned char *"", ""const unsigned char *""]","[""aprintf_ret"", ""!"", ""!""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,999,-1,"md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       digest->nc,
                                       digest->cnonce,
                                       digest->qop,
                                       ha2);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_299.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_299.cpp,"{
    md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       digest->nc,
                                       digest->cnonce,
                                       digest->qop,
                                       ha2);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_299.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_299.cpp,103,"[""string"", ""unsigned char *"", ""member"", ""member"", ""member"", ""member"", ""unsigned char *""]","[""member""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,1008,-1,"md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       ha2);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_300.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_300.cpp,"{
    md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       ha2);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_300.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_300.cpp,112,"[""string"", ""unsigned char *"", ""member"", ""unsigned char *""]","[""member"", ""!""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,1040,-1,"response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""cnonce=\""%s\"", ""
                       ""nc=%08x, ""
                       ""qop=%s, ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       digest->cnonce,
                       digest->nc,
                       digest->qop,
                       request_digest);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_301.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_301.cpp,"{
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""cnonce=\""%s\"", ""
                       ""nc=%08x, ""
                       ""qop=%s, ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       digest->cnonce,
                       digest->nc,
                       digest->qop,
                       request_digest);

    if(Curl_raw_equal(digest->qop, ""auth""))
      digest->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0
                       padded which tells to the server how many times you are
                       using the same nonce in the qop=auth mode */
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_301.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_301.cpp,144,[],"[""member""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,1063,-1,"response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       request_digest);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_302.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_302.cpp,"{
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       request_digest);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_302.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_302.cpp,167,[],"[""member"", ""!""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,1081,-1,"tmp = aprintf(""%s, opaque=\""%s\"""", response, digest->opaque);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_303.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_303.cpp,"{
    /* Append the opaque */
    tmp = aprintf(""%s, opaque=\""%s\"""", response, digest->opaque);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_303.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_303.cpp,185,"[""string"", ""char *"", ""member""]","[""member""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,1091,-1,"tmp = aprintf(""%s, algorithm=\""%s\"""", response, digest->algorithm);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_304.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_304.cpp,"{
    /* Append the algorithm */
    tmp = aprintf(""%s, algorithm=\""%s\"""", response, digest->algorithm);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_304.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_304.cpp,195,"[""string"", ""aprintf_ret"", ""member""]","[""member""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,1180,-1,"xoauth = aprintf(""user=%s\1auth=Bearer %s\1\1"", user, bearer);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_305.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_305.cpp,"{
  CURLcode result = CURLE_OK;
  char *xoauth = NULL;

  /* Generate the message */
  xoauth = aprintf(""user=%s\1auth=Bearer %s\1\1"", user, bearer);
  if(!xoauth)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the reply */
  result = Curl_base64_encode(data, xoauth, strlen(xoauth), outptr, outlen);

  free(xoauth);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_305.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 23, 0, 0, 2, 2, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_305.cpp,9,"[""string"", ""const char *"", ""const char *""]",[]
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/easy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_160.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_160.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_160.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_413.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_413.cpp,269,271,273,277,"DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));","DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_306.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_306.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_306.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_306.cpp,51,"[""fprintf_ret""]","[""libssh2_init_ret""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_161.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_161.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_161.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_416.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_416.cpp,479,486,490,494,"snprintf(buf, BUFSIZE-1,
               ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
               Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
               tm->tm_mday,
               Curl_month[tm->tm_mon],
               tm->tm_year + 1900,
               tm->tm_hour,
               tm->tm_min,
               tm->tm_sec);","snprintf(buf, BUFSIZE-1,
             ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
             Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
             tm->tm_mday,
             Curl_month[tm->tm_mon],
             tm->tm_year + 1900,
             tm->tm_hour,
             tm->tm_min,
             tm->tm_sec);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_307.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_307.cpp,"{
      time_t filetime = (time_t)statbuf.st_mtime;
      struct tm buffer;
      const struct tm *tm = &buffer;
      result = Curl_gmtime(filetime, &buffer);
      if(result)
        return result;

      /* format: ""Tue, 15 Nov 1994 12:45:26 GMT"" */
      snprintf(buf, BUFSIZE-1,
               ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
               Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
               tm->tm_mday,
               Curl_month[tm->tm_mon],
               tm->tm_year + 1900,
               tm->tm_hour,
               tm->tm_min,
               tm->tm_sec);
      result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_307.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 57, 0, 0, 3, 3, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 1, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 2, 2, 1, 0, 3, 0, 0, 3, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_307.cpp,74,"[""char *"", ""macro"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""Curl_gmtime_ret"", ""!""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/http_negotiate.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_165.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_165.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_165.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_420.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_420.cpp,22,22,172,109,"userp = aprintf(""%sAuthorization: Negotiate %s\r\n"", proxy ? ""Proxy-"" : """",
                  encoded);","userp = aprintf(""%sAuthorization: Negotiate %s\r\n"", proxy ? ""Proxy-"" : """",
                  base64);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_308.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_308.cpp,"struct negotiatedata *neg_ctx = proxy?&conn->data->state.proxyneg:
    &conn->data->state.negotiate;
  char *encoded = NULL;
  size_t len = 0;
  char *userp;
  CURLcode result;
  OM_uint32 discard_st;

  result = Curl_base64_encode(conn->data,
                              neg_ctx->output_token.value,
                              neg_ctx->output_token.length,
                              &encoded, &len);
  if(result) {
    gss_release_buffer(&discard_st, &neg_ctx->output_token);
    neg_ctx->output_token.value = NULL;
    neg_ctx->output_token.length = 0;
    return result;
  }

  if(!encoded || !len) {
    gss_release_buffer(&discard_st, &neg_ctx->output_token);
    neg_ctx->output_token.value = NULL;
    neg_ctx->output_token.length = 0;
    return CURLE_REMOTE_ACCESS_DENIED;
  }

  userp = aprintf(""%sAuthorization: Negotiate %s\r\n"", proxy ? ""Proxy-"" : """",
                  encoded)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_308.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 76, 0, 0, 6, 6, 0, 0, 3, 6, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 1, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 3, 3, 1, 0, 4, 0, 0, 8, 0, 12, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_308.cpp,28,[],"[""char *"", ""!"", ""size_t"", ""!"", ""||"", ""!""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/http_proxy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_166.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_166.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_166.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_421.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_421.cpp,150,160,160,172,,"(""%s%s%s:%hu"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_310.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_310.cpp,"f(!hostheader) {
          Curl_add_buffer_free(req_buffer);
          return CURLE_OUT_OF_MEMORY;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_310.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_310.cpp,68,[],"[""Curl_http_output_auth_ret"", ""!""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/mprintf.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_167.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_167.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_167.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_422.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_422.cpp,32,32,32,32,"the project that
 * took on from here is named 'Trio' and you find more details on the trio web
 * page at http://daniel.haxx.se/trio/
 */;","the project that
 * took on from here is named 'Trio' and you find more details on the trio web
 * page at https://daniel.haxx.se/projects/trio/
 */;",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_311.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_311.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_311.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_311.cpp,0,[],[]
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/conncache.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_172.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_172.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_172.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_428.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_428.cpp,132,131,134,-1,"aprintf(""%s:%d"",
                 conn->bits.proxy?conn->proxy.name:conn->host.name,
                 conn->localport);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_312.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_312.cpp,"{
  return aprintf(""%s:%d"",
                 conn->bits.proxy?conn->proxy.name:conn->host.name,
                 conn->localport);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_312.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_312.cpp,2,"[""string"", ""member"", ""member""]",[]
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/conncache.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_172.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_172.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_172.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_428.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_428.cpp,132,131,134,142,,"aprintf(""%s:%d"", hostname, conn->port);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_313.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_313.cpp,"{
  return aprintf(""%s:%d"",
                 conn->bits.proxy?conn->proxy.name:conn->host.name,
                 conn->localport);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_313.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_313.cpp,2,"[""string"", ""member"", ""member""]",[]
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,168,-1,"snprintf((char *)&dest[i*2], 3, ""%02x"", source[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_314.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_314.cpp,"snprintf((char *)&dest[i*2], 3, ""%02x"", source[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_314.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_314.cpp,5,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""int"", ""<""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,277,-1,"aprintf(""%s/%s"", service, host);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_315.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_315.cpp,"{
  /* Generate and return our SPN */
  return aprintf(""%s/%s"", service, host);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_315.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_315.cpp,3,"[""string"", ""const char *"", ""const char *""]",[]
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,474,-1,"response = aprintf(
      ""%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"",
           userp, digest[0], digest[1], digest[2], digest[3], digest[4],
           digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
           digest[11], digest[12], digest[13], digest[14], digest[15]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_316.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_316.cpp,"{
  CURLcode result = CURLE_OK;
  size_t chlglen = 0;
  HMAC_context *ctxt;
  unsigned char digest[MD5_DIGEST_LEN];
  char *response;

  if(chlg)
    chlglen = strlen(chlg);

  /* Compute the digest using the password as the key */
  ctxt = Curl_HMAC_init(Curl_HMAC_MD5,
                        (const unsigned char *) passwdp,
                        curlx_uztoui(strlen(passwdp)));
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  /* Update the digest with the given challenge */
  if(chlglen > 0)
    Curl_HMAC_update(ctxt, (const unsigned char *) chlg,
                     curlx_uztoui(chlglen));

  /* Finalise the digest */
  Curl_HMAC_final(ctxt, digest);

  /* Generate the response */
  response = aprintf(
      ""%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"",
           userp, digest[0], digest[1], digest[2], digest[3], digest[4],
           digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
           digest[11], digest[12], digest[13], digest[14], digest[15]);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_316.cpp,"[4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 2, 86, 0, 0, 5, 5, 0, 0, 2, 20, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 17, 0, 4, 4, 0, 0, 10, 0, 0, 7, 0, 36, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_316.cpp,31,"[""string"", ""const char *"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""Curl_HMAC_init_ret"", ""!"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,636,-1,"snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_317.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_317.cpp,"{
  CURLcode result = CURLE_OK;
  size_t i;
  MD5_context *ctxt;
  char *response = NULL;
  unsigned char digest[MD5_DIGEST_LEN];
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  char nonce[64];
  char realm[128];
  char algorithm[64];
  char qop_options[64];
  int qop_values;
  char cnonce[33];
  unsigned int entropy[4];
  char nonceCount[] = ""00000001"";
  char method[]     = ""AUTHENTICATE"";
  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  char *spn         = NULL;

  /* Decode the challange message */
  result = sasl_decode_digest_md5_message(chlg64, nonce, sizeof(nonce),
                                          realm, sizeof(realm),
                                          algorithm, sizeof(algorithm),
                                          qop_options, sizeof(qop_options));
  if(result)
    return result;

  /* We only support md5 sessions */
  if(strcmp(algorithm, ""md5-sess"") != 0)
    return CURLE_BAD_CONTENT_ENCODING;

  /* Get the qop-values from the qop-options */
  result = sasl_digest_get_qop_values(qop_options, &qop_values);
  if(result)
    return result;

  /* We only support auth quality-of-protection */
  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
    return CURLE_BAD_CONTENT_ENCODING;

  /* Generate 16 bytes of random data */
  entropy[0] = Curl_rand(data);
  entropy[1] = Curl_rand(data);
  entropy[2] = Curl_rand(data);
  entropy[3] = Curl_rand(data);

  /* Convert the random data into a 32 byte hex string */
  snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);

  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) userp,
                  curlx_uztoui(strlen(userp)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) realm,
                  curlx_uztoui(strlen(realm)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
                  curlx_uztoui(strlen(passwdp)));
  Curl_MD5_final(ctxt, digest);

  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_final(ctxt, digest);

  /* Convert calculated 16 octet hex into 32 bytes string */
  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate our SPN */
  spn = Curl_sasl_build_spn(service, realm);
  if(!spn)
    return CURLE_OUT_OF_MEMORY;

  /* Calculate H(A2) */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) method,
                  curlx_uztoui(strlen(method)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) spn,
                  curlx_uztoui(strlen(spn)));
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Now calculate the response hash */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
                  curlx_uztoui(strlen(nonceCount)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) qop,
                  curlx_uztoui(strlen(qop)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate the response */
  response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  free(spn);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_317.cpp,"[10, 0, 3, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 24, 357, 0, 0, 19, 19, 0, 0, 9, 63, 0, 0, 0, 0, 3, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 276, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 27, 0, 13, 10, 0, 0, 77, 0, 0, 49, 0, 167, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_317.cpp,55,"[""char *"", ""unkown"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""bool"", ""!"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,669,-1,"snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_318.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_318.cpp,"snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_318.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_318.cpp,88,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""macro"", ""<""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,692,-1,"snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_319.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_319.cpp,"snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_319.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_319.cpp,111,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""macro"", ""<""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,722,-1,"snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_320.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_320.cpp,"snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_320.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_320.cpp,141,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""macro"", ""<""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,725,-1,"response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_321.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_321.cpp,"{
  CURLcode result = CURLE_OK;
  size_t i;
  MD5_context *ctxt;
  char *response = NULL;
  unsigned char digest[MD5_DIGEST_LEN];
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  char nonce[64];
  char realm[128];
  char algorithm[64];
  char qop_options[64];
  int qop_values;
  char cnonce[33];
  unsigned int entropy[4];
  char nonceCount[] = ""00000001"";
  char method[]     = ""AUTHENTICATE"";
  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  char *spn         = NULL;

  /* Decode the challange message */
  result = sasl_decode_digest_md5_message(chlg64, nonce, sizeof(nonce),
                                          realm, sizeof(realm),
                                          algorithm, sizeof(algorithm),
                                          qop_options, sizeof(qop_options));
  if(result)
    return result;

  /* We only support md5 sessions */
  if(strcmp(algorithm, ""md5-sess"") != 0)
    return CURLE_BAD_CONTENT_ENCODING;

  /* Get the qop-values from the qop-options */
  result = sasl_digest_get_qop_values(qop_options, &qop_values);
  if(result)
    return result;

  /* We only support auth quality-of-protection */
  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
    return CURLE_BAD_CONTENT_ENCODING;

  /* Generate 16 bytes of random data */
  entropy[0] = Curl_rand(data);
  entropy[1] = Curl_rand(data);
  entropy[2] = Curl_rand(data);
  entropy[3] = Curl_rand(data);

  /* Convert the random data into a 32 byte hex string */
  snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);

  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) userp,
                  curlx_uztoui(strlen(userp)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) realm,
                  curlx_uztoui(strlen(realm)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
                  curlx_uztoui(strlen(passwdp)));
  Curl_MD5_final(ctxt, digest);

  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_final(ctxt, digest);

  /* Convert calculated 16 octet hex into 32 bytes string */
  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate our SPN */
  spn = Curl_sasl_build_spn(service, realm);
  if(!spn)
    return CURLE_OUT_OF_MEMORY;

  /* Calculate H(A2) */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) method,
                  curlx_uztoui(strlen(method)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) spn,
                  curlx_uztoui(strlen(spn)));
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Now calculate the response hash */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
                  curlx_uztoui(strlen(nonceCount)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) qop,
                  curlx_uztoui(strlen(qop)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate the response */
  response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  free(spn);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_321.cpp,"[10, 0, 3, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 24, 357, 0, 0, 19, 19, 0, 0, 9, 63, 0, 0, 0, 0, 3, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 276, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 27, 0, 13, 10, 0, 0, 77, 0, 0, 49, 0, 167, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_321.cpp,144,[],"[""Curl_MD5_init_ret"", ""!"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,921,-1,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_322.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_322.cpp,"{
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_322.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 23, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 8, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_322.cpp,25,"[""char *"", ""unkown"", ""string"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret""]","[""member""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,956,-1,"tmp = aprintf(""%s:%s:%s"", ha1, digest->nonce, digest->cnonce);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_324.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_324.cpp,"{
    /* nonce and cnonce are OUTSIDE the hash */
    tmp = aprintf(""%s:%s:%s"", ha1, digest->nonce, digest->cnonce);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* convert on non-ASCII machines */
    Curl_md5it(md5buf, (unsigned char *)tmp);
    free(tmp);
    sasl_digest_md5_to_ascii(md5buf, ha1);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_324.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 5, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_324.cpp,60,"[""string"", ""unsigned char *"", ""member"", ""member""]","[""member"", ""macro"", ""==""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,979,-1,"md5this = (unsigned char *)aprintf(""%s:%s"", request, uripath);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_325.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_325.cpp,"{
  CURLcode result;
  unsigned char md5buf[16]; /* 16 bytes/128 bits */
  unsigned char request_digest[33];
  unsigned char *md5this;
  unsigned char ha1[33];/* 32 digits and 1 zero byte */
  unsigned char ha2[33];/* 32 digits and 1 zero byte */
  char cnoncebuf[33];
  char *cnonce = NULL;
  size_t cnonce_sz = 0;
  char *userp_quoted;
  char *response = NULL;
  char *tmp = NULL;

  if(!digest->nc)
    digest->nc = 1;

  if(!digest->cnonce) {
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }

  /*
    if the algorithm is ""MD5"" or unspecified (which then defaults to MD5):

    A1 = unq(username-value) "":"" unq(realm-value) "":"" passwd

    if the algorithm is ""MD5-sess"" then:

    A1 = H( unq(username-value) "":"" unq(realm-value) "":"" passwd )
         "":"" unq(nonce-value) "":"" unq(cnonce-value)
  */

  md5this = (unsigned char *)
    aprintf(""%s:%s:%s"", userp, digest->realm, passwdp);
  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  free(md5this);
  sasl_digest_md5_to_ascii(md5buf, ha1);

  if(digest->algo == CURLDIGESTALGO_MD5SESS) {
    /* nonce and cnonce are OUTSIDE the hash */
    tmp = aprintf(""%s:%s:%s"", ha1, digest->nonce, digest->cnonce);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* convert on non-ASCII machines */
    Curl_md5it(md5buf, (unsigned char *)tmp);
    free(tmp);
    sasl_digest_md5_to_ascii(md5buf, ha1);
  }

  /*
    If the ""qop"" directive's value is ""auth"" or is unspecified, then A2 is:

      A2       = Method "":"" digest-uri-value

          If the ""qop"" value is ""auth-int"", then A2 is:

      A2       = Method "":"" digest-uri-value "":"" H(entity-body)

    (The ""Method"" value is the HTTP request method as specified in section
    5.1.1 of RFC 2616)
  */

  md5this = (unsigned char *)aprintf(""%s:%s"", request, uripath);

  if(digest->qop && Curl_raw_equal(digest->qop, ""auth-int"")) {
    /* We don't support auth-int for PUT or POST at the moment.
       TODO: replace md5 of empty string with entity-body for PUT/POST */
    unsigned char *md5this2 = (unsigned char *)
      aprintf(""%s:%s"", md5this, ""d41d8cd98f00b204e9800998ecf8427e"");
    free(md5this);
    md5this = md5this2;
  }

  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  free(md5this);
  sasl_digest_md5_to_ascii(md5buf, ha2);

  if(digest->qop) {
    md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       digest->nc,
                                       digest->cnonce,
                                       digest->qop,
                                       ha2);
  }
  else {
    md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       ha2);
  }

  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  free(md5this);
  sasl_digest_md5_to_ascii(md5buf, request_digest);

  /* for test case 64 (snooped from a Mozilla 1.3a request)

    Authorization: Digest username=""testuser"", realm=""testrealm"", \
    nonce=""1053604145"", uri=""/64"", response=""c55f7f30d83d774a3d2dcacf725abaca""

    Digest parameters are all quoted strings.  Username which is provided by
    the user will need double quotes and backslashes within it escaped.  For
    the other fields, this shouldn't be an issue.  realm, nonce, and opaque
    are copied as is from the server, escapes and all.  cnonce is generated
    with web-safe characters.  uri is already percent encoded.  nc is 8 hex
    characters.  algorithm and qop with standard values only contain web-safe
    chracters.
  */
  userp_quoted = sasl_digest_string_quoted(userp);
  if(!userp_quoted)
    return CURLE_OUT_OF_MEMORY;

  if(digest->qop) {
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""cnonce=\""%s\"", ""
                       ""nc=%08x, ""
                       ""qop=%s, ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       digest->cnonce,
                       digest->nc,
                       digest->qop,
                       request_digest);

    if(Curl_raw_equal(digest->qop, ""auth""))
      digest->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0
                       padded which tells to the server how many times you are
                       using the same nonce in the qop=auth mode */
  }
  else {
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       request_digest);
  }
  free(userp_quoted);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Add the optional fields */
  if(digest->opaque) {
    /* Append the opaque */
    tmp = aprintf(""%s, opaque=\""%s\"""", response, digest->opaque);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }

  if(digest->algorithm) {
    /* Append the algorithm */
    tmp = aprintf(""%s, algorithm=\""%s\"""", response, digest->algorithm);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }

  /* Return the output */
  *outptr = response;
  *outlen = strlen(response);

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_325.cpp,"[18, 0, 0, 0, 0, 0, 10, 0, 0, 0, 21, 0, 0, 0, 0, 287, 0, 0, 13, 13, 0, 0, 5, 32, 0, 0, 0, 0, 6, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 180, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 5, 0, 18, 18, 2, 0, 42, 0, 0, 40, 0, 102, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_325.cpp,83,"[""string"", ""const unsigned char *"", ""const unsigned char *""]","[""aprintf_ret"", ""!"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,999,-1,"md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       digest->nc,
                                       digest->cnonce,
                                       digest->qop,
                                       ha2);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_327.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_327.cpp,"{
    md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       digest->nc,
                                       digest->cnonce,
                                       digest->qop,
                                       ha2);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_327.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_327.cpp,103,"[""string"", ""unsigned char *"", ""member"", ""member"", ""member"", ""member"", ""unsigned char *""]","[""member""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,1008,-1,"md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       ha2);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_328.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_328.cpp,"{
    md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       ha2);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_328.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_328.cpp,112,"[""string"", ""unsigned char *"", ""member"", ""unsigned char *""]","[""member"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,1040,-1,"response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""cnonce=\""%s\"", ""
                       ""nc=%08x, ""
                       ""qop=%s, ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       digest->cnonce,
                       digest->nc,
                       digest->qop,
                       request_digest);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_329.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_329.cpp,"{
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""cnonce=\""%s\"", ""
                       ""nc=%08x, ""
                       ""qop=%s, ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       digest->cnonce,
                       digest->nc,
                       digest->qop,
                       request_digest);

    if(Curl_raw_equal(digest->qop, ""auth""))
      digest->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0
                       padded which tells to the server how many times you are
                       using the same nonce in the qop=auth mode */
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_329.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_329.cpp,144,[],"[""member""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,1063,-1,"response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       request_digest);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_330.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_330.cpp,"{
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       request_digest);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_330.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_330.cpp,167,[],"[""member"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,1081,-1,"tmp = aprintf(""%s, opaque=\""%s\"""", response, digest->opaque);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_331.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_331.cpp,"{
    /* Append the opaque */
    tmp = aprintf(""%s, opaque=\""%s\"""", response, digest->opaque);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_331.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_331.cpp,185,"[""string"", ""char *"", ""member""]","[""member""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,1091,-1,"tmp = aprintf(""%s, algorithm=\""%s\"""", response, digest->algorithm);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_332.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_332.cpp,"{
    /* Append the algorithm */
    tmp = aprintf(""%s, algorithm=\""%s\"""", response, digest->algorithm);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_332.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_332.cpp,195,"[""string"", ""aprintf_ret"", ""member""]","[""member""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,1180,-1,"xoauth = aprintf(""user=%s\1auth=Bearer %s\1\1"", user, bearer);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_333.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_333.cpp,"{
  CURLcode result = CURLE_OK;
  char *xoauth = NULL;

  /* Generate the message */
  xoauth = aprintf(""user=%s\1auth=Bearer %s\1\1"", user, bearer);
  if(!xoauth)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the reply */
  result = Curl_base64_encode(data, xoauth, strlen(xoauth), outptr, outlen);

  free(xoauth);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_333.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 23, 0, 0, 2, 2, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_333.cpp,9,"[""string"", ""const char *"", ""const char *""]",[]
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/easy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_175.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_175.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_175.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_431.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_431.cpp,269,271,273,277,"DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));","DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_334.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_334.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_334.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_334.cpp,51,"[""fprintf_ret""]","[""libssh2_init_ret""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_176.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_176.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_176.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_434.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_434.cpp,479,486,490,494,"snprintf(buf, BUFSIZE-1,
               ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
               Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
               tm->tm_mday,
               Curl_month[tm->tm_mon],
               tm->tm_year + 1900,
               tm->tm_hour,
               tm->tm_min,
               tm->tm_sec);","snprintf(buf, BUFSIZE-1,
             ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
             Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
             tm->tm_mday,
             Curl_month[tm->tm_mon],
             tm->tm_year + 1900,
             tm->tm_hour,
             tm->tm_min,
             tm->tm_sec);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_335.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_335.cpp,"{
      time_t filetime = (time_t)statbuf.st_mtime;
      struct tm buffer;
      const struct tm *tm = &buffer;
      result = Curl_gmtime(filetime, &buffer);
      if(result)
        return result;

      /* format: ""Tue, 15 Nov 1994 12:45:26 GMT"" */
      snprintf(buf, BUFSIZE-1,
               ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
               Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
               tm->tm_mday,
               Curl_month[tm->tm_mon],
               tm->tm_year + 1900,
               tm->tm_hour,
               tm->tm_min,
               tm->tm_sec);
      result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_335.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 57, 0, 0, 3, 3, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 1, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 2, 2, 1, 0, 3, 0, 0, 3, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_335.cpp,74,"[""char *"", ""macro"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""Curl_gmtime_ret"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/http_negotiate.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_180.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_180.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_180.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_438.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_438.cpp,22,22,172,109,"userp = aprintf(""%sAuthorization: Negotiate %s\r\n"", proxy ? ""Proxy-"" : """",
                  encoded);","userp = aprintf(""%sAuthorization: Negotiate %s\r\n"", proxy ? ""Proxy-"" : """",
                  base64);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_336.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_336.cpp,"struct negotiatedata *neg_ctx = proxy?&conn->data->state.proxyneg:
    &conn->data->state.negotiate;
  char *encoded = NULL;
  size_t len = 0;
  char *userp;
  CURLcode result;
  OM_uint32 discard_st;

  result = Curl_base64_encode(conn->data,
                              neg_ctx->output_token.value,
                              neg_ctx->output_token.length,
                              &encoded, &len);
  if(result) {
    gss_release_buffer(&discard_st, &neg_ctx->output_token);
    neg_ctx->output_token.value = NULL;
    neg_ctx->output_token.length = 0;
    return result;
  }

  if(!encoded || !len) {
    gss_release_buffer(&discard_st, &neg_ctx->output_token);
    neg_ctx->output_token.value = NULL;
    neg_ctx->output_token.length = 0;
    return CURLE_REMOTE_ACCESS_DENIED;
  }

  userp = aprintf(""%sAuthorization: Negotiate %s\r\n"", proxy ? ""Proxy-"" : """",
                  encoded)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_336.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 76, 0, 0, 6, 6, 0, 0, 3, 6, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 1, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 3, 3, 1, 0, 4, 0, 0, 8, 0, 12, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_336.cpp,28,[],"[""char *"", ""!"", ""size_t"", ""!"", ""||"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/http_proxy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_181.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_181.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_181.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_439.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_439.cpp,150,160,160,172,,"(""%s%s%s:%hu"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_338.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_338.cpp,"f(!hostheader) {
          Curl_add_buffer_free(req_buffer);
          return CURLE_OUT_OF_MEMORY;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_338.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_338.cpp,68,[],"[""Curl_http_output_auth_ret"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/tftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_186.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_186.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_186.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_445.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_445.cpp,494,494,509,511,"snprintf( buf, sizeof(buf), ""%d"", state->requested_blksize );","snprintf(buf, sizeof(buf), ""%d"", state->requested_blksize);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_340.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_340.cpp,"{

  case TFTP_EVENT_INIT:    /* Send the first packet out */
  case TFTP_EVENT_TIMEOUT: /* Resend the first packet out */
    /* Increment the retry counter, quit if over the limit */
    state->retries++;
    if(state->retries>state->retry_max) {
      state->error = TFTP_ERR_NORESPONSE;
      state->state = TFTP_STATE_FIN;
      return result;
    }

    if(data->set.upload) {
      /* If we are uploading, send an WRQ */
      setpacketevent(&state->spacket, TFTP_EVENT_WRQ);
      state->conn->data->req.upload_fromhere =
        (char *)state->spacket.data+4;
      if(data->state.infilesize != -1)
        Curl_pgrsSetUploadSize(data, data->state.infilesize);
    }
    else {
      /* If we are downloading, send an RRQ */
      setpacketevent(&state->spacket, TFTP_EVENT_RRQ);
    }
    /* As RFC3617 describes the separator slash is not actually part of the
       file name so we skip the always-present first letter of the path
       string. */
    filename = curl_easy_unescape(data, &state->conn->data->state.path[1], 0,
                                  NULL);
    if(!filename)
      return CURLE_OUT_OF_MEMORY;

    snprintf((char *)state->spacket.data+2,
             state->blksize,
             ""%s%c%s%c"", filename, '\0',  mode, '\0');
    sbytes = 4 + strlen(filename) + strlen(mode);

    /* add tsize option */
    if(data->set.upload && (data->state.infilesize != -1))
      snprintf(buf, sizeof(buf), ""%"" CURL_FORMAT_CURL_OFF_T,
               data->state.infilesize);
    else
      strcpy(buf, ""0""); /* the destination is large enough */

    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_TSIZE);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf);
    /* add blksize option */
    snprintf( buf, sizeof(buf), ""%d"", state->requested_blksize );
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_BLKSIZE);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf );

    /* add timeout option */
    snprintf( buf, sizeof(buf), ""%d"", state->retry_time);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_INTERVAL);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf );

    /* the typecase for the 3rd argument is mostly for systems that do
       not have a size_t argument, like older unixes that want an 'int' */
    senddata = sendto(state->sockfd, (void *)state->spacket.data,
                      (SEND_TYPE_ARG3)sbytes, 0,
                      state->conn->ip_addr->ai_addr,
                      state->conn->ip_addr->ai_addrlen);
    if(senddata != (ssize_t)sbytes) {
      failf(data, ""%s"", Curl_strerror(state->conn, SOCKERRNO));
    }
    free(filename);
    break;

  case TFTP_EVENT_OACK:
    if(data->set.upload) {
      result = tftp_connect_for_tx(state, event);
    }
    else {
      result = tftp_connect_for_rx(state, event);
    }
    break;

  case TFTP_EVENT_ACK: /* Connected for transmit */
    result = tftp_connect_for_tx(state, event);
    break;

  case TFTP_EVENT_DATA: /* Connected for receive */
    result = tftp_connect_for_rx(state, event);
    break;

  case TFTP_EVENT_ERROR:
    state->state = TFTP_STATE_FIN;
    break;

  default:
    failf(state->conn->data, ""tftp_send_first: internal error"");
    break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_340.cpp,"[7, 0, 0, 0, 6, 0, 2, 0, 6, 1, 11, 0, 0, 0, 0, 246, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 127, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 7, 3, 0, 29, 0, 0, 29, 0, 82, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_340.cpp,64,"[""char *"", ""unkown"", ""string"", ""member""]","[""curl_easy_unescape_ret"", ""!"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/tftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_186.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_186.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_186.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_445.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_445.cpp,494,494,517,519,"snprintf( buf, sizeof(buf), ""%d"", state->retry_time);","snprintf(buf, sizeof(buf), ""%d"", state->retry_time);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_341.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_341.cpp,"{

  case TFTP_EVENT_INIT:    /* Send the first packet out */
  case TFTP_EVENT_TIMEOUT: /* Resend the first packet out */
    /* Increment the retry counter, quit if over the limit */
    state->retries++;
    if(state->retries>state->retry_max) {
      state->error = TFTP_ERR_NORESPONSE;
      state->state = TFTP_STATE_FIN;
      return result;
    }

    if(data->set.upload) {
      /* If we are uploading, send an WRQ */
      setpacketevent(&state->spacket, TFTP_EVENT_WRQ);
      state->conn->data->req.upload_fromhere =
        (char *)state->spacket.data+4;
      if(data->state.infilesize != -1)
        Curl_pgrsSetUploadSize(data, data->state.infilesize);
    }
    else {
      /* If we are downloading, send an RRQ */
      setpacketevent(&state->spacket, TFTP_EVENT_RRQ);
    }
    /* As RFC3617 describes the separator slash is not actually part of the
       file name so we skip the always-present first letter of the path
       string. */
    filename = curl_easy_unescape(data, &state->conn->data->state.path[1], 0,
                                  NULL);
    if(!filename)
      return CURLE_OUT_OF_MEMORY;

    snprintf((char *)state->spacket.data+2,
             state->blksize,
             ""%s%c%s%c"", filename, '\0',  mode, '\0');
    sbytes = 4 + strlen(filename) + strlen(mode);

    /* add tsize option */
    if(data->set.upload && (data->state.infilesize != -1))
      snprintf(buf, sizeof(buf), ""%"" CURL_FORMAT_CURL_OFF_T,
               data->state.infilesize);
    else
      strcpy(buf, ""0""); /* the destination is large enough */

    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_TSIZE);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf);
    /* add blksize option */
    snprintf( buf, sizeof(buf), ""%d"", state->requested_blksize );
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_BLKSIZE);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf );

    /* add timeout option */
    snprintf( buf, sizeof(buf), ""%d"", state->retry_time);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_INTERVAL);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf );

    /* the typecase for the 3rd argument is mostly for systems that do
       not have a size_t argument, like older unixes that want an 'int' */
    senddata = sendto(state->sockfd, (void *)state->spacket.data,
                      (SEND_TYPE_ARG3)sbytes, 0,
                      state->conn->ip_addr->ai_addr,
                      state->conn->ip_addr->ai_addrlen);
    if(senddata != (ssize_t)sbytes) {
      failf(data, ""%s"", Curl_strerror(state->conn, SOCKERRNO));
    }
    free(filename);
    break;

  case TFTP_EVENT_OACK:
    if(data->set.upload) {
      result = tftp_connect_for_tx(state, event);
    }
    else {
      result = tftp_connect_for_rx(state, event);
    }
    break;

  case TFTP_EVENT_ACK: /* Connected for transmit */
    result = tftp_connect_for_tx(state, event);
    break;

  case TFTP_EVENT_DATA: /* Connected for receive */
    result = tftp_connect_for_rx(state, event);
    break;

  case TFTP_EVENT_ERROR:
    state->state = TFTP_STATE_FIN;
    break;

  default:
    failf(state->conn->data, ""tftp_send_first: internal error"");
    break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_341.cpp,"[7, 0, 0, 0, 6, 0, 2, 0, 6, 1, 11, 0, 0, 0, 0, 246, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 127, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 7, 3, 0, 29, 0, 0, 29, 0, 82, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_341.cpp,72,"[""char *"", ""unkown"", ""string"", ""member""]","[""curl_easy_unescape_ret"", ""!"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/conncache.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_188.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_188.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_188.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_447.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_447.cpp,132,131,134,-1,"aprintf(""%s:%d"",
                 conn->bits.proxy?conn->proxy.name:conn->host.name,
                 conn->localport);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_342.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_342.cpp,"{
  return aprintf(""%s:%d"",
                 conn->bits.proxy?conn->proxy.name:conn->host.name,
                 conn->localport);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_342.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_342.cpp,2,"[""string"", ""member"", ""member""]",[]
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/conncache.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_188.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_188.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_188.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_447.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_447.cpp,132,131,134,142,,"aprintf(""%s:%d"", hostname, conn->port);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_343.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_343.cpp,"{
  return aprintf(""%s:%d"",
                 conn->bits.proxy?conn->proxy.name:conn->host.name,
                 conn->localport);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_343.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_343.cpp,2,"[""string"", ""member"", ""member""]",[]
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,168,-1,"snprintf((char *)&dest[i*2], 3, ""%02x"", source[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_344.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_344.cpp,"snprintf((char *)&dest[i*2], 3, ""%02x"", source[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_344.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_344.cpp,5,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""int"", ""<""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,277,-1,"aprintf(""%s/%s"", service, host);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_345.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_345.cpp,"{
  /* Generate and return our SPN */
  return aprintf(""%s/%s"", service, host);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_345.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_345.cpp,3,"[""string"", ""const char *"", ""const char *""]",[]
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,474,-1,"response = aprintf(
      ""%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"",
           userp, digest[0], digest[1], digest[2], digest[3], digest[4],
           digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
           digest[11], digest[12], digest[13], digest[14], digest[15]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_346.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_346.cpp,"{
  CURLcode result = CURLE_OK;
  size_t chlglen = 0;
  HMAC_context *ctxt;
  unsigned char digest[MD5_DIGEST_LEN];
  char *response;

  if(chlg)
    chlglen = strlen(chlg);

  /* Compute the digest using the password as the key */
  ctxt = Curl_HMAC_init(Curl_HMAC_MD5,
                        (const unsigned char *) passwdp,
                        curlx_uztoui(strlen(passwdp)));
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  /* Update the digest with the given challenge */
  if(chlglen > 0)
    Curl_HMAC_update(ctxt, (const unsigned char *) chlg,
                     curlx_uztoui(chlglen));

  /* Finalise the digest */
  Curl_HMAC_final(ctxt, digest);

  /* Generate the response */
  response = aprintf(
      ""%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"",
           userp, digest[0], digest[1], digest[2], digest[3], digest[4],
           digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
           digest[11], digest[12], digest[13], digest[14], digest[15]);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_346.cpp,"[4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 2, 86, 0, 0, 5, 5, 0, 0, 2, 20, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 17, 0, 4, 4, 0, 0, 10, 0, 0, 7, 0, 36, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_346.cpp,31,"[""string"", ""const char *"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""Curl_HMAC_init_ret"", ""!"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,636,-1,"snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_347.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_347.cpp,"{
  CURLcode result = CURLE_OK;
  size_t i;
  MD5_context *ctxt;
  char *response = NULL;
  unsigned char digest[MD5_DIGEST_LEN];
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  char nonce[64];
  char realm[128];
  char algorithm[64];
  char qop_options[64];
  int qop_values;
  char cnonce[33];
  unsigned int entropy[4];
  char nonceCount[] = ""00000001"";
  char method[]     = ""AUTHENTICATE"";
  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  char *spn         = NULL;

  /* Decode the challange message */
  result = sasl_decode_digest_md5_message(chlg64, nonce, sizeof(nonce),
                                          realm, sizeof(realm),
                                          algorithm, sizeof(algorithm),
                                          qop_options, sizeof(qop_options));
  if(result)
    return result;

  /* We only support md5 sessions */
  if(strcmp(algorithm, ""md5-sess"") != 0)
    return CURLE_BAD_CONTENT_ENCODING;

  /* Get the qop-values from the qop-options */
  result = sasl_digest_get_qop_values(qop_options, &qop_values);
  if(result)
    return result;

  /* We only support auth quality-of-protection */
  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
    return CURLE_BAD_CONTENT_ENCODING;

  /* Generate 16 bytes of random data */
  entropy[0] = Curl_rand(data);
  entropy[1] = Curl_rand(data);
  entropy[2] = Curl_rand(data);
  entropy[3] = Curl_rand(data);

  /* Convert the random data into a 32 byte hex string */
  snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);

  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) userp,
                  curlx_uztoui(strlen(userp)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) realm,
                  curlx_uztoui(strlen(realm)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
                  curlx_uztoui(strlen(passwdp)));
  Curl_MD5_final(ctxt, digest);

  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_final(ctxt, digest);

  /* Convert calculated 16 octet hex into 32 bytes string */
  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate our SPN */
  spn = Curl_sasl_build_spn(service, realm);
  if(!spn)
    return CURLE_OUT_OF_MEMORY;

  /* Calculate H(A2) */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) method,
                  curlx_uztoui(strlen(method)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) spn,
                  curlx_uztoui(strlen(spn)));
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Now calculate the response hash */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
                  curlx_uztoui(strlen(nonceCount)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) qop,
                  curlx_uztoui(strlen(qop)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate the response */
  response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  free(spn);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_347.cpp,"[10, 0, 3, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 24, 357, 0, 0, 19, 19, 0, 0, 9, 63, 0, 0, 0, 0, 3, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 276, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 27, 0, 13, 10, 0, 0, 77, 0, 0, 49, 0, 167, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_347.cpp,55,"[""char *"", ""unkown"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""bool"", ""!"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,669,-1,"snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_348.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_348.cpp,"snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_348.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_348.cpp,88,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""macro"", ""<""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,692,-1,"snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_349.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_349.cpp,"snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_349.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_349.cpp,111,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""macro"", ""<""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,722,-1,"snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_350.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_350.cpp,"snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_350.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_350.cpp,141,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""macro"", ""<""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,725,-1,"response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_351.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_351.cpp,"{
  CURLcode result = CURLE_OK;
  size_t i;
  MD5_context *ctxt;
  char *response = NULL;
  unsigned char digest[MD5_DIGEST_LEN];
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  char nonce[64];
  char realm[128];
  char algorithm[64];
  char qop_options[64];
  int qop_values;
  char cnonce[33];
  unsigned int entropy[4];
  char nonceCount[] = ""00000001"";
  char method[]     = ""AUTHENTICATE"";
  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  char *spn         = NULL;

  /* Decode the challange message */
  result = sasl_decode_digest_md5_message(chlg64, nonce, sizeof(nonce),
                                          realm, sizeof(realm),
                                          algorithm, sizeof(algorithm),
                                          qop_options, sizeof(qop_options));
  if(result)
    return result;

  /* We only support md5 sessions */
  if(strcmp(algorithm, ""md5-sess"") != 0)
    return CURLE_BAD_CONTENT_ENCODING;

  /* Get the qop-values from the qop-options */
  result = sasl_digest_get_qop_values(qop_options, &qop_values);
  if(result)
    return result;

  /* We only support auth quality-of-protection */
  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
    return CURLE_BAD_CONTENT_ENCODING;

  /* Generate 16 bytes of random data */
  entropy[0] = Curl_rand(data);
  entropy[1] = Curl_rand(data);
  entropy[2] = Curl_rand(data);
  entropy[3] = Curl_rand(data);

  /* Convert the random data into a 32 byte hex string */
  snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);

  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) userp,
                  curlx_uztoui(strlen(userp)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) realm,
                  curlx_uztoui(strlen(realm)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
                  curlx_uztoui(strlen(passwdp)));
  Curl_MD5_final(ctxt, digest);

  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_final(ctxt, digest);

  /* Convert calculated 16 octet hex into 32 bytes string */
  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate our SPN */
  spn = Curl_sasl_build_spn(service, realm);
  if(!spn)
    return CURLE_OUT_OF_MEMORY;

  /* Calculate H(A2) */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) method,
                  curlx_uztoui(strlen(method)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) spn,
                  curlx_uztoui(strlen(spn)));
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Now calculate the response hash */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
                  curlx_uztoui(strlen(nonceCount)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) qop,
                  curlx_uztoui(strlen(qop)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate the response */
  response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  free(spn);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_351.cpp,"[10, 0, 3, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 24, 357, 0, 0, 19, 19, 0, 0, 9, 63, 0, 0, 0, 0, 3, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 276, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 27, 0, 13, 10, 0, 0, 77, 0, 0, 49, 0, 167, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_351.cpp,144,[],"[""Curl_MD5_init_ret"", ""!"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,921,-1,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_352.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_352.cpp,"{
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_352.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 23, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 8, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_352.cpp,25,"[""char *"", ""unkown"", ""string"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret""]","[""member""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,956,-1,"tmp = aprintf(""%s:%s:%s"", ha1, digest->nonce, digest->cnonce);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_354.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_354.cpp,"{
    /* nonce and cnonce are OUTSIDE the hash */
    tmp = aprintf(""%s:%s:%s"", ha1, digest->nonce, digest->cnonce);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* convert on non-ASCII machines */
    Curl_md5it(md5buf, (unsigned char *)tmp);
    free(tmp);
    sasl_digest_md5_to_ascii(md5buf, ha1);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_354.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 5, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_354.cpp,60,"[""string"", ""unsigned char *"", ""member"", ""member""]","[""member"", ""macro"", ""==""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,979,-1,"md5this = (unsigned char *)aprintf(""%s:%s"", request, uripath);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_355.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_355.cpp,"{
  CURLcode result;
  unsigned char md5buf[16]; /* 16 bytes/128 bits */
  unsigned char request_digest[33];
  unsigned char *md5this;
  unsigned char ha1[33];/* 32 digits and 1 zero byte */
  unsigned char ha2[33];/* 32 digits and 1 zero byte */
  char cnoncebuf[33];
  char *cnonce = NULL;
  size_t cnonce_sz = 0;
  char *userp_quoted;
  char *response = NULL;
  char *tmp = NULL;

  if(!digest->nc)
    digest->nc = 1;

  if(!digest->cnonce) {
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }

  /*
    if the algorithm is ""MD5"" or unspecified (which then defaults to MD5):

    A1 = unq(username-value) "":"" unq(realm-value) "":"" passwd

    if the algorithm is ""MD5-sess"" then:

    A1 = H( unq(username-value) "":"" unq(realm-value) "":"" passwd )
         "":"" unq(nonce-value) "":"" unq(cnonce-value)
  */

  md5this = (unsigned char *)
    aprintf(""%s:%s:%s"", userp, digest->realm, passwdp);
  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  free(md5this);
  sasl_digest_md5_to_ascii(md5buf, ha1);

  if(digest->algo == CURLDIGESTALGO_MD5SESS) {
    /* nonce and cnonce are OUTSIDE the hash */
    tmp = aprintf(""%s:%s:%s"", ha1, digest->nonce, digest->cnonce);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* convert on non-ASCII machines */
    Curl_md5it(md5buf, (unsigned char *)tmp);
    free(tmp);
    sasl_digest_md5_to_ascii(md5buf, ha1);
  }

  /*
    If the ""qop"" directive's value is ""auth"" or is unspecified, then A2 is:

      A2       = Method "":"" digest-uri-value

          If the ""qop"" value is ""auth-int"", then A2 is:

      A2       = Method "":"" digest-uri-value "":"" H(entity-body)

    (The ""Method"" value is the HTTP request method as specified in section
    5.1.1 of RFC 2616)
  */

  md5this = (unsigned char *)aprintf(""%s:%s"", request, uripath);

  if(digest->qop && Curl_raw_equal(digest->qop, ""auth-int"")) {
    /* We don't support auth-int for PUT or POST at the moment.
       TODO: replace md5 of empty string with entity-body for PUT/POST */
    unsigned char *md5this2 = (unsigned char *)
      aprintf(""%s:%s"", md5this, ""d41d8cd98f00b204e9800998ecf8427e"");
    free(md5this);
    md5this = md5this2;
  }

  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  free(md5this);
  sasl_digest_md5_to_ascii(md5buf, ha2);

  if(digest->qop) {
    md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       digest->nc,
                                       digest->cnonce,
                                       digest->qop,
                                       ha2);
  }
  else {
    md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       ha2);
  }

  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  free(md5this);
  sasl_digest_md5_to_ascii(md5buf, request_digest);

  /* for test case 64 (snooped from a Mozilla 1.3a request)

    Authorization: Digest username=""testuser"", realm=""testrealm"", \
    nonce=""1053604145"", uri=""/64"", response=""c55f7f30d83d774a3d2dcacf725abaca""

    Digest parameters are all quoted strings.  Username which is provided by
    the user will need double quotes and backslashes within it escaped.  For
    the other fields, this shouldn't be an issue.  realm, nonce, and opaque
    are copied as is from the server, escapes and all.  cnonce is generated
    with web-safe characters.  uri is already percent encoded.  nc is 8 hex
    characters.  algorithm and qop with standard values only contain web-safe
    chracters.
  */
  userp_quoted = sasl_digest_string_quoted(userp);
  if(!userp_quoted)
    return CURLE_OUT_OF_MEMORY;

  if(digest->qop) {
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""cnonce=\""%s\"", ""
                       ""nc=%08x, ""
                       ""qop=%s, ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       digest->cnonce,
                       digest->nc,
                       digest->qop,
                       request_digest);

    if(Curl_raw_equal(digest->qop, ""auth""))
      digest->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0
                       padded which tells to the server how many times you are
                       using the same nonce in the qop=auth mode */
  }
  else {
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       request_digest);
  }
  free(userp_quoted);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Add the optional fields */
  if(digest->opaque) {
    /* Append the opaque */
    tmp = aprintf(""%s, opaque=\""%s\"""", response, digest->opaque);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }

  if(digest->algorithm) {
    /* Append the algorithm */
    tmp = aprintf(""%s, algorithm=\""%s\"""", response, digest->algorithm);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }

  /* Return the output */
  *outptr = response;
  *outlen = strlen(response);

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_355.cpp,"[18, 0, 0, 0, 0, 0, 10, 0, 0, 0, 21, 0, 0, 0, 0, 287, 0, 0, 13, 13, 0, 0, 5, 32, 0, 0, 0, 0, 6, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 180, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 5, 0, 18, 18, 2, 0, 42, 0, 0, 40, 0, 102, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_355.cpp,83,"[""string"", ""const unsigned char *"", ""const unsigned char *""]","[""aprintf_ret"", ""!"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,999,-1,"md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       digest->nc,
                                       digest->cnonce,
                                       digest->qop,
                                       ha2);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_357.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_357.cpp,"{
    md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       digest->nc,
                                       digest->cnonce,
                                       digest->qop,
                                       ha2);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_357.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_357.cpp,103,"[""string"", ""unsigned char *"", ""member"", ""member"", ""member"", ""member"", ""unsigned char *""]","[""member""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,1008,-1,"md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       ha2);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_358.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_358.cpp,"{
    md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       ha2);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_358.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_358.cpp,112,"[""string"", ""unsigned char *"", ""member"", ""unsigned char *""]","[""member"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,1040,-1,"response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""cnonce=\""%s\"", ""
                       ""nc=%08x, ""
                       ""qop=%s, ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       digest->cnonce,
                       digest->nc,
                       digest->qop,
                       request_digest);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_359.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_359.cpp,"{
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""cnonce=\""%s\"", ""
                       ""nc=%08x, ""
                       ""qop=%s, ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       digest->cnonce,
                       digest->nc,
                       digest->qop,
                       request_digest);

    if(Curl_raw_equal(digest->qop, ""auth""))
      digest->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0
                       padded which tells to the server how many times you are
                       using the same nonce in the qop=auth mode */
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_359.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_359.cpp,144,[],"[""member""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,1063,-1,"response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       request_digest);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_360.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_360.cpp,"{
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       request_digest);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_360.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_360.cpp,167,[],"[""member"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,1081,-1,"tmp = aprintf(""%s, opaque=\""%s\"""", response, digest->opaque);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_361.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_361.cpp,"{
    /* Append the opaque */
    tmp = aprintf(""%s, opaque=\""%s\"""", response, digest->opaque);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_361.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_361.cpp,185,"[""string"", ""char *"", ""member""]","[""member""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,1091,-1,"tmp = aprintf(""%s, algorithm=\""%s\"""", response, digest->algorithm);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_362.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_362.cpp,"{
    /* Append the algorithm */
    tmp = aprintf(""%s, algorithm=\""%s\"""", response, digest->algorithm);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_362.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_362.cpp,195,"[""string"", ""aprintf_ret"", ""member""]","[""member""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,1180,-1,"xoauth = aprintf(""user=%s\1auth=Bearer %s\1\1"", user, bearer);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_363.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_363.cpp,"{
  CURLcode result = CURLE_OK;
  char *xoauth = NULL;

  /* Generate the message */
  xoauth = aprintf(""user=%s\1auth=Bearer %s\1\1"", user, bearer);
  if(!xoauth)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the reply */
  result = Curl_base64_encode(data, xoauth, strlen(xoauth), outptr, outlen);

  free(xoauth);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_363.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 23, 0, 0, 2, 2, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_363.cpp,9,"[""string"", ""const char *"", ""const char *""]",[]
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/easy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_191.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_191.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_191.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_450.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_450.cpp,269,271,273,277,"DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));","DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_364.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_364.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_364.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_364.cpp,51,"[""fprintf_ret""]","[""libssh2_init_ret""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_192.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_192.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_192.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_453.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_453.cpp,479,486,490,494,"snprintf(buf, BUFSIZE-1,
               ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
               Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
               tm->tm_mday,
               Curl_month[tm->tm_mon],
               tm->tm_year + 1900,
               tm->tm_hour,
               tm->tm_min,
               tm->tm_sec);","snprintf(buf, BUFSIZE-1,
             ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
             Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
             tm->tm_mday,
             Curl_month[tm->tm_mon],
             tm->tm_year + 1900,
             tm->tm_hour,
             tm->tm_min,
             tm->tm_sec);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_365.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_365.cpp,"{
      time_t filetime = (time_t)statbuf.st_mtime;
      struct tm buffer;
      const struct tm *tm = &buffer;
      result = Curl_gmtime(filetime, &buffer);
      if(result)
        return result;

      /* format: ""Tue, 15 Nov 1994 12:45:26 GMT"" */
      snprintf(buf, BUFSIZE-1,
               ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
               Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
               tm->tm_mday,
               Curl_month[tm->tm_mon],
               tm->tm_year + 1900,
               tm->tm_hour,
               tm->tm_min,
               tm->tm_sec);
      result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_365.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 57, 0, 0, 3, 3, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 1, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 2, 2, 1, 0, 3, 0, 0, 3, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_365.cpp,74,"[""char *"", ""macro"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""Curl_gmtime_ret"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/http_negotiate.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_196.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_196.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_196.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_457.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_457.cpp,22,22,172,109,"userp = aprintf(""%sAuthorization: Negotiate %s\r\n"", proxy ? ""Proxy-"" : """",
                  encoded);","userp = aprintf(""%sAuthorization: Negotiate %s\r\n"", proxy ? ""Proxy-"" : """",
                  base64);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_366.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_366.cpp,"struct negotiatedata *neg_ctx = proxy?&conn->data->state.proxyneg:
    &conn->data->state.negotiate;
  char *encoded = NULL;
  size_t len = 0;
  char *userp;
  CURLcode result;
  OM_uint32 discard_st;

  result = Curl_base64_encode(conn->data,
                              neg_ctx->output_token.value,
                              neg_ctx->output_token.length,
                              &encoded, &len);
  if(result) {
    gss_release_buffer(&discard_st, &neg_ctx->output_token);
    neg_ctx->output_token.value = NULL;
    neg_ctx->output_token.length = 0;
    return result;
  }

  if(!encoded || !len) {
    gss_release_buffer(&discard_st, &neg_ctx->output_token);
    neg_ctx->output_token.value = NULL;
    neg_ctx->output_token.length = 0;
    return CURLE_REMOTE_ACCESS_DENIED;
  }

  userp = aprintf(""%sAuthorization: Negotiate %s\r\n"", proxy ? ""Proxy-"" : """",
                  encoded)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_366.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 76, 0, 0, 6, 6, 0, 0, 3, 6, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 1, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 3, 3, 1, 0, 4, 0, 0, 8, 0, 12, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_366.cpp,28,[],"[""char *"", ""!"", ""size_t"", ""!"", ""||"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/http_proxy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_197.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_197.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_197.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_458.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_458.cpp,150,160,160,172,,"(""%s%s%s:%hu"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_368.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_368.cpp,"f(!hostheader) {
          Curl_add_buffer_free(req_buffer);
          return CURLE_OUT_OF_MEMORY;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_368.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_368.cpp,68,[],"[""Curl_http_output_auth_ret"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/mprintf.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_198.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_198.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_198.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_459.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_459.cpp,32,32,32,32,"the project that
 * took on from here is named 'Trio' and you find more details on the trio web
 * page at http://daniel.haxx.se/trio/
 */;","the project that
 * took on from here is named 'Trio' and you find more details on the trio web
 * page at https://daniel.haxx.se/projects/trio/
 */;",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_369.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_369.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_369.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_369.cpp,0,[],[]
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/tftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_202.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_202.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_202.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_464.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_464.cpp,494,494,509,511,"snprintf( buf, sizeof(buf), ""%d"", state->requested_blksize );","snprintf(buf, sizeof(buf), ""%d"", state->requested_blksize);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_370.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_370.cpp,"{

  case TFTP_EVENT_INIT:    /* Send the first packet out */
  case TFTP_EVENT_TIMEOUT: /* Resend the first packet out */
    /* Increment the retry counter, quit if over the limit */
    state->retries++;
    if(state->retries>state->retry_max) {
      state->error = TFTP_ERR_NORESPONSE;
      state->state = TFTP_STATE_FIN;
      return result;
    }

    if(data->set.upload) {
      /* If we are uploading, send an WRQ */
      setpacketevent(&state->spacket, TFTP_EVENT_WRQ);
      state->conn->data->req.upload_fromhere =
        (char *)state->spacket.data+4;
      if(data->state.infilesize != -1)
        Curl_pgrsSetUploadSize(data, data->state.infilesize);
    }
    else {
      /* If we are downloading, send an RRQ */
      setpacketevent(&state->spacket, TFTP_EVENT_RRQ);
    }
    /* As RFC3617 describes the separator slash is not actually part of the
       file name so we skip the always-present first letter of the path
       string. */
    filename = curl_easy_unescape(data, &state->conn->data->state.path[1], 0,
                                  NULL);
    if(!filename)
      return CURLE_OUT_OF_MEMORY;

    snprintf((char *)state->spacket.data+2,
             state->blksize,
             ""%s%c%s%c"", filename, '\0',  mode, '\0');
    sbytes = 4 + strlen(filename) + strlen(mode);

    /* add tsize option */
    if(data->set.upload && (data->state.infilesize != -1))
      snprintf(buf, sizeof(buf), ""%"" CURL_FORMAT_CURL_OFF_T,
               data->state.infilesize);
    else
      strcpy(buf, ""0""); /* the destination is large enough */

    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_TSIZE);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf);
    /* add blksize option */
    snprintf( buf, sizeof(buf), ""%d"", state->requested_blksize );
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_BLKSIZE);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf );

    /* add timeout option */
    snprintf( buf, sizeof(buf), ""%d"", state->retry_time);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_INTERVAL);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf );

    /* the typecase for the 3rd argument is mostly for systems that do
       not have a size_t argument, like older unixes that want an 'int' */
    senddata = sendto(state->sockfd, (void *)state->spacket.data,
                      (SEND_TYPE_ARG3)sbytes, 0,
                      state->conn->ip_addr->ai_addr,
                      state->conn->ip_addr->ai_addrlen);
    if(senddata != (ssize_t)sbytes) {
      failf(data, ""%s"", Curl_strerror(state->conn, SOCKERRNO));
    }
    free(filename);
    break;

  case TFTP_EVENT_OACK:
    if(data->set.upload) {
      result = tftp_connect_for_tx(state, event);
    }
    else {
      result = tftp_connect_for_rx(state, event);
    }
    break;

  case TFTP_EVENT_ACK: /* Connected for transmit */
    result = tftp_connect_for_tx(state, event);
    break;

  case TFTP_EVENT_DATA: /* Connected for receive */
    result = tftp_connect_for_rx(state, event);
    break;

  case TFTP_EVENT_ERROR:
    state->state = TFTP_STATE_FIN;
    break;

  default:
    failf(state->conn->data, ""tftp_send_first: internal error"");
    break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_370.cpp,"[7, 0, 0, 0, 6, 0, 2, 0, 6, 1, 11, 0, 0, 0, 0, 246, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 127, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 7, 3, 0, 29, 0, 0, 29, 0, 82, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_370.cpp,64,"[""char *"", ""unkown"", ""string"", ""member""]","[""curl_easy_unescape_ret"", ""!"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/tftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_202.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_202.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_202.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_464.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_464.cpp,494,494,517,519,"snprintf( buf, sizeof(buf), ""%d"", state->retry_time);","snprintf(buf, sizeof(buf), ""%d"", state->retry_time);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_371.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_371.cpp,"{

  case TFTP_EVENT_INIT:    /* Send the first packet out */
  case TFTP_EVENT_TIMEOUT: /* Resend the first packet out */
    /* Increment the retry counter, quit if over the limit */
    state->retries++;
    if(state->retries>state->retry_max) {
      state->error = TFTP_ERR_NORESPONSE;
      state->state = TFTP_STATE_FIN;
      return result;
    }

    if(data->set.upload) {
      /* If we are uploading, send an WRQ */
      setpacketevent(&state->spacket, TFTP_EVENT_WRQ);
      state->conn->data->req.upload_fromhere =
        (char *)state->spacket.data+4;
      if(data->state.infilesize != -1)
        Curl_pgrsSetUploadSize(data, data->state.infilesize);
    }
    else {
      /* If we are downloading, send an RRQ */
      setpacketevent(&state->spacket, TFTP_EVENT_RRQ);
    }
    /* As RFC3617 describes the separator slash is not actually part of the
       file name so we skip the always-present first letter of the path
       string. */
    filename = curl_easy_unescape(data, &state->conn->data->state.path[1], 0,
                                  NULL);
    if(!filename)
      return CURLE_OUT_OF_MEMORY;

    snprintf((char *)state->spacket.data+2,
             state->blksize,
             ""%s%c%s%c"", filename, '\0',  mode, '\0');
    sbytes = 4 + strlen(filename) + strlen(mode);

    /* add tsize option */
    if(data->set.upload && (data->state.infilesize != -1))
      snprintf(buf, sizeof(buf), ""%"" CURL_FORMAT_CURL_OFF_T,
               data->state.infilesize);
    else
      strcpy(buf, ""0""); /* the destination is large enough */

    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_TSIZE);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf);
    /* add blksize option */
    snprintf( buf, sizeof(buf), ""%d"", state->requested_blksize );
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_BLKSIZE);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf );

    /* add timeout option */
    snprintf( buf, sizeof(buf), ""%d"", state->retry_time);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_INTERVAL);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf );

    /* the typecase for the 3rd argument is mostly for systems that do
       not have a size_t argument, like older unixes that want an 'int' */
    senddata = sendto(state->sockfd, (void *)state->spacket.data,
                      (SEND_TYPE_ARG3)sbytes, 0,
                      state->conn->ip_addr->ai_addr,
                      state->conn->ip_addr->ai_addrlen);
    if(senddata != (ssize_t)sbytes) {
      failf(data, ""%s"", Curl_strerror(state->conn, SOCKERRNO));
    }
    free(filename);
    break;

  case TFTP_EVENT_OACK:
    if(data->set.upload) {
      result = tftp_connect_for_tx(state, event);
    }
    else {
      result = tftp_connect_for_rx(state, event);
    }
    break;

  case TFTP_EVENT_ACK: /* Connected for transmit */
    result = tftp_connect_for_tx(state, event);
    break;

  case TFTP_EVENT_DATA: /* Connected for receive */
    result = tftp_connect_for_rx(state, event);
    break;

  case TFTP_EVENT_ERROR:
    state->state = TFTP_STATE_FIN;
    break;

  default:
    failf(state->conn->data, ""tftp_send_first: internal error"");
    break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_371.cpp,"[7, 0, 0, 0, 6, 0, 2, 0, 6, 1, 11, 0, 0, 0, 0, 246, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 127, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 7, 3, 0, 29, 0, 0, 29, 0, 82, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_371.cpp,72,"[""char *"", ""unkown"", ""string"", ""member""]","[""curl_easy_unescape_ret"", ""!"", ""!""]"
d38fc22132db1b82fad1ef5b8a7f5e030c71a90f,Merge branch 'update-libarchive' into release,[],Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_205.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_205.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_205.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_468.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_468.cpp,2127,2127,2129,2130,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Invalid zero dictionary size"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_372.cpp,"(!__archive_ppmd7_functions.Ppmd7_Alloc(&rar->ppmd7_context,
        rar->dictionary_size, &g_szalloc))
      {
        archive_set_error(&a->archive, ENOMEM,
                          ""Out of memory"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_372.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_372.cpp,68,"[""member"", ""member"", ""unkown""]","[""bool"", ""int"", ""=="", ""!""]"
d38fc22132db1b82fad1ef5b8a7f5e030c71a90f,Merge branch 'update-libarchive' into release,[],Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_205.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_205.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_205.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_470.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_470.cpp,2900,2905,2906,2912,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_373.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_373.cpp,"{
  int windowoffs, firstpart;
  struct rar *rar = (struct rar *)(a->format->data);

  if (!rar->unp_buffer)
  {
    if ((rar->unp_buffer = malloc(rar->unp_buffer_size)) == NULL)
    {
      archive_set_error(&a->archive, ENOMEM,
                        ""Unable to allocate memory for uncompressed data."");
      return (ARCHIVE_FATAL);
    }
  }

  windowoffs = lzss_offset_for_position(&rar->lzss, startpos);
  if(windowoffs + length <= lzss_size(&rar->lzss))
    memcpy(&rar->unp_buffer[rar->unp_offset], &rar->lzss.window[windowoffs],
           length);
  else
  {
    firstpart = lzss_size(&rar->lzss) - windowoffs;
    if (firstpart < 0) {
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");
      return (ARCHIVE_FATAL);
    }
    if (firstpart < length) {
      memcpy(&rar->unp_buffer[rar->unp_offset],
             &rar->lzss.window[windowoffs], firstpart);
      memcpy(&rar->unp_buffer[rar->unp_offset + firstpart],
             &rar->lzss.window[0], length - firstpart);
    } else
      memcpy(&rar->unp_buffer[rar->unp_offset],
             &rar->lzss.window[windowoffs], length);
  }
  rar->unp_offset += length;
  if (rar->unp_offset >= rar->unp_buffer_size)
    *buffer = rar->unp_buffer;
  else
    *buffer = NULL;
  return (ARCHIVE_OK);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_373.cpp,"[6, 0, 0, 0, 0, 0, 3, 0, 0, 0, 10, 0, 0, 0, 0, 126, 0, 0, 2, 3, 0, 0, 1, 4, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 6, 6, 3, 0, 10, 0, 0, 11, 0, 23, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_373.cpp,38,[],"[""lzss_offset_for_position_ret"", ""lzss_size_ret"", ""<=""]"
52f58267c311550db83f4a9430f378e730bd3d6b,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2016-06-19 (139d0576)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_207.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_207.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_207.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_472.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_472.cpp,2127,2127,2129,2130,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Invalid zero dictionary size"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_374.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_374.cpp,"(!__archive_ppmd7_functions.Ppmd7_Alloc(&rar->ppmd7_context,
        rar->dictionary_size, &g_szalloc))
      {
        archive_set_error(&a->archive, ENOMEM,
                          ""Out of memory"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_374.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_374.cpp,68,"[""member"", ""member"", ""unkown""]","[""int"", ""int"", ""=="", ""!""]"
52f58267c311550db83f4a9430f378e730bd3d6b,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2016-06-19 (139d0576)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_207.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_207.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_207.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_474.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_474.cpp,2900,2905,2906,2912,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_375.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_375.cpp,"{
  int windowoffs, firstpart;
  struct rar *rar = (struct rar *)(a->format->data);

  if (!rar->unp_buffer)
  {
    if ((rar->unp_buffer = malloc(rar->unp_buffer_size)) == NULL)
    {
      archive_set_error(&a->archive, ENOMEM,
                        ""Unable to allocate memory for uncompressed data."");
      return (ARCHIVE_FATAL);
    }
  }

  windowoffs = lzss_offset_for_position(&rar->lzss, startpos);
  if(windowoffs + length <= lzss_size(&rar->lzss))
    memcpy(&rar->unp_buffer[rar->unp_offset], &rar->lzss.window[windowoffs],
           length);
  else
  {
    firstpart = lzss_size(&rar->lzss) - windowoffs;
    if (firstpart < 0) {
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");
      return (ARCHIVE_FATAL);
    }
    if (firstpart < length) {
      memcpy(&rar->unp_buffer[rar->unp_offset],
             &rar->lzss.window[windowoffs], firstpart);
      memcpy(&rar->unp_buffer[rar->unp_offset + firstpart],
             &rar->lzss.window[0], length - firstpart);
    } else
      memcpy(&rar->unp_buffer[rar->unp_offset],
             &rar->lzss.window[windowoffs], length);
  }
  rar->unp_offset += length;
  if (rar->unp_offset >= rar->unp_buffer_size)
    *buffer = rar->unp_buffer;
  else
    *buffer = NULL;
  return (ARCHIVE_OK);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_375.cpp,"[6, 0, 0, 0, 0, 0, 3, 0, 0, 0, 10, 0, 0, 0, 0, 126, 0, 0, 2, 3, 0, 0, 1, 4, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 6, 6, 3, 0, 10, 0, 0, 11, 0, 23, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_375.cpp,38,[],"[""lzss_size_ret"", ""null"", ""<"", ""!""]"
2b94d71d8850d68b677d5653c698371528344a10,"LibArchive 2016-06-19 (139d0576)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 139d0576b51a253732a5ab1f66805dffbf8b00af (master).",[],libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_209.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_209.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_209.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_476.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_476.cpp,2127,2127,2129,2130,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Invalid zero dictionary size"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_376.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_376.cpp,"(!__archive_ppmd7_functions.Ppmd7_Alloc(&rar->ppmd7_context,
        rar->dictionary_size, &g_szalloc))
      {
        archive_set_error(&a->archive, ENOMEM,
                          ""Out of memory"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_376.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_376.cpp,68,"[""member"", ""member"", ""unkown""]","[""bool"", ""int"", ""=="", ""!""]"
2b94d71d8850d68b677d5653c698371528344a10,"LibArchive 2016-06-19 (139d0576)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 139d0576b51a253732a5ab1f66805dffbf8b00af (master).",[],libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_209.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_209.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_209.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_478.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_478.cpp,2900,2905,2906,2912,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_377.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_377.cpp,"{
  int windowoffs, firstpart;
  struct rar *rar = (struct rar *)(a->format->data);

  if (!rar->unp_buffer)
  {
    if ((rar->unp_buffer = malloc(rar->unp_buffer_size)) == NULL)
    {
      archive_set_error(&a->archive, ENOMEM,
                        ""Unable to allocate memory for uncompressed data."");
      return (ARCHIVE_FATAL);
    }
  }

  windowoffs = lzss_offset_for_position(&rar->lzss, startpos);
  if(windowoffs + length <= lzss_size(&rar->lzss))
    memcpy(&rar->unp_buffer[rar->unp_offset], &rar->lzss.window[windowoffs],
           length);
  else
  {
    firstpart = lzss_size(&rar->lzss) - windowoffs;
    if (firstpart < 0) {
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");
      return (ARCHIVE_FATAL);
    }
    if (firstpart < length) {
      memcpy(&rar->unp_buffer[rar->unp_offset],
             &rar->lzss.window[windowoffs], firstpart);
      memcpy(&rar->unp_buffer[rar->unp_offset + firstpart],
             &rar->lzss.window[0], length - firstpart);
    } else
      memcpy(&rar->unp_buffer[rar->unp_offset],
             &rar->lzss.window[windowoffs], length);
  }
  rar->unp_offset += length;
  if (rar->unp_offset >= rar->unp_buffer_size)
    *buffer = rar->unp_buffer;
  else
    *buffer = NULL;
  return (ARCHIVE_OK);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_377.cpp,"[6, 0, 0, 0, 0, 0, 3, 0, 0, 0, 10, 0, 0, 0, 0, 126, 0, 0, 2, 3, 0, 0, 1, 4, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 6, 6, 3, 0, 10, 0, 0, 11, 0, 23, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_377.cpp,38,[],"[""lzss_size_ret"", ""null"", ""<"", ""!""]"
fb4791b37ccea1f38b8625b31df952408ab942f3,"cmCoreTryCompile: Refactor forwarding of variables to test project

De-duplicate the logic that constructs the cmake `-D` flag used to pass
variables into the test project cache.  Also subsume variables that were
propagated by generating `set()` commands in the project and pass them
as cache entries instead.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_211.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_211.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_211.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_480.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_480.cpp,383,405,446,-1,"fprintf(fout, ""set(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_378.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_378.cpp,"{
      fprintf(fout, ""set(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_378.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_378.cpp,424,"[""FILE *"", ""string""]","[""this -> Makefile -> GetDefinition_ret"", ""null"", ""!=""]"
fb4791b37ccea1f38b8625b31df952408ab942f3,"cmCoreTryCompile: Refactor forwarding of variables to test project

De-duplicate the logic that constructs the cmake `-D` flag used to pass
variables into the test project cache.  Also subsume variables that were
propagated by generating `set()` commands in the project and pass them
as cache entries instead.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_211.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_211.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_211.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_480.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_480.cpp,383,405,450,-1,"fprintf(fout, ""set(CMAKE_LINK_SEARCH_START_STATIC \""%s\"")\n"", lssDef);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_379.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_379.cpp,"{
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_START_STATIC \""%s\"")\n"", lssDef);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_379.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_379.cpp,428,"[""FILE *"", ""string"", ""unkown""]","[""unkown"", ""this -> Makefile -> GetDefinition_ret""]"
fb4791b37ccea1f38b8625b31df952408ab942f3,"cmCoreTryCompile: Refactor forwarding of variables to test project

De-duplicate the logic that constructs the cmake `-D` flag used to pass
variables into the test project cache.  Also subsume variables that were
propagated by generating `set()` commands in the project and pass them
as cache entries instead.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_211.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_211.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_211.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_480.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_480.cpp,383,405,454,-1,"fprintf(fout, ""set(CMAKE_LINK_SEARCH_END_STATIC \""%s\"")\n"", lssDef);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_380.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_380.cpp,"{
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_END_STATIC \""%s\"")\n"", lssDef);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_380.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_380.cpp,432,"[""FILE *"", ""string"", ""unkown""]","[""unkown"", ""this -> Makefile -> GetDefinition_ret""]"
fb4791b37ccea1f38b8625b31df952408ab942f3,"cmCoreTryCompile: Refactor forwarding of variables to test project

De-duplicate the logic that constructs the cmake `-D` flag used to pass
variables into the test project cache.  Also subsume variables that were
propagated by generating `set()` commands in the project and pass them
as cache entries instead.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_211.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_211.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_211.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_481.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_481.cpp,461,451,465,-1,"fprintf(fout, ""set(CMAKE_ENABLE_EXPORTS %s)\n"", ee);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_381.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_381.cpp,"{
      fprintf(fout, ""set(CMAKE_ENABLE_EXPORTS %s)\n"", ee);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_381.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_381.cpp,443,"[""FILE *"", ""string"", ""unkown""]","[""unkown"", ""this -> Makefile -> GetDefinition_ret""]"
e4a92dab3fa81a893a52dd1a774db79c4363fda6,"cmListFileLexer: Update to flex 2.6

Revise the documented modifications we need to make to the
flex-generated source file according to the needs of the new version.
Update our own implementation to avoid warnings with flex types.",[],Source/cmListFileLexer.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_212.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_212.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_212.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_489.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_489.cpp,2091,2156,2102,2167,"yy_fatal_error( ""cmListFileLexer_yyset_lineno called with no buffer"" , yyscanner);","YY_FATAL_ERROR( ""cmListFileLexer_yyset_lineno called with no buffer"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_383.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_383.cpp,"yy_fatal_error( ""cmListFileLexer_yyset_lineno called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_383.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_383.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
e4a92dab3fa81a893a52dd1a774db79c4363fda6,"cmListFileLexer: Update to flex 2.6

Revise the documented modifications we need to make to the
flex-generated source file according to the needs of the new version.
Update our own implementation to avoid warnings with flex types.",[],Source/cmListFileLexer.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_212.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_212.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_212.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_489.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_489.cpp,2091,2156,2117,2182,"yy_fatal_error( ""cmListFileLexer_yyset_column called with no buffer"" , yyscanner);","YY_FATAL_ERROR( ""cmListFileLexer_yyset_column called with no buffer"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_384.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_384.cpp,"yy_fatal_error( ""cmListFileLexer_yyset_column called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_384.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_384.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_219.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_219.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_219.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_502.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_502.cpp,1939,1939,1942,-1,"fprintf(stderr, ""unknowntag_start:%s\n"", name);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_385.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_385.cpp,"{
	struct unknown_tag *tag;

#if DEBUG
	fprintf(stderr, ""unknowntag_start:%s\n"", name);
#endif
	tag = malloc(sizeof(*tag));
	if (tag == NULL) {
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}
	tag->next = xar->unknowntags;
	archive_string_init(&(tag->name));
	archive_strcpy(&(tag->name), name);
	if (xar->unknowntags == NULL) {
		xar->xmlsts_unknown = xar->xmlsts;
		xar->xmlsts = UNKNOWN;
	}
	xar->unknowntags = tag;
	return (ARCHIVE_OK);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_385.cpp,"[3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 53, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 25, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 0, 6, 0, 0, 9, 0, 11, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_385.cpp,6,"[""unkown"", ""string"", ""const char *""]",[]
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_219.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_219.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_219.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_503.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_503.cpp,1951,1948,1954,1951,,"fprintf(stderr, ""UNKNOWNTAG_START:%s\n"", name);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_386.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_386.cpp,"{
		xar->xmlsts_unknown = xar->xmlsts;
		xar->xmlsts = UNKNOWN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_386.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_386.cpp,18,[],"[""member"", ""null"", ""==""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_219.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_219.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_219.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_504.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_504.cpp,1963,1963,1966,1974,"fprintf(stderr, ""unknowntag_end:%s\n"", name);","fprintf(stderr, ""UNKNOWNTAG_END:%s\n"", name);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_387.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_387.cpp,"{
	struct unknown_tag *tag;

#if DEBUG
	fprintf(stderr, ""unknowntag_end:%s\n"", name);
#endif
	tag = xar->unknowntags;
	if (tag == NULL || name == NULL)
		return;
	if (strcmp(tag->name.s, name) == 0) {
		xar->unknowntags = tag->next;
		archive_string_free(&(tag->name));
		free(tag);
		if (xar->unknowntags == NULL)
			xar->xmlsts = xar->xmlsts_unknown;
	}
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_387.cpp,"[4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 44, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 3, 0, 0, 4, 0, 0, 6, 0, 7, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_387.cpp,6,"[""unkown"", ""string"", ""const char *""]",[]
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_220.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_220.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_220.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_507.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_507.cpp,810,825,814,829,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_388.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_388.cpp,"((zip_entry->mode & AE_IFMT) == AE_IFIFO) {
		zip_entry->mode &= ~ AE_IFMT;
		zip_entry->mode |= AE_IFREG;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_388.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_388.cpp,108,[],"[""unkown"", ""macro"", ""=="", ""!""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_220.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_220.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_220.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_508.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_508.cpp,843,868,847,878,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");","archive_wstrcat(&s, wp);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_389.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_389.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_389.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_389.cpp,141,"[""member"", ""macro"", ""string""]","[""__archive_read_ahead_ret"", ""null"", ""==""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_220.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_220.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_220.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_510.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_510.cpp,2746,2803,2749,2806,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Mac metadata is too large: %jd > 4M bytes"",
		    (intmax_t)rsrc->compressed_size);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_391.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_391.cpp,"{
	struct zip *zip = (struct zip *)a->format->data;
	unsigned char *metadata, *mp;
	int64_t offset = archive_filter_bytes(&a->archive, 0);
	size_t remaining_bytes, metadata_bytes;
	ssize_t hsize;
	int ret = ARCHIVE_OK, eof;

	switch(rsrc->compression) {
	case 0:  /* No compression. */
#ifdef HAVE_ZLIB_H
	case 8: /* Deflate compression. */
#endif
		break;
	default: /* Unsupported compression. */
		/* Return a warning. */
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported ZIP compression method (%s)"",
		    compression_name(rsrc->compression));
		/* We can't decompress this entry, but we will
		 * be able to skip() it and try the next entry. */
		return (ARCHIVE_WARN);
	}

	if (rsrc->uncompressed_size > (4 * 1024 * 1024)) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Mac metadata is too large: %jd > 4M bytes"",
		    (intmax_t)rsrc->uncompressed_size);
		return (ARCHIVE_WARN);
	}

	metadata = malloc((size_t)rsrc->uncompressed_size);
	if (metadata == NULL) {
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for Mac metadata"");
		return (ARCHIVE_FATAL);
	}

	if (offset < rsrc->local_header_offset)
		__archive_read_consume(a, rsrc->local_header_offset - offset);
	else if (offset != rsrc->local_header_offset) {
		__archive_read_seek(a, rsrc->local_header_offset, SEEK_SET);
	}

	hsize = zip_get_local_file_header_size(a, 0);
	__archive_read_consume(a, hsize);

	remaining_bytes = (size_t)rsrc->compressed_size;
	metadata_bytes = (size_t)rsrc->uncompressed_size;
	mp = metadata;
	eof = 0;
	while (!eof && remaining_bytes) {
		const unsigned char *p;
		ssize_t bytes_avail;
		size_t bytes_used;

		p = __archive_read_ahead(a, 1, &bytes_avail);
		if (p == NULL) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated ZIP file header"");
			ret = ARCHIVE_WARN;
			goto exit_mac_metadata;
		}
		if ((size_t)bytes_avail > remaining_bytes)
			bytes_avail = remaining_bytes;
		switch(rsrc->compression) {
		case 0:  /* No compression. */
			memcpy(mp, p, bytes_avail);
			bytes_used = (size_t)bytes_avail;
			metadata_bytes -= bytes_used;
			mp += bytes_used;
			if (metadata_bytes == 0)
				eof = 1;
			break;
#ifdef HAVE_ZLIB_H
		case 8: /* Deflate compression. */
		{
			int r;

			ret = zip_deflate_init(a, zip);
			if (ret != ARCHIVE_OK)
				goto exit_mac_metadata;
			zip->stream.next_in =
			    (Bytef *)(uintptr_t)(const void *)p;
			zip->stream.avail_in = (uInt)bytes_avail;
			zip->stream.total_in = 0;
			zip->stream.next_out = mp;
			zip->stream.avail_out = (uInt)metadata_bytes;
			zip->stream.total_out = 0;

			r = inflate(&zip->stream, 0);
			switch (r) {
			case Z_OK:
				break;
			case Z_STREAM_END:
				eof = 1;
				break;
			case Z_MEM_ERROR:
				archive_set_error(&a->archive, ENOMEM,
				    ""Out of memory for ZIP decompression"");
				ret = ARCHIVE_FATAL;
				goto exit_mac_metadata;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""ZIP decompression failed (%d)"", r);
				ret = ARCHIVE_FATAL;
				goto exit_mac_metadata;
			}
			bytes_used = zip->stream.total_in;
			metadata_bytes -= zip->stream.total_out;
			mp += zip->stream.total_out;
			break;
		}
#endif
		default:
			bytes_used = 0;
			break;
		}
		__archive_read_consume(a, bytes_used);
		remaining_bytes -= bytes_used;
	}
	archive_entry_copy_mac_metadata(entry, metadata,
	    (size_t)rsrc->uncompressed_size - metadata_bytes);

exit_mac_metadata:
	__archive_read_seek(a, offset, SEEK_SET);
	zip->decompress_init = 0;
	free(metadata);
	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_391.cpp,"[8, 1, 0, 0, 6, 0, 4, 3, 7, 3, 14, 1, 4, 0, 2, 262, 0, 0, 10, 13, 0, 0, 3, 25, 0, 0, 0, 0, 4, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 12, 8, 0, 0, 21, 0, 0, 44, 1, 53, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_391.cpp,34,"[""member""]","[""member"", ""int"", "">"", ""!""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_write_add_filter_lz4.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_221.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_221.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_221.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_512.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_512.cpp,160,160,166,170,,"archive_set_error(f->archive, ARCHIVE_ERRNO_PROGRAMMER,
				""High compression not included in this build"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_392.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_392.cpp,"{
		if (value == NULL || !(value[0] >= '1' && value[0] <= '9') ||
		    value[1] != '\0')
			return (ARCHIVE_WARN);
		data->compression_level = value[0] - '0';
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_392.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_392.cpp,11,[],"[""const char *"", ""null"", ""=="", ""member"", ""char"", "">="", ""member"", ""char"", ""<="", ""&&"", ""!"", ""member"", ""char"", ""!="", ""||"", ""||"", ""!""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_222.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_514.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_514.cpp,231,233,232,234,"archive_set_error(f->archive, EINVAL,
		    ""Can't initialise filter"");","archive_set_error(f->archive, EINVAL,
		    ""Can't launch external program: %s"", cmd);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_393.cpp,"{
		archive_set_error(f->archive, EINVAL,
		    ""Can't initialise filter"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_393.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_393.cpp,26,"[""member"", ""macro"", ""string""]","[""__archive_create_child_ret"", ""int"", ""==""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_222.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_515.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_515.cpp,242,244,243,245,"archive_set_error(f->archive, EINVAL,
		    ""Can't initialise filter"");","archive_set_error(f->archive, EINVAL,
		    ""Can't launch external program: %s"", cmd);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_394.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_394.cpp,"{
		close(data->child_stdin);
		data->child_stdin = -1;
		close(data->child_stdout);
		data->child_stdout = -1;
		archive_set_error(f->archive, EINVAL,
		    ""Can't initialise filter"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_394.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_394.cpp,37,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_222.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_516.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_516.cpp,334,336,335,337,"archive_set_error(f->archive, EIO,
			    ""Can't write to filter"");","archive_set_error(f->archive, EIO,
			    ""Can't write to program: %s"", data->program_name);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_395.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_395.cpp,"{
			archive_set_error(f->archive, EIO,
			    ""Can't write to filter"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_395.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_395.cpp,14,"[""member"", ""macro"", ""string""]","[""child_write_ret"", ""int"", ""=="", ""child_write_ret"", ""null"", ""=="", ""||""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_222.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_517.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_517.cpp,373,375,374,376,"archive_set_error(f->archive, errno,
			    ""Read from filter failed unexpectedly."");","archive_set_error(f->archive, errno,
			    ""Error reading from program: %s"", data->program_name);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_396.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_396.cpp,"{
			archive_set_error(f->archive, errno,
			    ""Read from filter failed unexpectedly."");
			ret = ARCHIVE_FATAL;
			goto cleanup;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_396.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_396.cpp,26,"[""member"", ""unkown"", ""constant""]","[""read_ret"", ""int"", ""==""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_222.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_518.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_518.cpp,403,405,404,406,"archive_set_error(f->archive, EIO,
		    ""Filter exited with failure."");","archive_set_error(f->archive, EIO,
		    ""Error closing program: %s"", data->program_name);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_397.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_397.cpp,"{
		archive_set_error(f->archive, EIO,
		    ""Filter exited with failure."");
		ret = ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_397.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_397.cpp,56,"[""member"", ""macro"", ""constant""]","[""int"", ""null"", ""!=""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_read_support_format_xar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_228.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_228.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_228.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_527.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_527.cpp,1939,1939,1942,-1,"fprintf(stderr, ""unknowntag_start:%s\n"", name);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_398.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_398.cpp,"{
	struct unknown_tag *tag;

#if DEBUG
	fprintf(stderr, ""unknowntag_start:%s\n"", name);
#endif
	tag = malloc(sizeof(*tag));
	if (tag == NULL) {
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}
	tag->next = xar->unknowntags;
	archive_string_init(&(tag->name));
	archive_strcpy(&(tag->name), name);
	if (xar->unknowntags == NULL) {
		xar->xmlsts_unknown = xar->xmlsts;
		xar->xmlsts = UNKNOWN;
	}
	xar->unknowntags = tag;
	return (ARCHIVE_OK);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_398.cpp,"[3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 53, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 25, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 0, 6, 0, 0, 9, 0, 11, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_398.cpp,6,"[""unkown"", ""string"", ""const char *""]",[]
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_read_support_format_xar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_228.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_228.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_228.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_528.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_528.cpp,1951,1948,1954,1951,,"fprintf(stderr, ""UNKNOWNTAG_START:%s\n"", name);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_399.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_399.cpp,"{
		xar->xmlsts_unknown = xar->xmlsts;
		xar->xmlsts = UNKNOWN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_399.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_399.cpp,18,[],"[""member"", ""null"", ""==""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_read_support_format_xar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_228.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_228.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_228.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_529.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_529.cpp,1963,1963,1966,1974,"fprintf(stderr, ""unknowntag_end:%s\n"", name);","fprintf(stderr, ""UNKNOWNTAG_END:%s\n"", name);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_400.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_400.cpp,"{
	struct unknown_tag *tag;

#if DEBUG
	fprintf(stderr, ""unknowntag_end:%s\n"", name);
#endif
	tag = xar->unknowntags;
	if (tag == NULL || name == NULL)
		return;
	if (strcmp(tag->name.s, name) == 0) {
		xar->unknowntags = tag->next;
		archive_string_free(&(tag->name));
		free(tag);
		if (xar->unknowntags == NULL)
			xar->xmlsts = xar->xmlsts_unknown;
	}
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_400.cpp,"[4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 44, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 3, 0, 0, 4, 0, 0, 6, 0, 7, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_400.cpp,6,"[""unkown"", ""string"", ""const char *""]",[]
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_229.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_229.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_229.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_532.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_532.cpp,810,825,814,829,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_401.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_401.cpp,"((zip_entry->mode & AE_IFMT) == AE_IFIFO) {
		zip_entry->mode &= ~ AE_IFMT;
		zip_entry->mode |= AE_IFREG;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_401.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_401.cpp,108,[],"[""archive_entry_copy_pathname_l_ret"", ""null"", ""!="", ""!""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_229.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_229.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_229.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_533.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_533.cpp,843,868,847,878,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");","archive_wstrcat(&s, wp);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_402.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_402.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_402.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_402.cpp,141,"[""member"", ""macro"", ""string""]","[""__archive_read_ahead_ret"", ""null"", ""==""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_229.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_229.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_229.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_534.cpp,2726,2778,2728,2781,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Malformed OS X metadata entry: inconsistent size"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_403.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_403.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_403.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_403.cpp,0,[],[]
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_229.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_229.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_229.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_535.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_535.cpp,2746,2803,2749,2806,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Mac metadata is too large: %jd > 4M bytes"",
		    (intmax_t)rsrc->compressed_size);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_404.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_404.cpp,"{
	struct zip *zip = (struct zip *)a->format->data;
	unsigned char *metadata, *mp;
	int64_t offset = archive_filter_bytes(&a->archive, 0);
	size_t remaining_bytes, metadata_bytes;
	ssize_t hsize;
	int ret = ARCHIVE_OK, eof;

	switch(rsrc->compression) {
	case 0:  /* No compression. */
#ifdef HAVE_ZLIB_H
	case 8: /* Deflate compression. */
#endif
		break;
	default: /* Unsupported compression. */
		/* Return a warning. */
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported ZIP compression method (%s)"",
		    compression_name(rsrc->compression));
		/* We can't decompress this entry, but we will
		 * be able to skip() it and try the next entry. */
		return (ARCHIVE_WARN);
	}

	if (rsrc->uncompressed_size > (4 * 1024 * 1024)) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Mac metadata is too large: %jd > 4M bytes"",
		    (intmax_t)rsrc->uncompressed_size);
		return (ARCHIVE_WARN);
	}

	metadata = malloc((size_t)rsrc->uncompressed_size);
	if (metadata == NULL) {
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for Mac metadata"");
		return (ARCHIVE_FATAL);
	}

	if (offset < rsrc->local_header_offset)
		__archive_read_consume(a, rsrc->local_header_offset - offset);
	else if (offset != rsrc->local_header_offset) {
		__archive_read_seek(a, rsrc->local_header_offset, SEEK_SET);
	}

	hsize = zip_get_local_file_header_size(a, 0);
	__archive_read_consume(a, hsize);

	remaining_bytes = (size_t)rsrc->compressed_size;
	metadata_bytes = (size_t)rsrc->uncompressed_size;
	mp = metadata;
	eof = 0;
	while (!eof && remaining_bytes) {
		const unsigned char *p;
		ssize_t bytes_avail;
		size_t bytes_used;

		p = __archive_read_ahead(a, 1, &bytes_avail);
		if (p == NULL) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated ZIP file header"");
			ret = ARCHIVE_WARN;
			goto exit_mac_metadata;
		}
		if ((size_t)bytes_avail > remaining_bytes)
			bytes_avail = remaining_bytes;
		switch(rsrc->compression) {
		case 0:  /* No compression. */
			memcpy(mp, p, bytes_avail);
			bytes_used = (size_t)bytes_avail;
			metadata_bytes -= bytes_used;
			mp += bytes_used;
			if (metadata_bytes == 0)
				eof = 1;
			break;
#ifdef HAVE_ZLIB_H
		case 8: /* Deflate compression. */
		{
			int r;

			ret = zip_deflate_init(a, zip);
			if (ret != ARCHIVE_OK)
				goto exit_mac_metadata;
			zip->stream.next_in =
			    (Bytef *)(uintptr_t)(const void *)p;
			zip->stream.avail_in = (uInt)bytes_avail;
			zip->stream.total_in = 0;
			zip->stream.next_out = mp;
			zip->stream.avail_out = (uInt)metadata_bytes;
			zip->stream.total_out = 0;

			r = inflate(&zip->stream, 0);
			switch (r) {
			case Z_OK:
				break;
			case Z_STREAM_END:
				eof = 1;
				break;
			case Z_MEM_ERROR:
				archive_set_error(&a->archive, ENOMEM,
				    ""Out of memory for ZIP decompression"");
				ret = ARCHIVE_FATAL;
				goto exit_mac_metadata;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""ZIP decompression failed (%d)"", r);
				ret = ARCHIVE_FATAL;
				goto exit_mac_metadata;
			}
			bytes_used = zip->stream.total_in;
			metadata_bytes -= zip->stream.total_out;
			mp += zip->stream.total_out;
			break;
		}
#endif
		default:
			bytes_used = 0;
			break;
		}
		__archive_read_consume(a, bytes_used);
		remaining_bytes -= bytes_used;
	}
	archive_entry_copy_mac_metadata(entry, metadata,
	    (size_t)rsrc->uncompressed_size - metadata_bytes);

exit_mac_metadata:
	__archive_read_seek(a, offset, SEEK_SET);
	zip->decompress_init = 0;
	free(metadata);
	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_404.cpp,"[8, 1, 0, 0, 6, 0, 4, 3, 7, 3, 14, 1, 4, 0, 2, 262, 0, 0, 10, 13, 0, 0, 3, 25, 0, 0, 0, 0, 4, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 12, 8, 0, 0, 21, 0, 0, 44, 1, 53, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_404.cpp,34,"[""member""]","[""member"", ""int"", "">"", ""!""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_write_add_filter_lz4.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_230.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_230.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_230.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_537.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_537.cpp,160,160,166,170,,"archive_set_error(f->archive, ARCHIVE_ERRNO_PROGRAMMER,
				""High compression not included in this build"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_405.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_405.cpp,"{
		if (value == NULL || !(value[0] >= '1' && value[0] <= '9') ||
		    value[1] != '\0')
			return (ARCHIVE_WARN);
		data->compression_level = value[0] - '0';
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_405.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_405.cpp,11,[],"[""const char *"", ""null"", ""=="", ""member"", ""char"", "">="", ""member"", ""char"", ""<="", ""&&"", ""!"", ""member"", ""char"", ""!="", ""||"", ""||"", ""!""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_231.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_539.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_539.cpp,231,233,232,234,"archive_set_error(f->archive, EINVAL,
		    ""Can't initialise filter"");","archive_set_error(f->archive, EINVAL,
		    ""Can't launch external program: %s"", cmd);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_406.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_406.cpp,"{
		archive_set_error(f->archive, EINVAL,
		    ""Can't initialise filter"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_406.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_406.cpp,26,"[""member"", ""macro"", ""string""]","[""__archive_create_child_ret"", ""int"", ""==""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_231.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_540.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_540.cpp,242,244,243,245,"archive_set_error(f->archive, EINVAL,
		    ""Can't initialise filter"");","archive_set_error(f->archive, EINVAL,
		    ""Can't launch external program: %s"", cmd);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_407.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_407.cpp,"{
		close(data->child_stdin);
		data->child_stdin = -1;
		close(data->child_stdout);
		data->child_stdout = -1;
		archive_set_error(f->archive, EINVAL,
		    ""Can't initialise filter"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_407.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_407.cpp,37,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_231.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_541.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_541.cpp,334,336,335,337,"archive_set_error(f->archive, EIO,
			    ""Can't write to filter"");","archive_set_error(f->archive, EIO,
			    ""Can't write to program: %s"", data->program_name);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_408.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_408.cpp,"{
			archive_set_error(f->archive, EIO,
			    ""Can't write to filter"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_408.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_408.cpp,14,"[""member"", ""macro"", ""string""]","[""child_write_ret"", ""int"", ""=="", ""child_write_ret"", ""null"", ""=="", ""||""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_231.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_542.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_542.cpp,373,375,374,376,"archive_set_error(f->archive, errno,
			    ""Read from filter failed unexpectedly."");","archive_set_error(f->archive, errno,
			    ""Error reading from program: %s"", data->program_name);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_409.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_409.cpp,"{
			archive_set_error(f->archive, errno,
			    ""Read from filter failed unexpectedly."");
			ret = ARCHIVE_FATAL;
			goto cleanup;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_409.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_409.cpp,26,"[""member"", ""unkown"", ""constant""]","[""read_ret"", ""int"", ""==""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_231.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_543.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_543.cpp,403,405,404,406,"archive_set_error(f->archive, EIO,
		    ""Filter exited with failure."");","archive_set_error(f->archive, EIO,
		    ""Error closing program: %s"", data->program_name);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_410.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_410.cpp,"{
		archive_set_error(f->archive, EIO,
		    ""Filter exited with failure."");
		ret = ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_410.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_410.cpp,56,"[""member"", ""macro"", ""constant""]","[""int"", ""null"", ""!=""]"
7f1bd9fe6910f7633d98dec018cc01331a46b87e,"try_compile: Add option to control type of target

Create a `CMAKE_TRY_COMPILE_TARGET_TYPE` option to specify use
of `add_library(... STATIC ...)` for the generated test project.
This will be useful for cross-compiling toolchains that cannot
link a binary without custom flags or scripts.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_233.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_545.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_545.cpp,486,515,489,-1,"f(fout, ""set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_411.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_411.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile);

    // Choose sources.
    if(!useSources)
      {
      sources.push_back(argv[2]);
      }

    // Detect languages to enable.
    cmGlobalGenerator* gg = this->Makefile->GetGlobalGenerator();
    std::set<std::string> testLangs;
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      std::string ext = cmSystemTools::GetFilenameLastExtension(*si);
      std::string lang = gg->GetLanguageFromExtension(ext.c_str());
      if(!lang.empty())
        {
        testLangs.insert(lang);
        }
      else
        {
        std::ostringstream err;
        err << ""Unknown extension \"""" << ext << ""\"" for file\n""
            << ""  "" << *si << ""\n""
            << ""try_compile() works only for enabled languages.  ""
            << ""Currently these are:\n  "";
        std::vector<std::string> langs;
        gg->GetEnabledLanguages(langs);
        err << cmJoin(langs, "" "");
        err << ""\nSee project() command to enable other languages."";
        this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
        return -1;
        }
      }

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = cmsys::SystemTools::Fopen(outFileName,""w"");
    if (!fout)
      {
      std::ostringstream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""set(CMAKE_MODULE_PATH \""%s\"")\n"", def);
      }

    std::string projectLangs;
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      projectLangs += "" "" + *li;
      std::string rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
      std::string rulesOverrideLang = rulesOverrideBase + ""_"" + *li;
      if(const char* rulesOverridePath =
         this->Makefile->GetDefinition(rulesOverrideLang))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }
      else if(const char* rulesOverridePath2 =
              this->Makefile->GetDefinition(rulesOverrideBase))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }
      }
    fprintf(fout, ""project(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());
    fprintf(fout, ""set(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags);
      fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              cmOutputConverter::EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""set(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }
    switch(this->Makefile->GetPolicyStatus(cmPolicies::CMP0056))
      {
      case cmPolicies::WARN:
        if(this->Makefile->PolicyOptionalWarningEnabled(
             ""CMAKE_POLICY_WARNING_CMP0056""))
          {
          std::ostringstream w;
          w << cmPolicies::GetPolicyWarning(cmPolicies::CMP0056) << ""\n""
            ""For compatibility with older versions of CMake, try_compile ""
            ""is not honoring caller link flags (e.g. CMAKE_EXE_LINKER_FLAGS) ""
            ""in the test project.""
            ;
          this->Makefile->IssueMessage(cmake::AUTHOR_WARNING, w.str());
          }
      case cmPolicies::OLD:
        // OLD behavior is to do nothing.
        break;
      case cmPolicies::REQUIRED_IF_USED:
      case cmPolicies::REQUIRED_ALWAYS:
        this->Makefile->IssueMessage(
          cmake::FATAL_ERROR,
          cmPolicies::GetRequiredPolicyError(cmPolicies::CMP0056)
          );
      case cmPolicies::NEW:
        // NEW behavior is to pass linker flags.
        {
        const char* exeLinkFlags =
          this->Makefile->GetDefinition(""CMAKE_EXE_LINKER_FLAGS"");
        fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS %s)\n"",
                cmOutputConverter::EscapeForCMake(
                    exeLinkFlags ? exeLinkFlags : """").c_str());
        } break;
      }
    fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS \""${CMAKE_EXE_LINKER_FLAGS}""
            "" ${EXE_LINKER_FLAGS}\"")\n"");
    fprintf(fout, ""include_directories(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""set(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""link_directories(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (!compileDefs.empty())
      {
      fprintf(fout, ""add_definitions(%s)\n"", cmJoin(compileDefs, "" "").c_str());
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTC_%05x"",
            cmSystemTools::RandomSeed() & 0xFFFFF);
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg(gg, targets, this->Makefile);
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetConfig(this->Makefile->GetSafeDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURES to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURES first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if (const char *cxxDef
              = this->Makefile->GetDefinition(""CMAKE_CXX_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_TARGET="";
      flag += cxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *cDef
                = this->Makefile->GetDefinition(""CMAKE_C_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_TARGET="";
      flag += cDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcxxDef = this->Makefile->GetDefinition(
                                  ""CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcDef = this->Makefile->GetDefinition(
                                    ""CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *rootDef
              = this->Makefile->GetDefinition(""CMAKE_SYSROOT""))
      {
      std::string flag=""-DCMAKE_SYSROOT="";
      flag += rootDef;
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""set(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }
    if (const char *lssDef = this->Makefile->GetDefinition(
        ""CMAKE_LINK_SEARCH_START_STATIC""))
      {
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_START_STATIC \""%s\"")\n"", lssDef);
      }
    if (const char *lssDef = this->Makefile->GetDefinition(
        ""CMAKE_LINK_SEARCH_END_STATIC""))
      {
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_END_STATIC \""%s\"")\n"", lssDef);
      }

    /* Set the appropriate policy information for ENABLE_EXPORTS */
    fprintf(fout, ""cmake_policy(SET CMP0065 %s)\n"",
       this->Makefile->GetPolicyStatus(cmPolicies::CMP0065) ==
         cmPolicies::NEW ? ""NEW"" : ""OLD"");
    if(const char *ee = this->Makefile->GetDefinition(
        ""CMAKE_ENABLE_EXPORTS""))
      {
      fprintf(fout, ""set(CMAKE_ENABLE_EXPORTS %s)\n"", ee);
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""add_executable(%s"", targetName.c_str());
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }
    fprintf(fout, "")\n"");
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",
              targetName.c_str());
      }
    else
      {
      fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName.c_str(),
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_411.cpp,"[25, 0, 4, 0, 2, 0, 3, 1, 5, 0, 34, 0, 0, 0, 13, 679, 0, 0, 27, 44, 1, 0, 39, 101, 0, 0, 0, 0, 15, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260, 3, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 45, 0, 1, 0, 33, 28, 5, 0, 134, 3, 0, 68, 2, 156, 0, 4, 0, 0, 4, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_411.cpp,468,"[""FILE *"", ""string"", ""this -> BinaryDirectory . c_str_ret""]","[""tcfg . GenerateImportFile_ret"", ""!""]"
7f1bd9fe6910f7633d98dec018cc01331a46b87e,"try_compile: Add option to control type of target

Create a `CMAKE_TRY_COMPILE_TARGET_TYPE` option to specify use
of `add_library(... STATIC ...)` for the generated test project.
This will be useful for cross-compiling toolchains that cannot
link a binary without custom flags or scripts.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_233.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_545.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_545.cpp,486,515,492,517,"fprintf(fout, ""add_executable(%s"", targetName.c_str());","(targetType == cmState::EXECUTABLE)
      {
      /* Put the executable at a known location (for COPY_FILE).  */
      fprintf(fout, ""set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
              this->BinaryDirectory.c_str());
      /* Create the actual executable.  */
      fprintf(fout, ""add_executable(%s"", targetName.c_str());
      };",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_412.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile);

    // Choose sources.
    if(!useSources)
      {
      sources.push_back(argv[2]);
      }

    // Detect languages to enable.
    cmGlobalGenerator* gg = this->Makefile->GetGlobalGenerator();
    std::set<std::string> testLangs;
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      std::string ext = cmSystemTools::GetFilenameLastExtension(*si);
      std::string lang = gg->GetLanguageFromExtension(ext.c_str());
      if(!lang.empty())
        {
        testLangs.insert(lang);
        }
      else
        {
        std::ostringstream err;
        err << ""Unknown extension \"""" << ext << ""\"" for file\n""
            << ""  "" << *si << ""\n""
            << ""try_compile() works only for enabled languages.  ""
            << ""Currently these are:\n  "";
        std::vector<std::string> langs;
        gg->GetEnabledLanguages(langs);
        err << cmJoin(langs, "" "");
        err << ""\nSee project() command to enable other languages."";
        this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
        return -1;
        }
      }

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = cmsys::SystemTools::Fopen(outFileName,""w"");
    if (!fout)
      {
      std::ostringstream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""set(CMAKE_MODULE_PATH \""%s\"")\n"", def);
      }

    std::string projectLangs;
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      projectLangs += "" "" + *li;
      std::string rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
      std::string rulesOverrideLang = rulesOverrideBase + ""_"" + *li;
      if(const char* rulesOverridePath =
         this->Makefile->GetDefinition(rulesOverrideLang))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }
      else if(const char* rulesOverridePath2 =
              this->Makefile->GetDefinition(rulesOverrideBase))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }
      }
    fprintf(fout, ""project(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());
    fprintf(fout, ""set(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags);
      fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              cmOutputConverter::EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""set(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }
    switch(this->Makefile->GetPolicyStatus(cmPolicies::CMP0056))
      {
      case cmPolicies::WARN:
        if(this->Makefile->PolicyOptionalWarningEnabled(
             ""CMAKE_POLICY_WARNING_CMP0056""))
          {
          std::ostringstream w;
          w << cmPolicies::GetPolicyWarning(cmPolicies::CMP0056) << ""\n""
            ""For compatibility with older versions of CMake, try_compile ""
            ""is not honoring caller link flags (e.g. CMAKE_EXE_LINKER_FLAGS) ""
            ""in the test project.""
            ;
          this->Makefile->IssueMessage(cmake::AUTHOR_WARNING, w.str());
          }
      case cmPolicies::OLD:
        // OLD behavior is to do nothing.
        break;
      case cmPolicies::REQUIRED_IF_USED:
      case cmPolicies::REQUIRED_ALWAYS:
        this->Makefile->IssueMessage(
          cmake::FATAL_ERROR,
          cmPolicies::GetRequiredPolicyError(cmPolicies::CMP0056)
          );
      case cmPolicies::NEW:
        // NEW behavior is to pass linker flags.
        {
        const char* exeLinkFlags =
          this->Makefile->GetDefinition(""CMAKE_EXE_LINKER_FLAGS"");
        fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS %s)\n"",
                cmOutputConverter::EscapeForCMake(
                    exeLinkFlags ? exeLinkFlags : """").c_str());
        } break;
      }
    fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS \""${CMAKE_EXE_LINKER_FLAGS}""
            "" ${EXE_LINKER_FLAGS}\"")\n"");
    fprintf(fout, ""include_directories(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""set(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""link_directories(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (!compileDefs.empty())
      {
      fprintf(fout, ""add_definitions(%s)\n"", cmJoin(compileDefs, "" "").c_str());
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTC_%05x"",
            cmSystemTools::RandomSeed() & 0xFFFFF);
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg(gg, targets, this->Makefile);
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetConfig(this->Makefile->GetSafeDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURES to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURES first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if (const char *cxxDef
              = this->Makefile->GetDefinition(""CMAKE_CXX_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_TARGET="";
      flag += cxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *cDef
                = this->Makefile->GetDefinition(""CMAKE_C_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_TARGET="";
      flag += cDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcxxDef = this->Makefile->GetDefinition(
                                  ""CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcDef = this->Makefile->GetDefinition(
                                    ""CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *rootDef
              = this->Makefile->GetDefinition(""CMAKE_SYSROOT""))
      {
      std::string flag=""-DCMAKE_SYSROOT="";
      flag += rootDef;
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""set(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }
    if (const char *lssDef = this->Makefile->GetDefinition(
        ""CMAKE_LINK_SEARCH_START_STATIC""))
      {
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_START_STATIC \""%s\"")\n"", lssDef);
      }
    if (const char *lssDef = this->Makefile->GetDefinition(
        ""CMAKE_LINK_SEARCH_END_STATIC""))
      {
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_END_STATIC \""%s\"")\n"", lssDef);
      }

    /* Set the appropriate policy information for ENABLE_EXPORTS */
    fprintf(fout, ""cmake_policy(SET CMP0065 %s)\n"",
       this->Makefile->GetPolicyStatus(cmPolicies::CMP0065) ==
         cmPolicies::NEW ? ""NEW"" : ""OLD"");
    if(const char *ee = this->Makefile->GetDefinition(
        ""CMAKE_ENABLE_EXPORTS""))
      {
      fprintf(fout, ""set(CMAKE_ENABLE_EXPORTS %s)\n"", ee);
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""add_executable(%s"", targetName.c_str());
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }
    fprintf(fout, "")\n"");
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",
              targetName.c_str());
      }
    else
      {
      fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName.c_str(),
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_412.cpp,"[25, 0, 4, 0, 2, 0, 3, 1, 5, 0, 34, 0, 0, 0, 13, 679, 0, 0, 27, 44, 1, 0, 39, 101, 0, 0, 0, 0, 15, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260, 3, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 45, 0, 1, 0, 33, 28, 5, 0, 134, 3, 0, 68, 2, 156, 0, 4, 0, 0, 4, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_412.cpp,471,"[""FILE *"", ""string"", ""targetName . c_str_ret""]","[""tcfg . GenerateImportFile_ret"", ""!""]"
7f1bd9fe6910f7633d98dec018cc01331a46b87e,"try_compile: Add option to control type of target

Create a `CMAKE_TRY_COMPILE_TARGET_TYPE` option to specify use
of `add_library(... STATIC ...)` for the generated test project.
This will be useful for cross-compiling toolchains that cannot
link a binary without custom flags or scripts.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_233.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_545.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_545.cpp,486,515,492,520,,"fprintf(fout, ""set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
              this->BinaryDirectory.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_413.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_413.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile);

    // Choose sources.
    if(!useSources)
      {
      sources.push_back(argv[2]);
      }

    // Detect languages to enable.
    cmGlobalGenerator* gg = this->Makefile->GetGlobalGenerator();
    std::set<std::string> testLangs;
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      std::string ext = cmSystemTools::GetFilenameLastExtension(*si);
      std::string lang = gg->GetLanguageFromExtension(ext.c_str());
      if(!lang.empty())
        {
        testLangs.insert(lang);
        }
      else
        {
        std::ostringstream err;
        err << ""Unknown extension \"""" << ext << ""\"" for file\n""
            << ""  "" << *si << ""\n""
            << ""try_compile() works only for enabled languages.  ""
            << ""Currently these are:\n  "";
        std::vector<std::string> langs;
        gg->GetEnabledLanguages(langs);
        err << cmJoin(langs, "" "");
        err << ""\nSee project() command to enable other languages."";
        this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
        return -1;
        }
      }

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = cmsys::SystemTools::Fopen(outFileName,""w"");
    if (!fout)
      {
      std::ostringstream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""set(CMAKE_MODULE_PATH \""%s\"")\n"", def);
      }

    std::string projectLangs;
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      projectLangs += "" "" + *li;
      std::string rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
      std::string rulesOverrideLang = rulesOverrideBase + ""_"" + *li;
      if(const char* rulesOverridePath =
         this->Makefile->GetDefinition(rulesOverrideLang))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }
      else if(const char* rulesOverridePath2 =
              this->Makefile->GetDefinition(rulesOverrideBase))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }
      }
    fprintf(fout, ""project(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());
    fprintf(fout, ""set(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags);
      fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              cmOutputConverter::EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""set(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }
    switch(this->Makefile->GetPolicyStatus(cmPolicies::CMP0056))
      {
      case cmPolicies::WARN:
        if(this->Makefile->PolicyOptionalWarningEnabled(
             ""CMAKE_POLICY_WARNING_CMP0056""))
          {
          std::ostringstream w;
          w << cmPolicies::GetPolicyWarning(cmPolicies::CMP0056) << ""\n""
            ""For compatibility with older versions of CMake, try_compile ""
            ""is not honoring caller link flags (e.g. CMAKE_EXE_LINKER_FLAGS) ""
            ""in the test project.""
            ;
          this->Makefile->IssueMessage(cmake::AUTHOR_WARNING, w.str());
          }
      case cmPolicies::OLD:
        // OLD behavior is to do nothing.
        break;
      case cmPolicies::REQUIRED_IF_USED:
      case cmPolicies::REQUIRED_ALWAYS:
        this->Makefile->IssueMessage(
          cmake::FATAL_ERROR,
          cmPolicies::GetRequiredPolicyError(cmPolicies::CMP0056)
          );
      case cmPolicies::NEW:
        // NEW behavior is to pass linker flags.
        {
        const char* exeLinkFlags =
          this->Makefile->GetDefinition(""CMAKE_EXE_LINKER_FLAGS"");
        fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS %s)\n"",
                cmOutputConverter::EscapeForCMake(
                    exeLinkFlags ? exeLinkFlags : """").c_str());
        } break;
      }
    fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS \""${CMAKE_EXE_LINKER_FLAGS}""
            "" ${EXE_LINKER_FLAGS}\"")\n"");
    fprintf(fout, ""include_directories(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""set(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""link_directories(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (!compileDefs.empty())
      {
      fprintf(fout, ""add_definitions(%s)\n"", cmJoin(compileDefs, "" "").c_str());
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTC_%05x"",
            cmSystemTools::RandomSeed() & 0xFFFFF);
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg(gg, targets, this->Makefile);
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetConfig(this->Makefile->GetSafeDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURES to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURES first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if (const char *cxxDef
              = this->Makefile->GetDefinition(""CMAKE_CXX_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_TARGET="";
      flag += cxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *cDef
                = this->Makefile->GetDefinition(""CMAKE_C_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_TARGET="";
      flag += cDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcxxDef = this->Makefile->GetDefinition(
                                  ""CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcDef = this->Makefile->GetDefinition(
                                    ""CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *rootDef
              = this->Makefile->GetDefinition(""CMAKE_SYSROOT""))
      {
      std::string flag=""-DCMAKE_SYSROOT="";
      flag += rootDef;
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""set(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }
    if (const char *lssDef = this->Makefile->GetDefinition(
        ""CMAKE_LINK_SEARCH_START_STATIC""))
      {
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_START_STATIC \""%s\"")\n"", lssDef);
      }
    if (const char *lssDef = this->Makefile->GetDefinition(
        ""CMAKE_LINK_SEARCH_END_STATIC""))
      {
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_END_STATIC \""%s\"")\n"", lssDef);
      }

    /* Set the appropriate policy information for ENABLE_EXPORTS */
    fprintf(fout, ""cmake_policy(SET CMP0065 %s)\n"",
       this->Makefile->GetPolicyStatus(cmPolicies::CMP0065) ==
         cmPolicies::NEW ? ""NEW"" : ""OLD"");
    if(const char *ee = this->Makefile->GetDefinition(
        ""CMAKE_ENABLE_EXPORTS""))
      {
      fprintf(fout, ""set(CMAKE_ENABLE_EXPORTS %s)\n"", ee);
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""add_executable(%s"", targetName.c_str());
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }
    fprintf(fout, "")\n"");
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",
              targetName.c_str());
      }
    else
      {
      fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName.c_str(),
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_413.cpp,"[25, 0, 4, 0, 2, 0, 3, 1, 5, 0, 34, 0, 0, 0, 13, 679, 0, 0, 27, 44, 1, 0, 39, 101, 0, 0, 0, 0, 15, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260, 3, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 45, 0, 1, 0, 33, 28, 5, 0, 134, 3, 0, 68, 2, 156, 0, 4, 0, 0, 4, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_413.cpp,471,"[""FILE *"", ""string"", ""targetName . c_str_ret""]","[""targets . empty_ret"", ""!""]"
7f1bd9fe6910f7633d98dec018cc01331a46b87e,"try_compile: Add option to control type of target

Create a `CMAKE_TRY_COMPILE_TARGET_TYPE` option to specify use
of `add_library(... STATIC ...)` for the generated test project.
This will be useful for cross-compiling toolchains that cannot
link a binary without custom flags or scripts.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_233.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_545.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_545.cpp,486,515,492,523,,"fprintf(fout, ""add_executable(%s"", targetName.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_414.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_414.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile);

    // Choose sources.
    if(!useSources)
      {
      sources.push_back(argv[2]);
      }

    // Detect languages to enable.
    cmGlobalGenerator* gg = this->Makefile->GetGlobalGenerator();
    std::set<std::string> testLangs;
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      std::string ext = cmSystemTools::GetFilenameLastExtension(*si);
      std::string lang = gg->GetLanguageFromExtension(ext.c_str());
      if(!lang.empty())
        {
        testLangs.insert(lang);
        }
      else
        {
        std::ostringstream err;
        err << ""Unknown extension \"""" << ext << ""\"" for file\n""
            << ""  "" << *si << ""\n""
            << ""try_compile() works only for enabled languages.  ""
            << ""Currently these are:\n  "";
        std::vector<std::string> langs;
        gg->GetEnabledLanguages(langs);
        err << cmJoin(langs, "" "");
        err << ""\nSee project() command to enable other languages."";
        this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
        return -1;
        }
      }

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = cmsys::SystemTools::Fopen(outFileName,""w"");
    if (!fout)
      {
      std::ostringstream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""set(CMAKE_MODULE_PATH \""%s\"")\n"", def);
      }

    std::string projectLangs;
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      projectLangs += "" "" + *li;
      std::string rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
      std::string rulesOverrideLang = rulesOverrideBase + ""_"" + *li;
      if(const char* rulesOverridePath =
         this->Makefile->GetDefinition(rulesOverrideLang))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }
      else if(const char* rulesOverridePath2 =
              this->Makefile->GetDefinition(rulesOverrideBase))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }
      }
    fprintf(fout, ""project(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());
    fprintf(fout, ""set(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags);
      fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              cmOutputConverter::EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""set(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }
    switch(this->Makefile->GetPolicyStatus(cmPolicies::CMP0056))
      {
      case cmPolicies::WARN:
        if(this->Makefile->PolicyOptionalWarningEnabled(
             ""CMAKE_POLICY_WARNING_CMP0056""))
          {
          std::ostringstream w;
          w << cmPolicies::GetPolicyWarning(cmPolicies::CMP0056) << ""\n""
            ""For compatibility with older versions of CMake, try_compile ""
            ""is not honoring caller link flags (e.g. CMAKE_EXE_LINKER_FLAGS) ""
            ""in the test project.""
            ;
          this->Makefile->IssueMessage(cmake::AUTHOR_WARNING, w.str());
          }
      case cmPolicies::OLD:
        // OLD behavior is to do nothing.
        break;
      case cmPolicies::REQUIRED_IF_USED:
      case cmPolicies::REQUIRED_ALWAYS:
        this->Makefile->IssueMessage(
          cmake::FATAL_ERROR,
          cmPolicies::GetRequiredPolicyError(cmPolicies::CMP0056)
          );
      case cmPolicies::NEW:
        // NEW behavior is to pass linker flags.
        {
        const char* exeLinkFlags =
          this->Makefile->GetDefinition(""CMAKE_EXE_LINKER_FLAGS"");
        fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS %s)\n"",
                cmOutputConverter::EscapeForCMake(
                    exeLinkFlags ? exeLinkFlags : """").c_str());
        } break;
      }
    fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS \""${CMAKE_EXE_LINKER_FLAGS}""
            "" ${EXE_LINKER_FLAGS}\"")\n"");
    fprintf(fout, ""include_directories(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""set(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""link_directories(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (!compileDefs.empty())
      {
      fprintf(fout, ""add_definitions(%s)\n"", cmJoin(compileDefs, "" "").c_str());
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTC_%05x"",
            cmSystemTools::RandomSeed() & 0xFFFFF);
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg(gg, targets, this->Makefile);
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetConfig(this->Makefile->GetSafeDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURES to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURES first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if (const char *cxxDef
              = this->Makefile->GetDefinition(""CMAKE_CXX_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_TARGET="";
      flag += cxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *cDef
                = this->Makefile->GetDefinition(""CMAKE_C_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_TARGET="";
      flag += cDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcxxDef = this->Makefile->GetDefinition(
                                  ""CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcDef = this->Makefile->GetDefinition(
                                    ""CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *rootDef
              = this->Makefile->GetDefinition(""CMAKE_SYSROOT""))
      {
      std::string flag=""-DCMAKE_SYSROOT="";
      flag += rootDef;
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""set(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }
    if (const char *lssDef = this->Makefile->GetDefinition(
        ""CMAKE_LINK_SEARCH_START_STATIC""))
      {
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_START_STATIC \""%s\"")\n"", lssDef);
      }
    if (const char *lssDef = this->Makefile->GetDefinition(
        ""CMAKE_LINK_SEARCH_END_STATIC""))
      {
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_END_STATIC \""%s\"")\n"", lssDef);
      }

    /* Set the appropriate policy information for ENABLE_EXPORTS */
    fprintf(fout, ""cmake_policy(SET CMP0065 %s)\n"",
       this->Makefile->GetPolicyStatus(cmPolicies::CMP0065) ==
         cmPolicies::NEW ? ""NEW"" : ""OLD"");
    if(const char *ee = this->Makefile->GetDefinition(
        ""CMAKE_ENABLE_EXPORTS""))
      {
      fprintf(fout, ""set(CMAKE_ENABLE_EXPORTS %s)\n"", ee);
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""add_executable(%s"", targetName.c_str());
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }
    fprintf(fout, "")\n"");
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",
              targetName.c_str());
      }
    else
      {
      fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName.c_str(),
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_414.cpp,"[25, 0, 4, 0, 2, 0, 3, 1, 5, 0, 34, 0, 0, 0, 13, 679, 0, 0, 27, 44, 1, 0, 39, 101, 0, 0, 0, 0, 15, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260, 3, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 45, 0, 1, 0, 33, 28, 5, 0, 134, 3, 0, 68, 2, 156, 0, 4, 0, 0, 4, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_414.cpp,471,"[""FILE *"", ""string"", ""targetName . c_str_ret""]","[""tcfg . GenerateImportFile_ret"", ""!""]"
7f1bd9fe6910f7633d98dec018cc01331a46b87e,"try_compile: Add option to control type of target

Create a `CMAKE_TRY_COMPILE_TARGET_TYPE` option to specify use
of `add_library(... STATIC ...)` for the generated test project.
This will be useful for cross-compiling toolchains that cannot
link a binary without custom flags or scripts.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_233.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_545.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_545.cpp,486,515,493,528,,"fprintf(fout, ""set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \""%s\"")\n"",
              this->BinaryDirectory.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_415.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_415.cpp,"r(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_415.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 2, 0, 6, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_415.cpp,472,[],"[""tcfg . GenerateImportFile_ret"", ""!""]"
7f1bd9fe6910f7633d98dec018cc01331a46b87e,"try_compile: Add option to control type of target

Create a `CMAKE_TRY_COMPILE_TARGET_TYPE` option to specify use
of `add_library(... STATIC ...)` for the generated test project.
This will be useful for cross-compiling toolchains that cannot
link a binary without custom flags or scripts.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_233.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_545.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_545.cpp,486,515,493,531,,"fprintf(fout, ""add_library(%s STATIC"", targetName.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_416.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_416.cpp,"r(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_416.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 2, 0, 6, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_416.cpp,472,[],"[""tcfg . GenerateImportFile_ret"", ""!""]"
1c1ace2db012919f23b6de5400ab192b9277dfc6,"De-duplicate symbols listed in generated module definition files

MS tools have a limit on the number of symbols that can be listed
in a `.def` file.  If multiple `.obj` files provide a symbol then
avoid listing it more than once in the generated `.def` file to
avoid counting toward the limit.",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_234.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_546.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_546.cpp,296,298,300,-1,"fprintf(this->FileOut,""EXPORTS \n"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_417.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_417.cpp,"{
               this->ImportFlag = false;
               fprintf(this->FileOut,""EXPORTS \n"");
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_417.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_417.cpp,44,"[""member"", ""string""]","[""member""]"
1c1ace2db012919f23b6de5400ab192b9277dfc6,"De-duplicate symbols listed in generated module definition files

MS tools have a limit on the number of symbols that can be listed
in a `.def` file.  If multiple `.obj` files provide a symbol then
avoid listing it more than once in the generated `.def` file to
avoid counting toward the limit.",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_234.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_547.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_547.cpp,319,317,321,319,"fprintf(this->FileOut, ""\t%s \t DATA\n"", symbol.c_str());",this->DataSymbols.insert(symbol);,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_418.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_418.cpp,"{
                  // Read only (i.e. constants) must be excluded
                  fprintf(this->FileOut, ""\t%s \t DATA\n"", symbol.c_str());
               }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_418.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_418.cpp,65,"[""member"", ""string"", ""symbol . c_str_ret""]","[""member"", ""bool"", ""&&""]"
1c1ace2db012919f23b6de5400ab192b9277dfc6,"De-duplicate symbols listed in generated module definition files

MS tools have a limit on the number of symbols that can be listed
in a `.def` file.  If multiple `.obj` files provide a symbol then
avoid listing it more than once in the generated `.def` file to
avoid counting toward the limit.",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_234.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_547.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_547.cpp,319,317,325,323,"fprintf(this->FileOut, ""\t%s\n"", symbol.c_str());",this->Symbols.insert(symbol);,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_419.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_419.cpp,"{
                     fprintf(this->FileOut, ""\t%s\n"", symbol.c_str());
                  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_419.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_419.cpp,69,"[""member"", ""string"", ""symbol . c_str_ret""]","[""member"", ""bool"", ""!"", ""||""]"
1c1ace2db012919f23b6de5400ab192b9277dfc6,"De-duplicate symbols listed in generated module definition files

MS tools have a limit on the number of symbols that can be listed
in a `.def` file.  If multiple `.obj` files provide a symbol then
avoid listing it more than once in the generated `.def` file to
avoid counting toward the limit.",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_234.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_548.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_548.cpp,340,338,344,-1,"fprintf(this->FileOut,""IMPORTS \n"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_420.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_420.cpp,"{
               this->ImportFlag = true;
               fprintf(this->FileOut,""IMPORTS \n"");
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_420.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_420.cpp,88,"[""member"", ""string""]","[""member""]"
1c1ace2db012919f23b6de5400ab192b9277dfc6,"De-duplicate symbols listed in generated module definition files

MS tools have a limit on the number of symbols that can be listed
in a `.def` file.  If multiple `.obj` files provide a symbol then
avoid listing it more than once in the generated `.def` file to
avoid counting toward the limit.",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_234.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_548.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_548.cpp,340,338,346,340,"fprintf(this->FileOut, ""\t%s DATA \n"", symbol.c_str()+1);",this->DataSymbols.insert(symbol);,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_421.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_421.cpp,"{
            symbol = stringTable + pSymbolTable->N.Name.Long;
            while (isspace(symbol[0]))  symbol.erase(0,1);
            if (symbol[0] == '_') symbol.erase(0,1);
            if (!this->ImportFlag) {
               this->ImportFlag = true;
               fprintf(this->FileOut,""IMPORTS \n"");
            }
            fprintf(this->FileOut, ""\t%s DATA \n"", symbol.c_str()+1);
         }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_421.cpp,"[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 2, 0, 0, 6, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_421.cpp,90,"[""member"", ""string"", ""symbol . c_str_ret""]","[""member"", ""macro"", ""==""]"
1c1ace2db012919f23b6de5400ab192b9277dfc6,"De-duplicate symbols listed in generated module definition files

MS tools have a limit on the number of symbols that can be listed
in a `.def` file.  If multiple `.obj` files provide a symbol then
avoid listing it more than once in the generated `.def` file to
avoid counting toward the limit.",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_234.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_549.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_549.cpp,437,434,437,448,,"fprintf(file,""EXPORTS \n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_422.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_422.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_422.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_422.cpp,0,[],[]
ba819f49df33b546072a5928de3253770c4716b9,"cmFortranParser: Parse #line directives

Teach the lexer to extract the #line directive prefix and line number as
a new token type.  Teach the parser to recognize this token followed by
a string as the file name (plus possibly other content).  Report the
named file as included by the source file.",[],Source/cmFortranLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_235.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_235.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_235.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_550.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_550.cpp,2174,2192,2176,2194,"yy_fatal_error( ""cmFortran_yyset_lineno called with no buffer"" , yyscanner);","YY_FATAL_ERROR( ""cmFortran_yyset_lineno called with no buffer"" );",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_425.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_425.cpp,"yy_fatal_error( ""cmFortran_yyset_lineno called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_425.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_425.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
ba819f49df33b546072a5928de3253770c4716b9,"cmFortranParser: Parse #line directives

Teach the lexer to extract the #line directive prefix and line number as
a new token type.  Teach the parser to recognize this token followed by
a string as the file name (plus possibly other content).  Report the
named file as included by the source file.",[],Source/cmFortranLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_235.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_235.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_235.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_551.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_551.cpp,2189,2207,2191,2209,"yy_fatal_error( ""cmFortran_yyset_column called with no buffer"" , yyscanner);","YY_FATAL_ERROR( ""cmFortran_yyset_column called with no buffer"" );",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_426.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_426.cpp,"yy_fatal_error( ""cmFortran_yyset_column called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_426.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_426.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
7f8bb857b8ab714b80acfa6a6e2c34195fabff6f,VS6: Port to cmGeneratorTarget.,[],Source/cmLocalVisualStudio6Generator.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_236.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_236.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_236.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_552.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_552.cpp,575,570,584,579,"sprintf(output,""%s/%s_force_%i"", this->GetCurrentBinaryDirectory(),
          target.GetName().c_str(), count);","sprintf(output,""%s/%s_force_%i"", this->GetCurrentBinaryDirectory(),
          target->GetName().c_str(), count);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_427.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_427.cpp,"{
  // Create a fake output that forces the rule to run.
  char* output = new char[(strlen(this->GetCurrentBinaryDirectory())
                           + target.GetName().size() + 30)];
  sprintf(output,""%s/%s_force_%i"", this->GetCurrentBinaryDirectory(),
          target.GetName().c_str(), count);
  const char* comment = origCommand.GetComment();
  if(!comment && origCommand.GetOutputs().empty())
    {
    comment = ""<hack>"";
    }

  // Add the rule with the given dependencies and commands.
  std::string no_main_dependency = """";
  if(cmSourceFile* outsf =
     this->Makefile->AddCustomCommandToOutput(
       output, depends, no_main_dependency,
       origCommand.GetCommandLines(), comment,
       origCommand.GetWorkingDirectory().c_str()))
    {
    cmGeneratorTarget* gt = this->GlobalGenerator->GetGeneratorTarget(&target);
    gt->AddSource(outsf->GetFullPath());
    }

  // Replace the dependencies with the output of this rule so that the
  // next rule added will run after this one.
  depends.clear();
  depends.push_back(output);

  // Free the fake output name.
  delete [] output;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_427.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 75, 0, 0, 4, 5, 0, 0, 5, 4, 0, 0, 0, 0, 4, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 2, 2, 0, 0, 20, 0, 0, 6, 0, 15, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_427.cpp,9,"[""char *"", ""string"", ""this -> GetCurrentBinaryDirectory_ret"", ""target . GetName ( ) . c_str_ret"", ""int""]",[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_237.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_237.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_237.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_553.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_553.cpp,230,233,233,236,,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Current client reader does not support seeking a device"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_428.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_428.cpp,return (ARCHIVE_FAILED);,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_428.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_428.cpp,9,[],"[""member"", ""null"", ""==""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_237.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_237.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_237.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_555.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_555.cpp,843,850,845,852,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Encountered out-of-order sparse blocks"");","archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Encountered out-of-order sparse blocks"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_430.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Encountered out-of-order sparse blocks"");
			return (ARCHIVE_RETRY);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_430.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_430.cpp,33,"[""member"", ""macro"", ""string""]","[""member"", ""member"", ""<""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_237.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_237.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_237.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_556.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_556.cpp,953,975,953,975,"archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Internal error: ""
		    ""No format_read_data_block function registered"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Internal error: ""
		    ""No format->read_data function registered"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_431.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_431.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Internal error: ""
		    ""No format_read_data_block function registered"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_431.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_431.cpp,9,[],"[""member"", ""null"", ""==""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_238.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_238.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_560.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_560.cpp,311,318,312,319,"archive_set_error(&a->archive, EINVAL,
			    ""Can't find long filename for entry"");","archive_set_error(&a->archive, EINVAL,
			    ""Can't find long filename for GNU/SVR4 archive entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_432.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_432.cpp,"{
			archive_set_error(&a->archive, EINVAL,
			    ""Can't find long filename for entry"");
			archive_entry_copy_pathname(entry, filename);
			/* Parse the time, owner, mode, size fields. */
			ar_parse_common_header(ar, entry, h);
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_432.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_432.cpp,145,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""=="", ""ar_atol10_ret"", ""member"", "">"", ""||""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_239.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_239.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_239.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_563.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_563.cpp,1793,1801,1797,1807,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Directory structure contains loop"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_434.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_434.cpp,"(file == NULL) {
		archive_set_error(&a->archive, ENOMEM,
		    ""No memory for file entry"");
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_434.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_434.cpp,56,[],"[""toi_ret"", ""null"", ""!="", ""archive_le32dec_ret"", ""null"", ""<"", ""&&"", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_240.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_240.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_240.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_565.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_565.cpp,1390,1374,1395,-1,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""LHa data CRC error"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_436.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_436.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""LHa data CRC error"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_436.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_436.cpp,16,"[""member"", ""macro"", ""string""]","[""bool"", ""member"", ""member"", ""!="", ""&&""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_240.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_240.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_240.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_566.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_566.cpp,1477,1449,1485,-1,"archive_set_error(&a->archive, ENOMEM,
			    ""No memory for lzh decompression"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_437.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_437.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""No memory for lzh decompression"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_437.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_437.cpp,14,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_241.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_241.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_241.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_568.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_568.cpp,1175,1177,1218,1219,"archive_set_error(&a->archive,
									ARCHIVE_ERRNO_MISC,
									""mtree specification has different type for %s"",
									archive_entry_pathname(entry));","archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""mtree specification has different""
					    "" type for %s"",
					    archive_entry_pathname(entry));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_438.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_438.cpp,"{
							archive_set_error(&a->archive,
									ARCHIVE_ERRNO_MISC,
									""mtree specification has different type for %s"",
									archive_entry_pathname(entry));
							r = ARCHIVE_WARN;
						}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_438.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_438.cpp,147,"[""member"", ""macro"", ""string"", ""archive_entry_pathname_ret""]","[""parse_line_ret"", ""macro"", ""==""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_241.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_241.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_241.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_570.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_570.cpp,1583,1589,1608,1619,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Unrecognized file type \""%s\""; assuming \""file\"""", val);","archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Unrecognized file type \""%s\""; ""
				    ""assuming \""file\"""", val);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_439.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_439.cpp,"{
			case 'b':
				if (strcmp(val, ""block"") == 0) {
					archive_entry_set_filetype(entry, AE_IFBLK);
					break;
				}
			case 'c':
				if (strcmp(val, ""char"") == 0) {
					archive_entry_set_filetype(entry, AE_IFCHR);
					break;
				}
			case 'd':
				if (strcmp(val, ""dir"") == 0) {
					archive_entry_set_filetype(entry, AE_IFDIR);
					break;
				}
			case 'f':
				if (strcmp(val, ""fifo"") == 0) {
					archive_entry_set_filetype(entry, AE_IFIFO);
					break;
				}
				if (strcmp(val, ""file"") == 0) {
					archive_entry_set_filetype(entry, AE_IFREG);
					break;
				}
			case 'l':
				if (strcmp(val, ""link"") == 0) {
					archive_entry_set_filetype(entry, AE_IFLNK);
					break;
				}
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Unrecognized file type \""%s\""; assuming \""file\"""", val);
				archive_entry_set_filetype(entry, AE_IFREG);
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_439.cpp,"[6, 0, 0, 0, 6, 0, 1, 0, 5, 1, 7, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 14, 0, 0, 8, 0, 30, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_439.cpp,206,"[""member"", ""macro"", ""string"", ""strchr_ret""]","[""member""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_573.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_573.cpp,248,418,258,428,"fprintf(stderr, ""Header id 0x%x, length %d\n"",
		    headerid, datasize);","fprintf(stderr, ""Header id 0x%04x, length %d\n"",
		    headerid, datasize);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_440.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_440.cpp,"{
		unsigned short headerid = archive_le16dec(p + offset);
		unsigned short datasize = archive_le16dec(p + offset + 2);
		offset += 4;
		if (offset + datasize > extra_length)
			break;
#ifdef DEBUG
		fprintf(stderr, ""Header id 0x%x, length %d\n"",
		    headerid, datasize);
#endif
		switch (headerid) {
		case 0x0001:
			/* Zip64 extended information extra field. */
			zip_entry->flags |= LA_USED_ZIP64;
			if (zip_entry->uncompressed_size == 0xffffffff) {
				if (datasize < 8)
					break;
				zip_entry->uncompressed_size =
				    archive_le64dec(p + offset);
				offset += 8;
				datasize -= 8;
			}
			if (zip_entry->compressed_size == 0xffffffff) {
				if (datasize < 8)
					break;
				zip_entry->compressed_size =
				    archive_le64dec(p + offset);
				offset += 8;
				datasize -= 8;
			}
			if (zip_entry->local_header_offset == 0xffffffff) {
				if (datasize < 8)
					break;
				zip_entry->local_header_offset =
				    archive_le64dec(p + offset);
				offset += 8;
				datasize -= 8;
			}
			/* archive_le32dec(p + offset) gives disk
			 * on which file starts, but we don't handle
			 * multi-volume Zip files. */
			break;
		case 0x5455:
		{
			/* Extended time field ""UT"". */
			int flags = p[offset];
			offset++;
			datasize--;
			/* Flag bits indicate which dates are present. */
			if (flags & 0x01)
			{
#ifdef DEBUG
				fprintf(stderr, ""mtime: %lld -> %d\n"",
				    (long long)zip_entry->mtime,
				    archive_le32dec(p + offset));
#endif
				if (datasize < 4)
					break;
				zip_entry->mtime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			if (flags & 0x02)
			{
				if (datasize < 4)
					break;
				zip_entry->atime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			if (flags & 0x04)
			{
				if (datasize < 4)
					break;
				zip_entry->ctime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			break;
		}
		case 0x5855:
		{
			/* Info-ZIP Unix Extra Field (old version) ""UX"". */
			if (datasize >= 8) {
				zip_entry->atime = archive_le32dec(p + offset);
				zip_entry->mtime =
				    archive_le32dec(p + offset + 4);
			}
			if (datasize >= 12) {
				zip_entry->uid =
				    archive_le16dec(p + offset + 8);
				zip_entry->gid =
				    archive_le16dec(p + offset + 10);
			}
			break;
		}
		case 0x6c65:
		{
			/* Experimental 'el' field */
			/*
			 * Introduced Dec 2013 to provide a way to
			 * include external file attributes in local file
			 * header.  This provides file type and permission
			 * information necessary to support full streaming
			 * extraction.  Currently being discussed with
			 * other Zip developers... subject to change.
			 */
			int bitmap, bitmap_last;

			if (datasize < 1)
				break;
			bitmap_last = bitmap = 0xff & p[offset];
			offset += 1;
			datasize -= 1;

			/* We only support first 7 bits of bitmap; skip rest. */
			while ((bitmap_last & 0x80) != 0
			    && datasize >= 1) {
				bitmap_last = p[offset];
				offset += 1;
				datasize -= 1;
			}

			if (bitmap & 1) {
				// 2 byte ""version made by""
				if (datasize < 2)
					break;
				zip_entry->system
				    = archive_le16dec(p + offset) >> 8;
				offset += 2;
				datasize -= 2;
			}
			if (bitmap & 2) {
				// 2 byte ""internal file attributes""
				uint32_t internal_attributes;
				if (datasize < 2)
					break;
				internal_attributes
				    = archive_le16dec(p + offset);
				// Not used by libarchive at present.
				(void)internal_attributes; /* UNUSED */
				offset += 2;
				datasize -= 2;
			}
			if (bitmap & 4) {
				// 4 byte ""external file attributes""
				uint32_t external_attributes;
				if (datasize < 4)
					break;
				external_attributes
				    = archive_le32dec(p + offset);
				if (zip_entry->system == 3) {
					zip_entry->mode
					    = external_attributes >> 16;
				}
				offset += 4;
				datasize -= 4;
			}
			if (bitmap & 8) {
				// 2 byte comment length + comment
				uint32_t comment_length;
				if (datasize < 2)
					break;
				comment_length
				    = archive_le16dec(p + offset);
				offset += 2;
				datasize -= 2;

				if (datasize < comment_length)
					break;
				// Comment is not supported by libarchive
				offset += comment_length;
				datasize -= comment_length;
			}
			break;
		}
		case 0x7855:
			/* Info-ZIP Unix Extra Field (type 2) ""Ux"". */
#ifdef DEBUG
			fprintf(stderr, ""uid %d gid %d\n"",
			    archive_le16dec(p + offset),
			    archive_le16dec(p + offset + 2));
#endif
			if (datasize >= 2)
				zip_entry->uid = archive_le16dec(p + offset);
			if (datasize >= 4)
				zip_entry->gid =
				    archive_le16dec(p + offset + 2);
			break;
		case 0x7875:
		{
			/* Info-Zip Unix Extra Field (type 3) ""ux"". */
			int uidsize = 0, gidsize = 0;

			/* TODO: support arbitrary uidsize/gidsize. */
			if (datasize >= 1 && p[offset] == 1) {/* version=1 */
				if (datasize >= 4) {
					/* get a uid size. */
					uidsize = p[offset+1];
					if (uidsize == 2)
						zip_entry->uid =
						    archive_le16dec(
						        p + offset + 2);
					else if (uidsize == 4 && datasize >= 6)
						zip_entry->uid =
						    archive_le32dec(
						        p + offset + 2);
				}
				if (datasize >= (2 + uidsize + 3)) {
					/* get a gid size. */
					gidsize = p[offset+2+uidsize];
					if (gidsize == 2)
						zip_entry->gid =
						    archive_le16dec(
						        p+offset+2+uidsize+1);
					else if (gidsize == 4 &&
					    datasize >= (2 + uidsize + 5))
						zip_entry->gid =
						    archive_le32dec(
						        p+offset+2+uidsize+1);
				}
			}
			break;
		}
		default:
			break;
		}
		offset += datasize;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_440.cpp,"[35, 1, 0, 0, 20, 0, 0, 1, 6, 1, 42, 0, 0, 0, 0, 287, 0, 0, 8, 10, 0, 0, 5, 94, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 0, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 6, 0, 37, 35, 0, 0, 28, 0, 0, 60, 2, 37, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_440.cpp,13,"[""unkown"", ""string"", ""unsigned short"", ""unsigned short""]","[""int"", ""size_t"", "">"", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_575.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_575.cpp,687,910,691,915,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Zip file with oversized link entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_441.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_441.cpp,"{
		size_t linkname_length = zip_entry->compressed_size;

		archive_entry_set_size(entry, 0);
		p = __archive_read_ahead(a, linkname_length, NULL);
		if (p == NULL) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated Zip file"");
			return ARCHIVE_FATAL;
		}
		if (__archive_read_consume(a, linkname_length) < 0) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");
			return ARCHIVE_FATAL;
		}

		sconv = zip->sconv;
		if (sconv == NULL && (zip->entry->zip_flags & ZIP_UTF8_NAME))
			sconv = zip->sconv_utf8;
		if (sconv == NULL)
			sconv = zip->sconv_default;
		if (archive_entry_copy_symlink_l(entry, p, linkname_length,
		    sconv) != 0) {
			if (errno != ENOMEM && sconv == zip->sconv_utf8 &&
			    (zip->entry->zip_flags & ZIP_UTF8_NAME))
			    archive_entry_copy_symlink_l(entry, p,
				linkname_length, NULL);
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Symlink"");
				return (ARCHIVE_FATAL);
			}
			/*
			 * Since there is no character-set regulation for
			 * symlink name, do not report the conversion error
			 * in an automatic conversion.
			 */
			if (sconv != zip->sconv_utf8 ||
			    (zip->entry->zip_flags & ZIP_UTF8_NAME) == 0) {
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symlink cannot be converted ""
				    ""from %s to current locale."",
				    archive_string_conversion_charset_name(
					sconv));
				ret = ARCHIVE_WARN;
			}
		}
		zip_entry->uncompressed_size = zip_entry->compressed_size = 0;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_441.cpp,"[8, 0, 0, 0, 0, 0, 3, 0, 0, 0, 9, 0, 0, 0, 0, 103, 0, 0, 1, 1, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 8, 0, 0, 10, 0, 0, 12, 0, 29, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_441.cpp,199,"[""struct archive_entry *"", ""null""]","[""bool"", ""macro"", ""==""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_576.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_576.cpp,696,927,699,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_442.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_442.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");
			return ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_442.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_442.cpp,207,"[""member"", ""macro"", ""string""]","[""__archive_read_consume_ret"", ""null"", ""<""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_577.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_577.cpp,735,961,737,965,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_443.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_443.cpp,"(0 == (zip_entry->zip_flags & ZIP_LENGTH_AT_END)
	    || zip_entry->uncompressed_size > 0) {
		/* Set the size only if it's meaningful. */
		archive_entry_set_size(entry, zip_entry->uncompressed_size);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_443.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_443.cpp,245,[],"[""bool"", ""macro"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_578.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_578.cpp,748,980,750,982,"snprintf(zip->format_name, sizeof(zip->format_name), ""ZIP %d.%d (%s)"",
	    version / 10, version % 10,
	    compression_name(zip->entry->compression));","archive_string_sprintf(&zip->format_name, ""ZIP %d.%d (%s)"",
	    version / 10, version % 10,
	    compression_name(zip->entry->compression));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_444.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_444.cpp,"{
	const char *p;
	const void *h;
	const wchar_t *wp;
	const char *cp;
	size_t len, filename_length, extra_length;
	struct archive_string_conv *sconv;
	struct zip_entry *zip_entry = zip->entry;
	struct zip_entry zip_entry_central_dir;
	int ret = ARCHIVE_OK;
	char version;

	/* Save a copy of the original for consistency checks. */
	zip_entry_central_dir = *zip_entry;

	zip->decompress_init = 0;
	zip->end_of_entry = 0;
	zip->entry_uncompressed_bytes_read = 0;
	zip->entry_compressed_bytes_read = 0;
	zip->entry_crc32 = zip->crc32func(0, NULL, 0);

	/* Setup default conversion. */
	if (zip->sconv == NULL && !zip->init_default_conversion) {
		zip->sconv_default =
		    archive_string_default_conversion_for_read(&(a->archive));
		zip->init_default_conversion = 1;
	}

	if ((p = __archive_read_ahead(a, 30, NULL)) == NULL) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}

	if (memcmp(p, ""PK\003\004"", 4) != 0) {
		archive_set_error(&a->archive, -1, ""Damaged Zip archive"");
		return ARCHIVE_FATAL;
	}
	version = p[4];
	zip_entry->system = p[5];
	zip_entry->zip_flags = archive_le16dec(p + 6);
	if (zip_entry->zip_flags & (ZIP_ENCRYPTED | ZIP_STRONG_ENCRYPTED)) {
		zip->has_encrypted_entries = 1;
		archive_entry_set_is_data_encrypted(entry, 1);
		if (zip_entry->zip_flags & ZIP_CENTRAL_DIRECTORY_ENCRYPTED &&
			zip_entry->zip_flags & ZIP_ENCRYPTED &&
			zip_entry->zip_flags & ZIP_STRONG_ENCRYPTED) {
			archive_entry_set_is_metadata_encrypted(entry, 1);
			return ARCHIVE_FATAL;
		}
	}
	zip_entry->compression = (char)archive_le16dec(p + 8);
	zip_entry->mtime = zip_time(p + 10);
	zip_entry->crc32 = archive_le32dec(p + 14);
	zip_entry->compressed_size = archive_le32dec(p + 18);
	zip_entry->uncompressed_size = archive_le32dec(p + 22);
	filename_length = archive_le16dec(p + 26);
	extra_length = archive_le16dec(p + 28);

	__archive_read_consume(a, 30);

	/* Read the filename. */
	if ((h = __archive_read_ahead(a, filename_length, NULL)) == NULL) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}
	if (zip_entry->zip_flags & ZIP_UTF8_NAME) {
		/* The filename is stored to be UTF-8. */
		if (zip->sconv_utf8 == NULL) {
			zip->sconv_utf8 =
			    archive_string_conversion_from_charset(
				&a->archive, ""UTF-8"", 1);
			if (zip->sconv_utf8 == NULL)
				return (ARCHIVE_FATAL);
		}
		sconv = zip->sconv_utf8;
	} else if (zip->sconv != NULL)
		sconv = zip->sconv;
	else
		sconv = zip->sconv_default;

	if (archive_entry_copy_pathname_l(entry,
	    h, filename_length, sconv) != 0) {
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
	}
	__archive_read_consume(a, filename_length);

	/* Work around a bug in Info-Zip: When reading from a pipe, it
	 * stats the pipe instead of synthesizing a file entry. */
	if ((zip_entry->mode & AE_IFMT) == AE_IFIFO) {
		zip_entry->mode &= ~ AE_IFMT;
		zip_entry->mode |= AE_IFREG;
	}

	if ((zip_entry->mode & AE_IFMT) == 0) {
		/* Especially in streaming mode, we can end up
		   here without having seen proper mode information.
		   Guess from the filename. */
		wp = archive_entry_pathname_w(entry);
		if (wp != NULL) {
			len = wcslen(wp);
			if (len > 0 && wp[len - 1] == L'/')
				zip_entry->mode |= AE_IFDIR;
			else
				zip_entry->mode |= AE_IFREG;
		} else {
			cp = archive_entry_pathname(entry);
			len = (cp != NULL)?strlen(cp):0;
			if (len > 0 && cp[len - 1] == '/')
				zip_entry->mode |= AE_IFDIR;
			else
				zip_entry->mode |= AE_IFREG;
		}
		if (zip_entry->mode == AE_IFDIR) {
			zip_entry->mode |= 0775;
		} else if (zip_entry->mode == AE_IFREG) {
			zip_entry->mode |= 0664;
		}
	}

	/* Read the extra data. */
	if ((h = __archive_read_ahead(a, extra_length, NULL)) == NULL) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}

	process_extra(h, extra_length, zip_entry);
	__archive_read_consume(a, extra_length);

	if (zip_entry->flags & LA_FROM_CENTRAL_DIRECTORY) {
		/* If this came from the central dir, it's size info
		 * is definitive, so ignore the length-at-end flag. */
		zip_entry->zip_flags &= ~ZIP_LENGTH_AT_END;
		/* If local header is missing a value, use the one from
		   the central directory.  If both have it, warn about
		   mismatches. */
		if (zip_entry->crc32 == 0) {
			zip_entry->crc32 = zip_entry_central_dir.crc32;
		} else if (!zip->ignore_crc32
		    && zip_entry->crc32 != zip_entry_central_dir.crc32) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent CRC32 values"");
			ret = ARCHIVE_WARN;
		}
		if (zip_entry->compressed_size == 0) {
			zip_entry->compressed_size
			    = zip_entry_central_dir.compressed_size;
		} else if (zip_entry->compressed_size
		    != zip_entry_central_dir.compressed_size) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent compressed size: ""
			    ""%jd in central directory, %jd in local header"",
			    (intmax_t)zip_entry_central_dir.compressed_size,
			    (intmax_t)zip_entry->compressed_size);
			ret = ARCHIVE_WARN;
		}
		if (zip_entry->uncompressed_size == 0) {
			zip_entry->uncompressed_size
			    = zip_entry_central_dir.uncompressed_size;
		} else if (zip_entry->uncompressed_size
		    != zip_entry_central_dir.uncompressed_size) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent uncompressed size: ""
			    ""%jd in central directory, %jd in local header"",
			    (intmax_t)zip_entry_central_dir.uncompressed_size,
			    (intmax_t)zip_entry->uncompressed_size);
			ret = ARCHIVE_WARN;
		}
	}

	/* Populate some additional entry fields: */
	archive_entry_set_mode(entry, zip_entry->mode);
	archive_entry_set_uid(entry, zip_entry->uid);
	archive_entry_set_gid(entry, zip_entry->gid);
	archive_entry_set_mtime(entry, zip_entry->mtime, 0);
	archive_entry_set_ctime(entry, zip_entry->ctime, 0);
	archive_entry_set_atime(entry, zip_entry->atime, 0);

	if ((zip->entry->mode & AE_IFMT) == AE_IFLNK) {
		size_t linkname_length = zip_entry->compressed_size;

		archive_entry_set_size(entry, 0);
		p = __archive_read_ahead(a, linkname_length, NULL);
		if (p == NULL) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated Zip file"");
			return ARCHIVE_FATAL;
		}
		if (__archive_read_consume(a, linkname_length) < 0) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");
			return ARCHIVE_FATAL;
		}

		sconv = zip->sconv;
		if (sconv == NULL && (zip->entry->zip_flags & ZIP_UTF8_NAME))
			sconv = zip->sconv_utf8;
		if (sconv == NULL)
			sconv = zip->sconv_default;
		if (archive_entry_copy_symlink_l(entry, p, linkname_length,
		    sconv) != 0) {
			if (errno != ENOMEM && sconv == zip->sconv_utf8 &&
			    (zip->entry->zip_flags & ZIP_UTF8_NAME))
			    archive_entry_copy_symlink_l(entry, p,
				linkname_length, NULL);
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Symlink"");
				return (ARCHIVE_FATAL);
			}
			/*
			 * Since there is no character-set regulation for
			 * symlink name, do not report the conversion error
			 * in an automatic conversion.
			 */
			if (sconv != zip->sconv_utf8 ||
			    (zip->entry->zip_flags & ZIP_UTF8_NAME) == 0) {
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symlink cannot be converted ""
				    ""from %s to current locale."",
				    archive_string_conversion_charset_name(
					sconv));
				ret = ARCHIVE_WARN;
			}
		}
		zip_entry->uncompressed_size = zip_entry->compressed_size = 0;
	} else if (0 == (zip_entry->zip_flags & ZIP_LENGTH_AT_END)
	    || zip_entry->uncompressed_size > 0) {
		/* Set the size only if it's meaningful. */
		archive_entry_set_size(entry, zip_entry->uncompressed_size);
	}
	zip->entry_bytes_remaining = zip_entry->compressed_size;

	/* If there's no body, force read_data() to return EOF immediately. */
	if (0 == (zip_entry->zip_flags & ZIP_LENGTH_AT_END)
	    && zip->entry_bytes_remaining < 1)
		zip->end_of_entry = 1;

	/* Set up a more descriptive format name. */
	snprintf(zip->format_name, sizeof(zip->format_name), ""ZIP %d.%d (%s)"",
	    version / 10, version % 10,
	    compression_name(zip->entry->compression));
	a->archive.archive_format_name = zip->format_name;

	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_444.cpp,"[38, 0, 0, 0, 0, 0, 11, 0, 0, 0, 43, 0, 0, 0, 4, 605, 0, 0, 11, 13, 0, 0, 3, 75, 0, 0, 0, 0, 6, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 326, 1, 275, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 0, 39, 39, 5, 0, 56, 0, 0, 81, 6, 135, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_444.cpp,258,"[""member"", ""member"", ""constant"", ""member"", ""member"", ""compression_name_ret""]","[""bool"", ""macro"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_579.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_579.cpp,1015,1389,1015,1575,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Corrupted ZIP file data"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_453.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_453.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_453.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_453.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_579.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_579.cpp,1015,1389,1015,1579,,"archive_set_error(&a->archive, ENOMEM,
	    ""No memory for ZIP decryption"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_454.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_454.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_454.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_454.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_579.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_579.cpp,1015,1389,1015,1594,,"archive_set_error(&a->archive, ENOMEM,
			    ""No memory for ZIP decryption"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_455.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_455.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_455.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_455.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_579.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_579.cpp,1015,1389,1015,1727,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Too many incorrect passphrases"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_462.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_462.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_462.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_462.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_579.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_579.cpp,1015,1389,1015,1735,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Decryption is unsupported due to lack of crypto library"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_463.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_463.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_463.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_463.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_579.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_579.cpp,1015,1389,1015,1742,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize HMAC-SHA1"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_464.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_464.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_464.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_464.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_580.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_580.cpp,1037,1790,1041,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Encrypted file is unsupported"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_467.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_467.cpp,"{
		zip->has_encrypted_entries = 1;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Encrypted file is unsupported"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_467.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_467.cpp,25,"[""member"", ""macro"", ""string""]","[""bool""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_add_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_244.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_244.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_244.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_585.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_585.cpp,221,223,238,254,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""Unacceptable dictionary dize for lzip: %d"",
			    dict_size);","archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""Unacceptable dictionary size for lzip: %d"",
			    dict_size);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_468.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_468.cpp,"{
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""Unacceptable dictionary dize for lzip: %d"",
			    dict_size);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_468.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_468.cpp,21,"[""member"", ""macro"", ""string"", ""int""]","[""int"", ""int"", ""<"", ""int"", ""int"", "">"", ""||""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_245.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_245.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_245.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_586.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_586.cpp,1467,1468,1468,1469,"archive_set_error(&a->archive, 0,
		    ""Write request too large"");","archive_set_error(&a->archive, 0,
		    ""Too much data: Truncating file at %ju bytes"", (uintmax_t)a->filesize);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_469.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_469.cpp,"{
		archive_set_error(&a->archive, 0,
		    ""Write request too large"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_469.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_469.cpp,18,"[""member"", ""null"", ""string""]","[""write_data_block_ret"", ""size_t"", ""<""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_245.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_245.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_245.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_587.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_587.cpp,1869,1876,1871,1879,,"archive_set_error(&a->archive, en,
		    ""Hard-link target '%s' does not exist."",
		    archive_entry_hardlink(a->entry));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_470.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_470.cpp,"((en == EISDIR || en == EEXIST)
	    && (a->flags & ARCHIVE_EXTRACT_NO_OVERWRITE)) {
		/* If we're not overwriting, we're done. */
		archive_entry_unset_size(a->entry);
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_470.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_470.cpp,41,[],"[""bool"", ""S_ISDIR_ret"", ""&&"", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_245.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_245.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_245.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_590.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_590.cpp,2525,2544,2527,2548,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			                  ""Path is absolute"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_471.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_471.cpp,"(*src == '/')
		separator = *src++",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_471.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_471.cpp,17,[],"[""member"", ""char"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_595.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_595.cpp,227,274,229,290,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""deflate compression not supported"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_473.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_473.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_473.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_473.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_595.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_595.cpp,227,274,229,305,,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_474.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_474.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_474.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_474.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_595.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_595.cpp,227,274,229,315,,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_475.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_475.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_475.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_475.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_595.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_595.cpp,227,274,229,325,,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_476.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_476.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_476.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_476.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_595.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_595.cpp,227,274,229,330,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: unknown encryption '%s'"",
			    a->format_name, val);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_477.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_477.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_477.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_477.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_598.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_598.cpp,782,1010,784,1056,,"archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Failed to encrypt file"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_478.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_478.cpp,"(zip->entry_compression) {
	case COMPRESSION_STORE:
		ret = __archive_write_output(a, buff, s);
		if (ret != ARCHIVE_OK)
			return (ret);
		zip->written_bytes += s;
		zip->entry_compressed_written += s;
		break;
#if HAVE_ZLIB_H
	case COMPRESSION_DEFLATE:
		zip->stream.next_in = (unsigned char*)(uintptr_t)buff;
		zip->stream.avail_in = (uInt)s;
		do {
			ret = deflate(&zip->stream, Z_NO_FLUSH);
			if (ret == Z_STREAM_ERROR)
				return (ARCHIVE_FATAL);
			if (zip->stream.avail_out == 0) {
				ret = __archive_write_output(a, zip->buf,
					zip->len_buf);
				if (ret != ARCHIVE_OK)
					return (ret);
				zip->entry_compressed_written += zip->len_buf;
				zip->written_bytes += zip->len_buf;
				zip->stream.next_out = zip->buf;
				zip->stream.avail_out = (uInt)zip->len_buf;
			}
		} while (zip->stream.avail_in != 0);
		break;
#endif

	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid ZIP compression type"");
		return ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_478.cpp,"[5, 0, 0, 1, 2, 0, 4, 0, 2, 1, 6, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 0, 0, 4, 0, 0, 11, 0, 11, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_478.cpp,12,[],"[""size_t"", ""null"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_599.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_599.cpp,799,1086,800,1099,,"archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Failed to encrypt file"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_479.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_479.cpp,"(zip->stream.avail_out == 0) {
				ret = __archive_write_output(a, zip->buf,
					zip->len_buf);
				if (ret != ARCHIVE_OK)
					return (ret);
				zip->entry_compressed_written += zip->len_buf;
				zip->written_bytes += zip->len_buf;
				zip->stream.next_out = zip->buf;
				zip->stream.avail_out = (uInt)zip->len_buf;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_479.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_479.cpp,28,[],"[""deflate_ret"", ""macro"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_600.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_600.cpp,834,1142,840,1158,,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Failed to encrypt file"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_480.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_480.cpp,"{
			size_t remainder;
			ret = deflate(&zip->stream, Z_FINISH);
			if (ret == Z_STREAM_ERROR)
				return (ARCHIVE_FATAL);
			remainder = zip->len_buf - zip->stream.avail_out;
			ret = __archive_write_output(a, zip->buf, remainder);
			if (ret != ARCHIVE_OK)
				return (ret);
			zip->entry_compressed_written += remainder;
			zip->written_bytes += remainder;
			zip->stream.next_out = zip->buf;
			if (zip->stream.avail_out != 0)
				break;
			zip->stream.avail_out = (uInt)zip->len_buf;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_480.cpp,"[3, 0, 0, 0, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 56, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 7, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_480.cpp,14,"[""struct archive_write *"", ""member"", ""member""]","[""deflate_ret"", ""macro"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_602.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_602.cpp,1124,1482,1124,1559,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Encryption needs passphrase"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_481.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_481.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_481.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_481.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_602.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_602.cpp,1124,1482,1124,1564,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't generate random number for encryption"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_482.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_482.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_482.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_482.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_602.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_602.cpp,1124,1482,1124,1595,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Encryption needs passphrase"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_483.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_483.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_483.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_483.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_602.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_602.cpp,1124,1482,1124,1608,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't generate random number for encryption"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_484.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_484.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_484.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_484.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_602.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_602.cpp,1124,1482,1124,1617,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Decryption is unsupported due to lack of crypto library"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_485.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_485.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_485.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_485.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_602.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_602.cpp,1124,1482,1124,1625,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize HMAC-SHA1"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_486.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_486.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_486.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_486.cpp,0,[],[]
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_248.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_248.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_248.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_603.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_603.cpp,230,233,233,236,,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Current client reader does not support seeking a device"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_487.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_487.cpp,return (ARCHIVE_FAILED);,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_487.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_487.cpp,9,[],"[""member"", ""null"", ""==""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_248.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_248.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_248.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_604.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_604.cpp,596,602,599,604,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Input requires too many filters for decoding"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_488.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_488.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_488.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_488.cpp,0,[],[]
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_248.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_248.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_248.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_605.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_605.cpp,843,850,845,852,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Encountered out-of-order sparse blocks"");","archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Encountered out-of-order sparse blocks"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_489.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_489.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Encountered out-of-order sparse blocks"");
			return (ARCHIVE_RETRY);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_489.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_489.cpp,33,"[""member"", ""macro"", ""string""]","[""member"", ""member"", ""<""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_248.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_248.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_248.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_606.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_606.cpp,953,975,953,975,"archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Internal error: ""
		    ""No format_read_data_block function registered"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Internal error: ""
		    ""No format->read_data function registered"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_490.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_490.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Internal error: ""
		    ""No format_read_data_block function registered"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_490.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_490.cpp,9,[],"[""member"", ""null"", ""==""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_ar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_249.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_249.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_249.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_610.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_610.cpp,311,318,312,319,"archive_set_error(&a->archive, EINVAL,
			    ""Can't find long filename for entry"");","archive_set_error(&a->archive, EINVAL,
			    ""Can't find long filename for GNU/SVR4 archive entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_491.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_491.cpp,"{
			archive_set_error(&a->archive, EINVAL,
			    ""Can't find long filename for entry"");
			archive_entry_copy_pathname(entry, filename);
			/* Parse the time, owner, mode, size fields. */
			ar_parse_common_header(ar, entry, h);
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_491.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_491.cpp,145,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""=="", ""ar_atol10_ret"", ""member"", "">"", ""||""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_iso9660.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_250.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_250.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_250.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_613.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_613.cpp,1793,1801,1797,1807,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Directory structure contains loop"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_493.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_493.cpp,"(file == NULL) {
		archive_set_error(&a->archive, ENOMEM,
		    ""No memory for file entry"");
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_493.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_493.cpp,56,[],"[""toi_ret"", ""null"", ""!="", ""archive_le32dec_ret"", ""null"", ""<"", ""&&"", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_lha.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_251.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_251.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_251.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_615.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_615.cpp,1390,1374,1395,-1,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""LHa data CRC error"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_495.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_495.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""LHa data CRC error"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_495.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_495.cpp,16,"[""member"", ""macro"", ""string""]","[""bool"", ""member"", ""member"", ""!="", ""&&""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_lha.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_251.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_251.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_251.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_616.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_616.cpp,1477,1449,1485,-1,"archive_set_error(&a->archive, ENOMEM,
			    ""No memory for lzh decompression"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_496.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_496.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""No memory for lzh decompression"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_496.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_496.cpp,14,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_252.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_252.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_252.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_618.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_618.cpp,1175,1177,1218,1219,"archive_set_error(&a->archive,
									ARCHIVE_ERRNO_MISC,
									""mtree specification has different type for %s"",
									archive_entry_pathname(entry));","archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""mtree specification has different""
					    "" type for %s"",
					    archive_entry_pathname(entry));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_497.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_497.cpp,"{
							archive_set_error(&a->archive,
									ARCHIVE_ERRNO_MISC,
									""mtree specification has different type for %s"",
									archive_entry_pathname(entry));
							r = ARCHIVE_WARN;
						}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_497.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_497.cpp,147,"[""member"", ""macro"", ""string"", ""archive_entry_pathname_ret""]","[""parse_line_ret"", ""macro"", ""==""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_252.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_252.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_252.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_620.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_620.cpp,1583,1589,1608,1619,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Unrecognized file type \""%s\""; assuming \""file\"""", val);","archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Unrecognized file type \""%s\""; ""
				    ""assuming \""file\"""", val);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_498.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_498.cpp,"{
			case 'b':
				if (strcmp(val, ""block"") == 0) {
					archive_entry_set_filetype(entry, AE_IFBLK);
					break;
				}
			case 'c':
				if (strcmp(val, ""char"") == 0) {
					archive_entry_set_filetype(entry, AE_IFCHR);
					break;
				}
			case 'd':
				if (strcmp(val, ""dir"") == 0) {
					archive_entry_set_filetype(entry, AE_IFDIR);
					break;
				}
			case 'f':
				if (strcmp(val, ""fifo"") == 0) {
					archive_entry_set_filetype(entry, AE_IFIFO);
					break;
				}
				if (strcmp(val, ""file"") == 0) {
					archive_entry_set_filetype(entry, AE_IFREG);
					break;
				}
			case 'l':
				if (strcmp(val, ""link"") == 0) {
					archive_entry_set_filetype(entry, AE_IFLNK);
					break;
				}
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Unrecognized file type \""%s\""; assuming \""file\"""", val);
				archive_entry_set_filetype(entry, AE_IFREG);
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_498.cpp,"[6, 0, 0, 0, 6, 0, 1, 0, 5, 1, 7, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 14, 0, 0, 8, 0, 30, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_498.cpp,206,"[""member"", ""macro"", ""string"", ""strchr_ret""]","[""member""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_623.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_623.cpp,244,414,254,424,"fprintf(stderr, ""Header id 0x%x, length %d\n"",
		    headerid, datasize);","fprintf(stderr, ""Header id 0x%04x, length %d\n"",
		    headerid, datasize);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_499.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_499.cpp,"{
		unsigned short headerid = archive_le16dec(p + offset);
		unsigned short datasize = archive_le16dec(p + offset + 2);
		offset += 4;
		if (offset + datasize > extra_length)
			break;
#ifdef DEBUG
		fprintf(stderr, ""Header id 0x%x, length %d\n"",
		    headerid, datasize);
#endif
		switch (headerid) {
		case 0x0001:
			/* Zip64 extended information extra field. */
			zip_entry->flags |= LA_USED_ZIP64;
			if (zip_entry->uncompressed_size == 0xffffffff) {
				if (datasize < 8)
					break;
				zip_entry->uncompressed_size =
				    archive_le64dec(p + offset);
				offset += 8;
				datasize -= 8;
			}
			if (zip_entry->compressed_size == 0xffffffff) {
				if (datasize < 8)
					break;
				zip_entry->compressed_size =
				    archive_le64dec(p + offset);
				offset += 8;
				datasize -= 8;
			}
			if (zip_entry->local_header_offset == 0xffffffff) {
				if (datasize < 8)
					break;
				zip_entry->local_header_offset =
				    archive_le64dec(p + offset);
				offset += 8;
				datasize -= 8;
			}
			/* archive_le32dec(p + offset) gives disk
			 * on which file starts, but we don't handle
			 * multi-volume Zip files. */
			break;
		case 0x5455:
		{
			/* Extended time field ""UT"". */
			int flags = p[offset];
			offset++;
			datasize--;
			/* Flag bits indicate which dates are present. */
			if (flags & 0x01)
			{
#ifdef DEBUG
				fprintf(stderr, ""mtime: %lld -> %d\n"",
				    (long long)zip_entry->mtime,
				    archive_le32dec(p + offset));
#endif
				if (datasize < 4)
					break;
				zip_entry->mtime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			if (flags & 0x02)
			{
				if (datasize < 4)
					break;
				zip_entry->atime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			if (flags & 0x04)
			{
				if (datasize < 4)
					break;
				zip_entry->ctime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			break;
		}
		case 0x5855:
		{
			/* Info-ZIP Unix Extra Field (old version) ""UX"". */
			if (datasize >= 8) {
				zip_entry->atime = archive_le32dec(p + offset);
				zip_entry->mtime =
				    archive_le32dec(p + offset + 4);
			}
			if (datasize >= 12) {
				zip_entry->uid =
				    archive_le16dec(p + offset + 8);
				zip_entry->gid =
				    archive_le16dec(p + offset + 10);
			}
			break;
		}
		case 0x6c65:
		{
			/* Experimental 'el' field */
			/*
			 * Introduced Dec 2013 to provide a way to
			 * include external file attributes in local file
			 * header.  This provides file type and permission
			 * information necessary to support full streaming
			 * extraction.  Currently being discussed with
			 * other Zip developers... subject to change.
			 */
			int bitmap, bitmap_last;

			if (datasize < 1)
				break;
			bitmap_last = bitmap = 0xff & p[offset];
			offset += 1;
			datasize -= 1;

			/* We only support first 7 bits of bitmap; skip rest. */
			while ((bitmap_last & 0x80) != 0
			    && datasize >= 1) {
				bitmap_last = p[offset];
				offset += 1;
				datasize -= 1;
			}

			if (bitmap & 1) {
				// 2 byte ""version made by""
				if (datasize < 2)
					break;
				zip_entry->system
				    = archive_le16dec(p + offset) >> 8;
				offset += 2;
				datasize -= 2;
			}
			if (bitmap & 2) {
				// 2 byte ""internal file attributes""
				uint32_t internal_attributes;
				if (datasize < 2)
					break;
				internal_attributes
				    = archive_le16dec(p + offset);
				// Not used by libarchive at present.
				(void)internal_attributes; /* UNUSED */
				offset += 2;
				datasize -= 2;
			}
			if (bitmap & 4) {
				// 4 byte ""external file attributes""
				uint32_t external_attributes;
				if (datasize < 4)
					break;
				external_attributes
				    = archive_le32dec(p + offset);
				if (zip_entry->system == 3) {
					zip_entry->mode
					    = external_attributes >> 16;
				}
				offset += 4;
				datasize -= 4;
			}
			if (bitmap & 8) {
				// 2 byte comment length + comment
				uint32_t comment_length;
				if (datasize < 2)
					break;
				comment_length
				    = archive_le16dec(p + offset);
				offset += 2;
				datasize -= 2;

				if (datasize < comment_length)
					break;
				// Comment is not supported by libarchive
				offset += comment_length;
				datasize -= comment_length;
			}
			break;
		}
		case 0x7855:
			/* Info-ZIP Unix Extra Field (type 2) ""Ux"". */
#ifdef DEBUG
			fprintf(stderr, ""uid %d gid %d\n"",
			    archive_le16dec(p + offset),
			    archive_le16dec(p + offset + 2));
#endif
			if (datasize >= 2)
				zip_entry->uid = archive_le16dec(p + offset);
			if (datasize >= 4)
				zip_entry->gid =
				    archive_le16dec(p + offset + 2);
			break;
		case 0x7875:
		{
			/* Info-Zip Unix Extra Field (type 3) ""ux"". */
			int uidsize = 0, gidsize = 0;

			/* TODO: support arbitrary uidsize/gidsize. */
			if (datasize >= 1 && p[offset] == 1) {/* version=1 */
				if (datasize >= 4) {
					/* get a uid size. */
					uidsize = p[offset+1];
					if (uidsize == 2)
						zip_entry->uid =
						    archive_le16dec(
						        p + offset + 2);
					else if (uidsize == 4 && datasize >= 6)
						zip_entry->uid =
						    archive_le32dec(
						        p + offset + 2);
				}
				if (datasize >= (2 + uidsize + 3)) {
					/* get a gid size. */
					gidsize = p[offset+2+uidsize];
					if (gidsize == 2)
						zip_entry->gid =
						    archive_le16dec(
						        p+offset+2+uidsize+1);
					else if (gidsize == 4 &&
					    datasize >= (2 + uidsize + 5))
						zip_entry->gid =
						    archive_le32dec(
						        p+offset+2+uidsize+1);
				}
			}
			break;
		}
		default:
			break;
		}
		offset += datasize;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_499.cpp,"[35, 1, 0, 0, 20, 0, 0, 1, 6, 1, 42, 0, 0, 0, 0, 287, 0, 0, 8, 10, 0, 0, 5, 94, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 0, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 6, 0, 37, 35, 0, 0, 28, 0, 0, 60, 2, 37, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_499.cpp,13,"[""unkown"", ""string"", ""unsigned short"", ""unsigned short""]","[""int"", ""size_t"", "">"", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_625.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_625.cpp,683,906,687,911,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Zip file with oversized link entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_500.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_500.cpp,"{
		size_t linkname_length = zip_entry->compressed_size;

		archive_entry_set_size(entry, 0);
		p = __archive_read_ahead(a, linkname_length, NULL);
		if (p == NULL) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated Zip file"");
			return ARCHIVE_FATAL;
		}
		if (__archive_read_consume(a, linkname_length) < 0) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");
			return ARCHIVE_FATAL;
		}

		sconv = zip->sconv;
		if (sconv == NULL && (zip->entry->zip_flags & ZIP_UTF8_NAME))
			sconv = zip->sconv_utf8;
		if (sconv == NULL)
			sconv = zip->sconv_default;
		if (archive_entry_copy_symlink_l(entry, p, linkname_length,
		    sconv) != 0) {
			if (errno != ENOMEM && sconv == zip->sconv_utf8 &&
			    (zip->entry->zip_flags & ZIP_UTF8_NAME))
			    archive_entry_copy_symlink_l(entry, p,
				linkname_length, NULL);
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Symlink"");
				return (ARCHIVE_FATAL);
			}
			/*
			 * Since there is no character-set regulation for
			 * symlink name, do not report the conversion error
			 * in an automatic conversion.
			 */
			if (sconv != zip->sconv_utf8 ||
			    (zip->entry->zip_flags & ZIP_UTF8_NAME) == 0) {
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symlink cannot be converted ""
				    ""from %s to current locale."",
				    archive_string_conversion_charset_name(
					sconv));
				ret = ARCHIVE_WARN;
			}
		}
		zip_entry->uncompressed_size = zip_entry->compressed_size = 0;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_500.cpp,"[8, 0, 0, 0, 0, 0, 3, 0, 0, 0, 9, 0, 0, 0, 0, 103, 0, 0, 1, 1, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 8, 0, 0, 10, 0, 0, 12, 0, 29, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_500.cpp,199,"[""struct archive_entry *"", ""null""]","[""bool"", ""macro"", ""==""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_626.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_626.cpp,692,923,695,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_501.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_501.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");
			return ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_501.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_501.cpp,207,"[""member"", ""macro"", ""string""]","[""__archive_read_consume_ret"", ""null"", ""<""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_627.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_627.cpp,731,957,733,961,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_502.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_502.cpp,"(0 == (zip_entry->zip_flags & ZIP_LENGTH_AT_END)
	    || zip_entry->uncompressed_size > 0) {
		/* Set the size only if it's meaningful. */
		archive_entry_set_size(entry, zip_entry->uncompressed_size);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_502.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_502.cpp,245,[],"[""bool"", ""macro"", ""=="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_628.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_628.cpp,744,976,746,978,"snprintf(zip->format_name, sizeof(zip->format_name), ""ZIP %d.%d (%s)"",
	    version / 10, version % 10,
	    compression_name(zip->entry->compression));","archive_string_sprintf(&zip->format_name, ""ZIP %d.%d (%s)"",
	    version / 10, version % 10,
	    compression_name(zip->entry->compression));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_503.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_503.cpp,"{
	const char *p;
	const void *h;
	const wchar_t *wp;
	const char *cp;
	size_t len, filename_length, extra_length;
	struct archive_string_conv *sconv;
	struct zip_entry *zip_entry = zip->entry;
	struct zip_entry zip_entry_central_dir;
	int ret = ARCHIVE_OK;
	char version;

	/* Save a copy of the original for consistency checks. */
	zip_entry_central_dir = *zip_entry;

	zip->decompress_init = 0;
	zip->end_of_entry = 0;
	zip->entry_uncompressed_bytes_read = 0;
	zip->entry_compressed_bytes_read = 0;
	zip->entry_crc32 = zip->crc32func(0, NULL, 0);

	/* Setup default conversion. */
	if (zip->sconv == NULL && !zip->init_default_conversion) {
		zip->sconv_default =
		    archive_string_default_conversion_for_read(&(a->archive));
		zip->init_default_conversion = 1;
	}

	if ((p = __archive_read_ahead(a, 30, NULL)) == NULL) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}

	if (memcmp(p, ""PK\003\004"", 4) != 0) {
		archive_set_error(&a->archive, -1, ""Damaged Zip archive"");
		return ARCHIVE_FATAL;
	}
	version = p[4];
	zip_entry->system = p[5];
	zip_entry->zip_flags = archive_le16dec(p + 6);
	if (zip_entry->zip_flags & (ZIP_ENCRYPTED | ZIP_STRONG_ENCRYPTED)) {
		zip->has_encrypted_entries = 1;
		archive_entry_set_is_data_encrypted(entry, 1);
		if (zip_entry->zip_flags & ZIP_CENTRAL_DIRECTORY_ENCRYPTED &&
			zip_entry->zip_flags & ZIP_ENCRYPTED &&
			zip_entry->zip_flags & ZIP_STRONG_ENCRYPTED) {
			archive_entry_set_is_metadata_encrypted(entry, 1);
			return ARCHIVE_FATAL;
		}
	}
	zip_entry->compression = (char)archive_le16dec(p + 8);
	zip_entry->mtime = zip_time(p + 10);
	zip_entry->crc32 = archive_le32dec(p + 14);
	zip_entry->compressed_size = archive_le32dec(p + 18);
	zip_entry->uncompressed_size = archive_le32dec(p + 22);
	filename_length = archive_le16dec(p + 26);
	extra_length = archive_le16dec(p + 28);

	__archive_read_consume(a, 30);

	/* Read the filename. */
	if ((h = __archive_read_ahead(a, filename_length, NULL)) == NULL) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}
	if (zip_entry->zip_flags & ZIP_UTF8_NAME) {
		/* The filename is stored to be UTF-8. */
		if (zip->sconv_utf8 == NULL) {
			zip->sconv_utf8 =
			    archive_string_conversion_from_charset(
				&a->archive, ""UTF-8"", 1);
			if (zip->sconv_utf8 == NULL)
				return (ARCHIVE_FATAL);
		}
		sconv = zip->sconv_utf8;
	} else if (zip->sconv != NULL)
		sconv = zip->sconv;
	else
		sconv = zip->sconv_default;

	if (archive_entry_copy_pathname_l(entry,
	    h, filename_length, sconv) != 0) {
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
	}
	__archive_read_consume(a, filename_length);

	/* Work around a bug in Info-Zip: When reading from a pipe, it
	 * stats the pipe instead of synthesizing a file entry. */
	if ((zip_entry->mode & AE_IFMT) == AE_IFIFO) {
		zip_entry->mode &= ~ AE_IFMT;
		zip_entry->mode |= AE_IFREG;
	}

	if ((zip_entry->mode & AE_IFMT) == 0) {
		/* Especially in streaming mode, we can end up
		   here without having seen proper mode information.
		   Guess from the filename. */
		wp = archive_entry_pathname_w(entry);
		if (wp != NULL) {
			len = wcslen(wp);
			if (len > 0 && wp[len - 1] == L'/')
				zip_entry->mode |= AE_IFDIR;
			else
				zip_entry->mode |= AE_IFREG;
		} else {
			cp = archive_entry_pathname(entry);
			len = (cp != NULL)?strlen(cp):0;
			if (len > 0 && cp[len - 1] == '/')
				zip_entry->mode |= AE_IFDIR;
			else
				zip_entry->mode |= AE_IFREG;
		}
		if (zip_entry->mode == AE_IFDIR) {
			zip_entry->mode |= 0775;
		} else if (zip_entry->mode == AE_IFREG) {
			zip_entry->mode |= 0664;
		}
	}

	/* Read the extra data. */
	if ((h = __archive_read_ahead(a, extra_length, NULL)) == NULL) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}

	process_extra(h, extra_length, zip_entry);
	__archive_read_consume(a, extra_length);

	if (zip_entry->flags & LA_FROM_CENTRAL_DIRECTORY) {
		/* If this came from the central dir, it's size info
		 * is definitive, so ignore the length-at-end flag. */
		zip_entry->zip_flags &= ~ZIP_LENGTH_AT_END;
		/* If local header is missing a value, use the one from
		   the central directory.  If both have it, warn about
		   mismatches. */
		if (zip_entry->crc32 == 0) {
			zip_entry->crc32 = zip_entry_central_dir.crc32;
		} else if (!zip->ignore_crc32
		    && zip_entry->crc32 != zip_entry_central_dir.crc32) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent CRC32 values"");
			ret = ARCHIVE_WARN;
		}
		if (zip_entry->compressed_size == 0) {
			zip_entry->compressed_size
			    = zip_entry_central_dir.compressed_size;
		} else if (zip_entry->compressed_size
		    != zip_entry_central_dir.compressed_size) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent compressed size: ""
			    ""%jd in central directory, %jd in local header"",
			    (intmax_t)zip_entry_central_dir.compressed_size,
			    (intmax_t)zip_entry->compressed_size);
			ret = ARCHIVE_WARN;
		}
		if (zip_entry->uncompressed_size == 0) {
			zip_entry->uncompressed_size
			    = zip_entry_central_dir.uncompressed_size;
		} else if (zip_entry->uncompressed_size
		    != zip_entry_central_dir.uncompressed_size) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent uncompressed size: ""
			    ""%jd in central directory, %jd in local header"",
			    (intmax_t)zip_entry_central_dir.uncompressed_size,
			    (intmax_t)zip_entry->uncompressed_size);
			ret = ARCHIVE_WARN;
		}
	}

	/* Populate some additional entry fields: */
	archive_entry_set_mode(entry, zip_entry->mode);
	archive_entry_set_uid(entry, zip_entry->uid);
	archive_entry_set_gid(entry, zip_entry->gid);
	archive_entry_set_mtime(entry, zip_entry->mtime, 0);
	archive_entry_set_ctime(entry, zip_entry->ctime, 0);
	archive_entry_set_atime(entry, zip_entry->atime, 0);

	if ((zip->entry->mode & AE_IFMT) == AE_IFLNK) {
		size_t linkname_length = zip_entry->compressed_size;

		archive_entry_set_size(entry, 0);
		p = __archive_read_ahead(a, linkname_length, NULL);
		if (p == NULL) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated Zip file"");
			return ARCHIVE_FATAL;
		}
		if (__archive_read_consume(a, linkname_length) < 0) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");
			return ARCHIVE_FATAL;
		}

		sconv = zip->sconv;
		if (sconv == NULL && (zip->entry->zip_flags & ZIP_UTF8_NAME))
			sconv = zip->sconv_utf8;
		if (sconv == NULL)
			sconv = zip->sconv_default;
		if (archive_entry_copy_symlink_l(entry, p, linkname_length,
		    sconv) != 0) {
			if (errno != ENOMEM && sconv == zip->sconv_utf8 &&
			    (zip->entry->zip_flags & ZIP_UTF8_NAME))
			    archive_entry_copy_symlink_l(entry, p,
				linkname_length, NULL);
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Symlink"");
				return (ARCHIVE_FATAL);
			}
			/*
			 * Since there is no character-set regulation for
			 * symlink name, do not report the conversion error
			 * in an automatic conversion.
			 */
			if (sconv != zip->sconv_utf8 ||
			    (zip->entry->zip_flags & ZIP_UTF8_NAME) == 0) {
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symlink cannot be converted ""
				    ""from %s to current locale."",
				    archive_string_conversion_charset_name(
					sconv));
				ret = ARCHIVE_WARN;
			}
		}
		zip_entry->uncompressed_size = zip_entry->compressed_size = 0;
	} else if (0 == (zip_entry->zip_flags & ZIP_LENGTH_AT_END)
	    || zip_entry->uncompressed_size > 0) {
		/* Set the size only if it's meaningful. */
		archive_entry_set_size(entry, zip_entry->uncompressed_size);
	}
	zip->entry_bytes_remaining = zip_entry->compressed_size;

	/* If there's no body, force read_data() to return EOF immediately. */
	if (0 == (zip_entry->zip_flags & ZIP_LENGTH_AT_END)
	    && zip->entry_bytes_remaining < 1)
		zip->end_of_entry = 1;

	/* Set up a more descriptive format name. */
	snprintf(zip->format_name, sizeof(zip->format_name), ""ZIP %d.%d (%s)"",
	    version / 10, version % 10,
	    compression_name(zip->entry->compression));
	a->archive.archive_format_name = zip->format_name;

	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_503.cpp,"[38, 0, 0, 0, 0, 0, 11, 0, 0, 0, 43, 0, 0, 0, 4, 605, 0, 0, 11, 13, 0, 0, 3, 75, 0, 0, 0, 0, 6, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 326, 1, 275, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 0, 39, 39, 5, 0, 56, 0, 0, 81, 6, 135, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_503.cpp,258,"[""member"", ""member"", ""constant"", ""member"", ""member"", ""compression_name_ret""]","[""archive_entry_copy_symlink_l_ret"", ""null"", ""!="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_630.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_630.cpp,1033,1786,1037,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Encrypted file is unsupported"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_526.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_526.cpp,"{
		zip->has_encrypted_entries = 1;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Encrypted file is unsupported"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_526.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_526.cpp,25,"[""member"", ""macro"", ""string""]","[""bool""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_add_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_255.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_255.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_255.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_635.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_635.cpp,221,223,238,254,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""Unacceptable dictionary dize for lzip: %d"",
			    dict_size);","archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""Unacceptable dictionary size for lzip: %d"",
			    dict_size);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_527.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_527.cpp,"{
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""Unacceptable dictionary dize for lzip: %d"",
			    dict_size);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_527.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_527.cpp,21,"[""member"", ""macro"", ""string"", ""int""]","[""int"", ""int"", ""<"", ""int"", ""int"", "">"", ""||""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_256.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_256.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_256.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_636.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_636.cpp,1467,1468,1468,1469,"archive_set_error(&a->archive, 0,
		    ""Write request too large"");","archive_set_error(&a->archive, 0,
		    ""Too much data: Truncating file at %ju bytes"", (uintmax_t)a->filesize);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_528.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_528.cpp,"{
		archive_set_error(&a->archive, 0,
		    ""Write request too large"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_528.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_528.cpp,18,"[""member"", ""null"", ""string""]","[""write_data_block_ret"", ""size_t"", ""<""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_256.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_256.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_256.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_637.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_637.cpp,1869,1876,1871,1879,,"archive_set_error(&a->archive, en,
		    ""Hard-link target '%s' does not exist."",
		    archive_entry_hardlink(a->entry));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_529.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_529.cpp,"((en == EISDIR || en == EEXIST)
	    && (a->flags & ARCHIVE_EXTRACT_NO_OVERWRITE)) {
		/* If we're not overwriting, we're done. */
		archive_entry_unset_size(a->entry);
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_529.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_529.cpp,41,[],"[""rmdir_ret"", ""null"", ""==""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_256.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_256.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_256.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_640.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_640.cpp,2525,2544,2527,2548,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			                  ""Path is absolute"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_530.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_530.cpp,"(*src == '/')
		separator = *src++",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_530.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_530.cpp,17,[],"[""member"", ""char"", ""=="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_645.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_645.cpp,227,274,229,290,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""deflate compression not supported"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_532.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_532.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_532.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_532.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_645.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_645.cpp,227,274,229,305,,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_533.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_533.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_533.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_533.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_645.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_645.cpp,227,274,229,315,,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_534.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_534.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_534.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_645.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_645.cpp,227,274,229,325,,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_535.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_535.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_535.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_535.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_645.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_645.cpp,227,274,229,330,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: unknown encryption '%s'"",
			    a->format_name, val);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_536.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_536.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_536.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_536.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_647.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_647.cpp,782,1007,784,1053,,"archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Failed to encrypt file"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_537.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_537.cpp,"(zip->entry_compression) {
	case COMPRESSION_STORE:
		ret = __archive_write_output(a, buff, s);
		if (ret != ARCHIVE_OK)
			return (ret);
		zip->written_bytes += s;
		zip->entry_compressed_written += s;
		break;
#if HAVE_ZLIB_H
	case COMPRESSION_DEFLATE:
		zip->stream.next_in = (unsigned char*)(uintptr_t)buff;
		zip->stream.avail_in = (uInt)s;
		do {
			ret = deflate(&zip->stream, Z_NO_FLUSH);
			if (ret == Z_STREAM_ERROR)
				return (ARCHIVE_FATAL);
			if (zip->stream.avail_out == 0) {
				ret = __archive_write_output(a, zip->buf,
					zip->len_buf);
				if (ret != ARCHIVE_OK)
					return (ret);
				zip->entry_compressed_written += zip->len_buf;
				zip->written_bytes += zip->len_buf;
				zip->stream.next_out = zip->buf;
				zip->stream.avail_out = (uInt)zip->len_buf;
			}
		} while (zip->stream.avail_in != 0);
		break;
#endif

	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid ZIP compression type"");
		return ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_537.cpp,"[5, 0, 0, 1, 2, 0, 4, 0, 2, 1, 6, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 0, 0, 4, 0, 0, 11, 0, 11, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_537.cpp,12,[],"[""size_t"", ""null"", ""=="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_648.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_648.cpp,799,1083,800,1096,,"archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Failed to encrypt file"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_538.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_538.cpp,"(zip->stream.avail_out == 0) {
				ret = __archive_write_output(a, zip->buf,
					zip->len_buf);
				if (ret != ARCHIVE_OK)
					return (ret);
				zip->entry_compressed_written += zip->len_buf;
				zip->written_bytes += zip->len_buf;
				zip->stream.next_out = zip->buf;
				zip->stream.avail_out = (uInt)zip->len_buf;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_538.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_538.cpp,28,[],"[""deflate_ret"", ""macro"", ""=="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_649.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_649.cpp,834,1139,840,1155,,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Failed to encrypt file"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_539.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_539.cpp,"{
			size_t remainder;
			ret = deflate(&zip->stream, Z_FINISH);
			if (ret == Z_STREAM_ERROR)
				return (ARCHIVE_FATAL);
			remainder = zip->len_buf - zip->stream.avail_out;
			ret = __archive_write_output(a, zip->buf, remainder);
			if (ret != ARCHIVE_OK)
				return (ret);
			zip->entry_compressed_written += remainder;
			zip->written_bytes += remainder;
			zip->stream.next_out = zip->buf;
			if (zip->stream.avail_out != 0)
				break;
			zip->stream.avail_out = (uInt)zip->len_buf;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_539.cpp,"[3, 0, 0, 0, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 56, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 7, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_539.cpp,14,"[""struct archive_write *"", ""member"", ""member""]","[""deflate_ret"", ""macro"", ""=="", ""!""]"
bbef3c2da83b7a69d1f99b21dc92d5506d98fb35,cmLocalGenerator: Add current binary directory accessor.,[],Source/cmLocalVisualStudio6Generator.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_259.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_259.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_259.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_652.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_652.cpp,578,578,582,582,"sprintf(output,""%s/%s_force_%i"", this->Makefile->GetCurrentBinaryDirectory(),
          target.GetName().c_str(), count);","sprintf(output,""%s/%s_force_%i"", this->GetCurrentBinaryDirectory(),
          target.GetName().c_str(), count);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_546.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_546.cpp,"{
  // Create a fake output that forces the rule to run.
  char* output = new char[(strlen(this->Makefile->GetCurrentBinaryDirectory())
                           + target.GetName().size() + 30)];
  sprintf(output,""%s/%s_force_%i"", this->Makefile->GetCurrentBinaryDirectory(),
          target.GetName().c_str(), count);
  const char* comment = origCommand.GetComment();
  if(!comment && origCommand.GetOutputs().empty())
    {
    comment = ""<hack>"";
    }

  // Add the rule with the given dependencies and commands.
  std::string no_main_dependency = """";
  if(cmSourceFile* outsf =
     this->Makefile->AddCustomCommandToOutput(
       output, depends, no_main_dependency,
       origCommand.GetCommandLines(), comment,
       origCommand.GetWorkingDirectory().c_str()))
    {
    cmGeneratorTarget* gt = this->GlobalGenerator->GetGeneratorTarget(&target);
    gt->AddSource(outsf->GetFullPath());
    }

  // Replace the dependencies with the output of this rule so that the
  // next rule added will run after this one.
  depends.clear();
  depends.push_back(output);

  // Free the fake output name.
  delete [] output;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_546.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 77, 0, 0, 4, 5, 0, 0, 5, 4, 0, 0, 0, 0, 4, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 2, 2, 0, 0, 20, 0, 0, 6, 0, 15, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_546.cpp,9,"[""char *"", ""string"", ""this -> Makefile -> GetCurrentBinaryDirectory_ret"", ""target . GetName ( ) . c_str_ret"", ""int""]",[]
2e6063068c94d4045e699fed51e6d1e9af344bbf,"Merge branch 'improve-variable-help-formatting' into revert-cmake-W-options

Resolve conflicts in

 Help/variable/CMAKE_ERROR_DEPRECATED.rst
 Help/variable/CMAKE_WARN_DEPRECATED.rst

by integrating changes from both sides.",[],Source/cmGlobalGenerator.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_261.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_261.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_261.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_654.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_654.cpp,1111,1148,1113,1150,"sprintf(num,""%d"",static_cast<int>(this->LocalGenerators.size()));","sprintf(num,""%d"",static_cast<int>(this->Makefiles.size()));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_547.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_547.cpp,"{
  this->FirstTimeProgress = 0.0f;
  this->ClearGeneratorMembers();

  // start with this directory
  cmLocalGenerator *lg = this->MakeLocalGenerator();
  this->LocalGenerators.push_back(lg);

  // set the Start directories
  lg->GetMakefile()->SetCurrentSourceDirectory
    (this->CMakeInstance->GetHomeDirectory());
  lg->GetMakefile()->SetCurrentBinaryDirectory
    (this->CMakeInstance->GetHomeOutputDirectory());

  this->BinaryDirectories.insert(
      this->CMakeInstance->GetHomeOutputDirectory());

  // now do it
  lg->GetMakefile()->Configure();
  lg->GetMakefile()->EnforceDirectoryLevelRules();

  // update the cache entry for the number of local generators, this is used
  // for progress
  char num[100];
  sprintf(num,""%d"",static_cast<int>(this->LocalGenerators.size()));
  this->GetCMakeInstance()->AddCacheEntry
    (""CMAKE_NUMBER_OF_LOCAL_GENERATORS"", num,
     ""number of local generators"", cmState::INTERNAL);

  // check for link libraries and include directories containing ""NOTFOUND""
  // and for infinite loops
  this->CheckLocalGenerators();

  // at this point this->LocalGenerators has been filled,
  // so create the map from project name to vector of local generators
  this->FillProjectMap();

  if ( this->CMakeInstance->GetWorkingMode() == cmake::NORMAL_MODE)
    {
    std::ostringstream msg;
    if(cmSystemTools::GetErrorOccuredFlag())
      {
      msg << ""Configuring incomplete, errors occurred!"";
      const char* logs[] = {""CMakeOutput.log"", ""CMakeError.log"", 0};
      for(const char** log = logs; *log; ++log)
        {
        std::string f = this->CMakeInstance->GetHomeOutputDirectory();
        f += this->CMakeInstance->GetCMakeFilesDirectory();
        f += ""/"";
        f += *log;
        if(cmSystemTools::FileExists(f.c_str()))
          {
          msg << ""\nSee also \"""" << f << ""\""."";
          }
        }
      }
    else
      {
      msg << ""Configuring done"";
      }
    this->CMakeInstance->UpdateProgress(msg.str().c_str(), -1);
    }

  unsigned int i;

  // Put a copy of each global target in every directory.
  cmTargets globalTargets;
  this->CreateDefaultGlobalTargets(&globalTargets);

  for (i = 0; i < this->LocalGenerators.size(); ++i)
    {
    cmMakefile* mf = this->LocalGenerators[i]->GetMakefile();
    cmTargets* targets = &(mf->GetTargets());
    cmTargets::iterator tit;
    for ( tit = globalTargets.begin(); tit != globalTargets.end(); ++ tit )
      {
      (*targets)[tit->first] = tit->second;
      (*targets)[tit->first].SetMakefile(mf);
      }
    }

}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_547.cpp,"[3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 182, 0, 0, 10, 11, 0, 0, 9, 15, 0, 0, 0, 0, 6, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 64, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 5, 0, 6, 3, 1, 0, 39, 0, 0, 22, 0, 18, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_547.cpp,25,"[""char *"", ""string"", ""bool""]",[]
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_275.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_675.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_675.cpp,1933,1967,1943,-1,"snprintf(ftpc->newhost, sizeof(ftpc->newhost), ""%s"",
                     conn->host.name);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_548.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_548.cpp,"snprintf(ftpc->newhost, sizeof(ftpc->newhost), ""%s"",
                     conn->host.name)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_548.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_548.cpp,50,"[""member"", ""member"", ""string"", ""member""]","[""member"", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""||"", ""||"", ""||"", ""||""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_275.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_675.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_675.cpp,1933,1967,1947,-1,"snprintf(ftpc->newhost, NEWHOST_BUFSIZE, ""%s"", conn->ip_addr_str);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_549.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_549.cpp,"snprintf(ftpc->newhost, NEWHOST_BUFSIZE, ""%s"", conn->ip_addr_str)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_549.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_549.cpp,54,"[""member"", ""macro"", ""string"", ""member""]","[""member"", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""||"", ""||"", ""||"", ""||"", ""!""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_275.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_676.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_676.cpp,1986,2010,2000,-1,"snprintf(ftpc->newhost, sizeof(ftpc->newhost), ""%s"", conn->host.name);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_550.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_550.cpp,"snprintf(ftpc->newhost, sizeof(ftpc->newhost), ""%s"", conn->host.name)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_550.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_550.cpp,107,"[""member"", ""member"", ""string"", ""member""]","[""member"", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""||"", ""||"", ""||"", ""||""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_275.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_676.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_676.cpp,1986,2010,2002,-1,"snprintf(ftpc->newhost, sizeof(ftpc->newhost), ""%s"",
                 conn->ip_addr_str);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_551.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_551.cpp,"snprintf(ftpc->newhost, sizeof(ftpc->newhost), ""%s"",
                 conn->ip_addr_str)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_551.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_551.cpp,109,"[""member"", ""member"", ""string"", ""member""]","[""member"", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""||"", ""||"", ""||"", ""||"", ""!""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_275.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_676.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_676.cpp,1986,2010,2006,2020,"snprintf(ftpc->newhost, sizeof(ftpc->newhost),
               ""%d.%d.%d.%d"", ip[0], ip[1], ip[2], ip[3]);","ftpc->newhost = aprintf(""%d.%d.%d.%d"", ip[0], ip[1], ip[2], ip[3]);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_552.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_552.cpp,"snprintf(ftpc->newhost, sizeof(ftpc->newhost),
               ""%d.%d.%d.%d"", ip[0], ip[1], ip[2], ip[3])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_552.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_552.cpp,113,"[""member"", ""member"", ""constant"", ""member"", ""member"", ""member"", ""member""]","[""member"", ""!""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_276.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_276.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_276.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_678.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_678.cpp,1958,1996,1960,1999,,"conn->allocptr.host = aprintf(""%s\r\n"", ptr);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_553.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_553.cpp,"{
#if !defined(CURL_DISABLE_COOKIES)
    /* If we have a given custom Host: header, we extract the host name in
       order to possibly use it for cookie reasons later on. We only allow the
       custom Host: header if this is NOT a redirect, as setting Host: in the
       redirected request is being out on thin ice. Except if the host name
       is the same as the first one! */
    char *cookiehost = Curl_copy_header_value(ptr);
    if(!cookiehost)
      return CURLE_OUT_OF_MEMORY;
    if(!*cookiehost)
      /* ignore empty data */
      free(cookiehost);
    else {
      /* If the host begins with '[', we start searching for the port after
         the bracket has been closed */
      int startsearch = 0;
      if(*cookiehost == '[') {
        char *closingbracket;
        /* since the 'cookiehost' is an allocated memory area that will be
           freed later we cannot simply increment the pointer */
        memmove(cookiehost, cookiehost + 1, strlen(cookiehost) - 1);
        closingbracket = strchr(cookiehost, ']');
        if(closingbracket)
          *closingbracket = 0;
      }
      else {
        char *colon = strchr(cookiehost + startsearch, ':');
        if(colon)
          *colon = 0; /* The host must not include an embedded port number */
      }
      Curl_safefree(conn->allocptr.cookiehost);
      conn->allocptr.cookiehost = cookiehost;
    }
#endif

    conn->allocptr.host = NULL;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_553.cpp,"[6, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 48, 0, 0, 4, 4, 0, 0, 3, 8, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 5, 2, 0, 8, 0, 0, 8, 0, 12, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_553.cpp,247,[],"[""char *"", ""!"", ""!""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_276.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_276.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_276.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_679.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_679.cpp,2153,2198,2157,2201,"conn->allocptr.rangeline = aprintf(""Range: bytes=%s\r\n"",
                                         data->state.range);","conn->allocptr.rangeline = aprintf(""Range: bytes=%s\r\n"",
                                         data->state.range);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_554.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_554.cpp,"{
      /* if a line like this was already allocated, free the previous one */
      if(conn->allocptr.rangeline)
        free(conn->allocptr.rangeline);
      conn->allocptr.rangeline = aprintf(""Range: bytes=%s\r\n"",
                                         data->state.range);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_554.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_554.cpp,444,"[""string"", ""member""]","[""Curl_HttpReq"", ""macro"", ""=="", ""Curl_HttpReq"", ""macro"", ""=="", ""||"", ""Curl_checkheaders_ret"", ""!"", ""&&""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_680.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_680.cpp,26,26,261,-1,"snprintf((char *)&dest[i*2], 3, ""%02x"", source[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_555.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_555.cpp,"snprintf((char *)&dest[i*2], 3, ""%02x"", source[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_555.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_555.cpp,5,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""int"", ""<""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_681.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_681.cpp,352,112,369,-1,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_556.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_556.cpp,"{
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));
    rc = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                            &cnonce, &cnonce_sz);
    if(rc)
      return rc;
    d->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_556.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 23, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 8, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_556.cpp,73,"[""char *"", ""unkown"", ""string"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret""]","[""member""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_681.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_681.cpp,352,112,402,-1,"tmp = aprintf(""%s:%s:%s"", ha1, d->nonce, d->cnonce);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_558.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_558.cpp,"{
    /* nonce and cnonce are OUTSIDE the hash */
    tmp = aprintf(""%s:%s:%s"", ha1, d->nonce, d->cnonce);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;
    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* convert on non-ASCII machines */
    Curl_md5it(md5buf, (unsigned char *)tmp);
    Curl_safefree(tmp);
    md5_to_ascii(md5buf, ha1);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_558.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 5, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_558.cpp,106,"[""string"", ""unsigned char *"", ""member"", ""member""]","[""member"", ""macro"", ""==""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_682.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_682.cpp,435,141,442,-1,"md5this = (unsigned char *)aprintf(""%s:%.*s"", request, urilen, uripath);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_559.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_559.cpp,"{
  /* We have a Digest setup for this, use it!  Now, to get all the details for
     this sorted out, I must urge you dear friend to read up on the RFC2617
     section 3.2.2, */
  size_t urilen;
  unsigned char md5buf[16]; /* 16 bytes/128 bits */
  unsigned char request_digest[33];
  unsigned char *md5this;
  unsigned char ha1[33];/* 32 digits and 1 zero byte */
  unsigned char ha2[33];/* 32 digits and 1 zero byte */
  char cnoncebuf[33];
  char *cnonce = NULL;
  size_t cnonce_sz = 0;
  char *tmp = NULL;
  char **allocuserpwd;
  size_t userlen;
  const char *userp;
  char *userp_quoted;
  const char *passwdp;
  struct auth *authp;

  struct SessionHandle *data = conn->data;
  struct digestdata *d;
  CURLcode rc;
/* The CURL_OUTPUT_DIGEST_CONV macro below is for non-ASCII machines.
   It converts digest text to ASCII so the MD5 will be correct for
   what ultimately goes over the network.
*/
#define CURL_OUTPUT_DIGEST_CONV(a, b) \
  rc = Curl_convert_to_network(a, (char *)b, strlen((const char*)b)); \
  if(rc != CURLE_OK) { \
    free(b); \
    return rc; \
  }

  if(proxy) {
    d = &data->state.proxydigest;
    allocuserpwd = &conn->allocptr.proxyuserpwd;
    userp = conn->proxyuser;
    passwdp = conn->proxypasswd;
    authp = &data->state.authproxy;
  }
  else {
    d = &data->state.digest;
    allocuserpwd = &conn->allocptr.userpwd;
    userp = conn->user;
    passwdp = conn->passwd;
    authp = &data->state.authhost;
  }

  Curl_safefree(*allocuserpwd);

  /* not set means empty */
  if(!userp)
    userp="""";

  if(!passwdp)
    passwdp="""";

  if(!d->nonce) {
    authp->done = FALSE;
    return CURLE_OK;
  }
  authp->done = TRUE;

  if(!d->nc)
    d->nc = 1;

  if(!d->cnonce) {
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));
    rc = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                            &cnonce, &cnonce_sz);
    if(rc)
      return rc;
    d->cnonce = cnonce;
  }

  /*
    if the algorithm is ""MD5"" or unspecified (which then defaults to MD5):

    A1 = unq(username-value) "":"" unq(realm-value) "":"" passwd

    if the algorithm is ""MD5-sess"" then:

    A1 = H( unq(username-value) "":"" unq(realm-value) "":"" passwd )
         "":"" unq(nonce-value) "":"" unq(cnonce-value)
  */

  md5this = (unsigned char *)
    aprintf(""%s:%s:%s"", userp, d->realm, passwdp);
  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  Curl_safefree(md5this);
  md5_to_ascii(md5buf, ha1);

  if(d->algo == CURLDIGESTALGO_MD5SESS) {
    /* nonce and cnonce are OUTSIDE the hash */
    tmp = aprintf(""%s:%s:%s"", ha1, d->nonce, d->cnonce);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;
    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* convert on non-ASCII machines */
    Curl_md5it(md5buf, (unsigned char *)tmp);
    Curl_safefree(tmp);
    md5_to_ascii(md5buf, ha1);
  }

  /*
    If the ""qop"" directive's value is ""auth"" or is unspecified, then A2 is:

      A2       = Method "":"" digest-uri-value

          If the ""qop"" value is ""auth-int"", then A2 is:

      A2       = Method "":"" digest-uri-value "":"" H(entity-body)

    (The ""Method"" value is the HTTP request method as specified in section
    5.1.1 of RFC 2616)
  */

  /* So IE browsers < v7 cut off the URI part at the query part when they
     evaluate the MD5 and some (IIS?) servers work with them so we may need to
     do the Digest IE-style. Note that the different ways cause different MD5
     sums to get sent.

     Apache servers can be set to do the Digest IE-style automatically using
     the BrowserMatch feature:
     http://httpd.apache.org/docs/2.2/mod/mod_auth_digest.html#msie

     Further details on Digest implementation differences:
     http://www.fngtps.com/2006/09/http-authentication
  */

  if(authp->iestyle && ((tmp = strchr((char *)uripath, '?')) != NULL))
    urilen = tmp - (char *)uripath;
  else
    urilen = strlen((char *)uripath);

  md5this = (unsigned char *)aprintf(""%s:%.*s"", request, urilen, uripath);

  if(d->qop && Curl_raw_equal(d->qop, ""auth-int"")) {
    /* We don't support auth-int for PUT or POST at the moment.
       TODO: replace md5 of empty string with entity-body for PUT/POST */
    unsigned char *md5this2 = (unsigned char *)
      aprintf(""%s:%s"", md5this, ""d41d8cd98f00b204e9800998ecf8427e"");
    Curl_safefree(md5this);
    md5this = md5this2;
  }

  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  Curl_safefree(md5this);
  md5_to_ascii(md5buf, ha2);

  if(d->qop) {
    md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       d->nonce,
                                       d->nc,
                                       d->cnonce,
                                       d->qop,
                                       ha2);
  }
  else {
    md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       d->nonce,
                                       ha2);
  }
  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  Curl_safefree(md5this);
  md5_to_ascii(md5buf, request_digest);

  /* for test case 64 (snooped from a Mozilla 1.3a request)

    Authorization: Digest username=""testuser"", realm=""testrealm"", \
    nonce=""1053604145"", uri=""/64"", response=""c55f7f30d83d774a3d2dcacf725abaca""

    Digest parameters are all quoted strings.  Username which is provided by
    the user will need double quotes and backslashes within it escaped.  For
    the other fields, this shouldn't be an issue.  realm, nonce, and opaque
    are copied as is from the server, escapes and all.  cnonce is generated
    with web-safe characters.  uri is already percent encoded.  nc is 8 hex
    characters.  algorithm and qop with standard values only contain web-safe
    chracters.
  */
  userp_quoted = string_quoted(userp);
  if(!userp_quoted)
    return CURLE_OUT_OF_MEMORY;

  if(d->qop) {
    *allocuserpwd =
      aprintf( ""%sAuthorization: Digest ""
               ""username=\""%s\"", ""
               ""realm=\""%s\"", ""
               ""nonce=\""%s\"", ""
               ""uri=\""%.*s\"", ""
               ""cnonce=\""%s\"", ""
               ""nc=%08x, ""
               ""qop=%s, ""
               ""response=\""%s\"""",
               proxy?""Proxy-"":"""",
               userp_quoted,
               d->realm,
               d->nonce,
               urilen, uripath, /* this is the PATH part of the URL */
               d->cnonce,
               d->nc,
               d->qop,
               request_digest);

    if(Curl_raw_equal(d->qop, ""auth""))
      d->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0 padded
                  which tells to the server how many times you are using the
                  same nonce in the qop=auth mode. */
  }
  else {
    *allocuserpwd =
      aprintf( ""%sAuthorization: Digest ""
               ""username=\""%s\"", ""
               ""realm=\""%s\"", ""
               ""nonce=\""%s\"", ""
               ""uri=\""%.*s\"", ""
               ""response=\""%s\"""",
               proxy?""Proxy-"":"""",
               userp_quoted,
               d->realm,
               d->nonce,
               urilen, uripath, /* this is the PATH part of the URL */
               request_digest);
  }
  Curl_safefree(userp_quoted);
  if(!*allocuserpwd)
    return CURLE_OUT_OF_MEMORY;

  /* Add optional fields */
  if(d->opaque) {
    /* append opaque */
    tmp = aprintf(""%s, opaque=\""%s\"""", *allocuserpwd, d->opaque);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;
    free(*allocuserpwd);
    *allocuserpwd = tmp;
  }

  if(d->algorithm) {
    /* append algorithm */
    tmp = aprintf(""%s, algorithm=\""%s\"""", *allocuserpwd, d->algorithm);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;
    free(*allocuserpwd);
    *allocuserpwd = tmp;
  }

  /* append CRLF + zero (3 bytes) to the userpwd header */
  userlen = strlen(*allocuserpwd);
  tmp = realloc(*allocuserpwd, userlen + 3);
  if(!tmp)
    return CURLE_OUT_OF_MEMORY;
  strcpy(&tmp[userlen], ""\r\n""); /* append the data */
  *allocuserpwd = tmp;

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_559.cpp,"[24, 0, 0, 0, 0, 0, 12, 0, 0, 0, 29, 0, 0, 0, 2, 408, 0, 0, 20, 20, 0, 0, 5, 43, 0, 0, 0, 0, 12, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 2, 227, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 22, 0, 6, 0, 26, 26, 6, 0, 47, 2, 0, 59, 0, 115, 1, 0, 1, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_559.cpp,146,"[""constant"", ""const unsigned char *"", ""strchr_ret"", ""const unsigned char *""]","[""aprintf_ret"", ""!"", ""!""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_682.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_682.cpp,435,141,462,-1,"md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       d->nonce,
                                       d->nc,
                                       d->cnonce,
                                       d->qop,
                                       ha2);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_561.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_561.cpp,"{
    md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       d->nonce,
                                       d->nc,
                                       d->cnonce,
                                       d->qop,
                                       ha2);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_561.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_561.cpp,166,"[""string"", ""unsigned char *"", ""member"", ""member"", ""member"", ""member"", ""unsigned char *""]","[""member""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_682.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_682.cpp,435,141,471,-1,"md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       d->nonce,
                                       ha2);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_562.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_562.cpp,"{
    md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       d->nonce,
                                       ha2);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_562.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_562.cpp,175,"[""string"", ""unsigned char *"", ""member"", ""unsigned char *""]","[""member"", ""!""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_682.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_682.cpp,435,141,503,160,"""%sAuthorization: Digest ""
               ""username=\""%s\"", ""
               ""realm=\""%s\"", ""
               ""nonce=\""%s\"", ""
               ""uri=\""%.*s\"", ""
               ""cnonce=\""%s\"", ""
               ""nc=%08x, ""
               ""qop=%s, ""
               ""response=\""%s\"""";","(""%sAuthorization: Digest %s\r\n"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_563.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_563.cpp,"{
    *allocuserpwd =
      aprintf( ""%sAuthorization: Digest ""
               ""username=\""%s\"", ""
               ""realm=\""%s\"", ""
               ""nonce=\""%s\"", ""
               ""uri=\""%.*s\"", ""
               ""cnonce=\""%s\"", ""
               ""nc=%08x, ""
               ""qop=%s, ""
               ""response=\""%s\"""",
               proxy?""Proxy-"":"""",
               userp_quoted,
               d->realm,
               d->nonce,
               urilen, uripath, /* this is the PATH part of the URL */
               d->cnonce,
               d->nc,
               d->qop,
               request_digest);

    if(Curl_raw_equal(d->qop, ""auth""))
      d->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0 padded
                  which tells to the server how many times you are using the
                  same nonce in the qop=auth mode. */
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_563.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_563.cpp,207,[],"[""member""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_682.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_682.cpp,435,141,529,-1,"""%sAuthorization: Digest ""
               ""username=\""%s\"", ""
               ""realm=\""%s\"", ""
               ""nonce=\""%s\"", ""
               ""uri=\""%.*s\"", ""
               ""response=\""%s\"""";",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_564.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_564.cpp,"{
    *allocuserpwd =
      aprintf( ""%sAuthorization: Digest ""
               ""username=\""%s\"", ""
               ""realm=\""%s\"", ""
               ""nonce=\""%s\"", ""
               ""uri=\""%.*s\"", ""
               ""response=\""%s\"""",
               proxy?""Proxy-"":"""",
               userp_quoted,
               d->realm,
               d->nonce,
               urilen, uripath, /* this is the PATH part of the URL */
               request_digest);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_564.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_564.cpp,233,[],"[""member"", ""!""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_682.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_682.cpp,435,141,549,-1,"tmp = aprintf(""%s, opaque=\""%s\"""", *allocuserpwd, d->opaque);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_565.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_565.cpp,"{
    /* append opaque */
    tmp = aprintf(""%s, opaque=\""%s\"""", *allocuserpwd, d->opaque);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;
    free(*allocuserpwd);
    *allocuserpwd = tmp;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_565.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_565.cpp,253,"[""string"", ""member"", ""member""]","[""member""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_682.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_682.cpp,435,141,558,-1,"tmp = aprintf(""%s, algorithm=\""%s\"""", *allocuserpwd, d->algorithm);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_566.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_566.cpp,"{
    /* append algorithm */
    tmp = aprintf(""%s, algorithm=\""%s\"""", *allocuserpwd, d->algorithm);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;
    free(*allocuserpwd);
    *allocuserpwd = tmp;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_566.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_566.cpp,262,"[""string"", ""member"", ""member""]","[""member""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_682.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_682.cpp,435,141,438,146,,"path = (unsigned char *) aprintf(""%.*s"", urilen, uripath);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_567.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_567.cpp,urilen = tmp - (char *)uripath,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_567.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_567.cpp,142,[],"[""member"", ""strchr_ret"", ""null"", ""!="", ""&&""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_negotiate.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_278.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_278.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_278.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_683.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_683.cpp,22,22,60,-1,"snprintf(name, sizeof(name), ""%s@%s"", service, proxy ? conn->proxy.name :
           conn->host.name);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_568.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_568.cpp,"{
  OM_uint32 major_status, minor_status;
  gss_buffer_desc token = GSS_C_EMPTY_BUFFER;
  char name[2048];
  const char* service = ""HTTP"";

  token.length = strlen(service) + 1 + strlen(proxy ? conn->proxy.name :
                                              conn->host.name) + 1;
  if(token.length + 1 > sizeof(name))
    return EMSGSIZE;

  snprintf(name, sizeof(name), ""%s@%s"", service, proxy ? conn->proxy.name :
           conn->host.name);

  token.value = (void *) name;
  major_status = gss_import_name(&minor_status,
                                 &token,
                                 GSS_C_NT_HOSTBASED_SERVICE,
                                 server);

  return GSS_ERROR(major_status) ? -1 : 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_568.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 57, 0, 0, 4, 5, 0, 0, 2, 8, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 3, 33, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 0, 4, 4, 3, 0, 7, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_568.cpp,13,"[""char *"", ""unkown"", ""string"", ""const char *"", ""member""]","[""member"", ""unkown"", "">"", ""!""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_negotiate.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_278.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_278.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_278.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_683.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_683.cpp,22,22,82,-1,"snprintf(buf, sizeof(buf), ""%s"", prefix);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_569.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_569.cpp,"{
  OM_uint32 maj_stat, min_stat;
  OM_uint32 msg_ctx = 0;
  gss_buffer_desc status_string;
  char buf[1024];
  size_t len;

  snprintf(buf, sizeof(buf), ""%s"", prefix);
  len = strlen(buf);
  do {
    maj_stat = gss_display_status(&min_stat,
                                  error_status,
                                  GSS_C_MECH_CODE,
                                  GSS_C_NO_OID,
                                  &msg_ctx,
                                  &status_string);
      if(sizeof(buf) > len + status_string.length + 1) {
        snprintf(buf + len, sizeof(buf) - len,
                 "": %s"", (char*) status_string.value);
      len += status_string.length;
    }
    gss_release_buffer(&min_stat, &status_string);
  } while(!GSS_ERROR(maj_stat) && msg_ctx != 0);

  infof(conn->data, ""%s\n"", buf);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_569.cpp,"[1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 56, 0, 0, 5, 6, 0, 0, 1, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 35, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 2, 1, 0, 0, 10, 0, 0, 7, 0, 24, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_569.cpp,10,"[""char *"", ""unkown"", ""string"", ""const char *""]",[]
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_negotiate.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_278.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_278.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_278.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_683.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_683.cpp,22,22,92,-1,"snprintf(buf + len, sizeof(buf) - len,
                 "": %s"", (char*) status_string.value);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_570.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_570.cpp,"{
        snprintf(buf + len, sizeof(buf) - len,
                 "": %s"", (char*) status_string.value);
      len += status_string.length;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_570.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 7, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_570.cpp,20,"[""char *"", ""strlen_ret"", ""string"", ""member""]","[""unkown"", ""strlen_ret"", "">""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_288.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_288.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_288.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_699.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_699.cpp,1933,1967,1943,-1,"snprintf(ftpc->newhost, sizeof(ftpc->newhost), ""%s"",
                     conn->host.name);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_571.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_571.cpp,"snprintf(ftpc->newhost, sizeof(ftpc->newhost), ""%s"",
                     conn->host.name)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_571.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_571.cpp,50,"[""member"", ""member"", ""string"", ""member""]","[""member"", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""||"", ""||"", ""||"", ""||""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_288.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_288.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_288.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_699.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_699.cpp,1933,1967,1947,-1,"snprintf(ftpc->newhost, NEWHOST_BUFSIZE, ""%s"", conn->ip_addr_str);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_572.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_572.cpp,"snprintf(ftpc->newhost, NEWHOST_BUFSIZE, ""%s"", conn->ip_addr_str)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_572.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_572.cpp,54,"[""member"", ""macro"", ""string"", ""member""]","[""member"", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""||"", ""||"", ""||"", ""||"", ""!""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_288.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_288.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_288.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_700.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_700.cpp,1986,2010,2000,-1,"snprintf(ftpc->newhost, sizeof(ftpc->newhost), ""%s"", conn->host.name);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_573.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_573.cpp,"snprintf(ftpc->newhost, sizeof(ftpc->newhost), ""%s"", conn->host.name)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_573.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_573.cpp,107,"[""member"", ""member"", ""string"", ""member""]","[""member"", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""||"", ""||"", ""||"", ""||""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_288.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_288.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_288.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_700.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_700.cpp,1986,2010,2002,-1,"snprintf(ftpc->newhost, sizeof(ftpc->newhost), ""%s"",
                 conn->ip_addr_str);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_574.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_574.cpp,"snprintf(ftpc->newhost, sizeof(ftpc->newhost), ""%s"",
                 conn->ip_addr_str)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_574.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_574.cpp,109,"[""member"", ""member"", ""string"", ""member""]","[""member"", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""||"", ""||"", ""||"", ""||"", ""!""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_288.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_288.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_288.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_700.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_700.cpp,1986,2010,2006,2020,"snprintf(ftpc->newhost, sizeof(ftpc->newhost),
               ""%d.%d.%d.%d"", ip[0], ip[1], ip[2], ip[3]);","ftpc->newhost = aprintf(""%d.%d.%d.%d"", ip[0], ip[1], ip[2], ip[3]);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_575.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_575.cpp,"snprintf(ftpc->newhost, sizeof(ftpc->newhost),
               ""%d.%d.%d.%d"", ip[0], ip[1], ip[2], ip[3])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_575.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_575.cpp,113,"[""member"", ""member"", ""constant"", ""member"", ""member"", ""member"", ""member""]","[""member"", ""!""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_289.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_289.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_289.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_702.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_702.cpp,1958,1996,1960,1999,,"conn->allocptr.host = aprintf(""%s\r\n"", ptr);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_576.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_576.cpp,"{
#if !defined(CURL_DISABLE_COOKIES)
    /* If we have a given custom Host: header, we extract the host name in
       order to possibly use it for cookie reasons later on. We only allow the
       custom Host: header if this is NOT a redirect, as setting Host: in the
       redirected request is being out on thin ice. Except if the host name
       is the same as the first one! */
    char *cookiehost = Curl_copy_header_value(ptr);
    if(!cookiehost)
      return CURLE_OUT_OF_MEMORY;
    if(!*cookiehost)
      /* ignore empty data */
      free(cookiehost);
    else {
      /* If the host begins with '[', we start searching for the port after
         the bracket has been closed */
      int startsearch = 0;
      if(*cookiehost == '[') {
        char *closingbracket;
        /* since the 'cookiehost' is an allocated memory area that will be
           freed later we cannot simply increment the pointer */
        memmove(cookiehost, cookiehost + 1, strlen(cookiehost) - 1);
        closingbracket = strchr(cookiehost, ']');
        if(closingbracket)
          *closingbracket = 0;
      }
      else {
        char *colon = strchr(cookiehost + startsearch, ':');
        if(colon)
          *colon = 0; /* The host must not include an embedded port number */
      }
      Curl_safefree(conn->allocptr.cookiehost);
      conn->allocptr.cookiehost = cookiehost;
    }
#endif

    conn->allocptr.host = NULL;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_576.cpp,"[6, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 48, 0, 0, 4, 4, 0, 0, 3, 8, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 5, 2, 0, 8, 0, 0, 8, 0, 12, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_576.cpp,247,[],"[""char *"", ""!"", ""!""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_289.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_289.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_289.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_703.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_703.cpp,2153,2198,2157,2201,"conn->allocptr.rangeline = aprintf(""Range: bytes=%s\r\n"",
                                         data->state.range);","conn->allocptr.rangeline = aprintf(""Range: bytes=%s\r\n"",
                                         data->state.range);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_577.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_577.cpp,"{
      /* if a line like this was already allocated, free the previous one */
      if(conn->allocptr.rangeline)
        free(conn->allocptr.rangeline);
      conn->allocptr.rangeline = aprintf(""Range: bytes=%s\r\n"",
                                         data->state.range);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_577.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_577.cpp,444,"[""string"", ""member""]","[""Curl_HttpReq"", ""macro"", ""=="", ""Curl_HttpReq"", ""macro"", ""=="", ""||"", ""Curl_checkheaders_ret"", ""!"", ""&&""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_290.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_704.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_704.cpp,26,26,261,-1,"snprintf((char *)&dest[i*2], 3, ""%02x"", source[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_578.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_578.cpp,"snprintf((char *)&dest[i*2], 3, ""%02x"", source[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_578.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_578.cpp,5,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""int"", ""<""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_290.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_705.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_705.cpp,352,112,369,-1,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_579.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_579.cpp,"{
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));
    rc = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                            &cnonce, &cnonce_sz);
    if(rc)
      return rc;
    d->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_579.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 23, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 8, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_579.cpp,73,"[""char *"", ""unkown"", ""string"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret""]","[""member""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_290.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_705.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_705.cpp,352,112,402,-1,"tmp = aprintf(""%s:%s:%s"", ha1, d->nonce, d->cnonce);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_581.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_581.cpp,"{
    /* nonce and cnonce are OUTSIDE the hash */
    tmp = aprintf(""%s:%s:%s"", ha1, d->nonce, d->cnonce);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;
    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* convert on non-ASCII machines */
    Curl_md5it(md5buf, (unsigned char *)tmp);
    Curl_safefree(tmp);
    md5_to_ascii(md5buf, ha1);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_581.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 5, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_581.cpp,106,"[""string"", ""unsigned char *"", ""member"", ""member""]","[""member"", ""macro"", ""==""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_290.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_706.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_706.cpp,435,141,442,-1,"md5this = (unsigned char *)aprintf(""%s:%.*s"", request, urilen, uripath);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_582.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_582.cpp,"{
  /* We have a Digest setup for this, use it!  Now, to get all the details for
     this sorted out, I must urge you dear friend to read up on the RFC2617
     section 3.2.2, */
  size_t urilen;
  unsigned char md5buf[16]; /* 16 bytes/128 bits */
  unsigned char request_digest[33];
  unsigned char *md5this;
  unsigned char ha1[33];/* 32 digits and 1 zero byte */
  unsigned char ha2[33];/* 32 digits and 1 zero byte */
  char cnoncebuf[33];
  char *cnonce = NULL;
  size_t cnonce_sz = 0;
  char *tmp = NULL;
  char **allocuserpwd;
  size_t userlen;
  const char *userp;
  char *userp_quoted;
  const char *passwdp;
  struct auth *authp;

  struct SessionHandle *data = conn->data;
  struct digestdata *d;
  CURLcode rc;
/* The CURL_OUTPUT_DIGEST_CONV macro below is for non-ASCII machines.
   It converts digest text to ASCII so the MD5 will be correct for
   what ultimately goes over the network.
*/
#define CURL_OUTPUT_DIGEST_CONV(a, b) \
  rc = Curl_convert_to_network(a, (char *)b, strlen((const char*)b)); \
  if(rc != CURLE_OK) { \
    free(b); \
    return rc; \
  }

  if(proxy) {
    d = &data->state.proxydigest;
    allocuserpwd = &conn->allocptr.proxyuserpwd;
    userp = conn->proxyuser;
    passwdp = conn->proxypasswd;
    authp = &data->state.authproxy;
  }
  else {
    d = &data->state.digest;
    allocuserpwd = &conn->allocptr.userpwd;
    userp = conn->user;
    passwdp = conn->passwd;
    authp = &data->state.authhost;
  }

  Curl_safefree(*allocuserpwd);

  /* not set means empty */
  if(!userp)
    userp="""";

  if(!passwdp)
    passwdp="""";

  if(!d->nonce) {
    authp->done = FALSE;
    return CURLE_OK;
  }
  authp->done = TRUE;

  if(!d->nc)
    d->nc = 1;

  if(!d->cnonce) {
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));
    rc = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                            &cnonce, &cnonce_sz);
    if(rc)
      return rc;
    d->cnonce = cnonce;
  }

  /*
    if the algorithm is ""MD5"" or unspecified (which then defaults to MD5):

    A1 = unq(username-value) "":"" unq(realm-value) "":"" passwd

    if the algorithm is ""MD5-sess"" then:

    A1 = H( unq(username-value) "":"" unq(realm-value) "":"" passwd )
         "":"" unq(nonce-value) "":"" unq(cnonce-value)
  */

  md5this = (unsigned char *)
    aprintf(""%s:%s:%s"", userp, d->realm, passwdp);
  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  Curl_safefree(md5this);
  md5_to_ascii(md5buf, ha1);

  if(d->algo == CURLDIGESTALGO_MD5SESS) {
    /* nonce and cnonce are OUTSIDE the hash */
    tmp = aprintf(""%s:%s:%s"", ha1, d->nonce, d->cnonce);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;
    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* convert on non-ASCII machines */
    Curl_md5it(md5buf, (unsigned char *)tmp);
    Curl_safefree(tmp);
    md5_to_ascii(md5buf, ha1);
  }

  /*
    If the ""qop"" directive's value is ""auth"" or is unspecified, then A2 is:

      A2       = Method "":"" digest-uri-value

          If the ""qop"" value is ""auth-int"", then A2 is:

      A2       = Method "":"" digest-uri-value "":"" H(entity-body)

    (The ""Method"" value is the HTTP request method as specified in section
    5.1.1 of RFC 2616)
  */

  /* So IE browsers < v7 cut off the URI part at the query part when they
     evaluate the MD5 and some (IIS?) servers work with them so we may need to
     do the Digest IE-style. Note that the different ways cause different MD5
     sums to get sent.

     Apache servers can be set to do the Digest IE-style automatically using
     the BrowserMatch feature:
     http://httpd.apache.org/docs/2.2/mod/mod_auth_digest.html#msie

     Further details on Digest implementation differences:
     http://www.fngtps.com/2006/09/http-authentication
  */

  if(authp->iestyle && ((tmp = strchr((char *)uripath, '?')) != NULL))
    urilen = tmp - (char *)uripath;
  else
    urilen = strlen((char *)uripath);

  md5this = (unsigned char *)aprintf(""%s:%.*s"", request, urilen, uripath);

  if(d->qop && Curl_raw_equal(d->qop, ""auth-int"")) {
    /* We don't support auth-int for PUT or POST at the moment.
       TODO: replace md5 of empty string with entity-body for PUT/POST */
    unsigned char *md5this2 = (unsigned char *)
      aprintf(""%s:%s"", md5this, ""d41d8cd98f00b204e9800998ecf8427e"");
    Curl_safefree(md5this);
    md5this = md5this2;
  }

  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  Curl_safefree(md5this);
  md5_to_ascii(md5buf, ha2);

  if(d->qop) {
    md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       d->nonce,
                                       d->nc,
                                       d->cnonce,
                                       d->qop,
                                       ha2);
  }
  else {
    md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       d->nonce,
                                       ha2);
  }
  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  Curl_safefree(md5this);
  md5_to_ascii(md5buf, request_digest);

  /* for test case 64 (snooped from a Mozilla 1.3a request)

    Authorization: Digest username=""testuser"", realm=""testrealm"", \
    nonce=""1053604145"", uri=""/64"", response=""c55f7f30d83d774a3d2dcacf725abaca""

    Digest parameters are all quoted strings.  Username which is provided by
    the user will need double quotes and backslashes within it escaped.  For
    the other fields, this shouldn't be an issue.  realm, nonce, and opaque
    are copied as is from the server, escapes and all.  cnonce is generated
    with web-safe characters.  uri is already percent encoded.  nc is 8 hex
    characters.  algorithm and qop with standard values only contain web-safe
    chracters.
  */
  userp_quoted = string_quoted(userp);
  if(!userp_quoted)
    return CURLE_OUT_OF_MEMORY;

  if(d->qop) {
    *allocuserpwd =
      aprintf( ""%sAuthorization: Digest ""
               ""username=\""%s\"", ""
               ""realm=\""%s\"", ""
               ""nonce=\""%s\"", ""
               ""uri=\""%.*s\"", ""
               ""cnonce=\""%s\"", ""
               ""nc=%08x, ""
               ""qop=%s, ""
               ""response=\""%s\"""",
               proxy?""Proxy-"":"""",
               userp_quoted,
               d->realm,
               d->nonce,
               urilen, uripath, /* this is the PATH part of the URL */
               d->cnonce,
               d->nc,
               d->qop,
               request_digest);

    if(Curl_raw_equal(d->qop, ""auth""))
      d->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0 padded
                  which tells to the server how many times you are using the
                  same nonce in the qop=auth mode. */
  }
  else {
    *allocuserpwd =
      aprintf( ""%sAuthorization: Digest ""
               ""username=\""%s\"", ""
               ""realm=\""%s\"", ""
               ""nonce=\""%s\"", ""
               ""uri=\""%.*s\"", ""
               ""response=\""%s\"""",
               proxy?""Proxy-"":"""",
               userp_quoted,
               d->realm,
               d->nonce,
               urilen, uripath, /* this is the PATH part of the URL */
               request_digest);
  }
  Curl_safefree(userp_quoted);
  if(!*allocuserpwd)
    return CURLE_OUT_OF_MEMORY;

  /* Add optional fields */
  if(d->opaque) {
    /* append opaque */
    tmp = aprintf(""%s, opaque=\""%s\"""", *allocuserpwd, d->opaque);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;
    free(*allocuserpwd);
    *allocuserpwd = tmp;
  }

  if(d->algorithm) {
    /* append algorithm */
    tmp = aprintf(""%s, algorithm=\""%s\"""", *allocuserpwd, d->algorithm);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;
    free(*allocuserpwd);
    *allocuserpwd = tmp;
  }

  /* append CRLF + zero (3 bytes) to the userpwd header */
  userlen = strlen(*allocuserpwd);
  tmp = realloc(*allocuserpwd, userlen + 3);
  if(!tmp)
    return CURLE_OUT_OF_MEMORY;
  strcpy(&tmp[userlen], ""\r\n""); /* append the data */
  *allocuserpwd = tmp;

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_582.cpp,"[24, 0, 0, 0, 0, 0, 12, 0, 0, 0, 29, 0, 0, 0, 2, 408, 0, 0, 20, 20, 0, 0, 5, 43, 0, 0, 0, 0, 12, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 2, 227, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 22, 0, 6, 0, 26, 26, 6, 0, 47, 2, 0, 59, 0, 115, 1, 0, 1, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_582.cpp,146,"[""constant"", ""const unsigned char *"", ""strlen_ret"", ""const unsigned char *""]","[""member"", ""macro"", ""=="", ""!""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_290.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_706.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_706.cpp,435,141,462,-1,"md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       d->nonce,
                                       d->nc,
                                       d->cnonce,
                                       d->qop,
                                       ha2);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_584.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_584.cpp,"{
    md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       d->nonce,
                                       d->nc,
                                       d->cnonce,
                                       d->qop,
                                       ha2);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_584.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_584.cpp,166,"[""string"", ""unsigned char *"", ""member"", ""member"", ""member"", ""member"", ""unsigned char *""]","[""member""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_290.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_706.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_706.cpp,435,141,471,-1,"md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       d->nonce,
                                       ha2);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_585.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_585.cpp,"{
    md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       d->nonce,
                                       ha2);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_585.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_585.cpp,175,"[""string"", ""unsigned char *"", ""member"", ""unsigned char *""]","[""member"", ""!""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_290.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_706.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_706.cpp,435,141,503,160,"""%sAuthorization: Digest ""
               ""username=\""%s\"", ""
               ""realm=\""%s\"", ""
               ""nonce=\""%s\"", ""
               ""uri=\""%.*s\"", ""
               ""cnonce=\""%s\"", ""
               ""nc=%08x, ""
               ""qop=%s, ""
               ""response=\""%s\"""";","(""%sAuthorization: Digest %s\r\n"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_586.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_586.cpp,"{
    *allocuserpwd =
      aprintf( ""%sAuthorization: Digest ""
               ""username=\""%s\"", ""
               ""realm=\""%s\"", ""
               ""nonce=\""%s\"", ""
               ""uri=\""%.*s\"", ""
               ""cnonce=\""%s\"", ""
               ""nc=%08x, ""
               ""qop=%s, ""
               ""response=\""%s\"""",
               proxy?""Proxy-"":"""",
               userp_quoted,
               d->realm,
               d->nonce,
               urilen, uripath, /* this is the PATH part of the URL */
               d->cnonce,
               d->nc,
               d->qop,
               request_digest);

    if(Curl_raw_equal(d->qop, ""auth""))
      d->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0 padded
                  which tells to the server how many times you are using the
                  same nonce in the qop=auth mode. */
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_586.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_586.cpp,207,[],"[""member""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_290.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_706.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_706.cpp,435,141,529,-1,"""%sAuthorization: Digest ""
               ""username=\""%s\"", ""
               ""realm=\""%s\"", ""
               ""nonce=\""%s\"", ""
               ""uri=\""%.*s\"", ""
               ""response=\""%s\"""";",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_587.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_587.cpp,"{
    *allocuserpwd =
      aprintf( ""%sAuthorization: Digest ""
               ""username=\""%s\"", ""
               ""realm=\""%s\"", ""
               ""nonce=\""%s\"", ""
               ""uri=\""%.*s\"", ""
               ""response=\""%s\"""",
               proxy?""Proxy-"":"""",
               userp_quoted,
               d->realm,
               d->nonce,
               urilen, uripath, /* this is the PATH part of the URL */
               request_digest);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_587.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_587.cpp,233,[],"[""member"", ""!""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_290.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_706.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_706.cpp,435,141,549,-1,"tmp = aprintf(""%s, opaque=\""%s\"""", *allocuserpwd, d->opaque);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_588.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_588.cpp,"{
    /* append opaque */
    tmp = aprintf(""%s, opaque=\""%s\"""", *allocuserpwd, d->opaque);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;
    free(*allocuserpwd);
    *allocuserpwd = tmp;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_588.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_588.cpp,253,"[""string"", ""member"", ""member""]","[""member""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_290.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_706.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_706.cpp,435,141,558,-1,"tmp = aprintf(""%s, algorithm=\""%s\"""", *allocuserpwd, d->algorithm);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_589.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_589.cpp,"{
    /* append algorithm */
    tmp = aprintf(""%s, algorithm=\""%s\"""", *allocuserpwd, d->algorithm);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;
    free(*allocuserpwd);
    *allocuserpwd = tmp;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_589.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_589.cpp,262,"[""string"", ""member"", ""member""]","[""member""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_290.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_290.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_706.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_706.cpp,435,141,438,146,,"path = (unsigned char *) aprintf(""%.*s"", urilen, uripath);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_590.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_590.cpp,urilen = tmp - (char *)uripath,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_590.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_590.cpp,142,[],"[""member"", ""strchr_ret"", ""null"", ""!="", ""&&""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/http_negotiate.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_291.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_291.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_291.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_707.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_707.cpp,22,22,60,-1,"snprintf(name, sizeof(name), ""%s@%s"", service, proxy ? conn->proxy.name :
           conn->host.name);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_591.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_591.cpp,"{
  OM_uint32 major_status, minor_status;
  gss_buffer_desc token = GSS_C_EMPTY_BUFFER;
  char name[2048];
  const char* service = ""HTTP"";

  token.length = strlen(service) + 1 + strlen(proxy ? conn->proxy.name :
                                              conn->host.name) + 1;
  if(token.length + 1 > sizeof(name))
    return EMSGSIZE;

  snprintf(name, sizeof(name), ""%s@%s"", service, proxy ? conn->proxy.name :
           conn->host.name);

  token.value = (void *) name;
  major_status = gss_import_name(&minor_status,
                                 &token,
                                 GSS_C_NT_HOSTBASED_SERVICE,
                                 server);

  return GSS_ERROR(major_status) ? -1 : 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_591.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 57, 0, 0, 4, 5, 0, 0, 2, 8, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 3, 33, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 0, 4, 4, 3, 0, 7, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_591.cpp,13,"[""char *"", ""unkown"", ""string"", ""const char *"", ""member""]","[""member"", ""unkown"", "">"", ""!""]"
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/http_negotiate.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_291.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_291.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_291.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_707.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_707.cpp,22,22,82,-1,"snprintf(buf, sizeof(buf), ""%s"", prefix);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_592.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_592.cpp,"{
  OM_uint32 maj_stat, min_stat;
  OM_uint32 msg_ctx = 0;
  gss_buffer_desc status_string;
  char buf[1024];
  size_t len;

  snprintf(buf, sizeof(buf), ""%s"", prefix);
  len = strlen(buf);
  do {
    maj_stat = gss_display_status(&min_stat,
                                  error_status,
                                  GSS_C_MECH_CODE,
                                  GSS_C_NO_OID,
                                  &msg_ctx,
                                  &status_string);
      if(sizeof(buf) > len + status_string.length + 1) {
        snprintf(buf + len, sizeof(buf) - len,
                 "": %s"", (char*) status_string.value);
      len += status_string.length;
    }
    gss_release_buffer(&min_stat, &status_string);
  } while(!GSS_ERROR(maj_stat) && msg_ctx != 0);

  infof(conn->data, ""%s\n"", buf);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_592.cpp,"[1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 56, 0, 0, 5, 6, 0, 0, 1, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 35, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 2, 1, 0, 0, 10, 0, 0, 7, 0, 24, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_592.cpp,10,"[""char *"", ""unkown"", ""string"", ""const char *""]",[]
706542615828488a5ad197d0ef3dd5e42eb739c4,"curl 7.44.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.44.0 &&
r=1a7f66a3 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/http_negotiate.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_291.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_291.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_291.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_707.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_707.cpp,22,22,92,-1,"snprintf(buf + len, sizeof(buf) - len,
                 "": %s"", (char*) status_string.value);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_593.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_593.cpp,"{
        snprintf(buf + len, sizeof(buf) - len,
                 "": %s"", (char*) status_string.value);
      len += status_string.length;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_593.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 7, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_593.cpp,20,"[""char *"", ""strlen_ret"", ""string"", ""member""]","[""unkown"", ""strlen_ret"", "">""]"
f8be9ba9c258698ed88a7510cf2ba3335491f3da,"cmGlobalGenerator: Base progress on Makefiles, not LocalGenerators.",[],Source/cmGlobalGenerator.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_295.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_295.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_295.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_712.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_712.cpp,1148,1148,1150,1150,"sprintf(num,""%d"",static_cast<int>(this->LocalGenerators.size()));","sprintf(num,""%d"",static_cast<int>(this->Makefiles.size()));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_594.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_594.cpp,"{
  this->FirstTimeProgress = 0.0f;
  this->ClearGeneratorMembers();

  // start with this directory
  cmLocalGenerator *lg = this->MakeLocalGenerator();
  this->Makefiles.push_back(lg->GetMakefile());
  this->LocalGenerators.push_back(lg);

  // set the Start directories
  lg->GetMakefile()->SetCurrentSourceDirectory
    (this->CMakeInstance->GetHomeDirectory());
  lg->GetMakefile()->SetCurrentBinaryDirectory
    (this->CMakeInstance->GetHomeOutputDirectory());

  this->BinaryDirectories.insert(
      this->CMakeInstance->GetHomeOutputDirectory());

  // now do it
  lg->GetMakefile()->Configure();
  lg->GetMakefile()->EnforceDirectoryLevelRules();

  // update the cache entry for the number of local generators, this is used
  // for progress
  char num[100];
  sprintf(num,""%d"",static_cast<int>(this->LocalGenerators.size()));
  this->GetCMakeInstance()->AddCacheEntry
    (""CMAKE_NUMBER_OF_LOCAL_GENERATORS"", num,
     ""number of local generators"", cmState::INTERNAL);

  // check for link libraries and include directories containing ""NOTFOUND""
  // and for infinite loops
  this->CheckLocalGenerators();

  // at this point this->LocalGenerators has been filled,
  // so create the map from project name to vector of local generators
  this->FillProjectMap();

  if ( this->CMakeInstance->GetWorkingMode() == cmake::NORMAL_MODE)
    {
    std::ostringstream msg;
    if(cmSystemTools::GetErrorOccuredFlag())
      {
      msg << ""Configuring incomplete, errors occurred!"";
      const char* logs[] = {""CMakeOutput.log"", ""CMakeError.log"", 0};
      for(const char** log = logs; *log; ++log)
        {
        std::string f = this->CMakeInstance->GetHomeOutputDirectory();
        f += this->CMakeInstance->GetCMakeFilesDirectory();
        f += ""/"";
        f += *log;
        if(cmSystemTools::FileExists(f.c_str()))
          {
          msg << ""\nSee also \"""" << f << ""\""."";
          }
        }
      }
    else
      {
      msg << ""Configuring done"";
      }
    this->CMakeInstance->UpdateProgress(msg.str().c_str(), -1);
    }

  unsigned int i;

  // Put a copy of each global target in every directory.
  cmTargets globalTargets;
  this->CreateDefaultGlobalTargets(&globalTargets);

  for (i = 0; i < this->LocalGenerators.size(); ++i)
    {
    cmMakefile* mf = this->LocalGenerators[i]->GetMakefile();
    cmTargets* targets = &(mf->GetTargets());
    cmTargets::iterator tit;
    for ( tit = globalTargets.begin(); tit != globalTargets.end(); ++ tit )
      {
      (*targets)[tit->first] = tit->second;
      (*targets)[tit->first].SetMakefile(mf);
      }
    }

}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_594.cpp,"[3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 189, 0, 0, 10, 11, 0, 0, 9, 15, 0, 0, 0, 0, 6, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 0, 66, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 5, 0, 6, 3, 1, 0, 41, 0, 0, 23, 0, 19, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_594.cpp,26,"[""char *"", ""string"", ""bool""]",[]
d0915bc86f294707411ae525e70fa20965f1aeec,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_719.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_719.cpp,217,231,224,253,,"fprintf(stdout, ""Output on stdout before grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_597.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_597.cpp,"{
  (void)argc; (void)argv;
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* TODO: Instead of closing pipes here leave them open to make sure
     the grandparent can stop listening when the parent exits.  This
     part of the test cannot be enabled until the feature is
     implemented.  */
  fclose(stdout);
  fclose(stderr);
#if defined(_WIN32)
  Sleep(15000);
#else
  sleep(15);
#endif
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_597.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 10, 0, 11, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_597.cpp,18,[],[]
d0915bc86f294707411ae525e70fa20965f1aeec,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_719.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_719.cpp,217,231,224,254,,"fprintf(stderr, ""Output on stderr before grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_598.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_598.cpp,"{
  (void)argc; (void)argv;
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* TODO: Instead of closing pipes here leave them open to make sure
     the grandparent can stop listening when the parent exits.  This
     part of the test cannot be enabled until the feature is
     implemented.  */
  fclose(stdout);
  fclose(stderr);
#if defined(_WIN32)
  Sleep(15000);
#else
  sleep(15);
#endif
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_598.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 10, 0, 11, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_598.cpp,18,[],[]
d0915bc86f294707411ae525e70fa20965f1aeec,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_719.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_719.cpp,217,231,224,264,,"fprintf(stdout, ""Output on stdout after grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_599.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_599.cpp,"{
  (void)argc; (void)argv;
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* TODO: Instead of closing pipes here leave them open to make sure
     the grandparent can stop listening when the parent exits.  This
     part of the test cannot be enabled until the feature is
     implemented.  */
  fclose(stdout);
  fclose(stderr);
#if defined(_WIN32)
  Sleep(15000);
#else
  sleep(15);
#endif
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_599.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 10, 0, 11, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_599.cpp,18,[],[]
d0915bc86f294707411ae525e70fa20965f1aeec,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_719.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_719.cpp,217,231,224,265,,"fprintf(stderr, ""Output on stderr after grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_600.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_600.cpp,"{
  (void)argc; (void)argv;
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* TODO: Instead of closing pipes here leave them open to make sure
     the grandparent can stop listening when the parent exits.  This
     part of the test cannot be enabled until the feature is
     implemented.  */
  fclose(stdout);
  fclose(stderr);
#if defined(_WIN32)
  Sleep(15000);
#else
  sleep(15);
#endif
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_600.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 10, 0, 11, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_600.cpp,18,[],[]
d0915bc86f294707411ae525e70fa20965f1aeec,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_719.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_719.cpp,217,231,227,301,,"fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_601.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_601.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_601.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_601.cpp,0,[],[]
d0915bc86f294707411ae525e70fa20965f1aeec,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_719.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_719.cpp,217,231,227,302,,"fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_602.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_602.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_602.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_602.cpp,0,[],[]
d0915bc86f294707411ae525e70fa20965f1aeec,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_719.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_719.cpp,217,231,227,307,,"fprintf(stdout, ""Output on stdout from grandchild after sleep.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_603.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_603.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_603.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_603.cpp,0,[],[]
d0915bc86f294707411ae525e70fa20965f1aeec,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_719.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_719.cpp,217,231,227,308,,"fprintf(stderr, ""Output on stderr from grandchild after sleep.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_604.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_604.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_604.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_604.cpp,0,[],[]
d0915bc86f294707411ae525e70fa20965f1aeec,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_719.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_719.cpp,217,231,227,328,,"fprintf(stdout, ""Output on stdout before grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_605.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_605.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_605.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_605.cpp,0,[],[]
d0915bc86f294707411ae525e70fa20965f1aeec,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_719.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_719.cpp,217,231,227,329,,"fprintf(stderr, ""Output on stderr before grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_606.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_606.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_606.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_606.cpp,0,[],[]
d0915bc86f294707411ae525e70fa20965f1aeec,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_719.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_719.cpp,217,231,227,335,,"fprintf(stdout, ""Output on stdout after grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_607.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_607.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_607.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_607.cpp,0,[],[]
d0915bc86f294707411ae525e70fa20965f1aeec,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_719.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_719.cpp,217,231,227,336,,"fprintf(stderr, ""Output on stderr after grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_608.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_608.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_608.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_608.cpp,0,[],[]
d0915bc86f294707411ae525e70fa20965f1aeec,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_719.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_719.cpp,217,231,227,346,,"fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_609.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_609.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_609.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_609.cpp,0,[],[]
d0915bc86f294707411ae525e70fa20965f1aeec,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_719.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_719.cpp,217,231,227,347,,"fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_610.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_610.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_610.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_610.cpp,0,[],[]
d0915bc86f294707411ae525e70fa20965f1aeec,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_719.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_719.cpp,217,231,227,352,,"fprintf(stdout, ""Output on stdout from grandchild after sleep.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_611.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_611.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_611.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_611.cpp,0,[],[]
d0915bc86f294707411ae525e70fa20965f1aeec,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_297.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_719.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_719.cpp,217,231,227,353,,"fprintf(stderr, ""Output on stderr from grandchild after sleep.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_612.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_612.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_612.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_612.cpp,0,[],[]
1feafc643b1c50fd0fa8171a4170065ca39d4d4c,"KWSys 2015-07-30 (f63febb7)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ f63febb7 | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' c9336bcf..f63febb7
Brad King (1):
      83b4a6b8 Process: Fix conversion warning in testProcess.c

James Johnston (7):
      4cd8846c Process: Remove trailing whitespace in ProcessUNIX.c
      b1c44c58 Process: Refactor sleeping code in testProcess.c.
      faff2ab0 Process: Wait for children to terminate on Ctrl+C.
      ef517b19 Process: Added initial support for process groups.
      906c2cae Process: Added test cases for testing Ctrl+C and process groups.
      52874e6a Process: Fix leaked file descriptor in ProcessUNIX
      f63febb7 Process: Fix error message for startup failure on Windows",[],testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_299.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_730.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_730.cpp,217,231,224,253,,"fprintf(stdout, ""Output on stdout before grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_615.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_615.cpp,"{
  (void)argc; (void)argv;
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* TODO: Instead of closing pipes here leave them open to make sure
     the grandparent can stop listening when the parent exits.  This
     part of the test cannot be enabled until the feature is
     implemented.  */
  fclose(stdout);
  fclose(stderr);
#if defined(_WIN32)
  Sleep(15000);
#else
  sleep(15);
#endif
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_615.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 10, 0, 11, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_615.cpp,18,[],[]
1feafc643b1c50fd0fa8171a4170065ca39d4d4c,"KWSys 2015-07-30 (f63febb7)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ f63febb7 | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' c9336bcf..f63febb7
Brad King (1):
      83b4a6b8 Process: Fix conversion warning in testProcess.c

James Johnston (7):
      4cd8846c Process: Remove trailing whitespace in ProcessUNIX.c
      b1c44c58 Process: Refactor sleeping code in testProcess.c.
      faff2ab0 Process: Wait for children to terminate on Ctrl+C.
      ef517b19 Process: Added initial support for process groups.
      906c2cae Process: Added test cases for testing Ctrl+C and process groups.
      52874e6a Process: Fix leaked file descriptor in ProcessUNIX
      f63febb7 Process: Fix error message for startup failure on Windows",[],testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_299.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_730.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_730.cpp,217,231,224,254,,"fprintf(stderr, ""Output on stderr before grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_616.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_616.cpp,"{
  (void)argc; (void)argv;
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* TODO: Instead of closing pipes here leave them open to make sure
     the grandparent can stop listening when the parent exits.  This
     part of the test cannot be enabled until the feature is
     implemented.  */
  fclose(stdout);
  fclose(stderr);
#if defined(_WIN32)
  Sleep(15000);
#else
  sleep(15);
#endif
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_616.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 10, 0, 11, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_616.cpp,18,[],[]
1feafc643b1c50fd0fa8171a4170065ca39d4d4c,"KWSys 2015-07-30 (f63febb7)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ f63febb7 | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' c9336bcf..f63febb7
Brad King (1):
      83b4a6b8 Process: Fix conversion warning in testProcess.c

James Johnston (7):
      4cd8846c Process: Remove trailing whitespace in ProcessUNIX.c
      b1c44c58 Process: Refactor sleeping code in testProcess.c.
      faff2ab0 Process: Wait for children to terminate on Ctrl+C.
      ef517b19 Process: Added initial support for process groups.
      906c2cae Process: Added test cases for testing Ctrl+C and process groups.
      52874e6a Process: Fix leaked file descriptor in ProcessUNIX
      f63febb7 Process: Fix error message for startup failure on Windows",[],testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_299.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_730.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_730.cpp,217,231,224,264,,"fprintf(stdout, ""Output on stdout after grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_617.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_617.cpp,"{
  (void)argc; (void)argv;
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* TODO: Instead of closing pipes here leave them open to make sure
     the grandparent can stop listening when the parent exits.  This
     part of the test cannot be enabled until the feature is
     implemented.  */
  fclose(stdout);
  fclose(stderr);
#if defined(_WIN32)
  Sleep(15000);
#else
  sleep(15);
#endif
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_617.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 10, 0, 11, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_617.cpp,18,[],[]
1feafc643b1c50fd0fa8171a4170065ca39d4d4c,"KWSys 2015-07-30 (f63febb7)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ f63febb7 | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' c9336bcf..f63febb7
Brad King (1):
      83b4a6b8 Process: Fix conversion warning in testProcess.c

James Johnston (7):
      4cd8846c Process: Remove trailing whitespace in ProcessUNIX.c
      b1c44c58 Process: Refactor sleeping code in testProcess.c.
      faff2ab0 Process: Wait for children to terminate on Ctrl+C.
      ef517b19 Process: Added initial support for process groups.
      906c2cae Process: Added test cases for testing Ctrl+C and process groups.
      52874e6a Process: Fix leaked file descriptor in ProcessUNIX
      f63febb7 Process: Fix error message for startup failure on Windows",[],testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_299.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_730.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_730.cpp,217,231,224,265,,"fprintf(stderr, ""Output on stderr after grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_618.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_618.cpp,"{
  (void)argc; (void)argv;
  fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");
  fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");
  fflush(stdout);
  fflush(stderr);
  /* TODO: Instead of closing pipes here leave them open to make sure
     the grandparent can stop listening when the parent exits.  This
     part of the test cannot be enabled until the feature is
     implemented.  */
  fclose(stdout);
  fclose(stderr);
#if defined(_WIN32)
  Sleep(15000);
#else
  sleep(15);
#endif
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_618.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 10, 0, 11, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_618.cpp,18,[],[]
1feafc643b1c50fd0fa8171a4170065ca39d4d4c,"KWSys 2015-07-30 (f63febb7)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ f63febb7 | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' c9336bcf..f63febb7
Brad King (1):
      83b4a6b8 Process: Fix conversion warning in testProcess.c

James Johnston (7):
      4cd8846c Process: Remove trailing whitespace in ProcessUNIX.c
      b1c44c58 Process: Refactor sleeping code in testProcess.c.
      faff2ab0 Process: Wait for children to terminate on Ctrl+C.
      ef517b19 Process: Added initial support for process groups.
      906c2cae Process: Added test cases for testing Ctrl+C and process groups.
      52874e6a Process: Fix leaked file descriptor in ProcessUNIX
      f63febb7 Process: Fix error message for startup failure on Windows",[],testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_299.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_730.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_730.cpp,217,231,227,302,,"fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_620.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_620.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_620.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_620.cpp,0,[],[]
1feafc643b1c50fd0fa8171a4170065ca39d4d4c,"KWSys 2015-07-30 (f63febb7)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ f63febb7 | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' c9336bcf..f63febb7
Brad King (1):
      83b4a6b8 Process: Fix conversion warning in testProcess.c

James Johnston (7):
      4cd8846c Process: Remove trailing whitespace in ProcessUNIX.c
      b1c44c58 Process: Refactor sleeping code in testProcess.c.
      faff2ab0 Process: Wait for children to terminate on Ctrl+C.
      ef517b19 Process: Added initial support for process groups.
      906c2cae Process: Added test cases for testing Ctrl+C and process groups.
      52874e6a Process: Fix leaked file descriptor in ProcessUNIX
      f63febb7 Process: Fix error message for startup failure on Windows",[],testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_299.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_730.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_730.cpp,217,231,227,328,,"fprintf(stdout, ""Output on stdout before grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_623.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_623.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_623.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_623.cpp,0,[],[]
1feafc643b1c50fd0fa8171a4170065ca39d4d4c,"KWSys 2015-07-30 (f63febb7)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ f63febb7 | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' c9336bcf..f63febb7
Brad King (1):
      83b4a6b8 Process: Fix conversion warning in testProcess.c

James Johnston (7):
      4cd8846c Process: Remove trailing whitespace in ProcessUNIX.c
      b1c44c58 Process: Refactor sleeping code in testProcess.c.
      faff2ab0 Process: Wait for children to terminate on Ctrl+C.
      ef517b19 Process: Added initial support for process groups.
      906c2cae Process: Added test cases for testing Ctrl+C and process groups.
      52874e6a Process: Fix leaked file descriptor in ProcessUNIX
      f63febb7 Process: Fix error message for startup failure on Windows",[],testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_299.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_730.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_730.cpp,217,231,227,329,,"fprintf(stderr, ""Output on stderr before grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_624.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_624.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_624.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_624.cpp,0,[],[]
1feafc643b1c50fd0fa8171a4170065ca39d4d4c,"KWSys 2015-07-30 (f63febb7)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ f63febb7 | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' c9336bcf..f63febb7
Brad King (1):
      83b4a6b8 Process: Fix conversion warning in testProcess.c

James Johnston (7):
      4cd8846c Process: Remove trailing whitespace in ProcessUNIX.c
      b1c44c58 Process: Refactor sleeping code in testProcess.c.
      faff2ab0 Process: Wait for children to terminate on Ctrl+C.
      ef517b19 Process: Added initial support for process groups.
      906c2cae Process: Added test cases for testing Ctrl+C and process groups.
      52874e6a Process: Fix leaked file descriptor in ProcessUNIX
      f63febb7 Process: Fix error message for startup failure on Windows",[],testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_299.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_730.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_730.cpp,217,231,227,335,,"fprintf(stdout, ""Output on stdout after grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_625.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_625.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_625.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_625.cpp,0,[],[]
1feafc643b1c50fd0fa8171a4170065ca39d4d4c,"KWSys 2015-07-30 (f63febb7)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ f63febb7 | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' c9336bcf..f63febb7
Brad King (1):
      83b4a6b8 Process: Fix conversion warning in testProcess.c

James Johnston (7):
      4cd8846c Process: Remove trailing whitespace in ProcessUNIX.c
      b1c44c58 Process: Refactor sleeping code in testProcess.c.
      faff2ab0 Process: Wait for children to terminate on Ctrl+C.
      ef517b19 Process: Added initial support for process groups.
      906c2cae Process: Added test cases for testing Ctrl+C and process groups.
      52874e6a Process: Fix leaked file descriptor in ProcessUNIX
      f63febb7 Process: Fix error message for startup failure on Windows",[],testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_299.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_730.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_730.cpp,217,231,227,336,,"fprintf(stderr, ""Output on stderr after grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_626.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_626.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_626.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_626.cpp,0,[],[]
1feafc643b1c50fd0fa8171a4170065ca39d4d4c,"KWSys 2015-07-30 (f63febb7)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ f63febb7 | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' c9336bcf..f63febb7
Brad King (1):
      83b4a6b8 Process: Fix conversion warning in testProcess.c

James Johnston (7):
      4cd8846c Process: Remove trailing whitespace in ProcessUNIX.c
      b1c44c58 Process: Refactor sleeping code in testProcess.c.
      faff2ab0 Process: Wait for children to terminate on Ctrl+C.
      ef517b19 Process: Added initial support for process groups.
      906c2cae Process: Added test cases for testing Ctrl+C and process groups.
      52874e6a Process: Fix leaked file descriptor in ProcessUNIX
      f63febb7 Process: Fix error message for startup failure on Windows",[],testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_299.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_730.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_730.cpp,217,231,227,346,,"fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_627.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_627.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_627.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_627.cpp,0,[],[]
1feafc643b1c50fd0fa8171a4170065ca39d4d4c,"KWSys 2015-07-30 (f63febb7)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ f63febb7 | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' c9336bcf..f63febb7
Brad King (1):
      83b4a6b8 Process: Fix conversion warning in testProcess.c

James Johnston (7):
      4cd8846c Process: Remove trailing whitespace in ProcessUNIX.c
      b1c44c58 Process: Refactor sleeping code in testProcess.c.
      faff2ab0 Process: Wait for children to terminate on Ctrl+C.
      ef517b19 Process: Added initial support for process groups.
      906c2cae Process: Added test cases for testing Ctrl+C and process groups.
      52874e6a Process: Fix leaked file descriptor in ProcessUNIX
      f63febb7 Process: Fix error message for startup failure on Windows",[],testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_299.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_299.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_730.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_730.cpp,217,231,227,353,,"fprintf(stderr, ""Output on stderr from grandchild after sleep.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_630.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_630.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_630.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_630.cpp,0,[],[]
069aa93b555293679f4b8c07623133ba62a74ee4,"bindexplib: Add support for ""/bigobj"" format objects",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_300.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_300.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_300.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_735.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_735.cpp,209,288,213,292,"fprintf(fout,""EXPORTS \n"");","fprintf(this->FileOut,""EXPORTS \n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_631.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_631.cpp,"{
               fImportFlag = 0;
               fprintf(fout,""EXPORTS \n"");
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_631.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_631.cpp,43,"[""FILE *"", ""string""]","[""int""]"
069aa93b555293679f4b8c07623133ba62a74ee4,"bindexplib: Add support for ""/bigobj"" format objects",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_300.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_300.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_300.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_736.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_736.cpp,228,307,233,313,"fprintf(fout, ""\t%s \t DATA\n"", symbol.c_str());","fprintf(this->FileOut, ""\t%s \t DATA\n"", symbol.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_632.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_632.cpp,"{
                  // Read only (i.e. constants) must be excluded
                  fprintf(fout, ""\t%s \t DATA\n"", symbol.c_str());
               }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_632.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_632.cpp,63,"[""FILE *"", ""string"", ""symbol . c_str_ret""]","[""member"", ""bool"", ""&&""]"
069aa93b555293679f4b8c07623133ba62a74ee4,"bindexplib: Add support for ""/bigobj"" format objects",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_300.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_300.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_300.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_736.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_736.cpp,228,307,237,317,"fprintf(fout, ""\t%s\n"", symbol.c_str());","fprintf(this->FileOut, ""\t%s\n"", symbol.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_633.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_633.cpp,"{
                     fprintf(fout, ""\t%s\n"", symbol.c_str());
                  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_633.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_633.cpp,67,"[""FILE *"", ""string"", ""symbol . c_str_ret""]","[""member"", ""bool"", ""!"", ""||""]"
069aa93b555293679f4b8c07623133ba62a74ee4,"bindexplib: Add support for ""/bigobj"" format objects",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_300.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_300.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_300.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_737.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_737.cpp,252,332,256,336,"fprintf(fout,""IMPORTS \n"");","fprintf(this->FileOut,""IMPORTS \n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_634.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_634.cpp,"{
               fImportFlag = 1;
               fprintf(fout,""IMPORTS \n"");
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_634.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_634.cpp,86,"[""FILE *"", ""string""]","[""int"", ""!""]"
069aa93b555293679f4b8c07623133ba62a74ee4,"bindexplib: Add support for ""/bigobj"" format objects",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_300.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_300.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_300.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_737.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_737.cpp,252,332,258,338,"fprintf(fout, ""\t%s DATA \n"", symbol.c_str()+1);","fprintf(this->FileOut, ""\t%s DATA \n"", symbol.c_str()+1);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_635.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_635.cpp,"{
            symbol = stringTable + pSymbolTable->N.Name.Long;
            while (isspace(symbol[0]))  symbol.erase(0,1);
            if (symbol[0] == '_') symbol.erase(0,1);
            if (!fImportFlag) {
               fImportFlag = 1;
               fprintf(fout,""IMPORTS \n"");
            }
            fprintf(fout, ""\t%s DATA \n"", symbol.c_str()+1);
         }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_635.cpp,"[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 2, 0, 0, 6, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_635.cpp,88,"[""FILE *"", ""string"", ""symbol . c_str_ret""]","[""member"", ""macro"", ""==""]"
de70c922d9c846cf3a6fabfbedd054c02f4b8934,"bindexplib: Teach DumpFile to return errors

This will allow callers to know if it worked.",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_301.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_301.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_301.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_739.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_739.cpp,309,310,311,312,"fprintf(stderr, ""Couldn't open file with CreateFile()\n"");","fprintf(stderr, ""Couldn't open file '%s' with CreateFile()\n"", filename);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_636.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_636.cpp,"{
      fprintf(stderr, ""Couldn't open file with CreateFile()\n"");
      return;
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_636.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_636.cpp,13,"[""unkown"", ""string""]","[""CreateFileW_ret"", ""macro"", ""==""]"
de70c922d9c846cf3a6fabfbedd054c02f4b8934,"bindexplib: Teach DumpFile to return errors

This will allow callers to know if it worked.",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_301.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_301.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_301.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_740.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_740.cpp,346,347,348,349,"printf(""unrecognized file format\n"");","printf(""unrecognized file format in '%s'\n"", filename);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_637.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_637.cpp,"{
      printf(""unrecognized file format in '%s'\n"", filename);
      return false;
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_637.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_637.cpp,50,"[""string"", ""const char *""]","[""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""||"", ""member"", ""null"", ""=="", ""&&"", ""!""]"
4ff09893232b26b5c2961fb1e2a31836cad00a35,bindexplib: Drop code that CMake does not need,[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_303.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_742.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_742.cpp,71,71,263,-1,"fprintf(fout, ""Symbol Table - %X entries  (* = auxillary symbol)\n"",
      cSymbols);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_638.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_638.cpp,"{
   unsigned i;
   PSTR stringTable;
   std::string sectionName;
   std::string sectionCharacter;
   int iSectNum;

   fprintf(fout, ""Symbol Table - %X entries  (* = auxillary symbol)\n"",
      cSymbols);

   fprintf(fout,
      ""Indx Name                 Value    Section    cAux  Type    Storage  Character\n""
      ""---- -------------------- -------- ---------- ----- ------- -------- ---------\n"");

   /*
   * The string table apparently starts right after the symbol table
   */
   stringTable = (PSTR)&pSymbolTable[cSymbols];

   for ( i=0; i < cSymbols; i++ ) {
      fprintf(fout, ""%04X "", i);
      if ( pSymbolTable->N.Name.Short != 0 )
         fprintf(fout, ""%-20.8s"", pSymbolTable->N.ShortName);
      else
         fprintf(fout, ""%-20s"", stringTable + pSymbolTable->N.Name.Long);

      fprintf(fout, "" %08X"", pSymbolTable->Value);

      iSectNum = pSymbolTable->SectionNumber;
      GetSectionName(pSymbolTable, sectionName);
      fprintf(fout, "" sect:%s aux:%X type:%02X st:%s"",
         sectionName.c_str(),
         pSymbolTable->NumberOfAuxSymbols,
         pSymbolTable->Type,
         GetSZStorageClass(pSymbolTable->StorageClass) );

      GetSectionCharacteristics(pSectionHeaders,iSectNum,sectionCharacter);
      fprintf(fout,"" hc: %s \n"",sectionCharacter.c_str());
#if 0
      if ( pSymbolTable->NumberOfAuxSymbols )
         DumpAuxSymbols(pSymbolTable);
#endif

      /*
      * Take into account any aux symbols
      */
      i += pSymbolTable->NumberOfAuxSymbols;
      pSymbolTable += pSymbolTable->NumberOfAuxSymbols;
      pSymbolTable++;
   }
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_638.cpp,"[2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 95, 0, 0, 5, 5, 0, 0, 1, 12, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 0, 2, 1, 1, 0, 13, 0, 0, 15, 0, 32, 2, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_638.cpp,9,"[""FILE *"", ""string"", ""unsigned""]",[]
4ff09893232b26b5c2961fb1e2a31836cad00a35,bindexplib: Drop code that CMake does not need,[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_303.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_742.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_742.cpp,71,71,266,-1,"fprintf(fout,
      ""Indx Name                 Value    Section    cAux  Type    Storage  Character\n""
      ""---- -------------------- -------- ---------- ----- ------- -------- ---------\n"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_639.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_639.cpp,"{
   unsigned i;
   PSTR stringTable;
   std::string sectionName;
   std::string sectionCharacter;
   int iSectNum;

   fprintf(fout, ""Symbol Table - %X entries  (* = auxillary symbol)\n"",
      cSymbols);

   fprintf(fout,
      ""Indx Name                 Value    Section    cAux  Type    Storage  Character\n""
      ""---- -------------------- -------- ---------- ----- ------- -------- ---------\n"");

   /*
   * The string table apparently starts right after the symbol table
   */
   stringTable = (PSTR)&pSymbolTable[cSymbols];

   for ( i=0; i < cSymbols; i++ ) {
      fprintf(fout, ""%04X "", i);
      if ( pSymbolTable->N.Name.Short != 0 )
         fprintf(fout, ""%-20.8s"", pSymbolTable->N.ShortName);
      else
         fprintf(fout, ""%-20s"", stringTable + pSymbolTable->N.Name.Long);

      fprintf(fout, "" %08X"", pSymbolTable->Value);

      iSectNum = pSymbolTable->SectionNumber;
      GetSectionName(pSymbolTable, sectionName);
      fprintf(fout, "" sect:%s aux:%X type:%02X st:%s"",
         sectionName.c_str(),
         pSymbolTable->NumberOfAuxSymbols,
         pSymbolTable->Type,
         GetSZStorageClass(pSymbolTable->StorageClass) );

      GetSectionCharacteristics(pSectionHeaders,iSectNum,sectionCharacter);
      fprintf(fout,"" hc: %s \n"",sectionCharacter.c_str());
#if 0
      if ( pSymbolTable->NumberOfAuxSymbols )
         DumpAuxSymbols(pSymbolTable);
#endif

      /*
      * Take into account any aux symbols
      */
      i += pSymbolTable->NumberOfAuxSymbols;
      pSymbolTable += pSymbolTable->NumberOfAuxSymbols;
      pSymbolTable++;
   }
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_639.cpp,"[2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 95, 0, 0, 5, 5, 0, 0, 1, 12, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 0, 2, 1, 1, 0, 13, 0, 0, 15, 0, 32, 2, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_639.cpp,12,[],[]
4ff09893232b26b5c2961fb1e2a31836cad00a35,bindexplib: Drop code that CMake does not need,[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_303.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_742.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_742.cpp,71,71,276,-1,"fprintf(fout, ""%04X "", i);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_640.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_640.cpp,"{
      fprintf(fout, ""%04X "", i);
      if ( pSymbolTable->N.Name.Short != 0 )
         fprintf(fout, ""%-20.8s"", pSymbolTable->N.ShortName);
      else
         fprintf(fout, ""%-20s"", stringTable + pSymbolTable->N.Name.Long);

      fprintf(fout, "" %08X"", pSymbolTable->Value);

      iSectNum = pSymbolTable->SectionNumber;
      GetSectionName(pSymbolTable, sectionName);
      fprintf(fout, "" sect:%s aux:%X type:%02X st:%s"",
         sectionName.c_str(),
         pSymbolTable->NumberOfAuxSymbols,
         pSymbolTable->Type,
         GetSZStorageClass(pSymbolTable->StorageClass) );

      GetSectionCharacteristics(pSectionHeaders,iSectNum,sectionCharacter);
      fprintf(fout,"" hc: %s \n"",sectionCharacter.c_str());
#if 0
      if ( pSymbolTable->NumberOfAuxSymbols )
         DumpAuxSymbols(pSymbolTable);
#endif

      /*
      * Take into account any aux symbols
      */
      i += pSymbolTable->NumberOfAuxSymbols;
      pSymbolTable += pSymbolTable->NumberOfAuxSymbols;
      pSymbolTable++;
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_640.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 11, 0, 0, 12, 0, 27, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_640.cpp,22,"[""FILE *"", ""string"", ""member""]","[""member"", ""unsigned"", ""<""]"
4ff09893232b26b5c2961fb1e2a31836cad00a35,bindexplib: Drop code that CMake does not need,[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_303.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_742.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_742.cpp,71,71,278,-1,"fprintf(fout, ""%-20.8s"", pSymbolTable->N.ShortName);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_641.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_641.cpp,"fprintf(fout, ""%-20.8s"", pSymbolTable->N.ShortName)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_641.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_641.cpp,24,"[""FILE *"", ""constant"", ""member""]","[""member"", ""null"", ""!=""]"
4ff09893232b26b5c2961fb1e2a31836cad00a35,bindexplib: Drop code that CMake does not need,[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_303.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_742.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_742.cpp,71,71,280,-1,"fprintf(fout, ""%-20s"", stringTable + pSymbolTable->N.Name.Long);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_642.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_642.cpp,"fprintf(fout, ""%-20s"", stringTable + pSymbolTable->N.Name.Long)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_642.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_642.cpp,26,"[""FILE *"", ""string"", ""member""]","[""member"", ""null"", ""!="", ""!""]"
4ff09893232b26b5c2961fb1e2a31836cad00a35,bindexplib: Drop code that CMake does not need,[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_303.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_742.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_742.cpp,71,71,282,-1,"fprintf(fout, "" %08X"", pSymbolTable->Value);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_643.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_643.cpp,"{
      fprintf(fout, ""%04X "", i);
      if ( pSymbolTable->N.Name.Short != 0 )
         fprintf(fout, ""%-20.8s"", pSymbolTable->N.ShortName);
      else
         fprintf(fout, ""%-20s"", stringTable + pSymbolTable->N.Name.Long);

      fprintf(fout, "" %08X"", pSymbolTable->Value);

      iSectNum = pSymbolTable->SectionNumber;
      GetSectionName(pSymbolTable, sectionName);
      fprintf(fout, "" sect:%s aux:%X type:%02X st:%s"",
         sectionName.c_str(),
         pSymbolTable->NumberOfAuxSymbols,
         pSymbolTable->Type,
         GetSZStorageClass(pSymbolTable->StorageClass) );

      GetSectionCharacteristics(pSectionHeaders,iSectNum,sectionCharacter);
      fprintf(fout,"" hc: %s \n"",sectionCharacter.c_str());
#if 0
      if ( pSymbolTable->NumberOfAuxSymbols )
         DumpAuxSymbols(pSymbolTable);
#endif

      /*
      * Take into account any aux symbols
      */
      i += pSymbolTable->NumberOfAuxSymbols;
      pSymbolTable += pSymbolTable->NumberOfAuxSymbols;
      pSymbolTable++;
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_643.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 11, 0, 0, 12, 0, 27, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_643.cpp,28,"[""FILE *"", ""string"", ""member""]","[""member"", ""unsigned"", ""<""]"
4ff09893232b26b5c2961fb1e2a31836cad00a35,bindexplib: Drop code that CMake does not need,[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_303.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_742.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_742.cpp,71,71,286,-1,"fprintf(fout, "" sect:%s aux:%X type:%02X st:%s"",
         sectionName.c_str(),
         pSymbolTable->NumberOfAuxSymbols,
         pSymbolTable->Type,
         GetSZStorageClass(pSymbolTable->StorageClass) );",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_644.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_644.cpp,"{
      fprintf(fout, ""%04X "", i);
      if ( pSymbolTable->N.Name.Short != 0 )
         fprintf(fout, ""%-20.8s"", pSymbolTable->N.ShortName);
      else
         fprintf(fout, ""%-20s"", stringTable + pSymbolTable->N.Name.Long);

      fprintf(fout, "" %08X"", pSymbolTable->Value);

      iSectNum = pSymbolTable->SectionNumber;
      GetSectionName(pSymbolTable, sectionName);
      fprintf(fout, "" sect:%s aux:%X type:%02X st:%s"",
         sectionName.c_str(),
         pSymbolTable->NumberOfAuxSymbols,
         pSymbolTable->Type,
         GetSZStorageClass(pSymbolTable->StorageClass) );

      GetSectionCharacteristics(pSectionHeaders,iSectNum,sectionCharacter);
      fprintf(fout,"" hc: %s \n"",sectionCharacter.c_str());
#if 0
      if ( pSymbolTable->NumberOfAuxSymbols )
         DumpAuxSymbols(pSymbolTable);
#endif

      /*
      * Take into account any aux symbols
      */
      i += pSymbolTable->NumberOfAuxSymbols;
      pSymbolTable += pSymbolTable->NumberOfAuxSymbols;
      pSymbolTable++;
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_644.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 11, 0, 0, 12, 0, 27, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_644.cpp,32,"[""FILE *"", ""string"", ""sectionName . c_str_ret"", ""member"", ""member"", ""GetSZStorageClass_ret""]","[""member"", ""unsigned"", ""<""]"
4ff09893232b26b5c2961fb1e2a31836cad00a35,bindexplib: Drop code that CMake does not need,[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_303.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_742.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_742.cpp,71,71,293,-1,"fprintf(fout,"" hc: %s \n"",sectionCharacter.c_str());",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_645.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_645.cpp,"{
      fprintf(fout, ""%04X "", i);
      if ( pSymbolTable->N.Name.Short != 0 )
         fprintf(fout, ""%-20.8s"", pSymbolTable->N.ShortName);
      else
         fprintf(fout, ""%-20s"", stringTable + pSymbolTable->N.Name.Long);

      fprintf(fout, "" %08X"", pSymbolTable->Value);

      iSectNum = pSymbolTable->SectionNumber;
      GetSectionName(pSymbolTable, sectionName);
      fprintf(fout, "" sect:%s aux:%X type:%02X st:%s"",
         sectionName.c_str(),
         pSymbolTable->NumberOfAuxSymbols,
         pSymbolTable->Type,
         GetSZStorageClass(pSymbolTable->StorageClass) );

      GetSectionCharacteristics(pSectionHeaders,iSectNum,sectionCharacter);
      fprintf(fout,"" hc: %s \n"",sectionCharacter.c_str());
#if 0
      if ( pSymbolTable->NumberOfAuxSymbols )
         DumpAuxSymbols(pSymbolTable);
#endif

      /*
      * Take into account any aux symbols
      */
      i += pSymbolTable->NumberOfAuxSymbols;
      pSymbolTable += pSymbolTable->NumberOfAuxSymbols;
      pSymbolTable++;
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_645.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 11, 0, 0, 12, 0, 27, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_645.cpp,39,"[""FILE *"", ""string"", ""sectionCharacter . c_str_ret""]","[""member"", ""unsigned"", ""<""]"
4ff09893232b26b5c2961fb1e2a31836cad00a35,bindexplib: Drop code that CMake does not need,[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_303.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_742.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_742.cpp,71,71,340,-1,"fprintf(fout, ""\t%s\n"", symbol.c_str());",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_646.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_646.cpp,"{
            if (pSymbolTable->N.Name.Short != 0) {
               symbol = """";
               symbol.insert(0, (const char *)(pSymbolTable->N.ShortName), 8);
            } else {
               symbol = stringTable + pSymbolTable->N.Name.Long;
            }
            std::string::size_type posAt = symbol.find('@');
            if (posAt != std::string::npos) symbol.erase(posAt);
#ifndef _MSC_VER
            fprintf(fout, ""\t%s\n"", symbol.c_str());
#else
            fprintf(fout, ""\t%s\n"", symbol.c_str()+1);
#endif
         }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_646.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 49, 0, 0, 1, 1, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 2, 0, 7, 0, 0, 6, 0, 11, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_646.cpp,24,"[""FILE *"", ""string"", ""symbol . c_str_ret""]","[""member"", ""macro"", ""==""]"
4ff09893232b26b5c2961fb1e2a31836cad00a35,bindexplib: Drop code that CMake does not need,[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_303.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_745.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_745.cpp,627,330,697,-1,"fprintf(fout, ""CODE PRELOAD MOVEABLE DISCARDABLE\n"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_651.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_651.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_651.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_651.cpp,0,[],[]
4ff09893232b26b5c2961fb1e2a31836cad00a35,bindexplib: Drop code that CMake does not need,[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_303.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_303.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_745.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_745.cpp,627,330,721,-1,"fprintf(stderr, ""%s\n"", line.c_str());",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_654.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_654.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_654.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_654.cpp,0,[],[]
59e21ffa134faf0b089d9a704b3763e7f6f237d5,Port static calls from cmLocalGenerator to cmOutputConverter.,[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_306.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_306.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_306.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_748.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_748.cpp,322,322,323,323,"fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              cmLocalGenerator::EscapeForCMake(flags?flags:"""").c_str());","fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              cmOutputConverter::EscapeForCMake(flags?flags:"""").c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_656.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_656.cpp,"{
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags);
      fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              cmLocalGenerator::EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""set(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_656.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 31, 0, 0, 2, 2, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 8, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_656.cpp,302,"[""FILE *"", ""string"", ""li -> c_str_ret"", ""cmLocalGenerator :: EscapeForCMake ( flags ? flags : \""\"" ) . c_str_ret""]","[""testLangs . begin_ret"", ""testLangs . end_ret"", ""!=""]"
59e21ffa134faf0b089d9a704b3763e7f6f237d5,Port static calls from cmLocalGenerator to cmOutputConverter.,[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_306.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_306.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_306.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_749.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_749.cpp,355,355,356,356,"fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS %s)\n"",
                cmLocalGenerator::EscapeForCMake(
                    exeLinkFlags ? exeLinkFlags : """").c_str());","fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS %s)\n"",
                cmOutputConverter::EscapeForCMake(
                    exeLinkFlags ? exeLinkFlags : """").c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_657.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_657.cpp,"{
        const char* exeLinkFlags =
          this->Makefile->GetDefinition(""CMAKE_EXE_LINKER_FLAGS"");
        fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS %s)\n"",
                cmLocalGenerator::EscapeForCMake(
                    exeLinkFlags ? exeLinkFlags : """").c_str());
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_657.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 14, 0, 0, 1, 1, 0, 0, 1, 3, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 4, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_657.cpp,335,"[""FILE *"", ""string"", ""cmLocalGenerator :: EscapeForCMake ( exeLinkFlags ? exeLinkFlags : \""\"" ) . c_str_ret""]","[""this -> Makefile -> GetPolicyStatus_ret""]"
9486769866661e3aa76dd588ca5a7466e2969dc3,Don't use a cmLocalGenerator instance to call static methods.,[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_308.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_308.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_308.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_751.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_751.cpp,323,322,324,323,"fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              lg->EscapeForCMake(flags?flags:"""").c_str());","fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              cmLocalGenerator::EscapeForCMake(flags?flags:"""").c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_658.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_658.cpp,"{
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags);
      fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              lg->EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""set(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_658.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 31, 0, 0, 2, 2, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 8, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_658.cpp,303,"[""FILE *"", ""string"", ""li -> c_str_ret"", ""lg -> EscapeForCMake ( flags ? flags : \""\"" ) . c_str_ret""]","[""testLangs . begin_ret"", ""testLangs . end_ret"", ""!=""]"
9486769866661e3aa76dd588ca5a7466e2969dc3,Don't use a cmLocalGenerator instance to call static methods.,[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_308.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_308.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_308.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_752.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_752.cpp,356,355,357,356,"fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS %s)\n"",
                lg->EscapeForCMake(exeLinkFlags?exeLinkFlags:"""").c_str());","fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS %s)\n"",
                cmLocalGenerator::EscapeForCMake(
                    exeLinkFlags ? exeLinkFlags : """").c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_659.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_659.cpp,"{
        const char* exeLinkFlags =
          this->Makefile->GetDefinition(""CMAKE_EXE_LINKER_FLAGS"");
        fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS %s)\n"",
                lg->EscapeForCMake(exeLinkFlags?exeLinkFlags:"""").c_str());
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_659.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 14, 0, 0, 1, 1, 0, 0, 1, 3, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 4, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_659.cpp,336,"[""FILE *"", ""string"", ""lg -> EscapeForCMake ( exeLinkFlags ? exeLinkFlags : \""\"" ) . c_str_ret""]","[""this -> Makefile -> GetPolicyStatus_ret""]"
8521fdf56e4908676c28c6bbdda3f1fb2284d3d7,"Makefile: Fix output during parallel builds (#12991)

Replace use of separate ""cmake -E cmake_progress_report"" and ""cmake -E
cmake_echo_color"" commands to report the progress and message portions
of build output lines with --progress-* options to the latter to print
everything with a single command.  The line buffering of the stdout FILE
stream should cause the whole line to be printed with one atomic write.
This will avoid inter-mixing of line-wise messages from different
processes during a parallel build.",[u'https://gitlab.kitware.com/cmake/cmake/issues/12991'],Source/cmcmd.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_313.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_313.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_313.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_759.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_759.cpp,534,534,567,-1,"fprintf(progFile,""empty"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_660.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_660.cpp,"{
          fprintf(progFile,""empty"");
          fclose(progFile);
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_660.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_660.cpp,426,"[""cmsys :: SystemTools :: Fopen_ret"", ""string""]","[""cmsys :: SystemTools :: Fopen_ret""]"
8521fdf56e4908676c28c6bbdda3f1fb2284d3d7,"Makefile: Fix output during parallel builds (#12991)

Replace use of separate ""cmake -E cmake_progress_report"" and ""cmake -E
cmake_echo_color"" commands to report the progress and message portions
of build output lines with --progress-* options to the latter to print
everything with a single command.  The line buffering of the stdout FILE
stream should cause the whole line to be printed with one atomic write.
This will avoid inter-mixing of line-wise messages from different
processes during a parallel build.",[u'https://gitlab.kitware.com/cmake/cmake/issues/12991'],Source/cmcmd.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_313.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_313.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_313.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_759.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_759.cpp,534,534,576,-1,"fprintf(stdout,""[%3i%%] "",((fileNum-3)*100)/count);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_661.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_661.cpp,"{
        // print the progress
        fprintf(stdout,""[%3i%%] "",((fileNum-3)*100)/count);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_661.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_661.cpp,435,"[""unkown"", ""string"", ""int""]","[""int"", ""null"", "">""]"
8521fdf56e4908676c28c6bbdda3f1fb2284d3d7,"Makefile: Fix output during parallel builds (#12991)

Replace use of separate ""cmake -E cmake_progress_report"" and ""cmake -E
cmake_echo_color"" commands to report the progress and message portions
of build output lines with --progress-* options to the latter to print
everything with a single command.  The line buffering of the stdout FILE
stream should cause the whole line to be printed with one atomic write.
This will avoid inter-mixing of line-wise messages from different
processes during a parallel build.",[u'https://gitlab.kitware.com/cmake/cmake/issues/12991'],Source/cmcmd.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_313.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_313.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_313.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_760.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_760.cpp,987,948,989,988,,"fprintf(progFile,""empty"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_662.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_662.cpp,"int cmcmd::ExecuteEchoColor(std::vector<std::string>& args)
{
  // The arguments are
  //   argv[0] == <cmake-executable>
  //   argv[1] == cmake_echo_color

  bool enabled = true;
  int color = cmsysTerminal_Color_Normal;
  bool newline = true;
  for(unsigned int i=2; i < args.size(); ++i)
    {
    if(args[i].find(""--switch="") == 0)
      {
      // Enable or disable color based on the switch value.
      std::string value = args[i].substr(9);
      if(!value.empty())
        {
        if(cmSystemTools::IsOn(value.c_str()))
          {
          enabled = true;
          }
        else
          {
          enabled = false;
          }
        }
      }
    else if(args[i] == ""--normal"")
      {
      color = cmsysTerminal_Color_Normal;
      }
    else if(args[i] == ""--black"")
      {
      color = cmsysTerminal_Color_ForegroundBlack;
      }
    else if(args[i] == ""--red"")
      {
      color = cmsysTerminal_Color_ForegroundRed;
      }
    else if(args[i] == ""--green"")
      {
      color = cmsysTerminal_Color_ForegroundGreen;
      }
    else if(args[i] == ""--yellow"")
      {
      color = cmsysTerminal_Color_ForegroundYellow;
      }
    else if(args[i] == ""--blue"")
      {
      color = cmsysTerminal_Color_ForegroundBlue;
      }
    else if(args[i] == ""--magenta"")
      {
      color = cmsysTerminal_Color_ForegroundMagenta;
      }
    else if(args[i] == ""--cyan"")
      {
      color = cmsysTerminal_Color_ForegroundCyan;
      }
    else if(args[i] == ""--white"")
      {
      color = cmsysTerminal_Color_ForegroundWhite;
      }
    else if(args[i] == ""--bold"")
      {
      color |= cmsysTerminal_Color_ForegroundBold;
      }
    else if(args[i] == ""--no-newline"")
      {
      newline = false;
      }
    else if(args[i] == ""--newline"")
      {
      newline = true;
      }
    else
      {
      // Color is enabled.  Print with the current color.
      cmSystemTools::MakefileColorEcho(color, args[i].c_str(),
                                       newline, enabled);
      }
    }

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_662.cpp,"[15, 0, 1, 0, 0, 0, 1, 0, 0, 0, 19, 0, 0, 0, 0, 118, 0, 0, 4, 6, 0, 1, 6, 23, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 15, 0, 16, 15, 2, 0, 9, 1, 0, 15, 12, 8, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_662.cpp,0,[],[]
8521fdf56e4908676c28c6bbdda3f1fb2284d3d7,"Makefile: Fix output during parallel builds (#12991)

Replace use of separate ""cmake -E cmake_progress_report"" and ""cmake -E
cmake_echo_color"" commands to report the progress and message portions
of build output lines with --progress-* options to the latter to print
everything with a single command.  The line buffering of the stdout FILE
stream should cause the whole line to be printed with one atomic write.
This will avoid inter-mixing of line-wise messages from different
processes during a parallel build.",[u'https://gitlab.kitware.com/cmake/cmake/issues/12991'],Source/cmcmd.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_313.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_313.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_313.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_760.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_760.cpp,987,948,989,1004,,"fprintf(stdout,""[%3i%%] "",((fileNum-3)*100)/count);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_663.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_663.cpp,"int cmcmd::ExecuteEchoColor(std::vector<std::string>& args)
{
  // The arguments are
  //   argv[0] == <cmake-executable>
  //   argv[1] == cmake_echo_color

  bool enabled = true;
  int color = cmsysTerminal_Color_Normal;
  bool newline = true;
  for(unsigned int i=2; i < args.size(); ++i)
    {
    if(args[i].find(""--switch="") == 0)
      {
      // Enable or disable color based on the switch value.
      std::string value = args[i].substr(9);
      if(!value.empty())
        {
        if(cmSystemTools::IsOn(value.c_str()))
          {
          enabled = true;
          }
        else
          {
          enabled = false;
          }
        }
      }
    else if(args[i] == ""--normal"")
      {
      color = cmsysTerminal_Color_Normal;
      }
    else if(args[i] == ""--black"")
      {
      color = cmsysTerminal_Color_ForegroundBlack;
      }
    else if(args[i] == ""--red"")
      {
      color = cmsysTerminal_Color_ForegroundRed;
      }
    else if(args[i] == ""--green"")
      {
      color = cmsysTerminal_Color_ForegroundGreen;
      }
    else if(args[i] == ""--yellow"")
      {
      color = cmsysTerminal_Color_ForegroundYellow;
      }
    else if(args[i] == ""--blue"")
      {
      color = cmsysTerminal_Color_ForegroundBlue;
      }
    else if(args[i] == ""--magenta"")
      {
      color = cmsysTerminal_Color_ForegroundMagenta;
      }
    else if(args[i] == ""--cyan"")
      {
      color = cmsysTerminal_Color_ForegroundCyan;
      }
    else if(args[i] == ""--white"")
      {
      color = cmsysTerminal_Color_ForegroundWhite;
      }
    else if(args[i] == ""--bold"")
      {
      color |= cmsysTerminal_Color_ForegroundBold;
      }
    else if(args[i] == ""--no-newline"")
      {
      newline = false;
      }
    else if(args[i] == ""--newline"")
      {
      newline = true;
      }
    else
      {
      // Color is enabled.  Print with the current color.
      cmSystemTools::MakefileColorEcho(color, args[i].c_str(),
                                       newline, enabled);
      }
    }

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_663.cpp,"[15, 0, 1, 0, 0, 0, 1, 0, 0, 0, 19, 0, 0, 0, 0, 118, 0, 0, 4, 6, 0, 1, 6, 23, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 15, 0, 16, 15, 2, 0, 9, 1, 0, 15, 12, 8, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_663.cpp,0,[],[]
3fe5d9bff98b4716e219516c30d71462495324f4,"curl 7.38.0 (reduced)

Extract upstream curl using the following shell code.

url=git://github.com/bagder/curl.git &&
v=7.38.0 &&
r=202aa9f7 &&
paths=""
  CMake/*
  CMakeLists.txt
  COPYING
  include/curl/*.h
  include/curl/curlbuild.h.cmake
  lib/*.c
  lib/*.h
  lib/CMakeLists.txt
  lib/Makefile.inc
  lib/curl_config.h.cmake
  lib/libcurl.rc
  lib/vtls/*.c
  lib/vtls/*.h
"" &&
mkdir curl-$v-g$r-reduced &&
git clone $url curl-git &&
date=$(cd curl-git && git log -n 1 --format='%cd' $r) &&
(cd curl-git && git checkout $r &&
 git archive --format=tar $r -- $paths) |
(cd curl-$v-g$r-reduced && tar xv &&
 rm lib/config-*.h) &&
echo ""g$r date: $date""",[],lib/connect.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_320.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_320.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_320.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_772.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_772.cpp,451,502,537,640,,"snprintf(addr, MAX_IPADR_LEN, ""%s"", su->sun_path);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_665.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_665.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_665.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_665.cpp,0,[],[]
60c783676c91ff1ded2ed5e6fd50d0f9664032e5,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/Directory.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_322.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_322.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_322.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_775.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_775.cpp,112,112,118,118,"sprintf(buf, ""%s*"", name);","sprintf(buf, ""%s*"", name.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_666.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_666.cpp,"{
    buf = new char[n + 1 + 1];
    sprintf(buf, ""%s*"", name);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_666.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_666.cpp,13,"[""int"", ""string"", ""const char *""]","[""member"", ""char"", ""=="", ""member"", ""char"", ""=="", ""||""]"
60c783676c91ff1ded2ed5e6fd50d0f9664032e5,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/Directory.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_322.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_322.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_322.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_775.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_775.cpp,112,112,127,127,"sprintf(buf, ""%s\\*"", name);","sprintf(buf, ""%s\\*"", name.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_667.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_667.cpp,"{
      sprintf(buf, ""%s\\*"", name);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_667.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_667.cpp,22,"[""int"", ""string"", ""const char *""]","[""strchr_ret""]"
60c783676c91ff1ded2ed5e6fd50d0f9664032e5,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/Directory.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_322.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_322.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_322.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_775.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_775.cpp,112,112,131,131,"sprintf(buf, ""%s/*"", name);","sprintf(buf, ""%s/*"", name.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_668.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_668.cpp,"{
      sprintf(buf, ""%s/*"", name);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_668.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_668.cpp,26,"[""int"", ""string"", ""const char *""]","[""strchr_ret"", ""!""]"
60c783676c91ff1ded2ed5e6fd50d0f9664032e5,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/Directory.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_322.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_322.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_322.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_776.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_776.cpp,153,153,167,167,"sprintf(buf, ""%s*"", name);","sprintf(buf, ""%s*"", name.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_669.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_669.cpp,"{
    buf = new char[n + 1 + 1];
    sprintf(buf, ""%s*"", name);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_669.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_669.cpp,12,"[""int"", ""string"", ""const char *""]","[""member"", ""char"", ""==""]"
60c783676c91ff1ded2ed5e6fd50d0f9664032e5,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/Directory.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_322.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_322.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_322.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_776.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_776.cpp,153,153,172,172,"sprintf(buf, ""%s/*"", name);","sprintf(buf, ""%s/*"", name.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_670.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_670.cpp,"{
    buf = new char[n + 2 + 1];
    sprintf(buf, ""%s/*"", name);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_670.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_670.cpp,17,"[""int"", ""string"", ""const char *""]","[""member"", ""char"", ""=="", ""!""]"
158c6d1cffe863fde284d4e5eeeb8129d40ce0e9,"KWSys 2014-08-04 (e787837a)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ e787837a | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' 65b36ede..e787837a
Ben Boeckel (4):
      9927862c SystemTools: more string replacements
      b3d598b0 strings: remove unnecessary c_str calls
      ffe94132 SystemTools: use char instead of const char*
      f29fec7c Directory: accept strings in methods

Rashad M (1):
      e787837a SharedForward: Cast away const to call execvp on MinGW 64-bit

Change-Id: I96437b332971670cfcd953717c5563e9ba0f2b99",[],Directory.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_323.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_323.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_323.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_777.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_777.cpp,112,112,118,118,"sprintf(buf, ""%s*"", name);","sprintf(buf, ""%s*"", name.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_671.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_671.cpp,"{
    buf = new char[n + 1 + 1];
    sprintf(buf, ""%s*"", name);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_671.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_671.cpp,13,"[""int"", ""string"", ""const char *""]","[""member"", ""char"", ""=="", ""member"", ""char"", ""=="", ""||""]"
158c6d1cffe863fde284d4e5eeeb8129d40ce0e9,"KWSys 2014-08-04 (e787837a)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ e787837a | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' 65b36ede..e787837a
Ben Boeckel (4):
      9927862c SystemTools: more string replacements
      b3d598b0 strings: remove unnecessary c_str calls
      ffe94132 SystemTools: use char instead of const char*
      f29fec7c Directory: accept strings in methods

Rashad M (1):
      e787837a SharedForward: Cast away const to call execvp on MinGW 64-bit

Change-Id: I96437b332971670cfcd953717c5563e9ba0f2b99",[],Directory.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_323.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_323.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_323.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_777.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_777.cpp,112,112,127,127,"sprintf(buf, ""%s\\*"", name);","sprintf(buf, ""%s\\*"", name.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_672.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_672.cpp,"{
      sprintf(buf, ""%s\\*"", name);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_672.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_672.cpp,22,"[""int"", ""string"", ""const char *""]","[""strchr_ret""]"
158c6d1cffe863fde284d4e5eeeb8129d40ce0e9,"KWSys 2014-08-04 (e787837a)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ e787837a | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' 65b36ede..e787837a
Ben Boeckel (4):
      9927862c SystemTools: more string replacements
      b3d598b0 strings: remove unnecessary c_str calls
      ffe94132 SystemTools: use char instead of const char*
      f29fec7c Directory: accept strings in methods

Rashad M (1):
      e787837a SharedForward: Cast away const to call execvp on MinGW 64-bit

Change-Id: I96437b332971670cfcd953717c5563e9ba0f2b99",[],Directory.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_323.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_323.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_323.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_777.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_777.cpp,112,112,131,131,"sprintf(buf, ""%s/*"", name);","sprintf(buf, ""%s/*"", name.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_673.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_673.cpp,"{
      sprintf(buf, ""%s/*"", name);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_673.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_673.cpp,26,"[""int"", ""string"", ""const char *""]","[""strchr_ret"", ""!""]"
158c6d1cffe863fde284d4e5eeeb8129d40ce0e9,"KWSys 2014-08-04 (e787837a)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ e787837a | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' 65b36ede..e787837a
Ben Boeckel (4):
      9927862c SystemTools: more string replacements
      b3d598b0 strings: remove unnecessary c_str calls
      ffe94132 SystemTools: use char instead of const char*
      f29fec7c Directory: accept strings in methods

Rashad M (1):
      e787837a SharedForward: Cast away const to call execvp on MinGW 64-bit

Change-Id: I96437b332971670cfcd953717c5563e9ba0f2b99",[],Directory.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_323.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_323.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_323.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_778.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_778.cpp,153,153,167,167,"sprintf(buf, ""%s*"", name);","sprintf(buf, ""%s*"", name.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_674.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_674.cpp,"{
    buf = new char[n + 1 + 1];
    sprintf(buf, ""%s*"", name);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_674.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_674.cpp,12,"[""int"", ""string"", ""const char *""]","[""member"", ""char"", ""==""]"
158c6d1cffe863fde284d4e5eeeb8129d40ce0e9,"KWSys 2014-08-04 (e787837a)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ e787837a | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' 65b36ede..e787837a
Ben Boeckel (4):
      9927862c SystemTools: more string replacements
      b3d598b0 strings: remove unnecessary c_str calls
      ffe94132 SystemTools: use char instead of const char*
      f29fec7c Directory: accept strings in methods

Rashad M (1):
      e787837a SharedForward: Cast away const to call execvp on MinGW 64-bit

Change-Id: I96437b332971670cfcd953717c5563e9ba0f2b99",[],Directory.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_323.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_323.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_323.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_778.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_778.cpp,153,153,172,172,"sprintf(buf, ""%s/*"", name);","sprintf(buf, ""%s/*"", name.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_675.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_675.cpp,"{
    buf = new char[n + 2 + 1];
    sprintf(buf, ""%s/*"", name);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_675.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_675.cpp,17,"[""int"", ""string"", ""const char *""]","[""member"", ""char"", ""=="", ""!""]"
71c981a213a463d05b4bdc73dfb445c80ce2a476,"Encoding: Fix potential encoding issues with libarchive on Windows.

Because the 8bit string encoding in libarchive can be different than
the 8bit string encoding in CMake, change to call the wide version
of libarchive functions.  They are different if CMake is configured
to use UTF-8 as the internal encoding.

Create helper functions for some libarchive calls to use wstring
internally on platforms supporting it.",[],Source/cmSystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_324.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_324.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_324.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_779.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_779.cpp,1581,1606,1583,1608,"fprintf(out, ""%s"", archive_entry_pathname(entry));","fprintf(out, ""%s"", cm_archive_entry_pathname(entry).c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_676.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_676.cpp,"{
  char                   tmp[100];
  size_t                         w;
  const char            *p;
  const char            *fmt;
  time_t                         tim;
  static time_t          now;
  size_t u_width = 6;
  size_t gs_width = 13;

  /*
   * We avoid collecting the entire list in memory at once by
   * listing things as we see them.  However, that also means we can't
   * just pre-compute the field widths.  Instead, we start with guesses
   * and just widen them as necessary.  These numbers are completely
   * arbitrary.
   */
  if (!now)
    {
    time(&now);
    }
  fprintf(out, ""%s %d "",
          archive_entry_strmode(entry),
          archive_entry_nlink(entry));

  /* Use uname if it's present, else uid. */
  p = archive_entry_uname(entry);
  if ((p == NULL) || (*p == '\0'))
    {
    sprintf(tmp, ""%lu "",
            (unsigned long)archive_entry_uid(entry));
    p = tmp;
    }
  w = strlen(p);
  if (w > u_width)
    {
    u_width = w;
    }
  fprintf(out, ""%-*s "", (int)u_width, p);
  /* Use gname if it's present, else gid. */
  p = archive_entry_gname(entry);
  if (p != NULL && p[0] != '\0')
    {
    fprintf(out, ""%s"", p);
    w = strlen(p);
    }
  else
    {
    sprintf(tmp, ""%lu"",
            (unsigned long)archive_entry_gid(entry));
    w = strlen(tmp);
    fprintf(out, ""%s"", tmp);
    }

  /*
   * Print device number or file size, right-aligned so as to make
   * total width of group and devnum/filesize fields be gs_width.
   * If gs_width is too small, grow it.
   */
  if (archive_entry_filetype(entry) == AE_IFCHR
      || archive_entry_filetype(entry) == AE_IFBLK)
    {
    sprintf(tmp, ""%lu,%lu"",
            (unsigned long)archive_entry_rdevmajor(entry),
            (unsigned long)archive_entry_rdevminor(entry));
    }
  else
    {
    /*
     * Note the use of platform-dependent macros to format
     * the filesize here.  We need the format string and the
     * corresponding type for the cast.
     */
    sprintf(tmp, BSDTAR_FILESIZE_PRINTF,
            (BSDTAR_FILESIZE_TYPE)archive_entry_size(entry));
    }
  if (w + strlen(tmp) >= gs_width)
    {
    gs_width = w+strlen(tmp)+1;
    }
  fprintf(out, ""%*s"", (int)(gs_width - w), tmp);

  /* Format the time using 'ls -l' conventions. */
  tim = archive_entry_mtime(entry);
#define HALF_YEAR (time_t)365 * 86400 / 2
#if defined(_WIN32) && !defined(__CYGWIN__)
  /* Windows' strftime function does not support %e format. */
#define DAY_FMT  ""%d""
#else
#define DAY_FMT  ""%e""  /* Day number without leading zeros */
#endif
  if (tim < now - HALF_YEAR || tim > now + HALF_YEAR)
    {
    fmt = DAY_FMT "" %b  %Y"";
    }
  else
    {
    fmt = DAY_FMT "" %b %H:%M"";
    }
  strftime(tmp, sizeof(tmp), fmt, localtime(&tim));
  fprintf(out, "" %s "", tmp);
  fprintf(out, ""%s"", archive_entry_pathname(entry));

  /* Extra information for links. */
  if (archive_entry_hardlink(entry)) /* Hard link */
    {
    fprintf(out, "" link to %s"",
            archive_entry_hardlink(entry));
    }
  else if (archive_entry_symlink(entry)) /* Symbolic link */
    {
    fprintf(out, "" -> %s"", archive_entry_symlink(entry));
    }
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_676.cpp,"[10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 3, 159, 0, 0, 8, 8, 0, 0, 2, 21, 0, 0, 0, 0, 2, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 116, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 2, 0, 9, 9, 4, 0, 43, 0, 0, 26, 1, 76, 6, 0, 3, 3, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_676.cpp,102,"[""FILE *"", ""string"", ""char *""]",[]
e4e76f286c2eb5cfa822f89145611d02dc9d39b3,"Merge branch 'master' into osx-CFBundle-info-plist

Resolve conflict in Source/cmOSXBundleGenerator.cxx by taking
the side from 'master'.",[],Source/cmComputeLinkDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_326.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_326.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_326.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_781.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_781.cpp,254,255,255,256,"fprintf(stderr, ""Link dependency analysis for target %s, config %s\n"",
            this->Target->GetName(), this->Config?this->Config:""noconfig"");","fprintf(stderr, ""Link dependency analysis for target %s, config %s\n"",
            this->Target->GetName().c_str(),
            this->HasConfig?this->Config.c_str():""noconfig"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_677.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_677.cpp,"{
    fprintf(stderr,
            ""---------------------------------------""
            ""---------------------------------------\n"");
    fprintf(stderr, ""Link dependency analysis for target %s, config %s\n"",
            this->Target->GetName(), this->Config?this->Config:""noconfig"");
    this->DisplayConstraintGraph();
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_677.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_677.cpp,37,"[""unkown"", ""string"", ""this -> Target -> GetName_ret"", ""member""]","[""member""]"
e4e76f286c2eb5cfa822f89145611d02dc9d39b3,"Merge branch 'master' into osx-CFBundle-info-plist

Resolve conflict in Source/cmOSXBundleGenerator.cxx by taking
the side from 'master'.",[],Source/cmComputeLinkDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_326.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_326.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_326.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_782.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_782.cpp,968,970,970,972,"fprintf(stderr, ""target [%s] links to:\n"", this->Target->GetName());","fprintf(stderr, ""target [%s] links to:\n"", this->Target->GetName().c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_678.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_678.cpp,"{
  fprintf(stderr, ""target [%s] links to:\n"", this->Target->GetName());
  for(std::vector<LinkEntry>::const_iterator lei =
        this->FinalLinkEntries.begin();
      lei != this->FinalLinkEntries.end(); ++lei)
    {
    if(lei->Target)
      {
      fprintf(stderr, ""  target [%s]\n"", lei->Target->GetName());
      }
    else
      {
      fprintf(stderr, ""  item [%s]\n"", lei->Item.c_str());
      }
    }
  fprintf(stderr, ""\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_678.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 40, 0, 0, 0, 1, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0, 10, 0, 0, 4, 0, 12, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_678.cpp,2,"[""unkown"", ""string"", ""this -> Target -> GetName_ret""]",[]
e4e76f286c2eb5cfa822f89145611d02dc9d39b3,"Merge branch 'master' into osx-CFBundle-info-plist

Resolve conflict in Source/cmOSXBundleGenerator.cxx by taking
the side from 'master'.",[],Source/cmComputeLinkDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_326.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_326.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_326.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_782.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_782.cpp,968,970,977,979,"fprintf(stderr, ""  target [%s]\n"", lei->Target->GetName());","fprintf(stderr, ""  target [%s]\n"", lei->Target->GetName().c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_679.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_679.cpp,"{
      fprintf(stderr, ""  target [%s]\n"", lei->Target->GetName());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_679.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_679.cpp,9,"[""unkown"", ""string"", ""lei -> Target -> GetName_ret""]","[""member""]"
e4e76f286c2eb5cfa822f89145611d02dc9d39b3,"Merge branch 'master' into osx-CFBundle-info-plist

Resolve conflict in Source/cmOSXBundleGenerator.cxx by taking
the side from 'master'.",[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_327.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_327.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_327.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_783.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_783.cpp,435,435,439,440,"fprintf(stderr, ""The %s target dependency graph is:\n"", name);","fprintf(stderr, ""The %s target dependency graph is:\n"", name.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_680.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_680.cpp,"{
  fprintf(stderr, ""The %s target dependency graph is:\n"", name);
  int n = static_cast<int>(graph.size());
  for(int depender_index = 0; depender_index < n; ++depender_index)
    {
    EdgeList const& nl = graph[depender_index];
    cmTarget const* depender = this->Targets[depender_index];
    fprintf(stderr, ""target %d is [%s]\n"",
            depender_index, depender->GetName());
    for(EdgeList::const_iterator ni = nl.begin(); ni != nl.end(); ++ni)
      {
      int dependee_index = *ni;
      cmTarget const* dependee = this->Targets[dependee_index];
      fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName(), ni->IsStrong()? ""strong"" : ""weak"");
      }
    }
  fprintf(stderr, ""\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_680.cpp,"[0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 63, 0, 0, 5, 7, 0, 0, 9, 7, 0, 0, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 1, 37, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 0, 3, 1, 1, 0, 12, 0, 0, 4, 0, 16, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_680.cpp,3,"[""unkown"", ""string"", ""const char *""]",[]
e4e76f286c2eb5cfa822f89145611d02dc9d39b3,"Merge branch 'master' into osx-CFBundle-info-plist

Resolve conflict in Source/cmOSXBundleGenerator.cxx by taking
the side from 'master'.",[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_327.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_327.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_327.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_783.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_783.cpp,435,435,445,446,"fprintf(stderr, ""target %d is [%s]\n"",
            depender_index, depender->GetName());","fprintf(stderr, ""target %d is [%s]\n"",
            depender_index, depender->GetName().c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_681.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_681.cpp,"{
    EdgeList const& nl = graph[depender_index];
    cmTarget const* depender = this->Targets[depender_index];
    fprintf(stderr, ""target %d is [%s]\n"",
            depender_index, depender->GetName());
    for(EdgeList::const_iterator ni = nl.begin(); ni != nl.end(); ++ni)
      {
      int dependee_index = *ni;
      cmTarget const* dependee = this->Targets[dependee_index];
      fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName(), ni->IsStrong()? ""strong"" : ""weak"");
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_681.cpp,"[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 47, 0, 0, 4, 5, 0, 0, 6, 4, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 3, 0, 2, 1, 1, 0, 7, 0, 0, 2, 0, 9, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_681.cpp,9,"[""unkown"", ""string"", ""null"", ""depender -> GetName_ret""]","[""null"", ""int"", ""<""]"
e4e76f286c2eb5cfa822f89145611d02dc9d39b3,"Merge branch 'master' into osx-CFBundle-info-plist

Resolve conflict in Source/cmOSXBundleGenerator.cxx by taking
the side from 'master'.",[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_327.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_327.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_327.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_783.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_783.cpp,435,435,451,452,"fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName(), ni->IsStrong()? ""strong"" : ""weak"");","fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName().c_str(), ni->IsStrong()? ""strong"" : ""weak"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_682.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_682.cpp,"{
      int dependee_index = *ni;
      cmTarget const* dependee = this->Targets[dependee_index];
      fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName(), ni->IsStrong()? ""strong"" : ""weak"");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_682.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 18, 0, 0, 2, 2, 0, 0, 2, 3, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 1, 1, 0, 3, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_682.cpp,15,"[""unkown"", ""string"", ""int"", ""dependee -> GetName_ret"", ""string""]","[""nl . begin_ret"", ""nl . end_ret"", ""!=""]"
e4e76f286c2eb5cfa822f89145611d02dc9d39b3,"Merge branch 'master' into osx-CFBundle-info-plist

Resolve conflict in Source/cmOSXBundleGenerator.cxx by taking
the side from 'master'.",[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_327.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_327.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_327.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_784.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_784.cpp,472,473,473,474,"fprintf(stderr, ""  contains target %d [%s]\n"",
              i, this->Targets[i]->GetName());","fprintf(stderr, ""  contains target %d [%s]\n"",
              i, this->Targets[i]->GetName().c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_683.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_683.cpp,"{
      int i = *ni;
      fprintf(stderr, ""  contains target %d [%s]\n"",
              i, this->Targets[i]->GetName());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_683.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_683.cpp,14,"[""unkown"", ""string"", ""int"", ""this -> Targets [ i ] -> GetName_ret""]","[""nl . begin_ret"", ""nl . end_ret"", ""!=""]"
e4e76f286c2eb5cfa822f89145611d02dc9d39b3,"Merge branch 'master' into osx-CFBundle-info-plist

Resolve conflict in Source/cmOSXBundleGenerator.cxx by taking
the side from 'master'.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_328.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_328.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_328.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_787.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_787.cpp,449,450,451,452,"fprintf(fout, ""add_executable(%s"", targetName);","fprintf(fout, ""add_executable(%s"", targetName.c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_684.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_684.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // Choose sources.
    if(!useSources)
      {
      sources.push_back(argv[2]);
      }

    // Detect languages to enable.
    cmLocalGenerator* lg = this->Makefile->GetLocalGenerator();
    cmGlobalGenerator* gg = lg->GetGlobalGenerator();
    std::set<std::string> testLangs;
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      std::string ext = cmSystemTools::GetFilenameLastExtension(*si);
      if(const char* lang = gg->GetLanguageFromExtension(ext.c_str()))
        {
        testLangs.insert(lang);
        }
      else
        {
        cmOStringStream err;
        err << ""Unknown extension \"""" << ext << ""\"" for file\n""
            << ""  "" << *si << ""\n""
            << ""try_compile() works only for enabled languages.  ""
            << ""Currently these are:\n "";
        std::vector<std::string> langs;
        gg->GetEnabledLanguages(langs);
        for(std::vector<std::string>::iterator l = langs.begin();
            l != langs.end(); ++l)
          {
          err << "" "" << *l;
          }
        err << ""\nSee project() command to enable other languages."";
        this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
        return -1;
        }
      }

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = cmsys::SystemTools::Fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""set(CMAKE_MODULE_PATH %s)\n"", def);
      }

    std::string projectLangs;
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      projectLangs += "" "" + *li;
      std::string rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
      std::string rulesOverrideLang = rulesOverrideBase + ""_"" + *li;
      if(const char* rulesOverridePath =
         this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }
      else if(const char* rulesOverridePath2 =
              this->Makefile->GetDefinition(rulesOverrideBase.c_str()))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }
      }
    fprintf(fout, ""project(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());
    fprintf(fout, ""set(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
      fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              lg->EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""set(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }
    fprintf(fout, ""include_directories(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""set(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""link_directories(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileDefs.size())
      {
      fprintf(fout, ""add_definitions( "");
      for (size_t i = 0; i < compileDefs.size(); ++i)
        {
        fprintf(fout,""%s "",compileDefs[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg;
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetExports(targets);
      tcfg.SetConfig(this->Makefile->GetDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURES to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURES first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if (const char *cxxDef
              = this->Makefile->GetDefinition(""CMAKE_CXX_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_TARGET="";
      flag += cxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *cDef
                = this->Makefile->GetDefinition(""CMAKE_C_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_TARGET="";
      flag += cDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcxxDef = this->Makefile->GetDefinition(
                                  ""CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcDef = this->Makefile->GetDefinition(
                                    ""CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *rootDef
              = this->Makefile->GetDefinition(""CMAKE_SYSROOT""))
      {
      std::string flag=""-DCMAKE_SYSROOT="";
      flag += rootDef;
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""set(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""add_executable(%s"", targetName);
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }
    fprintf(fout, "")\n"");
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_684.cpp,"[21, 0, 6, 0, 0, 0, 3, 0, 0, 0, 30, 0, 0, 0, 10, 593, 0, 0, 26, 40, 0, 0, 40, 83, 0, 0, 0, 0, 13, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 230, 1, 256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 2, 0, 28, 22, 3, 0, 122, 0, 0, 62, 2, 127, 0, 6, 0, 0, 6, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_684.cpp,430,"[""FILE *"", ""string"", ""char *""]","[""tcfg . GenerateImportFile_ret"", ""!""]"
e4e76f286c2eb5cfa822f89145611d02dc9d39b3,"Merge branch 'master' into osx-CFBundle-info-plist

Resolve conflict in Source/cmOSXBundleGenerator.cxx by taking
the side from 'master'.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_328.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_328.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_328.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_788.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_788.cpp,465,466,466,467,"fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",targetName);","fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",
              targetName.c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_685.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_685.cpp,"{
      fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",targetName);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_685.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_685.cpp,445,"[""FILE *"", ""string"", ""char *""]","[""bool""]"
e4e76f286c2eb5cfa822f89145611d02dc9d39b3,"Merge branch 'master' into osx-CFBundle-info-plist

Resolve conflict in Source/cmOSXBundleGenerator.cxx by taking
the side from 'master'.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_328.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_328.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_328.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_788.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_788.cpp,465,466,471,473,"fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName,
              libsToLink.c_str());","fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName.c_str(),
              libsToLink.c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_686.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_686.cpp,"{
      fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_686.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_686.cpp,450,"[""FILE *"", ""string"", ""char *"", ""libsToLink . c_str_ret""]","[""bool"", ""!""]"
2f1978632b709a9370b3cb1137375c05351d149c,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts in favor of the upstream side where possible.
Resolve a logical conflict in archive_windows.h where the upstream
port to Watcom was done slightly differently from ours.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_330.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_330.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_330.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_790.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_790.cpp,1203,1285,1206,1295,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Crypto codec not supported yet (ID: 0x%lX)"", zip->codec);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_687.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_687.cpp,"{
	case _7Z_COPY:
		break;

	case _7Z_LZMA: case _7Z_LZMA2:
#ifdef HAVE_LZMA_H
#if LZMA_VERSION_MAJOR >= 5
/* Effectively disable the limiter. */
#define LZMA_MEMLIMIT   UINT64_MAX
#else
/* NOTE: This needs to check memory size which running system has. */
#define LZMA_MEMLIMIT   (1U << 30)
#endif
	{
		lzma_options_delta delta_opt;
		lzma_filter filters[LZMA_FILTERS_MAX];
#if LZMA_VERSION < 50000030
		lzma_filter *ff;
#endif
		int fi = 0;

		if (zip->lzstream_valid) {
			lzma_end(&(zip->lzstream));
			zip->lzstream_valid = 0;
		}

		/*
		 * NOTE: liblzma incompletely handle the BCJ+LZMA compressed
		 * data made by 7-Zip because 7-Zip does not add End-Of-
		 * Payload Marker(EOPM) at the end of LZMA compressed data,
		 * and so liblzma cannot know the end of the compressed data
		 * without EOPM. So consequently liblzma will not return last
		 * three or four bytes of uncompressed data because
		 * LZMA_FILTER_X86 filter does not handle input data if its
		 * data size is less than five bytes. If liblzma detect EOPM
		 * or know the uncompressed data size, liblzma will flush out
		 * the remaining that three or four bytes of uncompressed
		 * data. That is why we have to use our converting program
		 * for BCJ+LZMA. If we were able to tell the uncompressed
		 * size to liblzma when using lzma_raw_decoder() liblzma
		 * could correctly deal with BCJ+LZMA. But unfortunately
		 * there is no way to do that. 
		 * Discussion about this can be found at XZ Utils forum.
		 */
		if (coder2 != NULL) {
			zip->codec2 = coder2->codec;

			filters[fi].options = NULL;
			switch (zip->codec2) {
			case _7Z_X86:
				if (zip->codec == _7Z_LZMA2) {
					filters[fi].id = LZMA_FILTER_X86;
					fi++;
				} else
					/* Use our filter. */
					x86_Init(zip);
				break;
			case _7Z_X86_BCJ2:
				/* Use our filter. */
				zip->bcj_state = 0;
				break;
			case _7Z_DELTA:
				filters[fi].id = LZMA_FILTER_DELTA;
				memset(&delta_opt, 0, sizeof(delta_opt));
				delta_opt.type = LZMA_DELTA_TYPE_BYTE;
				delta_opt.dist = 1;
				filters[fi].options = &delta_opt;
				fi++;
				break;
			/* Following filters have not been tested yet. */
			case _7Z_POWERPC:
				filters[fi].id = LZMA_FILTER_POWERPC;
				fi++;
				break;
			case _7Z_IA64:
				filters[fi].id = LZMA_FILTER_IA64;
				fi++;
				break;
			case _7Z_ARM:
				filters[fi].id = LZMA_FILTER_ARM;
				fi++;
				break;
			case _7Z_ARMTHUMB:
				filters[fi].id = LZMA_FILTER_ARMTHUMB;
				fi++;
				break;
			case _7Z_SPARC:
				filters[fi].id = LZMA_FILTER_SPARC;
				fi++;
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Unexpected codec ID: %lX"", zip->codec2);
				return (ARCHIVE_FAILED);
			}
		}

		if (zip->codec == _7Z_LZMA2)
			filters[fi].id = LZMA_FILTER_LZMA2;
		else
			filters[fi].id = LZMA_FILTER_LZMA1;
		filters[fi].options = NULL;
#if LZMA_VERSION < 50000030
		ff = &filters[fi];
#endif
		r = lzma_properties_decode(&filters[fi], NULL,
		    coder1->properties, (size_t)coder1->propertiesSize);
		if (r != LZMA_OK) {
			set_error(a, r);
			return (ARCHIVE_FAILED);
		}
		fi++;

		filters[fi].id = LZMA_VLI_UNKNOWN;
		filters[fi].options = NULL;
		r = lzma_raw_decoder(&(zip->lzstream), filters);
#if LZMA_VERSION < 50000030
		free(ff->options);
#endif
		if (r != LZMA_OK) {
			set_error(a, r);
			return (ARCHIVE_FAILED);
		}
		zip->lzstream_valid = 1;
		zip->lzstream.total_in = 0;
		zip->lzstream.total_out = 0;
		break;
	}
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""LZMA codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_BZ2:
#if defined(HAVE_BZLIB_H) && defined(BZ_CONFIG_ERROR)
		if (zip->bzstream_valid) {
			BZ2_bzDecompressEnd(&(zip->bzstream));
			zip->bzstream_valid = 0;
		}
		r = BZ2_bzDecompressInit(&(zip->bzstream), 0, 0);
		if (r == BZ_MEM_ERROR)
			r = BZ2_bzDecompressInit(&(zip->bzstream), 0, 1);
		if (r != BZ_OK) {
			int err = ARCHIVE_ERRNO_MISC;
			const char *detail = NULL;
			switch (r) {
			case BZ_PARAM_ERROR:
				detail = ""invalid setup parameter"";
				break;
			case BZ_MEM_ERROR:
				err = ENOMEM;
				detail = ""out of memory"";
				break;
			case BZ_CONFIG_ERROR:
				detail = ""mis-compiled library"";
				break;
			}
			archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail != NULL ? detail : ""??"");
			zip->bzstream_valid = 0;
			return (ARCHIVE_FAILED);
		}
		zip->bzstream_valid = 1;
		zip->bzstream.total_in_lo32 = 0;
		zip->bzstream.total_in_hi32 = 0;
		zip->bzstream.total_out_lo32 = 0;
		zip->bzstream.total_out_hi32 = 0;
		break;
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""BZ2 codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_DEFLATE:
#ifdef HAVE_ZLIB_H
		if (zip->stream_valid)
			r = inflateReset(&(zip->stream));
		else
			r = inflateInit2(&(zip->stream),
			    -15 /* Don't check for zlib header */);
		if (r != Z_OK) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");
			return (ARCHIVE_FAILED);
		}
		zip->stream_valid = 1;
		zip->stream.total_in = 0;
		zip->stream.total_out = 0;
		break;
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""DEFLATE codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_PPMD:
	{
		unsigned order;
		uint32_t msize;

		if (zip->ppmd7_valid) {
			__archive_ppmd7_functions.Ppmd7_Free(
			    &zip->ppmd7_context, &g_szalloc);
			zip->ppmd7_valid = 0;
		}

		if (coder1->propertiesSize < 5) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}
		order = coder1->properties[0];
		msize = archive_le32dec(&(coder1->properties[1]));
		if (order < PPMD7_MIN_ORDER || order > PPMD7_MAX_ORDER ||
		    msize < PPMD7_MIN_MEM_SIZE || msize > PPMD7_MAX_MEM_SIZE) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}
		__archive_ppmd7_functions.Ppmd7_Construct(&zip->ppmd7_context);
		r = __archive_ppmd7_functions.Ppmd7_Alloc(
			&zip->ppmd7_context, msize, &g_szalloc);
		if (r == 0) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Coludn't allocate memory for PPMd"");
			return (ARCHIVE_FATAL);
		}
		__archive_ppmd7_functions.Ppmd7_Init(
			&zip->ppmd7_context, order);
		__archive_ppmd7_functions.Ppmd7z_RangeDec_CreateVTable(
			&zip->range_dec);
		zip->ppmd7_valid = 1;
		zip->ppmd7_stat = 0;
		zip->ppstream.overconsumed = 0;
		zip->ppstream.total_in = 0;
		zip->ppstream.total_out = 0;
		break;
	}
	case _7Z_X86:
	case _7Z_X86_BCJ2:
	case _7Z_POWERPC:
	case _7Z_IA64:
	case _7Z_ARM:
	case _7Z_ARMTHUMB:
	case _7Z_SPARC:
	case _7Z_DELTA:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unexpected codec ID: %lX"", zip->codec);
		return (ARCHIVE_FAILED);
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown codec ID: %lX"", zip->codec);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_687.cpp,"[20, 0, 0, 0, 16, 0, 13, 2, 25, 2, 23, 0, 0, 0, 1, 467, 0, 0, 8, 8, 0, 0, 3, 52, 0, 0, 0, 0, 2, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 1, 245, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 19, 0, 18, 16, 8, 0, 35, 0, 0, 82, 0, 78, 20, 0, 2, 2, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_687.cpp,284,"[""member"", ""macro"", ""string"", ""member""]","[""member""]"
2f1978632b709a9370b3cb1137375c05351d149c,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts in favor of the upstream side where possible.
Resolve a logical conflict in archive_windows.h where the upstream
port to Watcom was done slightly differently from ours.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_331.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_331.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_331.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_793.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_793.cpp,1292,1319,1313,1361,"archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Malformed device attribute"");","archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Unknown format `%s'"", val);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_688.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_688.cpp,"{
		archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Malformed device attribute"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_688.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_688.cpp,13,"[""struct archive *"", ""macro"", ""string""]","[""strchr_ret"", ""null"", ""==""]"
2f1978632b709a9370b3cb1137375c05351d149c,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts in favor of the upstream side where possible.
Resolve a logical conflict in archive_windows.h where the upstream
port to Watcom was done slightly differently from ours.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_331.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_331.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_331.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_793.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_793.cpp,1292,1319,1322,1368,,"archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Missing number"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_689.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_689.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_689.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_689.cpp,0,[],[]
2f1978632b709a9370b3cb1137375c05351d149c,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts in favor of the upstream side where possible.
Resolve a logical conflict in archive_windows.h where the upstream
port to Watcom was done slightly differently from ours.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_331.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_331.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_331.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_793.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_793.cpp,1292,1319,1322,1374,,"archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Too many arguments"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_690.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_690.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_690.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_690.cpp,0,[],[]
2f1978632b709a9370b3cb1137375c05351d149c,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts in favor of the upstream side where possible.
Resolve a logical conflict in archive_windows.h where the upstream
port to Watcom was done slightly differently from ours.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_331.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_331.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_331.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_793.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_793.cpp,1292,1319,1322,1380,,"archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Not enough arguments"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_691.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_691.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_691.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_691.cpp,0,[],[]
2f1978632b709a9370b3cb1137375c05351d149c,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts in favor of the upstream side where possible.
Resolve a logical conflict in archive_windows.h where the upstream
port to Watcom was done slightly differently from ours.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_331.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_331.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_331.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_793.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_793.cpp,1292,1319,1322,1386,,"archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""%s"", error);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_692.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_692.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_692.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_692.cpp,0,[],[]
2f1978632b709a9370b3cb1137375c05351d149c,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts in favor of the upstream side where possible.
Resolve a logical conflict in archive_windows.h where the upstream
port to Watcom was done slightly differently from ours.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_334.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_334.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_334.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_799.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_799.cpp,983,992,985,995,,"archive_string_sprintf(str, "" inode=%jd"", (intmax_t)me->ino);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_693.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_693.cpp,"(me->filetype) {
	case AE_IFLNK:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=link"");
		if ((keys & F_SLINK) != 0) {
			archive_strcat(str, "" link="");
			mtree_quote(str, me->symlink.s);
		}
		break;
	case AE_IFSOCK:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=socket"");
		break;
	case AE_IFCHR:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=char"");
		if ((keys & F_DEV) != 0) {
			archive_string_sprintf(str,
			    "" device=native,%ju,%ju"",
			    (uintmax_t)me->rdevmajor,
			    (uintmax_t)me->rdevminor);
		}
		break;
	case AE_IFBLK:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=block"");
		if ((keys & F_DEV) != 0) {
			archive_string_sprintf(str,
			    "" device=native,%ju,%ju"",
			    (uintmax_t)me->rdevmajor,
			    (uintmax_t)me->rdevminor);
		}
		break;
	case AE_IFDIR:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=dir"");
		break;
	case AE_IFIFO:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=fifo"");
		break;
	case AE_IFREG:
	default:	/* Handle unknown file types as regular files. */
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=file"");
		if ((keys & F_SIZE) != 0)
			archive_string_sprintf(str, "" size=%jd"",
			    (intmax_t)me->size);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_693.cpp,"[11, 0, 0, 0, 7, 0, 0, 0, 7, 1, 12, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 0, 0, 12, 0, 0, 13, 0, 29, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_693.cpp,73,[],[]
2f1978632b709a9370b3cb1137375c05351d149c,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts in favor of the upstream side where possible.
Resolve a logical conflict in archive_windows.h where the upstream
port to Watcom was done slightly differently from ours.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_334.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_334.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_334.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_799.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_799.cpp,983,992,985,997,,"archive_string_sprintf(str,
		    "" resdevice=native,%ju,%ju"",
		    (uintmax_t)me->devmajor,
		    (uintmax_t)me->devminor);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_694.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_694.cpp,"(me->filetype) {
	case AE_IFLNK:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=link"");
		if ((keys & F_SLINK) != 0) {
			archive_strcat(str, "" link="");
			mtree_quote(str, me->symlink.s);
		}
		break;
	case AE_IFSOCK:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=socket"");
		break;
	case AE_IFCHR:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=char"");
		if ((keys & F_DEV) != 0) {
			archive_string_sprintf(str,
			    "" device=native,%ju,%ju"",
			    (uintmax_t)me->rdevmajor,
			    (uintmax_t)me->rdevminor);
		}
		break;
	case AE_IFBLK:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=block"");
		if ((keys & F_DEV) != 0) {
			archive_string_sprintf(str,
			    "" device=native,%ju,%ju"",
			    (uintmax_t)me->rdevmajor,
			    (uintmax_t)me->rdevminor);
		}
		break;
	case AE_IFDIR:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=dir"");
		break;
	case AE_IFIFO:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=fifo"");
		break;
	case AE_IFREG:
	default:	/* Handle unknown file types as regular files. */
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=file"");
		if ((keys & F_SIZE) != 0)
			archive_string_sprintf(str, "" size=%jd"",
			    (intmax_t)me->size);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_694.cpp,"[11, 0, 0, 0, 7, 0, 0, 0, 7, 1, 12, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 0, 0, 12, 0, 0, 13, 0, 29, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_694.cpp,73,[],[]
2f1978632b709a9370b3cb1137375c05351d149c,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts in favor of the upstream side where possible.
Resolve a logical conflict in archive_windows.h where the upstream
port to Watcom was done slightly differently from ours.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_335.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_335.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_335.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_804.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_804.cpp,376,399,442,434,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate zip header data"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Archives > 4GB require Zip64 extensions"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_695.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_695.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate zip header data"");
		free(l);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_695.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_695.cpp,67,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
2f1978632b709a9370b3cb1137375c05351d149c,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts in favor of the upstream side where possible.
Resolve a logical conflict in archive_windows.h where the upstream
port to Watcom was done slightly differently from ours.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_335.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_335.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_335.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_804.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_804.cpp,376,399,402,428,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Files > 4GB require Zip64 extensions"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_696.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_696.cpp,"(zip->opt_sconv == NULL && !zip->init_default_conversion) {
		zip->sconv_default =
		    archive_string_default_conversion_for_write(&(a->archive));
		zip->init_default_conversion = 1;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_696.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_696.cpp,27,[],"[""archive_entry_filetype_ret"", ""macro"", ""!="", ""archive_entry_filetype_ret"", ""macro"", ""!="", ""archive_entry_filetype_ret"", ""macro"", ""!="", ""&&"", ""&&"", ""!""]"
2f1978632b709a9370b3cb1137375c05351d149c,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts in favor of the upstream side where possible.
Resolve a logical conflict in archive_windows.h where the upstream
port to Watcom was done slightly differently from ours.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_335.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_335.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_335.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_806.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_806.cpp,663,803,678,815,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid ZIP compression type"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid ZIP compression type"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_697.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_697.cpp,"{
	case COMPRESSION_STORE:
		ret = __archive_write_output(a, buff, s);
		if (ret != ARCHIVE_OK) return (ret);
		zip->written_bytes += s;
		zip->remaining_data_bytes -= s;
		l->compressed_size += s;
		l->crc32 = crc32(l->crc32, buff, (unsigned)s);
		return (s);
#if HAVE_ZLIB_H
	case COMPRESSION_DEFLATE:
		zip->stream.next_in = (unsigned char*)(uintptr_t)buff;
		zip->stream.avail_in = (uInt)s;
		do {
			ret = deflate(&zip->stream, Z_NO_FLUSH);
			if (ret == Z_STREAM_ERROR)
				return (ARCHIVE_FATAL);
			if (zip->stream.avail_out == 0) {
				ret = __archive_write_output(a, zip->buf,
					zip->len_buf);
				if (ret != ARCHIVE_OK)
					return (ret);
				l->compressed_size += zip->len_buf;
				zip->written_bytes += zip->len_buf;
				zip->stream.next_out = zip->buf;
				zip->stream.avail_out = (uInt)zip->len_buf;
			}
		} while (zip->stream.avail_in != 0);
		zip->remaining_data_bytes -= s;
		/* If we have it, use zlib's fast crc32() */
		l->crc32 = crc32(l->crc32, buff, (uInt)s);
		return (s);
#endif

	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid ZIP compression type"");
		return ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_697.cpp,"[5, 0, 0, 1, 0, 0, 6, 0, 2, 1, 6, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 0, 0, 6, 0, 0, 16, 0, 17, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_697.cpp,47,"[""member"", ""macro"", ""string""]","[""member""]"
64713ae3ffddf6fbbfa7ea762c3d756cb245a066,"libarchive 3.1.2-218-g00f4bd83 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-218-g00f4bd83 &&
r=00f4bd83 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_7zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_337.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_337.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_337.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_808.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_808.cpp,1203,1285,1206,1295,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Crypto codec not supported yet (ID: 0x%lX)"", zip->codec);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_699.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_699.cpp,"{
	case _7Z_COPY:
		break;

	case _7Z_LZMA: case _7Z_LZMA2:
#ifdef HAVE_LZMA_H
#if LZMA_VERSION_MAJOR >= 5
/* Effectively disable the limiter. */
#define LZMA_MEMLIMIT   UINT64_MAX
#else
/* NOTE: This needs to check memory size which running system has. */
#define LZMA_MEMLIMIT   (1U << 30)
#endif
	{
		lzma_options_delta delta_opt;
		lzma_filter filters[LZMA_FILTERS_MAX];
#if LZMA_VERSION < 50000030
		lzma_filter *ff;
#endif
		int fi = 0;

		if (zip->lzstream_valid) {
			lzma_end(&(zip->lzstream));
			zip->lzstream_valid = 0;
		}

		/*
		 * NOTE: liblzma incompletely handle the BCJ+LZMA compressed
		 * data made by 7-Zip because 7-Zip does not add End-Of-
		 * Payload Marker(EOPM) at the end of LZMA compressed data,
		 * and so liblzma cannot know the end of the compressed data
		 * without EOPM. So consequently liblzma will not return last
		 * three or four bytes of uncompressed data because
		 * LZMA_FILTER_X86 filter does not handle input data if its
		 * data size is less than five bytes. If liblzma detect EOPM
		 * or know the uncompressed data size, liblzma will flush out
		 * the remaining that three or four bytes of uncompressed
		 * data. That is why we have to use our converting program
		 * for BCJ+LZMA. If we were able to tell the uncompressed
		 * size to liblzma when using lzma_raw_decoder() liblzma
		 * could correctly deal with BCJ+LZMA. But unfortunately
		 * there is no way to do that. 
		 * Discussion about this can be found at XZ Utils forum.
		 */
		if (coder2 != NULL) {
			zip->codec2 = coder2->codec;

			filters[fi].options = NULL;
			switch (zip->codec2) {
			case _7Z_X86:
				if (zip->codec == _7Z_LZMA2) {
					filters[fi].id = LZMA_FILTER_X86;
					fi++;
				} else
					/* Use our filter. */
					x86_Init(zip);
				break;
			case _7Z_X86_BCJ2:
				/* Use our filter. */
				zip->bcj_state = 0;
				break;
			case _7Z_DELTA:
				filters[fi].id = LZMA_FILTER_DELTA;
				memset(&delta_opt, 0, sizeof(delta_opt));
				delta_opt.type = LZMA_DELTA_TYPE_BYTE;
				delta_opt.dist = 1;
				filters[fi].options = &delta_opt;
				fi++;
				break;
			/* Following filters have not been tested yet. */
			case _7Z_POWERPC:
				filters[fi].id = LZMA_FILTER_POWERPC;
				fi++;
				break;
			case _7Z_IA64:
				filters[fi].id = LZMA_FILTER_IA64;
				fi++;
				break;
			case _7Z_ARM:
				filters[fi].id = LZMA_FILTER_ARM;
				fi++;
				break;
			case _7Z_ARMTHUMB:
				filters[fi].id = LZMA_FILTER_ARMTHUMB;
				fi++;
				break;
			case _7Z_SPARC:
				filters[fi].id = LZMA_FILTER_SPARC;
				fi++;
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Unexpected codec ID: %lX"", zip->codec2);
				return (ARCHIVE_FAILED);
			}
		}

		if (zip->codec == _7Z_LZMA2)
			filters[fi].id = LZMA_FILTER_LZMA2;
		else
			filters[fi].id = LZMA_FILTER_LZMA1;
		filters[fi].options = NULL;
#if LZMA_VERSION < 50000030
		ff = &filters[fi];
#endif
		r = lzma_properties_decode(&filters[fi], NULL,
		    coder1->properties, (size_t)coder1->propertiesSize);
		if (r != LZMA_OK) {
			set_error(a, r);
			return (ARCHIVE_FAILED);
		}
		fi++;

		filters[fi].id = LZMA_VLI_UNKNOWN;
		filters[fi].options = NULL;
		r = lzma_raw_decoder(&(zip->lzstream), filters);
#if LZMA_VERSION < 50000030
		free(ff->options);
#endif
		if (r != LZMA_OK) {
			set_error(a, r);
			return (ARCHIVE_FAILED);
		}
		zip->lzstream_valid = 1;
		zip->lzstream.total_in = 0;
		zip->lzstream.total_out = 0;
		break;
	}
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""LZMA codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_BZ2:
#if defined(HAVE_BZLIB_H) && defined(BZ_CONFIG_ERROR)
		if (zip->bzstream_valid) {
			BZ2_bzDecompressEnd(&(zip->bzstream));
			zip->bzstream_valid = 0;
		}
		r = BZ2_bzDecompressInit(&(zip->bzstream), 0, 0);
		if (r == BZ_MEM_ERROR)
			r = BZ2_bzDecompressInit(&(zip->bzstream), 0, 1);
		if (r != BZ_OK) {
			int err = ARCHIVE_ERRNO_MISC;
			const char *detail = NULL;
			switch (r) {
			case BZ_PARAM_ERROR:
				detail = ""invalid setup parameter"";
				break;
			case BZ_MEM_ERROR:
				err = ENOMEM;
				detail = ""out of memory"";
				break;
			case BZ_CONFIG_ERROR:
				detail = ""mis-compiled library"";
				break;
			}
			archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail == NULL ? ""??"" : detail);
			zip->bzstream_valid = 0;
			return (ARCHIVE_FAILED);
		}
		zip->bzstream_valid = 1;
		zip->bzstream.total_in_lo32 = 0;
		zip->bzstream.total_in_hi32 = 0;
		zip->bzstream.total_out_lo32 = 0;
		zip->bzstream.total_out_hi32 = 0;
		break;
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""BZ2 codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_DEFLATE:
#ifdef HAVE_ZLIB_H
		if (zip->stream_valid)
			r = inflateReset(&(zip->stream));
		else
			r = inflateInit2(&(zip->stream),
			    -15 /* Don't check for zlib header */);
		if (r != Z_OK) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");
			return (ARCHIVE_FAILED);
		}
		zip->stream_valid = 1;
		zip->stream.total_in = 0;
		zip->stream.total_out = 0;
		break;
#else
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""DEFLATE codec is unsupported"");
		return (ARCHIVE_FAILED);
#endif
	case _7Z_PPMD:
	{
		unsigned order;
		uint32_t msize;

		if (zip->ppmd7_valid) {
			__archive_ppmd7_functions.Ppmd7_Free(
			    &zip->ppmd7_context, &g_szalloc);
			zip->ppmd7_valid = 0;
		}

		if (coder1->propertiesSize < 5) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}
		order = coder1->properties[0];
		msize = archive_le32dec(&(coder1->properties[1]));
		if (order < PPMD7_MIN_ORDER || order > PPMD7_MAX_ORDER ||
		    msize < PPMD7_MIN_MEM_SIZE || msize > PPMD7_MAX_MEM_SIZE) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Malformed PPMd parameter"");
			return (ARCHIVE_FAILED);
		}
		__archive_ppmd7_functions.Ppmd7_Construct(&zip->ppmd7_context);
		r = __archive_ppmd7_functions.Ppmd7_Alloc(
			&zip->ppmd7_context, msize, &g_szalloc);
		if (r == 0) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Coludn't allocate memory for PPMd"");
			return (ARCHIVE_FATAL);
		}
		__archive_ppmd7_functions.Ppmd7_Init(
			&zip->ppmd7_context, order);
		__archive_ppmd7_functions.Ppmd7z_RangeDec_CreateVTable(
			&zip->range_dec);
		zip->ppmd7_valid = 1;
		zip->ppmd7_stat = 0;
		zip->ppstream.overconsumed = 0;
		zip->ppstream.total_in = 0;
		zip->ppstream.total_out = 0;
		break;
	}
	case _7Z_X86:
	case _7Z_X86_BCJ2:
	case _7Z_POWERPC:
	case _7Z_IA64:
	case _7Z_ARM:
	case _7Z_ARMTHUMB:
	case _7Z_SPARC:
	case _7Z_DELTA:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unexpected codec ID: %lX"", zip->codec);
		return (ARCHIVE_FAILED);
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown codec ID: %lX"", zip->codec);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_699.cpp,"[20, 0, 0, 0, 16, 0, 13, 2, 25, 2, 23, 0, 0, 0, 1, 467, 0, 0, 8, 8, 0, 0, 3, 52, 0, 0, 0, 0, 2, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 1, 245, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 19, 0, 18, 16, 8, 0, 35, 0, 0, 82, 0, 78, 20, 0, 2, 2, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_699.cpp,284,"[""member"", ""macro"", ""string"", ""member""]","[""member""]"
64713ae3ffddf6fbbfa7ea762c3d756cb245a066,"libarchive 3.1.2-218-g00f4bd83 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-218-g00f4bd83 &&
r=00f4bd83 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_338.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_338.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_338.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_811.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_811.cpp,1292,1319,1313,1361,"archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Malformed device attribute"");","archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Unknown format `%s'"", val);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_700.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_700.cpp,"{
		archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Malformed device attribute"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_700.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_700.cpp,13,"[""struct archive *"", ""macro"", ""string""]","[""strchr_ret"", ""null"", ""==""]"
64713ae3ffddf6fbbfa7ea762c3d756cb245a066,"libarchive 3.1.2-218-g00f4bd83 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-218-g00f4bd83 &&
r=00f4bd83 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_341.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_341.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_341.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_817.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_817.cpp,983,992,985,995,,"archive_string_sprintf(str, "" inode=%jd"", (intmax_t)me->ino);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_705.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_705.cpp,"(me->filetype) {
	case AE_IFLNK:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=link"");
		if ((keys & F_SLINK) != 0) {
			archive_strcat(str, "" link="");
			mtree_quote(str, me->symlink.s);
		}
		break;
	case AE_IFSOCK:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=socket"");
		break;
	case AE_IFCHR:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=char"");
		if ((keys & F_DEV) != 0) {
			archive_string_sprintf(str,
			    "" device=native,%ju,%ju"",
			    (uintmax_t)me->rdevmajor,
			    (uintmax_t)me->rdevminor);
		}
		break;
	case AE_IFBLK:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=block"");
		if ((keys & F_DEV) != 0) {
			archive_string_sprintf(str,
			    "" device=native,%ju,%ju"",
			    (uintmax_t)me->rdevmajor,
			    (uintmax_t)me->rdevminor);
		}
		break;
	case AE_IFDIR:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=dir"");
		break;
	case AE_IFIFO:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=fifo"");
		break;
	case AE_IFREG:
	default:	/* Handle unknown file types as regular files. */
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=file"");
		if ((keys & F_SIZE) != 0)
			archive_string_sprintf(str, "" size=%jd"",
			    (intmax_t)me->size);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_705.cpp,"[11, 0, 0, 0, 7, 0, 0, 0, 7, 1, 12, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 0, 0, 12, 0, 0, 13, 0, 29, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_705.cpp,73,[],[]
64713ae3ffddf6fbbfa7ea762c3d756cb245a066,"libarchive 3.1.2-218-g00f4bd83 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-218-g00f4bd83 &&
r=00f4bd83 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_341.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_341.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_341.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_817.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_817.cpp,983,992,985,997,,"archive_string_sprintf(str,
		    "" resdevice=native,%ju,%ju"",
		    (uintmax_t)me->devmajor,
		    (uintmax_t)me->devminor);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_706.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_706.cpp,"(me->filetype) {
	case AE_IFLNK:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=link"");
		if ((keys & F_SLINK) != 0) {
			archive_strcat(str, "" link="");
			mtree_quote(str, me->symlink.s);
		}
		break;
	case AE_IFSOCK:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=socket"");
		break;
	case AE_IFCHR:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=char"");
		if ((keys & F_DEV) != 0) {
			archive_string_sprintf(str,
			    "" device=native,%ju,%ju"",
			    (uintmax_t)me->rdevmajor,
			    (uintmax_t)me->rdevminor);
		}
		break;
	case AE_IFBLK:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=block"");
		if ((keys & F_DEV) != 0) {
			archive_string_sprintf(str,
			    "" device=native,%ju,%ju"",
			    (uintmax_t)me->rdevmajor,
			    (uintmax_t)me->rdevminor);
		}
		break;
	case AE_IFDIR:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=dir"");
		break;
	case AE_IFIFO:
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=fifo"");
		break;
	case AE_IFREG:
	default:	/* Handle unknown file types as regular files. */
		if ((keys & F_TYPE) != 0)
			archive_strcat(str, "" type=file"");
		if ((keys & F_SIZE) != 0)
			archive_string_sprintf(str, "" size=%jd"",
			    (intmax_t)me->size);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_706.cpp,"[11, 0, 0, 0, 7, 0, 0, 0, 7, 1, 12, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 0, 0, 12, 0, 0, 13, 0, 29, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_706.cpp,73,[],[]
64713ae3ffddf6fbbfa7ea762c3d756cb245a066,"libarchive 3.1.2-218-g00f4bd83 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-218-g00f4bd83 &&
r=00f4bd83 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_342.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_342.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_342.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_822.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_822.cpp,376,399,442,434,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate zip header data"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Archives > 4GB require Zip64 extensions"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_707.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_707.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate zip header data"");
		free(l);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_707.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_707.cpp,67,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
64713ae3ffddf6fbbfa7ea762c3d756cb245a066,"libarchive 3.1.2-218-g00f4bd83 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-218-g00f4bd83 &&
r=00f4bd83 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_342.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_342.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_342.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_822.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_822.cpp,376,399,402,428,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Files > 4GB require Zip64 extensions"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_708.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_708.cpp,"(zip->opt_sconv == NULL && !zip->init_default_conversion) {
		zip->sconv_default =
		    archive_string_default_conversion_for_write(&(a->archive));
		zip->init_default_conversion = 1;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_708.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_708.cpp,27,[],"[""archive_entry_filetype_ret"", ""macro"", ""!="", ""archive_entry_filetype_ret"", ""macro"", ""!="", ""archive_entry_filetype_ret"", ""macro"", ""!="", ""&&"", ""&&"", ""!""]"
64713ae3ffddf6fbbfa7ea762c3d756cb245a066,"libarchive 3.1.2-218-g00f4bd83 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-218-g00f4bd83 &&
r=00f4bd83 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_342.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_342.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_342.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_824.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_824.cpp,663,803,678,815,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid ZIP compression type"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid ZIP compression type"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_709.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_709.cpp,"{
	case COMPRESSION_STORE:
		ret = __archive_write_output(a, buff, s);
		if (ret != ARCHIVE_OK) return (ret);
		zip->written_bytes += s;
		zip->remaining_data_bytes -= s;
		l->compressed_size += s;
		l->crc32 = crc32(l->crc32, buff, (unsigned)s);
		return (s);
#if HAVE_ZLIB_H
	case COMPRESSION_DEFLATE:
		zip->stream.next_in = (unsigned char*)(uintptr_t)buff;
		zip->stream.avail_in = (uInt)s;
		do {
			ret = deflate(&zip->stream, Z_NO_FLUSH);
			if (ret == Z_STREAM_ERROR)
				return (ARCHIVE_FATAL);
			if (zip->stream.avail_out == 0) {
				ret = __archive_write_output(a, zip->buf,
					zip->len_buf);
				if (ret != ARCHIVE_OK)
					return (ret);
				l->compressed_size += zip->len_buf;
				zip->written_bytes += zip->len_buf;
				zip->stream.next_out = zip->buf;
				zip->stream.avail_out = (uInt)zip->len_buf;
			}
		} while (zip->stream.avail_in != 0);
		zip->remaining_data_bytes -= s;
		/* If we have it, use zlib's fast crc32() */
		l->crc32 = crc32(l->crc32, buff, (uInt)s);
		return (s);
#endif

	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid ZIP compression type"");
		return ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_709.cpp,"[5, 0, 0, 1, 0, 0, 6, 0, 2, 1, 6, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 0, 0, 6, 0, 0, 16, 0, 17, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_709.cpp,47,"[""member"", ""macro"", ""string""]","[""member""]"
8018fcca6e055a0f12a17fc8324128080a9ec568,Merge branch 'master' into revise-compiler-id-policies,[],Source/cmComputeLinkDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_343.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_343.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_343.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_825.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_825.cpp,254,255,255,256,"fprintf(stderr, ""Link dependency analysis for target %s, config %s\n"",
            this->Target->GetName(), this->Config?this->Config:""noconfig"");","fprintf(stderr, ""Link dependency analysis for target %s, config %s\n"",
            this->Target->GetName().c_str(),
            this->HasConfig?this->Config.c_str():""noconfig"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_711.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_711.cpp,"{
    fprintf(stderr,
            ""---------------------------------------""
            ""---------------------------------------\n"");
    fprintf(stderr, ""Link dependency analysis for target %s, config %s\n"",
            this->Target->GetName(), this->Config?this->Config:""noconfig"");
    this->DisplayConstraintGraph();
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_711.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_711.cpp,37,"[""unkown"", ""string"", ""this -> Target -> GetName_ret"", ""member""]","[""member""]"
8018fcca6e055a0f12a17fc8324128080a9ec568,Merge branch 'master' into revise-compiler-id-policies,[],Source/cmComputeLinkDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_343.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_343.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_343.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_826.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_826.cpp,968,970,970,972,"fprintf(stderr, ""target [%s] links to:\n"", this->Target->GetName());","fprintf(stderr, ""target [%s] links to:\n"", this->Target->GetName().c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_712.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_712.cpp,"{
  fprintf(stderr, ""target [%s] links to:\n"", this->Target->GetName());
  for(std::vector<LinkEntry>::const_iterator lei =
        this->FinalLinkEntries.begin();
      lei != this->FinalLinkEntries.end(); ++lei)
    {
    if(lei->Target)
      {
      fprintf(stderr, ""  target [%s]\n"", lei->Target->GetName());
      }
    else
      {
      fprintf(stderr, ""  item [%s]\n"", lei->Item.c_str());
      }
    }
  fprintf(stderr, ""\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_712.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 40, 0, 0, 0, 1, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0, 10, 0, 0, 4, 0, 12, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_712.cpp,2,"[""unkown"", ""string"", ""this -> Target -> GetName_ret""]",[]
8018fcca6e055a0f12a17fc8324128080a9ec568,Merge branch 'master' into revise-compiler-id-policies,[],Source/cmComputeLinkDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_343.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_343.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_343.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_826.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_826.cpp,968,970,977,979,"fprintf(stderr, ""  target [%s]\n"", lei->Target->GetName());","fprintf(stderr, ""  target [%s]\n"", lei->Target->GetName().c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_713.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_713.cpp,"{
      fprintf(stderr, ""  target [%s]\n"", lei->Target->GetName());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_713.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_713.cpp,9,"[""unkown"", ""string"", ""lei -> Target -> GetName_ret""]","[""member""]"
8018fcca6e055a0f12a17fc8324128080a9ec568,Merge branch 'master' into revise-compiler-id-policies,[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_344.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_344.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_344.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_827.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_827.cpp,434,435,438,440,"fprintf(stderr, ""The %s target dependency graph is:\n"", name);","fprintf(stderr, ""The %s target dependency graph is:\n"", name.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_714.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_714.cpp,"{
  fprintf(stderr, ""The %s target dependency graph is:\n"", name);
  int n = static_cast<int>(graph.size());
  for(int depender_index = 0; depender_index < n; ++depender_index)
    {
    EdgeList const& nl = graph[depender_index];
    cmTarget const* depender = this->Targets[depender_index];
    fprintf(stderr, ""target %d is [%s]\n"",
            depender_index, depender->GetName());
    for(EdgeList::const_iterator ni = nl.begin(); ni != nl.end(); ++ni)
      {
      int dependee_index = *ni;
      cmTarget const* dependee = this->Targets[dependee_index];
      fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName(), ni->IsStrong()? ""strong"" : ""weak"");
      }
    }
  fprintf(stderr, ""\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_714.cpp,"[0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 63, 0, 0, 5, 7, 0, 0, 9, 7, 0, 0, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 1, 37, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 0, 3, 1, 1, 0, 12, 0, 0, 4, 0, 16, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_714.cpp,3,"[""unkown"", ""string"", ""const char *""]",[]
8018fcca6e055a0f12a17fc8324128080a9ec568,Merge branch 'master' into revise-compiler-id-policies,[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_344.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_344.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_344.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_827.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_827.cpp,434,435,444,446,"fprintf(stderr, ""target %d is [%s]\n"",
            depender_index, depender->GetName());","fprintf(stderr, ""target %d is [%s]\n"",
            depender_index, depender->GetName().c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_715.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_715.cpp,"{
    EdgeList const& nl = graph[depender_index];
    cmTarget const* depender = this->Targets[depender_index];
    fprintf(stderr, ""target %d is [%s]\n"",
            depender_index, depender->GetName());
    for(EdgeList::const_iterator ni = nl.begin(); ni != nl.end(); ++ni)
      {
      int dependee_index = *ni;
      cmTarget const* dependee = this->Targets[dependee_index];
      fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName(), ni->IsStrong()? ""strong"" : ""weak"");
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_715.cpp,"[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 47, 0, 0, 4, 5, 0, 0, 6, 4, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 3, 0, 2, 1, 1, 0, 7, 0, 0, 2, 0, 9, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_715.cpp,9,"[""unkown"", ""string"", ""null"", ""depender -> GetName_ret""]","[""null"", ""int"", ""<""]"
8018fcca6e055a0f12a17fc8324128080a9ec568,Merge branch 'master' into revise-compiler-id-policies,[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_344.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_344.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_344.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_827.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_827.cpp,434,435,450,452,"fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName(), ni->IsStrong()? ""strong"" : ""weak"");","fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName().c_str(), ni->IsStrong()? ""strong"" : ""weak"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_716.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_716.cpp,"{
      int dependee_index = *ni;
      cmTarget const* dependee = this->Targets[dependee_index];
      fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName(), ni->IsStrong()? ""strong"" : ""weak"");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_716.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 18, 0, 0, 2, 2, 0, 0, 2, 3, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 1, 1, 0, 3, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_716.cpp,15,"[""unkown"", ""string"", ""int"", ""dependee -> GetName_ret"", ""string""]","[""nl . begin_ret"", ""nl . end_ret"", ""!=""]"
8018fcca6e055a0f12a17fc8324128080a9ec568,Merge branch 'master' into revise-compiler-id-policies,[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_344.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_344.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_344.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_828.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_828.cpp,471,473,472,474,"fprintf(stderr, ""  contains target %d [%s]\n"",
              i, this->Targets[i]->GetName());","fprintf(stderr, ""  contains target %d [%s]\n"",
              i, this->Targets[i]->GetName().c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_717.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_717.cpp,"{
      int i = *ni;
      fprintf(stderr, ""  contains target %d [%s]\n"",
              i, this->Targets[i]->GetName());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_717.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_717.cpp,14,"[""unkown"", ""string"", ""int"", ""this -> Targets [ i ] -> GetName_ret""]","[""nl . begin_ret"", ""nl . end_ret"", ""!=""]"
8018fcca6e055a0f12a17fc8324128080a9ec568,Merge branch 'master' into revise-compiler-id-policies,[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_345.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_345.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_345.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_831.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_831.cpp,449,450,451,452,"fprintf(fout, ""add_executable(%s"", targetName);","fprintf(fout, ""add_executable(%s"", targetName.c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_718.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_718.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // Choose sources.
    if(!useSources)
      {
      sources.push_back(argv[2]);
      }

    // Detect languages to enable.
    cmLocalGenerator* lg = this->Makefile->GetLocalGenerator();
    cmGlobalGenerator* gg = lg->GetGlobalGenerator();
    std::set<std::string> testLangs;
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      std::string ext = cmSystemTools::GetFilenameLastExtension(*si);
      if(const char* lang = gg->GetLanguageFromExtension(ext.c_str()))
        {
        testLangs.insert(lang);
        }
      else
        {
        cmOStringStream err;
        err << ""Unknown extension \"""" << ext << ""\"" for file\n""
            << ""  "" << *si << ""\n""
            << ""try_compile() works only for enabled languages.  ""
            << ""Currently these are:\n "";
        std::vector<std::string> langs;
        gg->GetEnabledLanguages(langs);
        for(std::vector<std::string>::iterator l = langs.begin();
            l != langs.end(); ++l)
          {
          err << "" "" << *l;
          }
        err << ""\nSee project() command to enable other languages."";
        this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
        return -1;
        }
      }

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = cmsys::SystemTools::Fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""set(CMAKE_MODULE_PATH %s)\n"", def);
      }

    std::string projectLangs;
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      projectLangs += "" "" + *li;
      std::string rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
      std::string rulesOverrideLang = rulesOverrideBase + ""_"" + *li;
      if(const char* rulesOverridePath =
         this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }
      else if(const char* rulesOverridePath2 =
              this->Makefile->GetDefinition(rulesOverrideBase.c_str()))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }
      }
    fprintf(fout, ""project(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());
    fprintf(fout, ""set(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
      fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              lg->EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""set(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }
    fprintf(fout, ""include_directories(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""set(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""link_directories(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileDefs.size())
      {
      fprintf(fout, ""add_definitions( "");
      for (size_t i = 0; i < compileDefs.size(); ++i)
        {
        fprintf(fout,""%s "",compileDefs[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg;
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetExports(targets);
      tcfg.SetConfig(this->Makefile->GetDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURES to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURES first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if (const char *cxxDef
              = this->Makefile->GetDefinition(""CMAKE_CXX_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_TARGET="";
      flag += cxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *cDef
                = this->Makefile->GetDefinition(""CMAKE_C_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_TARGET="";
      flag += cDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcxxDef = this->Makefile->GetDefinition(
                                  ""CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcDef = this->Makefile->GetDefinition(
                                    ""CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *rootDef
              = this->Makefile->GetDefinition(""CMAKE_SYSROOT""))
      {
      std::string flag=""-DCMAKE_SYSROOT="";
      flag += rootDef;
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""set(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""add_executable(%s"", targetName);
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }
    fprintf(fout, "")\n"");
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_718.cpp,"[21, 0, 6, 0, 0, 0, 3, 0, 0, 0, 30, 0, 0, 0, 10, 593, 0, 0, 26, 40, 0, 0, 40, 83, 0, 0, 0, 0, 13, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 230, 1, 256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 2, 0, 28, 22, 3, 0, 122, 0, 0, 62, 2, 127, 0, 6, 0, 0, 6, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_718.cpp,430,"[""FILE *"", ""string"", ""char *""]","[""targets . empty_ret"", ""!""]"
8018fcca6e055a0f12a17fc8324128080a9ec568,Merge branch 'master' into revise-compiler-id-policies,[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_345.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_345.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_345.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_832.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_832.cpp,465,466,466,467,"fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",targetName);","fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",
              targetName.c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_719.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_719.cpp,"{
      fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",targetName);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_719.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_719.cpp,445,"[""FILE *"", ""string"", ""char *""]","[""bool""]"
8018fcca6e055a0f12a17fc8324128080a9ec568,Merge branch 'master' into revise-compiler-id-policies,[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_345.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_345.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_345.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_832.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_832.cpp,465,466,471,473,"fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName,
              libsToLink.c_str());","fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName.c_str(),
              libsToLink.c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_720.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_720.cpp,"{
      fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_720.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_720.cpp,450,"[""FILE *"", ""string"", ""char *"", ""libsToLink . c_str_ret""]","[""bool"", ""!""]"
6e466c6f2ee5160202aaa76a9d643d34bd7d908a,Merge branch 'master' into CONFIG-LOCATION-CMP0026,[],Source/cmComputeLinkDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_346.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_346.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_346.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_833.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_833.cpp,254,255,255,256,"fprintf(stderr, ""Link dependency analysis for target %s, config %s\n"",
            this->Target->GetName(), this->Config?this->Config:""noconfig"");","fprintf(stderr, ""Link dependency analysis for target %s, config %s\n"",
            this->Target->GetName().c_str(),
            this->HasConfig?this->Config.c_str():""noconfig"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_721.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_721.cpp,"{
    fprintf(stderr,
            ""---------------------------------------""
            ""---------------------------------------\n"");
    fprintf(stderr, ""Link dependency analysis for target %s, config %s\n"",
            this->Target->GetName(), this->Config?this->Config:""noconfig"");
    this->DisplayConstraintGraph();
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_721.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_721.cpp,37,"[""unkown"", ""string"", ""this -> Target -> GetName_ret"", ""member""]","[""member""]"
6e466c6f2ee5160202aaa76a9d643d34bd7d908a,Merge branch 'master' into CONFIG-LOCATION-CMP0026,[],Source/cmComputeLinkDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_346.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_346.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_346.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_834.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_834.cpp,968,970,970,972,"fprintf(stderr, ""target [%s] links to:\n"", this->Target->GetName());","fprintf(stderr, ""target [%s] links to:\n"", this->Target->GetName().c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_722.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_722.cpp,"{
  fprintf(stderr, ""target [%s] links to:\n"", this->Target->GetName());
  for(std::vector<LinkEntry>::const_iterator lei =
        this->FinalLinkEntries.begin();
      lei != this->FinalLinkEntries.end(); ++lei)
    {
    if(lei->Target)
      {
      fprintf(stderr, ""  target [%s]\n"", lei->Target->GetName());
      }
    else
      {
      fprintf(stderr, ""  item [%s]\n"", lei->Item.c_str());
      }
    }
  fprintf(stderr, ""\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_722.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 40, 0, 0, 0, 1, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0, 10, 0, 0, 4, 0, 12, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_722.cpp,2,"[""unkown"", ""string"", ""this -> Target -> GetName_ret""]",[]
6e466c6f2ee5160202aaa76a9d643d34bd7d908a,Merge branch 'master' into CONFIG-LOCATION-CMP0026,[],Source/cmComputeLinkDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_346.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_346.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_346.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_834.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_834.cpp,968,970,977,979,"fprintf(stderr, ""  target [%s]\n"", lei->Target->GetName());","fprintf(stderr, ""  target [%s]\n"", lei->Target->GetName().c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_723.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_723.cpp,"{
      fprintf(stderr, ""  target [%s]\n"", lei->Target->GetName());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_723.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_723.cpp,9,"[""unkown"", ""string"", ""lei -> Target -> GetName_ret""]","[""member""]"
6e466c6f2ee5160202aaa76a9d643d34bd7d908a,Merge branch 'master' into CONFIG-LOCATION-CMP0026,[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_347.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_347.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_347.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_835.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_835.cpp,434,434,438,439,"fprintf(stderr, ""The %s target dependency graph is:\n"", name);","fprintf(stderr, ""The %s target dependency graph is:\n"", name.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_724.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_724.cpp,"{
  fprintf(stderr, ""The %s target dependency graph is:\n"", name);
  int n = static_cast<int>(graph.size());
  for(int depender_index = 0; depender_index < n; ++depender_index)
    {
    EdgeList const& nl = graph[depender_index];
    cmTarget const* depender = this->Targets[depender_index];
    fprintf(stderr, ""target %d is [%s]\n"",
            depender_index, depender->GetName());
    for(EdgeList::const_iterator ni = nl.begin(); ni != nl.end(); ++ni)
      {
      int dependee_index = *ni;
      cmTarget const* dependee = this->Targets[dependee_index];
      fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName(), ni->IsStrong()? ""strong"" : ""weak"");
      }
    }
  fprintf(stderr, ""\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_724.cpp,"[0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 63, 0, 0, 5, 7, 0, 0, 9, 7, 0, 0, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 1, 37, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 0, 3, 1, 1, 0, 12, 0, 0, 4, 0, 16, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_724.cpp,3,"[""unkown"", ""string"", ""const char *""]",[]
6e466c6f2ee5160202aaa76a9d643d34bd7d908a,Merge branch 'master' into CONFIG-LOCATION-CMP0026,[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_347.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_347.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_347.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_835.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_835.cpp,434,434,444,445,"fprintf(stderr, ""target %d is [%s]\n"",
            depender_index, depender->GetName());","fprintf(stderr, ""target %d is [%s]\n"",
            depender_index, depender->GetName().c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_725.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_725.cpp,"{
    EdgeList const& nl = graph[depender_index];
    cmTarget const* depender = this->Targets[depender_index];
    fprintf(stderr, ""target %d is [%s]\n"",
            depender_index, depender->GetName());
    for(EdgeList::const_iterator ni = nl.begin(); ni != nl.end(); ++ni)
      {
      int dependee_index = *ni;
      cmTarget const* dependee = this->Targets[dependee_index];
      fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName(), ni->IsStrong()? ""strong"" : ""weak"");
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_725.cpp,"[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 47, 0, 0, 4, 5, 0, 0, 6, 4, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 3, 0, 2, 1, 1, 0, 7, 0, 0, 2, 0, 9, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_725.cpp,9,"[""unkown"", ""string"", ""null"", ""depender -> GetName_ret""]","[""null"", ""int"", ""<""]"
6e466c6f2ee5160202aaa76a9d643d34bd7d908a,Merge branch 'master' into CONFIG-LOCATION-CMP0026,[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_347.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_347.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_347.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_835.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_835.cpp,434,434,450,451,"fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName(), ni->IsStrong()? ""strong"" : ""weak"");","fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName().c_str(), ni->IsStrong()? ""strong"" : ""weak"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_726.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_726.cpp,"{
      int dependee_index = *ni;
      cmTarget const* dependee = this->Targets[dependee_index];
      fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName(), ni->IsStrong()? ""strong"" : ""weak"");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_726.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 18, 0, 0, 2, 2, 0, 0, 2, 3, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 1, 1, 0, 3, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_726.cpp,15,"[""unkown"", ""string"", ""int"", ""dependee -> GetName_ret"", ""string""]","[""nl . begin_ret"", ""nl . end_ret"", ""!=""]"
6e466c6f2ee5160202aaa76a9d643d34bd7d908a,Merge branch 'master' into CONFIG-LOCATION-CMP0026,[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_347.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_347.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_347.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_836.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_836.cpp,471,472,472,473,"fprintf(stderr, ""  contains target %d [%s]\n"",
              i, this->Targets[i]->GetName());","fprintf(stderr, ""  contains target %d [%s]\n"",
              i, this->Targets[i]->GetName().c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_727.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_727.cpp,"{
      int i = *ni;
      fprintf(stderr, ""  contains target %d [%s]\n"",
              i, this->Targets[i]->GetName());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_727.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_727.cpp,14,"[""unkown"", ""string"", ""int"", ""this -> Targets [ i ] -> GetName_ret""]","[""nl . begin_ret"", ""nl . end_ret"", ""!=""]"
6e466c6f2ee5160202aaa76a9d643d34bd7d908a,Merge branch 'master' into CONFIG-LOCATION-CMP0026,[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_348.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_348.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_348.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_839.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_839.cpp,449,450,451,452,"fprintf(fout, ""add_executable(%s"", targetName);","fprintf(fout, ""add_executable(%s"", targetName.c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_728.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_728.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // Choose sources.
    if(!useSources)
      {
      sources.push_back(argv[2]);
      }

    // Detect languages to enable.
    cmLocalGenerator* lg = this->Makefile->GetLocalGenerator();
    cmGlobalGenerator* gg = lg->GetGlobalGenerator();
    std::set<std::string> testLangs;
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      std::string ext = cmSystemTools::GetFilenameLastExtension(*si);
      if(const char* lang = gg->GetLanguageFromExtension(ext.c_str()))
        {
        testLangs.insert(lang);
        }
      else
        {
        cmOStringStream err;
        err << ""Unknown extension \"""" << ext << ""\"" for file\n""
            << ""  "" << *si << ""\n""
            << ""try_compile() works only for enabled languages.  ""
            << ""Currently these are:\n "";
        std::vector<std::string> langs;
        gg->GetEnabledLanguages(langs);
        for(std::vector<std::string>::iterator l = langs.begin();
            l != langs.end(); ++l)
          {
          err << "" "" << *l;
          }
        err << ""\nSee project() command to enable other languages."";
        this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
        return -1;
        }
      }

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = cmsys::SystemTools::Fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""set(CMAKE_MODULE_PATH %s)\n"", def);
      }

    std::string projectLangs;
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      projectLangs += "" "" + *li;
      std::string rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
      std::string rulesOverrideLang = rulesOverrideBase + ""_"" + *li;
      if(const char* rulesOverridePath =
         this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }
      else if(const char* rulesOverridePath2 =
              this->Makefile->GetDefinition(rulesOverrideBase.c_str()))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }
      }
    fprintf(fout, ""project(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());
    fprintf(fout, ""set(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
      fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              lg->EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""set(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }
    fprintf(fout, ""include_directories(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""set(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""link_directories(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileDefs.size())
      {
      fprintf(fout, ""add_definitions( "");
      for (size_t i = 0; i < compileDefs.size(); ++i)
        {
        fprintf(fout,""%s "",compileDefs[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg;
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetExports(targets);
      tcfg.SetConfig(this->Makefile->GetDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURES to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURES first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if (const char *cxxDef
              = this->Makefile->GetDefinition(""CMAKE_CXX_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_TARGET="";
      flag += cxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *cDef
                = this->Makefile->GetDefinition(""CMAKE_C_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_TARGET="";
      flag += cDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcxxDef = this->Makefile->GetDefinition(
                                  ""CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcDef = this->Makefile->GetDefinition(
                                    ""CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *rootDef
              = this->Makefile->GetDefinition(""CMAKE_SYSROOT""))
      {
      std::string flag=""-DCMAKE_SYSROOT="";
      flag += rootDef;
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""set(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""add_executable(%s"", targetName);
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }
    fprintf(fout, "")\n"");
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_728.cpp,"[21, 0, 6, 0, 0, 0, 3, 0, 0, 0, 30, 0, 0, 0, 10, 593, 0, 0, 26, 40, 0, 0, 40, 83, 0, 0, 0, 0, 13, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 230, 1, 256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 2, 0, 28, 22, 3, 0, 122, 0, 0, 62, 2, 127, 0, 6, 0, 0, 6, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_728.cpp,430,"[""FILE *"", ""string"", ""char *""]","[""targets . empty_ret"", ""!""]"
6e466c6f2ee5160202aaa76a9d643d34bd7d908a,Merge branch 'master' into CONFIG-LOCATION-CMP0026,[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_348.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_348.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_348.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_840.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_840.cpp,465,466,466,467,"fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",targetName);","fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",
              targetName.c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_729.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_729.cpp,"{
      fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",targetName);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_729.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_729.cpp,445,"[""FILE *"", ""string"", ""char *""]","[""bool""]"
6e466c6f2ee5160202aaa76a9d643d34bd7d908a,Merge branch 'master' into CONFIG-LOCATION-CMP0026,[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_348.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_348.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_348.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_840.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_840.cpp,465,466,471,473,"fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName,
              libsToLink.c_str());","fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName.c_str(),
              libsToLink.c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_730.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_730.cpp,"{
      fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_730.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_730.cpp,450,"[""FILE *"", ""string"", ""char *"", ""libsToLink . c_str_ret""]","[""bool"", ""!""]"
fabf1fbabb4fc67844d5b2210e70a9829a59ff23,stringapi: Use strings in target name,[],Source/cmComputeLinkDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_355.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_355.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_355.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_850.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_850.cpp,254,254,255,255,"fprintf(stderr, ""Link dependency analysis for target %s, config %s\n"",
            this->Target->GetName(), this->Config?this->Config:""noconfig"");","fprintf(stderr, ""Link dependency analysis for target %s, config %s\n"",
            this->Target->GetName().c_str(),
            this->Config?this->Config:""noconfig"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_731.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_731.cpp,"{
    fprintf(stderr,
            ""---------------------------------------""
            ""---------------------------------------\n"");
    fprintf(stderr, ""Link dependency analysis for target %s, config %s\n"",
            this->Target->GetName(), this->Config?this->Config:""noconfig"");
    this->DisplayConstraintGraph();
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_731.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_731.cpp,37,"[""unkown"", ""string"", ""this -> Target -> GetName_ret"", ""member""]","[""member""]"
fabf1fbabb4fc67844d5b2210e70a9829a59ff23,stringapi: Use strings in target name,[],Source/cmComputeLinkDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_355.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_355.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_355.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_851.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_851.cpp,968,969,970,971,"fprintf(stderr, ""target [%s] links to:\n"", this->Target->GetName());","fprintf(stderr, ""target [%s] links to:\n"", this->Target->GetName().c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_732.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_732.cpp,"{
  fprintf(stderr, ""target [%s] links to:\n"", this->Target->GetName());
  for(std::vector<LinkEntry>::const_iterator lei =
        this->FinalLinkEntries.begin();
      lei != this->FinalLinkEntries.end(); ++lei)
    {
    if(lei->Target)
      {
      fprintf(stderr, ""  target [%s]\n"", lei->Target->GetName());
      }
    else
      {
      fprintf(stderr, ""  item [%s]\n"", lei->Item.c_str());
      }
    }
  fprintf(stderr, ""\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_732.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 40, 0, 0, 0, 1, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0, 10, 0, 0, 4, 0, 12, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_732.cpp,2,"[""unkown"", ""string"", ""this -> Target -> GetName_ret""]",[]
fabf1fbabb4fc67844d5b2210e70a9829a59ff23,stringapi: Use strings in target name,[],Source/cmComputeLinkDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_355.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_355.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_355.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_851.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_851.cpp,968,969,977,978,"fprintf(stderr, ""  target [%s]\n"", lei->Target->GetName());","fprintf(stderr, ""  target [%s]\n"", lei->Target->GetName().c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_733.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_733.cpp,"{
      fprintf(stderr, ""  target [%s]\n"", lei->Target->GetName());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_733.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_733.cpp,9,"[""unkown"", ""string"", ""lei -> Target -> GetName_ret""]","[""member""]"
fabf1fbabb4fc67844d5b2210e70a9829a59ff23,stringapi: Use strings in target name,[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_356.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_356.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_356.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_852.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_852.cpp,434,434,438,439,"fprintf(stderr, ""The %s target dependency graph is:\n"", name);","fprintf(stderr, ""The %s target dependency graph is:\n"", name.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_734.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_734.cpp,"{
  fprintf(stderr, ""The %s target dependency graph is:\n"", name);
  int n = static_cast<int>(graph.size());
  for(int depender_index = 0; depender_index < n; ++depender_index)
    {
    EdgeList const& nl = graph[depender_index];
    cmTarget const* depender = this->Targets[depender_index];
    fprintf(stderr, ""target %d is [%s]\n"",
            depender_index, depender->GetName());
    for(EdgeList::const_iterator ni = nl.begin(); ni != nl.end(); ++ni)
      {
      int dependee_index = *ni;
      cmTarget const* dependee = this->Targets[dependee_index];
      fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName(), ni->IsStrong()? ""strong"" : ""weak"");
      }
    }
  fprintf(stderr, ""\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_734.cpp,"[0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 63, 0, 0, 5, 7, 0, 0, 9, 7, 0, 0, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 1, 37, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 0, 3, 1, 1, 0, 12, 0, 0, 4, 0, 16, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_734.cpp,3,"[""unkown"", ""string"", ""const char *""]",[]
fabf1fbabb4fc67844d5b2210e70a9829a59ff23,stringapi: Use strings in target name,[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_356.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_356.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_356.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_852.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_852.cpp,434,434,444,445,"fprintf(stderr, ""target %d is [%s]\n"",
            depender_index, depender->GetName());","fprintf(stderr, ""target %d is [%s]\n"",
            depender_index, depender->GetName().c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_735.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_735.cpp,"{
    EdgeList const& nl = graph[depender_index];
    cmTarget const* depender = this->Targets[depender_index];
    fprintf(stderr, ""target %d is [%s]\n"",
            depender_index, depender->GetName());
    for(EdgeList::const_iterator ni = nl.begin(); ni != nl.end(); ++ni)
      {
      int dependee_index = *ni;
      cmTarget const* dependee = this->Targets[dependee_index];
      fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName(), ni->IsStrong()? ""strong"" : ""weak"");
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_735.cpp,"[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 47, 0, 0, 4, 5, 0, 0, 6, 4, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 3, 0, 2, 1, 1, 0, 7, 0, 0, 2, 0, 9, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_735.cpp,9,"[""unkown"", ""string"", ""null"", ""depender -> GetName_ret""]","[""null"", ""int"", ""<""]"
fabf1fbabb4fc67844d5b2210e70a9829a59ff23,stringapi: Use strings in target name,[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_356.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_356.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_356.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_852.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_852.cpp,434,434,450,451,"fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName(), ni->IsStrong()? ""strong"" : ""weak"");","fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName().c_str(), ni->IsStrong()? ""strong"" : ""weak"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_736.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_736.cpp,"{
      int dependee_index = *ni;
      cmTarget const* dependee = this->Targets[dependee_index];
      fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName(), ni->IsStrong()? ""strong"" : ""weak"");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_736.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 18, 0, 0, 2, 2, 0, 0, 2, 3, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 1, 1, 0, 3, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_736.cpp,15,"[""unkown"", ""string"", ""int"", ""dependee -> GetName_ret"", ""string""]","[""nl . begin_ret"", ""nl . end_ret"", ""!=""]"
fabf1fbabb4fc67844d5b2210e70a9829a59ff23,stringapi: Use strings in target name,[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_356.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_356.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_356.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_853.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_853.cpp,471,472,472,473,"fprintf(stderr, ""  contains target %d [%s]\n"",
              i, this->Targets[i]->GetName());","fprintf(stderr, ""  contains target %d [%s]\n"",
              i, this->Targets[i]->GetName().c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_737.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_737.cpp,"{
      int i = *ni;
      fprintf(stderr, ""  contains target %d [%s]\n"",
              i, this->Targets[i]->GetName());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_737.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_737.cpp,14,"[""unkown"", ""string"", ""int"", ""this -> Targets [ i ] -> GetName_ret""]","[""nl . begin_ret"", ""nl . end_ret"", ""!=""]"
fabf1fbabb4fc67844d5b2210e70a9829a59ff23,stringapi: Use strings in target name,[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_357.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_357.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_357.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_854.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_854.cpp,450,450,452,452,"fprintf(fout, ""add_executable(%s"", targetName);","fprintf(fout, ""add_executable(%s"", targetName.c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_738.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_738.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // Choose sources.
    if(!useSources)
      {
      sources.push_back(argv[2]);
      }

    // Detect languages to enable.
    cmLocalGenerator* lg = this->Makefile->GetLocalGenerator();
    cmGlobalGenerator* gg = lg->GetGlobalGenerator();
    std::set<std::string> testLangs;
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      std::string ext = cmSystemTools::GetFilenameLastExtension(*si);
      std::string lang = gg->GetLanguageFromExtension(ext.c_str());
      if(!lang.empty())
        {
        testLangs.insert(lang);
        }
      else
        {
        cmOStringStream err;
        err << ""Unknown extension \"""" << ext << ""\"" for file\n""
            << ""  "" << *si << ""\n""
            << ""try_compile() works only for enabled languages.  ""
            << ""Currently these are:\n "";
        std::vector<std::string> langs;
        gg->GetEnabledLanguages(langs);
        for(std::vector<std::string>::iterator l = langs.begin();
            l != langs.end(); ++l)
          {
          err << "" "" << *l;
          }
        err << ""\nSee project() command to enable other languages."";
        this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
        return -1;
        }
      }

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = cmsys::SystemTools::Fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""set(CMAKE_MODULE_PATH %s)\n"", def);
      }

    std::string projectLangs;
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      projectLangs += "" "" + *li;
      std::string rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
      std::string rulesOverrideLang = rulesOverrideBase + ""_"" + *li;
      if(const char* rulesOverridePath =
         this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }
      else if(const char* rulesOverridePath2 =
              this->Makefile->GetDefinition(rulesOverrideBase.c_str()))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }
      }
    fprintf(fout, ""project(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());
    fprintf(fout, ""set(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
      fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              lg->EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""set(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }
    fprintf(fout, ""include_directories(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""set(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""link_directories(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileDefs.size())
      {
      fprintf(fout, ""add_definitions( "");
      for (size_t i = 0; i < compileDefs.size(); ++i)
        {
        fprintf(fout,""%s "",compileDefs[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg;
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetExports(targets);
      tcfg.SetConfig(this->Makefile->GetDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURES to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURES first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if (const char *cxxDef
              = this->Makefile->GetDefinition(""CMAKE_CXX_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_TARGET="";
      flag += cxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *cDef
                = this->Makefile->GetDefinition(""CMAKE_C_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_TARGET="";
      flag += cDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcxxDef = this->Makefile->GetDefinition(
                                  ""CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcDef = this->Makefile->GetDefinition(
                                    ""CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *rootDef
              = this->Makefile->GetDefinition(""CMAKE_SYSROOT""))
      {
      std::string flag=""-DCMAKE_SYSROOT="";
      flag += rootDef;
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""set(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""add_executable(%s"", targetName);
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }
    fprintf(fout, "")\n"");
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_738.cpp,"[21, 0, 6, 0, 0, 0, 3, 0, 0, 0, 30, 0, 0, 0, 9, 598, 0, 0, 27, 40, 0, 0, 40, 83, 0, 0, 0, 0, 12, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 233, 1, 257, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 2, 0, 28, 22, 3, 0, 123, 0, 0, 62, 2, 127, 0, 6, 0, 0, 6, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_738.cpp,431,"[""FILE *"", ""string"", ""char *""]","[""tcfg . GenerateImportFile_ret"", ""!""]"
fabf1fbabb4fc67844d5b2210e70a9829a59ff23,stringapi: Use strings in target name,[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_357.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_357.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_357.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_855.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_855.cpp,466,466,467,467,"fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",targetName);","fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",
              targetName.c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_739.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_739.cpp,"{
      fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",targetName);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_739.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_739.cpp,446,"[""FILE *"", ""string"", ""char *""]","[""bool""]"
fabf1fbabb4fc67844d5b2210e70a9829a59ff23,stringapi: Use strings in target name,[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_357.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_357.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_357.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_855.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_855.cpp,466,466,472,473,"fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName,
              libsToLink.c_str());","fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName.c_str(),
              libsToLink.c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_740.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_740.cpp,"{
      fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_740.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_740.cpp,451,"[""FILE *"", ""string"", ""char *"", ""libsToLink . c_str_ret""]","[""bool"", ""!""]"
fabf1fbabb4fc67844d5b2210e70a9829a59ff23,stringapi: Use strings in target name,[],Source/cmLocalVisualStudio6Generator.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_358.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_358.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_358.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_856.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_856.cpp,572,572,575,575,"sprintf(output,""%s/%s_force_%i"", this->Makefile->GetStartOutputDirectory(),
          target.GetName(), count);","sprintf(output,""%s/%s_force_%i"", this->Makefile->GetStartOutputDirectory(),
          target.GetName().c_str(), count);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_741.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_741.cpp,"{
  // Create a fake output that forces the rule to run.
  char* output = new char[(strlen(this->Makefile->GetStartOutputDirectory()) +
                           strlen(target.GetName()) + 30)];
  sprintf(output,""%s/%s_force_%i"", this->Makefile->GetStartOutputDirectory(),
          target.GetName(), count);
  std::string comment = this->ConstructComment(origCommand, ""<hack>"");

  // Add the rule with the given dependencies and commands.
  const char* no_main_dependency = 0;
  if(cmSourceFile* outsf =
     this->Makefile->AddCustomCommandToOutput(
       output, depends, no_main_dependency,
       origCommand.GetCommandLines(), comment.c_str(),
       origCommand.GetWorkingDirectory()))
    {
    target.AddSourceFile(outsf);
    }

  // Replace the dependencies with the output of this rule so that the
  // next rule added will run after this one.
  depends.clear();
  depends.push_back(output);

  // Free the fake output name.
  delete [] output;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_741.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 63, 0, 0, 3, 4, 0, 0, 4, 4, 0, 0, 0, 0, 3, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 1, 1, 0, 0, 15, 0, 0, 5, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_741.cpp,9,"[""char *"", ""string"", ""this -> Makefile -> GetStartOutputDirectory_ret"", ""target . GetName_ret"", ""int""]",[]
f668112039798f5ebc955e127f9c3e4e7cdb5cc4,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_362.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_362.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_362.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_862.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_862.cpp,2222,2242,2224,2244,"sprintf(cp->ExitExceptionString, ""Exit code 0x%x\n"", code);","_snprintf(cp->ExitExceptionString, KWSYSPE_PIPE_BUFFER_SIZE, ""Exit code 0x%x\n"", code);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_742.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_742.cpp,"{
    case STATUS_CONTROL_C_EXIT:
      KWSYSPE_CASE(Interrupt, ""User interrupt""); break;

    case STATUS_FLOAT_DENORMAL_OPERAND:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (denormal operand)""); break;
    case STATUS_FLOAT_DIVIDE_BY_ZERO:
      KWSYSPE_CASE(Numerical, ""Divide-by-zero""); break;
    case STATUS_FLOAT_INEXACT_RESULT:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (inexact result)""); break;
    case STATUS_FLOAT_INVALID_OPERATION:
      KWSYSPE_CASE(Numerical, ""Invalid floating-point operation""); break;
    case STATUS_FLOAT_OVERFLOW:
      KWSYSPE_CASE(Numerical, ""Floating-point overflow""); break;
    case STATUS_FLOAT_STACK_CHECK:
      KWSYSPE_CASE(Numerical, ""Floating-point stack check failed""); break;
    case STATUS_FLOAT_UNDERFLOW:
      KWSYSPE_CASE(Numerical, ""Floating-point underflow""); break;
#ifdef STATUS_FLOAT_MULTIPLE_FAULTS
    case STATUS_FLOAT_MULTIPLE_FAULTS:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (multiple faults)""); break;
#endif
#ifdef STATUS_FLOAT_MULTIPLE_TRAPS
    case STATUS_FLOAT_MULTIPLE_TRAPS:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (multiple traps)""); break;
#endif
    case STATUS_INTEGER_DIVIDE_BY_ZERO:
      KWSYSPE_CASE(Numerical, ""Integer divide-by-zero""); break;
    case STATUS_INTEGER_OVERFLOW:
      KWSYSPE_CASE(Numerical, ""Integer overflow""); break;

    case STATUS_DATATYPE_MISALIGNMENT:
      KWSYSPE_CASE(Fault, ""Datatype misalignment""); break;
    case STATUS_ACCESS_VIOLATION:
      KWSYSPE_CASE(Fault, ""Access violation""); break;
    case STATUS_IN_PAGE_ERROR:
      KWSYSPE_CASE(Fault, ""In-page error""); break;
    case STATUS_INVALID_HANDLE:
      KWSYSPE_CASE(Fault, ""Invalid hanlde""); break;
    case STATUS_NONCONTINUABLE_EXCEPTION:
      KWSYSPE_CASE(Fault, ""Noncontinuable exception""); break;
    case STATUS_INVALID_DISPOSITION:
      KWSYSPE_CASE(Fault, ""Invalid disposition""); break;
    case STATUS_ARRAY_BOUNDS_EXCEEDED:
      KWSYSPE_CASE(Fault, ""Array bounds exceeded""); break;
    case STATUS_STACK_OVERFLOW:
      KWSYSPE_CASE(Fault, ""Stack overflow""); break;

    case STATUS_ILLEGAL_INSTRUCTION:
      KWSYSPE_CASE(Illegal, ""Illegal instruction""); break;
    case STATUS_PRIVILEGED_INSTRUCTION:
      KWSYSPE_CASE(Illegal, ""Privileged instruction""); break;

    case STATUS_NO_MEMORY:
    default:
      cp->ExitException = kwsysProcess_Exception_Other;
      sprintf(cp->ExitExceptionString, ""Exit code 0x%x\n"", code);
      break;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_742.cpp,"[0, 0, 0, 0, 23, 0, 0, 0, 23, 1, 1, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 24, 0, 47, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_742.cpp,59,"[""member"", ""string"", ""int""]","[""int""]"
704ab3d24827cfe5754a00028086f21503c2e08b,"KWSys 2013-11-21 (1010d0e3)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ 1010d0e3 | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' 6eab64c3..1010d0e3
Brad King (2):
      ace1364c Encoding: Remove unused include
      1010d0e3 SystemTools: Avoid unused function warnings

Clinton Stimpson (4):
      0c2ff1f7 Encoding: Add Encoding module.
      8abbad82 FStream: Add FStream module.
      0a98de97 KWSys: Port to use wide character Windows APIs throughout.
      2b0c683d Encoding: Default to ANSI code page on Windows

David Cole (1):
      f67bb2ba SystemTools: Move typedef mode_t inside the SystemTools class

Sean McBride (1):
      a40b9263 SystemInformation: Work around gcc -Wliteral-suffix warning

Change-Id: Ie52df972331cc7377c236d410ead86024e9d15ab",[],ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_364.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_364.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_364.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_865.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_865.cpp,2222,2242,2224,2244,"sprintf(cp->ExitExceptionString, ""Exit code 0x%x\n"", code);","_snprintf(cp->ExitExceptionString, KWSYSPE_PIPE_BUFFER_SIZE, ""Exit code 0x%x\n"", code);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_743.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_743.cpp,"{
    case STATUS_CONTROL_C_EXIT:
      KWSYSPE_CASE(Interrupt, ""User interrupt""); break;

    case STATUS_FLOAT_DENORMAL_OPERAND:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (denormal operand)""); break;
    case STATUS_FLOAT_DIVIDE_BY_ZERO:
      KWSYSPE_CASE(Numerical, ""Divide-by-zero""); break;
    case STATUS_FLOAT_INEXACT_RESULT:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (inexact result)""); break;
    case STATUS_FLOAT_INVALID_OPERATION:
      KWSYSPE_CASE(Numerical, ""Invalid floating-point operation""); break;
    case STATUS_FLOAT_OVERFLOW:
      KWSYSPE_CASE(Numerical, ""Floating-point overflow""); break;
    case STATUS_FLOAT_STACK_CHECK:
      KWSYSPE_CASE(Numerical, ""Floating-point stack check failed""); break;
    case STATUS_FLOAT_UNDERFLOW:
      KWSYSPE_CASE(Numerical, ""Floating-point underflow""); break;
#ifdef STATUS_FLOAT_MULTIPLE_FAULTS
    case STATUS_FLOAT_MULTIPLE_FAULTS:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (multiple faults)""); break;
#endif
#ifdef STATUS_FLOAT_MULTIPLE_TRAPS
    case STATUS_FLOAT_MULTIPLE_TRAPS:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (multiple traps)""); break;
#endif
    case STATUS_INTEGER_DIVIDE_BY_ZERO:
      KWSYSPE_CASE(Numerical, ""Integer divide-by-zero""); break;
    case STATUS_INTEGER_OVERFLOW:
      KWSYSPE_CASE(Numerical, ""Integer overflow""); break;

    case STATUS_DATATYPE_MISALIGNMENT:
      KWSYSPE_CASE(Fault, ""Datatype misalignment""); break;
    case STATUS_ACCESS_VIOLATION:
      KWSYSPE_CASE(Fault, ""Access violation""); break;
    case STATUS_IN_PAGE_ERROR:
      KWSYSPE_CASE(Fault, ""In-page error""); break;
    case STATUS_INVALID_HANDLE:
      KWSYSPE_CASE(Fault, ""Invalid hanlde""); break;
    case STATUS_NONCONTINUABLE_EXCEPTION:
      KWSYSPE_CASE(Fault, ""Noncontinuable exception""); break;
    case STATUS_INVALID_DISPOSITION:
      KWSYSPE_CASE(Fault, ""Invalid disposition""); break;
    case STATUS_ARRAY_BOUNDS_EXCEEDED:
      KWSYSPE_CASE(Fault, ""Array bounds exceeded""); break;
    case STATUS_STACK_OVERFLOW:
      KWSYSPE_CASE(Fault, ""Stack overflow""); break;

    case STATUS_ILLEGAL_INSTRUCTION:
      KWSYSPE_CASE(Illegal, ""Illegal instruction""); break;
    case STATUS_PRIVILEGED_INSTRUCTION:
      KWSYSPE_CASE(Illegal, ""Privileged instruction""); break;

    case STATUS_NO_MEMORY:
    default:
      cp->ExitException = kwsysProcess_Exception_Other;
      sprintf(cp->ExitExceptionString, ""Exit code 0x%x\n"", code);
      break;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_743.cpp,"[0, 0, 0, 0, 23, 0, 0, 0, 23, 1, 1, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 24, 0, 47, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_743.cpp,59,"[""member"", ""string"", ""int""]","[""int""]"
c04995b46eb93d39f97ee12ab63a5479c0b79b41,"cmake: Split -E command implementation into separate source file

Move the cmake::ExecuteCMakeCommand static method and all the static
methods it calls out of the 'cmake' class to a separate 'cmcmd' class.
Build the latter as part of the main cmake executable with cmakemain.cxx
and not in CMakeLib.  Drop unused header includes from ""cmake.cxx"".

By moving this implementation out of cmake.cxx we avoid carrying it
around in all the executables that use class 'cmake'.  It is needed only
for the main ""cmake -E"" functionality.",[],Source/cmake.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_365.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_365.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_365.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_866.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_866.cpp,1128,1112,1503,-1,"fprintf(progFile,""%i\n"",count);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_744.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_744.cpp,"{
          fprintf(progFile,""%i\n"",count);
          fclose(progFile);
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_744.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_744.cpp,309,"[""FILE *"", ""string"", ""atoi_ret""]","[""FILE *""]"
c04995b46eb93d39f97ee12ab63a5479c0b79b41,"cmake: Split -E command implementation into separate source file

Move the cmake::ExecuteCMakeCommand static method and all the static
methods it calls out of the 'cmake' class to a separate 'cmcmd' class.
Build the latter as part of the main cmake executable with cmakemain.cxx
and not in CMakeLib.  Drop unused header includes from ""cmake.cxx"".

By moving this implementation out of cmake.cxx we avoid carrying it
around in all the executables that use class 'cmake'.  It is needed only
for the main ""cmake -E"" functionality.",[],Source/cmake.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_365.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_365.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_365.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_866.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_866.cpp,1128,1112,1544,-1,"fprintf(progFile,""empty"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_745.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_745.cpp,"{
          fprintf(progFile,""empty"");
          fclose(progFile);
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_745.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_745.cpp,350,"[""fopen_ret"", ""string""]","[""fopen_ret""]"
c04995b46eb93d39f97ee12ab63a5479c0b79b41,"cmake: Split -E command implementation into separate source file

Move the cmake::ExecuteCMakeCommand static method and all the static
methods it calls out of the 'cmake' class to a separate 'cmcmd' class.
Build the latter as part of the main cmake executable with cmakemain.cxx
and not in CMakeLib.  Drop unused header includes from ""cmake.cxx"".

By moving this implementation out of cmake.cxx we avoid carrying it
around in all the executables that use class 'cmake'.  It is needed only
for the main ""cmake -E"" functionality.",[],Source/cmake.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_365.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_365.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_365.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_866.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_866.cpp,1128,1112,1553,-1,"fprintf(stdout,""[%3i%%] "",((fileNum-3)*100)/count);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_746.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_746.cpp,"{
        // print the progress
        fprintf(stdout,""[%3i%%] "",((fileNum-3)*100)/count);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_746.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_746.cpp,359,"[""unkown"", ""string"", ""int""]","[""int"", ""null"", "">""]"
33055c405ed3b0e1df52c186f0d8a3e878aa88a8,"Generate modern-style cmake code.

The commits 9db31162 (Remove CMake-language block-end command
arguments, 2012-08-13) and 77543bde (Convert CMake-language
commands to lower case, 2012-08-13) changed most cmake code
to use lowercase commands and no parameters in termination
commands. However, those changes excluded cmake code generated
in c++ by cmake.

Make a similar style change to code generated by cmake.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_366.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_867.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_867.cpp,294,294,296,296,"fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);","fprintf(fout, ""set(CMAKE_MODULE_PATH %s)\n"", def);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_747.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_747.cpp,"{
      fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_747.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_747.cpp,275,"[""FILE *"", ""string"", ""const char *""]","[""const char *""]"
33055c405ed3b0e1df52c186f0d8a3e878aa88a8,"Generate modern-style cmake code.

The commits 9db31162 (Remove CMake-language block-end command
arguments, 2012-08-13) and 77543bde (Convert CMake-language
commands to lower case, 2012-08-13) changed most cmake code
to use lowercase commands and no parameters in termination
commands. However, those changes excluded cmake code generated
in c++ by cmake.

Make a similar style change to code generated by cmake.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_366.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_868.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_868.cpp,307,307,309,309,"fprintf(fout, ""SET(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);","fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_748.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_748.cpp,"{
        fprintf(fout, ""SET(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_748.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_748.cpp,288,"[""FILE *"", ""string"", ""rulesOverrideLang . c_str_ret"", ""unkown""]","[""unkown"", ""this -> Makefile -> GetDefinition_ret""]"
33055c405ed3b0e1df52c186f0d8a3e878aa88a8,"Generate modern-style cmake code.

The commits 9db31162 (Remove CMake-language block-end command
arguments, 2012-08-13) and 77543bde (Convert CMake-language
commands to lower case, 2012-08-13) changed most cmake code
to use lowercase commands and no parameters in termination
commands. However, those changes excluded cmake code generated
in c++ by cmake.

Make a similar style change to code generated by cmake.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_366.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_868.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_868.cpp,307,307,315,315,"fprintf(fout, ""SET(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);","fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_749.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_749.cpp,"{
        fprintf(fout, ""SET(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_749.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_749.cpp,294,"[""FILE *"", ""string"", ""rulesOverrideBase . c_str_ret"", ""unkown""]","[""unkown"", ""this -> Makefile -> GetDefinition_ret""]"
33055c405ed3b0e1df52c186f0d8a3e878aa88a8,"Generate modern-style cmake code.

The commits 9db31162 (Remove CMake-language block-end command
arguments, 2012-08-13) and 77543bde (Convert CMake-language
commands to lower case, 2012-08-13) changed most cmake code
to use lowercase commands and no parameters in termination
commands. However, those changes excluded cmake code generated
in c++ by cmake.

Make a similar style change to code generated by cmake.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_366.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_868.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_868.cpp,307,307,319,319,"f(fout, ""PROJECT(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());","f(fout, ""project(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_750.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_750.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // Choose sources.
    if(!useSources)
      {
      sources.push_back(argv[2]);
      }

    // Detect languages to enable.
    cmLocalGenerator* lg = this->Makefile->GetLocalGenerator();
    cmGlobalGenerator* gg = lg->GetGlobalGenerator();
    std::set<std::string> testLangs;
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      std::string ext = cmSystemTools::GetFilenameLastExtension(*si);
      if(const char* lang = gg->GetLanguageFromExtension(ext.c_str()))
        {
        testLangs.insert(lang);
        }
      else
        {
        cmOStringStream err;
        err << ""Unknown extension \"""" << ext << ""\"" for file\n""
            << ""  "" << *si << ""\n""
            << ""try_compile() works only for enabled languages.  ""
            << ""Currently these are:\n "";
        std::vector<std::string> langs;
        gg->GetEnabledLanguages(langs);
        for(std::vector<std::string>::iterator l = langs.begin();
            l != langs.end(); ++l)
          {
          err << "" "" << *l;
          }
        err << ""\nSee project() command to enable other languages."";
        this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
        return -1;
        }
      }

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);
      }

    std::string projectLangs;
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      projectLangs += "" "" + *li;
      std::string rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
      std::string rulesOverrideLang = rulesOverrideBase + ""_"" + *li;
      if(const char* rulesOverridePath =
         this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
        {
        fprintf(fout, ""SET(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }
      else if(const char* rulesOverridePath2 =
              this->Makefile->GetDefinition(rulesOverrideBase.c_str()))
        {
        fprintf(fout, ""SET(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }
      }
    fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
      fprintf(fout, ""SET(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              lg->EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""SET(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""SET(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileDefs.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (size_t i = 0; i < compileDefs.size(); ++i)
        {
        fprintf(fout,""%s "",compileDefs[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg;
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetExports(targets);
      tcfg.SetConfig(this->Makefile->GetDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURE to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURE first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""SET(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""ADD_EXECUTABLE(%s"", targetName);
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }
    fprintf(fout, "")\n"");
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_750.cpp,"[16, 0, 6, 0, 0, 0, 3, 0, 0, 0, 25, 0, 0, 0, 5, 510, 0, 0, 21, 30, 0, 0, 30, 73, 0, 0, 0, 0, 8, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 203, 1, 226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 2, 0, 23, 17, 3, 0, 112, 0, 0, 52, 2, 117, 0, 6, 0, 0, 6, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_750.cpp,298,"[""FILE *"", ""string"", ""projectLangs . c_str_ret""]","[""FILE *"", ""!"", ""!""]"
33055c405ed3b0e1df52c186f0d8a3e878aa88a8,"Generate modern-style cmake code.

The commits 9db31162 (Remove CMake-language block-end command
arguments, 2012-08-13) and 77543bde (Convert CMake-language
commands to lower case, 2012-08-13) changed most cmake code
to use lowercase commands and no parameters in termination
commands. However, those changes excluded cmake code generated
in c++ by cmake.

Make a similar style change to code generated by cmake.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_366.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_868.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_868.cpp,307,307,320,320,"fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");","fprintf(fout, ""set(CMAKE_VERBOSE_MAKEFILE 1)\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_751.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_751.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // Choose sources.
    if(!useSources)
      {
      sources.push_back(argv[2]);
      }

    // Detect languages to enable.
    cmLocalGenerator* lg = this->Makefile->GetLocalGenerator();
    cmGlobalGenerator* gg = lg->GetGlobalGenerator();
    std::set<std::string> testLangs;
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      std::string ext = cmSystemTools::GetFilenameLastExtension(*si);
      if(const char* lang = gg->GetLanguageFromExtension(ext.c_str()))
        {
        testLangs.insert(lang);
        }
      else
        {
        cmOStringStream err;
        err << ""Unknown extension \"""" << ext << ""\"" for file\n""
            << ""  "" << *si << ""\n""
            << ""try_compile() works only for enabled languages.  ""
            << ""Currently these are:\n "";
        std::vector<std::string> langs;
        gg->GetEnabledLanguages(langs);
        for(std::vector<std::string>::iterator l = langs.begin();
            l != langs.end(); ++l)
          {
          err << "" "" << *l;
          }
        err << ""\nSee project() command to enable other languages."";
        this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
        return -1;
        }
      }

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);
      }

    std::string projectLangs;
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      projectLangs += "" "" + *li;
      std::string rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
      std::string rulesOverrideLang = rulesOverrideBase + ""_"" + *li;
      if(const char* rulesOverridePath =
         this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
        {
        fprintf(fout, ""SET(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }
      else if(const char* rulesOverridePath2 =
              this->Makefile->GetDefinition(rulesOverrideBase.c_str()))
        {
        fprintf(fout, ""SET(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }
      }
    fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
      fprintf(fout, ""SET(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              lg->EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""SET(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""SET(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileDefs.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (size_t i = 0; i < compileDefs.size(); ++i)
        {
        fprintf(fout,""%s "",compileDefs[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg;
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetExports(targets);
      tcfg.SetConfig(this->Makefile->GetDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURE to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURE first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""SET(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""ADD_EXECUTABLE(%s"", targetName);
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }
    fprintf(fout, "")\n"");
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_751.cpp,"[16, 0, 6, 0, 0, 0, 3, 0, 0, 0, 25, 0, 0, 0, 5, 510, 0, 0, 21, 30, 0, 0, 30, 73, 0, 0, 0, 0, 8, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 203, 1, 226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 2, 0, 23, 17, 3, 0, 112, 0, 0, 52, 2, 117, 0, 6, 0, 0, 6, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_751.cpp,299,"[""FILE *"", ""string""]","[""FILE *"", ""!"", ""!""]"
33055c405ed3b0e1df52c186f0d8a3e878aa88a8,"Generate modern-style cmake code.

The commits 9db31162 (Remove CMake-language block-end command
arguments, 2012-08-13) and 77543bde (Convert CMake-language
commands to lower case, 2012-08-13) changed most cmake code
to use lowercase commands and no parameters in termination
commands. However, those changes excluded cmake code generated
in c++ by cmake.

Make a similar style change to code generated by cmake.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_366.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_868.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_868.cpp,307,307,326,326,"fprintf(fout, ""SET(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              lg->EscapeForCMake(flags?flags:"""").c_str());","fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              lg->EscapeForCMake(flags?flags:"""").c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_752.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_752.cpp,"{
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
      fprintf(fout, ""SET(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              lg->EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""SET(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_752.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 33, 0, 0, 2, 2, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 1, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 9, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_752.cpp,305,"[""FILE *"", ""string"", ""li -> c_str_ret"", ""lg -> EscapeForCMake ( flags ? flags : \""\"" ) . c_str_ret""]","[""testLangs . begin_ret"", ""testLangs . end_ret"", ""!=""]"
33055c405ed3b0e1df52c186f0d8a3e878aa88a8,"Generate modern-style cmake code.

The commits 9db31162 (Remove CMake-language block-end command
arguments, 2012-08-13) and 77543bde (Convert CMake-language
commands to lower case, 2012-08-13) changed most cmake code
to use lowercase commands and no parameters in termination
commands. However, those changes excluded cmake code generated
in c++ by cmake.

Make a similar style change to code generated by cmake.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_366.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_868.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_868.cpp,307,307,328,328,"fprintf(fout, ""SET(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());","fprintf(fout, ""set(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_753.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_753.cpp,"{
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
      fprintf(fout, ""SET(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              lg->EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""SET(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_753.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 33, 0, 0, 2, 2, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 1, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 9, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_753.cpp,307,[],"[""testLangs . begin_ret"", ""testLangs . end_ret"", ""!=""]"
33055c405ed3b0e1df52c186f0d8a3e878aa88a8,"Generate modern-style cmake code.

The commits 9db31162 (Remove CMake-language block-end command
arguments, 2012-08-13) and 77543bde (Convert CMake-language
commands to lower case, 2012-08-13) changed most cmake code
to use lowercase commands and no parameters in termination
commands. However, those changes excluded cmake code generated
in c++ by cmake.

Make a similar style change to code generated by cmake.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_366.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_868.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_868.cpp,307,307,331,331,"fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");","fprintf(fout, ""include_directories(${INCLUDE_DIRECTORIES})\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_754.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_754.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // Choose sources.
    if(!useSources)
      {
      sources.push_back(argv[2]);
      }

    // Detect languages to enable.
    cmLocalGenerator* lg = this->Makefile->GetLocalGenerator();
    cmGlobalGenerator* gg = lg->GetGlobalGenerator();
    std::set<std::string> testLangs;
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      std::string ext = cmSystemTools::GetFilenameLastExtension(*si);
      if(const char* lang = gg->GetLanguageFromExtension(ext.c_str()))
        {
        testLangs.insert(lang);
        }
      else
        {
        cmOStringStream err;
        err << ""Unknown extension \"""" << ext << ""\"" for file\n""
            << ""  "" << *si << ""\n""
            << ""try_compile() works only for enabled languages.  ""
            << ""Currently these are:\n "";
        std::vector<std::string> langs;
        gg->GetEnabledLanguages(langs);
        for(std::vector<std::string>::iterator l = langs.begin();
            l != langs.end(); ++l)
          {
          err << "" "" << *l;
          }
        err << ""\nSee project() command to enable other languages."";
        this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
        return -1;
        }
      }

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);
      }

    std::string projectLangs;
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      projectLangs += "" "" + *li;
      std::string rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
      std::string rulesOverrideLang = rulesOverrideBase + ""_"" + *li;
      if(const char* rulesOverridePath =
         this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
        {
        fprintf(fout, ""SET(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }
      else if(const char* rulesOverridePath2 =
              this->Makefile->GetDefinition(rulesOverrideBase.c_str()))
        {
        fprintf(fout, ""SET(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }
      }
    fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
      fprintf(fout, ""SET(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              lg->EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""SET(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""SET(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileDefs.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (size_t i = 0; i < compileDefs.size(); ++i)
        {
        fprintf(fout,""%s "",compileDefs[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg;
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetExports(targets);
      tcfg.SetConfig(this->Makefile->GetDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURE to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURE first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""SET(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""ADD_EXECUTABLE(%s"", targetName);
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }
    fprintf(fout, "")\n"");
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_754.cpp,"[16, 0, 6, 0, 0, 0, 3, 0, 0, 0, 25, 0, 0, 0, 5, 510, 0, 0, 21, 30, 0, 0, 30, 73, 0, 0, 0, 0, 8, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 203, 1, 226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 2, 0, 23, 17, 3, 0, 112, 0, 0, 52, 2, 117, 0, 6, 0, 0, 6, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_754.cpp,310,"[""FILE *"", ""string""]","[""FILE *"", ""!"", ""!""]"
33055c405ed3b0e1df52c186f0d8a3e878aa88a8,"Generate modern-style cmake code.

The commits 9db31162 (Remove CMake-language block-end command
arguments, 2012-08-13) and 77543bde (Convert CMake-language
commands to lower case, 2012-08-13) changed most cmake code
to use lowercase commands and no parameters in termination
commands. However, those changes excluded cmake code generated
in c++ by cmake.

Make a similar style change to code generated by cmake.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_366.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_868.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_868.cpp,307,307,332,332,"fprintf(fout, ""SET(CMAKE_SUPPRESS_REGENERATION 1)\n"");","fprintf(fout, ""set(CMAKE_SUPPRESS_REGENERATION 1)\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_755.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_755.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // Choose sources.
    if(!useSources)
      {
      sources.push_back(argv[2]);
      }

    // Detect languages to enable.
    cmLocalGenerator* lg = this->Makefile->GetLocalGenerator();
    cmGlobalGenerator* gg = lg->GetGlobalGenerator();
    std::set<std::string> testLangs;
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      std::string ext = cmSystemTools::GetFilenameLastExtension(*si);
      if(const char* lang = gg->GetLanguageFromExtension(ext.c_str()))
        {
        testLangs.insert(lang);
        }
      else
        {
        cmOStringStream err;
        err << ""Unknown extension \"""" << ext << ""\"" for file\n""
            << ""  "" << *si << ""\n""
            << ""try_compile() works only for enabled languages.  ""
            << ""Currently these are:\n "";
        std::vector<std::string> langs;
        gg->GetEnabledLanguages(langs);
        for(std::vector<std::string>::iterator l = langs.begin();
            l != langs.end(); ++l)
          {
          err << "" "" << *l;
          }
        err << ""\nSee project() command to enable other languages."";
        this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
        return -1;
        }
      }

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);
      }

    std::string projectLangs;
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      projectLangs += "" "" + *li;
      std::string rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
      std::string rulesOverrideLang = rulesOverrideBase + ""_"" + *li;
      if(const char* rulesOverridePath =
         this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
        {
        fprintf(fout, ""SET(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }
      else if(const char* rulesOverridePath2 =
              this->Makefile->GetDefinition(rulesOverrideBase.c_str()))
        {
        fprintf(fout, ""SET(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }
      }
    fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
      fprintf(fout, ""SET(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              lg->EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""SET(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""SET(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileDefs.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (size_t i = 0; i < compileDefs.size(); ++i)
        {
        fprintf(fout,""%s "",compileDefs[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg;
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetExports(targets);
      tcfg.SetConfig(this->Makefile->GetDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURE to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURE first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""SET(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""ADD_EXECUTABLE(%s"", targetName);
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }
    fprintf(fout, "")\n"");
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_755.cpp,"[16, 0, 6, 0, 0, 0, 3, 0, 0, 0, 25, 0, 0, 0, 5, 510, 0, 0, 21, 30, 0, 0, 30, 73, 0, 0, 0, 0, 8, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 203, 1, 226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 2, 0, 23, 17, 3, 0, 112, 0, 0, 52, 2, 117, 0, 6, 0, 0, 6, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_755.cpp,311,"[""FILE *"", ""string""]","[""FILE *"", ""!"", ""!""]"
33055c405ed3b0e1df52c186f0d8a3e878aa88a8,"Generate modern-style cmake code.

The commits 9db31162 (Remove CMake-language block-end command
arguments, 2012-08-13) and 77543bde (Convert CMake-language
commands to lower case, 2012-08-13) changed most cmake code
to use lowercase commands and no parameters in termination
commands. However, those changes excluded cmake code generated
in c++ by cmake.

Make a similar style change to code generated by cmake.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_366.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_868.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_868.cpp,307,307,333,333,"fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");","fprintf(fout, ""link_directories(${LINK_DIRECTORIES})\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_756.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_756.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // Choose sources.
    if(!useSources)
      {
      sources.push_back(argv[2]);
      }

    // Detect languages to enable.
    cmLocalGenerator* lg = this->Makefile->GetLocalGenerator();
    cmGlobalGenerator* gg = lg->GetGlobalGenerator();
    std::set<std::string> testLangs;
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      std::string ext = cmSystemTools::GetFilenameLastExtension(*si);
      if(const char* lang = gg->GetLanguageFromExtension(ext.c_str()))
        {
        testLangs.insert(lang);
        }
      else
        {
        cmOStringStream err;
        err << ""Unknown extension \"""" << ext << ""\"" for file\n""
            << ""  "" << *si << ""\n""
            << ""try_compile() works only for enabled languages.  ""
            << ""Currently these are:\n "";
        std::vector<std::string> langs;
        gg->GetEnabledLanguages(langs);
        for(std::vector<std::string>::iterator l = langs.begin();
            l != langs.end(); ++l)
          {
          err << "" "" << *l;
          }
        err << ""\nSee project() command to enable other languages."";
        this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
        return -1;
        }
      }

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);
      }

    std::string projectLangs;
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      projectLangs += "" "" + *li;
      std::string rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
      std::string rulesOverrideLang = rulesOverrideBase + ""_"" + *li;
      if(const char* rulesOverridePath =
         this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
        {
        fprintf(fout, ""SET(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }
      else if(const char* rulesOverridePath2 =
              this->Makefile->GetDefinition(rulesOverrideBase.c_str()))
        {
        fprintf(fout, ""SET(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }
      }
    fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
      fprintf(fout, ""SET(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              lg->EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""SET(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""SET(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileDefs.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (size_t i = 0; i < compileDefs.size(); ++i)
        {
        fprintf(fout,""%s "",compileDefs[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg;
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetExports(targets);
      tcfg.SetConfig(this->Makefile->GetDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURE to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURE first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""SET(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""ADD_EXECUTABLE(%s"", targetName);
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }
    fprintf(fout, "")\n"");
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_756.cpp,"[16, 0, 6, 0, 0, 0, 3, 0, 0, 0, 25, 0, 0, 0, 5, 510, 0, 0, 21, 30, 0, 0, 30, 73, 0, 0, 0, 0, 8, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 203, 1, 226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 2, 0, 23, 17, 3, 0, 112, 0, 0, 52, 2, 117, 0, 6, 0, 0, 6, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_756.cpp,312,"[""FILE *"", ""string""]","[""FILE *"", ""!"", ""!""]"
33055c405ed3b0e1df52c186f0d8a3e878aa88a8,"Generate modern-style cmake code.

The commits 9db31162 (Remove CMake-language block-end command
arguments, 2012-08-13) and 77543bde (Convert CMake-language
commands to lower case, 2012-08-13) changed most cmake code
to use lowercase commands and no parameters in termination
commands. However, those changes excluded cmake code generated
in c++ by cmake.

Make a similar style change to code generated by cmake.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_366.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_868.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_868.cpp,307,307,337,337,"fprintf(fout, ""ADD_DEFINITIONS( "");","fprintf(fout, ""add_definitions( "");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_757.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_757.cpp,"{
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (size_t i = 0; i < compileDefs.size(); ++i)
        {
        fprintf(fout,""%s "",compileDefs[i].c_str());
        }
      fprintf(fout, "")\n"");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_757.cpp,"[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 5, 0, 0, 3, 0, 7, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_757.cpp,316,"[""FILE *"", ""string""]","[""compileDefs . size_ret""]"
33055c405ed3b0e1df52c186f0d8a3e878aa88a8,"Generate modern-style cmake code.

The commits 9db31162 (Remove CMake-language block-end command
arguments, 2012-08-13) and 77543bde (Convert CMake-language
commands to lower case, 2012-08-13) changed most cmake code
to use lowercase commands and no parameters in termination
commands. However, those changes excluded cmake code generated
in c++ by cmake.

Make a similar style change to code generated by cmake.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_366.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_869.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_869.cpp,406,406,408,408,"fprintf(fout, ""SET(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");","fprintf(fout, ""set(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_758.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_758.cpp,"{
      fprintf(fout, ""SET(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_758.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_758.cpp,387,"[""FILE *"", ""string""]","[""this -> Makefile -> GetDefinition_ret"", ""null"", ""!=""]"
33055c405ed3b0e1df52c186f0d8a3e878aa88a8,"Generate modern-style cmake code.

The commits 9db31162 (Remove CMake-language block-end command
arguments, 2012-08-13) and 77543bde (Convert CMake-language
commands to lower case, 2012-08-13) changed most cmake code
to use lowercase commands and no parameters in termination
commands. However, those changes excluded cmake code generated
in c++ by cmake.

Make a similar style change to code generated by cmake.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_366.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_869.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_869.cpp,406,406,415,415,"fprintf(fout, ""ADD_EXECUTABLE(%s"", targetName);","fprintf(fout, ""add_executable(%s"", targetName);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_759.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_759.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // Choose sources.
    if(!useSources)
      {
      sources.push_back(argv[2]);
      }

    // Detect languages to enable.
    cmLocalGenerator* lg = this->Makefile->GetLocalGenerator();
    cmGlobalGenerator* gg = lg->GetGlobalGenerator();
    std::set<std::string> testLangs;
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      std::string ext = cmSystemTools::GetFilenameLastExtension(*si);
      if(const char* lang = gg->GetLanguageFromExtension(ext.c_str()))
        {
        testLangs.insert(lang);
        }
      else
        {
        cmOStringStream err;
        err << ""Unknown extension \"""" << ext << ""\"" for file\n""
            << ""  "" << *si << ""\n""
            << ""try_compile() works only for enabled languages.  ""
            << ""Currently these are:\n "";
        std::vector<std::string> langs;
        gg->GetEnabledLanguages(langs);
        for(std::vector<std::string>::iterator l = langs.begin();
            l != langs.end(); ++l)
          {
          err << "" "" << *l;
          }
        err << ""\nSee project() command to enable other languages."";
        this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
        return -1;
        }
      }

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);
      }

    std::string projectLangs;
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      projectLangs += "" "" + *li;
      std::string rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
      std::string rulesOverrideLang = rulesOverrideBase + ""_"" + *li;
      if(const char* rulesOverridePath =
         this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
        {
        fprintf(fout, ""SET(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }
      else if(const char* rulesOverridePath2 =
              this->Makefile->GetDefinition(rulesOverrideBase.c_str()))
        {
        fprintf(fout, ""SET(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }
      }
    fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
      fprintf(fout, ""SET(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              lg->EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""SET(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""SET(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileDefs.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (size_t i = 0; i < compileDefs.size(); ++i)
        {
        fprintf(fout,""%s "",compileDefs[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg;
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetExports(targets);
      tcfg.SetConfig(this->Makefile->GetDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURE to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURE first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""SET(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""ADD_EXECUTABLE(%s"", targetName);
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }
    fprintf(fout, "")\n"");
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_759.cpp,"[16, 0, 6, 0, 0, 0, 3, 0, 0, 0, 25, 0, 0, 0, 5, 510, 0, 0, 21, 30, 0, 0, 30, 73, 0, 0, 0, 0, 8, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 203, 1, 226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 2, 0, 23, 17, 3, 0, 112, 0, 0, 52, 2, 117, 0, 6, 0, 0, 6, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_759.cpp,394,"[""FILE *"", ""string"", ""char *""]","[""targets . empty_ret"", ""!""]"
33055c405ed3b0e1df52c186f0d8a3e878aa88a8,"Generate modern-style cmake code.

The commits 9db31162 (Remove CMake-language block-end command
arguments, 2012-08-13) and 77543bde (Convert CMake-language
commands to lower case, 2012-08-13) changed most cmake code
to use lowercase commands and no parameters in termination
commands. However, those changes excluded cmake code generated
in c++ by cmake.

Make a similar style change to code generated by cmake.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_366.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_870.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_870.cpp,429,429,430,430,"fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);","fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",targetName);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_760.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_760.cpp,"{
      fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_760.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_760.cpp,409,"[""FILE *"", ""string"", ""char *""]","[""bool""]"
33055c405ed3b0e1df52c186f0d8a3e878aa88a8,"Generate modern-style cmake code.

The commits 9db31162 (Remove CMake-language block-end command
arguments, 2012-08-13) and 77543bde (Convert CMake-language
commands to lower case, 2012-08-13) changed most cmake code
to use lowercase commands and no parameters in termination
commands. However, those changes excluded cmake code generated
in c++ by cmake.

Make a similar style change to code generated by cmake.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_366.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_366.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_870.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_870.cpp,429,429,435,435,"fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());","fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName,
              libsToLink.c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_761.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_761.cpp,"{
      fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_761.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_761.cpp,414,"[""FILE *"", ""string"", ""char *"", ""libsToLink . c_str_ret""]","[""bool"", ""!""]"
1eafa3edaf34569cb6fa7eb449a9825049fe6270,"cmListFileLexer: Fix line number after backslash in string

If a line inside a string ends in a backslash count the following
newline character as a line increment.  Add a test covering this case to
verify that subsequent line numbers are correct.",[],Source/cmListFileLexer.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_367.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_367.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_367.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_871.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_871.cpp,1240,1278,1242,1285,,"YY_FATAL_ERROR( ""out of dynamic memory in yy_get_next_buffer()"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_762.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_762.cpp,"{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
        char *source = yyg->yytext_ptr;
        int number_to_move, i;
        int ret_val;

        if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
                YY_FATAL_ERROR(
                ""fatal flex scanner internal error--end of buffer missed"" );

        if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
                { /* Don't try to fill the buffer, so this is an EOF. */
                if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
                        {
                        /* We matched a single character, the EOB, so
                         * treat this as a final EOF.
                         */
                        return EOB_ACT_END_OF_FILE;
                        }

                else
                        {
                        /* We matched some text prior to the EOB, first
                         * process it.
                         */
                        return EOB_ACT_LAST_MATCH;
                        }
                }

        /* Try to read more data. */

        /* First move last chars to start of buffer. */
        number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

        for ( i = 0; i < number_to_move; ++i )
                *(dest++) = *(source++);

        if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
                /* don't do the read, it's not guaranteed to return an EOF,
                 * just force an EOF
                 */
                YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

        else
                {
                        size_t num_to_read =
                        YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

                while ( num_to_read <= 0 )
                        { /* Not enough room in the buffer - grow it. */

                        /* just a shorter name for the current buffer */
                        YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

                        int yy_c_buf_p_offset =
                                (int) (yyg->yy_c_buf_p - b->yy_ch_buf);

                        if ( b->yy_is_our_buffer )
                                {
                                int new_size = b->yy_buf_size * 2;

                                if ( new_size <= 0 )
                                        b->yy_buf_size += b->yy_buf_size / 8;
                                else
                                        b->yy_buf_size *= 2;

                                b->yy_ch_buf = (char *)
                                        /* Include room in for 2 EOB chars. */
                                        cmListFileLexer_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
                                }
                        else
                                /* Can't grow it, we don't own it. */
                                b->yy_ch_buf = 0;

                        if ( ! b->yy_ch_buf )
                                YY_FATAL_ERROR(
                                ""fatal error - scanner input buffer overflow"" );

                        yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

                        num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
                                                number_to_move - 1;

                        }

                if ( num_to_read > YY_READ_BUF_SIZE )
                        num_to_read = YY_READ_BUF_SIZE;

                /* Read in more data. */
                YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
                        yyg->yy_n_chars, num_to_read );

                YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
                }

        if ( yyg->yy_n_chars == 0 )
                {
                if ( number_to_move == YY_MORE_ADJ )
                        {
                        ret_val = EOB_ACT_END_OF_FILE;
                        cmListFileLexer_yyrestart(yyin  ,yyscanner);
                        }

                else
                        {
                        ret_val = EOB_ACT_LAST_MATCH;
                        YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
                                YY_BUFFER_EOF_PENDING;
                        }
                }

        else
                ret_val = EOB_ACT_CONTINUE_SCAN;

        yyg->yy_n_chars += number_to_move;
        YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
        YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

        yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

        return ret_val;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_762.cpp,"[10, 1, 1, 0, 0, 0, 3, 0, 0, 0, 19, 0, 0, 0, 0, 198, 0, 0, 9, 10, 0, 0, 8, 20, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 6, 0, 12, 10, 6, 0, 7, 0, 0, 23, 0, 12, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_762.cpp,116,[],"[""member"", ""null"", ""=="", ""!""]"
1eafa3edaf34569cb6fa7eb449a9825049fe6270,"cmListFileLexer: Fix line number after backslash in string

If a line inside a string ends in a backslash count the following
newline character as a line increment.  Add a test covering this case to
verify that subsequent line numbers are correct.",[],Source/cmListFileLexer.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_367.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_367.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_367.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_872.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_872.cpp,1633,1679,1636,1682,,"YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yyensure_buffer_stack()"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_763.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_763.cpp,"{

                /* First allocation is just for 2 elements, since we don't know if this
                 * scanner will even need a stack. We use 2 instead of 1 to avoid an
                 * immediate realloc on the next call.
         */
                num_to_alloc = 1;
                yyg->yy_buffer_stack = (struct yy_buffer_state**)cmListFileLexer_yyalloc
                                                                (num_to_alloc * sizeof(struct yy_buffer_state*)
                                                                , yyscanner);

                memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

                yyg->yy_buffer_stack_max = num_to_alloc;
                yyg->yy_buffer_stack_top = 0;
                return;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_763.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 12, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_763.cpp,16,"[""member"", ""null"", ""int""]","[""member""]"
1eafa3edaf34569cb6fa7eb449a9825049fe6270,"cmListFileLexer: Fix line number after backslash in string

If a line inside a string ends in a backslash count the following
newline character as a line increment.  Add a test covering this case to
verify that subsequent line numbers are correct.",[],Source/cmListFileLexer.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_367.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_367.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_367.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_873.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_873.cpp,1651,1699,1654,1702,,"YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yyensure_buffer_stack()"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_764.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_764.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_764.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_764.cpp,0,[],[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_369.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_369.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_369.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_876.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_876.cpp,306,353,316,385,,"archive_set_error(&a->archive, ENOMEM,
				""No memory."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_765.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_765.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_765.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_765.cpp,0,[],[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_369.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_369.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_369.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_876.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_876.cpp,306,353,316,394,,"archive_set_error(&a->archive, EINVAL,
			""Invalid index specified."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_766.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_766.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_766.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_766.cpp,0,[],[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_369.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_369.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_369.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_876.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_876.cpp,306,353,316,415,,"archive_set_error(&a->archive, EINVAL,
			""Invalid index specified."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_767.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_767.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_767.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_767.cpp,0,[],[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_369.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_369.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_369.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_876.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_876.cpp,306,353,316,422,,"archive_set_error(&a->archive, ENOMEM,
			""No memory."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_768.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_768.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_768.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_768.cpp,0,[],[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_369.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_369.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_369.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_877.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_877.cpp,699,864,700,874,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Internal error: ""
		    ""No format_seek_data_block function registered"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_769.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_769.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_769.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_769.cpp,0,[],[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_369.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_369.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_369.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_878.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_878.cpp,1130,1326,1131,1327,"archive_set_error(
							&filter->archive->archive,
							ENOMEM,
						    ""Unable to allocate copy buffer"");","archive_set_error(
						    &filter->archive->archive,
						    ENOMEM,
						    ""Unable to allocate copy""
						    "" buffer"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_770.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_770.cpp,"{ /* Integer overflow! */
						archive_set_error(
							&filter->archive->archive,
							ENOMEM,
						    ""Unable to allocate copy buffer"");
						filter->fatal = 1;
						if (avail != NULL)
							*avail = ARCHIVE_FATAL;
						return (NULL);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_770.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_770.cpp,107,"[""member"", ""macro"", ""string""]","[""int"", ""int"", ""<=""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_370.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_370.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_370.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_879.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_879.cpp,213,223,215,231,,"archive_set_error(&a->archive, errno,
				    ""Couldn't read link data"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_771.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_771.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_771.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_771.cpp,0,[],[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_370.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_370.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_370.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_884.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_884.cpp,726,920,728,929,,"archive_set_error(&a->archive, errno,
				    ""Couldn't access %s"", path);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_774.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_774.cpp,"(fd >= 0)
		list_size = extattr_list_fd(fd, namespace, NULL, 0);
	else if (!a->follow_symlinks)
		list_size = extattr_list_link(path, namespace, NULL, 0);
	else
		list_size = extattr_list_file(path, namespace, NULL, 0)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_774.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 3, 1, 12, 0, 0, 0, 3, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_774.cpp,14,[],[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_370.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_370.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_370.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_886.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_886.cpp,856,1070,866,-1,"archive_set_error(&a->archive, errno,
				    ""FIEMAP failed"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_775.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_775.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""FIEMAP failed"");
				exit_sts = ARCHIVE_FAILED;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_775.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_775.cpp,50,"[""member"", ""unkown"", ""string""]","[""unkown"", ""macro"", ""!="", ""unkown"", ""macro"", ""!="", ""&&""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_370.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_370.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_370.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_887.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_887.cpp,926,1130,943,1164,,"archive_set_error(&a->archive, errno,
			    ""Can't open `%s'"", path);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_776.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_776.cpp,"(fd < 0) {
			archive_set_error(&a->archive, errno,
			    ""Can't open `%s'"", path);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_776.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_776.cpp,31,[],"[""pathconf_ret"", ""null"", ""<="", ""!""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_371.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_371.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_371.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_888.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_888.cpp,859,900,861,922,,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_777.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_777.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_777.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_777.cpp,0,[],[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_371.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_371.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_371.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_889.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_889.cpp,897,970,927,1025,,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_778.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_778.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_778.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_778.cpp,0,[],[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_371.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_371.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_371.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_889.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_889.cpp,897,970,945,1051,,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_779.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_779.cpp,"{
	struct archive_read_disk *a = (struct archive_read_disk *)_a;
	struct tree *t;
	const struct stat *st; /* info to use for this entry */
	const struct stat *lst;/* lstat() information */
	int descend, fd = -1, r;

	archive_check_magic(_a, ARCHIVE_READ_DISK_MAGIC,
	    ARCHIVE_STATE_HEADER | ARCHIVE_STATE_DATA,
	    ""archive_read_next_header2"");

	t = a->tree;
	if (t->entry_fd >= 0) {
		close_and_restore_time(t->entry_fd, t, &t->restore_time);
		t->entry_fd = -1;
	}
#if !(defined(HAVE_OPENAT) && defined(HAVE_FSTATAT) && defined(HAVE_FDOPENDIR))
	/* Restore working directory. */
	tree_enter_working_dir(t);
#endif
	st = NULL;
	lst = NULL;
	do {
		switch (tree_next(t)) {
		case TREE_ERROR_FATAL:
			archive_set_error(&a->archive, t->tree_errno,
			    ""%s: Unable to continue traversing directory tree"",
			    tree_current_path(t));
			a->archive.state = ARCHIVE_STATE_FATAL;
			tree_enter_initial_dir(t);
			return (ARCHIVE_FATAL);
		case TREE_ERROR_DIR:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: Couldn't visit directory"",
			    tree_current_path(t));
			tree_enter_initial_dir(t);
			return (ARCHIVE_FAILED);
		case 0:
			tree_enter_initial_dir(t);
			return (ARCHIVE_EOF);
		case TREE_POSTDESCENT:
		case TREE_POSTASCENT:
			break;
		case TREE_REGULAR:
			lst = tree_current_lstat(t);
			if (lst == NULL) {
				archive_set_error(&a->archive, errno,
				    ""%s: Cannot stat"",
				    tree_current_path(t));
				tree_enter_initial_dir(t);
				return (ARCHIVE_FAILED);
			}
			break;
		}	
	} while (lst == NULL);

	/*
	 * Distinguish 'L'/'P'/'H' symlink following.
	 */
	switch(t->symlink_mode) {
	case 'H':
		/* 'H': After the first item, rest like 'P'. */
		t->symlink_mode = 'P';
		/* 'H': First item (from command line) like 'L'. */
		/* FALLTHROUGH */
	case 'L':
		/* 'L': Do descend through a symlink to dir. */
		descend = tree_current_is_dir(t);
		/* 'L': Follow symlinks to files. */
		a->symlink_mode = 'L';
		a->follow_symlinks = 1;
		/* 'L': Archive symlinks as targets, if we can. */
		st = tree_current_stat(t);
		if (st != NULL && !tree_target_is_same_as_parent(t, st))
			break;
		/* If stat fails, we have a broken symlink;
		 * in that case, don't follow the link. */
		/* FALLTHROUGH */
	default:
		/* 'P': Don't descend through a symlink to dir. */
		descend = tree_current_is_physical_dir(t);
		/* 'P': Don't follow symlinks to files. */
		a->symlink_mode = 'P';
		a->follow_symlinks = 0;
		/* 'P': Archive symlinks as symlinks. */
		st = lst;
		break;
	}

	if (update_current_filesystem(a, st->st_dev) != ARCHIVE_OK) {
		a->archive.state = ARCHIVE_STATE_FATAL;
		tree_enter_initial_dir(t);
		return (ARCHIVE_FATAL);
	}
	t->descend = descend;

	archive_entry_set_pathname(entry, tree_current_path(t));
	archive_entry_copy_sourcepath(entry, tree_current_access_path(t));
	archive_entry_copy_stat(entry, st);

	/* Save the times to be restored. */
	t->restore_time.mtime = archive_entry_mtime(entry);
	t->restore_time.mtime_nsec = archive_entry_mtime_nsec(entry);
	t->restore_time.atime = archive_entry_atime(entry);
	t->restore_time.atime_nsec = archive_entry_atime_nsec(entry);
	t->restore_time.filetype = archive_entry_filetype(entry);
	t->restore_time.noatime = t->current_filesystem->noatime;

#if defined(HAVE_OPENAT) && defined(HAVE_FSTATAT) && defined(HAVE_FDOPENDIR)
	/*
	 * Open the current file to freely gather its metadata anywhere in
	 * working directory.
	 * Note: A symbolic link file cannot be opened with O_NOFOLLOW.
	 */
	if (a->follow_symlinks || archive_entry_filetype(entry) != AE_IFLNK)
		fd = openat(tree_current_dir_fd(t), tree_current_access_path(t),
		    O_RDONLY | O_NONBLOCK);
	/* Restore working directory if openat() operation failed or
	 * the file is a symbolic link. */
	if (fd < 0)
		tree_enter_working_dir(t);

	/* The current directory fd is needed at
	 * archive_read_disk_entry_from_file() function to read link data
	 * with readlinkat(). */
	a->entry_wd_fd = tree_current_dir_fd(t);
#endif

	/*
	 * Populate the archive_entry with metadata from the disk.
	 */
	r = archive_read_disk_entry_from_file(&(a->archive), entry, fd, st);

	/* Close the file descriptor used for reding the current file
	 * metadata at archive_read_disk_entry_from_file(). */
	if (fd >= 0)
		close(fd);

	/* Return to the initial directory. */
	tree_enter_initial_dir(t);
	archive_entry_copy_sourcepath(entry, tree_current_path(t));

	/*
	 * EOF and FATAL are persistent at this layer.  By
	 * modifying the state, we guarantee that future calls to
	 * read a header or read data will fail.
	 */
	switch (r) {
	case ARCHIVE_EOF:
		a->archive.state = ARCHIVE_STATE_EOF;
		break;
	case ARCHIVE_OK:
	case ARCHIVE_WARN:
		t->entry_total = 0;
		if (archive_entry_filetype(entry) == AE_IFREG) {
			t->nlink = archive_entry_nlink(entry);
			t->entry_remaining_bytes = archive_entry_size(entry);
			t->entry_eof = (t->entry_remaining_bytes == 0)? 1: 0;
			if (!t->entry_eof &&
			    setup_sparse(a, entry) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		} else {
			t->entry_remaining_bytes = 0;
			t->entry_eof = 1;
		}
		a->archive.state = ARCHIVE_STATE_DATA;
		break;
	case ARCHIVE_RETRY:
		break;
	case ARCHIVE_FATAL:
		a->archive.state = ARCHIVE_STATE_FATAL;
		break;
	}

	return (r);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_779.cpp,"[11, 0, 0, 1, 8, 0, 7, 3, 13, 1, 15, 0, 0, 0, 2, 315, 0, 0, 5, 7, 0, 0, 2, 23, 0, 0, 0, 0, 4, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 1, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 14, 10, 2, 0, 52, 0, 0, 53, 0, 78, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_779.cpp,142,"[""struct archive_entry *"", ""tree_current_path_ret""]","[""update_current_filesystem_ret"", ""macro"", ""!="", ""!""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_371.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_371.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_371.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_890.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_890.cpp,1028,1241,1034,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Ignored the request descending the current object"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_780.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_780.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Ignored the request descending the current object"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_780.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_780.cpp,10,"[""member"", ""macro"", ""string""]","[""member"", ""macro"", ""!="", ""member"", ""||""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_371.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_371.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_371.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_896.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_896.cpp,1360,1586,1362,1589,,"archive_set_error(&a->archive, errno, ""fchdir failed"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_784.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_784.cpp,"(tree_current_is_symblic_link_target(t)) {
		r = statvfs(tree_current_access_path(t), &sfs);
		if (r == 0)
			xr = get_xfer_size(t, -1, tree_current_access_path(t));
	} else {
#ifdef HAVE_FSTATVFS
		r = fstatvfs(tree_current_dir_fd(t), &sfs);
		if (r == 0)
			xr = get_xfer_size(t, tree_current_dir_fd(t), NULL);
#else
		r = statvfs(""."", &sfs);
		if (r == 0)
			xr = get_xfer_size(t, -1, ""."");
#endif
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_784.cpp,"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 0, 11, 0, 0, 6, 0, 20, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_784.cpp,8,"[""struct tree *""]",[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_371.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_371.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_371.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_902.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_902.cpp,1562,1804,1565,1808,,"archive_set_error(&a->archive, errno, ""fchdir failed"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_788.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_788.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_788.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_788.cpp,0,[],[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_371.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_371.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_371.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_903.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_903.cpp,1622,1866,1625,1870,,"archive_set_error(&a->archive, errno, ""fchdir failed"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_789.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_789.cpp,"nm = pathconf(tree_current_access_path(t), _PC_NAME_MAX)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_789.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_789.cpp,20,"[""tree_current_access_path_ret"", ""macro""]","[""tree_current_is_symblic_link_target_ret""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_904.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_904.cpp,557,549,608,591,"archive_set_error(&a->archive, errno, ""Seek error"");","archive_set_error(&a->archive, errno,
			    ""CreateEvent failed"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_790.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_790.cpp,"{
			DWORD lasterr;

			lasterr = GetLastError();
			if (lasterr == ERROR_ACCESS_DENIED)
				errno = EBADF;
			else
				la_dosmaperr(lasterr);
			archive_set_error(&a->archive, errno, ""Seek error"");
			r = ARCHIVE_FATAL;
			a->archive.state = ARCHIVE_STATE_FATAL;
			goto abort_read_data;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_790.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 23, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 6, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_790.cpp,49,"[""member"", ""macro"", ""string""]","[""SetFilePointerEx_perso_ret""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_905.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_905.cpp,701,768,703,770,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%ls: Couldn't visit directory"",
			    tree_current_path(t));","archive_set_error(&a->archive, t->tree_errno,
			    ""%ls: Couldn't visit directory"",
			    tree_current_path(t));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_794.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_794.cpp,"{
		case TREE_ERROR_FATAL:
			archive_set_error(&a->archive, t->tree_errno,
			    ""%ls: Unable to continue traversing directory tree"",
			    tree_current_path(t));
			a->archive.state = ARCHIVE_STATE_FATAL;
			return (ARCHIVE_FATAL);
		case TREE_ERROR_DIR:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%ls: Couldn't visit directory"",
			    tree_current_path(t));
			return (ARCHIVE_FAILED);
		case 0:
			return (ARCHIVE_EOF);
		case TREE_POSTDESCENT:
		case TREE_POSTASCENT:
			break;
		case TREE_REGULAR:
			lst = tree_current_lstat(t);
			if (lst == NULL) {
				archive_set_error(&a->archive, errno,
				    ""%ls: Cannot stat"",
				    tree_current_path(t));
				return (ARCHIVE_FAILED);
			}
			break;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_794.cpp,"[1, 0, 0, 0, 2, 0, 4, 0, 6, 0, 2, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 7, 0, 0, 5, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_794.cpp,30,"[""member"", ""macro"", ""string"", ""tree_current_path_ret""]","[""tree_next_ret""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_906.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_906.cpp,713,780,715,782,"archive_set_error(&a->archive, errno,
				    ""%ls: Cannot stat"",
				    tree_current_path(t));","archive_set_error(&a->archive, t->tree_errno,
				    ""%ls: Cannot stat"",
				    tree_current_path(t));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_795.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_795.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""%ls: Cannot stat"",
				    tree_current_path(t));
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_795.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_795.cpp,42,"[""member"", ""unkown"", ""string"", ""tree_current_path_ret""]","[""tree_current_lstat_ret"", ""null"", ""==""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_908.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_908.cpp,759,846,774,871,,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_797.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_797.cpp,"(name != NULL)
		archive_entry_copy_uname(entry, name)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_797.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_797.cpp,101,[],"[""update_current_filesystem_ret"", ""macro"", ""!="", ""!""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_908.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_908.cpp,759,846,781,897,,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_798.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_798.cpp,"(archive_entry_filetype(entry) == AE_IFREG &&
	    archive_entry_size(entry) > 0) {
		t->entry_fh = CreateFileW(tree_current_access_path(t),
		    GENERIC_READ, 0, NULL, OPEN_EXISTING,
		    FILE_FLAG_SEQUENTIAL_SCAN, NULL);
		if (t->entry_fh == INVALID_HANDLE_VALUE) {
			archive_set_error(&a->archive, errno,
			    ""Couldn't open %ls"", tree_current_path(a->tree));
			return (ARCHIVE_FAILED);
		}

		/* Find sparse data from the disk. */
		if (archive_entry_hardlink(entry) == NULL &&
		    (st->dwFileAttributes & FILE_ATTRIBUTE_SPARSE_FILE) != 0)
			r = setup_sparse_from_disk(a, entry, t->entry_fh);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_798.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 8, 0, 0, 4, 0, 19, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_798.cpp,108,"[""struct archive_entry *"", ""struct archive_entry *""]","[""update_current_filesystem_ret"", ""macro"", ""!="", ""!""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_909.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_909.cpp,878,1129,884,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Ignored the request descending the current object"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_799.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_799.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Ignored the request descending the current object"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_799.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_799.cpp,10,"[""member"", ""macro"", ""string""]","[""member"", ""macro"", ""!="", ""member"", ""||""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_913.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_913.cpp,1109,1365,1111,1370,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""GetDiskFreeSpace failed: %d"", (int)GetLastError());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_801.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_801.cpp,"{
	struct tree *t = a->tree;
	wchar_t vol[256];
	wchar_t *path;

	t->current_filesystem->synthetic = -1;/* Not supported */
	path = safe_path_for_statfs(t);
	if (!GetVolumePathNameW(path, vol, sizeof(vol)/sizeof(vol[0]))) {
		free(path);
		t->current_filesystem->remote = -1;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""GetVolumePathName failed: %d"", (int)GetLastError());
		return (ARCHIVE_FAILED);
	}
	free(path);
	switch (GetDriveTypeW(vol)) {
	case DRIVE_UNKNOWN:
	case DRIVE_NO_ROOT_DIR:
		t->current_filesystem->remote = -1;
		break;
	case DRIVE_REMOTE:
		t->current_filesystem->remote = 1;
		break;
	default:
		t->current_filesystem->remote = 0;
		break;
	}

	return (ARCHIVE_OK);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_801.cpp,"[1, 0, 0, 0, 3, 0, 2, 1, 3, 1, 3, 0, 0, 0, 0, 59, 0, 0, 3, 3, 0, 0, 1, 8, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 32, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 2, 1, 0, 0, 9, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_801.cpp,30,[],"[""GetVolumePathNameW_ret"", ""!"", ""!""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_915.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_915.cpp,1298,1567,1300,1581,,"fprintf(stderr, ""LIBARCHIVE_DIRECT_IO=%s\n"",
				(t->direct_io)?""Enabled"":""Disabled"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_802.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_802.cpp,"{
	struct archive_wstring ws;
	wchar_t *pathname, *p, *base;

	t->flags = (restore_time)?needsRestoreTimes:0;
	t->visit_type = 0;
	t->tree_errno = 0;
	t->full_path_dir_length = 0;
	t->dirname_length = 0;
	t->depth = 0;
	t->descend = 0;
	t->current = NULL;
	t->d = INVALID_DIR_HANDLE;
	t->symlink_mode = t->initial_symlink_mode;
	archive_string_empty(&(t->full_path));
	archive_string_empty(&t->path);
	t->entry_fh = INVALID_HANDLE_VALUE;
	t->entry_eof = 0;
	t->entry_remaining_bytes = 0;

	/* Get wchar_t strings from char strings. */
	archive_string_init(&ws);
	archive_wstrcpy(&ws, path);
	pathname = ws.s;
	/* Get a full-path-name. */
	p = __la_win_permissive_name_w(pathname);
	if (p == NULL)
		goto failed;
	archive_wstrcpy(&(t->full_path), p);
	free(p);

	/* Convert path separators from '\' to '/' */
	for (p = pathname; *p != L'\0'; ++p) {
		if (*p == L'\\')
			*p = L'/';
	}
	base = pathname;

	/* First item is set up a lot like a symlink traversal. */
	/* printf(""Looking for wildcard in %s\n"", path); */
	/* TODO: wildcard detection here screws up on \\?\c:\ UNC names */
	if (wcschr(base, L'*') || wcschr(base, L'?')) {
		// It has a wildcard in it...
		// Separate the last element.
		p = wcsrchr(base, L'/');
		if (p != NULL) {
			*p = L'\0';
			tree_append(t, base, p - base);
			t->dirname_length = archive_strlen(&t->path);
			base = p + 1;
		}
		p = wcsrchr(t->full_path.s, L'\\');
		if (p != NULL) {
			*p = L'\0';
			t->full_path.length = wcslen(t->full_path.s);
			t->full_path_dir_length = archive_strlen(&t->full_path);
		}
	}
	tree_push(t, base, t->full_path.s, 0, 0, 0, NULL);
	archive_wstring_free(&ws);
	t->stack->flags = needsFirstVisit;
	return (t);
failed:
	archive_wstring_free(&ws);
	tree_free(t);
	return (NULL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_802.cpp,"[5, 0, 1, 0, 0, 0, 2, 0, 0, 0, 7, 1, 1, 0, 0, 164, 0, 0, 2, 4, 0, 0, 1, 22, 0, 0, 0, 0, 3, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 1, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 6, 1, 0, 19, 0, 0, 37, 0, 33, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_802.cpp,63,[],"[""__la_win_permissive_name_w_ret"", ""null"", ""==""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_915.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_915.cpp,1298,1567,1300,1590,,"fprintf(stderr, ""LIBARCHIVE_ASYNC_IO=%s\n"",
			    (t->async_io)?""Enabled"":""Disabled"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_803.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_803.cpp,"{
	struct archive_wstring ws;
	wchar_t *pathname, *p, *base;

	t->flags = (restore_time)?needsRestoreTimes:0;
	t->visit_type = 0;
	t->tree_errno = 0;
	t->full_path_dir_length = 0;
	t->dirname_length = 0;
	t->depth = 0;
	t->descend = 0;
	t->current = NULL;
	t->d = INVALID_DIR_HANDLE;
	t->symlink_mode = t->initial_symlink_mode;
	archive_string_empty(&(t->full_path));
	archive_string_empty(&t->path);
	t->entry_fh = INVALID_HANDLE_VALUE;
	t->entry_eof = 0;
	t->entry_remaining_bytes = 0;

	/* Get wchar_t strings from char strings. */
	archive_string_init(&ws);
	archive_wstrcpy(&ws, path);
	pathname = ws.s;
	/* Get a full-path-name. */
	p = __la_win_permissive_name_w(pathname);
	if (p == NULL)
		goto failed;
	archive_wstrcpy(&(t->full_path), p);
	free(p);

	/* Convert path separators from '\' to '/' */
	for (p = pathname; *p != L'\0'; ++p) {
		if (*p == L'\\')
			*p = L'/';
	}
	base = pathname;

	/* First item is set up a lot like a symlink traversal. */
	/* printf(""Looking for wildcard in %s\n"", path); */
	/* TODO: wildcard detection here screws up on \\?\c:\ UNC names */
	if (wcschr(base, L'*') || wcschr(base, L'?')) {
		// It has a wildcard in it...
		// Separate the last element.
		p = wcsrchr(base, L'/');
		if (p != NULL) {
			*p = L'\0';
			tree_append(t, base, p - base);
			t->dirname_length = archive_strlen(&t->path);
			base = p + 1;
		}
		p = wcsrchr(t->full_path.s, L'\\');
		if (p != NULL) {
			*p = L'\0';
			t->full_path.length = wcslen(t->full_path.s);
			t->full_path_dir_length = archive_strlen(&t->full_path);
		}
	}
	tree_push(t, base, t->full_path.s, 0, 0, 0, NULL);
	archive_wstring_free(&ws);
	t->stack->flags = needsFirstVisit;
	return (t);
failed:
	archive_wstring_free(&ws);
	tree_free(t);
	return (NULL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_803.cpp,"[5, 0, 1, 0, 0, 0, 2, 0, 0, 0, 7, 1, 1, 0, 0, 164, 0, 0, 2, 4, 0, 0, 1, 22, 0, 0, 0, 0, 3, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 1, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 6, 1, 0, 19, 0, 0, 37, 0, 33, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_803.cpp,63,[],"[""__la_win_permissive_name_w_ret"", ""null"", ""==""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_916.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_916.cpp,1775,2084,1777,2087,"archive_set_error(&a->archive, GetLastError(),
				    ""Can't GetFileInformationByHandle"");","archive_set_error(&a->archive, errno,
				    ""Can't GetFileInformationByHandle"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_804.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_804.cpp,"{
				archive_set_error(&a->archive, GetLastError(),
				    ""Can't GetFileInformationByHandle"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_804.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_804.cpp,32,"[""member"", ""GetLastError_ret"", ""string""]","[""GetFileInformationByHandle_ret"", ""null"", ""==""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_917.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_917.cpp,1785,2095,1788,2099,"archive_set_error(&a->archive, GetLastError(),
				    ""Can't FindFirstFileW"");","archive_set_error(&a->archive, errno,
				    ""Can't FindFirstFileW"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_805.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_805.cpp,"{
				archive_set_error(&a->archive, GetLastError(),
				    ""Can't FindFirstFileW"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_805.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_805.cpp,43,"[""member"", ""GetLastError_ret"", ""string""]","[""FindFirstFileW_ret"", ""macro"", ""==""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_918.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_918.cpp,1807,2118,1809,2121,"archive_set_error(&a->archive,
				    GetLastError(),
				    ""Can't CreateFileW"");","archive_set_error(&a->archive, errno,
				    ""Can't CreateFileW"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_806.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_806.cpp,"{
				archive_set_error(&a->archive,
				    GetLastError(),
				    ""Can't CreateFileW"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_806.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_806.cpp,64,"[""member"", ""GetLastError_ret"", ""string""]","[""CreateFileW_ret"", ""macro"", ""==""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_918.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_918.cpp,1807,2118,1816,2128,"archive_set_error(&a->archive,
				    GetLastError(),
				    ""Can't GetFileInformationByHandle"");","archive_set_error(&a->archive, errno,
				    ""Can't GetFileInformationByHandle"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_807.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_807.cpp,"{
				archive_set_error(&a->archive,
				    GetLastError(),
				    ""Can't GetFileInformationByHandle"");
				CloseHandle(h);
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_807.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_807.cpp,71,"[""member"", ""GetLastError_ret"", ""string""]","[""GetFileInformationByHandle_ret"", ""null"", ""==""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_919.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_919.cpp,1854,2165,1856,2168,"archive_set_error(&a->archive, GetLastError(),
				    ""Can't CreateFileW"");","archive_set_error(&a->archive, errno,
				    ""Can't CreateFileW"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_808.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_808.cpp,"{
				archive_set_error(&a->archive, GetLastError(),
				    ""Can't CreateFileW"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_808.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_808.cpp,111,"[""member"", ""GetLastError_ret"", ""string""]","[""CreateFileW_ret"", ""macro"", ""==""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_919.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_919.cpp,1854,2165,1863,2176,"archive_set_error(&a->archive, GetLastError(),
			    ""Can't GetFileInformationByHandle"");","archive_set_error(&a->archive, errno,
			    ""Can't GetFileInformationByHandle"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_809.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_809.cpp,"{
			archive_set_error(&a->archive, GetLastError(),
			    ""Can't GetFileInformationByHandle"");
			if (h != INVALID_HANDLE_VALUE && fd < 0)
				CloseHandle(h);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_809.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_809.cpp,118,"[""member"", ""GetLastError_ret"", ""string""]","[""GetFileInformationByHandle_ret"", ""null"", ""==""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_920.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_920.cpp,1909,2222,1911,2224,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			""Couldn't allocate memory"");","archive_set_error(&a->archive, ENOMEM,
			""Couldn't allocate memory"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_810.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_810.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			""Couldn't allocate memory"");
		exit_sts = ARCHIVE_FATAL;
		goto exit_setup_sparse;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_810.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_810.cpp,14,"[""member"", ""macro"", ""string""]","[""malloc_ret"", ""null"", ""==""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_921.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_921.cpp,1923,2236,1932,2245,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Couldn't allocate memory"");","archive_set_error(&a->archive, ENOMEM,
					    ""Couldn't allocate memory"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_811.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_811.cpp,"{
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Couldn't allocate memory"");
					exit_sts = ARCHIVE_FATAL;
					goto exit_setup_sparse;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_811.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_811.cpp,35,"[""member"", ""macro"", ""string""]","[""malloc_ret"", ""null"", ""==""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_372.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_922.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_922.cpp,1968,2280,1970,2283,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""DeviceIoControl Failed: %lu"", GetLastError());","archive_set_error(&a->archive, errno,
			    ""DeviceIoControl Failed: %lu"", GetLastError());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_812.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_812.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""DeviceIoControl Failed: %lu"", GetLastError());
			exit_sts = ARCHIVE_FAILED;
			goto exit_setup_sparse;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_812.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_812.cpp,73,"[""member"", ""macro"", ""string"", ""GetLastError_ret""]","[""DeviceIoControl_ret"", ""null"", ""!="", ""!""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_open_filename.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_374.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_374.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_374.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_924.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_924.cpp,98,103,108,151,,"archive_set_error(a, ENOMEM, ""No memory"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_814.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_814.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_814.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_814.cpp,0,[],[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_open_filename.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_374.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_374.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_374.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_924.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_924.cpp,98,103,115,163,,"archive_set_error(a, ENOMEM, ""No memory"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_815.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_815.cpp,"(wfilename == NULL || wfilename[0] == L'\0') {
		filename_type = FNT_STDIN;
	} else {
#if defined(_WIN32) && !defined(__CYGWIN__)
		filename_type = FNT_WCS;
#else
		/*
		 * POSIX system does not support a wchar_t interface for
		 * open() system call, so we have to translate a whcar_t
		 * filename to multi-byte one and use it.
		 */
		struct archive_string fn;
		int r;

		archive_string_init(&fn);
		if (archive_string_append_from_wcs(&fn, wfilename,
		    wcslen(wfilename)) != 0) {
			archive_set_error(a, EINVAL,
			    ""Failed to convert a wide-character filename to""
			    "" a multi-byte filename"");
			archive_string_free(&fn);
			return (ARCHIVE_FATAL);
		}
		r = file_open_filename(a, FNT_MBS, fn.s, block_size);
		archive_string_free(&fn);
		return (r);
#endif
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_815.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 42, 0, 0, 2, 2, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 1, 2, 0, 9, 0, 0, 7, 0, 16, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_815.cpp,6,[],[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_377.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_377.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_377.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_930.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_930.cpp,79,82,99,-1,"archive_set_error(_a, -1,
	    ""External compression programs not supported on this platform"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_819.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_819.cpp,"{
	(void)_a; /* UNUSED */
	(void)cmd; /* UNUSED */
	(void)signature; /* UNUSED */
	(void)signature_len; /* UNUSED */

	archive_set_error(_a, -1,
	    ""External compression programs not supported on this platform"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_819.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 5, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_819.cpp,9,"[""struct archive *"", ""int"", ""string""]",[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_377.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_377.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_377.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_930.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_930.cpp,79,82,110,-1,"archive_set_error(&self->archive->archive, -1,
	    ""External compression programs not supported on this platform"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_820.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_820.cpp,"{
	(void)self; /* UNUSED */
	(void)cmd; /* UNUSED */

	archive_set_error(&self->archive->archive, -1,
	    ""External compression programs not supported on this platform"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_820.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_820.cpp,6,"[""member"", ""int"", ""string""]",[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_377.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_377.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_377.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_932.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_932.cpp,376,399,412,444,,"archive_set_error(&self->archive->archive, EINVAL,
		    ""Can't initialize filter; unable to run program \""%s\"""",
		    cmd);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_821.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_821.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_821.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_821.cpp,0,[],[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_378.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_378.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_378.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_933.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_933.cpp,485,491,493,501,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");",uudecode->state = ST_IGNORE;,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_822.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_822.cpp,"{
			/* Non-ascii character is found. */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_822.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_822.cpp,46,"[""member"", ""macro"", ""string""]","[""get_line_ret"", ""null"", ""<""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_381.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_381.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_381.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_945.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_945.cpp,478,481,481,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""cab: unknown keyword ``%s''"", key);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_825.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_825.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""cab: unknown keyword ``%s''"", key)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_825.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_825.cpp,21,"[""member"", ""macro"", ""string"", ""const char *""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_382.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_382.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_382.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_948.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_948.cpp,339,340,342,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""cpio: unknown keyword ``%s''"", key);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_826.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_826.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""cpio: unknown keyword ``%s''"", key)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_826.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_826.cpp,26,"[""member"", ""macro"", ""string"", ""const char *""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_383.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_383.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_383.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_954.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_954.cpp,1286,1310,1309,1329,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Ignoring out-of-order file @%jx (%s) %jd < %jd"",
		    (intmax_t)file->number,
		    iso9660->pathname.s,
		    (intmax_t)file->offset,
		    (intmax_t)iso9660->current_position);","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Ignoring out-of-order file @%jx (%s) %jd < %jd"",
			    (intmax_t)file->number,
			    iso9660->pathname.s,
			    (intmax_t)file->offset,
			    (intmax_t)iso9660->current_position);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_827.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_827.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Ignoring out-of-order file @%jx (%s) %jd < %jd"",
		    (intmax_t)file->number,
		    iso9660->pathname.s,
		    (intmax_t)file->offset,
		    (intmax_t)iso9660->current_position);
		iso9660->entry_bytes_remaining = 0;
		iso9660->entry_sparse_offset = 0;
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_827.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_827.cpp,248,"[""member"", ""macro"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""bool"", ""macro"", ""!="", ""member"", ""member"", ""<"", ""&&""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_383.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_383.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_383.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_958.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_958.cpp,2882,2888,2883,2889,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Failed to connect 'CL' pointer to 'RE' rr_moved pointer of""
	    ""Rockridge extensions"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Failed to connect 'CL' pointer to 'RE' rr_moved pointer of ""
	    ""Rockridge extensions: current position = %jd, CL offset = %jd"",
	    (intmax_t)iso9660->current_position, (intmax_t)file->cl_offset);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_828.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_828.cpp,"{
	struct file_info *file;
	struct {
		struct file_info	*first;
		struct file_info	**last;
	}	empty_files;
	int64_t number;
	int count;

	file = cache_get_entry(iso9660);
	if (file != NULL) {
		*pfile = file;
		return (ARCHIVE_OK);
	}

	for (;;) {
		struct file_info *re, *d;

		*pfile = file = next_entry(iso9660);
		if (file == NULL) {
			/*
			 * If directory entries all which are descendant of
			 * rr_moved are stil remaning, expose their. 
			 */
			if (iso9660->re_files.first != NULL && 
			    iso9660->rr_moved != NULL &&
			    iso9660->rr_moved->rr_moved_has_re_only)
				/* Expose ""rr_moved"" entry. */
				cache_add_entry(iso9660, iso9660->rr_moved);
			while ((re = re_get_entry(iso9660)) != NULL) {
				/* Expose its descendant dirs. */
				while ((d = rede_get_entry(re)) != NULL)
					cache_add_entry(iso9660, d);
			}
			if (iso9660->cache_files.first != NULL)
				return (next_cache_entry(a, iso9660, pfile));
			return (ARCHIVE_EOF);
		}

		if (file->cl_offset) {
			struct file_info *first_re = NULL;
			int nexted_re = 0;

			/*
			 * Find ""RE"" dir for the current file, which
			 * has ""CL"" flag.
			 */
			while ((re = re_get_entry(iso9660))
			    != first_re) {
				if (first_re == NULL)
					first_re = re;
				if (re->offset == file->cl_offset) {
					re->parent->subdirs--;
					re->parent = file->parent;
					re->re = 0;
					if (re->parent->re_descendant) {
						nexted_re = 1;
						re->re_descendant = 1;
						if (rede_add_entry(re) < 0)
							goto fatal_rr;
						/* Move a list of descendants
						 * to a new ancestor. */
						while ((d = rede_get_entry(
						    re)) != NULL)
							if (rede_add_entry(d)
							    < 0)
								goto fatal_rr;
						break;
					}
					/* Replace the current file
					 * with ""RE"" dir */
					*pfile = file = re;
					/* Expose its descendant */
					while ((d = rede_get_entry(
					    file)) != NULL)
						cache_add_entry(
						    iso9660, d);
					break;
				} else
					re_add_entry(iso9660, re);
			}
			if (nexted_re) {
				/*
				 * Do not expose this at this time
				 * because we have not gotten its full-path
				 * name yet.
				 */
				continue;
			}
		} else if ((file->mode & AE_IFMT) == AE_IFDIR) {
			int r;

			/* Read file entries in this dir. */
			r = read_children(a, file);
			if (r != ARCHIVE_OK)
				return (r);

			/*
			 * Handle a special dir of Rockridge extensions,
			 * ""rr_moved"".
			 */
			if (file->rr_moved) {
				/*
				 * If this has only the subdirectories which
				 * have ""RE"" flags, do not expose at this time.
				 */
				if (file->rr_moved_has_re_only)
					continue;
				/* Otherwise expose ""rr_moved"" entry. */
			} else if (file->re) {
				/*
				 * Do not expose this at this time
				 * because we have not gotten its full-path
				 * name yet.
				 */
				re_add_entry(iso9660, file);
				continue;
			} else if (file->re_descendant) {
				/*
				 * If the top level ""RE"" entry of this entry
				 * is not exposed, we, accordingly, should not
				 * expose this entry at this time because
				 * we cannot make its proper full-path name.
				 */
				if (rede_add_entry(file) == 0)
					continue;
				/* Otherwise we can expose this entry because
				 * it seems its top level ""RE"" has already been
				 * exposed. */
			}
		}
		break;
	}

	if ((file->mode & AE_IFMT) != AE_IFREG || file->number == -1)
		return (ARCHIVE_OK);

	count = 0;
	number = file->number;
	iso9660->cache_files.first = NULL;
	iso9660->cache_files.last = &(iso9660->cache_files.first);
	empty_files.first = NULL;
	empty_files.last = &empty_files.first;
	/* Collect files which has the same file serial number.
	 * Peek pending_files so that file which number is different
	 * is not put bak. */
	while (iso9660->pending_files.used > 0 &&
	    (iso9660->pending_files.files[0]->number == -1 ||
	     iso9660->pending_files.files[0]->number == number)) {
		if (file->number == -1) {
			/* This file has the same offset
			 * but it's wrong offset which empty files
			 * and symlink files have.
			 * NOTE: This wrong offse was recorded by
			 * old mkisofs utility. If ISO images is
			 * created by latest mkisofs, this does not
			 * happen.
			 */
			file->next = NULL;
			*empty_files.last = file;
			empty_files.last = &(file->next);
		} else {
			count++;
			cache_add_entry(iso9660, file);
		}
		file = next_entry(iso9660);
	}

	if (count == 0) {
		*pfile = file;
		return ((file == NULL)?ARCHIVE_EOF:ARCHIVE_OK);
	}
	if (file->number == -1) {
		file->next = NULL;
		*empty_files.last = file;
		empty_files.last = &(file->next);
	} else {
		count++;
		cache_add_entry(iso9660, file);
	}

	if (count > 1) {
		/* The count is the same as number of hardlink,
		 * so much so that each nlinks of files in cache_file
		 * is overwritten by value of the count.
		 */
		for (file = iso9660->cache_files.first;
		    file != NULL; file = file->next)
			file->nlinks = count;
	}
	/* If there are empty files, that files are added
	 * to the tail of the cache_files. */
	if (empty_files.first != NULL) {
		*iso9660->cache_files.last = empty_files.first;
		iso9660->cache_files.last = empty_files.last;
	}
	*pfile = cache_get_entry(iso9660);
	return ((*pfile == NULL)?ARCHIVE_EOF:ARCHIVE_OK);

fatal_rr:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Failed to connect 'CL' pointer to 'RE' rr_moved pointer of""
	    ""Rockridge extensions"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_828.cpp,"[24, 6, 2, 0, 3, 4, 8, 0, 0, 0, 37, 1, 2, 0, 0, 327, 0, 0, 9, 11, 0, 0, 4, 19, 0, 0, 0, 0, 7, 0, 22, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 203, 2, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 2, 0, 34, 26, 5, 0, 22, 0, 0, 39, 3, 34, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_828.cpp,203,[],"[""rede_add_entry_ret"", ""null"", ""<""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_384.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_384.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_384.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_960.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_960.cpp,445,446,448,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""lha: unknown keyword ``%s''"", key);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_829.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_829.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""lha: unknown keyword ``%s''"", key)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_829.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_829.cpp,22,"[""member"", ""macro"", ""string"", ""const char *""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_386.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_386.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_386.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_964.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_964.cpp,757,770,760,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
        ""rar: unknown keyword ``%s''"", key);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_830.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_830.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
        ""rar: unknown keyword ``%s''"", key)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_830.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_830.cpp,22,"[""member"", ""macro"", ""string"", ""const char *""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_386.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_386.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_386.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_965.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_965.cpp,842,857,847,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""RAR volume support unavailable."");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_831.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_831.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""RAR volume support unavailable."");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_831.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_831.cpp,81,"[""member"", ""macro"", ""constant""]","[""bool"", ""bool"", ""||""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_386.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_386.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_386.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_965.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_965.cpp,842,857,853,859,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""RAR encryption support unavailable."");","(rar->main_flags & MHD_PASSWORD)
      {
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""RAR encryption support unavailable."");
        return (ARCHIVE_FATAL);
      };",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_832.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_832.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""RAR encryption support unavailable."");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_832.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_832.cpp,87,"[""member"", ""macro"", ""constant""]","[""bool""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_386.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_386.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_386.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_965.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_965.cpp,842,857,853,861,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""RAR encryption support unavailable."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_833.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_833.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""RAR encryption support unavailable."");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_833.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_833.cpp,87,"[""member"", ""macro"", ""constant""]","[""bool""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_386.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_386.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_386.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_967.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_967.cpp,987,998,992,1122,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
              ""Error during seek of RAR file"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_836.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_836.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_836.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_836.cpp,0,[],[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_386.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_386.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_386.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_973.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_973.cpp,1272,1467,1276,1481,,"archive_set_error(&a->archive, ENOMEM, ""Couldn't allocate memory."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_838.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_838.cpp,"(p + 8 > endp) {
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
        ""Invalid header size"");
      return (ARCHIVE_FATAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_838.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_838.cpp,268,[],"[""bool""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_386.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_386.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_386.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_973.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_973.cpp,1272,1467,1274,1505,,"archive_set_error(&a->archive, ENOMEM, ""Couldn't allocate memory."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_839.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_839.cpp,"(rar->file_flags & FHD_SALT)
  {
    if (p + 8 > endp) {
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
        ""Invalid header size"");
      return (ARCHIVE_FATAL);
    }
    memcpy(rar->salt, p, 8);
    p += 8;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_839.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_839.cpp,266,[],"[""member"", ""null"", ""=="", ""!""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_387.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_387.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_387.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_977.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_977.cpp,383,384,386,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""tar: unknown keyword ``%s''"", key);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_840.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_840.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""tar: unknown keyword ``%s''"", key)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_840.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_840.cpp,27,"[""member"", ""macro"", ""string"", ""const char *""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_388.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_388.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_388.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_982.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_982.cpp,373,750,379,764,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Symlink"");","archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Symlink"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_847.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_847.cpp,"{
			/* NOTE: If the last argument is NULL, this will
			 * fail only by memeory allocation failure. */
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Symlink"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_847.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_847.cpp,49,"[""member"", ""macro"", ""string""]","[""archive_entry_copy_symlink_l_ret"", ""null"", ""!=""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_388.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_388.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_388.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_984.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_984.cpp,439,850,442,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""zip: unknown keyword ``%s''"", key);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_849.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_849.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""zip: unknown keyword ``%s''"", key)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_849.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_849.cpp,27,"[""member"", ""macro"", ""string"", ""const char *""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_388.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_388.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_388.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_988.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_988.cpp,781,1222,788,1231,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""ZIP compressed data is wrong size (read %jd, expected %jd)"",
			    (intmax_t)zip->entry_compressed_bytes_read,
			    (intmax_t)zip->entry->compressed_size);","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""ZIP compressed data is wrong size ""
			    ""(read %jd, expected %jd)"",
			    (intmax_t)zip->entry_compressed_bytes_read,
			    (intmax_t)zip->entry->compressed_size);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_852.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_852.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""ZIP compressed data is wrong size (read %jd, expected %jd)"",
			    (intmax_t)zip->entry_compressed_bytes_read,
			    (intmax_t)zip->entry->compressed_size);
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_852.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_852.cpp,56,"[""member"", ""macro"", ""string"", ""member"", ""member""]","[""member"", ""member"", ""!=""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_388.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_388.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_388.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_989.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_989.cpp,797,1241,798,1242,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""ZIP uncompressed data is wrong size (read %jd, expected %jd)"",
			    (intmax_t)zip->entry_uncompressed_bytes_read,
			    (intmax_t)zip->entry->uncompressed_size);","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""ZIP uncompressed data is wrong size ""
			    ""(read %jd, expected %jd)"",
			    (intmax_t)zip->entry_uncompressed_bytes_read,
			    (intmax_t)zip->entry->uncompressed_size);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_853.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_853.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""ZIP uncompressed data is wrong size (read %jd, expected %jd)"",
			    (intmax_t)zip->entry_uncompressed_bytes_read,
			    (intmax_t)zip->entry->uncompressed_size);
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_853.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_853.cpp,66,"[""member"", ""macro"", ""string"", ""member"", ""member""]","[""bool"", ""bool"", ""!=""]"
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_388.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_388.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_388.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_992.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_992.cpp,918,1370,918,1384,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize ZIP decompression."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_854.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_854.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_854.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_854.cpp,0,[],[]
102071f80cf4ad7aa97bf8a1618cfc6ee6689ab6,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive.h
	Utilities/cmlibarchive/libarchive/archive_entry.h
	Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c
	Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c
	Utilities/cmlibarchive/libarchive/archive_windows.h
	Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_388.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_388.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_388.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_993.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_993.cpp,940,1419,950,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize ZIP decompression."");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_855.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_855.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize ZIP decompression."");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_855.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_855.cpp,31,"[""member"", ""macro"", ""constant""]","[""inflateInit2_ret"", ""macro"", ""!=""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_390.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_390.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_390.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_997.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_997.cpp,306,353,316,394,,"archive_set_error(&a->archive, EINVAL,
			""Invalid index specified."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_857.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_857.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_857.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_857.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_390.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_390.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_390.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_997.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_997.cpp,306,353,316,422,,"archive_set_error(&a->archive, ENOMEM,
			""No memory."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_859.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_859.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_859.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_859.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_390.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_390.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_390.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_998.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_998.cpp,699,864,700,874,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Internal error: ""
		    ""No format_seek_data_block function registered"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_860.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_860.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_860.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_860.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_390.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_390.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_390.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_999.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_999.cpp,1130,1326,1131,1327,"archive_set_error(
							&filter->archive->archive,
							ENOMEM,
						    ""Unable to allocate copy buffer"");","archive_set_error(
						    &filter->archive->archive,
						    ENOMEM,
						    ""Unable to allocate copy""
						    "" buffer"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_861.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_861.cpp,"{ /* Integer overflow! */
						archive_set_error(
							&filter->archive->archive,
							ENOMEM,
						    ""Unable to allocate copy buffer"");
						filter->fatal = 1;
						if (avail != NULL)
							*avail = ARCHIVE_FATAL;
						return (NULL);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_861.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_861.cpp,107,"[""member"", ""macro"", ""string""]","[""int"", ""int"", ""<=""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_391.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_391.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_391.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1000.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1000.cpp,210,223,212,231,,"archive_set_error(&a->archive, errno,
				    ""Couldn't read link data"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_862.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_862.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_862.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_862.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_391.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_391.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_391.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1001.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1001.cpp,281,306,283,310,,"archive_set_error(&a->archive, errno,
				    ""Couldn't change dir"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_863.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_863.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_863.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_863.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_391.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_391.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_391.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1005.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1005.cpp,723,920,725,929,,"archive_set_error(&a->archive, errno,
				    ""Couldn't access %s"", path);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_865.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_865.cpp,"(fd >= 0)
		list_size = extattr_list_fd(fd, namespace, NULL, 0);
	else if (!a->follow_symlinks)
		list_size = extattr_list_link(path, namespace, NULL, 0);
	else
		list_size = extattr_list_file(path, namespace, NULL, 0)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_865.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 3, 1, 12, 0, 0, 0, 3, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_865.cpp,14,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_391.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_391.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_391.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1007.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1007.cpp,853,1070,863,-1,"archive_set_error(&a->archive, errno,
				    ""FIEMAP failed"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_866.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_866.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""FIEMAP failed"");
				exit_sts = ARCHIVE_FAILED;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_866.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_866.cpp,50,"[""member"", ""unkown"", ""string""]","[""unkown"", ""macro"", ""!="", ""unkown"", ""macro"", ""!="", ""&&""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_391.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_391.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_391.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1008.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1008.cpp,923,1130,940,1164,,"archive_set_error(&a->archive, errno,
			    ""Can't open `%s'"", path);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_867.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_867.cpp,"(fd < 0) {
			archive_set_error(&a->archive, errno,
			    ""Can't open `%s'"", path);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_867.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_867.cpp,31,[],"[""pathconf_ret"", ""null"", ""<="", ""!""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_392.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_392.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_392.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1009.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1009.cpp,859,900,861,922,,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_868.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_868.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_868.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_868.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_392.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_392.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_392.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1010.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1010.cpp,897,970,927,1025,,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_869.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_869.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_869.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_869.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_392.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_392.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_392.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1010.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1010.cpp,897,970,945,1051,,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_870.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_870.cpp,"{
	struct archive_read_disk *a = (struct archive_read_disk *)_a;
	struct tree *t;
	const struct stat *st; /* info to use for this entry */
	const struct stat *lst;/* lstat() information */
	int descend, fd = -1, r;

	archive_check_magic(_a, ARCHIVE_READ_DISK_MAGIC,
	    ARCHIVE_STATE_HEADER | ARCHIVE_STATE_DATA,
	    ""archive_read_next_header2"");

	t = a->tree;
	if (t->entry_fd >= 0) {
		close_and_restore_time(t->entry_fd, t, &t->restore_time);
		t->entry_fd = -1;
	}
#if !(defined(HAVE_OPENAT) && defined(HAVE_FSTATAT) && defined(HAVE_FDOPENDIR))
	/* Restore working directory. */
	tree_enter_working_dir(t);
#endif
	st = NULL;
	lst = NULL;
	do {
		switch (tree_next(t)) {
		case TREE_ERROR_FATAL:
			archive_set_error(&a->archive, t->tree_errno,
			    ""%s: Unable to continue traversing directory tree"",
			    tree_current_path(t));
			a->archive.state = ARCHIVE_STATE_FATAL;
			tree_enter_initial_dir(t);
			return (ARCHIVE_FATAL);
		case TREE_ERROR_DIR:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: Couldn't visit directory"",
			    tree_current_path(t));
			tree_enter_initial_dir(t);
			return (ARCHIVE_FAILED);
		case 0:
			tree_enter_initial_dir(t);
			return (ARCHIVE_EOF);
		case TREE_POSTDESCENT:
		case TREE_POSTASCENT:
			break;
		case TREE_REGULAR:
			lst = tree_current_lstat(t);
			if (lst == NULL) {
				archive_set_error(&a->archive, errno,
				    ""%s: Cannot stat"",
				    tree_current_path(t));
				tree_enter_initial_dir(t);
				return (ARCHIVE_FAILED);
			}
			break;
		}	
	} while (lst == NULL);

	/*
	 * Distinguish 'L'/'P'/'H' symlink following.
	 */
	switch(t->symlink_mode) {
	case 'H':
		/* 'H': After the first item, rest like 'P'. */
		t->symlink_mode = 'P';
		/* 'H': First item (from command line) like 'L'. */
		/* FALLTHROUGH */
	case 'L':
		/* 'L': Do descend through a symlink to dir. */
		descend = tree_current_is_dir(t);
		/* 'L': Follow symlinks to files. */
		a->symlink_mode = 'L';
		a->follow_symlinks = 1;
		/* 'L': Archive symlinks as targets, if we can. */
		st = tree_current_stat(t);
		if (st != NULL && !tree_target_is_same_as_parent(t, st))
			break;
		/* If stat fails, we have a broken symlink;
		 * in that case, don't follow the link. */
		/* FALLTHROUGH */
	default:
		/* 'P': Don't descend through a symlink to dir. */
		descend = tree_current_is_physical_dir(t);
		/* 'P': Don't follow symlinks to files. */
		a->symlink_mode = 'P';
		a->follow_symlinks = 0;
		/* 'P': Archive symlinks as symlinks. */
		st = lst;
		break;
	}

	if (update_current_filesystem(a, st->st_dev) != ARCHIVE_OK) {
		a->archive.state = ARCHIVE_STATE_FATAL;
		tree_enter_initial_dir(t);
		return (ARCHIVE_FATAL);
	}
	t->descend = descend;

	archive_entry_set_pathname(entry, tree_current_path(t));
	archive_entry_copy_sourcepath(entry, tree_current_access_path(t));
	archive_entry_copy_stat(entry, st);

	/* Save the times to be restored. */
	t->restore_time.mtime = archive_entry_mtime(entry);
	t->restore_time.mtime_nsec = archive_entry_mtime_nsec(entry);
	t->restore_time.atime = archive_entry_atime(entry);
	t->restore_time.atime_nsec = archive_entry_atime_nsec(entry);
	t->restore_time.filetype = archive_entry_filetype(entry);
	t->restore_time.noatime = t->current_filesystem->noatime;

#if defined(HAVE_OPENAT) && defined(HAVE_FSTATAT) && defined(HAVE_FDOPENDIR)
	/*
	 * Open the current file to freely gather its metadata anywhere in
	 * working directory.
	 * Note: A symbolic link file cannot be opened with O_NOFOLLOW.
	 */
	if (a->follow_symlinks || archive_entry_filetype(entry) != AE_IFLNK)
		fd = openat(tree_current_dir_fd(t), tree_current_access_path(t),
		    O_RDONLY | O_NONBLOCK);
	/* Restore working directory if openat() operation failed or
	 * the file is a symbolic link. */
	if (fd < 0)
		tree_enter_working_dir(t);

	/* The current direcotry fd is needed at
	 * archive_read_disk_entry_from_file() function to read link data
	 * with readlinkat(). */
	a->entry_wd_fd = tree_current_dir_fd(t);
#endif

	/*
	 * Populate the archive_entry with metadata from the disk.
	 */
	r = archive_read_disk_entry_from_file(&(a->archive), entry, fd, st);

	/* Close the file descriptor used for reding the current file
	 * metadata at archive_read_disk_entry_from_file(). */
	if (fd >= 0)
		close(fd);

	/* Return to the initial directory. */
	tree_enter_initial_dir(t);
	archive_entry_copy_sourcepath(entry, tree_current_path(t));

	/*
	 * EOF and FATAL are persistent at this layer.  By
	 * modifying the state, we guarantee that future calls to
	 * read a header or read data will fail.
	 */
	switch (r) {
	case ARCHIVE_EOF:
		a->archive.state = ARCHIVE_STATE_EOF;
		break;
	case ARCHIVE_OK:
	case ARCHIVE_WARN:
		t->entry_total = 0;
		if (archive_entry_filetype(entry) == AE_IFREG) {
			t->nlink = archive_entry_nlink(entry);
			t->entry_remaining_bytes = archive_entry_size(entry);
			t->entry_eof = (t->entry_remaining_bytes == 0)? 1: 0;
			if (!t->entry_eof &&
			    setup_sparse(a, entry) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		} else {
			t->entry_remaining_bytes = 0;
			t->entry_eof = 1;
		}
		a->archive.state = ARCHIVE_STATE_DATA;
		break;
	case ARCHIVE_RETRY:
		break;
	case ARCHIVE_FATAL:
		a->archive.state = ARCHIVE_STATE_FATAL;
		break;
	}

	return (r);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_870.cpp,"[11, 0, 0, 1, 8, 0, 7, 3, 13, 1, 15, 0, 0, 0, 2, 315, 0, 0, 5, 7, 0, 0, 2, 23, 0, 0, 0, 0, 4, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 1, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 14, 10, 2, 0, 52, 0, 0, 53, 0, 78, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_870.cpp,142,"[""struct archive_entry *"", ""tree_current_path_ret""]","[""update_current_filesystem_ret"", ""macro"", ""!="", ""!""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_392.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_392.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_392.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1011.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1011.cpp,1028,1241,1034,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Ignored the request descending the current object"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_871.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_871.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Ignored the request descending the current object"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_871.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_871.cpp,10,"[""member"", ""macro"", ""string""]","[""member"", ""macro"", ""!="", ""member"", ""||""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_392.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_392.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_392.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1017.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1017.cpp,1360,1586,1362,1589,,"archive_set_error(&a->archive, errno, ""fchdir failed"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_875.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_875.cpp,"(tree_current_is_symblic_link_target(t)) {
		r = statvfs(tree_current_access_path(t), &sfs);
		if (r == 0)
			xr = get_xfer_size(t, -1, tree_current_access_path(t));
	} else {
#ifdef HAVE_FSTATVFS
		r = fstatvfs(tree_current_dir_fd(t), &sfs);
		if (r == 0)
			xr = get_xfer_size(t, tree_current_dir_fd(t), NULL);
#else
		r = statvfs(""."", &sfs);
		if (r == 0)
			xr = get_xfer_size(t, -1, ""."");
#endif
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_875.cpp,"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 0, 11, 0, 0, 6, 0, 20, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_875.cpp,8,"[""struct tree *""]",[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_392.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_392.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_392.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1020.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1020.cpp,1456,1698,1459,1702,,"archive_set_error(&a->archive, errno, ""fchdir failed"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_877.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_877.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_877.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_877.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_392.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_392.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_392.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1023.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1023.cpp,1555,1804,1558,1808,,"archive_set_error(&a->archive, errno, ""fchdir failed"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_879.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_879.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_879.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_879.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_392.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_392.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_392.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1024.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1024.cpp,1615,1866,1618,1870,,"archive_set_error(&a->archive, errno, ""fchdir failed"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_880.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_880.cpp,"nm = pathconf(tree_current_access_path(t), _PC_NAME_MAX)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_880.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_880.cpp,20,"[""tree_current_access_path_ret"", ""macro""]","[""tree_current_is_symblic_link_target_ret""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1025.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1025.cpp,557,549,608,591,"archive_set_error(&a->archive, errno, ""Seek error"");","archive_set_error(&a->archive, errno,
			    ""CreateEvent failed"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_881.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_881.cpp,"{
			DWORD lasterr;

			lasterr = GetLastError();
			if (lasterr == ERROR_ACCESS_DENIED)
				errno = EBADF;
			else
				la_dosmaperr(lasterr);
			archive_set_error(&a->archive, errno, ""Seek error"");
			r = ARCHIVE_FATAL;
			a->archive.state = ARCHIVE_STATE_FATAL;
			goto abort_read_data;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_881.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 23, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 6, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_881.cpp,49,"[""member"", ""macro"", ""string""]","[""SetFilePointerEx_perso_ret""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1025.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1025.cpp,557,549,559,632,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Reading file truncated"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_882.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_882.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_882.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_882.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1025.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1025.cpp,557,549,559,704,,"archive_set_error(&a->archive, errno,
		    ""GetOverlappedResult failed"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_883.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_883.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_883.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_883.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1025.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1025.cpp,557,549,559,714,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Reading file truncated"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_884.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_884.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_884.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_884.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1026.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1026.cpp,701,768,703,770,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%ls: Couldn't visit directory"",
			    tree_current_path(t));","archive_set_error(&a->archive, t->tree_errno,
			    ""%ls: Couldn't visit directory"",
			    tree_current_path(t));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_885.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_885.cpp,"{
		case TREE_ERROR_FATAL:
			archive_set_error(&a->archive, t->tree_errno,
			    ""%ls: Unable to continue traversing directory tree"",
			    tree_current_path(t));
			a->archive.state = ARCHIVE_STATE_FATAL;
			return (ARCHIVE_FATAL);
		case TREE_ERROR_DIR:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%ls: Couldn't visit directory"",
			    tree_current_path(t));
			return (ARCHIVE_FAILED);
		case 0:
			return (ARCHIVE_EOF);
		case TREE_POSTDESCENT:
		case TREE_POSTASCENT:
			break;
		case TREE_REGULAR:
			lst = tree_current_lstat(t);
			if (lst == NULL) {
				archive_set_error(&a->archive, errno,
				    ""%ls: Cannot stat"",
				    tree_current_path(t));
				return (ARCHIVE_FAILED);
			}
			break;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_885.cpp,"[1, 0, 0, 0, 2, 0, 4, 0, 6, 0, 2, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 7, 0, 0, 5, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_885.cpp,30,"[""member"", ""macro"", ""string"", ""tree_current_path_ret""]","[""tree_next_ret""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1027.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1027.cpp,713,780,715,782,"archive_set_error(&a->archive, errno,
				    ""%ls: Cannot stat"",
				    tree_current_path(t));","archive_set_error(&a->archive, t->tree_errno,
				    ""%ls: Cannot stat"",
				    tree_current_path(t));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_886.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_886.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""%ls: Cannot stat"",
				    tree_current_path(t));
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_886.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_886.cpp,42,"[""member"", ""unkown"", ""string"", ""tree_current_path_ret""]","[""tree_current_lstat_ret"", ""null"", ""==""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1029.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1029.cpp,759,846,774,871,,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_888.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_888.cpp,"(name != NULL)
		archive_entry_copy_uname(entry, name)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_888.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_888.cpp,101,[],"[""update_current_filesystem_ret"", ""macro"", ""!="", ""!""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1029.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1029.cpp,759,846,781,897,,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_889.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_889.cpp,"(archive_entry_filetype(entry) == AE_IFREG &&
	    archive_entry_size(entry) > 0) {
		t->entry_fh = CreateFileW(tree_current_access_path(t),
		    GENERIC_READ, 0, NULL, OPEN_EXISTING,
		    FILE_FLAG_SEQUENTIAL_SCAN, NULL);
		if (t->entry_fh == INVALID_HANDLE_VALUE) {
			archive_set_error(&a->archive, errno,
			    ""Couldn't open %ls"", tree_current_path(a->tree));
			return (ARCHIVE_FAILED);
		}

		/* Find sparse data from the disk. */
		if (archive_entry_hardlink(entry) == NULL &&
		    (st->dwFileAttributes & FILE_ATTRIBUTE_SPARSE_FILE) != 0)
			r = setup_sparse_from_disk(a, entry, t->entry_fh);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_889.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 8, 0, 0, 4, 0, 19, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_889.cpp,108,"[""struct archive_entry *"", ""struct archive_entry *""]","[""update_current_filesystem_ret"", ""macro"", ""!="", ""!""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1030.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1030.cpp,878,1129,884,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Ignored the request descending the current object"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_890.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_890.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Ignored the request descending the current object"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_890.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_890.cpp,10,"[""member"", ""macro"", ""string""]","[""member"", ""macro"", ""!="", ""member"", ""||""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1032.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1032.cpp,955,1208,956,1209,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate direcotry traversal data"");","archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate directory traversal data"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_892.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_892.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate direcotry traversal data"");
		a->archive.state = ARCHIVE_STATE_FATAL;
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_892.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_892.cpp,10,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1035.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1035.cpp,1109,1365,1111,1370,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""GetDiskFreeSpace failed: %d"", (int)GetLastError());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_893.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_893.cpp,"{
	struct tree *t = a->tree;
	wchar_t vol[256];
	wchar_t *path;

	t->current_filesystem->synthetic = -1;/* Not supported */
	path = safe_path_for_statfs(t);
	if (!GetVolumePathNameW(path, vol, sizeof(vol)/sizeof(vol[0]))) {
		free(path);
		t->current_filesystem->remote = -1;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
                        ""GetVolumePathName failed: %d"", (int)GetLastError());
		return (ARCHIVE_FAILED);
	}
	free(path);
	switch (GetDriveTypeW(vol)) {
	case DRIVE_UNKNOWN:
	case DRIVE_NO_ROOT_DIR:
		t->current_filesystem->remote = -1;
		break;
	case DRIVE_REMOTE:
		t->current_filesystem->remote = 1;
		break;
	default:
		t->current_filesystem->remote = 0;
		break;
	}

	return (ARCHIVE_OK);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_893.cpp,"[1, 0, 0, 0, 3, 0, 2, 1, 3, 1, 3, 0, 0, 0, 0, 59, 0, 0, 3, 3, 0, 0, 1, 8, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 32, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 2, 1, 0, 0, 9, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_893.cpp,30,[],"[""GetVolumePathNameW_ret"", ""!"", ""!""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1037.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1037.cpp,1298,1567,1300,1581,,"fprintf(stderr, ""LIBARCHIVE_DIRECT_IO=%s\n"",
				(t->direct_io)?""Enabled"":""Disabled"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_894.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_894.cpp,"{
	struct archive_wstring ws;
	wchar_t *pathname, *p, *base;

	t->flags = (restore_time)?needsRestoreTimes:0;
	t->visit_type = 0;
	t->tree_errno = 0;
	t->full_path_dir_length = 0;
	t->dirname_length = 0;
	t->depth = 0;
	t->descend = 0;
	t->current = NULL;
	t->d = INVALID_DIR_HANDLE;
	t->symlink_mode = t->initial_symlink_mode;
	archive_string_empty(&(t->full_path));
	archive_string_empty(&t->path);
	t->entry_fh = INVALID_HANDLE_VALUE;
	t->entry_eof = 0;
	t->entry_remaining_bytes = 0;

	/* Get wchar_t strings from char strings. */
	archive_string_init(&ws);
	archive_wstrcpy(&ws, path);
	pathname = ws.s;
	/* Get a full-path-name. */
	p = __la_win_permissive_name_w(pathname);
	if (p == NULL)
		goto failed;
	archive_wstrcpy(&(t->full_path), p);
	free(p);

	/* Convert path separators from '\' to '/' */
	for (p = pathname; *p != L'\0'; ++p) {
		if (*p == L'\\')
			*p = L'/';
	}
	base = pathname;

	/* First item is set up a lot like a symlink traversal. */
	/* printf(""Looking for wildcard in %s\n"", path); */
	/* TODO: wildcard detection here screws up on \\?\c:\ UNC names */
	if (wcschr(base, L'*') || wcschr(base, L'?')) {
		// It has a wildcard in it...
		// Separate the last element.
		p = wcsrchr(base, L'/');
		if (p != NULL) {
			*p = L'\0';
			tree_append(t, base, p - base);
			t->dirname_length = archive_strlen(&t->path);
			base = p + 1;
		}
		p = wcsrchr(t->full_path.s, L'\\');
		if (p != NULL) {
			*p = L'\0';
			t->full_path.length = wcslen(t->full_path.s);
			t->full_path_dir_length = archive_strlen(&t->full_path);
		}
	}
	tree_push(t, base, t->full_path.s, 0, 0, 0, NULL);
	archive_wstring_free(&ws);
	t->stack->flags = needsFirstVisit;
	return (t);
failed:
	archive_wstring_free(&ws);
	tree_free(t);
	return (NULL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_894.cpp,"[5, 0, 1, 0, 0, 0, 2, 0, 0, 0, 7, 1, 1, 0, 0, 164, 0, 0, 2, 4, 0, 0, 1, 22, 0, 0, 0, 0, 3, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 1, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 6, 1, 0, 19, 0, 0, 37, 0, 33, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_894.cpp,63,[],"[""__la_win_permissive_name_w_ret"", ""null"", ""==""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1037.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1037.cpp,1298,1567,1300,1590,,"fprintf(stderr, ""LIBARCHIVE_ASYNC_IO=%s\n"",
			    (t->async_io)?""Enabled"":""Disabled"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_895.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_895.cpp,"{
	struct archive_wstring ws;
	wchar_t *pathname, *p, *base;

	t->flags = (restore_time)?needsRestoreTimes:0;
	t->visit_type = 0;
	t->tree_errno = 0;
	t->full_path_dir_length = 0;
	t->dirname_length = 0;
	t->depth = 0;
	t->descend = 0;
	t->current = NULL;
	t->d = INVALID_DIR_HANDLE;
	t->symlink_mode = t->initial_symlink_mode;
	archive_string_empty(&(t->full_path));
	archive_string_empty(&t->path);
	t->entry_fh = INVALID_HANDLE_VALUE;
	t->entry_eof = 0;
	t->entry_remaining_bytes = 0;

	/* Get wchar_t strings from char strings. */
	archive_string_init(&ws);
	archive_wstrcpy(&ws, path);
	pathname = ws.s;
	/* Get a full-path-name. */
	p = __la_win_permissive_name_w(pathname);
	if (p == NULL)
		goto failed;
	archive_wstrcpy(&(t->full_path), p);
	free(p);

	/* Convert path separators from '\' to '/' */
	for (p = pathname; *p != L'\0'; ++p) {
		if (*p == L'\\')
			*p = L'/';
	}
	base = pathname;

	/* First item is set up a lot like a symlink traversal. */
	/* printf(""Looking for wildcard in %s\n"", path); */
	/* TODO: wildcard detection here screws up on \\?\c:\ UNC names */
	if (wcschr(base, L'*') || wcschr(base, L'?')) {
		// It has a wildcard in it...
		// Separate the last element.
		p = wcsrchr(base, L'/');
		if (p != NULL) {
			*p = L'\0';
			tree_append(t, base, p - base);
			t->dirname_length = archive_strlen(&t->path);
			base = p + 1;
		}
		p = wcsrchr(t->full_path.s, L'\\');
		if (p != NULL) {
			*p = L'\0';
			t->full_path.length = wcslen(t->full_path.s);
			t->full_path_dir_length = archive_strlen(&t->full_path);
		}
	}
	tree_push(t, base, t->full_path.s, 0, 0, 0, NULL);
	archive_wstring_free(&ws);
	t->stack->flags = needsFirstVisit;
	return (t);
failed:
	archive_wstring_free(&ws);
	tree_free(t);
	return (NULL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_895.cpp,"[5, 0, 1, 0, 0, 0, 2, 0, 0, 0, 7, 1, 1, 0, 0, 164, 0, 0, 2, 4, 0, 0, 1, 22, 0, 0, 0, 0, 3, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 1, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 6, 1, 0, 19, 0, 0, 37, 0, 33, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_895.cpp,63,[],"[""__la_win_permissive_name_w_ret"", ""null"", ""==""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1038.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1038.cpp,1775,2084,1777,2087,"archive_set_error(&a->archive, GetLastError(),
				    ""Can't GetFileInformationByHandle"");","archive_set_error(&a->archive, errno,
				    ""Can't GetFileInformationByHandle"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_896.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_896.cpp,"{
				archive_set_error(&a->archive, GetLastError(),
				    ""Can't GetFileInformationByHandle"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_896.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_896.cpp,32,"[""member"", ""GetLastError_ret"", ""string""]","[""GetFileInformationByHandle_ret"", ""null"", ""==""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1039.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1039.cpp,1785,2095,1788,2099,"archive_set_error(&a->archive, GetLastError(),
				    ""Can't FindFirstFileW"");","archive_set_error(&a->archive, errno,
				    ""Can't FindFirstFileW"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_897.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_897.cpp,"{
				archive_set_error(&a->archive, GetLastError(),
				    ""Can't FindFirstFileW"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_897.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_897.cpp,43,"[""member"", ""GetLastError_ret"", ""string""]","[""FindFirstFileW_ret"", ""macro"", ""==""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1040.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1040.cpp,1807,2118,1809,2121,"archive_set_error(&a->archive,
				    GetLastError(),
				    ""Can't CreateFileW"");","archive_set_error(&a->archive, errno,
				    ""Can't CreateFileW"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_898.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_898.cpp,"{
				archive_set_error(&a->archive,
				    GetLastError(),
				    ""Can't CreateFileW"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_898.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_898.cpp,64,"[""member"", ""GetLastError_ret"", ""string""]","[""CreateFileW_ret"", ""macro"", ""==""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1040.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1040.cpp,1807,2118,1816,2128,"archive_set_error(&a->archive,
				    GetLastError(),
				    ""Can't GetFileInformationByHandle"");","archive_set_error(&a->archive, errno,
				    ""Can't GetFileInformationByHandle"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_899.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_899.cpp,"{
				archive_set_error(&a->archive,
				    GetLastError(),
				    ""Can't GetFileInformationByHandle"");
				CloseHandle(h);
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_899.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_899.cpp,71,"[""member"", ""GetLastError_ret"", ""string""]","[""GetFileInformationByHandle_ret"", ""null"", ""==""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1041.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1041.cpp,1854,2165,1856,2168,"archive_set_error(&a->archive, GetLastError(),
				    ""Can't CreateFileW"");","archive_set_error(&a->archive, errno,
				    ""Can't CreateFileW"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_900.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_900.cpp,"{
				archive_set_error(&a->archive, GetLastError(),
				    ""Can't CreateFileW"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_900.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_900.cpp,111,"[""member"", ""GetLastError_ret"", ""string""]","[""CreateFileW_ret"", ""macro"", ""==""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1041.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1041.cpp,1854,2165,1863,2176,"archive_set_error(&a->archive, GetLastError(),
			    ""Can't GetFileInformationByHandle"");","archive_set_error(&a->archive, errno,
			    ""Can't GetFileInformationByHandle"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_901.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_901.cpp,"{
			archive_set_error(&a->archive, GetLastError(),
			    ""Can't GetFileInformationByHandle"");
			if (h != INVALID_HANDLE_VALUE && fd < 0)
				CloseHandle(h);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_901.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_901.cpp,118,"[""member"", ""GetLastError_ret"", ""string""]","[""GetFileInformationByHandle_ret"", ""null"", ""==""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1042.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1042.cpp,1909,2222,1911,2224,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			""Couldn't allocate memory"");","archive_set_error(&a->archive, ENOMEM,
			""Couldn't allocate memory"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_902.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_902.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			""Couldn't allocate memory"");
		exit_sts = ARCHIVE_FATAL;
		goto exit_setup_sparse;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_902.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_902.cpp,14,"[""member"", ""macro"", ""string""]","[""malloc_ret"", ""null"", ""==""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1043.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1043.cpp,1923,2236,1932,2245,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Couldn't allocate memory"");","archive_set_error(&a->archive, ENOMEM,
					    ""Couldn't allocate memory"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_903.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_903.cpp,"{
					archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Couldn't allocate memory"");
					exit_sts = ARCHIVE_FATAL;
					goto exit_setup_sparse;
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_903.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_903.cpp,35,"[""member"", ""macro"", ""string""]","[""malloc_ret"", ""null"", ""==""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_393.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1044.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1044.cpp,1968,2280,1970,2283,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""DeviceIoControl Failed: %lu"", GetLastError());","archive_set_error(&a->archive, errno,
			    ""DeviceIoControl Failed: %lu"", GetLastError());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_904.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_904.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""DeviceIoControl Failed: %lu"", GetLastError());
			exit_sts = ARCHIVE_FAILED;
			goto exit_setup_sparse;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_904.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_904.cpp,73,"[""member"", ""macro"", ""string"", ""GetLastError_ret""]","[""DeviceIoControl_ret"", ""null"", ""!="", ""!""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_open_filename.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_395.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_395.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_395.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1046.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1046.cpp,98,103,115,163,,"archive_set_error(a, ENOMEM, ""No memory"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_907.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_907.cpp,"(wfilename == NULL || wfilename[0] == L'\0') {
		filename_type = FNT_STDIN;
	} else {
#if defined(_WIN32) && !defined(__CYGWIN__)
		filename_type = FNT_WCS;
#else
		/*
		 * POSIX system does not support a wchar_t interface for
		 * open() system call, so we have to translate a whcar_t
		 * filename to multi-byte one and use it.
		 */
		struct archive_string fn;
		int r;

		archive_string_init(&fn);
		if (archive_string_append_from_wcs(&fn, wfilename,
		    wcslen(wfilename)) != 0) {
			archive_set_error(a, EINVAL,
			    ""Failed to convert a wide-character filename to""
			    "" a multi-byte filename"");
			archive_string_free(&fn);
			return (ARCHIVE_FATAL);
		}
		r = file_open_filename(a, FNT_MBS, fn.s, block_size);
		archive_string_free(&fn);
		return (r);
#endif
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_907.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 42, 0, 0, 2, 2, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 1, 2, 0, 9, 0, 0, 7, 0, 16, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_907.cpp,6,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_398.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_398.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_398.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1052.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1052.cpp,79,82,99,-1,"archive_set_error(_a, -1,
	    ""External compression programs not supported on this platform"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_911.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_911.cpp,"{
	(void)_a; /* UNUSED */
	(void)cmd; /* UNUSED */
	(void)signature; /* UNUSED */
	(void)signature_len; /* UNUSED */

	archive_set_error(_a, -1,
	    ""External compression programs not supported on this platform"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_911.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 5, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_911.cpp,9,"[""struct archive *"", ""int"", ""string""]",[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_398.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_398.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_398.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1052.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1052.cpp,79,82,110,-1,"archive_set_error(&self->archive->archive, -1,
	    ""External compression programs not supported on this platform"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_912.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_912.cpp,"{
	(void)self; /* UNUSED */
	(void)cmd; /* UNUSED */

	archive_set_error(&self->archive->archive, -1,
	    ""External compression programs not supported on this platform"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_912.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_912.cpp,6,"[""member"", ""int"", ""string""]",[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_filter_uu.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_399.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_399.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_399.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1055.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1055.cpp,485,491,493,501,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");",uudecode->state = ST_IGNORE;,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_914.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_914.cpp,"{
			/* Non-ascii character is found. */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_914.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_914.cpp,46,"[""member"", ""macro"", ""string""]","[""get_line_ret"", ""null"", ""<""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_cab.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_402.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_402.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_402.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1067.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1067.cpp,478,481,481,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""cab: unknown keyword ``%s''"", key);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_917.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_917.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""cab: unknown keyword ``%s''"", key)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_917.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_917.cpp,21,"[""member"", ""macro"", ""string"", ""const char *""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_cpio.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_403.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_403.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_403.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1070.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1070.cpp,339,340,342,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""cpio: unknown keyword ``%s''"", key);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_918.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_918.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""cpio: unknown keyword ``%s''"", key)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_918.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_918.cpp,26,"[""member"", ""macro"", ""string"", ""const char *""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_iso9660.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_404.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_404.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_404.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1076.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1076.cpp,1286,1310,1309,1329,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Ignoring out-of-order file @%jx (%s) %jd < %jd"",
		    (intmax_t)file->number,
		    iso9660->pathname.s,
		    (intmax_t)file->offset,
		    (intmax_t)iso9660->current_position);","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Ignoring out-of-order file @%jx (%s) %jd < %jd"",
			    (intmax_t)file->number,
			    iso9660->pathname.s,
			    (intmax_t)file->offset,
			    (intmax_t)iso9660->current_position);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_919.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_919.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Ignoring out-of-order file @%jx (%s) %jd < %jd"",
		    (intmax_t)file->number,
		    iso9660->pathname.s,
		    (intmax_t)file->offset,
		    (intmax_t)iso9660->current_position);
		iso9660->entry_bytes_remaining = 0;
		iso9660->entry_sparse_offset = 0;
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_919.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_919.cpp,248,"[""member"", ""macro"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""bool"", ""macro"", ""!="", ""member"", ""member"", ""<"", ""&&""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_iso9660.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_404.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_404.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_404.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1080.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1080.cpp,2882,2888,2883,2889,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Failed to connect 'CL' pointer to 'RE' rr_moved pointer of""
	    ""Rockridge extensions"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Failed to connect 'CL' pointer to 'RE' rr_moved pointer of ""
	    ""Rockridge extensions: current position = %jd, CL offset = %jd"",
	    (intmax_t)iso9660->current_position, (intmax_t)file->cl_offset);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_920.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_920.cpp,"{
	struct file_info *file;
	struct {
		struct file_info	*first;
		struct file_info	**last;
	}	empty_files;
	int64_t number;
	int count;

	file = cache_get_entry(iso9660);
	if (file != NULL) {
		*pfile = file;
		return (ARCHIVE_OK);
	}

	for (;;) {
		struct file_info *re, *d;

		*pfile = file = next_entry(iso9660);
		if (file == NULL) {
			/*
			 * If directory entries all which are descendant of
			 * rr_moved are stil remaning, expose their. 
			 */
			if (iso9660->re_files.first != NULL && 
			    iso9660->rr_moved != NULL &&
			    iso9660->rr_moved->rr_moved_has_re_only)
				/* Expose ""rr_moved"" entry. */
				cache_add_entry(iso9660, iso9660->rr_moved);
			while ((re = re_get_entry(iso9660)) != NULL) {
				/* Expose its descendant dirs. */
				while ((d = rede_get_entry(re)) != NULL)
					cache_add_entry(iso9660, d);
			}
			if (iso9660->cache_files.first != NULL)
				return (next_cache_entry(a, iso9660, pfile));
			return (ARCHIVE_EOF);
		}

		if (file->cl_offset) {
			struct file_info *first_re = NULL;
			int nexted_re = 0;

			/*
			 * Find ""RE"" dir for the current file, which
			 * has ""CL"" flag.
			 */
			while ((re = re_get_entry(iso9660))
			    != first_re) {
				if (first_re == NULL)
					first_re = re;
				if (re->offset == file->cl_offset) {
					re->parent->subdirs--;
					re->parent = file->parent;
					re->re = 0;
					if (re->parent->re_descendant) {
						nexted_re = 1;
						re->re_descendant = 1;
						if (rede_add_entry(re) < 0)
							goto fatal_rr;
						/* Move a list of descendants
						 * to a new ancestor. */
						while ((d = rede_get_entry(
						    re)) != NULL)
							if (rede_add_entry(d)
							    < 0)
								goto fatal_rr;
						break;
					}
					/* Replace the current file
					 * with ""RE"" dir */
					*pfile = file = re;
					/* Expose its descendant */
					while ((d = rede_get_entry(
					    file)) != NULL)
						cache_add_entry(
						    iso9660, d);
					break;
				} else
					re_add_entry(iso9660, re);
			}
			if (nexted_re) {
				/*
				 * Do not expose this at this time
				 * because we have not gotten its full-path
				 * name yet.
				 */
				continue;
			}
		} else if ((file->mode & AE_IFMT) == AE_IFDIR) {
			int r;

			/* Read file entries in this dir. */
			r = read_children(a, file);
			if (r != ARCHIVE_OK)
				return (r);

			/*
			 * Handle a special dir of Rockridge extensions,
			 * ""rr_moved"".
			 */
			if (file->rr_moved) {
				/*
				 * If this has only the subdirectories which
				 * have ""RE"" flags, do not expose at this time.
				 */
				if (file->rr_moved_has_re_only)
					continue;
				/* Otherwise expose ""rr_moved"" entry. */
			} else if (file->re) {
				/*
				 * Do not expose this at this time
				 * because we have not gotten its full-path
				 * name yet.
				 */
				re_add_entry(iso9660, file);
				continue;
			} else if (file->re_descendant) {
				/*
				 * If the top level ""RE"" entry of this entry
				 * is not exposed, we, accordingly, should not
				 * expose this entry at this time because
				 * we cannot make its proper full-path name.
				 */
				if (rede_add_entry(file) == 0)
					continue;
				/* Otherwise we can expose this entry because
				 * it seems its top level ""RE"" has already been
				 * exposed. */
			}
		}
		break;
	}

	if ((file->mode & AE_IFMT) != AE_IFREG || file->number == -1)
		return (ARCHIVE_OK);

	count = 0;
	number = file->number;
	iso9660->cache_files.first = NULL;
	iso9660->cache_files.last = &(iso9660->cache_files.first);
	empty_files.first = NULL;
	empty_files.last = &empty_files.first;
	/* Collect files which has the same file serial number.
	 * Peek pending_files so that file which number is different
	 * is not put bak. */
	while (iso9660->pending_files.used > 0 &&
	    (iso9660->pending_files.files[0]->number == -1 ||
	     iso9660->pending_files.files[0]->number == number)) {
		if (file->number == -1) {
			/* This file has the same offset
			 * but it's wrong offset which empty files
			 * and symlink files have.
			 * NOTE: This wrong offse was recorded by
			 * old mkisofs utility. If ISO images is
			 * created by latest mkisofs, this does not
			 * happen.
			 */
			file->next = NULL;
			*empty_files.last = file;
			empty_files.last = &(file->next);
		} else {
			count++;
			cache_add_entry(iso9660, file);
		}
		file = next_entry(iso9660);
	}

	if (count == 0) {
		*pfile = file;
		return ((file == NULL)?ARCHIVE_EOF:ARCHIVE_OK);
	}
	if (file->number == -1) {
		file->next = NULL;
		*empty_files.last = file;
		empty_files.last = &(file->next);
	} else {
		count++;
		cache_add_entry(iso9660, file);
	}

	if (count > 1) {
		/* The count is the same as number of hardlink,
		 * so much so that each nlinks of files in cache_file
		 * is overwritten by value of the count.
		 */
		for (file = iso9660->cache_files.first;
		    file != NULL; file = file->next)
			file->nlinks = count;
	}
	/* If there are empty files, that files are added
	 * to the tail of the cache_files. */
	if (empty_files.first != NULL) {
		*iso9660->cache_files.last = empty_files.first;
		iso9660->cache_files.last = empty_files.last;
	}
	*pfile = cache_get_entry(iso9660);
	return ((*pfile == NULL)?ARCHIVE_EOF:ARCHIVE_OK);

fatal_rr:
	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Failed to connect 'CL' pointer to 'RE' rr_moved pointer of""
	    ""Rockridge extensions"");
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_920.cpp,"[24, 6, 2, 0, 3, 4, 8, 0, 0, 0, 37, 1, 2, 0, 0, 327, 0, 0, 9, 11, 0, 0, 4, 19, 0, 0, 0, 0, 7, 0, 22, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 203, 2, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 2, 0, 34, 26, 5, 0, 22, 0, 0, 39, 3, 34, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_920.cpp,203,[],"[""rede_add_entry_ret"", ""null"", ""<""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_lha.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_405.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_405.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_405.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1082.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1082.cpp,445,446,448,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""lha: unknown keyword ``%s''"", key);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_921.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_921.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""lha: unknown keyword ``%s''"", key)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_921.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_921.cpp,22,"[""member"", ""macro"", ""string"", ""const char *""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_407.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1086.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1086.cpp,757,770,760,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
        ""rar: unknown keyword ``%s''"", key);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_922.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_922.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
        ""rar: unknown keyword ``%s''"", key)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_922.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_922.cpp,22,"[""member"", ""macro"", ""string"", ""const char *""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_407.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1087.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1087.cpp,842,857,847,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""RAR volume support unavailable."");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_923.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_923.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""RAR volume support unavailable."");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_923.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_923.cpp,81,"[""member"", ""macro"", ""constant""]","[""bool"", ""bool"", ""||""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_407.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1087.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1087.cpp,842,857,853,859,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""RAR encryption support unavailable."");","(rar->main_flags & MHD_PASSWORD)
      {
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""RAR encryption support unavailable."");
        return (ARCHIVE_FATAL);
      };",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_924.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_924.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""RAR encryption support unavailable."");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_924.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_924.cpp,87,"[""member"", ""macro"", ""constant""]","[""bool""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_407.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1087.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1087.cpp,842,857,853,861,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""RAR encryption support unavailable."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_925.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_925.cpp,"{
        archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""RAR encryption support unavailable."");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_925.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_925.cpp,87,"[""member"", ""macro"", ""constant""]","[""bool""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_407.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1089.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1089.cpp,987,998,992,1074,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
              ""Attempt to seek past beginning of RAR data block"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_926.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_926.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_926.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_926.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_407.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1089.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1089.cpp,987,998,992,1090,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
              ""Error during seek of RAR file"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_927.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_927.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_927.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_927.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_407.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1089.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1089.cpp,987,998,992,1122,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
              ""Error during seek of RAR file"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_928.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_928.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_928.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_928.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_407.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1089.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1089.cpp,987,998,992,1167,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
      ""Seeking of compressed RAR files is unsupported"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_929.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_929.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_929.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_929.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_407.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1095.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1095.cpp,1272,1467,1276,1481,,"archive_set_error(&a->archive, ENOMEM, ""Couldn't allocate memory."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_930.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_930.cpp,"(p + 8 > endp) {
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
        ""Invalid header size"");
      return (ARCHIVE_FATAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_930.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_930.cpp,268,[],"[""bool""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_407.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_407.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1095.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1095.cpp,1272,1467,1274,1505,,"archive_set_error(&a->archive, ENOMEM, ""Couldn't allocate memory."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_931.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_931.cpp,"(rar->file_flags & FHD_SALT)
  {
    if (p + 8 > endp) {
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
        ""Invalid header size"");
      return (ARCHIVE_FATAL);
    }
    memcpy(rar->salt, p, 8);
    p += 8;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_931.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_931.cpp,266,[],"[""member"", ""null"", ""=="", ""!""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_408.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_408.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_408.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1099.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1099.cpp,383,384,386,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""tar: unknown keyword ``%s''"", key);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_932.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_932.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""tar: unknown keyword ``%s''"", key)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_932.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_932.cpp,27,"[""member"", ""macro"", ""string"", ""const char *""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_409.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1103.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1103.cpp,309,465,330,568,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported ZIP compression method (%s)"",
		    compression_name(rsrc->compression));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_933.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_933.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_933.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_933.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_409.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1103.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1103.cpp,309,465,330,577,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Mac metadata is too large: %jd > 128K bytes"",
		    (intmax_t)rsrc->uncompressed_size);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_934.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_934.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_934.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_934.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_409.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1103.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1103.cpp,309,465,330,585,,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for Mac metadata"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_935.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_935.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_935.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_935.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_409.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1103.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1103.cpp,309,465,330,611,,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated ZIP file header"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_936.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_936.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_936.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_936.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_409.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1103.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1103.cpp,309,465,330,652,,"archive_set_error(&a->archive, ENOMEM,
				    ""Out of memory for ZIP decompression"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_937.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_937.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_937.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_937.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_409.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1103.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1103.cpp,309,465,330,657,,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""ZIP decompression failed (%d)"", r);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_938.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_938.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_938.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_938.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_409.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1104.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1104.cpp,373,750,379,764,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Symlink"");","archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Symlink"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_939.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_939.cpp,"{
			/* NOTE: If the last argument is NULL, this will
			 * fail only by memeory allocation failure. */
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Symlink"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_939.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_939.cpp,49,"[""member"", ""macro"", ""string""]","[""archive_entry_copy_symlink_l_ret"", ""null"", ""!=""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_409.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1106.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1106.cpp,439,850,442,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""zip: unknown keyword ``%s''"", key);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_941.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_941.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""zip: unknown keyword ``%s''"", key)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_941.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_941.cpp,27,"[""member"", ""macro"", ""string"", ""const char *""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_409.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1110.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1110.cpp,781,1222,788,1231,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""ZIP compressed data is wrong size (read %jd, expected %jd)"",
			    (intmax_t)zip->entry_compressed_bytes_read,
			    (intmax_t)zip->entry->compressed_size);","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""ZIP compressed data is wrong size ""
			    ""(read %jd, expected %jd)"",
			    (intmax_t)zip->entry_compressed_bytes_read,
			    (intmax_t)zip->entry->compressed_size);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_944.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_944.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""ZIP compressed data is wrong size (read %jd, expected %jd)"",
			    (intmax_t)zip->entry_compressed_bytes_read,
			    (intmax_t)zip->entry->compressed_size);
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_944.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_944.cpp,56,"[""member"", ""macro"", ""string"", ""member"", ""member""]","[""member"", ""member"", ""!=""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_409.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1111.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1111.cpp,797,1241,798,1242,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""ZIP uncompressed data is wrong size (read %jd, expected %jd)"",
			    (intmax_t)zip->entry_uncompressed_bytes_read,
			    (intmax_t)zip->entry->uncompressed_size);","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""ZIP uncompressed data is wrong size ""
			    ""(read %jd, expected %jd)"",
			    (intmax_t)zip->entry_uncompressed_bytes_read,
			    (intmax_t)zip->entry->uncompressed_size);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_945.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_945.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""ZIP uncompressed data is wrong size (read %jd, expected %jd)"",
			    (intmax_t)zip->entry_uncompressed_bytes_read,
			    (intmax_t)zip->entry->uncompressed_size);
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_945.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_945.cpp,66,"[""member"", ""macro"", ""string"", ""member"", ""member""]","[""bool"", ""bool"", ""!=""]"
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_409.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1114.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1114.cpp,918,1370,918,1384,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize ZIP decompression."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_946.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_946.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_946.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_946.cpp,0,[],[]
35df7c8ba8854e97bd6994c4d1143f57535ed6f2,"libarchive 3.1.2 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2 &&
r=19f23e19 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_409.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_409.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1115.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1115.cpp,940,1419,950,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize ZIP decompression."");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_947.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_947.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Can't initialize ZIP decompression."");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_947.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_947.cpp,31,"[""member"", ""macro"", ""constant""]","[""inflateInit2_ret"", ""macro"", ""!=""]"
4e5cb398ae392079031ae6a880569349c29770a6,"Merge branch 'master' into vs12-generator

Resolve conflicts in Tests/Preprocess/CMakeLists.txt by keeping
the side from 'master'.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_412.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_412.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1122.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1122.cpp,242,270,256,288,"fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideBase, rulesOverridePath2);","fprintf(fout, ""SET(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_948.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_948.cpp,"{
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideBase, rulesOverridePath2);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_948.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_948.cpp,236,"[""FILE *"", ""string"", ""const char *"", ""unkown""]","[""unkown"", ""this -> Makefile -> GetDefinition_ret""]"
4e5cb398ae392079031ae6a880569349c29770a6,"Merge branch 'master' into vs12-generator

Resolve conflicts in Tests/Preprocess/CMakeLists.txt by keeping
the side from 'master'.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_412.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_412.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1122.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1122.cpp,242,270,262,-1,"fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE %s)\n"", lang);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_949.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_949.cpp,"{
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE %s)\n"", lang);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_949.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_949.cpp,242,"[""FILE *"", ""string"", ""const char *""]","[""const char *""]"
4e5cb398ae392079031ae6a880569349c29770a6,"Merge branch 'master' into vs12-generator

Resolve conflicts in Tests/Preprocess/CMakeLists.txt by keeping
the side from 'master'.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_412.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_412.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1122.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1122.cpp,242,270,288,297,"fprintf(fout, ""SET(CMAKE_%s_FLAGS \"""", lang);","fprintf(fout, ""SET(CMAKE_%s_FLAGS \"""", li->c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_950.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_950.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    std::string source = argv[2];
    std::string ext = cmSystemTools::GetFilenameLastExtension(source);
    const char* lang =(this->Makefile->GetCMakeInstance()->GetGlobalGenerator()
                        ->GetLanguageFromExtension(ext.c_str()));
    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);
      }

    const char* rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
    std::string rulesOverrideLang =
      rulesOverrideBase + (lang ? std::string(""_"") + lang : std::string(""""));
    if(const char* rulesOverridePath =
       this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideLang.c_str(), rulesOverridePath);
      }
    else if(const char* rulesOverridePath2 =
            this->Makefile->GetDefinition(rulesOverrideBase))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideBase, rulesOverridePath2);
      }

    if(lang)
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE %s)\n"", lang);
      }
    else
      {
      fclose(fout);
      cmOStringStream err;
      err << ""Unknown extension \"""" << ext << ""\"" for file\n""
          << ""  "" << source << ""\n""
          << ""try_compile() works only for enabled languages.  ""
          << ""Currently these are:\n "";
      std::vector<std::string> langs;
      this->Makefile->GetCMakeInstance()->GetGlobalGenerator()->
        GetEnabledLanguages(langs);
      for(std::vector<std::string>::iterator l = langs.begin();
          l != langs.end(); ++l)
        {
        err << "" "" << *l;
        }
      err << ""\nSee project() command to enable other languages."";
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
      return -1;
      }
    std::string langFlags = ""CMAKE_"";
    langFlags +=  lang;
    langFlags += ""_FLAGS"";
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    fprintf(fout, ""SET(CMAKE_%s_FLAGS \"""", lang);
    const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
    if(flags)
      {
      fprintf(fout, "" %s "", flags);
      }
    fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""SET(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg;
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetExports(targets);
      tcfg.SetConfig(this->Makefile->GetDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURE to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURE first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""SET(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""ADD_EXECUTABLE(%s \""%s\"")\n"", targetName, source.c_str());
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    // if the source is not in CMakeTmp
    if(source.find(""CMakeTmp"") == source.npos)
      {
      this->Makefile->AddCMakeDependFile(source.c_str());
      }

    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_950.cpp,"[16, 0, 2, 0, 0, 0, 3, 0, 0, 0, 21, 0, 0, 0, 6, 410, 0, 0, 19, 22, 0, 0, 20, 70, 0, 0, 0, 0, 7, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 1, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 2, 0, 19, 17, 3, 0, 94, 0, 0, 51, 2, 108, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_950.cpp,268,"[""FILE *"", ""string"", ""const char *""]","[""const char *""]"
4e5cb398ae392079031ae6a880569349c29770a6,"Merge branch 'master' into vs12-generator

Resolve conflicts in Tests/Preprocess/CMakeLists.txt by keeping
the side from 'master'.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_412.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_412.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1122.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1122.cpp,242,270,294,303,"fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");","fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_951.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_951.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    std::string source = argv[2];
    std::string ext = cmSystemTools::GetFilenameLastExtension(source);
    const char* lang =(this->Makefile->GetCMakeInstance()->GetGlobalGenerator()
                        ->GetLanguageFromExtension(ext.c_str()));
    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);
      }

    const char* rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
    std::string rulesOverrideLang =
      rulesOverrideBase + (lang ? std::string(""_"") + lang : std::string(""""));
    if(const char* rulesOverridePath =
       this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideLang.c_str(), rulesOverridePath);
      }
    else if(const char* rulesOverridePath2 =
            this->Makefile->GetDefinition(rulesOverrideBase))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideBase, rulesOverridePath2);
      }

    if(lang)
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE %s)\n"", lang);
      }
    else
      {
      fclose(fout);
      cmOStringStream err;
      err << ""Unknown extension \"""" << ext << ""\"" for file\n""
          << ""  "" << source << ""\n""
          << ""try_compile() works only for enabled languages.  ""
          << ""Currently these are:\n "";
      std::vector<std::string> langs;
      this->Makefile->GetCMakeInstance()->GetGlobalGenerator()->
        GetEnabledLanguages(langs);
      for(std::vector<std::string>::iterator l = langs.begin();
          l != langs.end(); ++l)
        {
        err << "" "" << *l;
        }
      err << ""\nSee project() command to enable other languages."";
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
      return -1;
      }
    std::string langFlags = ""CMAKE_"";
    langFlags +=  lang;
    langFlags += ""_FLAGS"";
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    fprintf(fout, ""SET(CMAKE_%s_FLAGS \"""", lang);
    const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
    if(flags)
      {
      fprintf(fout, "" %s "", flags);
      }
    fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""SET(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg;
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetExports(targets);
      tcfg.SetConfig(this->Makefile->GetDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURE to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURE first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""SET(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""ADD_EXECUTABLE(%s \""%s\"")\n"", targetName, source.c_str());
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    // if the source is not in CMakeTmp
    if(source.find(""CMakeTmp"") == source.npos)
      {
      this->Makefile->AddCMakeDependFile(source.c_str());
      }

    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_951.cpp,"[16, 0, 2, 0, 0, 0, 3, 0, 0, 0, 21, 0, 0, 0, 6, 410, 0, 0, 19, 22, 0, 0, 20, 70, 0, 0, 0, 0, 7, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 1, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 2, 0, 19, 17, 3, 0, 94, 0, 0, 51, 2, 108, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_951.cpp,274,"[""FILE *"", ""string""]","[""const char *""]"
4e5cb398ae392079031ae6a880569349c29770a6,"Merge branch 'master' into vs12-generator

Resolve conflicts in Tests/Preprocess/CMakeLists.txt by keeping
the side from 'master'.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_412.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_412.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1122.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1122.cpp,242,270,304,314,"fprintf(fout,""%s "",compileFlags[i].c_str());","fprintf(fout,""%s "",compileDefs[i].c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_952.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_952.cpp,"{
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_952.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_952.cpp,284,"[""FILE *"", ""string"", ""compileFlags [ i ] . c_str_ret""]","[""null"", ""compileFlags . size_ret"", ""<""]"
4e5cb398ae392079031ae6a880569349c29770a6,"Merge branch 'master' into vs12-generator

Resolve conflicts in Tests/Preprocess/CMakeLists.txt by keeping
the side from 'master'.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_412.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_412.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1123.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1123.cpp,377,387,379,389,"fprintf(fout, ""ADD_EXECUTABLE(%s \""%s\"")\n"", targetName, source.c_str());","fprintf(fout, ""ADD_EXECUTABLE(%s"", targetName);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_954.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_954.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    std::string source = argv[2];
    std::string ext = cmSystemTools::GetFilenameLastExtension(source);
    const char* lang =(this->Makefile->GetCMakeInstance()->GetGlobalGenerator()
                        ->GetLanguageFromExtension(ext.c_str()));
    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);
      }

    const char* rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
    std::string rulesOverrideLang =
      rulesOverrideBase + (lang ? std::string(""_"") + lang : std::string(""""));
    if(const char* rulesOverridePath =
       this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideLang.c_str(), rulesOverridePath);
      }
    else if(const char* rulesOverridePath2 =
            this->Makefile->GetDefinition(rulesOverrideBase))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideBase, rulesOverridePath2);
      }

    if(lang)
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE %s)\n"", lang);
      }
    else
      {
      fclose(fout);
      cmOStringStream err;
      err << ""Unknown extension \"""" << ext << ""\"" for file\n""
          << ""  "" << source << ""\n""
          << ""try_compile() works only for enabled languages.  ""
          << ""Currently these are:\n "";
      std::vector<std::string> langs;
      this->Makefile->GetCMakeInstance()->GetGlobalGenerator()->
        GetEnabledLanguages(langs);
      for(std::vector<std::string>::iterator l = langs.begin();
          l != langs.end(); ++l)
        {
        err << "" "" << *l;
        }
      err << ""\nSee project() command to enable other languages."";
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
      return -1;
      }
    std::string langFlags = ""CMAKE_"";
    langFlags +=  lang;
    langFlags += ""_FLAGS"";
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    fprintf(fout, ""SET(CMAKE_%s_FLAGS \"""", lang);
    const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
    if(flags)
      {
      fprintf(fout, "" %s "", flags);
      }
    fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""SET(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg;
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetExports(targets);
      tcfg.SetConfig(this->Makefile->GetDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURE to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURE first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""SET(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""ADD_EXECUTABLE(%s \""%s\"")\n"", targetName, source.c_str());
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    // if the source is not in CMakeTmp
    if(source.find(""CMakeTmp"") == source.npos)
      {
      this->Makefile->AddCMakeDependFile(source.c_str());
      }

    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_954.cpp,"[16, 0, 2, 0, 0, 0, 3, 0, 0, 0, 21, 0, 0, 0, 6, 410, 0, 0, 19, 22, 0, 0, 20, 70, 0, 0, 0, 0, 7, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 1, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 2, 0, 19, 17, 3, 0, 94, 0, 0, 51, 2, 108, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_954.cpp,359,"[""FILE *"", ""string"", ""char *"", ""source . c_str_ret""]","[""targets . empty_ret"", ""!""]"
4e5cb398ae392079031ae6a880569349c29770a6,"Merge branch 'master' into vs12-generator

Resolve conflicts in Tests/Preprocess/CMakeLists.txt by keeping
the side from 'master'.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_412.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_412.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1123.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1123.cpp,377,387,380,393,,"fprintf(fout, "" \""%s\"""", si->c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_955.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_955.cpp,"(useOldLinkLibs)
      {
      fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_955.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_955.cpp,360,[],"[""targets . empty_ret"", ""!""]"
4e5cb398ae392079031ae6a880569349c29770a6,"Merge branch 'master' into vs12-generator

Resolve conflicts in Tests/Preprocess/CMakeLists.txt by keeping
the side from 'master'.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_412.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_412.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1123.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1123.cpp,377,387,380,401,,"fprintf(fout, "")\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_956.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_956.cpp,"(useOldLinkLibs)
      {
      fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_956.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_956.cpp,360,[],"[""tcfg . GenerateImportFile_ret"", ""!""]"
482f1122ad5db4c51b26a6e943b4bb5ef3d800cc,"try_compile: Add signature to allow multiple SOURCES

Extend the signature

 try_compile(RESULT_VAR <bindir> <srcfile> ...)

to allow multiple sources as

 try_compile(RESULT_VAR <bindir> SOURCES <srcfile>... ...)

Process the sources to generate a CMakeLists.txt that enables all needed
languages.

Teach the TryCompile test to try cases with two sources of the same
language and of mixed languages.  Teach RunCMake.try_compile to cover
error cases for the signature.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_416.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_416.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_416.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1131.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1131.cpp,222,270,236,288,"fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideBase, rulesOverridePath2);","fprintf(fout, ""SET(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_957.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_957.cpp,"{
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideBase, rulesOverridePath2);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_957.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_957.cpp,216,"[""FILE *"", ""string"", ""const char *"", ""unkown""]","[""unkown"", ""this -> Makefile -> GetDefinition_ret""]"
482f1122ad5db4c51b26a6e943b4bb5ef3d800cc,"try_compile: Add signature to allow multiple SOURCES

Extend the signature

 try_compile(RESULT_VAR <bindir> <srcfile> ...)

to allow multiple sources as

 try_compile(RESULT_VAR <bindir> SOURCES <srcfile>... ...)

Process the sources to generate a CMakeLists.txt that enables all needed
languages.

Teach the TryCompile test to try cases with two sources of the same
language and of mixed languages.  Teach RunCMake.try_compile to cover
error cases for the signature.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_416.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_416.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_416.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1131.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1131.cpp,222,270,242,-1,"fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE %s)\n"", lang);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_958.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_958.cpp,"{
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE %s)\n"", lang);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_958.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_958.cpp,222,"[""FILE *"", ""string"", ""const char *""]","[""const char *""]"
482f1122ad5db4c51b26a6e943b4bb5ef3d800cc,"try_compile: Add signature to allow multiple SOURCES

Extend the signature

 try_compile(RESULT_VAR <bindir> <srcfile> ...)

to allow multiple sources as

 try_compile(RESULT_VAR <bindir> SOURCES <srcfile>... ...)

Process the sources to generate a CMakeLists.txt that enables all needed
languages.

Teach the TryCompile test to try cases with two sources of the same
language and of mixed languages.  Teach RunCMake.try_compile to cover
error cases for the signature.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_416.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_416.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_416.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1131.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1131.cpp,222,270,268,297,"fprintf(fout, ""SET(CMAKE_%s_FLAGS \"""", lang);","fprintf(fout, ""SET(CMAKE_%s_FLAGS \"""", li->c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_959.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_959.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    std::string source = argv[2];
    std::string ext = cmSystemTools::GetFilenameLastExtension(source);
    const char* lang =(this->Makefile->GetCMakeInstance()->GetGlobalGenerator()
                        ->GetLanguageFromExtension(ext.c_str()));
    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);
      }

    const char* rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
    std::string rulesOverrideLang =
      rulesOverrideBase + (lang ? std::string(""_"") + lang : std::string(""""));
    if(const char* rulesOverridePath =
       this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideLang.c_str(), rulesOverridePath);
      }
    else if(const char* rulesOverridePath2 =
            this->Makefile->GetDefinition(rulesOverrideBase))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideBase, rulesOverridePath2);
      }

    if(lang)
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE %s)\n"", lang);
      }
    else
      {
      fclose(fout);
      cmOStringStream err;
      err << ""Unknown extension \"""" << ext << ""\"" for file\n""
          << ""  "" << source << ""\n""
          << ""try_compile() works only for enabled languages.  ""
          << ""Currently these are:\n "";
      std::vector<std::string> langs;
      this->Makefile->GetCMakeInstance()->GetGlobalGenerator()->
        GetEnabledLanguages(langs);
      for(std::vector<std::string>::iterator l = langs.begin();
          l != langs.end(); ++l)
        {
        err << "" "" << *l;
        }
      err << ""\nSee project() command to enable other languages."";
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
      return -1;
      }
    std::string langFlags = ""CMAKE_"";
    langFlags +=  lang;
    langFlags += ""_FLAGS"";
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    fprintf(fout, ""SET(CMAKE_%s_FLAGS \"""", lang);
    const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
    if(flags)
      {
      fprintf(fout, "" %s "", flags);
      }
    fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""SET(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileDefs.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (size_t i = 0; i < compileDefs.size(); ++i)
        {
        fprintf(fout,""%s "",compileDefs[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg;
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetExports(targets);
      tcfg.SetConfig(this->Makefile->GetDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURE to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURE first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""SET(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""ADD_EXECUTABLE(%s \""%s\"")\n"", targetName, source.c_str());
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    // if the source is not in CMakeTmp
    if(source.find(""CMakeTmp"") == source.npos)
      {
      this->Makefile->AddCMakeDependFile(source.c_str());
      }

    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_959.cpp,"[16, 0, 2, 0, 0, 0, 3, 0, 0, 0, 21, 0, 0, 0, 6, 411, 0, 0, 19, 23, 0, 0, 21, 70, 0, 0, 0, 0, 7, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 1, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 2, 0, 19, 17, 3, 0, 94, 0, 0, 51, 2, 108, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_959.cpp,248,"[""FILE *"", ""string"", ""const char *""]","[""const char *""]"
482f1122ad5db4c51b26a6e943b4bb5ef3d800cc,"try_compile: Add signature to allow multiple SOURCES

Extend the signature

 try_compile(RESULT_VAR <bindir> <srcfile> ...)

to allow multiple sources as

 try_compile(RESULT_VAR <bindir> SOURCES <srcfile>... ...)

Process the sources to generate a CMakeLists.txt that enables all needed
languages.

Teach the TryCompile test to try cases with two sources of the same
language and of mixed languages.  Teach RunCMake.try_compile to cover
error cases for the signature.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_416.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_416.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_416.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1131.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1131.cpp,222,270,274,303,"fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");","fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_960.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_960.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    std::string source = argv[2];
    std::string ext = cmSystemTools::GetFilenameLastExtension(source);
    const char* lang =(this->Makefile->GetCMakeInstance()->GetGlobalGenerator()
                        ->GetLanguageFromExtension(ext.c_str()));
    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);
      }

    const char* rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
    std::string rulesOverrideLang =
      rulesOverrideBase + (lang ? std::string(""_"") + lang : std::string(""""));
    if(const char* rulesOverridePath =
       this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideLang.c_str(), rulesOverridePath);
      }
    else if(const char* rulesOverridePath2 =
            this->Makefile->GetDefinition(rulesOverrideBase))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideBase, rulesOverridePath2);
      }

    if(lang)
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE %s)\n"", lang);
      }
    else
      {
      fclose(fout);
      cmOStringStream err;
      err << ""Unknown extension \"""" << ext << ""\"" for file\n""
          << ""  "" << source << ""\n""
          << ""try_compile() works only for enabled languages.  ""
          << ""Currently these are:\n "";
      std::vector<std::string> langs;
      this->Makefile->GetCMakeInstance()->GetGlobalGenerator()->
        GetEnabledLanguages(langs);
      for(std::vector<std::string>::iterator l = langs.begin();
          l != langs.end(); ++l)
        {
        err << "" "" << *l;
        }
      err << ""\nSee project() command to enable other languages."";
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
      return -1;
      }
    std::string langFlags = ""CMAKE_"";
    langFlags +=  lang;
    langFlags += ""_FLAGS"";
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    fprintf(fout, ""SET(CMAKE_%s_FLAGS \"""", lang);
    const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
    if(flags)
      {
      fprintf(fout, "" %s "", flags);
      }
    fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""SET(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileDefs.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (size_t i = 0; i < compileDefs.size(); ++i)
        {
        fprintf(fout,""%s "",compileDefs[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg;
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetExports(targets);
      tcfg.SetConfig(this->Makefile->GetDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURE to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURE first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""SET(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""ADD_EXECUTABLE(%s \""%s\"")\n"", targetName, source.c_str());
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    // if the source is not in CMakeTmp
    if(source.find(""CMakeTmp"") == source.npos)
      {
      this->Makefile->AddCMakeDependFile(source.c_str());
      }

    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_960.cpp,"[16, 0, 2, 0, 0, 0, 3, 0, 0, 0, 21, 0, 0, 0, 6, 411, 0, 0, 19, 23, 0, 0, 21, 70, 0, 0, 0, 0, 7, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 1, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 2, 0, 19, 17, 3, 0, 94, 0, 0, 51, 2, 108, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_960.cpp,254,"[""FILE *"", ""string""]","[""const char *""]"
482f1122ad5db4c51b26a6e943b4bb5ef3d800cc,"try_compile: Add signature to allow multiple SOURCES

Extend the signature

 try_compile(RESULT_VAR <bindir> <srcfile> ...)

to allow multiple sources as

 try_compile(RESULT_VAR <bindir> SOURCES <srcfile>... ...)

Process the sources to generate a CMakeLists.txt that enables all needed
languages.

Teach the TryCompile test to try cases with two sources of the same
language and of mixed languages.  Teach RunCMake.try_compile to cover
error cases for the signature.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_416.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_416.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_416.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1132.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1132.cpp,357,387,359,389,"fprintf(fout, ""ADD_EXECUTABLE(%s \""%s\"")\n"", targetName, source.c_str());","fprintf(fout, ""ADD_EXECUTABLE(%s"", targetName);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_962.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_962.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    std::string source = argv[2];
    std::string ext = cmSystemTools::GetFilenameLastExtension(source);
    const char* lang =(this->Makefile->GetCMakeInstance()->GetGlobalGenerator()
                        ->GetLanguageFromExtension(ext.c_str()));
    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);
      }

    const char* rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
    std::string rulesOverrideLang =
      rulesOverrideBase + (lang ? std::string(""_"") + lang : std::string(""""));
    if(const char* rulesOverridePath =
       this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideLang.c_str(), rulesOverridePath);
      }
    else if(const char* rulesOverridePath2 =
            this->Makefile->GetDefinition(rulesOverrideBase))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideBase, rulesOverridePath2);
      }

    if(lang)
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE %s)\n"", lang);
      }
    else
      {
      fclose(fout);
      cmOStringStream err;
      err << ""Unknown extension \"""" << ext << ""\"" for file\n""
          << ""  "" << source << ""\n""
          << ""try_compile() works only for enabled languages.  ""
          << ""Currently these are:\n "";
      std::vector<std::string> langs;
      this->Makefile->GetCMakeInstance()->GetGlobalGenerator()->
        GetEnabledLanguages(langs);
      for(std::vector<std::string>::iterator l = langs.begin();
          l != langs.end(); ++l)
        {
        err << "" "" << *l;
        }
      err << ""\nSee project() command to enable other languages."";
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
      return -1;
      }
    std::string langFlags = ""CMAKE_"";
    langFlags +=  lang;
    langFlags += ""_FLAGS"";
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    fprintf(fout, ""SET(CMAKE_%s_FLAGS \"""", lang);
    const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
    if(flags)
      {
      fprintf(fout, "" %s "", flags);
      }
    fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""SET(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileDefs.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (size_t i = 0; i < compileDefs.size(); ++i)
        {
        fprintf(fout,""%s "",compileDefs[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg;
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetExports(targets);
      tcfg.SetConfig(this->Makefile->GetDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURE to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURE first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""SET(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""ADD_EXECUTABLE(%s \""%s\"")\n"", targetName, source.c_str());
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    // if the source is not in CMakeTmp
    if(source.find(""CMakeTmp"") == source.npos)
      {
      this->Makefile->AddCMakeDependFile(source.c_str());
      }

    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_962.cpp,"[16, 0, 2, 0, 0, 0, 3, 0, 0, 0, 21, 0, 0, 0, 6, 411, 0, 0, 19, 23, 0, 0, 21, 70, 0, 0, 0, 0, 7, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 1, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 2, 0, 19, 17, 3, 0, 94, 0, 0, 51, 2, 108, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_962.cpp,339,"[""FILE *"", ""string"", ""char *"", ""source . c_str_ret""]","[""targets . empty_ret"", ""!""]"
482f1122ad5db4c51b26a6e943b4bb5ef3d800cc,"try_compile: Add signature to allow multiple SOURCES

Extend the signature

 try_compile(RESULT_VAR <bindir> <srcfile> ...)

to allow multiple sources as

 try_compile(RESULT_VAR <bindir> SOURCES <srcfile>... ...)

Process the sources to generate a CMakeLists.txt that enables all needed
languages.

Teach the TryCompile test to try cases with two sources of the same
language and of mixed languages.  Teach RunCMake.try_compile to cover
error cases for the signature.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_416.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_416.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_416.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1132.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1132.cpp,357,387,360,393,,"fprintf(fout, "" \""%s\"""", si->c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_963.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_963.cpp,"(useOldLinkLibs)
      {
      fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_963.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_963.cpp,340,[],"[""tcfg . GenerateImportFile_ret"", ""!""]"
482f1122ad5db4c51b26a6e943b4bb5ef3d800cc,"try_compile: Add signature to allow multiple SOURCES

Extend the signature

 try_compile(RESULT_VAR <bindir> <srcfile> ...)

to allow multiple sources as

 try_compile(RESULT_VAR <bindir> SOURCES <srcfile>... ...)

Process the sources to generate a CMakeLists.txt that enables all needed
languages.

Teach the TryCompile test to try cases with two sources of the same
language and of mixed languages.  Teach RunCMake.try_compile to cover
error cases for the signature.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_416.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_416.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_416.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1132.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1132.cpp,357,387,360,401,,"fprintf(fout, "")\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_964.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_964.cpp,"(useOldLinkLibs)
      {
      fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
      }
    else
      {
      fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_964.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_964.cpp,340,[],"[""tcfg . GenerateImportFile_ret"", ""!""]"
d06db7ebe80636876d9701064b16cec9d3e2e3cb,"try_compile: Refactor argument processing

Process all arguments in a single loop using a simple state machine.
While at it, fix some error message typos.  Also allow LINK_LIBRARIES
with no actual libraries to disable use of the -DLINK_LIBRARIES=...
from the CMAKE_FLAGS.  This was already possible in the old logic if
LINK_LIBRARIES was immediately followed by another keyword argument
instead of the end of the argument list, so allow it in general.
Update the RunCMake.try_compile test cases accordingly.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_419.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_419.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_419.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1137.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1137.cpp,297,277,304,284,"fprintf(fout,""%s "",compileFlags[i].c_str());","fprintf(fout,""%s "",compileDefs[i].c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_965.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_965.cpp,"{
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_965.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_965.cpp,284,"[""FILE *"", ""string"", ""compileFlags [ i ] . c_str_ret""]","[""null"", ""compileFlags . size_ret"", ""<""]"
ddac8d3d2d027dd50d729918078f57628855a568,Fix spelling and typos (affecting binary data / module messages),[],Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_422.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_422.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_422.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1142.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1142.cpp,414,414,414,414,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unkonwn checksum name: `%s'"",
			    value);","archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unknown checksum name: `%s'"",
			    value);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_966.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_966.cpp,"{
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unkonwn checksum name: `%s'"",
			    value);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_966.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_966.cpp,15,"[""member"", ""macro"", ""string"", ""const char *""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
ddac8d3d2d027dd50d729918078f57628855a568,Fix spelling and typos (affecting binary data / module messages),[],Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_422.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_422.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_422.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1143.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1143.cpp,448,448,448,448,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unkonwn compression name: `%s'"",
			    value);","archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unknown compression name: `%s'"",
			    value);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_967.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_967.cpp,"{
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unkonwn compression name: `%s'"",
			    value);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_967.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_967.cpp,49,"[""member"", ""macro"", ""string"", ""const char *""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
ddac8d3d2d027dd50d729918078f57628855a568,Fix spelling and typos (affecting binary data / module messages),[],Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_422.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_422.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_422.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1144.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1144.cpp,485,485,485,485,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unkonwn checksum name: `%s'"",
			    value);","archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unknown checksum name: `%s'"",
			    value);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_968.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_968.cpp,"{
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""Unkonwn checksum name: `%s'"",
			    value);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_968.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_968.cpp,86,"[""member"", ""macro"", ""string"", ""const char *""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
236133e79e2d047810eeba90915e38d9861e2a22,"Handle targets in the LINK_LIBRARIES of try_compile.

Imported targets are re-exported so that they can be used by the
try_compile generated code with target_link_libraries.

This makes the use of the cmake_expand_imported_targets macro
obsolete. The macro is not able to expand the generator expressions
which may appear in the IMPORTED_LINK_INTERFACE_LIBRARIES content.
Instead it just sees them as 'not a target'.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_423.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_423.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_423.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1146.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1146.cpp,286,372,290,-1,"f(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_971.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_971.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    std::string source = argv[2];
    std::string ext = cmSystemTools::GetFilenameLastExtension(source);
    const char* lang =(this->Makefile->GetCMakeInstance()->GetGlobalGenerator()
                        ->GetLanguageFromExtension(ext.c_str()));
    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);
      }

    const char* rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
    std::string rulesOverrideLang =
      rulesOverrideBase + (lang ? std::string(""_"") + lang : std::string(""""));
    if(const char* rulesOverridePath =
       this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideLang.c_str(), rulesOverridePath);
      }
    else if(const char* rulesOverridePath2 =
            this->Makefile->GetDefinition(rulesOverrideBase))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideBase, rulesOverridePath2);
      }

    if(lang)
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE %s)\n"", lang);
      }
    else
      {
      fclose(fout);
      cmOStringStream err;
      err << ""Unknown extension \"""" << ext << ""\"" for file\n""
          << ""  "" << source << ""\n""
          << ""try_compile() works only for enabled languages.  ""
          << ""Currently these are:\n "";
      std::vector<std::string> langs;
      this->Makefile->GetCMakeInstance()->GetGlobalGenerator()->
        GetEnabledLanguages(langs);
      for(std::vector<std::string>::iterator l = langs.begin();
          l != langs.end(); ++l)
        {
        err << "" "" << *l;
        }
      err << ""\nSee project() command to enable other languages."";
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
      return -1;
      }
    std::string langFlags = ""CMAKE_"";
    langFlags +=  lang;
    langFlags += ""_FLAGS"";
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    fprintf(fout, ""SET(CMAKE_%s_FLAGS \"""", lang);
    const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
    if(flags)
      {
      fprintf(fout, "" %s "", flags);
      }
    fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""SET(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURE to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURE first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""SET(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""ADD_EXECUTABLE(%s \""%s\"")\n"", targetName, source.c_str());
    fprintf(fout, ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    // if the source is not in CMakeTmp
    if(source.find(""CMakeTmp"") == source.npos)
      {
      this->Makefile->AddCMakeDependFile(source.c_str());
      }

    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_971.cpp,"[13, 0, 2, 0, 0, 0, 2, 0, 0, 0, 17, 0, 0, 0, 6, 354, 0, 0, 17, 20, 0, 0, 19, 63, 0, 0, 0, 0, 7, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 1, 177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 2, 0, 16, 14, 2, 0, 80, 0, 0, 44, 2, 93, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_971.cpp,273,"[""char *"", ""string"", ""cmSystemTools :: RandomSeed_ret""]","[""const char *""]"
236133e79e2d047810eeba90915e38d9861e2a22,"Handle targets in the LINK_LIBRARIES of try_compile.

Imported targets are re-exported so that they can be used by the
try_compile generated code with target_link_libraries.

This makes the use of the cmake_expand_imported_targets macro
obsolete. The macro is not able to expand the generator expressions
which may appear in the IMPORTED_LINK_INTERFACE_LIBRARIES content.
Instead it just sees them as 'not a target'.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_423.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_423.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_423.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1146.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1146.cpp,286,372,295,375,"fprintf(fout, ""SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());","f(fout, ""SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_972.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_972.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    std::string source = argv[2];
    std::string ext = cmSystemTools::GetFilenameLastExtension(source);
    const char* lang =(this->Makefile->GetCMakeInstance()->GetGlobalGenerator()
                        ->GetLanguageFromExtension(ext.c_str()));
    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);
      }

    const char* rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
    std::string rulesOverrideLang =
      rulesOverrideBase + (lang ? std::string(""_"") + lang : std::string(""""));
    if(const char* rulesOverridePath =
       this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideLang.c_str(), rulesOverridePath);
      }
    else if(const char* rulesOverridePath2 =
            this->Makefile->GetDefinition(rulesOverrideBase))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideBase, rulesOverridePath2);
      }

    if(lang)
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE %s)\n"", lang);
      }
    else
      {
      fclose(fout);
      cmOStringStream err;
      err << ""Unknown extension \"""" << ext << ""\"" for file\n""
          << ""  "" << source << ""\n""
          << ""try_compile() works only for enabled languages.  ""
          << ""Currently these are:\n "";
      std::vector<std::string> langs;
      this->Makefile->GetCMakeInstance()->GetGlobalGenerator()->
        GetEnabledLanguages(langs);
      for(std::vector<std::string>::iterator l = langs.begin();
          l != langs.end(); ++l)
        {
        err << "" "" << *l;
        }
      err << ""\nSee project() command to enable other languages."";
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
      return -1;
      }
    std::string langFlags = ""CMAKE_"";
    langFlags +=  lang;
    langFlags += ""_FLAGS"";
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    fprintf(fout, ""SET(CMAKE_%s_FLAGS \"""", lang);
    const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
    if(flags)
      {
      fprintf(fout, "" %s "", flags);
      }
    fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""SET(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURE to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURE first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""SET(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""ADD_EXECUTABLE(%s \""%s\"")\n"", targetName, source.c_str());
    fprintf(fout, ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    // if the source is not in CMakeTmp
    if(source.find(""CMakeTmp"") == source.npos)
      {
      this->Makefile->AddCMakeDependFile(source.c_str());
      }

    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_972.cpp,"[13, 0, 2, 0, 0, 0, 2, 0, 0, 0, 17, 0, 0, 0, 6, 354, 0, 0, 17, 20, 0, 0, 19, 63, 0, 0, 0, 0, 7, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 1, 177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 2, 0, 16, 14, 2, 0, 80, 0, 0, 44, 2, 93, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_972.cpp,278,"[""FILE *"", ""string"", ""this -> BinaryDirectory . c_str_ret""]","[""const char *""]"
236133e79e2d047810eeba90915e38d9861e2a22,"Handle targets in the LINK_LIBRARIES of try_compile.

Imported targets are re-exported so that they can be used by the
try_compile generated code with target_link_libraries.

This makes the use of the cmake_expand_imported_targets macro
obsolete. The macro is not able to expand the generator expressions
which may appear in the IMPORTED_LINK_INTERFACE_LIBRARIES content.
Instead it just sees them as 'not a target'.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_423.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_423.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_423.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1146.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1146.cpp,286,372,299,381,"fprintf(fout, ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);","fprintf(fout,
              ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_973.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_973.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    std::string source = argv[2];
    std::string ext = cmSystemTools::GetFilenameLastExtension(source);
    const char* lang =(this->Makefile->GetCMakeInstance()->GetGlobalGenerator()
                        ->GetLanguageFromExtension(ext.c_str()));
    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);
      }

    const char* rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
    std::string rulesOverrideLang =
      rulesOverrideBase + (lang ? std::string(""_"") + lang : std::string(""""));
    if(const char* rulesOverridePath =
       this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideLang.c_str(), rulesOverridePath);
      }
    else if(const char* rulesOverridePath2 =
            this->Makefile->GetDefinition(rulesOverrideBase))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideBase, rulesOverridePath2);
      }

    if(lang)
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE %s)\n"", lang);
      }
    else
      {
      fclose(fout);
      cmOStringStream err;
      err << ""Unknown extension \"""" << ext << ""\"" for file\n""
          << ""  "" << source << ""\n""
          << ""try_compile() works only for enabled languages.  ""
          << ""Currently these are:\n "";
      std::vector<std::string> langs;
      this->Makefile->GetCMakeInstance()->GetGlobalGenerator()->
        GetEnabledLanguages(langs);
      for(std::vector<std::string>::iterator l = langs.begin();
          l != langs.end(); ++l)
        {
        err << "" "" << *l;
        }
      err << ""\nSee project() command to enable other languages."";
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
      return -1;
      }
    std::string langFlags = ""CMAKE_"";
    langFlags +=  lang;
    langFlags += ""_FLAGS"";
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    fprintf(fout, ""SET(CMAKE_%s_FLAGS \"""", lang);
    const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
    if(flags)
      {
      fprintf(fout, "" %s "", flags);
      }
    fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""SET(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURE to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURE first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""SET(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""ADD_EXECUTABLE(%s \""%s\"")\n"", targetName, source.c_str());
    fprintf(fout, ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    // if the source is not in CMakeTmp
    if(source.find(""CMakeTmp"") == source.npos)
      {
      this->Makefile->AddCMakeDependFile(source.c_str());
      }

    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_973.cpp,"[13, 0, 2, 0, 0, 0, 2, 0, 0, 0, 17, 0, 0, 0, 6, 354, 0, 0, 17, 20, 0, 0, 19, 63, 0, 0, 0, 0, 7, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 1, 177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 2, 0, 16, 14, 2, 0, 80, 0, 0, 44, 2, 93, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_973.cpp,282,"[""FILE *"", ""string"", ""char *""]","[""const char *""]"
236133e79e2d047810eeba90915e38d9861e2a22,"Handle targets in the LINK_LIBRARIES of try_compile.

Imported targets are re-exported so that they can be used by the
try_compile generated code with target_link_libraries.

This makes the use of the cmake_expand_imported_targets macro
obsolete. The macro is not able to expand the generator expressions
which may appear in the IMPORTED_LINK_INTERFACE_LIBRARIES content.
Instead it just sees them as 'not a target'.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_423.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_423.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_423.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1146.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1146.cpp,286,372,300,386,,"fprintf(fout, ""TARGET_LINK_LIBRARIES(%s %s)\n"",
              targetName,
              libsToLink.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_974.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_974.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmOStringStream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName.c_str() << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    std::string source = argv[2];
    std::string ext = cmSystemTools::GetFilenameLastExtension(source);
    const char* lang =(this->Makefile->GetCMakeInstance()->GetGlobalGenerator()
                        ->GetLanguageFromExtension(ext.c_str()));
    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);
      }

    const char* rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
    std::string rulesOverrideLang =
      rulesOverrideBase + (lang ? std::string(""_"") + lang : std::string(""""));
    if(const char* rulesOverridePath =
       this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideLang.c_str(), rulesOverridePath);
      }
    else if(const char* rulesOverridePath2 =
            this->Makefile->GetDefinition(rulesOverrideBase))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideBase, rulesOverridePath2);
      }

    if(lang)
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE %s)\n"", lang);
      }
    else
      {
      fclose(fout);
      cmOStringStream err;
      err << ""Unknown extension \"""" << ext << ""\"" for file\n""
          << ""  "" << source << ""\n""
          << ""try_compile() works only for enabled languages.  ""
          << ""Currently these are:\n "";
      std::vector<std::string> langs;
      this->Makefile->GetCMakeInstance()->GetGlobalGenerator()->
        GetEnabledLanguages(langs);
      for(std::vector<std::string>::iterator l = langs.begin();
          l != langs.end(); ++l)
        {
        err << "" "" << *l;
        }
      err << ""\nSee project() command to enable other languages."";
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
      return -1;
      }
    std::string langFlags = ""CMAKE_"";
    langFlags +=  lang;
    langFlags += ""_FLAGS"";
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    fprintf(fout, ""SET(CMAKE_%s_FLAGS \"""", lang);
    const char* flags = this->Makefile->GetDefinition(langFlags.c_str());
    if(flags)
      {
      fprintf(fout, "" %s "", flags);
      }
    fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""SET(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURE to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURE first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""SET(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTryCompileExec%u"",
            cmSystemTools::RandomSeed());
    targetName = targetNameBuf;

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""ADD_EXECUTABLE(%s \""%s\"")\n"", targetName, source.c_str());
    fprintf(fout, ""TARGET_LINK_LIBRARIES(%s ${LINK_LIBRARIES})\n"",targetName);
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    // if the source is not in CMakeTmp
    if(source.find(""CMakeTmp"") == source.npos)
      {
      this->Makefile->AddCMakeDependFile(source.c_str());
      }

    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_974.cpp,"[13, 0, 2, 0, 0, 0, 2, 0, 0, 0, 17, 0, 0, 0, 6, 354, 0, 0, 17, 20, 0, 0, 19, 63, 0, 0, 0, 0, 7, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 1, 177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 2, 0, 16, 14, 2, 0, 80, 0, 0, 44, 2, 93, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_974.cpp,283,"[""FILE *""]","[""const char *""]"
badb40d0f841dcfc4d098e59c5c570e73767cf68,"Merge branch 'master' into sublime-text-2-generator

Resolve conflict in Source/cmDocumentVariables.cxx by adding both
variables.",[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_424.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_424.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_424.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1147.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1147.cpp,365,335,379,-1,"sprintf(fwdName, KWSYS_NAMESPACE_STRING ""pew9xfwd_%ld_%p.exe"",
            GetCurrentProcessId(), cp);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_975.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_975.cpp,"{
    /* This is Win9x.  We need the console forwarding executable to
       work-around a Windows 9x bug.  */
    char fwdName[_MAX_FNAME+1] = """";
    char tempDir[_MAX_PATH+1] = """";

    /* We will try putting the executable in the system temp
       directory.  Note that the returned path already has a trailing
       slash.  */
    DWORD length = GetTempPath(_MAX_PATH+1, tempDir);

    /* Construct the executable name from the process id and kwsysProcess
       instance.  This should be unique.  */
    sprintf(fwdName, KWSYS_NAMESPACE_STRING ""pew9xfwd_%ld_%p.exe"",
            GetCurrentProcessId(), cp);

    /* If we have a temp directory, use it.  */
    if(length > 0 && length <= _MAX_PATH)
      {
      /* Allocate a buffer to hold the forwarding executable path.  */
      size_t tdlen = strlen(tempDir);
      win9x = (char*)malloc(tdlen + strlen(fwdName) + 2);
      if(!win9x)
        {
        kwsysProcess_Delete(cp);
        return 0;
        }

      /* Construct the full path to the forwarding executable.  */
      sprintf(win9x, ""%s%s"", tempDir, fwdName);
      }

    /* If we found a place to put the forwarding executable, try to
       write it. */
    if(win9x)
      {
      if(!kwsysEncodedWriteArrayProcessFwd9x(win9x))
        {
        /* Failed to create forwarding executable.  Give up.  */
        free(win9x);
        kwsysProcess_Delete(cp);
        return 0;
        }

      /* Get a handle to the file that will delete it when closed.  */
      cp->Win9xHandle = CreateFile(win9x, GENERIC_READ, FILE_SHARE_READ, 0,
                                   OPEN_EXISTING, FILE_FLAG_DELETE_ON_CLOSE, 0);
      if(cp->Win9xHandle == INVALID_HANDLE_VALUE)
        {
        /* We were not able to get a read handle for the forwarding
           executable.  It will not be deleted properly.  Give up.  */
        _unlink(win9x);
        free(win9x);
        kwsysProcess_Delete(cp);
        return 0;
        }
      }
    else
      {
      /* Failed to find a place to put forwarding executable.  */
      kwsysProcess_Delete(cp);
      return 0;
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_975.cpp,"[5, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 0, 66, 0, 0, 4, 4, 0, 0, 4, 15, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 5, 5, 1, 0, 16, 0, 0, 11, 0, 28, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_975.cpp,47,[],"[""member"", ""macro"", ""==""]"
badb40d0f841dcfc4d098e59c5c570e73767cf68,"Merge branch 'master' into sublime-text-2-generator

Resolve conflict in Source/cmDocumentVariables.cxx by adding both
variables.",[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_424.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_424.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_424.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1147.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1147.cpp,365,335,395,-1,"sprintf(win9x, ""%s%s"", tempDir, fwdName);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_976.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_976.cpp,"{
      /* Allocate a buffer to hold the forwarding executable path.  */
      size_t tdlen = strlen(tempDir);
      win9x = (char*)malloc(tdlen + strlen(fwdName) + 2);
      if(!win9x)
        {
        kwsysProcess_Delete(cp);
        return 0;
        }

      /* Construct the full path to the forwarding executable.  */
      sprintf(win9x, ""%s%s"", tempDir, fwdName);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_976.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 1, 1, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_976.cpp,63,"[""malloc_ret"", ""string"", ""char *"", ""char *""]","[""malloc_ret"", ""!"", ""!""]"
badb40d0f841dcfc4d098e59c5c570e73767cf68,"Merge branch 'master' into sublime-text-2-generator

Resolve conflict in Source/cmDocumentVariables.cxx by adding both
variables.",[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_424.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_424.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_424.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1148.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1148.cpp,1815,1653,1847,-1,"sprintf(realCommand, ""%s %p %p %p %d %s"", cp->Win9x,
            si->ErrorPipeWrite, cp->Win9xResumeEvent, cp->Win9xKillEvent,
            cp->HideWindow, cp->Commands[index]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_977.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_977.cpp,"{
    /* Create an error reporting pipe for the forwarding executable.
       Neither end is directly inherited.  */
    if(!CreatePipe(&si->ErrorPipeRead, &si->ErrorPipeWrite, 0, 0))
      {
      return 0;
      }

    /* Create an inherited duplicate of the write end.  This also closes
       the non-inherited version. */
    if(!DuplicateHandle(GetCurrentProcess(), si->ErrorPipeWrite,
                        GetCurrentProcess(), &si->ErrorPipeWrite,
                        0, TRUE, (DUPLICATE_CLOSE_SOURCE |
                                  DUPLICATE_SAME_ACCESS)))
      {
      return 0;
      }

    /* The forwarding executable is given a handle to the error pipe
       and resume and kill events.  */
    realCommand = (char*)malloc(strlen(cp->Win9x)+strlen(cp->Commands[index])+100);
    if(!realCommand)
      {
      return 0;
      }
    sprintf(realCommand, ""%s %p %p %p %d %s"", cp->Win9x,
            si->ErrorPipeWrite, cp->Win9xResumeEvent, cp->Win9xKillEvent,
            cp->HideWindow, cp->Commands[index]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_977.cpp,"[3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 0, 8, 0, 0, 2, 0, 22, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_977.cpp,161,"[""malloc_ret"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""malloc_ret"", ""!"", ""!""]"
95a9c80cacea50e2b5d52d67d0a7f5c9b50192dd,"Merge topic 'LINK_LIBRARIES-property' into rpath-use-implicit-link-dirs

Resolve a logical conflict in the signature of cmTarget::GetLinkClosure.",[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_425.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_425.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_425.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1149.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1149.cpp,365,335,379,-1,"sprintf(fwdName, KWSYS_NAMESPACE_STRING ""pew9xfwd_%ld_%p.exe"",
            GetCurrentProcessId(), cp);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_978.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_978.cpp,"{
    /* This is Win9x.  We need the console forwarding executable to
       work-around a Windows 9x bug.  */
    char fwdName[_MAX_FNAME+1] = """";
    char tempDir[_MAX_PATH+1] = """";

    /* We will try putting the executable in the system temp
       directory.  Note that the returned path already has a trailing
       slash.  */
    DWORD length = GetTempPath(_MAX_PATH+1, tempDir);

    /* Construct the executable name from the process id and kwsysProcess
       instance.  This should be unique.  */
    sprintf(fwdName, KWSYS_NAMESPACE_STRING ""pew9xfwd_%ld_%p.exe"",
            GetCurrentProcessId(), cp);

    /* If we have a temp directory, use it.  */
    if(length > 0 && length <= _MAX_PATH)
      {
      /* Allocate a buffer to hold the forwarding executable path.  */
      size_t tdlen = strlen(tempDir);
      win9x = (char*)malloc(tdlen + strlen(fwdName) + 2);
      if(!win9x)
        {
        kwsysProcess_Delete(cp);
        return 0;
        }

      /* Construct the full path to the forwarding executable.  */
      sprintf(win9x, ""%s%s"", tempDir, fwdName);
      }

    /* If we found a place to put the forwarding executable, try to
       write it. */
    if(win9x)
      {
      if(!kwsysEncodedWriteArrayProcessFwd9x(win9x))
        {
        /* Failed to create forwarding executable.  Give up.  */
        free(win9x);
        kwsysProcess_Delete(cp);
        return 0;
        }

      /* Get a handle to the file that will delete it when closed.  */
      cp->Win9xHandle = CreateFile(win9x, GENERIC_READ, FILE_SHARE_READ, 0,
                                   OPEN_EXISTING, FILE_FLAG_DELETE_ON_CLOSE, 0);
      if(cp->Win9xHandle == INVALID_HANDLE_VALUE)
        {
        /* We were not able to get a read handle for the forwarding
           executable.  It will not be deleted properly.  Give up.  */
        _unlink(win9x);
        free(win9x);
        kwsysProcess_Delete(cp);
        return 0;
        }
      }
    else
      {
      /* Failed to find a place to put forwarding executable.  */
      kwsysProcess_Delete(cp);
      return 0;
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_978.cpp,"[5, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 0, 66, 0, 0, 4, 4, 0, 0, 4, 15, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 5, 5, 1, 0, 16, 0, 0, 11, 0, 28, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_978.cpp,47,[],"[""member"", ""macro"", ""==""]"
95a9c80cacea50e2b5d52d67d0a7f5c9b50192dd,"Merge topic 'LINK_LIBRARIES-property' into rpath-use-implicit-link-dirs

Resolve a logical conflict in the signature of cmTarget::GetLinkClosure.",[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_425.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_425.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_425.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1149.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1149.cpp,365,335,395,-1,"sprintf(win9x, ""%s%s"", tempDir, fwdName);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_979.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_979.cpp,"{
      /* Allocate a buffer to hold the forwarding executable path.  */
      size_t tdlen = strlen(tempDir);
      win9x = (char*)malloc(tdlen + strlen(fwdName) + 2);
      if(!win9x)
        {
        kwsysProcess_Delete(cp);
        return 0;
        }

      /* Construct the full path to the forwarding executable.  */
      sprintf(win9x, ""%s%s"", tempDir, fwdName);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_979.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 1, 1, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_979.cpp,63,"[""malloc_ret"", ""string"", ""char *"", ""char *""]","[""malloc_ret"", ""!"", ""!""]"
95a9c80cacea50e2b5d52d67d0a7f5c9b50192dd,"Merge topic 'LINK_LIBRARIES-property' into rpath-use-implicit-link-dirs

Resolve a logical conflict in the signature of cmTarget::GetLinkClosure.",[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_425.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_425.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_425.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1150.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1150.cpp,1815,1653,1847,-1,"sprintf(realCommand, ""%s %p %p %p %d %s"", cp->Win9x,
            si->ErrorPipeWrite, cp->Win9xResumeEvent, cp->Win9xKillEvent,
            cp->HideWindow, cp->Commands[index]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_980.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_980.cpp,"{
    /* Create an error reporting pipe for the forwarding executable.
       Neither end is directly inherited.  */
    if(!CreatePipe(&si->ErrorPipeRead, &si->ErrorPipeWrite, 0, 0))
      {
      return 0;
      }

    /* Create an inherited duplicate of the write end.  This also closes
       the non-inherited version. */
    if(!DuplicateHandle(GetCurrentProcess(), si->ErrorPipeWrite,
                        GetCurrentProcess(), &si->ErrorPipeWrite,
                        0, TRUE, (DUPLICATE_CLOSE_SOURCE |
                                  DUPLICATE_SAME_ACCESS)))
      {
      return 0;
      }

    /* The forwarding executable is given a handle to the error pipe
       and resume and kill events.  */
    realCommand = (char*)malloc(strlen(cp->Win9x)+strlen(cp->Commands[index])+100);
    if(!realCommand)
      {
      return 0;
      }
    sprintf(realCommand, ""%s %p %p %p %d %s"", cp->Win9x,
            si->ErrorPipeWrite, cp->Win9xResumeEvent, cp->Win9xKillEvent,
            cp->HideWindow, cp->Commands[index]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_980.cpp,"[3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 0, 8, 0, 0, 2, 0, 22, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_980.cpp,161,"[""malloc_ret"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""malloc_ret"", ""!"", ""!""]"
7df291fb6e6971f60cc7b338bcaa81069ed11757,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/SystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_427.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_427.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_427.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1155.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1155.cpp,196,196,201,-1,"fprintf(stderr, ""No current working directory.\n"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_981.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_981.cpp,"{
    fprintf(stderr, ""No current working directory.\n"");
    abort();
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_981.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_981.cpp,5,"[""unkown"", ""constant""]","[""const char *"", ""!""]"
7df291fb6e6971f60cc7b338bcaa81069ed11757,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/SystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_427.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_427.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_427.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1156.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1156.cpp,245,243,250,-1,"fprintf(stderr, ""No current working directory\n"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_982.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_982.cpp,"{
    fprintf(stderr, ""No current working directory\n"");
    abort();
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_982.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_982.cpp,5,"[""unkown"", ""string""]","[""const char *"", ""!""]"
9d66f74335a09019644c7b82af0860da439fce87,"KWSys 2013-02-05 (5c34ed2e)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ 5c34ed2e | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' 5b0d1bd9..5c34ed2e
Brad King (1):
      5c34ed2e SystemTools: Do not abort with no current directory

Change-Id: Id054017eac2bf10c71ca721df48298cdff2bea82",[],SystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_428.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_428.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_428.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1157.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1157.cpp,196,196,201,-1,"fprintf(stderr, ""No current working directory.\n"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_983.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_983.cpp,"{
    fprintf(stderr, ""No current working directory.\n"");
    abort();
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_983.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_983.cpp,5,"[""unkown"", ""constant""]","[""const char *"", ""!""]"
9d66f74335a09019644c7b82af0860da439fce87,"KWSys 2013-02-05 (5c34ed2e)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ 5c34ed2e | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' 5b0d1bd9..5c34ed2e
Brad King (1):
      5c34ed2e SystemTools: Do not abort with no current directory

Change-Id: Id054017eac2bf10c71ca721df48298cdff2bea82",[],SystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_428.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_428.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_428.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1158.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1158.cpp,245,243,250,-1,"fprintf(stderr, ""No current working directory\n"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_984.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_984.cpp,"{
    fprintf(stderr, ""No current working directory\n"");
    abort();
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_984.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_984.cpp,5,"[""unkown"", ""string""]","[""const char *"", ""!""]"
118c32f8f211b0bb9a096fbb0711cacf2b68f057,Merge branch 'xcode-duplicate-flags-13354' into generator-toolset,[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_431.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_431.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_431.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1167.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1167.cpp,365,335,379,-1,"sprintf(fwdName, KWSYS_NAMESPACE_STRING ""pew9xfwd_%ld_%p.exe"",
            GetCurrentProcessId(), cp);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_985.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_985.cpp,"{
    /* This is Win9x.  We need the console forwarding executable to
       work-around a Windows 9x bug.  */
    char fwdName[_MAX_FNAME+1] = """";
    char tempDir[_MAX_PATH+1] = """";

    /* We will try putting the executable in the system temp
       directory.  Note that the returned path already has a trailing
       slash.  */
    DWORD length = GetTempPath(_MAX_PATH+1, tempDir);

    /* Construct the executable name from the process id and kwsysProcess
       instance.  This should be unique.  */
    sprintf(fwdName, KWSYS_NAMESPACE_STRING ""pew9xfwd_%ld_%p.exe"",
            GetCurrentProcessId(), cp);

    /* If we have a temp directory, use it.  */
    if(length > 0 && length <= _MAX_PATH)
      {
      /* Allocate a buffer to hold the forwarding executable path.  */
      size_t tdlen = strlen(tempDir);
      win9x = (char*)malloc(tdlen + strlen(fwdName) + 2);
      if(!win9x)
        {
        kwsysProcess_Delete(cp);
        return 0;
        }

      /* Construct the full path to the forwarding executable.  */
      sprintf(win9x, ""%s%s"", tempDir, fwdName);
      }

    /* If we found a place to put the forwarding executable, try to
       write it. */
    if(win9x)
      {
      if(!kwsysEncodedWriteArrayProcessFwd9x(win9x))
        {
        /* Failed to create forwarding executable.  Give up.  */
        free(win9x);
        kwsysProcess_Delete(cp);
        return 0;
        }

      /* Get a handle to the file that will delete it when closed.  */
      cp->Win9xHandle = CreateFile(win9x, GENERIC_READ, FILE_SHARE_READ, 0,
                                   OPEN_EXISTING, FILE_FLAG_DELETE_ON_CLOSE, 0);
      if(cp->Win9xHandle == INVALID_HANDLE_VALUE)
        {
        /* We were not able to get a read handle for the forwarding
           executable.  It will not be deleted properly.  Give up.  */
        _unlink(win9x);
        free(win9x);
        kwsysProcess_Delete(cp);
        return 0;
        }
      }
    else
      {
      /* Failed to find a place to put forwarding executable.  */
      kwsysProcess_Delete(cp);
      return 0;
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_985.cpp,"[5, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 0, 66, 0, 0, 4, 4, 0, 0, 4, 15, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 5, 5, 1, 0, 16, 0, 0, 11, 0, 28, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_985.cpp,47,[],"[""member"", ""macro"", ""==""]"
118c32f8f211b0bb9a096fbb0711cacf2b68f057,Merge branch 'xcode-duplicate-flags-13354' into generator-toolset,[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_431.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_431.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_431.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1167.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1167.cpp,365,335,395,-1,"sprintf(win9x, ""%s%s"", tempDir, fwdName);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_986.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_986.cpp,"{
      /* Allocate a buffer to hold the forwarding executable path.  */
      size_t tdlen = strlen(tempDir);
      win9x = (char*)malloc(tdlen + strlen(fwdName) + 2);
      if(!win9x)
        {
        kwsysProcess_Delete(cp);
        return 0;
        }

      /* Construct the full path to the forwarding executable.  */
      sprintf(win9x, ""%s%s"", tempDir, fwdName);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_986.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 1, 1, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_986.cpp,63,"[""malloc_ret"", ""string"", ""char *"", ""char *""]","[""malloc_ret"", ""!"", ""!""]"
118c32f8f211b0bb9a096fbb0711cacf2b68f057,Merge branch 'xcode-duplicate-flags-13354' into generator-toolset,[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_431.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_431.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_431.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1168.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1168.cpp,1815,1653,1847,-1,"sprintf(realCommand, ""%s %p %p %p %d %s"", cp->Win9x,
            si->ErrorPipeWrite, cp->Win9xResumeEvent, cp->Win9xKillEvent,
            cp->HideWindow, cp->Commands[index]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_987.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_987.cpp,"{
    /* Create an error reporting pipe for the forwarding executable.
       Neither end is directly inherited.  */
    if(!CreatePipe(&si->ErrorPipeRead, &si->ErrorPipeWrite, 0, 0))
      {
      return 0;
      }

    /* Create an inherited duplicate of the write end.  This also closes
       the non-inherited version. */
    if(!DuplicateHandle(GetCurrentProcess(), si->ErrorPipeWrite,
                        GetCurrentProcess(), &si->ErrorPipeWrite,
                        0, TRUE, (DUPLICATE_CLOSE_SOURCE |
                                  DUPLICATE_SAME_ACCESS)))
      {
      return 0;
      }

    /* The forwarding executable is given a handle to the error pipe
       and resume and kill events.  */
    realCommand = (char*)malloc(strlen(cp->Win9x)+strlen(cp->Commands[index])+100);
    if(!realCommand)
      {
      return 0;
      }
    sprintf(realCommand, ""%s %p %p %p %d %s"", cp->Win9x,
            si->ErrorPipeWrite, cp->Win9xResumeEvent, cp->Win9xKillEvent,
            cp->HideWindow, cp->Commands[index]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_987.cpp,"[3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 0, 8, 0, 0, 2, 0, 22, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_987.cpp,161,"[""malloc_ret"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""malloc_ret"", ""!"", ""!""]"
e33fa5b67880e47fb350d5545a5ba04b8d6f3eb3,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_432.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_432.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_432.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1169.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1169.cpp,365,335,379,-1,"sprintf(fwdName, KWSYS_NAMESPACE_STRING ""pew9xfwd_%ld_%p.exe"",
            GetCurrentProcessId(), cp);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_988.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_988.cpp,"{
    /* This is Win9x.  We need the console forwarding executable to
       work-around a Windows 9x bug.  */
    char fwdName[_MAX_FNAME+1] = """";
    char tempDir[_MAX_PATH+1] = """";

    /* We will try putting the executable in the system temp
       directory.  Note that the returned path already has a trailing
       slash.  */
    DWORD length = GetTempPath(_MAX_PATH+1, tempDir);

    /* Construct the executable name from the process id and kwsysProcess
       instance.  This should be unique.  */
    sprintf(fwdName, KWSYS_NAMESPACE_STRING ""pew9xfwd_%ld_%p.exe"",
            GetCurrentProcessId(), cp);

    /* If we have a temp directory, use it.  */
    if(length > 0 && length <= _MAX_PATH)
      {
      /* Allocate a buffer to hold the forwarding executable path.  */
      size_t tdlen = strlen(tempDir);
      win9x = (char*)malloc(tdlen + strlen(fwdName) + 2);
      if(!win9x)
        {
        kwsysProcess_Delete(cp);
        return 0;
        }

      /* Construct the full path to the forwarding executable.  */
      sprintf(win9x, ""%s%s"", tempDir, fwdName);
      }

    /* If we found a place to put the forwarding executable, try to
       write it. */
    if(win9x)
      {
      if(!kwsysEncodedWriteArrayProcessFwd9x(win9x))
        {
        /* Failed to create forwarding executable.  Give up.  */
        free(win9x);
        kwsysProcess_Delete(cp);
        return 0;
        }

      /* Get a handle to the file that will delete it when closed.  */
      cp->Win9xHandle = CreateFile(win9x, GENERIC_READ, FILE_SHARE_READ, 0,
                                   OPEN_EXISTING, FILE_FLAG_DELETE_ON_CLOSE, 0);
      if(cp->Win9xHandle == INVALID_HANDLE_VALUE)
        {
        /* We were not able to get a read handle for the forwarding
           executable.  It will not be deleted properly.  Give up.  */
        _unlink(win9x);
        free(win9x);
        kwsysProcess_Delete(cp);
        return 0;
        }
      }
    else
      {
      /* Failed to find a place to put forwarding executable.  */
      kwsysProcess_Delete(cp);
      return 0;
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_988.cpp,"[5, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 0, 66, 0, 0, 4, 4, 0, 0, 4, 15, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 5, 5, 1, 0, 16, 0, 0, 11, 0, 28, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_988.cpp,47,[],"[""member"", ""macro"", ""==""]"
e33fa5b67880e47fb350d5545a5ba04b8d6f3eb3,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_432.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_432.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_432.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1169.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1169.cpp,365,335,395,-1,"sprintf(win9x, ""%s%s"", tempDir, fwdName);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_989.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_989.cpp,"{
      /* Allocate a buffer to hold the forwarding executable path.  */
      size_t tdlen = strlen(tempDir);
      win9x = (char*)malloc(tdlen + strlen(fwdName) + 2);
      if(!win9x)
        {
        kwsysProcess_Delete(cp);
        return 0;
        }

      /* Construct the full path to the forwarding executable.  */
      sprintf(win9x, ""%s%s"", tempDir, fwdName);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_989.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 1, 1, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_989.cpp,63,"[""malloc_ret"", ""string"", ""char *"", ""char *""]","[""malloc_ret"", ""!"", ""!""]"
e33fa5b67880e47fb350d5545a5ba04b8d6f3eb3,Merge branch 'upstream-kwsys' into update-kwsys,[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_432.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_432.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_432.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1170.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1170.cpp,1815,1653,1847,-1,"sprintf(realCommand, ""%s %p %p %p %d %s"", cp->Win9x,
            si->ErrorPipeWrite, cp->Win9xResumeEvent, cp->Win9xKillEvent,
            cp->HideWindow, cp->Commands[index]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_990.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_990.cpp,"{
    /* Create an error reporting pipe for the forwarding executable.
       Neither end is directly inherited.  */
    if(!CreatePipe(&si->ErrorPipeRead, &si->ErrorPipeWrite, 0, 0))
      {
      return 0;
      }

    /* Create an inherited duplicate of the write end.  This also closes
       the non-inherited version. */
    if(!DuplicateHandle(GetCurrentProcess(), si->ErrorPipeWrite,
                        GetCurrentProcess(), &si->ErrorPipeWrite,
                        0, TRUE, (DUPLICATE_CLOSE_SOURCE |
                                  DUPLICATE_SAME_ACCESS)))
      {
      return 0;
      }

    /* The forwarding executable is given a handle to the error pipe
       and resume and kill events.  */
    realCommand = (char*)malloc(strlen(cp->Win9x)+strlen(cp->Commands[index])+100);
    if(!realCommand)
      {
      return 0;
      }
    sprintf(realCommand, ""%s %p %p %p %d %s"", cp->Win9x,
            si->ErrorPipeWrite, cp->Win9xResumeEvent, cp->Win9xKillEvent,
            cp->HideWindow, cp->Commands[index]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_990.cpp,"[3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 0, 8, 0, 0, 2, 0, 22, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_990.cpp,161,"[""malloc_ret"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""malloc_ret"", ""!"", ""!""]"
a0f91f1daa7765066a784e4479da7e231374a065,"KWSys 2012-12-19 (933eb822)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ 933eb822 | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' 3b17de34..933eb822
Brad King (2):
      fea37696 Process: Remove support for Windows 98
      01e15c22 Remove KWSys Registry

Rolf Eike Beer (7):
      f376ec32 SystemInformation: fix typos
      bfee5174 SystemInformation: sum up all caches found in /proc/cpuinfo
      5690d711 SystemInformation: fix value extraction from /proc/cpuinfo
      36295981 SystemInformation: PA-RISC chips are from HP
      72e9d02e SystemInformation: try harder to find a useful processor name
      b39de34c SystemInformation: try harder to find the CPU family
      933eb822 SystemInformation: extract CPU stepping information from /proc/cpuinfo, too

Sean McBride (2):
      5e17bfde Process: Dereference NULL++ instead of NULL to force crash
      86a78cb7 SystemTools: Add check for empty strings to prevent integer underflow

Change-Id: Id7194f434fe67be81e6ee9e96d705010a1171a06",[],ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_433.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_433.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_433.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1171.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1171.cpp,365,335,379,-1,"sprintf(fwdName, KWSYS_NAMESPACE_STRING ""pew9xfwd_%ld_%p.exe"",
            GetCurrentProcessId(), cp);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_991.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_991.cpp,"{
    /* This is Win9x.  We need the console forwarding executable to
       work-around a Windows 9x bug.  */
    char fwdName[_MAX_FNAME+1] = """";
    char tempDir[_MAX_PATH+1] = """";

    /* We will try putting the executable in the system temp
       directory.  Note that the returned path already has a trailing
       slash.  */
    DWORD length = GetTempPath(_MAX_PATH+1, tempDir);

    /* Construct the executable name from the process id and kwsysProcess
       instance.  This should be unique.  */
    sprintf(fwdName, KWSYS_NAMESPACE_STRING ""pew9xfwd_%ld_%p.exe"",
            GetCurrentProcessId(), cp);

    /* If we have a temp directory, use it.  */
    if(length > 0 && length <= _MAX_PATH)
      {
      /* Allocate a buffer to hold the forwarding executable path.  */
      size_t tdlen = strlen(tempDir);
      win9x = (char*)malloc(tdlen + strlen(fwdName) + 2);
      if(!win9x)
        {
        kwsysProcess_Delete(cp);
        return 0;
        }

      /* Construct the full path to the forwarding executable.  */
      sprintf(win9x, ""%s%s"", tempDir, fwdName);
      }

    /* If we found a place to put the forwarding executable, try to
       write it. */
    if(win9x)
      {
      if(!kwsysEncodedWriteArrayProcessFwd9x(win9x))
        {
        /* Failed to create forwarding executable.  Give up.  */
        free(win9x);
        kwsysProcess_Delete(cp);
        return 0;
        }

      /* Get a handle to the file that will delete it when closed.  */
      cp->Win9xHandle = CreateFile(win9x, GENERIC_READ, FILE_SHARE_READ, 0,
                                   OPEN_EXISTING, FILE_FLAG_DELETE_ON_CLOSE, 0);
      if(cp->Win9xHandle == INVALID_HANDLE_VALUE)
        {
        /* We were not able to get a read handle for the forwarding
           executable.  It will not be deleted properly.  Give up.  */
        _unlink(win9x);
        free(win9x);
        kwsysProcess_Delete(cp);
        return 0;
        }
      }
    else
      {
      /* Failed to find a place to put forwarding executable.  */
      kwsysProcess_Delete(cp);
      return 0;
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_991.cpp,"[5, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 0, 66, 0, 0, 4, 4, 0, 0, 4, 15, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 5, 5, 1, 0, 16, 0, 0, 11, 0, 28, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_991.cpp,47,[],"[""member"", ""macro"", ""==""]"
a0f91f1daa7765066a784e4479da7e231374a065,"KWSys 2012-12-19 (933eb822)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ 933eb822 | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' 3b17de34..933eb822
Brad King (2):
      fea37696 Process: Remove support for Windows 98
      01e15c22 Remove KWSys Registry

Rolf Eike Beer (7):
      f376ec32 SystemInformation: fix typos
      bfee5174 SystemInformation: sum up all caches found in /proc/cpuinfo
      5690d711 SystemInformation: fix value extraction from /proc/cpuinfo
      36295981 SystemInformation: PA-RISC chips are from HP
      72e9d02e SystemInformation: try harder to find a useful processor name
      b39de34c SystemInformation: try harder to find the CPU family
      933eb822 SystemInformation: extract CPU stepping information from /proc/cpuinfo, too

Sean McBride (2):
      5e17bfde Process: Dereference NULL++ instead of NULL to force crash
      86a78cb7 SystemTools: Add check for empty strings to prevent integer underflow

Change-Id: Id7194f434fe67be81e6ee9e96d705010a1171a06",[],ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_433.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_433.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_433.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1171.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1171.cpp,365,335,395,-1,"sprintf(win9x, ""%s%s"", tempDir, fwdName);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_992.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_992.cpp,"{
      /* Allocate a buffer to hold the forwarding executable path.  */
      size_t tdlen = strlen(tempDir);
      win9x = (char*)malloc(tdlen + strlen(fwdName) + 2);
      if(!win9x)
        {
        kwsysProcess_Delete(cp);
        return 0;
        }

      /* Construct the full path to the forwarding executable.  */
      sprintf(win9x, ""%s%s"", tempDir, fwdName);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_992.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 1, 1, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_992.cpp,63,"[""malloc_ret"", ""string"", ""char *"", ""char *""]","[""malloc_ret"", ""!"", ""!""]"
a0f91f1daa7765066a784e4479da7e231374a065,"KWSys 2012-12-19 (933eb822)

Extract upstream KWSys using the following shell commands.

$ git archive --prefix=upstream-kwsys/ 933eb822 | tar x
$ git shortlog --no-merges --abbrev=8 --format='%h %s' 3b17de34..933eb822
Brad King (2):
      fea37696 Process: Remove support for Windows 98
      01e15c22 Remove KWSys Registry

Rolf Eike Beer (7):
      f376ec32 SystemInformation: fix typos
      bfee5174 SystemInformation: sum up all caches found in /proc/cpuinfo
      5690d711 SystemInformation: fix value extraction from /proc/cpuinfo
      36295981 SystemInformation: PA-RISC chips are from HP
      72e9d02e SystemInformation: try harder to find a useful processor name
      b39de34c SystemInformation: try harder to find the CPU family
      933eb822 SystemInformation: extract CPU stepping information from /proc/cpuinfo, too

Sean McBride (2):
      5e17bfde Process: Dereference NULL++ instead of NULL to force crash
      86a78cb7 SystemTools: Add check for empty strings to prevent integer underflow

Change-Id: Id7194f434fe67be81e6ee9e96d705010a1171a06",[],ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_433.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_433.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_433.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1172.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1172.cpp,1815,1653,1847,-1,"sprintf(realCommand, ""%s %p %p %p %d %s"", cp->Win9x,
            si->ErrorPipeWrite, cp->Win9xResumeEvent, cp->Win9xKillEvent,
            cp->HideWindow, cp->Commands[index]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_993.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_993.cpp,"{
    /* Create an error reporting pipe for the forwarding executable.
       Neither end is directly inherited.  */
    if(!CreatePipe(&si->ErrorPipeRead, &si->ErrorPipeWrite, 0, 0))
      {
      return 0;
      }

    /* Create an inherited duplicate of the write end.  This also closes
       the non-inherited version. */
    if(!DuplicateHandle(GetCurrentProcess(), si->ErrorPipeWrite,
                        GetCurrentProcess(), &si->ErrorPipeWrite,
                        0, TRUE, (DUPLICATE_CLOSE_SOURCE |
                                  DUPLICATE_SAME_ACCESS)))
      {
      return 0;
      }

    /* The forwarding executable is given a handle to the error pipe
       and resume and kill events.  */
    realCommand = (char*)malloc(strlen(cp->Win9x)+strlen(cp->Commands[index])+100);
    if(!realCommand)
      {
      return 0;
      }
    sprintf(realCommand, ""%s %p %p %p %d %s"", cp->Win9x,
            si->ErrorPipeWrite, cp->Win9xResumeEvent, cp->Win9xKillEvent,
            cp->HideWindow, cp->Commands[index]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_993.cpp,"[3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 0, 8, 0, 0, 2, 0, 22, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_993.cpp,161,"[""malloc_ret"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""malloc_ret"", ""!"", ""!""]"
5f12424ebc9f810ef279d09f1e660e20558dd535,"Remove process execution code from cmcldeps and have it use cmake code.

This simplifies the code in cmcldeps and avoids having yet another
set of process execution code.",[],Source/cmcldeps.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_439.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_439.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_439.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1178.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1178.cpp,132,35,221,-1,"snprintf(pipe_name, sizeof(pipe_name),
           ""\\\\.\\pipe\\ninja_pid%u_sp%p"", GetCurrentProcessId(), this);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_994.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_994.cpp,"{
  char pipe_name[100];
  snprintf(pipe_name, sizeof(pipe_name),
           ""\\\\.\\pipe\\ninja_pid%u_sp%p"", GetCurrentProcessId(), this);

  pipe_ = ::CreateNamedPipeA(pipe_name,
                             PIPE_ACCESS_INBOUND | FILE_FLAG_OVERLAPPED,
                             PIPE_TYPE_BYTE,
                             PIPE_UNLIMITED_INSTANCES,
                             0, 0, INFINITE, NULL);
  if (pipe_ == INVALID_HANDLE_VALUE)
    Win32Fatal(""CreateNamedPipe"");

  if (!CreateIoCompletionPort(pipe_, ioport, (cmULONG_PTR)this, 0))
    Win32Fatal(""CreateIoCompletionPort"");

  memset(&overlapped_, 0, sizeof(overlapped_));
  if (!ConnectNamedPipe(pipe_, &overlapped_) &&
      GetLastError() != ERROR_IO_PENDING) {
    Win32Fatal(""ConnectNamedPipe"");
  }

  // Get the write end of the pipe as a handle inheritable across processes.
  HANDLE output_write_handle = CreateFile(pipe_name, GENERIC_WRITE, 0,
                                          NULL, OPEN_EXISTING, 0, NULL);
  HANDLE output_write_child;
  if (!DuplicateHandle(GetCurrentProcess(), output_write_handle,
                       GetCurrentProcess(), &output_write_child,
                       0, TRUE, DUPLICATE_SAME_ACCESS)) {
    Win32Fatal(""DuplicateHandle"");
  }
  CloseHandle(output_write_handle);

  return output_write_child;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_994.cpp,"[4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 57, 0, 0, 3, 3, 0, 0, 1, 13, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 58, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 4, 4, 0, 0, 18, 0, 0, 8, 0, 43, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_994.cpp,2,"[""char *"", ""unkown"", ""constant"", ""GetCurrentProcessId_ret"", ""unkown""]",[]
1a38a5d65fa33f8ff06104b23f9bd38110387ddc,Ninja: allow spaces in cldeps's .d file,[],Source/cmcldeps.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_447.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_447.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_447.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1190.cpp,560,560,562,564,"fprintf(out, ""%s: \\\n"", objfile.c_str());","fprintf(out, ""%s: \\\n"", tmp.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_995.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_995.cpp,"{

  // strip duplicates
  sort(incs.begin(), incs.end());
  incs.erase(unique(incs.begin(), incs.end()), incs.end());

  FILE* out = fopen(dfile.c_str(), ""wb"");

  // FIXME should this be fatal or not? delete obj? delete d?
  if (!out)
    return;

  fprintf(out, ""%s: \\\n"", objfile.c_str());
  for (vector<string>::iterator i(incs.begin()); i != incs.end(); ++i) {
    string tmp = *i;
    doEscape(tmp, ""\\"", ""\\\\"");
    doEscape(tmp, "" "", ""\\ "");
    //doEscape(tmp, ""("", ""(""); // TODO ninja cant read ( and )
    //doEscape(tmp, "")"", "")"");
    fprintf(out, ""%s \\\n"", tmp.c_str());
  }

  fprintf(out, ""\n"");
  fclose(out);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_995.cpp,"[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 62, 0, 0, 2, 3, 0, 0, 3, 8, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 0, 0, 22, 0, 0, 8, 0, 25, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_995.cpp,13,"[""FILE *"", ""string"", ""objfile . c_str_ret""]","[""FILE *"", ""!"", ""!""]"
156cb3bbf257f747672eac945fa2e19d33fc3a63,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive_windows.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_450.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_450.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_450.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1195.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1195.cpp,2686,2629,2703,-1,"archive_set_error(&a->archive, ENOMEM,
		    ""No memory for 7-Zip decompression"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_996.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_996.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""No memory for 7-Zip decompression"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_996.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_996.cpp,48,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
156cb3bbf257f747672eac945fa2e19d33fc3a63,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive_windows.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_450.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_450.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_450.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1195.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1195.cpp,2686,2629,2735,2658,"archive_set_error(&a->archive, -1,
				    ""Malformed 7-Zip archive file"");",zip->header_bytes_remaining -= bytes;,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_997.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_997.cpp,"{
				archive_set_error(&a->archive, -1,
				    ""Malformed 7-Zip archive file"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_997.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_997.cpp,80,"[""member"", ""int"", ""string""]","[""const void * *"", ""member"", ""!="", ""!""]"
156cb3bbf257f747672eac945fa2e19d33fc3a63,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive_windows.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_450.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_450.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_450.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1195.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1195.cpp,2686,2629,2756,-1,"archive_set_error(&a->archive, -1, ""Header CRC error"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_998.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_998.cpp,"{
			archive_set_error(&a->archive, -1, ""Header CRC error"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_998.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_998.cpp,101,"[""member"", ""int"", ""string""]","[""uint32_t"", ""member"", ""!=""]"
156cb3bbf257f747672eac945fa2e19d33fc3a63,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive_windows.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_450.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_450.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_450.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1196.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1196.cpp,2810,2712,2827,2731,,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated 7-Zip file body"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_999.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_999.cpp,"(p[0]) {
	case kEncodedHeader:
		p++;
		len--;

		/*
		 * The archive has an encoded header and we have to decode it
		 * in order to parse the header correctly.
		 */
		image_bytes =
		    decode_header_image(a, zip, &(zip->si), p, len, &image);
		free_StreamsInfo(&(zip->si));
		memset(&(zip->si), 0, sizeof(zip->si));
		if (image_bytes < 0)
			return (ARCHIVE_FATAL);
		p = image;
		len = image_bytes;
		/* FALL THROUGH */
	case kHeader:
		/*
		 * Parse the header.
		 */
		errno = 0;
		r = read_Header(zip, header, p, len);
		if (r < 0) {
			if (errno == ENOMEM)
				archive_set_error(&a->archive, -1,
				    ""Couldn't allocate memory"");
			else
				archive_set_error(&a->archive, -1,
				    ""Damaged 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}
		if (len - r == 0 || p[r] != kEnd) {
			archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}
		break;
	default:
		archive_set_error(&a->archive, -1,
		    ""Unexpected Property ID = %X"", p[0]);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_999.cpp,"[4, 0, 0, 0, 1, 0, 4, 0, 2, 1, 6, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 54, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 4, 1, 0, 9, 0, 0, 8, 0, 28, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_999.cpp,64,[],"[""crc32_ret"", ""archive_le32dec_ret"", ""!="", ""!""]"
156cb3bbf257f747672eac945fa2e19d33fc3a63,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive_windows.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_450.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_450.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_450.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1197.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1197.cpp,2858,2786,2860,2800,,"archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1000.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1000.cpp,"(len - r == 0 || p[r] != kEnd) {
			archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1000.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1000.cpp,97,[],"[""read_Header_ret"", ""null"", ""<"", ""!""]"
156cb3bbf257f747672eac945fa2e19d33fc3a63,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive_windows.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_450.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_450.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_450.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1199.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1199.cpp,2961,2908,2962,2947,,"archive_set_error(&a->archive, ENOMEM,
				    ""No memory for 7-Zip decompression"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1001.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1001.cpp,"(zip->uncompressed_buffer == NULL) {
		zip->uncompressed_buffer_size = 64 * 1024;
		zip->uncompressed_buffer =
		    malloc(zip->uncompressed_buffer_size);
		if (zip->uncompressed_buffer == NULL) {
			archive_set_error(&a->archive, ENOMEM,
			    ""No memory for 7-Zip decompression"");
			return (ARCHIVE_FATAL);
		}
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1001.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1001.cpp,26,[],"[""member"", ""macro"", ""=="", ""member"", ""int"", ""=="", ""&&"", ""!""]"
156cb3bbf257f747672eac945fa2e19d33fc3a63,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive_windows.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_450.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_450.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_450.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1200.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1200.cpp,3035,3028,3037,3031,,"archive_set_error(&(a->archive),
		    ARCHIVE_ERRNO_MISC, ""Damaged 7-Zip archive"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1002.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1002.cpp,"{
	struct _7zip *zip = (struct _7zip *)a->format->data;
	ssize_t bytes_avail;
	int r;

	if (zip->codec == _7Z_COPY && zip->codec2 == -1) {
		if (__archive_read_ahead(a, 1, &bytes_avail) == NULL
		    || bytes_avail <= 0) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated 7-Zip file body"");
			return (ARCHIVE_FATAL);
		}
		if (bytes_avail > zip->pack_stream_inbytes_remaining)
			bytes_avail = zip->pack_stream_inbytes_remaining;
		zip->pack_stream_inbytes_remaining -= bytes_avail;
		if (bytes_avail > zip->folder_outbytes_remaining)
			bytes_avail = zip->folder_outbytes_remaining;
		zip->folder_outbytes_remaining -= bytes_avail;
		zip->uncompressed_buffer_bytes_remaining = bytes_avail;
		return (ARCHIVE_OK);
	}

	/* If the buffer hasn't been allocated, allocate it now. */
	if (zip->uncompressed_buffer == NULL) {
		zip->uncompressed_buffer_size = 64 * 1024;
		zip->uncompressed_buffer =
		    malloc(zip->uncompressed_buffer_size);
		if (zip->uncompressed_buffer == NULL) {
			archive_set_error(&a->archive, ENOMEM,
			    ""No memory for 7-Zip decompression"");
			return (ARCHIVE_FATAL);
		}
	}
	zip->uncompressed_buffer_bytes_remaining = 0;
	zip->uncompressed_buffer_pointer = NULL;
	for (;;) {
		size_t bytes_in, bytes_out;
		const void *buff_in;
		unsigned char *buff_out;
		int eof;

		/*
		 * Note: '1' here is a performance optimization.
		 * Recall that the decompression layer returns a count of
		 * available bytes; asking for more than that forces the
		 * decompressor to combine reads by copying data.
		 */
		buff_in = __archive_read_ahead(a, 1, &bytes_avail);
		if (bytes_avail <= 0) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated 7-Zip file body"");
			return (ARCHIVE_FATAL);
		}

		buff_out = zip->uncompressed_buffer
			+ zip->uncompressed_buffer_bytes_remaining;
		bytes_out = zip->uncompressed_buffer_size
			- zip->uncompressed_buffer_bytes_remaining;
		bytes_in = bytes_avail;
		if (bytes_in > zip->pack_stream_inbytes_remaining)
			bytes_in = zip->pack_stream_inbytes_remaining;
		/* Drive decompression. */
		r = decompress(a, zip, buff_out, &bytes_out,
			buff_in, &bytes_in);
		switch (r) {
		case ARCHIVE_OK:
			eof = 0;
			break;
		case ARCHIVE_EOF:
			eof = 1;
			break;
		default:
			return (ARCHIVE_FATAL);
		}
		zip->pack_stream_inbytes_remaining -= bytes_in;
		if (bytes_out > zip->folder_outbytes_remaining)
			bytes_out = zip->folder_outbytes_remaining;
		zip->folder_outbytes_remaining -= bytes_out;
		zip->uncompressed_buffer_bytes_remaining += bytes_out;
		zip->pack_stream_bytes_unconsumed = bytes_in;

		/*
		 * Continue decompression until uncompressed_buffer is full.
		 */
		if (zip->uncompressed_buffer_bytes_remaining ==
		    zip->uncompressed_buffer_size)
			break;
		if (zip->pack_stream_inbytes_remaining == 0 &&
		    zip->folder_outbytes_remaining == 0)
			break;
		if (eof || (bytes_in == 0 && bytes_out == 0)) {
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC, ""Damaged 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}
		read_consume(a);
	}
	zip->uncompressed_buffer_pointer = zip->uncompressed_buffer;
	return (ARCHIVE_OK);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1002.cpp,"[12, 0, 1, 0, 4, 0, 7, 1, 2, 1, 15, 0, 0, 0, 1, 204, 0, 0, 7, 8, 0, 0, 2, 18, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 14, 12, 0, 0, 9, 0, 0, 28, 0, 26, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1002.cpp,101,[],"[""member"", ""member"", ""==""]"
156cb3bbf257f747672eac945fa2e19d33fc3a63,"Merge branch 'libarchive-upstream' into update-libarchive

Conflicts:
	Utilities/cmlibarchive/CMakeLists.txt
	Utilities/cmlibarchive/libarchive/archive_windows.c",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_450.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_450.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_450.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1201.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1201.cpp,3065,3063,3074,3095,,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC, ""Malformed 7-Zip archive"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1003.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1003.cpp,"(zip->pack_stream_inbytes_remaining > 0) {
			r = extract_pack_stream(a);
			if (r < 0)
				return (r);
			return (get_uncompressed_data(a, buff, size));
		} else if (zip->folder_outbytes_remaining > 0) {
			/* Extract a remaining pack stream. */
			r = extract_pack_stream(a);
			if (r < 0)
				return (r);
			return (get_uncompressed_data(a, buff, size));
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1003.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 4, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1003.cpp,8,[],"[""member"", ""null"", ""==""]"
4f4fe6e50bb3dbe59f9bc3cc848cbd07dead324d,"libarchive 3.0.2-r4051 (reduced)

Extract upstream libarchive using the following shell code.

url=https://libarchive.googlecode.com/svn/release/3.0
v=3.0.2
r=4051
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
""
date=$(svn log -q -c$r $url |
       sed -n ""/^r/ {s/[^|]*|[^|]*|//;p;}"")
svn export -r$r $url libarchive-$v-r$r &&
mkdir libarchive-$v-r$r-reduced &&
(cd libarchive-$v-r$r && tar c $paths) |
(cd libarchive-$v-r$r-reduced && tar x)
echo ""r$r date: $date""",[],libarchive/archive_read_support_format_7zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_454.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_454.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_454.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1210.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1210.cpp,2686,2629,2703,-1,"archive_set_error(&a->archive, ENOMEM,
		    ""No memory for 7-Zip decompression"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1004.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1004.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""No memory for 7-Zip decompression"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1004.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1004.cpp,48,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
4f4fe6e50bb3dbe59f9bc3cc848cbd07dead324d,"libarchive 3.0.2-r4051 (reduced)

Extract upstream libarchive using the following shell code.

url=https://libarchive.googlecode.com/svn/release/3.0
v=3.0.2
r=4051
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
""
date=$(svn log -q -c$r $url |
       sed -n ""/^r/ {s/[^|]*|[^|]*|//;p;}"")
svn export -r$r $url libarchive-$v-r$r &&
mkdir libarchive-$v-r$r-reduced &&
(cd libarchive-$v-r$r && tar c $paths) |
(cd libarchive-$v-r$r-reduced && tar x)
echo ""r$r date: $date""",[],libarchive/archive_read_support_format_7zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_454.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_454.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_454.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1210.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1210.cpp,2686,2629,2735,2658,"archive_set_error(&a->archive, -1,
				    ""Malformed 7-Zip archive file"");",zip->header_bytes_remaining -= bytes;,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1005.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1005.cpp,"{
				archive_set_error(&a->archive, -1,
				    ""Malformed 7-Zip archive file"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1005.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1005.cpp,80,"[""member"", ""int"", ""string""]","[""const void * *"", ""member"", ""!="", ""!""]"
4f4fe6e50bb3dbe59f9bc3cc848cbd07dead324d,"libarchive 3.0.2-r4051 (reduced)

Extract upstream libarchive using the following shell code.

url=https://libarchive.googlecode.com/svn/release/3.0
v=3.0.2
r=4051
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
""
date=$(svn log -q -c$r $url |
       sed -n ""/^r/ {s/[^|]*|[^|]*|//;p;}"")
svn export -r$r $url libarchive-$v-r$r &&
mkdir libarchive-$v-r$r-reduced &&
(cd libarchive-$v-r$r && tar c $paths) |
(cd libarchive-$v-r$r-reduced && tar x)
echo ""r$r date: $date""",[],libarchive/archive_read_support_format_7zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_454.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_454.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_454.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1210.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1210.cpp,2686,2629,2756,-1,"archive_set_error(&a->archive, -1, ""Header CRC error"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1006.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1006.cpp,"{
			archive_set_error(&a->archive, -1, ""Header CRC error"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1006.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1006.cpp,101,"[""member"", ""int"", ""string""]","[""uint32_t"", ""member"", ""!=""]"
4f4fe6e50bb3dbe59f9bc3cc848cbd07dead324d,"libarchive 3.0.2-r4051 (reduced)

Extract upstream libarchive using the following shell code.

url=https://libarchive.googlecode.com/svn/release/3.0
v=3.0.2
r=4051
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
""
date=$(svn log -q -c$r $url |
       sed -n ""/^r/ {s/[^|]*|[^|]*|//;p;}"")
svn export -r$r $url libarchive-$v-r$r &&
mkdir libarchive-$v-r$r-reduced &&
(cd libarchive-$v-r$r && tar c $paths) |
(cd libarchive-$v-r$r-reduced && tar x)
echo ""r$r date: $date""",[],libarchive/archive_read_support_format_7zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_454.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_454.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_454.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1211.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1211.cpp,2810,2712,2827,2731,,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated 7-Zip file body"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1007.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1007.cpp,"(p[0]) {
	case kEncodedHeader:
		p++;
		len--;

		/*
		 * The archive has an encoded header and we have to decode it
		 * in order to parse the header correctly.
		 */
		image_bytes =
		    decode_header_image(a, zip, &(zip->si), p, len, &image);
		free_StreamsInfo(&(zip->si));
		memset(&(zip->si), 0, sizeof(zip->si));
		if (image_bytes < 0)
			return (ARCHIVE_FATAL);
		p = image;
		len = image_bytes;
		/* FALL THROUGH */
	case kHeader:
		/*
		 * Parse the header.
		 */
		errno = 0;
		r = read_Header(zip, header, p, len);
		if (r < 0) {
			if (errno == ENOMEM)
				archive_set_error(&a->archive, -1,
				    ""Couldn't allocate memory"");
			else
				archive_set_error(&a->archive, -1,
				    ""Damaged 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}
		if (len - r == 0 || p[r] != kEnd) {
			archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}
		break;
	default:
		archive_set_error(&a->archive, -1,
		    ""Unexpected Property ID = %X"", p[0]);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1007.cpp,"[4, 0, 0, 0, 1, 0, 4, 0, 2, 1, 6, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 54, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 4, 1, 0, 9, 0, 0, 8, 0, 28, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1007.cpp,64,[],"[""crc32_ret"", ""archive_le32dec_ret"", ""!="", ""!""]"
4f4fe6e50bb3dbe59f9bc3cc848cbd07dead324d,"libarchive 3.0.2-r4051 (reduced)

Extract upstream libarchive using the following shell code.

url=https://libarchive.googlecode.com/svn/release/3.0
v=3.0.2
r=4051
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
""
date=$(svn log -q -c$r $url |
       sed -n ""/^r/ {s/[^|]*|[^|]*|//;p;}"")
svn export -r$r $url libarchive-$v-r$r &&
mkdir libarchive-$v-r$r-reduced &&
(cd libarchive-$v-r$r && tar c $paths) |
(cd libarchive-$v-r$r-reduced && tar x)
echo ""r$r date: $date""",[],libarchive/archive_read_support_format_7zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_454.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_454.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_454.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1212.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1212.cpp,2858,2786,2860,2800,,"archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1008.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1008.cpp,"(len - r == 0 || p[r] != kEnd) {
			archive_set_error(&a->archive, -1,
			    ""Malformed 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1008.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1008.cpp,97,[],"[""read_Header_ret"", ""null"", ""<"", ""!""]"
4f4fe6e50bb3dbe59f9bc3cc848cbd07dead324d,"libarchive 3.0.2-r4051 (reduced)

Extract upstream libarchive using the following shell code.

url=https://libarchive.googlecode.com/svn/release/3.0
v=3.0.2
r=4051
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
""
date=$(svn log -q -c$r $url |
       sed -n ""/^r/ {s/[^|]*|[^|]*|//;p;}"")
svn export -r$r $url libarchive-$v-r$r &&
mkdir libarchive-$v-r$r-reduced &&
(cd libarchive-$v-r$r && tar c $paths) |
(cd libarchive-$v-r$r-reduced && tar x)
echo ""r$r date: $date""",[],libarchive/archive_read_support_format_7zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_454.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_454.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_454.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1214.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1214.cpp,2961,2908,2962,2947,,"archive_set_error(&a->archive, ENOMEM,
				    ""No memory for 7-Zip decompression"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1009.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1009.cpp,"(zip->uncompressed_buffer == NULL) {
		zip->uncompressed_buffer_size = 64 * 1024;
		zip->uncompressed_buffer =
		    malloc(zip->uncompressed_buffer_size);
		if (zip->uncompressed_buffer == NULL) {
			archive_set_error(&a->archive, ENOMEM,
			    ""No memory for 7-Zip decompression"");
			return (ARCHIVE_FATAL);
		}
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1009.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1009.cpp,26,[],"[""member"", ""macro"", ""=="", ""member"", ""int"", ""=="", ""&&"", ""!""]"
4f4fe6e50bb3dbe59f9bc3cc848cbd07dead324d,"libarchive 3.0.2-r4051 (reduced)

Extract upstream libarchive using the following shell code.

url=https://libarchive.googlecode.com/svn/release/3.0
v=3.0.2
r=4051
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
""
date=$(svn log -q -c$r $url |
       sed -n ""/^r/ {s/[^|]*|[^|]*|//;p;}"")
svn export -r$r $url libarchive-$v-r$r &&
mkdir libarchive-$v-r$r-reduced &&
(cd libarchive-$v-r$r && tar c $paths) |
(cd libarchive-$v-r$r-reduced && tar x)
echo ""r$r date: $date""",[],libarchive/archive_read_support_format_7zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_454.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_454.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_454.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1215.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1215.cpp,3035,3028,3037,3031,,"archive_set_error(&(a->archive),
		    ARCHIVE_ERRNO_MISC, ""Damaged 7-Zip archive"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1010.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1010.cpp,"{
	struct _7zip *zip = (struct _7zip *)a->format->data;
	ssize_t bytes_avail;
	int r;

	if (zip->codec == _7Z_COPY && zip->codec2 == -1) {
		if (__archive_read_ahead(a, 1, &bytes_avail) == NULL
		    || bytes_avail <= 0) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated 7-Zip file body"");
			return (ARCHIVE_FATAL);
		}
		if (bytes_avail > zip->pack_stream_inbytes_remaining)
			bytes_avail = zip->pack_stream_inbytes_remaining;
		zip->pack_stream_inbytes_remaining -= bytes_avail;
		if (bytes_avail > zip->folder_outbytes_remaining)
			bytes_avail = zip->folder_outbytes_remaining;
		zip->folder_outbytes_remaining -= bytes_avail;
		zip->uncompressed_buffer_bytes_remaining = bytes_avail;
		return (ARCHIVE_OK);
	}

	/* If the buffer hasn't been allocated, allocate it now. */
	if (zip->uncompressed_buffer == NULL) {
		zip->uncompressed_buffer_size = 64 * 1024;
		zip->uncompressed_buffer =
		    malloc(zip->uncompressed_buffer_size);
		if (zip->uncompressed_buffer == NULL) {
			archive_set_error(&a->archive, ENOMEM,
			    ""No memory for 7-Zip decompression"");
			return (ARCHIVE_FATAL);
		}
	}
	zip->uncompressed_buffer_bytes_remaining = 0;
	zip->uncompressed_buffer_pointer = NULL;
	for (;;) {
		size_t bytes_in, bytes_out;
		const void *buff_in;
		unsigned char *buff_out;
		int eof;

		/*
		 * Note: '1' here is a performance optimization.
		 * Recall that the decompression layer returns a count of
		 * available bytes; asking for more than that forces the
		 * decompressor to combine reads by copying data.
		 */
		buff_in = __archive_read_ahead(a, 1, &bytes_avail);
		if (bytes_avail <= 0) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated 7-Zip file body"");
			return (ARCHIVE_FATAL);
		}

		buff_out = zip->uncompressed_buffer
			+ zip->uncompressed_buffer_bytes_remaining;
		bytes_out = zip->uncompressed_buffer_size
			- zip->uncompressed_buffer_bytes_remaining;
		bytes_in = bytes_avail;
		if (bytes_in > zip->pack_stream_inbytes_remaining)
			bytes_in = zip->pack_stream_inbytes_remaining;
		/* Drive decompression. */
		r = decompress(a, zip, buff_out, &bytes_out,
			buff_in, &bytes_in);
		switch (r) {
		case ARCHIVE_OK:
			eof = 0;
			break;
		case ARCHIVE_EOF:
			eof = 1;
			break;
		default:
			return (ARCHIVE_FATAL);
		}
		zip->pack_stream_inbytes_remaining -= bytes_in;
		if (bytes_out > zip->folder_outbytes_remaining)
			bytes_out = zip->folder_outbytes_remaining;
		zip->folder_outbytes_remaining -= bytes_out;
		zip->uncompressed_buffer_bytes_remaining += bytes_out;
		zip->pack_stream_bytes_unconsumed = bytes_in;

		/*
		 * Continue decompression until uncompressed_buffer is full.
		 */
		if (zip->uncompressed_buffer_bytes_remaining ==
		    zip->uncompressed_buffer_size)
			break;
		if (zip->pack_stream_inbytes_remaining == 0 &&
		    zip->folder_outbytes_remaining == 0)
			break;
		if (eof || (bytes_in == 0 && bytes_out == 0)) {
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC, ""Damaged 7-Zip archive"");
			return (ARCHIVE_FATAL);
		}
		read_consume(a);
	}
	zip->uncompressed_buffer_pointer = zip->uncompressed_buffer;
	return (ARCHIVE_OK);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1010.cpp,"[12, 0, 1, 0, 4, 0, 7, 1, 2, 1, 15, 0, 0, 0, 1, 204, 0, 0, 7, 8, 0, 0, 2, 18, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 14, 12, 0, 0, 9, 0, 0, 28, 0, 26, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1010.cpp,101,[],"[""member"", ""null"", ""=="", ""member"", ""null"", ""=="", ""&&""]"
4f4fe6e50bb3dbe59f9bc3cc848cbd07dead324d,"libarchive 3.0.2-r4051 (reduced)

Extract upstream libarchive using the following shell code.

url=https://libarchive.googlecode.com/svn/release/3.0
v=3.0.2
r=4051
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
""
date=$(svn log -q -c$r $url |
       sed -n ""/^r/ {s/[^|]*|[^|]*|//;p;}"")
svn export -r$r $url libarchive-$v-r$r &&
mkdir libarchive-$v-r$r-reduced &&
(cd libarchive-$v-r$r && tar c $paths) |
(cd libarchive-$v-r$r-reduced && tar x)
echo ""r$r date: $date""",[],libarchive/archive_read_support_format_7zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_454.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_454.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_454.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1216.cpp,3065,3063,3074,3095,,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC, ""Malformed 7-Zip archive"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1011.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1011.cpp,"(zip->pack_stream_inbytes_remaining > 0) {
			r = extract_pack_stream(a);
			if (r < 0)
				return (r);
			return (get_uncompressed_data(a, buff, size));
		} else if (zip->folder_outbytes_remaining > 0) {
			/* Extract a remaining pack stream. */
			r = extract_pack_stream(a);
			if (r < 0)
				return (r);
			return (get_uncompressed_data(a, buff, size));
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1011.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 4, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1011.cpp,8,[],"[""member"", ""null"", ""==""]"
fd63219557c4acc6e474263302ab9c78985f6d91,"ccmake: Align 'g' and 'q' key instructions.

They were miss-aligned with the 'enter' key instruction.

Before:
----
Press [enter] to edit option           CMake Version 2.8.3.20110107-g4b05a-dirty
Press [c] to configure
Press [h] for help         Press [q] to quit without generating
----

After:
----
Press [enter] to edit option           CMake Version 2.8.3.20110107-g4b05a-dirty
Press [c] to configure
Press [h] for help           Press [q] to quit without generating
----",[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_459.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_459.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_459.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1225.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1225.cpp,421,421,422,422,"sprintf(firstLine,
              ""Press [c] to configure     Press [g] to generate and exit"");","sprintf(firstLine,
              ""Press [c] to configure       Press [g] to generate and exit"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1012.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1012.cpp,"{
      sprintf(firstLine,
              ""Press [c] to configure     Press [g] to generate and exit"");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1012.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1012.cpp,44,"[""char *"", ""string""]","[""member""]"
fd63219557c4acc6e474263302ab9c78985f6d91,"ccmake: Align 'g' and 'q' key instructions.

They were miss-aligned with the 'enter' key instruction.

Before:
----
Press [enter] to edit option           CMake Version 2.8.3.20110107-g4b05a-dirty
Press [c] to configure
Press [h] for help         Press [q] to quit without generating
----

After:
----
Press [enter] to edit option           CMake Version 2.8.3.20110107-g4b05a-dirty
Press [c] to configure
Press [h] for help           Press [q] to quit without generating
----",[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_459.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_459.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_459.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1226.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1226.cpp,437,437,438,438,"f(secondLine,
            ""Press [h] for help         Press [q] to quit without generating"");","f(secondLine,
            ""Press [h] for help           ""
            ""Press [q] to quit without generating"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1013.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1013.cpp,"{
    if (this->OkToGenerate)
      {
      sprintf(firstLine,
              ""Press [c] to configure     Press [g] to generate and exit"");
      }
    else
      {
      sprintf(firstLine,  ""Press [c] to configure                                   "");
      }
    if (this->AdvancedMode)
      {
      sprintf(thirdLine,  ""Press [t] to toggle advanced mode (Currently On)"");
      }
    else
      {
      sprintf(thirdLine,  ""Press [t] to toggle advanced mode (Currently Off)"");
      }

    sprintf(secondLine,
            ""Press [h] for help         Press [q] to quit without generating"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1013.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 5, 0, 0, 5, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1013.cpp,60,"[""char *"", ""string""]","[""int"", ""!""]"
58b7fe65453f1d4b25537950de2277af2951fd85,"Use cout instead of printf()

Alex",[],Source/cmQtAutomoc.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_465.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_465.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_465.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1243.cpp,405,405,407,407,"printf(""Checking -%s-\n"", absFilename.c_str());","std::cout << ""AUTOMOC: Checking "" << absFilename << std::endl;",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1014.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1014.cpp,"{
      printf(""Checking -%s-\n"", absFilename.c_str());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1014.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1014.cpp,32,"[""string"", ""absFilename . c_str_ret""]","[""member""]"
58b7fe65453f1d4b25537950de2277af2951fd85,"Use cout instead of printf()

Alex",[],Source/cmQtAutomoc.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_465.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_465.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_465.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1244.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1244.cpp,419,419,421,421,"printf(""Checking -%s-\n"", absFilename.c_str());","std::cout << ""AUTOMOC: Checking "" << absFilename << std::endl;",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1015.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1015.cpp,"{
      printf(""Checking -%s-\n"", absFilename.c_str());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1015.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1015.cpp,46,"[""string"", ""absFilename . c_str_ret""]","[""member""]"
58b7fe65453f1d4b25537950de2277af2951fd85,"Use cout instead of printf()

Alex",[],Source/cmQtAutomoc.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_465.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_465.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_465.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1245.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1245.cpp,728,728,730,730,"printf(""%s "", command[i].c_str());","std::cout << command[i] << "" "";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1016.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1016.cpp,"{
        printf(""%s "", command[i].c_str());
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1016.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1016.cpp,48,"[""string"", ""command [ i ] . c_str_ret""]","[""null"", ""command . size_ret"", ""<""]"
58b7fe65453f1d4b25537950de2277af2951fd85,"Use cout instead of printf()

Alex",[],Source/cmQtAutomoc.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_465.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_465.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_465.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1245.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1245.cpp,728,728,732,732,"printf(""\n"");",std::cout << std::endl;,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1017.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1017.cpp,"{
      for(int i=0; i<command.size(); i++)
        {
        printf(""%s "", command[i].c_str());
        }
      printf(""\n"");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1017.cpp,"[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 13, 0, 0, 0, 1, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 4, 0, 0, 2, 0, 3, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1017.cpp,50,"[""string""]","[""member""]"
dd2f81491e6e17681dd18882a8ccfa01fa32a3f7,"Merge branch 'dev/add_test-working-directory' into dev/strict-mode

Conflicts:
	Tests/CMakeLists.txt",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_469.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_469.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_469.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1250.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1250.cpp,169,169,171,171,"fprintf(fout, ""cmake_minimum_required(VERSION %u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion());","fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1018.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1018.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeList.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      cmSystemTools::ReportLastSystemError("""");
      return -1;
      }

    std::string source = argv[2];
    std::string ext = cmSystemTools::GetFilenameExtension(source);
    const char* lang =(this->Makefile->GetCMakeInstance()->GetGlobalGenerator()
                        ->GetLanguageFromExtension(ext.c_str()));
    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion());
    if(def)
      {
      fprintf(fout, ""SET(CMAKE_MODULE_PATH %s)\n"", def);
      }

    const char* rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
    std::string rulesOverrideLang =
      rulesOverrideBase + (lang ? std::string(""_"") + lang : std::string(""""));
    if(const char* rulesOverridePath =
       this->Makefile->GetDefinition(rulesOverrideLang.c_str()))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideLang.c_str(), rulesOverridePath);
      }
    else if(const char* rulesOverridePath2 =
            this->Makefile->GetDefinition(rulesOverrideBase))
      {
      fprintf(fout, ""SET(%s \""%s\"")\n"",
              rulesOverrideBase, rulesOverridePath2);
      }

    if(lang)
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE %s)\n"", lang);
      }
    else
      {
      cmOStringStream err;
      err << ""Unknown extension \"""" << ext << ""\"" for file \""""
          << source << ""\"".  TRY_COMPILE only works for enabled languages.\n""
          << ""Currently enabled languages are:"";
      std::vector<std::string> langs;
      this->Makefile->GetCMakeInstance()->GetGlobalGenerator()->
        GetEnabledLanguages(langs);
      for(std::vector<std::string>::iterator l = langs.begin();
          l != langs.end(); ++l)
        {
        err << "" "" << *l;
        }
      err << ""\nSee PROJECT command for help enabling other languages."";
      cmSystemTools::Error(err.str().c_str());
      fclose(fout);
      return -1;
      }
    std::string langFlags = ""CMAKE_"";
    langFlags +=  lang;
    langFlags += ""_FLAGS"";
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    fprintf(fout, ""SET(CMAKE_%s_FLAGS \"""", lang);
    const char* flags = this->Makefile->GetDefinition(langFlags.c_str()); 
    if(flags)
      {
      fprintf(fout, "" %s "", flags);
      }
    fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""SET(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURE to i386;ppc and then set 
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURE first to i386 and then to ppc to
      have the tests run for each specific architecture. Since 
      cmLocalGenerator doesn't allow building for ""the other"" 
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }

    fprintf(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",source.c_str());
    fprintf(fout, 
            ""TARGET_LINK_LIBRARIES(cmTryCompileExec ${LINK_LIBRARIES})\n"");
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    // if the source is not in CMakeTmp 
    if(source.find(""CMakeTmp"") == source.npos)
      {
      this->Makefile->AddCMakeDependFile(source.c_str());
      }
    
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1018.cpp,"[12, 0, 2, 0, 0, 0, 2, 0, 0, 0, 16, 0, 0, 0, 6, 315, 0, 0, 16, 19, 0, 0, 19, 56, 0, 0, 0, 0, 7, 0, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 1, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 2, 0, 15, 13, 2, 0, 72, 0, 0, 41, 2, 80, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1018.cpp,154,"[""FILE *"", ""constant"", ""cmVersion :: GetMajorVersion_ret"", ""cmVersion :: GetMinorVersion_ret""]","[""FILE *"", ""!"", ""!""]"
aeb6cd8a8920c398b923d3ce383c06ed4643727f,"Merge branch 'honor-explicit-zero-timeout' into resolve/mingw-cross-compile-resources/honor-explicit-zero-timeout

Conflicts:
	Tests/CMakeLists.txt",[],Source/CTest/cmCTestGIT.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_470.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_470.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_470.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1251.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1251.cpp,503,503,511,-1,"sprintf(dt, ""%04d-%02d-%02d %02d:%02d:%02d"",
              t->tm_year+1900, t->tm_mon+1, t->tm_mday,
              t->tm_hour, t->tm_min, t->tm_sec);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1019.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1019.cpp,"{
      Person author;
      this->ParsePerson(this->Line.c_str()+7, author);
      this->Rev.Author = author.Name;
      this->Rev.EMail = author.EMail;

      // Convert the time to a human-readable format that is also easy
      // to machine-parse: ""CCYY-MM-DD hh:mm:ss"".
      time_t seconds = static_cast<time_t>(author.Time);
      struct tm* t = gmtime(&seconds);
      char dt[1024];
      sprintf(dt, ""%04d-%02d-%02d %02d:%02d:%02d"",
              t->tm_year+1900, t->tm_mon+1, t->tm_mday,
              t->tm_hour, t->tm_min, t->tm_sec);
      this->Rev.Date = dt;

      // Add the time-zone field ""+zone"" or ""-zone"".
      char tz[32];
      if(author.TimeZone >= 0)
        {
        sprintf(tz, "" +%04ld"", author.TimeZone);
        }
      else
        {
        sprintf(tz, "" -%04ld"", -author.TimeZone);
        }
      this->Rev.Date += tz;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1019.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 85, 0, 0, 5, 5, 0, 0, 2, 9, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 32, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 1, 1, 1, 0, 8, 0, 0, 8, 0, 19, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1019.cpp,19,"[""char *"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""strncmp_ret"", ""null"", ""==""]"
aeb6cd8a8920c398b923d3ce383c06ed4643727f,"Merge branch 'honor-explicit-zero-timeout' into resolve/mingw-cross-compile-resources/honor-explicit-zero-timeout

Conflicts:
	Tests/CMakeLists.txt",[],Source/CTest/cmCTestGIT.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_470.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_470.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_470.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1251.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1251.cpp,503,503,520,-1,"sprintf(tz, "" +%04ld"", author.TimeZone);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1020.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1020.cpp,"{
        sprintf(tz, "" +%04ld"", author.TimeZone);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1020.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1020.cpp,28,"[""char *"", ""string"", ""member""]","[""member"", ""null"", "">=""]"
aeb6cd8a8920c398b923d3ce383c06ed4643727f,"Merge branch 'honor-explicit-zero-timeout' into resolve/mingw-cross-compile-resources/honor-explicit-zero-timeout

Conflicts:
	Tests/CMakeLists.txt",[],Source/CTest/cmCTestGIT.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_470.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_470.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_470.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1251.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1251.cpp,503,503,524,-1,"sprintf(tz, "" -%04ld"", -author.TimeZone);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1021.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1021.cpp,"{
        sprintf(tz, "" -%04ld"", -author.TimeZone);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1021.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1021.cpp,32,"[""char *"", ""string"", ""member""]","[""member"", ""null"", "">="", ""!""]"
4c88a8622dd25bc3d630f2d35e3a4acca9a7a5a2,"KWSys: Avoid buffer overflow in SystemInformation (#11018)

Use std::string instead of fixed-size char arrays.

Author: Ben Boeckel <ben.boeckel@kitware.com>",[u'https://gitlab.kitware.com/cmake/cmake/issues/11018'],Source/kwsys/SystemInformation.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_471.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_471.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_471.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1253.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1253.cpp,3175,3166,3181,3172,"sprintf(this->ChipID.ProcessorName,""%s"",this->ParseValueFromKStat(""-s cpu_type"").c_str());","this->ChipID.ProcessorName = this->ParseValueFromKStat(""-s cpu_type"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1025.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1025.cpp,"{
  // Parse values
  this->NumberOfPhysicalCPU = static_cast<unsigned int>(
    atoi(this->ParseValueFromKStat(""-n syste_misc -s ncpus"").c_str()));
  this->NumberOfLogicalCPU = this->NumberOfPhysicalCPU;
  
  if(this->NumberOfPhysicalCPU!=0)
    {
    this->NumberOfLogicalCPU /= this->NumberOfPhysicalCPU;
    }

  this->CPUSpeedInMHz = static_cast<float>(atoi(this->ParseValueFromKStat(""-s clock_MHz"").c_str()));

  // Chip family
  this->ChipID.Family = 0; 
 
  // Chip Vendor
  strcpy(this->ChipID.Vendor,""Sun"");
  this->FindManufacturer();
  
  // Chip Model
  sprintf(this->ChipID.ProcessorName,""%s"",this->ParseValueFromKStat(""-s cpu_type"").c_str());
  this->ChipID.Model = 0;

  // Cache size
  this->Features.L1CacheSize = 0; 
  this->Features.L2CacheSize = 0;  

  char* tail;
  unsigned long totalMemory =
       strtoul(this->ParseValueFromKStat(""-s physmem"").c_str(),&tail,0);
  this->TotalPhysicalMemory = totalMemory/1024;
  this->TotalPhysicalMemory *= 8192;
  this->TotalPhysicalMemory /= 1024;

  // Undefined values (for now at least)
  this->TotalVirtualMemory = 0;
  this->AvailablePhysicalMemory = 0;
  this->AvailableVirtualMemory = 0;

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1025.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 97, 0, 0, 2, 2, 0, 0, 1, 19, 0, 0, 0, 0, 1, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 38, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 18, 0, 0, 17, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1025.cpp,22,"[""member"", ""string"", ""this -> ParseValueFromKStat ( \""-s cpu_type\"" ) . c_str_ret""]",[]
59925264829e5c9509f505897aafd33478e80cfe,"CTest: Factor out duplicate Git author/committer code

Factor out date/time format code into FormatDateTime function instead of
duplicating it.",[],Source/CTest/cmCTestGIT.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_472.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_472.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_472.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1254.cpp,503,503,511,-1,"sprintf(dt, ""%04d-%02d-%02d %02d:%02d:%02d"",
              t->tm_year+1900, t->tm_mon+1, t->tm_mday,
              t->tm_hour, t->tm_min, t->tm_sec);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1026.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1026.cpp,"{
      Person author;
      this->ParsePerson(this->Line.c_str()+7, author);
      this->Rev.Author = author.Name;
      this->Rev.EMail = author.EMail;

      // Convert the time to a human-readable format that is also easy
      // to machine-parse: ""CCYY-MM-DD hh:mm:ss"".
      time_t seconds = static_cast<time_t>(author.Time);
      struct tm* t = gmtime(&seconds);
      char dt[1024];
      sprintf(dt, ""%04d-%02d-%02d %02d:%02d:%02d"",
              t->tm_year+1900, t->tm_mon+1, t->tm_mday,
              t->tm_hour, t->tm_min, t->tm_sec);
      this->Rev.Date = dt;

      // Add the time-zone field ""+zone"" or ""-zone"".
      char tz[32];
      if(author.TimeZone >= 0)
        {
        sprintf(tz, "" +%04ld"", author.TimeZone);
        }
      else
        {
        sprintf(tz, "" -%04ld"", -author.TimeZone);
        }
      this->Rev.Date += tz;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1026.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 85, 0, 0, 5, 5, 0, 0, 2, 9, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 32, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 1, 1, 1, 0, 8, 0, 0, 8, 0, 19, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1026.cpp,19,"[""char *"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""strncmp_ret"", ""null"", ""==""]"
59925264829e5c9509f505897aafd33478e80cfe,"CTest: Factor out duplicate Git author/committer code

Factor out date/time format code into FormatDateTime function instead of
duplicating it.",[],Source/CTest/cmCTestGIT.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_472.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_472.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_472.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1254.cpp,503,503,520,-1,"sprintf(tz, "" +%04ld"", author.TimeZone);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1027.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1027.cpp,"{
        sprintf(tz, "" +%04ld"", author.TimeZone);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1027.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1027.cpp,28,"[""char *"", ""string"", ""member""]","[""member"", ""null"", "">=""]"
59925264829e5c9509f505897aafd33478e80cfe,"CTest: Factor out duplicate Git author/committer code

Factor out date/time format code into FormatDateTime function instead of
duplicating it.",[],Source/CTest/cmCTestGIT.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_472.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_472.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_472.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1254.cpp,503,503,524,-1,"sprintf(tz, "" -%04ld"", -author.TimeZone);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1028.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1028.cpp,"{
        sprintf(tz, "" -%04ld"", -author.TimeZone);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1028.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1028.cpp,32,"[""char *"", ""string"", ""member""]","[""member"", ""null"", "">="", ""!""]"
59925264829e5c9509f505897aafd33478e80cfe,"CTest: Factor out duplicate Git author/committer code

Factor out date/time format code into FormatDateTime function instead of
duplicating it.",[],Source/CTest/cmCTestGIT.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_472.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_472.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_472.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1254.cpp,503,503,540,-1,"sprintf(dt, ""%04d-%02d-%02d %02d:%02d:%02d"",
              t->tm_year+1900, t->tm_mon+1, t->tm_mday,
              t->tm_hour, t->tm_min, t->tm_sec);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1029.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1029.cpp,"{
      Person committer;
      this->ParsePerson(this->Line.c_str()+10, committer);
      this->Rev.Committer = committer.Name;
      this->Rev.CommitterEMail = committer.EMail;

      // Convert the time to a human-readable format that is also easy
      // to machine-parse: ""CCYY-MM-DD hh:mm:ss"".
      time_t seconds = static_cast<time_t>(committer.Time);
      struct tm* t = gmtime(&seconds);
      char dt[1024];
      sprintf(dt, ""%04d-%02d-%02d %02d:%02d:%02d"",
              t->tm_year+1900, t->tm_mon+1, t->tm_mday,
              t->tm_hour, t->tm_min, t->tm_sec);
      this->Rev.CommitDate = dt;

      // Add the time-zone field ""+zone"" or ""-zone"".
      char tz[32];
      if(committer.TimeZone >= 0)
        {
        sprintf(tz, "" +%04ld"", committer.TimeZone);
        }
      else
        {
        sprintf(tz, "" -%04ld"", -committer.TimeZone);
        }
      this->Rev.CommitDate += tz;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1029.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 85, 0, 0, 5, 5, 0, 0, 2, 9, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 32, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 1, 1, 1, 0, 8, 0, 0, 8, 0, 19, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1029.cpp,48,"[""char *"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""strncmp_ret"", ""null"", ""==""]"
59925264829e5c9509f505897aafd33478e80cfe,"CTest: Factor out duplicate Git author/committer code

Factor out date/time format code into FormatDateTime function instead of
duplicating it.",[],Source/CTest/cmCTestGIT.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_472.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_472.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_472.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1254.cpp,503,503,549,-1,"sprintf(tz, "" +%04ld"", committer.TimeZone);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1030.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1030.cpp,"{
        sprintf(tz, "" +%04ld"", committer.TimeZone);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1030.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1030.cpp,57,"[""char *"", ""string"", ""member""]","[""member"", ""null"", "">=""]"
59925264829e5c9509f505897aafd33478e80cfe,"CTest: Factor out duplicate Git author/committer code

Factor out date/time format code into FormatDateTime function instead of
duplicating it.",[],Source/CTest/cmCTestGIT.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_472.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_472.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_472.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1254.cpp,503,503,553,-1,"sprintf(tz, "" -%04ld"", -committer.TimeZone);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1031.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1031.cpp,"{
        sprintf(tz, "" -%04ld"", -committer.TimeZone);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1031.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1031.cpp,61,"[""char *"", ""string"", ""member""]","[""member"", ""null"", "">="", ""!""]"
a4a5e375685adcfe765c45be086706720a96dbea,"Use iostream to make Borland happy

It seems as though cstdio doesn't bring in stdio.h with the Borland
compilers.",[],Tests/TestsWorkingDirectory/main.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_473.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_473.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_473.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1256.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1256.cpp,18,19,20,21,"fprintf(stderr, ""No current working directory.\n"");","std::cerr << ""No current working directory."" << std::endl;",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1035.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1035.cpp,"{
    fprintf(stderr, ""No current working directory.\n"");
    abort();
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1035.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1035.cpp,5,"[""unkown"", ""constant""]","[""const char *"", ""!""]"
a4a5e375685adcfe765c45be086706720a96dbea,"Use iostream to make Borland happy

It seems as though cstdio doesn't bring in stdio.h with the Borland
compilers.",[],Tests/TestsWorkingDirectory/main.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_473.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_473.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_473.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1257.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1257.cpp,46,47,48,49,"fprintf(stderr, ""No current working directory\n"");","std::cerr << ""No current working directory"" << std::endl;",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1036.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1036.cpp,"{
    fprintf(stderr, ""No current working directory\n"");
    abort();
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1036.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1036.cpp,5,"[""unkown"", ""string""]","[""const char *"", ""!""]"
a4a5e375685adcfe765c45be086706720a96dbea,"Use iostream to make Borland happy

It seems as though cstdio doesn't bring in stdio.h with the Borland
compilers.",[],Tests/TestsWorkingDirectory/main.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_473.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_473.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_473.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1258.cpp,59,60,61,62,"fprintf(stdout, ""Working directory: -->%s<--"", cwd);","std::cout << ""Working directory: -->"" << cwd << ""<--"";;",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1037.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1037.cpp,"{
  char buf[2048];
  const char *cwd = Getcwd(buf, sizeof(buf));

  fprintf(stdout, ""Working directory: -->%s<--"", cwd);

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1037.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 11, 0, 0, 2, 2, 0, 0, 1, 3, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1037.cpp,5,"[""unkown"", ""constant"", ""const char *""]",[]
9bcaff02ff066e9bdd69e3e1e3134aa65c53c121,"Merge branch 'cmake-guiRememberAdvancedCheckbox' into dev/strict-mode

Conflicts:
	Source/QtDialog/CMakeSetupDialog.cxx",[],Source/cmComputeLinkDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_474.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_474.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_474.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1259.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1259.cpp,758,758,763,764,"fprintf(stderr, ""  followed by Component (%d)\n"", *oi);","fprintf(stderr, ""  followed by Component (%d)\n"", i);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1038.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1038.cpp,"{
      fprintf(stderr, ""  followed by Component (%d)\n"", *oi);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1038.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1038.cpp,18,"[""unkown"", ""string"", ""ol . begin_ret""]","[""ol . begin_ret"", ""ol . end_ret"", ""!=""]"
9bcaff02ff066e9bdd69e3e1e3134aa65c53c121,"Merge branch 'cmake-guiRememberAdvancedCheckbox' into dev/strict-mode

Conflicts:
	Source/QtDialog/CMakeSetupDialog.cxx",[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_475.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_475.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_475.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1260.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1260.cpp,283,291,293,301,"fprintf(stderr, ""  depends on target %d [%s]\n"", dependee_index,
              dependee->GetName());","fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName(), ni->IsStrong()? ""strong"" : ""weak"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1039.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1039.cpp,"{
      int dependee_index = *ni;
      cmTarget* dependee = this->Targets[dependee_index];
      fprintf(stderr, ""  depends on target %d [%s]\n"", dependee_index,
              dependee->GetName());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1039.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 2, 2, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1039.cpp,15,"[""unkown"", ""string"", ""int"", ""dependee -> GetName_ret""]","[""nl . begin_ret"", ""nl . end_ret"", ""!=""]"
2a5790a080d86c63daf3d2c17d533c919cbef582,"Use std::cout instead of fprintf

Alex",[],Source/cmGraphVizWriter.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_476.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_476.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_476.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1261.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1261.cpp,164,164,166,166,"f(stderr, ""Writing %s...\n"", currentFilename.c_str());","d::cout << ""Writing "" << currentFilename << ""..."" << std::endl;",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1040.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1040.cpp,"{
    if (ptrIt->second == NULL)
      {
      continue;
      }

    if (this->GenerateForTargetType(ptrIt->second->GetType()) == false)
      {
      continue;
      }

    std::set<std::string> insertedConnections;
    std::set<std::string> insertedNodes;

    std::string currentFilename = fileName;
    currentFilename += ""."";
    currentFilename += ptrIt->first;
    cmGeneratedFileStream str(currentFilename.c_str());
    if ( !str )
      {
      return;
      }

    fprintf(stderr, ""Writing %s...\n"", currentFilename.c_str());
    this->WriteHeader(str);

    this->WriteConnections(ptrIt->first.c_str(),
                              insertedNodes, insertedConnections, str);
    this->WriteFooter(str);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1040.cpp,"[3, 0, 0, 0, 0, 2, 1, 0, 0, 0, 4, 0, 0, 0, 0, 66, 0, 0, 4, 4, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 3, 0, 0, 12, 0, 0, 6, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1040.cpp,29,"[""unkown"", ""constant"", ""currentFilename . c_str_ret""]","[""cmGeneratedFileStream"", ""!"", ""!""]"
2a5790a080d86c63daf3d2c17d533c919cbef582,"Use std::cout instead of fprintf

Alex",[],Source/cmGraphVizWriter.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_476.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_476.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_476.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1262.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1262.cpp,184,184,186,186,"fprintf(stderr, ""Writing %s...\n"", fileName);","std::cout << ""Writing "" << fileName << ""..."" << std::endl;",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1041.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1041.cpp,"{
  cmGeneratedFileStream str(fileName);
  if ( !str )
    {
    return;
    }
  this->WriteHeader(str);

  fprintf(stderr, ""Writing %s...\n"", fileName);
  std::set<std::string> insertedConnections;
  std::set<std::string> insertedNodes;

  for(std::map<cmStdString, const cmTarget*>::const_iterator ptrIt =
                                                      this->TargetPtrs.begin();
      ptrIt != this->TargetPtrs.end();
      ++ptrIt)
    {
    if (ptrIt->second == NULL)
      {
      continue;
      }

    if (this->GenerateForTargetType(ptrIt->second->GetType()) == false)
      {
      continue;
      }

    this->WriteConnections(ptrIt->first.c_str(),
                              insertedNodes, insertedConnections, str);
    }
  this->WriteFooter(str);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1041.cpp,"[3, 0, 1, 0, 0, 2, 1, 0, 0, 0, 5, 0, 0, 0, 1, 70, 0, 0, 2, 4, 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 4, 3, 0, 0, 12, 1, 0, 4, 0, 14, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1041.cpp,9,"[""unkown"", ""constant"", ""const char *""]","[""cmGeneratedFileStream"", ""!"", ""!""]"
487bd571d56134b15b1060e1921a7e16711f12e6,"Properly insert all targets, also those which don't link to anything.

Alex",[],Source/cmake.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_477.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_477.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_477.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1263.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1263.cpp,3094,3069,3099,-1,"fprintf(stderr, "" + %s\n"", realTargetName);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1042.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1042.cpp,"{
        targetDeps[realTargetName] = DOT_DEP_TARGET;
        fprintf(stderr, "" + %s\n"", realTargetName);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1042.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1042.cpp,32,"[""unkown"", ""string"", ""const char *""]","[""ll -> size_ret"", ""null"", "">""]"
681cf011dde81c08c0404569289110f9585c6daf,"Distinguish ""strong"" and ""weak"" target dependency edges

Utility dependencies are ""strong"" because they must be enforced to
generate a working build.  Link dependencies are ""weak"" because they can
be broken in the case of a static library cycle.",[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_479.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_479.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_479.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1266.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1266.cpp,291,296,293,298,"fprintf(stderr, ""  depends on target %d [%s]\n"", dependee_index,
              dependee->GetName());","fprintf(stderr, ""  depends on target %d [%s] (%s)\n"", dependee_index,
              dependee->GetName(), ni->IsStrong()? ""strong"" : ""weak"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1043.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1043.cpp,"{
      int dependee_index = *ni;
      cmTarget* dependee = this->Targets[dependee_index];
      fprintf(stderr, ""  depends on target %d [%s]\n"", dependee_index,
              dependee->GetName());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1043.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 2, 2, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1043.cpp,15,"[""unkown"", ""string"", ""int"", ""dependee -> GetName_ret""]","[""nl . begin_ret"", ""nl . end_ret"", ""!=""]"
a61c5ab6e59a458ad34383e64d0679a7fe898c61,"Add CMAKE_TESTS_CDASH_SERVER variable and CTestSubmitLargeOutput test.

If defined and non-empty, the value of CMAKE_TESTS_CDASH_SERVER should point
to a CDash server willing to accept submissions for a project named
PublicDashboard. On machines that also run a CDash dashboard, set this
variable to ""http://localhost/CDash-trunk-Testing"" so that the CMake tests
that submit dashboards do not have to send those submissions over the wire.

The CTestSubmitLargeOutput test runs a dashboard that has a test that produces
very large amount of output on stdout/stderr. Since we do not even want	 to
attempt to send such large output over the wire, this test is off by default
unless the CMAKE_TESTS_CDASH_SERVER server is localhost. This test is expected
to cause a submission failure when sent to CDash. It passes if the submit
results contain error output. It fails if the submit succeeds.

CMAKE_TESTS_CDASH_SERVER: CDash server used by CMake/Tests.

If not defined or """", this variable defaults to the server at
http://www.cdash.org/CDash.

If set explicitly to ""NOTFOUND"", curl tests and ctest tests that use the
network are skipped.

If set to something starting with ""http://localhost/"", the CDash is expected
to be an instance of CDash used for CDash testing, pointing to a
cdash4simpletest database. In these cases, the CDash dashboards should be
run first.",[],Utilities/cmcurl/Testing/curltest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_484.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_484.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_484.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1273.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1273.cpp,98,98,104,104,"printf(""Error fetching: http://www.cmake.org/page1.html\n"");","printf(""Error fetching: %s\n"", url1);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1044.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1044.cpp,"{
      printf(""Error fetching: http://www.cmake.org/page1.html\n"");
      retVal = 1;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1044.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1044.cpp,66,"[""constant""]","[""curl_easy_perform_ret"", ""null"", ""!=""]"
a61c5ab6e59a458ad34383e64d0679a7fe898c61,"Add CMAKE_TESTS_CDASH_SERVER variable and CTestSubmitLargeOutput test.

If defined and non-empty, the value of CMAKE_TESTS_CDASH_SERVER should point
to a CDash server willing to accept submissions for a project named
PublicDashboard. On machines that also run a CDash dashboard, set this
variable to ""http://localhost/CDash-trunk-Testing"" so that the CMake tests
that submit dashboards do not have to send those submissions over the wire.

The CTestSubmitLargeOutput test runs a dashboard that has a test that produces
very large amount of output on stdout/stderr. Since we do not even want	 to
attempt to send such large output over the wire, this test is off by default
unless the CMAKE_TESTS_CDASH_SERVER server is localhost. This test is expected
to cause a submission failure when sent to CDash. It passes if the submit
results contain error output. It fails if the submit succeeds.

CMAKE_TESTS_CDASH_SERVER: CDash server used by CMake/Tests.

If not defined or """", this variable defaults to the server at
http://www.cdash.org/CDash.

If set explicitly to ""NOTFOUND"", curl tests and ctest tests that use the
network are skipped.

If set to something starting with ""http://localhost/"", the CDash is expected
to be an instance of CDash used for CDash testing, pointing to a
cdash4simpletest database. In these cases, the CDash dashboards should be
run first.",[],Utilities/cmcurl/Testing/curltest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_484.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_484.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_484.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1274.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1274.cpp,130,132,136,147,,"printf(""error: first argument should be a url to download\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1045.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1045.cpp,"{
  int retVal = 0;
  curl_global_init(CURL_GLOBAL_DEFAULT);
  retVal += GetWebFile();

  /* Do not check the output of FTP socks5 cannot handle FTP yet */
  /* GetFtpFile(); */
  /* do not test ftp right now because we don't enable that port */
  curl_global_cleanup();
  return retVal;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1045.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1045.cpp,4,[],[]
dc1d2189ae922be9d6e7f5fde698532db47e46aa,CMake 2.8.1-rc1,[],Source/cmake.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_486.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_486.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_486.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1276.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1276.cpp,2364,2316,2374,-1,"sprintf(tmp,""Version %s"", cmVersion::GetCMakeVersion());",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1046.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1046.cpp,"{
#ifdef CMAKE_BUILD_WITH_CMAKE
  // Loop over all registered commands and print out documentation
  const char *name;
  const char *terse;
  const char *full;
  char tmp[1024];
  sprintf(tmp,""Version %s"", cmVersion::GetCMakeVersion());
  f << ""<html>\n"";
  f << ""<h1>Documentation for commands of CMake "" << tmp << ""</h1>\n"";
  f << ""<ul>\n"";
  for(RegisteredCommandsMap::iterator j = this->Commands.begin();
      j != this->Commands.end(); ++j)
    {
    name = (*j).second->GetName();
    terse = (*j).second->GetTerseDocumentation();
    full = (*j).second->GetFullDocumentation();
    f << ""<li><b>"" << name << ""</b> - "" << terse << std::endl
      << ""<br><i>Usage:</i> "" << full << ""</li>"" << std::endl << std::endl;
    }
  f << ""</ul></html>\n"";
#else
  (void)f;
#endif
  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1046.cpp,"[0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 67, 0, 0, 4, 5, 0, 0, 2, 12, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 0, 1, 0, 1, 0, 7, 0, 0, 10, 0, 3, 3, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1046.cpp,8,"[""char *"", ""string"", ""cmVersion :: GetCMakeVersion_ret""]",[]
8ba2a4040484d0aa1be26ad8fde3d7109a7c2fb1,"Fixes for borland, compiles with lots of warnings, but compiles, might fix vs70 again too.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_490.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_490.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_490.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1282.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1282.cpp,479,479,481,481,"archive_set_error(&a->archive, EILSEQ,
            ""Can't translate pathname '%s' to UTF-8"", path);","archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
            ""Can't translate pathname '%s' to UTF-8"", path);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1047.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1047.cpp,"{
        archive_set_error(&a->archive, EILSEQ,
            ""Can't translate pathname '%s' to UTF-8"", path);
        ret = ARCHIVE_WARN;
        hdrcharset = ""BINARY"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1047.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1047.cpp,84,"[""member"", ""macro"", ""string"", ""archive_entry_pathname_ret""]","[""archive_entry_pathname_ret"", ""null"", ""!="", ""archive_entry_pathname_w_ret"", ""null"", ""=="", ""&&""]"
8ba2a4040484d0aa1be26ad8fde3d7109a7c2fb1,"Fixes for borland, compiles with lots of warnings, but compiles, might fix vs70 again too.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_490.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_490.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_490.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1282.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1282.cpp,479,479,489,489,"archive_set_error(&a->archive, EILSEQ,
            ""Can't translate uname '%s' to UTF-8"", uname);","archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
            ""Can't translate uname '%s' to UTF-8"", uname);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1048.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1048.cpp,"{
        archive_set_error(&a->archive, EILSEQ,
            ""Can't translate uname '%s' to UTF-8"", uname);
        ret = ARCHIVE_WARN;
        hdrcharset = ""BINARY"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1048.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1048.cpp,92,"[""member"", ""macro"", ""string"", ""archive_entry_uname_ret""]","[""archive_entry_uname_ret"", ""null"", ""!="", ""archive_entry_uname_w_ret"", ""null"", ""=="", ""&&""]"
8ba2a4040484d0aa1be26ad8fde3d7109a7c2fb1,"Fixes for borland, compiles with lots of warnings, but compiles, might fix vs70 again too.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_490.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_490.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_490.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1282.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1282.cpp,479,479,497,497,"archive_set_error(&a->archive, EILSEQ,
            ""Can't translate gname '%s' to UTF-8"", gname);","archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
            ""Can't translate gname '%s' to UTF-8"", gname);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1049.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1049.cpp,"{
        archive_set_error(&a->archive, EILSEQ,
            ""Can't translate gname '%s' to UTF-8"", gname);
        ret = ARCHIVE_WARN;
        hdrcharset = ""BINARY"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1049.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1049.cpp,100,"[""member"", ""macro"", ""string"", ""archive_entry_gname_ret""]","[""archive_entry_gname_ret"", ""null"", ""!="", ""archive_entry_gname_w_ret"", ""null"", ""=="", ""&&""]"
8ba2a4040484d0aa1be26ad8fde3d7109a7c2fb1,"Fixes for borland, compiles with lots of warnings, but compiles, might fix vs70 again too.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_490.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_490.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_490.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1283.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1283.cpp,509,509,511,511,"archive_set_error(&a->archive, EILSEQ,
            ""Can't translate linkpath '%s' to UTF-8"", linkpath);","archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
            ""Can't translate linkpath '%s' to UTF-8"", linkpath);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1050.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1050.cpp,"{
        archive_set_error(&a->archive, EILSEQ,
            ""Can't translate linkpath '%s' to UTF-8"", linkpath);
        ret = ARCHIVE_WARN;
        hdrcharset = ""BINARY"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1050.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1050.cpp,114,"[""member"", ""macro"", ""string"", ""archive_entry_hardlink_ret""]","[""archive_entry_hardlink_ret"", ""null"", ""!="", ""archive_entry_hardlink_w_ret"", ""null"", ""=="", ""&&""]"
8a690289c205da90133e704439dc6f7ef1a08680,"Add label summary times to ctest default output.  Also, remove parallel time output.  Add flag to disable label summary.",[],Source/CTest/cmCTestTestHandler.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_495.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_495.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_495.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1291.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1291.cpp,589,589,606,-1,"sprintf(totalBuf, ""%6.2f sec"", totalTestTime);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1051.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1051.cpp,"{
    if (this->HandlerVerbose && passed.size() &&
      (this->UseIncludeRegExpFlag || this->UseExcludeRegExpFlag))
      {
      cmCTestLog(this->CTest, HANDLER_VERBOSE_OUTPUT, std::endl
        << ""The following tests passed:"" << std::endl);
      for(std::vector<cmStdString>::iterator j = passed.begin();
          j != passed.end(); ++j)
        {
        cmCTestLog(this->CTest, HANDLER_VERBOSE_OUTPUT, ""\t"" << *j
          << std::endl);
        }
      }

    float percent = float(passed.size()) * 100.0f / total;
    if ( failed.size() > 0 &&  percent > 99)
      {
      percent = 99;
      }
    
    cmCTestLog(this->CTest, HANDLER_OUTPUT, std::endl
               << static_cast<int>(percent + .5) << ""% tests passed, ""
               << failed.size() << "" tests failed out of "" 
               << total << std::endl); 
    double totalTestTime = 0;

    for(cmCTestTestHandler::TestResultsVector::size_type cc = 0;
        cc < this->TestResults.size(); cc ++ )
      {
      cmCTestTestResult *result = &this->TestResults[cc];
      totalTestTime += result->ExecutionTime;
      }
    
    char realBuf[1024];
    sprintf(realBuf, ""%6.2f sec"", (double)(clock_finish - clock_start));
    cmCTestLog(this->CTest, HANDLER_OUTPUT, ""\nTotal Test time (real) = ""
               << realBuf << ""\n"" );

    char totalBuf[1024];
    sprintf(totalBuf, ""%6.2f sec"", totalTestTime); 
    cmCTestLog(this->CTest, HANDLER_OUTPUT, ""\nTotal Test time (parallel) = ""
               <<  totalBuf << ""\n"" );

    if (failed.size())
      {
      cmGeneratedFileStream ofs;
      cmCTestLog(this->CTest, ERROR_MESSAGE, std::endl
                 << ""The following tests FAILED:"" << std::endl);
      this->StartLogFile(""TestsFailed"", ofs);
      
      std::vector<cmCTestTestHandler::cmCTestTestResult>::iterator ftit;
      for(ftit = this->TestResults.begin();
          ftit != this->TestResults.end(); ++ftit)
        {
        if ( ftit->Status != cmCTestTestHandler::COMPLETED )
          {
          ofs << ftit->TestCount << "":"" << ftit->Name << std::endl;
          cmCTestLog(this->CTest, HANDLER_OUTPUT, ""\t"" << std::setw(3)
                     << ftit->TestCount << "" - "" 
                     << ftit->Name.c_str() << "" (""
                     << this->GetTestStatus(ftit->Status) << "")"" 
                     << std::endl);
          }
        }
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1051.cpp,"[4, 0, 3, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 205, 0, 0, 7, 9, 0, 0, 8, 27, 0, 0, 0, 0, 1, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 69, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 3, 0, 7, 4, 0, 0, 29, 0, 0, 13, 0, 37, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1051.cpp,112,"[""char *"", ""constant"", ""double""]","[""int_ret"", ""null"", ""=="", ""!""]"
177edc5ed1bed7306a122129dfcaf13d898f83ef,Fixed ctest -N segfault issue.  Further refactored ctest.  Enabled failover for ctest,[],Source/CTest/cmCTestRunTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_497.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_497.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_497.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1294.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1294.cpp,67,67,175,174,"sprintf(buf, ""%6.2f sec"", this->TestProcess->GetTotalTime());","sprintf(buf, ""%6.2f sec"", this->TestProcess->GetTotalTime());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1053.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1053.cpp,"{
    std::vector<std::pair<cmsys::RegularExpression,
      std::string> >::iterator passIt;
    bool forceFail = false;
    if ( this->TestProperties->RequiredRegularExpressions.size() > 0 )
      {
      bool found = false;
      for ( passIt = this->TestProperties->RequiredRegularExpressions.begin();
            passIt != this->TestProperties->RequiredRegularExpressions.end();
            ++ passIt )
        {
        if ( passIt->first.find(this->ProcessOutput.c_str()) )
          {
          found = true;
          reason = ""Required regular expression found."";
          }
        }
      if ( !found )
        { 
        reason = ""Required regular expression not found."";
        forceFail = true;
        }
      reason +=  ""Regex=[""; 
      for ( passIt = this->TestProperties->RequiredRegularExpressions.begin();
            passIt != this->TestProperties->RequiredRegularExpressions.end();
            ++ passIt )
        {
        reason += passIt->second;
        reason += ""\n"";
        }
      reason += ""]"";
      }
    if ( this->TestProperties->ErrorRegularExpressions.size() > 0 )
      {
      for ( passIt = this->TestProperties->ErrorRegularExpressions.begin();
            passIt != this->TestProperties->ErrorRegularExpressions.end();
            ++ passIt )
        {
        if ( passIt->first.find(this->ProcessOutput.c_str()) )
          {
          reason = ""Error regular expression found in output."";
          reason += "" Regex=["";
          reason += passIt->second;
          reason += ""]"";
          forceFail = true;
          }
        }
      }
    if (res == cmsysProcess_State_Exited)
      {
      bool success = 
        !forceFail &&  (retVal == 0 || 
        this->TestProperties->RequiredRegularExpressions.size());
      if((success && !this->TestProperties->WillFail) 
        || (!success && this->TestProperties->WillFail))
        {
        this->TestResult.Status = cmCTestTestHandler::COMPLETED;
        cmCTestLog(this->CTest, HANDLER_OUTPUT, ""   Passed  "" );
        }
      else
        {
        this->TestResult.Status = cmCTestTestHandler::FAILED;
        cmCTestLog(this->CTest, HANDLER_OUTPUT, ""***Failed  "" << reason );
        }
      }
    else if ( res == cmsysProcess_State_Expired )
      {
      cmCTestLog(this->CTest, HANDLER_OUTPUT, ""***Timeout"");
      this->TestResult.Status = cmCTestTestHandler::TIMEOUT;
      }
    else if ( res == cmsysProcess_State_Exception )
      {
      cmCTestLog(this->CTest, HANDLER_OUTPUT, ""***Exception: "");
      switch ( retVal )
        {
        case cmsysProcess_Exception_Fault:
          cmCTestLog(this->CTest, HANDLER_OUTPUT, ""SegFault"");
          this->TestResult.Status = cmCTestTestHandler::SEGFAULT;
          break;
        case cmsysProcess_Exception_Illegal:
          cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Illegal"");
          this->TestResult.Status = cmCTestTestHandler::ILLEGAL;
          break;
        case cmsysProcess_Exception_Interrupt:
          cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Interrupt"");
          this->TestResult.Status = cmCTestTestHandler::INTERRUPT;
          break;
        case cmsysProcess_Exception_Numerical:
          cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Numerical"");
          this->TestResult.Status = cmCTestTestHandler::NUMERICAL;
          break;
        default:
          cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Other"");
          this->TestResult.Status = cmCTestTestHandler::OTHER_FAULT;
        }
      }
    else // if ( res == cmsysProcess_State_Error )
      {
      cmCTestLog(this->CTest, HANDLER_OUTPUT, ""***Bad command "" << res );
      this->TestResult.Status = cmCTestTestHandler::BAD_COMMAND;
      }

    passed = this->TestResult.Status == cmCTestTestHandler::COMPLETED;

    char buf[1024];
    sprintf(buf, ""%6.2f sec"", this->TestProcess->GetTotalTime());
    cmCTestLog(this->CTest, HANDLER_OUTPUT, buf << ""\n"" );
    if ( this->TestHandler->LogFile )
      {
      *this->TestHandler->LogFile << ""Test time = "" << buf << std::endl;
      }
    this->DartProcessing();
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1053.cpp,"[10, 0, 3, 0, 4, 0, 0, 1, 4, 1, 17, 0, 0, 0, 0, 288, 0, 0, 5, 5, 0, 0, 6, 30, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 0, 14, 10, 2, 0, 29, 0, 0, 37, 2, 41, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1053.cpp,118,"[""char *"", ""constant"", ""this -> TestProcess -> GetTotalTime_ret""]","[""this -> CTest -> GetShowOnly_ret""]"
8ffd8d0a03d68241ce4f5f8a9fd266bee1032e1d,"ENH: refactored ctest.  All testing is now parallel.  If no -j option is specified, defaults to a MP level of 1 (non parallel)",[],Source/CTest/cmCTestRunTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_499.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_499.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_499.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1296.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1296.cpp,273,173,275,175,"sprintf(buf, ""%6.2f sec"", this->TestResult.ExecutionTime);","sprintf(buf, ""%6.2f sec"", this->TestProcess->GetTotalTime());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1054.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1054.cpp,"{
    std::vector<std::pair<cmsys::RegularExpression,
      std::string> >::iterator passIt;
    bool forceFail = false;
    if ( this->TestProperties->RequiredRegularExpressions.size() > 0 )
      {
      bool found = false;
      for ( passIt = this->TestProperties->RequiredRegularExpressions.begin();
            passIt != this->TestProperties->RequiredRegularExpressions.end();
            ++ passIt )
        {
        if ( passIt->first.find(output.c_str()) )
          {
          found = true;
          reason = ""Required regular expression found."";
          }
        }
      if ( !found )
        { 
        reason = ""Required regular expression not found."";
        forceFail = true;
        }
      reason +=  ""Regex=[""; 
      for ( passIt = this->TestProperties->RequiredRegularExpressions.begin();
            passIt != this->TestProperties->RequiredRegularExpressions.end();
            ++ passIt )
        {
        reason += passIt->second;
        reason += ""\n"";
        }
      reason += ""]"";
      }
    if ( this->TestProperties->ErrorRegularExpressions.size() > 0 )
      {
      for ( passIt = this->TestProperties->ErrorRegularExpressions.begin();
            passIt != this->TestProperties->ErrorRegularExpressions.end();
            ++ passIt )
        {
        if ( passIt->first.find(output.c_str()) )
          {
          reason = ""Error regular expression found in output."";
          reason += "" Regex=["";
          reason += passIt->second;
          reason += ""]"";
          forceFail = true;
          }
        }
      }

    if (res == cmsysProcess_State_Exited)
      {
      bool success = 
        !forceFail &&  (retVal == 0 || 
        this->TestProperties->RequiredRegularExpressions.size());
      if((success && !this->TestProperties->WillFail) 
        || (!success && this->TestProperties->WillFail))
        {
        this->TestResult.Status = cmCTestTestHandler::COMPLETED;
        cmCTestLog(this->CTest, HANDLER_OUTPUT,   ""   Passed  "" );
        }
      else
        {
        this->TestResult.Status = cmCTestTestHandler::FAILED;
        cmCTestLog(this->CTest, HANDLER_OUTPUT,
                   ""***Failed  "" << reason );
        }
      }
    else if ( res == cmsysProcess_State_Expired )
      {
      cmCTestLog(this->CTest, HANDLER_OUTPUT, ""***Timeout"");
      this->TestResult.Status = cmCTestTestHandler::TIMEOUT;
      }
    else if ( res == cmsysProcess_State_Exception )
      {
      cmCTestLog(this->CTest, HANDLER_OUTPUT, ""***Exception: "");
      switch ( retVal )
        {
        case cmsysProcess_Exception_Fault:
          cmCTestLog(this->CTest, HANDLER_OUTPUT, ""SegFault"");
          this->TestResult.Status = cmCTestTestHandler::SEGFAULT;
          break;
        case cmsysProcess_Exception_Illegal:
          cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Illegal"");
          this->TestResult.Status = cmCTestTestHandler::ILLEGAL;
          break;
        case cmsysProcess_Exception_Interrupt:
          cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Interrupt"");
          this->TestResult.Status = cmCTestTestHandler::INTERRUPT;
          break;
        case cmsysProcess_Exception_Numerical:
          cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Numerical"");
          this->TestResult.Status = cmCTestTestHandler::NUMERICAL;
          break;
        default:
          cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Other"");
          this->TestResult.Status = cmCTestTestHandler::OTHER_FAULT;
        }
      }
    else // if ( res == cmsysProcess_State_Error )
      {
      cmCTestLog(this->CTest, HANDLER_OUTPUT, ""***Bad command "" << res );
      this->TestResult.Status = cmCTestTestHandler::BAD_COMMAND;
      }

    passed = this->TestResult.Status == cmCTestTestHandler::COMPLETED;

    char buf[1024];
    sprintf(buf, ""%6.2f sec"", this->TestResult.ExecutionTime);
    cmCTestLog(this->CTest, HANDLER_OUTPUT, buf << ""\n"" );
    if ( this->TestHandler->LogFile )
      {
      *this->TestHandler->LogFile << ""\nTest time = "" << buf << std::endl;
      }
    this->DartProcessing(output);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1054.cpp,"[10, 0, 3, 0, 4, 0, 0, 1, 4, 1, 17, 0, 0, 0, 0, 287, 0, 0, 5, 5, 0, 0, 6, 30, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 0, 14, 10, 2, 0, 28, 0, 0, 37, 2, 42, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1054.cpp,235,"[""char *"", ""constant"", ""member""]","[""this -> CTest -> GetShowOnly_ret""]"
8ffd8d0a03d68241ce4f5f8a9fd266bee1032e1d,"ENH: refactored ctest.  All testing is now parallel.  If no -j option is specified, defaults to a MP level of 1 (non parallel)",[],Source/CTest/cmCTestTestHandler.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_500.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_500.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_500.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1297.cpp,591,598,594,606,"sprintf(buf, ""%6.2f sec"", totalTestTime);","sprintf(totalBuf, ""%6.2f sec"", totalTestTime);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1055.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1055.cpp,"{
      cmCTestLog(this->CTest, HANDLER_OUTPUT, std::endl
                 << static_cast<int>(percent + .5) << ""% tests passed, ""
                 << failed.size() << "" tests failed out of "" 
                 << total << std::endl); 
      double totalTestTime = 0;

      for(cmCTestTestHandler::TestResultsVector::size_type cc = 0;
          cc < this->TestResults.size(); cc ++ )
        {
        cmCTestTestResult *result = &this->TestResults[cc];
        totalTestTime += result->ExecutionTime;
        }
      
      char buf[1024];
      sprintf(buf, ""%6.2f sec"", totalTestTime); 
      cmCTestLog(this->CTest, HANDLER_OUTPUT, ""\nTotal Test time = "" 
                 <<  buf << ""\n"" );
      
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1055.cpp,"[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 52, 0, 0, 3, 4, 0, 0, 4, 9, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 22, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 1, 0, 0, 0, 7, 0, 0, 4, 0, 11, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1055.cpp,101,"[""char *"", ""constant"", ""double""]","[""this -> CTest -> GetParallelSubprocess_ret""]"
8ffd8d0a03d68241ce4f5f8a9fd266bee1032e1d,"ENH: refactored ctest.  All testing is now parallel.  If no -j option is specified, defaults to a MP level of 1 (non parallel)",[],Source/CTest/cmCTestTestHandler.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_500.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_500.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_500.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1297.cpp,591,598,594,601,,"sprintf(realBuf, ""%6.2f sec"", (double)(clock_finish - clock_start));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1056.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1056.cpp,"{
      cmCTestLog(this->CTest, HANDLER_OUTPUT, std::endl
                 << static_cast<int>(percent + .5) << ""% tests passed, ""
                 << failed.size() << "" tests failed out of "" 
                 << total << std::endl); 
      double totalTestTime = 0;

      for(cmCTestTestHandler::TestResultsVector::size_type cc = 0;
          cc < this->TestResults.size(); cc ++ )
        {
        cmCTestTestResult *result = &this->TestResults[cc];
        totalTestTime += result->ExecutionTime;
        }
      
      char buf[1024];
      sprintf(buf, ""%6.2f sec"", totalTestTime); 
      cmCTestLog(this->CTest, HANDLER_OUTPUT, ""\nTotal Test time = "" 
                 <<  buf << ""\n"" );
      
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1056.cpp,"[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 52, 0, 0, 3, 4, 0, 0, 4, 9, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 22, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 1, 0, 0, 0, 7, 0, 0, 4, 0, 11, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1056.cpp,101,"[""char *"", ""constant"", ""double""]","[""this -> CTest -> GetParallelSubprocess_ret""]"
98c51ff6dcd5e6aa80050cfc00f19eb6092e79c0,"ENH: Overhaul CMake version numbering

This moves the version numbers into an isolated configured header so
that not all of CMake needs to rebuild when the version changes.

Previously we had spaces, dashes and/or the word 'patch' randomly chosen
before the patch number.  Now we always report version numbers in the
traditional format ""<major>.<minor>.<patch>[-rc<rc>]"".

We still use odd minor numbers for development versions.  Now we also
use the CCYYMMDD date as the patch number of development versions, thus
allowing tests for exact CMake versions.",[],Source/WXDialog/CMakeSetupFrame.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_507.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_507.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_507.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1310.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1310.cpp,700,700,702,702,"str.Printf(""CMake %d.%d - %s"", cmVersion::GetMajorVersion(),
               cmVersion::GetMinorVersion(), 
               cmVersion::GetReleaseVersion().c_str());","str.Printf(""CMake %s"", cmVersion::GetCMakeVersion());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1057.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1057.cpp,"{ 
    // path to where cmake.exe is
    // m_PathToExecutable = cm.GetPathToExecutable().c_str();
    m_PathToExecutable = fn;

    // adjust size of last bar, to display % progress
    wxStatusBar *bar = GetStatusBar();
    if(bar)
    {
        wxASSERT(bar->GetFieldsCount() > 1);
        
        // fill all with -1. Why this way? because the count of the status bars
        // can change. All of the widths must be accounted for and initialised
        int *widths = new int[bar->GetFieldsCount()];
        for(int i = 0; i < bar->GetFieldsCount(); i++)
            widths[i] = -1;

        // the % field
        widths[1] = 75;
        bar->SetStatusWidths(bar->GetFieldsCount(), widths);
        delete widths;
    }

    wxString name, generator;
    std::vector<std::string> names;
  
    m_RunningConfigure = false;

    // set grid labels
    m_cmOptions->SetColLabelValue(0, wxT(""Cache Name""));
    m_cmOptions->SetColLabelValue(1, wxT(""Cache Value""));
    m_cmOptions->SetProjectGenerated(false);

    // set drop target
    m_cmOptions->SetDropTarget(new DnDFile(m_cmBuildPath));

    m_cmake->GetRegisteredGenerators(names);
    for(std::vector<std::string>::iterator i = names.begin(); i != names.end(); ++i)
    {
        name = i->c_str();
        m_cmGeneratorChoice->Append(name);
    }
    
    // sync advanced option with grid
    m_cmOptions->SetShowAdvanced(m_cmShowAdvanced->GetValue());

    // if we have a command line query that a generator 
    // needs to be chosen instead of the default, take it
    bool foundGivenGenerator = false;
    if(!cm.m_GeneratorChoiceString.IsEmpty())
    {
        // set proper discovered generator
        foundGivenGenerator = m_cmGeneratorChoice->SetStringSelection(cm.m_GeneratorChoiceString);  
    }

    // if none selected, we will see if VS8, VS7 or VS6 is present
    if(!foundGivenGenerator || m_cmGeneratorChoice->GetValue().IsEmpty())
    {
        std::string mp;
        mp = ""[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\VisualStudio\\8.0\\Setup;Dbghelp_path]"";
        cmSystemTools::ExpandRegistryValues(mp);
        if(mp != ""/registry"")
            generator = wxT(""Visual Studio 8 2005"");
        else
        {
            mp = ""[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\VisualStudio\\7.1;InstallDir]"";
            cmSystemTools::ExpandRegistryValues(mp);
            if (mp != ""/registry"")
                generator = wxT(""Visual Studio 7 .NET 2003"");
            else
            {
                mp = ""[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\VisualStudio\\7.0;InstallDir]"";
                cmSystemTools::ExpandRegistryValues(mp);
                if (mp != ""/registry"")
                    generator = wxT(""Visual Studio 7"");
                else
                    generator = wxT(""Visual Studio 6"");         
            }
        }
    }

    // set proper discovered generator
    m_cmGeneratorChoice->SetStringSelection(generator);
    
    wxString str;
    str.Printf(""CMake %d.%d - %s"", cmVersion::GetMajorVersion(),
               cmVersion::GetMinorVersion(), 
               cmVersion::GetReleaseVersion().c_str());
    str.Printf(""CMakeSetup v%i.%i%s"", CMAKEGUI_MAJORVER, CMAKEGUI_MINORVER, CMAKEGUI_ADDVER);

    SetTitle(str);
    wxString path;
    
    // get last 5 used projects
    for(size_t i = 0; i < CM_MAX_RECENT_PATHS; i++)
    {
        path.Printf(""%s%i"", _(CM_RECENT_BUILD_PATH), i);
        if(m_config->Read(path, &str))
            AppendPathToRecentList(str);
    }

    // get query items
    for(size_t i = 0; i < CM_MAX_SEARCH_QUERIES; i++)
    {
        path.Printf(""%s%i"", _(CM_SEARCH_QUERY), i);
        if(m_config->Read(path, &str))
            m_cmSearchQuery->Append(str);
    }


    // make sure the call to update grid is not executed
    m_noRefresh = true;
    m_cmSearchQuery->SetValue(_(""""));
    m_noRefresh = false;

    // Get the parameters from the command line info
    // If an unknown parameter is found, try to interpret it too, since it
    // is likely to be a file dropped on the shortcut :)
    bool sourceDirLoaded = false,
         buildDirLoaded = false;
    
    if(cm.m_LastUnknownParameter.empty())
    {
        if(cm.m_WhereSource.size() > 0 )
        {
            m_cmProjectPath->SetValue(cm.m_WhereSource.c_str());
            sourceDirLoaded = true;
        }   
    
        if (cm.m_WhereBuild.size() > 0 )
        {
            m_cmBuildPath->SetValue(cm.m_WhereBuild.c_str());
            buildDirLoaded = true;
        }
            
        m_cmShowAdvanced->SetValue(cm.m_AdvancedValues);
    }
    else
    {
        m_cmShowAdvanced->SetValue(false);
        
        // TODO: Interpret directory from dropped shortcut
        //this->ChangeDirectoriesFromFile(cmdInfo->m_LastUnknownParameter.c_str());
    }

    if (cm.m_ExitAfterLoad)
    {
        int id = GetId();
        m_ExitTimer = new wxTimer(this, id);
        m_ExitTimer->Start(3000);

        Connect( id, wxEVT_TIMER,(wxObjectEventFunction) &CMakeSetupFrm::OnExitTimer ); 

    } 

    // retrieve settings, this needs to be done here
    // because writing to the m_cmBuildPath triggers a cache reload
    if(!sourceDirLoaded && m_config->Read(CM_LASTPROJECT_PATH, &str))
        m_cmProjectPath->SetValue(str);

    if(!buildDirLoaded)
    {
        m_cmOptions->RemoveAll();
        if(m_config->Read(CM_LASTBUILD_PATH, &str))
            m_cmBuildPath->SetValue(str);
    }

    // set window size from settings
    long xsize, ysize, splitpos;
    if(m_config->Read(CM_XSIZE, &xsize) && m_config->Read(CM_YSIZE, &ysize) &&
       m_config->Read(CM_SPLITTERPOS, &splitpos))
    {
        SetSize(xsize, ysize);
        m_splitter->SetSashPosition(splitpos);
    }

    if(m_config->Read(CM_XPOS, &xsize) && m_config->Read(CM_YPOS, &ysize))
        SetSize(xsize, ysize, -1, -1, wxSIZE_USE_EXISTING);

    UpdateWindowState();
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1057.cpp,"[17, 0, 4, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 345, 0, 0, 11, 19, 0, 0, 14, 41, 0, 0, 0, 0, 2, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 3, 0, 21, 17, 4, 0, 79, 0, 0, 53, 0, 85, 0, 4, 0, 0, 4, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1057.cpp,86,"[""constant"", ""cmVersion :: GetMajorVersion_ret"", ""cmVersion :: GetMinorVersion_ret"", ""cmVersion :: GetReleaseVersion ( ) . c_str_ret""]",[]
3043ddf1445de03556564917e01a4f9748b04d89,BUG: #8611 add pass fail reasons into log file,[u'https://gitlab.kitware.com/cmake/cmake/issues/8611'],Source/CTest/cmCTestTestHandler.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_508.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_508.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_508.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1312.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1312.cpp,761,761,770,-1,"sprintf(buffer, ""%02d:%02d:%02d"", hours, minutes, seconds);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1058.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1058.cpp,"{
    double ttime = clock_finish - clock_start;
    int hours = static_cast<int>(ttime / (60 * 60));
    int minutes = static_cast<int>(ttime / 60) % 60;
    int seconds = static_cast<int>(ttime) % 60;
    char buffer[100];
    sprintf(buffer, ""%02d:%02d:%02d"", hours, minutes, seconds);
    *this->LogFile
      << ""----------------------------------------------------------""
      << std::endl
      << ""\"""" << testname.c_str() << ""\"" end time: ""
      << this->CTest->CurrentTime() << std::endl
      << ""\"""" << testname.c_str() << ""\"" time elapsed: ""
      << buffer << std::endl
      << ""----------------------------------------------------------""
      << std::endl << std::endl;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1058.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 53, 0, 0, 5, 5, 0, 0, 4, 13, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 18, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 0, 0, 0, 0, 0, 10, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1058.cpp,126,"[""char *"", ""string"", ""int"", ""int"", ""int""]","[""member""]"
3043ddf1445de03556564917e01a4f9748b04d89,BUG: #8611 add pass fail reasons into log file,[u'https://gitlab.kitware.com/cmake/cmake/issues/8611'],Source/CTest/cmCTestTestHandler.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_508.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_508.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_508.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1313.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1313.cpp,949,932,951,949,,"sprintf(buffer, ""%02d:%02d:%02d"", hours, minutes, seconds);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1059.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1059.cpp,"{
  const std::string& testname = it->Name;
  std::vector<std::string>& args = it->Args;
  cmCTestTestResult cres;
  cres.Properties = &*it;
  cres.ExecutionTime = 0;
  cres.ReturnValue = -1;
  cres.Status = cmCTestTestHandler::NOT_RUN;
  cres.TestCount = cnt;  
  cres.Name = testname;
  cres.Path = it->Directory.c_str();
  
  cmCTestLog(this->CTest, HANDLER_OUTPUT, std::setw(3) << cnt << ""/"");
  cmCTestLog(this->CTest, HANDLER_OUTPUT, std::setw(3) << tmsize << "" "");
  if ( this->MemCheck )
    {
    cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Memory Check"");
    }
  else
    {
    cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Testing"");
    }
  cmCTestLog(this->CTest, HANDLER_OUTPUT, "" "");
  const int maxTestNameWidth = this->CTest->GetMaxTestNameWidth();
  std::string outname = testname + "" "";
  outname.resize(maxTestNameWidth, '.');
  *this->LogFile << cnt << ""/"" << tmsize << "" Testing: "" << testname
                 << std::endl;
  
  if ( this->CTest->GetShowOnly() )
    {
    cmCTestLog(this->CTest, HANDLER_OUTPUT, outname.c_str() << std::endl);
    }
  else
    {
    cmCTestLog(this->CTest, HANDLER_OUTPUT, outname.c_str());
    }
  
  cmCTestLog(this->CTest, DEBUG, ""Testing "" << args[0].c_str() << "" ... "");
  // find the test executable
  std::string actualCommand = this->FindTheExecutable(args[1].c_str());
  std::string testCommand
    = cmSystemTools::ConvertToOutputPath(actualCommand.c_str());
  
  // continue if we did not find the executable
  if (testCommand == """")
    {
    *this->LogFile << ""Unable to find executable: "" << args[1].c_str()
                   << std::endl;
    cmCTestLog(this->CTest, ERROR_MESSAGE, ""Unable to find executable: ""
               << args[1].c_str() << std::endl);
    cres.Output = ""Unable to find executable: "" + args[1];
    if ( !this->CTest->GetShowOnly() )
      {
      cres.FullCommandLine = actualCommand;
      this->TestResults.push_back( cres );
      failed.push_back(testname);
      return;
      }
    }
  
  // add the arguments
  std::vector<std::string>::const_iterator j = args.begin();
  ++j; // skip test name
  ++j; // skip command as it is in actualCommand
  std::vector<const char*> arguments;
  this->GenerateTestCommand(arguments);
  arguments.push_back(actualCommand.c_str());
  for(;j != args.end(); ++j)
    {
    testCommand += "" "";
    testCommand += cmSystemTools::EscapeSpaces(j->c_str());
    arguments.push_back(j->c_str());
    }
  arguments.push_back(0);
  
  /**
   * Run an executable command and put the stdout in output.
   */
  std::string output;
  int retVal = 0;
  
  
  cmCTestLog(this->CTest, HANDLER_VERBOSE_OUTPUT, std::endl
             << (this->MemCheck?""MemCheck"":""Test"") 
             << "" command: "" << testCommand
             << std::endl);
  *this->LogFile << cnt << ""/"" << tmsize
                 << "" Test: "" << testname.c_str() << std::endl;
  *this->LogFile << ""Command: "";
  std::vector<cmStdString>::size_type ll;
  for ( ll = 0; ll < arguments.size()-1; ll ++ )
    {
    *this->LogFile << ""\"""" << arguments[ll] << ""\"" "";
    }
  *this->LogFile
    << std::endl
    << ""Directory: "" << it->Directory << std::endl
    << ""\"""" << testname.c_str() << ""\"" start time: ""
    << this->CTest->CurrentTime() << std::endl
    << ""Output:"" << std::endl
    << ""----------------------------------------------------------""
    << std::endl;
  int res = 0;
  double clock_start, clock_finish;
  clock_start = cmSystemTools::GetTime();
  
  if ( !this->CTest->GetShowOnly() )
    {
    res = this->CTest->RunTest(arguments, &output, &retVal, this->LogFile,
                               it->Timeout, &it->Environment);
    }

  clock_finish = cmSystemTools::GetTime();  

  if ( this->LogFile )
    {
    double ttime = clock_finish - clock_start;
    int hours = static_cast<int>(ttime / (60 * 60));
    int minutes = static_cast<int>(ttime / 60) % 60;
    int seconds = static_cast<int>(ttime) % 60;
    char buffer[100];
    sprintf(buffer, ""%02d:%02d:%02d"", hours, minutes, seconds);
    *this->LogFile
      << ""----------------------------------------------------------""
      << std::endl
      << ""\"""" << testname.c_str() << ""\"" end time: ""
      << this->CTest->CurrentTime() << std::endl
      << ""\"""" << testname.c_str() << ""\"" time elapsed: ""
      << buffer << std::endl
      << ""----------------------------------------------------------""
      << std::endl << std::endl;
    }
  
  cres.ExecutionTime = (double)(clock_finish - clock_start);
  cres.FullCommandLine = testCommand;
  std::string reason;
  if ( !this->CTest->GetShowOnly() )
    {
    bool testFailed = false;
    std::vector<std::pair<cmsys::RegularExpression,
      std::string> >::iterator passIt;
    bool forceFail = false;
    if ( it->RequiredRegularExpressions.size() > 0 )
      {
      bool found = false;
      for ( passIt = it->RequiredRegularExpressions.begin();
            passIt != it->RequiredRegularExpressions.end();
            ++ passIt )
        {
        if ( passIt->first.find(output.c_str()) )
          {
          found = true;
          reason = ""Required regular expression found."";
          }
        }
      if ( !found )
        { 
        reason = ""Required regular expression not found."";
        forceFail = true;
        }
      reason +=  ""Regex=[""; 
      for ( passIt = it->RequiredRegularExpressions.begin();
            passIt != it->RequiredRegularExpressions.end();
            ++ passIt )
        {
        reason += passIt->second;
        reason += ""\n"";
        }
      reason += ""]"";
      }
    if ( it->ErrorRegularExpressions.size() > 0 )
      {
      for ( passIt = it->ErrorRegularExpressions.begin();
            passIt != it->ErrorRegularExpressions.end();
            ++ passIt )
        {
        if ( passIt->first.find(output.c_str()) )
          {
          reason = ""Error regular expression found in output."";
          reason += "" Regex=["";
          reason += passIt->second;
          reason += ""]"";
          forceFail = true;
          }
        }
      }
    
    if (res == cmsysProcess_State_Exited &&
        (retVal == 0 || it->RequiredRegularExpressions.size()) &&
        !forceFail)
      {
      cmCTestLog(this->CTest, HANDLER_OUTPUT,   ""   Passed"");
      if ( it->WillFail )
        {
        cmCTestLog(this->CTest, HANDLER_OUTPUT,   "" - But it should fail!"");
        cres.Status = cmCTestTestHandler::FAILED;
        testFailed = true;
        }
      else
        {
        cres.Status = cmCTestTestHandler::COMPLETED;
        }
      cmCTestLog(this->CTest, HANDLER_OUTPUT, std::endl);
      }
    else
      {
      testFailed = true;
      
      cres.Status = cmCTestTestHandler::FAILED;
      if ( res == cmsysProcess_State_Expired )
        {
        cmCTestLog(this->CTest, HANDLER_OUTPUT, ""***Timeout"" << std::endl);
        cres.Status = cmCTestTestHandler::TIMEOUT;
        }
      else if ( res == cmsysProcess_State_Exception )
        {
        cmCTestLog(this->CTest, HANDLER_OUTPUT, ""***Exception: "");
        switch ( retVal )
          {
          case cmsysProcess_Exception_Fault:
            cmCTestLog(this->CTest, HANDLER_OUTPUT, ""SegFault"");
            cres.Status = cmCTestTestHandler::SEGFAULT;
            break;
          case cmsysProcess_Exception_Illegal:
            cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Illegal"");
            cres.Status = cmCTestTestHandler::ILLEGAL;
            break;
          case cmsysProcess_Exception_Interrupt:
            cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Interrupt"");
            cres.Status = cmCTestTestHandler::INTERRUPT;
            break;
          case cmsysProcess_Exception_Numerical:
            cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Numerical"");
            cres.Status = cmCTestTestHandler::NUMERICAL;
            break;
          default:
            cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Other"");
            cres.Status = cmCTestTestHandler::OTHER_FAULT;
          }
        cmCTestLog(this->CTest, HANDLER_OUTPUT, std::endl);
        }
      else if ( res == cmsysProcess_State_Error )
        {
        cmCTestLog(this->CTest, HANDLER_OUTPUT, ""***Bad command "" << res
                   << std::endl);
        cres.Status = cmCTestTestHandler::BAD_COMMAND;
        }
      else
        {
        // Force fail will also be here?
        cmCTestLog(this->CTest, HANDLER_OUTPUT, ""***Failed "" << reason);
        if ( it->WillFail )
          {
          cres.Status = cmCTestTestHandler::COMPLETED;
          cmCTestLog(this->CTest, HANDLER_OUTPUT, "" - supposed to fail"");
          testFailed = false;
          }
        cmCTestLog(this->CTest, HANDLER_OUTPUT, std::endl);
        }
      }
    if ( testFailed )
      {
      failed.push_back(testname);
      }
    else
      {
      passed.push_back(testname);
      }
    if (!output.empty() && output.find(""<DartMeasurement"") != output.npos)
      {
      if (this->DartStuff.find(output.c_str()))
        {
        std::string dartString = this->DartStuff.match(1);
        // keep searching and replacing until none are left
        while (this->DartStuff1.find(output.c_str()))
          {
          // replace the exact match for the string
          cmSystemTools::ReplaceString(output,
                                       this->DartStuff1.match(1).c_str(), """");
          }
        cres.RegressionImages
          = this->GenerateRegressionImages(dartString);
        }
      }
    }

  // if this is doing MemCheck then all the output needs to be put into
  // Output since that it what is parsed to by cmCTestMemCheckHandler
  if(!this->MemCheck)
    {
    if ( cres.Status == cmCTestTestHandler::COMPLETED )
      {
      this->CleanTestOutput(output, static_cast<size_t>
                            (this->CustomMaximumPassedTestOutputSize));
      }
    else
      {
      this->CleanTestOutput(output, static_cast<size_t>
                            (this->CustomMaximumFailedTestOutputSize));
      }
    }
  cres.Reason = reason;
  cres.Output = output;
  cres.ReturnValue = retVal;
  cres.CompletionStatus = ""Completed"";
  this->TestResults.push_back( cres );
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1059.cpp,"[23, 1, 5, 0, 4, 0, 1, 1, 4, 1, 38, 0, 0, 0, 3, 831, 0, 0, 25, 26, 0, 0, 22, 93, 0, 0, 0, 0, 3, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 405, 1, 301, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 7, 0, 31, 24, 8, 0, 112, 0, 0, 96, 2, 135, 0, 5, 0, 0, 5, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1059.cpp,307,[],"[""std :: string"", ""string"", ""==""]"
dc13914cd698b49cbae491c1e1aebbcd44fbe932,"ENH: Create cmXMLSafe to help escapes in XML

This class provides easy syntax to efficiently insert blocks of data
into XML documents with proper escapes.  It replaces the old
cmCTest::MakeXMLSafe and cmSystemTools::MakeXMLSafe methods which
allocated extra memory instead of directly streaming the data.",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_509.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_509.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_509.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1314.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1314.cpp,149,150,168,-1,"sprintf(buffer, ""&lt;%d&gt;"", (int)ch);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1060.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1060.cpp,"{
      char buffer[33];
      sprintf(buffer, ""&lt;%d&gt;"", (int)ch);
      //sprintf(buffer, ""&#x%0x;"", (unsigned int)ch);
      result.insert(result.end(), buffer, buffer+strlen(buffer));
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1060.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1060.cpp,12,"[""char *"", ""string"", ""char""]","[""char"", ""int"", "">"", ""char"", ""int"", ""<"", ""||"", ""char"", ""int"", ""!="", ""char"", ""int"", ""!="", ""char"", ""int"", ""!="", ""char"", ""char"", ""!="", ""&&"", ""&&"", ""&&"", ""&&""]"
ae7f2b47b3f94ec023f19474755cc76a2c0c6edc,"COMP: Fix unused yyunput warning in lexer

This adds the ""nounput"" option to the flex input file so that yyunput is
not generated.  The function is static but not used so some compilers
warn.",[],Source/cmCommandArgumentLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_511.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_511.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_511.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1316.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1316.cpp,1264,1262,1294,-1,"YY_FATAL_ERROR( ""flex scanner push-back overflow"" );",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1061.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1061.cpp,"YY_FATAL_ERROR( ""flex scanner push-back overflow"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1061.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1061.cpp,28,"[""string""]","[""member"", ""member"", ""<""]"
994262e5cc05abfb96da9af38f8d84988405ea5b,"ENH: Improve find_package version numbering

Make the number of version components specified explicitly available.
Set variables for unspecified version components to ""0"" instead of
leaving them unset.  This simplifies version number handling for find-
and config-modules.  Also support a fourth ""tweak"" version component
since some packages use them.",[],Source/cmFindPackageCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_513.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1318.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1318.cpp,565,574,571,580,"sprintf(buf, ""%u"", this->VersionPatch);","sprintf(buf, ""%u"", this->VersionPatch);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1062.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1062.cpp,"{
        sprintf(buf, ""%u"", this->VersionPatch);
        this->Makefile->AddDefinition((ver+""_PATCH"").c_str(), buf);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1062.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1062.cpp,36,"[""char *"", ""string"", ""member""]","[""member""]"
994262e5cc05abfb96da9af38f8d84988405ea5b,"ENH: Improve find_package version numbering

Make the number of version components specified explicitly available.
Set variables for unspecified version components to ""0"" instead of
leaving them unset.  This simplifies version number handling for find-
and config-modules.  Also support a fourth ""tweak"" version component
since some packages use them.",[],Source/cmFindPackageCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_513.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1318.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1318.cpp,565,574,576,578,"sprintf(buf, ""%u"", this->VersionMinor);","sprintf(buf, ""%u"", this->VersionMinor);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1063.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1063.cpp,"{
        sprintf(buf, ""%u"", this->VersionMinor);
        this->Makefile->AddDefinition((ver+""_MINOR"").c_str(), buf);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1063.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1063.cpp,41,"[""char *"", ""string"", ""member""]","[""member""]"
994262e5cc05abfb96da9af38f8d84988405ea5b,"ENH: Improve find_package version numbering

Make the number of version components specified explicitly available.
Set variables for unspecified version components to ""0"" instead of
leaving them unset.  This simplifies version number handling for find-
and config-modules.  Also support a fourth ""tweak"" version component
since some packages use them.",[],Source/cmFindPackageCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_513.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1318.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1318.cpp,565,574,581,576,"sprintf(buf, ""%u"", this->VersionMajor);","sprintf(buf, ""%u"", this->VersionMajor);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1064.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1064.cpp,"{
        sprintf(buf, ""%u"", this->VersionMajor);
        this->Makefile->AddDefinition((ver+""_MAJOR"").c_str(), buf);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1064.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1064.cpp,46,"[""char *"", ""string"", ""member""]","[""member""]"
994262e5cc05abfb96da9af38f8d84988405ea5b,"ENH: Improve find_package version numbering

Make the number of version components specified explicitly available.
Set variables for unspecified version components to ""0"" instead of
leaving them unset.  This simplifies version number handling for find-
and config-modules.  Also support a fourth ""tweak"" version component
since some packages use them.",[],Source/cmFindPackageCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_513.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1318.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1318.cpp,565,574,588,582,,"sprintf(buf, ""%u"", this->VersionTweak);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1065.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1065.cpp,"{
    // Tell the module that is about to be read what version of the
    // package has been requested.
    std::string ver = this->Name;
    ver += ""_FIND_VERSION"";
    this->Makefile->AddDefinition(ver.c_str(), this->Version.c_str());
    char buf[64];
    switch(this->VersionCount)
      {
      case 3:
        {
        sprintf(buf, ""%u"", this->VersionPatch);
        this->Makefile->AddDefinition((ver+""_PATCH"").c_str(), buf);
        } // no break
      case 2:
        {
        sprintf(buf, ""%u"", this->VersionMinor);
        this->Makefile->AddDefinition((ver+""_MINOR"").c_str(), buf);
        } // no break
      case 1:
        {
        sprintf(buf, ""%u"", this->VersionMajor);
        this->Makefile->AddDefinition((ver+""_MAJOR"").c_str(), buf);
        } // no break
      default: break;
      }

    // Tell the module whether an exact version has been requested.
    std::string exact = this->Name;
    exact += ""_FIND_VERSION_EXACT"";
    this->Makefile->AddDefinition(exact.c_str(),
                                  this->VersionExact? ""1"":""0"");
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1065.cpp,"[0, 0, 0, 0, 1, 0, 0, 1, 3, 1, 5, 0, 0, 0, 0, 79, 0, 0, 3, 3, 0, 0, 2, 14, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 1, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 2, 1, 1, 0, 14, 0, 0, 10, 0, 19, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1065.cpp,53,[],"[""this -> Version . empty_ret""]"
994262e5cc05abfb96da9af38f8d84988405ea5b,"ENH: Improve find_package version numbering

Make the number of version components specified explicitly available.
Set variables for unspecified version components to ""0"" instead of
leaving them unset.  This simplifies version number handling for find-
and config-modules.  Also support a fourth ""tweak"" version component
since some packages use them.",[],Source/cmFindPackageCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_513.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1318.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1318.cpp,565,574,588,584,,"sprintf(buf, ""%u"", this->VersionCount);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1066.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1066.cpp,"{
    // Tell the module that is about to be read what version of the
    // package has been requested.
    std::string ver = this->Name;
    ver += ""_FIND_VERSION"";
    this->Makefile->AddDefinition(ver.c_str(), this->Version.c_str());
    char buf[64];
    switch(this->VersionCount)
      {
      case 3:
        {
        sprintf(buf, ""%u"", this->VersionPatch);
        this->Makefile->AddDefinition((ver+""_PATCH"").c_str(), buf);
        } // no break
      case 2:
        {
        sprintf(buf, ""%u"", this->VersionMinor);
        this->Makefile->AddDefinition((ver+""_MINOR"").c_str(), buf);
        } // no break
      case 1:
        {
        sprintf(buf, ""%u"", this->VersionMajor);
        this->Makefile->AddDefinition((ver+""_MAJOR"").c_str(), buf);
        } // no break
      default: break;
      }

    // Tell the module whether an exact version has been requested.
    std::string exact = this->Name;
    exact += ""_FIND_VERSION_EXACT"";
    this->Makefile->AddDefinition(exact.c_str(),
                                  this->VersionExact? ""1"":""0"");
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1066.cpp,"[0, 0, 0, 0, 1, 0, 0, 1, 3, 1, 5, 0, 0, 0, 0, 79, 0, 0, 3, 3, 0, 0, 2, 14, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 1, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 2, 1, 1, 0, 14, 0, 0, 10, 0, 19, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1066.cpp,53,[],"[""this -> Version . empty_ret""]"
994262e5cc05abfb96da9af38f8d84988405ea5b,"ENH: Improve find_package version numbering

Make the number of version components specified explicitly available.
Set variables for unspecified version components to ""0"" instead of
leaving them unset.  This simplifies version number handling for find-
and config-modules.  Also support a fourth ""tweak"" version component
since some packages use them.",[],Source/cmFindPackageCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_513.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1319.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1319.cpp,1234,1234,1239,1241,"sprintf(buf, ""%u"", this->VersionPatch);","sprintf(buf, ""%u"", this->VersionPatch);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1067.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1067.cpp,"{
    char buf[64];
    sprintf(buf, ""%u"", this->VersionPatch);
    this->Makefile->AddDefinition(""PACKAGE_FIND_VERSION_PATCH"", buf);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1067.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 1, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1067.cpp,17,"[""char *"", ""string"", ""member""]","[""member"", ""int"", "">=""]"
994262e5cc05abfb96da9af38f8d84988405ea5b,"ENH: Improve find_package version numbering

Make the number of version components specified explicitly available.
Set variables for unspecified version components to ""0"" instead of
leaving them unset.  This simplifies version number handling for find-
and config-modules.  Also support a fourth ""tweak"" version component
since some packages use them.",[],Source/cmFindPackageCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_513.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1319.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1319.cpp,1234,1234,1249,1239,"sprintf(buf, ""%u"", this->VersionMinor);","sprintf(buf, ""%u"", this->VersionMinor);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1068.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1068.cpp,"{
    char buf[64];
    sprintf(buf, ""%u"", this->VersionMinor);
    this->Makefile->AddDefinition(""PACKAGE_FIND_VERSION_MINOR"", buf);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1068.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 1, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1068.cpp,27,"[""char *"", ""string"", ""member""]","[""member"", ""int"", "">=""]"
994262e5cc05abfb96da9af38f8d84988405ea5b,"ENH: Improve find_package version numbering

Make the number of version components specified explicitly available.
Set variables for unspecified version components to ""0"" instead of
leaving them unset.  This simplifies version number handling for find-
and config-modules.  Also support a fourth ""tweak"" version component
since some packages use them.",[],Source/cmFindPackageCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_513.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1319.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1319.cpp,1234,1234,1259,1237,"sprintf(buf, ""%u"", this->VersionMajor);","sprintf(buf, ""%u"", this->VersionMajor);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1069.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1069.cpp,"{
    char buf[64];
    sprintf(buf, ""%u"", this->VersionMajor);
    this->Makefile->AddDefinition(""PACKAGE_FIND_VERSION_MAJOR"", buf);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1069.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 1, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1069.cpp,37,"[""char *"", ""string"", ""member""]","[""member"", ""int"", "">=""]"
994262e5cc05abfb96da9af38f8d84988405ea5b,"ENH: Improve find_package version numbering

Make the number of version components specified explicitly available.
Set variables for unspecified version components to ""0"" instead of
leaving them unset.  This simplifies version number handling for find-
and config-modules.  Also support a fourth ""tweak"" version component
since some packages use them.",[],Source/cmFindPackageCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_513.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1319.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1319.cpp,1234,1234,1268,1243,,"sprintf(buf, ""%u"", this->VersionTweak);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1070.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1070.cpp,"{
  // The version file will be loaded in an isolated scope.
  this->Makefile->PushScope();

  // Clear the output variables.
  this->Makefile->RemoveDefinition(""PACKAGE_VERSION"");
  this->Makefile->RemoveDefinition(""PACKAGE_VERSION_COMPATIBLE"");
  this->Makefile->RemoveDefinition(""PACKAGE_VERSION_EXACT"");

  // Set the input variables.
  this->Makefile->AddDefinition(""PACKAGE_FIND_NAME"", this->Name.c_str());
  this->Makefile->AddDefinition(""PACKAGE_FIND_VERSION"",
                                this->Version.c_str());
  if(this->VersionCount >= 3)
    {
    char buf[64];
    sprintf(buf, ""%u"", this->VersionPatch);
    this->Makefile->AddDefinition(""PACKAGE_FIND_VERSION_PATCH"", buf);
    }
  else
    {
    this->Makefile->RemoveDefinition(""PACKAGE_FIND_VERSION_PATCH"");
    }
  if(this->VersionCount >= 2)
    {
    char buf[64];
    sprintf(buf, ""%u"", this->VersionMinor);
    this->Makefile->AddDefinition(""PACKAGE_FIND_VERSION_MINOR"", buf);
    }
  else
    {
    this->Makefile->RemoveDefinition(""PACKAGE_FIND_VERSION_MINOR"");
    }
  if(this->VersionCount >= 1)
    {
    char buf[64];
    sprintf(buf, ""%u"", this->VersionMajor);
    this->Makefile->AddDefinition(""PACKAGE_FIND_VERSION_MAJOR"", buf);
    }
  else
    {
    this->Makefile->RemoveDefinition(""PACKAGE_FIND_VERSION_MAJOR"");
    }

  // Load the version check file.
  bool found = false;
  if(this->ReadListFile(version_file.c_str()))
    {
    // Check the output variables.
    found = this->Makefile->IsOn(""PACKAGE_VERSION_EXACT"");
    if(!found && !this->VersionExact)
      {
      found = this->Makefile->IsOn(""PACKAGE_VERSION_COMPATIBLE"");
      }
    if(found || this->Version.empty())
      {
      // Get the version found.
      this->VersionFound =
        this->Makefile->GetSafeDefinition(""PACKAGE_VERSION"");

      // Try to parse the version number and store the results that were
      // successfully parsed.
      unsigned int parsed_major;
      unsigned int parsed_minor;
      unsigned int parsed_patch;
      this->VersionFoundCount =
        sscanf(this->VersionFound.c_str(), ""%u.%u.%u"",
               &parsed_major, &parsed_minor, &parsed_patch);
      switch(this->VersionFoundCount)
        {
        case 3: this->VersionFoundPatch = parsed_patch; // no break!
        case 2: this->VersionFoundMinor = parsed_minor; // no break!
        case 1: this->VersionFoundMajor = parsed_major; // no break!
        default: break;
        }
      }
    }

  // Restore the original scope.
  this->Makefile->PopScope();

  // Succeed if the version was found or no version was requested.
  return found || this->Version.empty();
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1070.cpp,"[6, 0, 0, 0, 1, 0, 1, 1, 3, 1, 11, 0, 0, 0, 0, 170, 0, 0, 7, 7, 0, 0, 1, 28, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 0, 7, 6, 3, 0, 27, 0, 0, 23, 0, 34, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1070.cpp,46,[],[]
994262e5cc05abfb96da9af38f8d84988405ea5b,"ENH: Improve find_package version numbering

Make the number of version components specified explicitly available.
Set variables for unspecified version components to ""0"" instead of
leaving them unset.  This simplifies version number handling for find-
and config-modules.  Also support a fourth ""tweak"" version component
since some packages use them.",[],Source/cmFindPackageCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_513.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1319.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1319.cpp,1234,1234,1268,1245,,"sprintf(buf, ""%u"", this->VersionCount);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1071.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1071.cpp,"{
  // The version file will be loaded in an isolated scope.
  this->Makefile->PushScope();

  // Clear the output variables.
  this->Makefile->RemoveDefinition(""PACKAGE_VERSION"");
  this->Makefile->RemoveDefinition(""PACKAGE_VERSION_COMPATIBLE"");
  this->Makefile->RemoveDefinition(""PACKAGE_VERSION_EXACT"");

  // Set the input variables.
  this->Makefile->AddDefinition(""PACKAGE_FIND_NAME"", this->Name.c_str());
  this->Makefile->AddDefinition(""PACKAGE_FIND_VERSION"",
                                this->Version.c_str());
  if(this->VersionCount >= 3)
    {
    char buf[64];
    sprintf(buf, ""%u"", this->VersionPatch);
    this->Makefile->AddDefinition(""PACKAGE_FIND_VERSION_PATCH"", buf);
    }
  else
    {
    this->Makefile->RemoveDefinition(""PACKAGE_FIND_VERSION_PATCH"");
    }
  if(this->VersionCount >= 2)
    {
    char buf[64];
    sprintf(buf, ""%u"", this->VersionMinor);
    this->Makefile->AddDefinition(""PACKAGE_FIND_VERSION_MINOR"", buf);
    }
  else
    {
    this->Makefile->RemoveDefinition(""PACKAGE_FIND_VERSION_MINOR"");
    }
  if(this->VersionCount >= 1)
    {
    char buf[64];
    sprintf(buf, ""%u"", this->VersionMajor);
    this->Makefile->AddDefinition(""PACKAGE_FIND_VERSION_MAJOR"", buf);
    }
  else
    {
    this->Makefile->RemoveDefinition(""PACKAGE_FIND_VERSION_MAJOR"");
    }

  // Load the version check file.
  bool found = false;
  if(this->ReadListFile(version_file.c_str()))
    {
    // Check the output variables.
    found = this->Makefile->IsOn(""PACKAGE_VERSION_EXACT"");
    if(!found && !this->VersionExact)
      {
      found = this->Makefile->IsOn(""PACKAGE_VERSION_COMPATIBLE"");
      }
    if(found || this->Version.empty())
      {
      // Get the version found.
      this->VersionFound =
        this->Makefile->GetSafeDefinition(""PACKAGE_VERSION"");

      // Try to parse the version number and store the results that were
      // successfully parsed.
      unsigned int parsed_major;
      unsigned int parsed_minor;
      unsigned int parsed_patch;
      this->VersionFoundCount =
        sscanf(this->VersionFound.c_str(), ""%u.%u.%u"",
               &parsed_major, &parsed_minor, &parsed_patch);
      switch(this->VersionFoundCount)
        {
        case 3: this->VersionFoundPatch = parsed_patch; // no break!
        case 2: this->VersionFoundMinor = parsed_minor; // no break!
        case 1: this->VersionFoundMajor = parsed_major; // no break!
        default: break;
        }
      }
    }

  // Restore the original scope.
  this->Makefile->PopScope();

  // Succeed if the version was found or no version was requested.
  return found || this->Version.empty();
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1071.cpp,"[6, 0, 0, 0, 1, 0, 1, 1, 3, 1, 11, 0, 0, 0, 0, 170, 0, 0, 7, 7, 0, 0, 1, 28, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 0, 7, 6, 3, 0, 27, 0, 0, 23, 0, 34, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1071.cpp,46,[],[]
994262e5cc05abfb96da9af38f8d84988405ea5b,"ENH: Improve find_package version numbering

Make the number of version components specified explicitly available.
Set variables for unspecified version components to ""0"" instead of
leaving them unset.  This simplifies version number handling for find-
and config-modules.  Also support a fourth ""tweak"" version component
since some packages use them.",[],Source/cmFindPackageCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_513.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1320.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1320.cpp,1321,1305,1329,1313,"sprintf(buf, ""%u"", this->VersionFoundPatch);","sprintf(buf, ""%u"", this->VersionFoundPatch);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1072.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1072.cpp,"{
      sprintf(buf, ""%u"", this->VersionFoundPatch);
      this->Makefile->AddDefinition((ver+""_PATCH"").c_str(), buf);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1072.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1072.cpp,20,"[""char *"", ""string"", ""member""]","[""member""]"
994262e5cc05abfb96da9af38f8d84988405ea5b,"ENH: Improve find_package version numbering

Make the number of version components specified explicitly available.
Set variables for unspecified version components to ""0"" instead of
leaving them unset.  This simplifies version number handling for find-
and config-modules.  Also support a fourth ""tweak"" version component
since some packages use them.",[],Source/cmFindPackageCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_513.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1320.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1320.cpp,1321,1305,1334,1311,"sprintf(buf, ""%u"", this->VersionFoundMinor);","sprintf(buf, ""%u"", this->VersionFoundMinor);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1073.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1073.cpp,"{
      sprintf(buf, ""%u"", this->VersionFoundMinor);
      this->Makefile->AddDefinition((ver+""_MINOR"").c_str(), buf);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1073.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1073.cpp,25,"[""char *"", ""string"", ""member""]","[""member""]"
994262e5cc05abfb96da9af38f8d84988405ea5b,"ENH: Improve find_package version numbering

Make the number of version components specified explicitly available.
Set variables for unspecified version components to ""0"" instead of
leaving them unset.  This simplifies version number handling for find-
and config-modules.  Also support a fourth ""tweak"" version component
since some packages use them.",[],Source/cmFindPackageCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_513.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_513.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1320.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1320.cpp,1321,1305,1339,1309,"sprintf(buf, ""%u"", this->VersionFoundMajor);","sprintf(buf, ""%u"", this->VersionFoundMajor);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1074.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1074.cpp,"{
      sprintf(buf, ""%u"", this->VersionFoundMajor);
      this->Makefile->AddDefinition((ver+""_MAJOR"").c_str(), buf);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1074.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1074.cpp,30,"[""char *"", ""string"", ""member""]","[""member""]"
816ee0f83cd9775e3b378fe3b074efe06d6b29a6,"ENH: New link line item ordering algorithm

This change introduces a new algorithm for link line construction.  The
order it computes always begins with the exact link line specified by
the user.  Dependencies of items specified by the user are tracked, and
those that are not already satisified by the line are appended to it at
the end with minimal repeats.  This restores the behavior of CMake 2.4
and below while still fixing some of its bugs.  See issue #7546.",[u'https://gitlab.kitware.com/cmake/cmake/issues/7546'],Source/cmComputeLinkDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_514.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_514.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_514.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1323.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1323.cpp,793,835,796,842,"fprintf(stderr, ""\n"");","fprintf(stderr, ""  topo order index %d\n"",
            this->ComponentOrder[c]);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1077.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1077.cpp,"{
  fprintf(stderr, ""The strongly connected components are:\n"");
  std::vector<NodeList> const& components = ccg.GetComponents();
  for(unsigned int c=0; c < components.size(); ++c)
    {
    fprintf(stderr, ""Component (%u):\n"", c);
    NodeList const& nl = components[c];
    for(NodeList::const_iterator ni = nl.begin(); ni != nl.end(); ++ni)
      {
      int i = *ni;
      fprintf(stderr, ""  item %d [%s]\n"", i,
              this->EntryList[i].Item.c_str());
      }
    }
  fprintf(stderr, ""\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1077.cpp,"[0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 54, 0, 0, 3, 5, 0, 0, 7, 5, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 2, 0, 0, 0, 10, 0, 0, 4, 0, 12, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1077.cpp,16,"[""unkown"", ""string""]",[]
68dfcefbcb755018ddadfa8bf132114a1b3fa28c,"COMP: sprintf warnings. DWORD should use %ld rather than %d. Also, const char *p, a shadowed variable warning.",[],Source/kwsys/SystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_516.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_516.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_516.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1325.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1325.cpp,4279,4279,4281,4281,"sprintf(buffer, ""%d"", osvi.dwMajorVersion);","sprintf(buffer, ""%ld"", osvi.dwMajorVersion);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1080.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1080.cpp,"{
        HKEY hKey;
        #define BUFSIZE 80
        char szProductType[BUFSIZE];
        DWORD dwBufLen=BUFSIZE;
        LONG lRet;

        lRet = RegOpenKeyEx(
          HKEY_LOCAL_MACHINE,
          ""SYSTEM\\CurrentControlSet\\Control\\ProductOptions"",
          0, KEY_QUERY_VALUE, &hKey);
        if (lRet != ERROR_SUCCESS)
          {
          return 0;
          }

        lRet = RegQueryValueEx(hKey, ""ProductType"", NULL, NULL,
                               (LPBYTE) szProductType, &dwBufLen);

        if ((lRet != ERROR_SUCCESS) || (dwBufLen > BUFSIZE))
          {
          return 0;
          }

        RegCloseKey(hKey);

        if (lstrcmpi(""WINNT"", szProductType) == 0)
          {
          res += "" Workstation"";
          }
        if (lstrcmpi(""LANMANNT"", szProductType) == 0)
          {
          res += "" Server"";
          }
        if (lstrcmpi(""SERVERNT"", szProductType) == 0)
          {
          res += "" Advanced Server"";
          }

        res += "" "";
        sprintf(buffer, ""%d"", osvi.dwMajorVersion);
        res += buffer;
        res += ""."";
        sprintf(buffer, ""%d"", osvi.dwMinorVersion);
        res += buffer;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1080.cpp,"[5, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 0, 58, 0, 0, 4, 4, 0, 0, 1, 18, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 5, 5, 0, 0, 8, 0, 0, 12, 0, 24, 1, 0, 1, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1080.cpp,175,"[""char *"", ""string"", ""member""]","[""RegQueryValueEx_ret"", ""macro"", ""!="", ""DWORD"", ""macro"", "">"", ""||"", ""!""]"
68dfcefbcb755018ddadfa8bf132114a1b3fa28c,"COMP: sprintf warnings. DWORD should use %ld rather than %d. Also, const char *p, a shadowed variable warning.",[],Source/kwsys/SystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_516.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_516.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_516.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1325.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1325.cpp,4279,4279,4284,4284,"sprintf(buffer, ""%d"", osvi.dwMinorVersion);","sprintf(buffer, ""%ld"", osvi.dwMinorVersion);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1081.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1081.cpp,"{
        HKEY hKey;
        #define BUFSIZE 80
        char szProductType[BUFSIZE];
        DWORD dwBufLen=BUFSIZE;
        LONG lRet;

        lRet = RegOpenKeyEx(
          HKEY_LOCAL_MACHINE,
          ""SYSTEM\\CurrentControlSet\\Control\\ProductOptions"",
          0, KEY_QUERY_VALUE, &hKey);
        if (lRet != ERROR_SUCCESS)
          {
          return 0;
          }

        lRet = RegQueryValueEx(hKey, ""ProductType"", NULL, NULL,
                               (LPBYTE) szProductType, &dwBufLen);

        if ((lRet != ERROR_SUCCESS) || (dwBufLen > BUFSIZE))
          {
          return 0;
          }

        RegCloseKey(hKey);

        if (lstrcmpi(""WINNT"", szProductType) == 0)
          {
          res += "" Workstation"";
          }
        if (lstrcmpi(""LANMANNT"", szProductType) == 0)
          {
          res += "" Server"";
          }
        if (lstrcmpi(""SERVERNT"", szProductType) == 0)
          {
          res += "" Advanced Server"";
          }

        res += "" "";
        sprintf(buffer, ""%d"", osvi.dwMajorVersion);
        res += buffer;
        res += ""."";
        sprintf(buffer, ""%d"", osvi.dwMinorVersion);
        res += buffer;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1081.cpp,"[5, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 0, 58, 0, 0, 4, 4, 0, 0, 1, 18, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 5, 5, 0, 0, 8, 0, 0, 12, 0, 24, 1, 0, 1, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1081.cpp,178,"[""char *"", ""string"", ""member""]","[""RegQueryValueEx_ret"", ""macro"", ""!="", ""DWORD"", ""macro"", "">"", ""||"", ""!""]"
68dfcefbcb755018ddadfa8bf132114a1b3fa28c,"COMP: sprintf warnings. DWORD should use %ld rather than %d. Also, const char *p, a shadowed variable warning.",[],Source/kwsys/SystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_516.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_516.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_516.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1326.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1326.cpp,4304,4304,4306,4306,"sprintf(buffer, ""%d"", osvi.dwBuildNumber & 0xFFFF);","sprintf(buffer, ""%ld"", osvi.dwBuildNumber & 0xFFFF);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1082.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1082.cpp,"{
          res += "" Service Pack 6a (Build "";
          sprintf(buffer, ""%d"", osvi.dwBuildNumber & 0xFFFF);
          res += buffer;
          res += "")"";
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1082.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1082.cpp,200,"[""char *"", ""string"", ""bool""]","[""RegOpenKeyEx_ret"", ""macro"", ""==""]"
68dfcefbcb755018ddadfa8bf132114a1b3fa28c,"COMP: sprintf warnings. DWORD should use %ld rather than %d. Also, const char *p, a shadowed variable warning.",[],Source/kwsys/SystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_516.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_516.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_516.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1327.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1327.cpp,4313,4313,4315,4315,"sprintf(buffer, ""%d"", osvi.dwBuildNumber & 0xFFFF);","sprintf(buffer, ""%ld"", osvi.dwBuildNumber & 0xFFFF);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1083.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1083.cpp,"{
          res += "" "";
          res += osvi.szCSDVersion;
          res += "" (Build "";
          sprintf(buffer, ""%d"", osvi.dwBuildNumber & 0xFFFF);
          res += buffer;
          res += "")"";
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1083.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1083.cpp,209,"[""char *"", ""string"", ""bool""]","[""RegOpenKeyEx_ret"", ""macro"", ""=="", ""!""]"
68dfcefbcb755018ddadfa8bf132114a1b3fa28c,"COMP: sprintf warnings. DWORD should use %ld rather than %d. Also, const char *p, a shadowed variable warning.",[],Source/kwsys/SystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_516.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_516.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_516.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1328.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1328.cpp,4325,4325,4327,4327,"sprintf(buffer, ""%d"", osvi.dwBuildNumber & 0xFFFF);","sprintf(buffer, ""%ld"", osvi.dwBuildNumber & 0xFFFF);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1084.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1084.cpp,"{
        res += "" "";
        res += osvi.szCSDVersion;
        res += "" (Build "";
        sprintf(buffer, ""%d"", osvi.dwBuildNumber & 0xFFFF);
        res += buffer;
        res += "")"";
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1084.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1084.cpp,221,"[""char *"", ""string"", ""bool""]","[""member"", ""int"", ""=="", ""lstrcmpi_ret"", ""null"", ""=="", ""&&"", ""!""]"
52898fe9250aaa16904640874852c45bfc4c325b,"BUG: Fix Fortran dependency parser preprocessor handling crash.

  - Do not crash if a #elseif occurs out of order
  - Recognize preprocessor directives only at the beginning of lines.
  - See issue #6855",[u'https://gitlab.kitware.com/cmake/cmake/issues/6855'],Source/cmDependsFortranLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_517.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_517.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_517.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1329.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1329.cpp,1427,1476,1429,1483,,"YY_FATAL_ERROR( ""out of dynamic memory in yy_get_next_buffer()"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1085.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1085.cpp,"{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
        register char *source = yyg->yytext_ptr;
        register int number_to_move, i;
        int ret_val;

        if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
                YY_FATAL_ERROR(
                ""fatal flex scanner internal error--end of buffer missed"" );

        if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
                { /* Don't try to fill the buffer, so this is an EOF. */
                if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
                        {
                        /* We matched a single character, the EOB, so
                         * treat this as a final EOF.
                         */
                        return EOB_ACT_END_OF_FILE;
                        }

                else
                        {
                        /* We matched some text prior to the EOB, first
                         * process it.
                         */
                        return EOB_ACT_LAST_MATCH;
                        }
                }

        /* Try to read more data. */

        /* First move last chars to start of buffer. */
        number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

        for ( i = 0; i < number_to_move; ++i )
                *(dest++) = *(source++);

        if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
                /* don't do the read, it's not guaranteed to return an EOF,
                 * just force an EOF
                 */
                YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

        else
                {
                        int num_to_read =
                        YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

                while ( num_to_read <= 0 )
                        { /* Not enough room in the buffer - grow it. */

                        /* just a shorter name for the current buffer */
                        YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

                        int yy_c_buf_p_offset =
                                (int) (yyg->yy_c_buf_p - b->yy_ch_buf);

                        if ( b->yy_is_our_buffer )
                                {
                                int new_size = b->yy_buf_size * 2;

                                if ( new_size <= 0 )
                                        b->yy_buf_size += b->yy_buf_size / 8;
                                else
                                        b->yy_buf_size *= 2;

                                b->yy_ch_buf = (char *)
                                        /* Include room in for 2 EOB chars. */
                                        cmDependsFortran_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
                                }
                        else
                                /* Can't grow it, we don't own it. */
                                b->yy_ch_buf = 0;

                        if ( ! b->yy_ch_buf )
                                YY_FATAL_ERROR(
                                ""fatal error - scanner input buffer overflow"" );

                        yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

                        num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
                                                number_to_move - 1;

                        }

                if ( num_to_read > YY_READ_BUF_SIZE )
                        num_to_read = YY_READ_BUF_SIZE;

                /* Read in more data. */
                YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
                        yyg->yy_n_chars, (size_t) num_to_read );

                YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
                }

        if ( yyg->yy_n_chars == 0 )
                {
                if ( number_to_move == YY_MORE_ADJ )
                        {
                        ret_val = EOB_ACT_END_OF_FILE;
                        cmDependsFortran_yyrestart(yyin  ,yyscanner);
                        }

                else
                        {
                        ret_val = EOB_ACT_LAST_MATCH;
                        YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
                                YY_BUFFER_EOF_PENDING;
                        }
                }

        else
                ret_val = EOB_ACT_CONTINUE_SCAN;

        yyg->yy_n_chars += number_to_move;
        YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
        YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

        yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

        return ret_val;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1085.cpp,"[10, 1, 1, 0, 0, 0, 3, 0, 0, 0, 19, 0, 0, 0, 3, 199, 0, 0, 9, 10, 0, 0, 8, 20, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 6, 0, 12, 10, 6, 0, 7, 0, 0, 23, 0, 12, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1085.cpp,116,[],"[""member"", ""null"", ""=="", ""!""]"
52898fe9250aaa16904640874852c45bfc4c325b,"BUG: Fix Fortran dependency parser preprocessor handling crash.

  - Do not crash if a #elseif occurs out of order
  - Recognize preprocessor directives only at the beginning of lines.
  - See issue #6855",[u'https://gitlab.kitware.com/cmake/cmake/issues/6855'],Source/cmDependsFortranLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_517.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_517.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_517.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1331.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1331.cpp,1858,1915,1861,1918,,"YY_FATAL_ERROR( ""out of dynamic memory in cmDependsFortran_yyensure_buffer_stack()"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1086.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1086.cpp,"{

                /* First allocation is just for 2 elements, since we don't know if this
                 * scanner will even need a stack. We use 2 instead of 1 to avoid an
                 * immediate realloc on the next call.
         */
                num_to_alloc = 1;
                yyg->yy_buffer_stack = (struct yy_buffer_state**)cmDependsFortran_yyalloc
                                                                (num_to_alloc * sizeof(struct yy_buffer_state*)
                                                                , yyscanner);
                
                memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
                                
                yyg->yy_buffer_stack_max = num_to_alloc;
                yyg->yy_buffer_stack_top = 0;
                return;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1086.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 12, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1086.cpp,16,"[""member"", ""null"", ""int""]","[""member""]"
5233b75a777b0f3379408291e6f32b0eb15c2f54,"ENH: Improve handling of old-style compatibility.

  - Remove CMP_0001 (no slash in target name) and restore
    old CMAKE_BACKWARDS_COMPATIBILITY check for it
  - Replace all checks of CMAKE_BACKWARDS_COMPATIBILITY
    with cmLocalGenerator::NeedBackwardsCompatibility calls
  - Create new CMP_0001 to determine whether or not
    CMAKE_BACKWARDS_COMPATIBILITY is used.
    (old = use, new = ignore)
  - Show CMAKE_BACKWARDS_COMPATIBILITY in cache only when
    CMP_0001 is set to OLD or WARN
  - Update documentation of cmake_policy and cmake_minimum_required
    to indicate their relationship and the 2.4 version boundary
  - When no cmake policy version is set in top level makefile
    implicitly call cmake_policy(VERSION 2.4) which restores
    CMAKE_BACKWARDS_COMPATIBILITY and other 2.4 compatibility
  - Fix tests MakeClean and Preprocess to call
    cmake_policy(VERSION 2.6) because they depend on new policies",[],Source/cmake.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_518.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_518.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_518.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1335.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1335.cpp,1899,1899,1905,-1,"sprintf(ver,""%i.%i"",cmVersion::GetMajorVersion(),
            cmVersion::GetMinorVersion());",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1088.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1088.cpp,"{
    char ver[256];
    sprintf(ver,""%i.%i"",cmVersion::GetMajorVersion(),
            cmVersion::GetMinorVersion());
    this->CacheManager->AddCacheEntry
      (""CMAKE_BACKWARDS_COMPATIBILITY"",ver, 
       ""For backwards compatibility, what version of CMake commands and ""
       ""syntax should this version of CMake allow."",
       cmCacheManager::INTERNAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1088.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 19, 0, 0, 1, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1088.cpp,29,"[""char *"", ""constant"", ""cmVersion :: GetMajorVersion_ret"", ""cmVersion :: GetMinorVersion_ret""]","[""this -> CacheManager -> GetCacheValue_ret""]"
5233b75a777b0f3379408291e6f32b0eb15c2f54,"ENH: Improve handling of old-style compatibility.

  - Remove CMP_0001 (no slash in target name) and restore
    old CMAKE_BACKWARDS_COMPATIBILITY check for it
  - Replace all checks of CMAKE_BACKWARDS_COMPATIBILITY
    with cmLocalGenerator::NeedBackwardsCompatibility calls
  - Create new CMP_0001 to determine whether or not
    CMAKE_BACKWARDS_COMPATIBILITY is used.
    (old = use, new = ignore)
  - Show CMAKE_BACKWARDS_COMPATIBILITY in cache only when
    CMP_0001 is set to OLD or WARN
  - Update documentation of cmake_policy and cmake_minimum_required
    to indicate their relationship and the 2.4 version boundary
  - When no cmake policy version is set in top level makefile
    implicitly call cmake_policy(VERSION 2.4) which restores
    CMAKE_BACKWARDS_COMPATIBILITY and other 2.4 compatibility
  - Fix tests MakeClean and Preprocess to call
    cmake_policy(VERSION 2.6) because they depend on new policies",[],Source/cmake.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_518.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_518.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_518.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1336.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1336.cpp,2392,2379,2399,-1,"sprintf(ver,""%i.%i"",cmVersion::GetMajorVersion(),
            cmVersion::GetMinorVersion());",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1089.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1089.cpp,"{
    char ver[256];
    sprintf(ver,""%i.%i"",cmVersion::GetMajorVersion(),
            cmVersion::GetMinorVersion());
    this->CacheManager->AddCacheEntry
      (""CMAKE_BACKWARDS_COMPATIBILITY"",ver, 
       ""For backwards compatibility, what version of CMake commands and ""
       ""syntax should this version of CMake allow."",
       cmCacheManager::INTERNAL);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1089.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 19, 0, 0, 1, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1089.cpp,36,"[""char *"", ""constant"", ""cmVersion :: GetMajorVersion_ret"", ""cmVersion :: GetMinorVersion_ret""]","[""this -> CacheManager -> GetCacheValue_ret""]"
cd4d2acbe654ca57a9ffc7ca34dcf4835bfc77c3,ENH: more policy changes,[],Source/cmake.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_519.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_519.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_519.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1337.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1337.cpp,1899,1899,1905,-1,"sprintf(ver,""%i.%i"",cmVersion::GetMajorVersion(),
            cmVersion::GetMinorVersion());",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1090.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1090.cpp,"{
    char ver[256];
    sprintf(ver,""%i.%i"",cmVersion::GetMajorVersion(),
            cmVersion::GetMinorVersion());
    this->CacheManager->AddCacheEntry
      (""CMAKE_BACKWARDS_COMPATIBILITY"",ver, 
       ""For backwards compatibility, what version of CMake commands and ""
       ""syntax should this version of CMake allow."",
       cmCacheManager::STRING);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1090.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 19, 0, 0, 1, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1090.cpp,29,"[""char *"", ""constant"", ""cmVersion :: GetMajorVersion_ret"", ""cmVersion :: GetMinorVersion_ret""]","[""this -> CacheManager -> GetCacheValue_ret""]"
cd4d2acbe654ca57a9ffc7ca34dcf4835bfc77c3,ENH: more policy changes,[],Source/cmake.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_519.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_519.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_519.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1338.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1338.cpp,2393,2380,2399,-1,"sprintf(ver,""%i.%i"",cmVersion::GetMajorVersion(),
            cmVersion::GetMinorVersion());",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1091.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1091.cpp,"{
    char ver[256];
    sprintf(ver,""%i.%i"",cmVersion::GetMajorVersion(),
            cmVersion::GetMinorVersion());
    this->CacheManager->AddCacheEntry
      (""CMAKE_BACKWARDS_COMPATIBILITY"",ver, 
       ""For backwards compatibility, what version of CMake commands and ""
       ""syntax should this version of CMake allow."",
       cmCacheManager::STRING);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1091.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 19, 0, 0, 1, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1091.cpp,36,"[""char *"", ""constant"", ""cmVersion :: GetMajorVersion_ret"", ""cmVersion :: GetMinorVersion_ret""]","[""this -> CacheManager -> GetCacheValue_ret""]"
4987e17f46cb2542106ee2d9afe2752ef78d0f1f,"ENH: Improve link line generation for static library cycles.

  - Move Tarjan algorithm from cmComputeTargetDepends
    into its own class cmComputeComponentGraph
  - Use cmComputeComponentGraph to identify the component DAG
    of link dependencies in cmComputeLinkDepends
  - Emit non-trivial component members more than once but always
    in a contiguous group on the link line",[],Source/cmComputeTargetDepends.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_520.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_520.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_520.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1340.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1340.cpp,295,292,396,-1,"fprintf(stderr, ""The strongly connected components are:\n"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1092.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1092.cpp,"{
  fprintf(stderr, ""The strongly connected components are:\n"");
  int n = static_cast<int>(this->Components.size());
  for(int c = 0; c < n; ++c)
    {
    ComponentList const& cl = this->Components[c];
    fprintf(stderr, ""Component (%d):\n"", c);
    for(ComponentList::const_iterator ci = cl.begin();
        ci != cl.end(); ++ci)
      {
      int i = *ci;
      fprintf(stderr, ""  contains target %d [%s]\n"",
              i, this->Targets[i]->GetName());
      }
    }
  fprintf(stderr, ""\n"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1092.cpp,"[0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 48, 0, 0, 3, 5, 0, 0, 7, 5, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 28, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 2, 0, 0, 0, 10, 0, 0, 4, 0, 13, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1092.cpp,2,"[""unkown"", ""string""]",[]
433099ecddb334cc6e43c6302594d7c713ef4d1e,ENH: Converted cmMakefile DefineFlags added by ADD_DEFINITIONS command into a COMPILE_DEFINITIONS directory property.,[],Tests/Preprocess/preprocess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_522.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_522.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_522.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1345.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1345.cpp,82,94,86,98,,"fprintf(stderr, ""DIRECTORY_DEF_DEBUG should be defined in C\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1102.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1102.cpp,"{
  fprintf(stderr, ""FILE_DEF_RELEASE should not be defined in C\n"");
  result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1102.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1102.cpp,78,"[""unkown"", ""string""]",[]
433099ecddb334cc6e43c6302594d7c713ef4d1e,ENH: Converted cmMakefile DefineFlags added by ADD_DEFINITIONS command into a COMPILE_DEFINITIONS directory property.,[],Tests/Preprocess/preprocess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_522.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_522.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_522.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1347.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1347.cpp,153,177,157,181,,"fprintf(stderr, ""DIRECTORY_DEF not defined in C\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1104.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1104.cpp,"{
  fprintf(stderr, ""OLD_DEF not defined in C\n"");
  result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1104.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1104.cpp,149,"[""unkown"", ""string""]",[]
433099ecddb334cc6e43c6302594d7c713ef4d1e,ENH: Converted cmMakefile DefineFlags added by ADD_DEFINITIONS command into a COMPILE_DEFINITIONS directory property.,[],Tests/Preprocess/preprocess.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_523.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_523.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_523.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1350.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1350.cpp,84,96,88,100,,"fprintf(stderr, ""DIRECTORY_DEF_DEBUG should be defined in CXX\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1107.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1107.cpp,"{
  fprintf(stderr, ""FILE_DEF_RELEASE should not be defined in CXX\n"");
  result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1107.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1107.cpp,78,"[""unkown"", ""string""]",[]
433099ecddb334cc6e43c6302594d7c713ef4d1e,ENH: Converted cmMakefile DefineFlags added by ADD_DEFINITIONS command into a COMPILE_DEFINITIONS directory property.,[],Tests/Preprocess/preprocess.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_523.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_523.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_523.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1352.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1352.cpp,155,179,159,183,,"fprintf(stderr, ""DIRECTORY_DEF not defined in CXX\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1109.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1109.cpp,"{
  fprintf(stderr, ""OLD_DEF not defined in CXX\n"");
  result = 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1109.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1109.cpp,149,"[""unkown"", ""string""]",[]
50c5d5a3d5b6edc32baf3f6102368aae535262e0,ENH: fix leaks and turn on by default,[],Source/kwsys/SystemInformation.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_524.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_524.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_524.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1353.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1353.cpp,171,172,176,177,"sprintf(temp,""%d"",this->ChipID.Type);",str << this->ChipID.Type;,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1110.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1110.cpp,"{
  char * temp = new char[32];
  sprintf(temp,""%d"",this->ChipID.Type);
  return temp;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1110.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1110.cpp,3,"[""char *"", ""string"", ""member""]",[]
50c5d5a3d5b6edc32baf3f6102368aae535262e0,ENH: fix leaks and turn on by default,[],Source/kwsys/SystemInformation.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_524.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_524.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_524.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1353.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1353.cpp,171,172,184,185,"sprintf(temp,""%d"",this->ChipID.Family);",str << this->ChipID.Family;,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1111.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1111.cpp,"{
  char * temp = new char[32];
  sprintf(temp,""%d"",this->ChipID.Family);
  return temp;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1111.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1111.cpp,3,"[""char *"", ""string"", ""member""]",[]
50c5d5a3d5b6edc32baf3f6102368aae535262e0,ENH: fix leaks and turn on by default,[],Source/kwsys/SystemInformation.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_524.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_524.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_524.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1353.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1353.cpp,171,172,192,193,"sprintf(temp,""%d"",this->ChipID.Model);",str << this->ChipID.Model;,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1112.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1112.cpp,"{
  char * temp = new char[32];
  sprintf(temp,""%d"",this->ChipID.Model);
  return temp;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1112.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1112.cpp,3,"[""char *"", ""string"", ""member""]",[]
50c5d5a3d5b6edc32baf3f6102368aae535262e0,ENH: fix leaks and turn on by default,[],Source/kwsys/SystemInformation.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_524.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_524.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_524.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1353.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1353.cpp,171,172,200,201,"sprintf(temp,""%d"",this->ChipID.Revision);",str << this->ChipID.Revision;,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1113.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1113.cpp,"{
  char * temp = new char[32];
  sprintf(temp,""%d"",this->ChipID.Revision);
  return temp;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1113.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1113.cpp,3,"[""char *"", ""string"", ""member""]",[]
a65193857293f065139bc991488d0cef9a199c16,ENH: fix the compile and add install rule,[],Source/WXDialog/CMakeSetupFrame.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_526.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_526.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_526.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1356.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1356.cpp,1693,1696,1695,-1,"cmversion.Printf(""v%i.%i %s"", cmake::GetMajorVersion(), cmake::GetMinorVersion(), cmake::GetReleaseVersion());",,3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1115.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1115.cpp,"{
    CMAboutDlg *dlg = new CMAboutDlg(this);
    
    wxArrayString generators;
    std::vector<std::string> names; 
    m_cmake->GetRegisteredGenerators(names);
    for(std::vector<std::string>::iterator i = names.begin(); i != names.end(); ++i)
        generators.Add(i->c_str());

    wxString cmversion, cmsversion;
    cmversion.Printf(""v%i.%i %s"", cmake::GetMajorVersion(), cmake::GetMinorVersion(), cmake::GetReleaseVersion());
    cmsversion.Printf(""v%i.%i%s"", CMAKEGUI_MAJORVER, CMAKEGUI_MINORVER, CMAKEGUI_ADDVER);

    dlg->SetAboutText(cmversion, cmsversion, generators);

    dlg->ShowModal();
    dlg->Destroy();
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1115.cpp,"[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 74, 0, 0, 4, 6, 0, 0, 3, 2, 0, 0, 0, 0, 1, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 16, 0, 0, 7, 0, 16, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1115.cpp,11,"[""constant"", ""cmake :: GetMajorVersion_ret"", ""cmake :: GetMinorVersion_ret"", ""cmake :: GetReleaseVersion_ret""]",[]
3edcd70754afe7c6b2ff71e0010c6b3d64b4fe37,ENH: Update zlib to 1.2.3. Addresses bugs #5445 and #3473.,"[u'https://gitlab.kitware.com/cmake/cmake/issues/5445', u'https://gitlab.kitware.com/cmake/cmake/issues/3473']",Utilities/cmzlib/gzio.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_529.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_529.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_529.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1365.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1365.cpp,528,606,537,617,,"len = vsprintf(buf, format, va);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1117.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1117.cpp,"{
    char buf[Z_PRINTF_BUFSIZE];
    va_list va;
    int len;

    va_start(va, format);
#ifdef HAS_vsnprintf
    (void)vsnprintf(buf, sizeof(buf), format, va);
#else
    (void)vsprintf(buf, format, va);
#endif
    va_end(va);
    len = strlen(buf); /* some *sprintf don't return the nb of bytes written */
    if (len <= 0) return 0;

    return gzwrite(file, buf, (unsigned)len);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1117.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 34, 0, 0, 3, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 24, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 1, 1, 1, 0, 7, 0, 0, 5, 0, 15, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1117.cpp,13,"[""char *""]",[]
9c2d6f98d7e0fd42bcf2ec78fbd66190c6dc439e,"ENH: apply patch from Mathieu which creates a deb file (not finishsed yet)

Alex",[],Source/CPack/cmCPackGenerators.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_530.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_530.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_530.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1367.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1367.cpp,90,90,92,-1,"fprintf(stderr, ""********* NewGen %s\n"", name);",,3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1122.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1122.cpp,"{
  cmCPackGenericGenerator* gen = this->NewGeneratorInternal(name);
  fprintf(stderr, ""********* NewGen %s\n"", name);
  if ( !gen )
    {
    return 0;
    }
  this->Generators.push_back(gen);
  gen->SetLogger(this->Logger);
  return gen;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1122.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 22, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1122.cpp,3,"[""unkown"", ""string"", ""const char *""]",[]
9c2d6f98d7e0fd42bcf2ec78fbd66190c6dc439e,"ENH: apply patch from Mathieu which creates a deb file (not finishsed yet)

Alex",[],Source/CPack/cmCPackGenerators.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_530.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_530.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_530.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1368.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1368.cpp,106,105,108,-1,"fprintf(stderr, ""*** 1 name==0\n"");",,3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1123.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1123.cpp,"{
      fprintf(stderr, ""*** 1 name==0\n"");
    return 0;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1123.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1123.cpp,5,"[""unkown"", ""string""]","[""const char *"", ""!""]"
9c2d6f98d7e0fd42bcf2ec78fbd66190c6dc439e,"ENH: apply patch from Mathieu which creates a deb file (not finishsed yet)

Alex",[],Source/CPack/cmCPackGenerators.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_530.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_530.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_530.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1368.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1368.cpp,106,105,111,-1,"fprintf(stderr, ""*** 2 name==%s\n"", name);",,3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1124.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1124.cpp,"{
  if ( !name )
    {
      fprintf(stderr, ""*** 1 name==0\n"");
    return 0;
    }
      fprintf(stderr, ""*** 2 name==%s\n"", name);
  cmCPackGenerators::t_GeneratorCreatorsMap::iterator it
    = this->GeneratorCreators.find(name);
  if ( it == this->GeneratorCreators.end() )
    {
      fprintf(stderr, ""*** 2 name==%s not found\n"", name);
    return 0;
    }
  return (it->second)();
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1124.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 27, 0, 0, 1, 1, 0, 0, 1, 5, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 0, 6, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1124.cpp,8,"[""unkown"", ""string"", ""const char *""]","[""const char *"", ""!"", ""!""]"
9c2d6f98d7e0fd42bcf2ec78fbd66190c6dc439e,"ENH: apply patch from Mathieu which creates a deb file (not finishsed yet)

Alex",[],Source/CPack/cmCPackGenerators.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_530.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_530.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_530.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1368.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1368.cpp,106,105,116,-1,"fprintf(stderr, ""*** 2 name==%s not found\n"", name);",,3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1125.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1125.cpp,"{
      fprintf(stderr, ""*** 2 name==%s not found\n"", name);
    return 0;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1125.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1125.cpp,13,"[""unkown"", ""string"", ""const char *""]","[""cmCPackGenerators :: t_GeneratorCreatorsMap :: iterator"", ""this -> GeneratorCreators . end_ret"", ""==""]"
d75bfedab59d325b72d575beac8844290de0c279,COMP: Need to include header for unlink function.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1372.cpp,52,52,56,55,,"fprintf(ofp, ""# include <io.h>\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1127.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1127.cpp,"e((n = (int)fread(buffer, 1, 1024, ifp)) > 0)
    {
    fprintf(ofp, ""static unsigned char kwsysEncodedArray%s_%d[%d] = {\n"", 
            argv[4], count++, n);
    for(i=0; i < n-1; ++i)
      {
      fprintf(ofp, ""0x%02X"", buffer[i]);
      if(i%10 == 9)
        {
        fprintf(ofp, "",\n"");
        }
      else
        {
        fprintf(ofp, "", "");
        }
      }
    fprintf(ofp, ""0x%02X};\n\n"", buffer[n-1]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1127.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 1, 14, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 1, 1, 0, 6, 0, 0, 5, 0, 16, 0, 1, 0, 1, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1127.cpp,39,"[""unsigned char *"", ""int"", ""int"", ""fopen_ret""]","[""fopen_ret"", ""!"", ""!""]"
d75bfedab59d325b72d575beac8844290de0c279,COMP: Need to include header for unlink function.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1372.cpp,52,52,56,56,,"fprintf(ofp, ""#else\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1128.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1128.cpp,"e((n = (int)fread(buffer, 1, 1024, ifp)) > 0)
    {
    fprintf(ofp, ""static unsigned char kwsysEncodedArray%s_%d[%d] = {\n"", 
            argv[4], count++, n);
    for(i=0; i < n-1; ++i)
      {
      fprintf(ofp, ""0x%02X"", buffer[i]);
      if(i%10 == 9)
        {
        fprintf(ofp, "",\n"");
        }
      else
        {
        fprintf(ofp, "", "");
        }
      }
    fprintf(ofp, ""0x%02X};\n\n"", buffer[n-1]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1128.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 1, 14, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 1, 1, 0, 6, 0, 0, 5, 0, 16, 0, 1, 0, 1, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1128.cpp,39,"[""unsigned char *"", ""int"", ""int"", ""fopen_ret""]","[""fopen_ret"", ""!"", ""!""]"
d75bfedab59d325b72d575beac8844290de0c279,COMP: Need to include header for unlink function.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1372.cpp,52,52,56,57,,"fprintf(ofp, ""# include <unistd.h>\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1129.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1129.cpp,"e((n = (int)fread(buffer, 1, 1024, ifp)) > 0)
    {
    fprintf(ofp, ""static unsigned char kwsysEncodedArray%s_%d[%d] = {\n"", 
            argv[4], count++, n);
    for(i=0; i < n-1; ++i)
      {
      fprintf(ofp, ""0x%02X"", buffer[i]);
      if(i%10 == 9)
        {
        fprintf(ofp, "",\n"");
        }
      else
        {
        fprintf(ofp, "", "");
        }
      }
    fprintf(ofp, ""0x%02X};\n\n"", buffer[n-1]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1129.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 1, 14, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 1, 1, 0, 6, 0, 0, 5, 0, 16, 0, 1, 0, 1, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1129.cpp,39,"[""unsigned char *"", ""int"", ""int"", ""fopen_ret""]","[""fopen_ret"", ""!"", ""!""]"
d75bfedab59d325b72d575beac8844290de0c279,COMP: Need to include header for unlink function.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1372.cpp,52,52,56,58,,"fprintf(ofp, ""#endif\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1130.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1130.cpp,"e((n = (int)fread(buffer, 1, 1024, ifp)) > 0)
    {
    fprintf(ofp, ""static unsigned char kwsysEncodedArray%s_%d[%d] = {\n"", 
            argv[4], count++, n);
    for(i=0; i < n-1; ++i)
      {
      fprintf(ofp, ""0x%02X"", buffer[i]);
      if(i%10 == 9)
        {
        fprintf(ofp, "",\n"");
        }
      else
        {
        fprintf(ofp, "", "");
        }
      }
    fprintf(ofp, ""0x%02X};\n\n"", buffer[n-1]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1130.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 1, 14, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 1, 1, 0, 6, 0, 0, 5, 0, 16, 0, 1, 0, 1, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1130.cpp,39,"[""unsigned char *"", ""int"", ""int"", ""fopen_ret""]","[""fopen_ret"", ""!"", ""!""]"
d75bfedab59d325b72d575beac8844290de0c279,COMP: Need to include header for unlink function.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1372.cpp,52,52,56,59,,"fprintf(ofp, ""\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1131.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1131.cpp,"e((n = (int)fread(buffer, 1, 1024, ifp)) > 0)
    {
    fprintf(ofp, ""static unsigned char kwsysEncodedArray%s_%d[%d] = {\n"", 
            argv[4], count++, n);
    for(i=0; i < n-1; ++i)
      {
      fprintf(ofp, ""0x%02X"", buffer[i]);
      if(i%10 == 9)
        {
        fprintf(ofp, "",\n"");
        }
      else
        {
        fprintf(ofp, "", "");
        }
      }
    fprintf(ofp, ""0x%02X};\n\n"", buffer[n-1]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1131.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 1, 14, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 1, 1, 0, 6, 0, 0, 5, 0, 16, 0, 1, 0, 1, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1131.cpp,39,"[""unsigned char *"", ""int"", ""int"", ""fopen_ret""]","[""fopen_ret"", ""!"", ""!""]"
d75bfedab59d325b72d575beac8844290de0c279,COMP: Need to include header for unlink function.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1372.cpp,52,52,56,60,,"fprintf(ofp, ""static void kwsys_unlink(const char* fname)\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1132.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1132.cpp,"e((n = (int)fread(buffer, 1, 1024, ifp)) > 0)
    {
    fprintf(ofp, ""static unsigned char kwsysEncodedArray%s_%d[%d] = {\n"", 
            argv[4], count++, n);
    for(i=0; i < n-1; ++i)
      {
      fprintf(ofp, ""0x%02X"", buffer[i]);
      if(i%10 == 9)
        {
        fprintf(ofp, "",\n"");
        }
      else
        {
        fprintf(ofp, "", "");
        }
      }
    fprintf(ofp, ""0x%02X};\n\n"", buffer[n-1]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1132.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 1, 14, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 1, 1, 0, 6, 0, 0, 5, 0, 16, 0, 1, 0, 1, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1132.cpp,39,"[""unsigned char *"", ""int"", ""int"", ""fopen_ret""]","[""fopen_ret"", ""!"", ""!""]"
d75bfedab59d325b72d575beac8844290de0c279,COMP: Need to include header for unlink function.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1372.cpp,52,52,56,61,,"fprintf(ofp, ""{\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1133.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1133.cpp,"e((n = (int)fread(buffer, 1, 1024, ifp)) > 0)
    {
    fprintf(ofp, ""static unsigned char kwsysEncodedArray%s_%d[%d] = {\n"", 
            argv[4], count++, n);
    for(i=0; i < n-1; ++i)
      {
      fprintf(ofp, ""0x%02X"", buffer[i]);
      if(i%10 == 9)
        {
        fprintf(ofp, "",\n"");
        }
      else
        {
        fprintf(ofp, "", "");
        }
      }
    fprintf(ofp, ""0x%02X};\n\n"", buffer[n-1]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1133.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 1, 14, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 1, 1, 0, 6, 0, 0, 5, 0, 16, 0, 1, 0, 1, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1133.cpp,39,"[""unsigned char *"", ""int"", ""int"", ""fopen_ret""]","[""fopen_ret"", ""!"", ""!""]"
d75bfedab59d325b72d575beac8844290de0c279,COMP: Need to include header for unlink function.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1372.cpp,52,52,56,62,,"fprintf(ofp, ""#if defined(__WATCOMC__)\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1134.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1134.cpp,"e((n = (int)fread(buffer, 1, 1024, ifp)) > 0)
    {
    fprintf(ofp, ""static unsigned char kwsysEncodedArray%s_%d[%d] = {\n"", 
            argv[4], count++, n);
    for(i=0; i < n-1; ++i)
      {
      fprintf(ofp, ""0x%02X"", buffer[i]);
      if(i%10 == 9)
        {
        fprintf(ofp, "",\n"");
        }
      else
        {
        fprintf(ofp, "", "");
        }
      }
    fprintf(ofp, ""0x%02X};\n\n"", buffer[n-1]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1134.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 1, 14, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 1, 1, 0, 6, 0, 0, 5, 0, 16, 0, 1, 0, 1, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1134.cpp,39,"[""unsigned char *"", ""int"", ""int"", ""fopen_ret""]","[""fopen_ret"", ""!"", ""!""]"
d75bfedab59d325b72d575beac8844290de0c279,COMP: Need to include header for unlink function.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1372.cpp,52,52,56,63,,"fprintf(ofp, ""  unlink(fname);\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1135.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1135.cpp,"e((n = (int)fread(buffer, 1, 1024, ifp)) > 0)
    {
    fprintf(ofp, ""static unsigned char kwsysEncodedArray%s_%d[%d] = {\n"", 
            argv[4], count++, n);
    for(i=0; i < n-1; ++i)
      {
      fprintf(ofp, ""0x%02X"", buffer[i]);
      if(i%10 == 9)
        {
        fprintf(ofp, "",\n"");
        }
      else
        {
        fprintf(ofp, "", "");
        }
      }
    fprintf(ofp, ""0x%02X};\n\n"", buffer[n-1]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1135.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 1, 14, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 1, 1, 0, 6, 0, 0, 5, 0, 16, 0, 1, 0, 1, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1135.cpp,39,"[""unsigned char *"", ""int"", ""int"", ""fopen_ret""]","[""fopen_ret"", ""!"", ""!""]"
d75bfedab59d325b72d575beac8844290de0c279,COMP: Need to include header for unlink function.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1372.cpp,52,52,56,64,,"fprintf(ofp, ""#else\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1136.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1136.cpp,"e((n = (int)fread(buffer, 1, 1024, ifp)) > 0)
    {
    fprintf(ofp, ""static unsigned char kwsysEncodedArray%s_%d[%d] = {\n"", 
            argv[4], count++, n);
    for(i=0; i < n-1; ++i)
      {
      fprintf(ofp, ""0x%02X"", buffer[i]);
      if(i%10 == 9)
        {
        fprintf(ofp, "",\n"");
        }
      else
        {
        fprintf(ofp, "", "");
        }
      }
    fprintf(ofp, ""0x%02X};\n\n"", buffer[n-1]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1136.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 1, 14, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 1, 1, 0, 6, 0, 0, 5, 0, 16, 0, 1, 0, 1, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1136.cpp,39,"[""unsigned char *"", ""int"", ""int"", ""fopen_ret""]","[""fopen_ret"", ""!"", ""!""]"
d75bfedab59d325b72d575beac8844290de0c279,COMP: Need to include header for unlink function.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1372.cpp,52,52,56,65,,"fprintf(ofp, ""  _unlink(fname);\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1137.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1137.cpp,"e((n = (int)fread(buffer, 1, 1024, ifp)) > 0)
    {
    fprintf(ofp, ""static unsigned char kwsysEncodedArray%s_%d[%d] = {\n"", 
            argv[4], count++, n);
    for(i=0; i < n-1; ++i)
      {
      fprintf(ofp, ""0x%02X"", buffer[i]);
      if(i%10 == 9)
        {
        fprintf(ofp, "",\n"");
        }
      else
        {
        fprintf(ofp, "", "");
        }
      }
    fprintf(ofp, ""0x%02X};\n\n"", buffer[n-1]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1137.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 1, 14, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 1, 1, 0, 6, 0, 0, 5, 0, 16, 0, 1, 0, 1, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1137.cpp,39,"[""unsigned char *"", ""int"", ""int"", ""fopen_ret""]","[""fopen_ret"", ""!"", ""!""]"
d75bfedab59d325b72d575beac8844290de0c279,COMP: Need to include header for unlink function.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1372.cpp,52,52,56,66,,"fprintf(ofp, ""#endif\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1138.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1138.cpp,"e((n = (int)fread(buffer, 1, 1024, ifp)) > 0)
    {
    fprintf(ofp, ""static unsigned char kwsysEncodedArray%s_%d[%d] = {\n"", 
            argv[4], count++, n);
    for(i=0; i < n-1; ++i)
      {
      fprintf(ofp, ""0x%02X"", buffer[i]);
      if(i%10 == 9)
        {
        fprintf(ofp, "",\n"");
        }
      else
        {
        fprintf(ofp, "", "");
        }
      }
    fprintf(ofp, ""0x%02X};\n\n"", buffer[n-1]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1138.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 1, 14, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 1, 1, 0, 6, 0, 0, 5, 0, 16, 0, 1, 0, 1, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1138.cpp,39,"[""unsigned char *"", ""int"", ""int"", ""fopen_ret""]","[""fopen_ret"", ""!"", ""!""]"
d75bfedab59d325b72d575beac8844290de0c279,COMP: Need to include header for unlink function.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1372.cpp,52,52,56,67,,"fprintf(ofp, ""}\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1139.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1139.cpp,"e((n = (int)fread(buffer, 1, 1024, ifp)) > 0)
    {
    fprintf(ofp, ""static unsigned char kwsysEncodedArray%s_%d[%d] = {\n"", 
            argv[4], count++, n);
    for(i=0; i < n-1; ++i)
      {
      fprintf(ofp, ""0x%02X"", buffer[i]);
      if(i%10 == 9)
        {
        fprintf(ofp, "",\n"");
        }
      else
        {
        fprintf(ofp, "", "");
        }
      }
    fprintf(ofp, ""0x%02X};\n\n"", buffer[n-1]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1139.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 1, 14, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 1, 1, 0, 6, 0, 0, 5, 0, 16, 0, 1, 0, 1, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1139.cpp,39,"[""unsigned char *"", ""int"", ""int"", ""fopen_ret""]","[""fopen_ret"", ""!"", ""!""]"
d75bfedab59d325b72d575beac8844290de0c279,COMP: Need to include header for unlink function.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1372.cpp,52,52,56,68,,"fprintf(ofp, ""\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1140.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1140.cpp,"e((n = (int)fread(buffer, 1, 1024, ifp)) > 0)
    {
    fprintf(ofp, ""static unsigned char kwsysEncodedArray%s_%d[%d] = {\n"", 
            argv[4], count++, n);
    for(i=0; i < n-1; ++i)
      {
      fprintf(ofp, ""0x%02X"", buffer[i]);
      if(i%10 == 9)
        {
        fprintf(ofp, "",\n"");
        }
      else
        {
        fprintf(ofp, "", "");
        }
      }
    fprintf(ofp, ""0x%02X};\n\n"", buffer[n-1]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1140.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 1, 14, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 1, 1, 0, 6, 0, 0, 5, 0, 16, 0, 1, 0, 1, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1140.cpp,39,"[""unsigned char *"", ""int"", ""int"", ""fopen_ret""]","[""fopen_ret"", ""!"", ""!""]"
d75bfedab59d325b72d575beac8844290de0c279,COMP: Need to include header for unlink function.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1373.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1373.cpp,78,93,80,-1,"fprintf(ofp, ""#ifdef __WATCOMC__\n"");",,3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1141.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1141.cpp,"{
  FILE* ifp;
  FILE* ofp;
  int i;
  int n;
  int count = 0;
  unsigned char buffer[1024];
  
  /* Check arguments.  */
  if(argc != 5)
    {
    fprintf(stderr, ""Usage: %s <input> <output> <kwsys-name> <array>\n"",
            argv[0]);
    return 1;
    }
  
  /* Open the input file.  */
  ifp = fopen(argv[1], ""rb"");
  if(!ifp)
    {
    fprintf(stderr, ""Cannot open input file: \""%s\""\n"", argv[1]);
    return 2;
    }
  ofp = fopen(argv[2], ""w"");
  if(!ofp)
    {
    fprintf(stderr, ""Cannot open output file: \""%s\""\n"", argv[2]);
    return 2;
    }
  
  /* Prepend header comment.  */
  fprintf(ofp, ""/*\n * DO NOT EDIT\n * This file is generated by:\n"");
  fprintf(ofp, "" * %s\n */\n\n"", argv[0]);
  fprintf(ofp, ""#include \""kwsysPrivate.h\""\n"");
  fprintf(ofp, ""#include KWSYS_HEADER(Configure.h)\n\n"");
  fprintf(ofp, ""#include <stdio.h>\n\n"");
  
  /* Split file up in 1024-byte chunks.  */
  while((n = (int)fread(buffer, 1, 1024, ifp)) > 0)
    {
    fprintf(ofp, ""static unsigned char kwsysEncodedArray%s_%d[%d] = {\n"", 
            argv[4], count++, n);
    for(i=0; i < n-1; ++i)
      {
      fprintf(ofp, ""0x%02X"", buffer[i]);
      if(i%10 == 9)
        {
        fprintf(ofp, "",\n"");
        }
      else
        {
        fprintf(ofp, "", "");
        }
      }
    fprintf(ofp, ""0x%02X};\n\n"", buffer[n-1]);
    }
  fclose(ifp);
  
  /* Provide a function to write the data to a file.  */
  fprintf(ofp, ""extern %s_EXPORT int %sEncodedWriteArray%s(const char* fname)\n"",
          argv[3], argv[3], argv[4]);
  fprintf(ofp, ""{\n"");
  fprintf(ofp, ""#ifdef __WATCOMC__\n"");
  fprintf(ofp, ""#define _unlink unlink\n"");
  fprintf(ofp, ""#endif\n"");
  fprintf(ofp, ""  FILE* ofp = fopen(fname, \""wb\"");\n"");
  fprintf(ofp, ""  if(!ofp) { return 0; }\n"");
  for(i=0; i < count; ++i)
    {
    fprintf(ofp, ""  if(fwrite(kwsysEncodedArray%s_%d, 1,\n""
                 ""            sizeof(kwsysEncodedArray%s_%d), ofp) !=\n""
                 ""       sizeof(kwsysEncodedArray%s_%d))\n"",
            argv[4], i, argv[4], i, argv[4], i);
    fprintf(ofp, ""    {\n"");
    fprintf(ofp, ""    fclose(ofp);\n"");
    fprintf(ofp, ""    _unlink(fname);\n"");
    fprintf(ofp, ""    return 0;\n"");
    fprintf(ofp, ""    }\n"");
    }
  fprintf(ofp, ""  fclose(ofp);\n"");
  fprintf(ofp, ""  return 1;\n"");
  fprintf(ofp, ""}\n"");
  fclose(ofp);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1141.cpp,"[4, 1, 2, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 0, 134, 0, 0, 6, 6, 0, 0, 3, 62, 0, 0, 0, 0, 2, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 16, 0, 7, 4, 1, 0, 34, 0, 0, 33, 0, 86, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1141.cpp,63,"[""fopen_ret"", ""string""]","[""fopen_ret"", ""!"", ""!""]"
d75bfedab59d325b72d575beac8844290de0c279,COMP: Need to include header for unlink function.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1373.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1373.cpp,78,93,81,-1,"fprintf(ofp, ""#define _unlink unlink\n"");",,3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1142.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1142.cpp,"{
  FILE* ifp;
  FILE* ofp;
  int i;
  int n;
  int count = 0;
  unsigned char buffer[1024];
  
  /* Check arguments.  */
  if(argc != 5)
    {
    fprintf(stderr, ""Usage: %s <input> <output> <kwsys-name> <array>\n"",
            argv[0]);
    return 1;
    }
  
  /* Open the input file.  */
  ifp = fopen(argv[1], ""rb"");
  if(!ifp)
    {
    fprintf(stderr, ""Cannot open input file: \""%s\""\n"", argv[1]);
    return 2;
    }
  ofp = fopen(argv[2], ""w"");
  if(!ofp)
    {
    fprintf(stderr, ""Cannot open output file: \""%s\""\n"", argv[2]);
    return 2;
    }
  
  /* Prepend header comment.  */
  fprintf(ofp, ""/*\n * DO NOT EDIT\n * This file is generated by:\n"");
  fprintf(ofp, "" * %s\n */\n\n"", argv[0]);
  fprintf(ofp, ""#include \""kwsysPrivate.h\""\n"");
  fprintf(ofp, ""#include KWSYS_HEADER(Configure.h)\n\n"");
  fprintf(ofp, ""#include <stdio.h>\n\n"");
  
  /* Split file up in 1024-byte chunks.  */
  while((n = (int)fread(buffer, 1, 1024, ifp)) > 0)
    {
    fprintf(ofp, ""static unsigned char kwsysEncodedArray%s_%d[%d] = {\n"", 
            argv[4], count++, n);
    for(i=0; i < n-1; ++i)
      {
      fprintf(ofp, ""0x%02X"", buffer[i]);
      if(i%10 == 9)
        {
        fprintf(ofp, "",\n"");
        }
      else
        {
        fprintf(ofp, "", "");
        }
      }
    fprintf(ofp, ""0x%02X};\n\n"", buffer[n-1]);
    }
  fclose(ifp);
  
  /* Provide a function to write the data to a file.  */
  fprintf(ofp, ""extern %s_EXPORT int %sEncodedWriteArray%s(const char* fname)\n"",
          argv[3], argv[3], argv[4]);
  fprintf(ofp, ""{\n"");
  fprintf(ofp, ""#ifdef __WATCOMC__\n"");
  fprintf(ofp, ""#define _unlink unlink\n"");
  fprintf(ofp, ""#endif\n"");
  fprintf(ofp, ""  FILE* ofp = fopen(fname, \""wb\"");\n"");
  fprintf(ofp, ""  if(!ofp) { return 0; }\n"");
  for(i=0; i < count; ++i)
    {
    fprintf(ofp, ""  if(fwrite(kwsysEncodedArray%s_%d, 1,\n""
                 ""            sizeof(kwsysEncodedArray%s_%d), ofp) !=\n""
                 ""       sizeof(kwsysEncodedArray%s_%d))\n"",
            argv[4], i, argv[4], i, argv[4], i);
    fprintf(ofp, ""    {\n"");
    fprintf(ofp, ""    fclose(ofp);\n"");
    fprintf(ofp, ""    _unlink(fname);\n"");
    fprintf(ofp, ""    return 0;\n"");
    fprintf(ofp, ""    }\n"");
    }
  fprintf(ofp, ""  fclose(ofp);\n"");
  fprintf(ofp, ""  return 1;\n"");
  fprintf(ofp, ""}\n"");
  fclose(ofp);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1142.cpp,"[4, 1, 2, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 0, 134, 0, 0, 6, 6, 0, 0, 3, 62, 0, 0, 0, 0, 2, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 16, 0, 7, 4, 1, 0, 34, 0, 0, 33, 0, 86, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1142.cpp,64,"[""fopen_ret"", ""string""]","[""fopen_ret"", ""!"", ""!""]"
d75bfedab59d325b72d575beac8844290de0c279,COMP: Need to include header for unlink function.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1373.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1373.cpp,78,93,82,-1,"fprintf(ofp, ""#endif\n"");",,3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1143.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1143.cpp,"{
  FILE* ifp;
  FILE* ofp;
  int i;
  int n;
  int count = 0;
  unsigned char buffer[1024];
  
  /* Check arguments.  */
  if(argc != 5)
    {
    fprintf(stderr, ""Usage: %s <input> <output> <kwsys-name> <array>\n"",
            argv[0]);
    return 1;
    }
  
  /* Open the input file.  */
  ifp = fopen(argv[1], ""rb"");
  if(!ifp)
    {
    fprintf(stderr, ""Cannot open input file: \""%s\""\n"", argv[1]);
    return 2;
    }
  ofp = fopen(argv[2], ""w"");
  if(!ofp)
    {
    fprintf(stderr, ""Cannot open output file: \""%s\""\n"", argv[2]);
    return 2;
    }
  
  /* Prepend header comment.  */
  fprintf(ofp, ""/*\n * DO NOT EDIT\n * This file is generated by:\n"");
  fprintf(ofp, "" * %s\n */\n\n"", argv[0]);
  fprintf(ofp, ""#include \""kwsysPrivate.h\""\n"");
  fprintf(ofp, ""#include KWSYS_HEADER(Configure.h)\n\n"");
  fprintf(ofp, ""#include <stdio.h>\n\n"");
  
  /* Split file up in 1024-byte chunks.  */
  while((n = (int)fread(buffer, 1, 1024, ifp)) > 0)
    {
    fprintf(ofp, ""static unsigned char kwsysEncodedArray%s_%d[%d] = {\n"", 
            argv[4], count++, n);
    for(i=0; i < n-1; ++i)
      {
      fprintf(ofp, ""0x%02X"", buffer[i]);
      if(i%10 == 9)
        {
        fprintf(ofp, "",\n"");
        }
      else
        {
        fprintf(ofp, "", "");
        }
      }
    fprintf(ofp, ""0x%02X};\n\n"", buffer[n-1]);
    }
  fclose(ifp);
  
  /* Provide a function to write the data to a file.  */
  fprintf(ofp, ""extern %s_EXPORT int %sEncodedWriteArray%s(const char* fname)\n"",
          argv[3], argv[3], argv[4]);
  fprintf(ofp, ""{\n"");
  fprintf(ofp, ""#ifdef __WATCOMC__\n"");
  fprintf(ofp, ""#define _unlink unlink\n"");
  fprintf(ofp, ""#endif\n"");
  fprintf(ofp, ""  FILE* ofp = fopen(fname, \""wb\"");\n"");
  fprintf(ofp, ""  if(!ofp) { return 0; }\n"");
  for(i=0; i < count; ++i)
    {
    fprintf(ofp, ""  if(fwrite(kwsysEncodedArray%s_%d, 1,\n""
                 ""            sizeof(kwsysEncodedArray%s_%d), ofp) !=\n""
                 ""       sizeof(kwsysEncodedArray%s_%d))\n"",
            argv[4], i, argv[4], i, argv[4], i);
    fprintf(ofp, ""    {\n"");
    fprintf(ofp, ""    fclose(ofp);\n"");
    fprintf(ofp, ""    _unlink(fname);\n"");
    fprintf(ofp, ""    return 0;\n"");
    fprintf(ofp, ""    }\n"");
    }
  fprintf(ofp, ""  fclose(ofp);\n"");
  fprintf(ofp, ""  return 1;\n"");
  fprintf(ofp, ""}\n"");
  fclose(ofp);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1143.cpp,"[4, 1, 2, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 0, 134, 0, 0, 6, 6, 0, 0, 3, 62, 0, 0, 0, 0, 2, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 16, 0, 7, 4, 1, 0, 34, 0, 0, 33, 0, 86, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1143.cpp,65,"[""fopen_ret"", ""string""]","[""fopen_ret"", ""!"", ""!""]"
d75bfedab59d325b72d575beac8844290de0c279,COMP: Need to include header for unlink function.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_534.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1374.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1374.cpp,91,103,93,105,"fprintf(ofp, ""    _unlink(fname);\n"");","fprintf(ofp, ""    kwsys_unlink(fname);\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1144.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1144.cpp,"{
    fprintf(ofp, ""  if(fwrite(kwsysEncodedArray%s_%d, 1,\n""
                 ""            sizeof(kwsysEncodedArray%s_%d), ofp) !=\n""
                 ""       sizeof(kwsysEncodedArray%s_%d))\n"",
            argv[4], i, argv[4], i, argv[4], i);
    fprintf(ofp, ""    {\n"");
    fprintf(ofp, ""    fclose(ofp);\n"");
    fprintf(ofp, ""    _unlink(fname);\n"");
    fprintf(ofp, ""    return 0;\n"");
    fprintf(ofp, ""    }\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1144.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 6, 0, 0, 6, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1144.cpp,76,"[""fopen_ret"", ""string""]","[""null"", ""fopen_ret"", ""<""]"
9314bb49e09b323f1c889d95448ca5dd0a42cc61,ENH: Update Curl to 7.16.1,[],Utilities/cmcurl/base64.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_535.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_535.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_535.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1375.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1375.cpp,205,256,212,272,"fprintf(stdout, ""%s"",   base64);","fprintf(stdout, ""%s\n"", base64);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1145.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1145.cpp,"{
  char *base64;
  size_t base64Len;
  unsigned char *data;
  int dataLen;

  data = (unsigned char *)suck(&dataLen);
  base64Len = Curl_base64_encode(data, dataLen, &base64);

  fprintf(stderr, ""%d\n"", base64Len);
  fprintf(stdout, ""%s"",   base64);

  free(base64); free(data);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1145.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 29, 0, 0, 4, 4, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 6, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1145.cpp,11,"[""unkown"", ""string"", ""char *""]",[]
9314bb49e09b323f1c889d95448ca5dd0a42cc61,ENH: Update Curl to 7.16.1,[],Utilities/cmcurl/base64.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_535.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_535.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_535.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1375.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1375.cpp,205,256,214,264,,"fprintf(stderr, ""Error: curl_easy_init failed\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1146.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1146.cpp,"{
  char *base64;
  size_t base64Len;
  unsigned char *data;
  int dataLen;

  data = (unsigned char *)suck(&dataLen);
  base64Len = Curl_base64_encode(data, dataLen, &base64);

  fprintf(stderr, ""%d\n"", base64Len);
  fprintf(stdout, ""%s"",   base64);

  free(base64); free(data);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1146.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 29, 0, 0, 4, 4, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 6, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1146.cpp,13,"[""suck_ret""]",[]
9314bb49e09b323f1c889d95448ca5dd0a42cc61,ENH: Update Curl to 7.16.1,[],Utilities/cmcurl/base64.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_535.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_535.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_535.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1376.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1376.cpp,235,298,242,304,,"fprintf(stderr, ""Error: curl_easy_init failed\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1147.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1147.cpp,"{
  char *base64;
  int base64Len;
  unsigned char *data;
  int dataLen;
  int i, j;

  base64 = (char *)suck(&base64Len);
  data = (unsigned char *)malloc(base64Len * 3/4 + 8);
  dataLen = Curl_base64_decode(base64, data);

  fprintf(stderr, ""%d\n"", dataLen);

  for(i=0; i < dataLen; i+=0x10) {
    printf(""0x%02x: "", i);
    for(j=0; j < 0x10; j++)
      if((j+i) < dataLen)
        printf(""%02x "", data[i+j]);
      else
        printf(""   "");

    printf("" | "");

    for(j=0; j < 0x10; j++)
      if((j+i) < dataLen)
        printf(""%c"", isgraph(data[i+j])?data[i+j]:'.');
      else
        break;
    puts("""");
  }

  free(base64); free(data);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1147.cpp,"[2, 0, 3, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 68, 0, 0, 5, 6, 0, 0, 3, 18, 0, 0, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 1, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 3, 0, 6, 3, 3, 0, 13, 0, 0, 12, 0, 19, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1147.cpp,12,"[""unkown"", ""string"", ""Curl_base64_decode_ret""]",[]
9314bb49e09b323f1c889d95448ca5dd0a42cc61,ENH: Update Curl to 7.16.1,[],Utilities/cmcurl/base64.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_535.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_535.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_535.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1377.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1377.cpp,253,323,256,331,"printf(""%c"", isgraph(data[i+j])?data[i+j]:'.');","printf(""%c"", ISGRAPH(data[i+j])?data[i+j]:'.');",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1148.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1148.cpp,"printf(""%c"", isgraph(data[i+j])?data[i+j]:'.')",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1148.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1148.cpp,26,"[""string"", ""member""]","[""null"", ""Curl_base64_decode_ret"", ""<""]"
9314bb49e09b323f1c889d95448ca5dd0a42cc61,ENH: Update Curl to 7.16.1,[],Utilities/cmcurl/hostip4.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_541.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_541.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_541.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1385.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1385.cpp,125,101,163,-1,"snprintf((char*)(h->h_name), 16, ""%s"", hostname);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1154.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1154.cpp,"{
  Curl_addrinfo *ai;
  struct hostent *h;
  struct in_addr *addrentry;
  struct namebuf buffer;
  struct namebuf *buf = &buffer;

  h = &buf->hostentry;
  h->h_addr_list = &buf->h_addr_list[0];
  addrentry = &buf->addrentry;
  addrentry->s_addr = num;
  h->h_addr_list[0] = (char*)addrentry;
  h->h_addr_list[1] = NULL;
  h->h_addrtype = AF_INET;
  h->h_length = sizeof(*addrentry);
  h->h_name = &buf->h_name[0];
  h->h_aliases = NULL;

  /* Now store the dotted version of the address */
  snprintf((char*)(h->h_name), 16, ""%s"", hostname);

  ai = Curl_he2ai(h, port);

  return ai;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1154.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 75, 0, 0, 5, 5, 0, 0, 1, 6, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 25, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 12, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1154.cpp,20,"[""member"", ""int"", ""string"", ""char *""]",[]
9314bb49e09b323f1c889d95448ca5dd0a42cc61,ENH: Update Curl to 7.16.1,[],Utilities/cmcurl/hostip6.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_542.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_542.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_542.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1388.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1388.cpp,244,272,251,290,"snprintf(sbuf, sizeof(sbuf), ""%d"", port);","snprintf(sbuf, sizeof(sbuf), ""%d"", port);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1159.cpp,"{
  struct addrinfo hints, *res;
  int error;
  char sbuf[NI_MAXSERV];
  curl_socket_t s;
  int pf;
  struct SessionHandle *data = conn->data;

  *waitp=0; /* don't wait, we have the response now */

  /* see if we have an IPv6 stack */
  s = socket(PF_INET6, SOCK_DGRAM, 0);
  if (s < 0) {
    /* Some non-IPv6 stacks have been found to make very slow name resolves
     * when PF_UNSPEC is used, so thus we switch to a mere PF_INET lookup if
     * the stack seems to be a non-ipv6 one. */

    pf = PF_INET;
  }
  else {
    /* This seems to be an IPv6-capable stack, use PF_UNSPEC for the widest
     * possible checks. And close the socket again.
     */
    sclose(s);

    /*
     * Check if a more limited name resolve has been requested.
     */
    switch(data->set.ip_version) {
    case CURL_IPRESOLVE_V4:
      pf = PF_INET;
      break;
    case CURL_IPRESOLVE_V6:
      pf = PF_INET6;
      break;
    default:
      pf = PF_UNSPEC;
      break;
    }
  }
 
  memset(&hints, 0, sizeof(hints));
  hints.ai_family = pf;
  hints.ai_socktype = SOCK_STREAM;
  hints.ai_flags = AI_CANONNAME;
  snprintf(sbuf, sizeof(sbuf), ""%d"", port);
  error = getaddrinfo(hostname, sbuf, &hints, &res);
  if (error) {
    infof(data, ""getaddrinfo(3) failed for %s:%d\n"", hostname, port);    
    return NULL;
  }

  return res;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1159.cpp,"[2, 0, 0, 0, 3, 0, 2, 1, 2, 1, 5, 0, 0, 0, 0, 76, 0, 0, 6, 7, 0, 0, 1, 6, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 44, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 1, 0, 3, 2, 1, 0, 8, 0, 0, 14, 0, 21, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1159.cpp,49,"[""char *"", ""unkown"", ""string"", ""int""]",[]
9314bb49e09b323f1c889d95448ca5dd0a42cc61,ENH: Update Curl to 7.16.1,[],Utilities/cmcurl/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_543.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_543.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_543.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1389.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1389.cpp,145,150,152,157,"*userp = aprintf( ""%sAuthorization: Basic %s\015\012"",
                      proxy?""Proxy-"":"""",
                      authorization);","*userp = aprintf( ""%sAuthorization: Basic %s\r\n"",
                      proxy?""Proxy-"":"""",
                      authorization);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1160.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1160.cpp,"{
    if(*userp)
      free(*userp);
    *userp = aprintf( ""%sAuthorization: Basic %s\015\012"",
                      proxy?""Proxy-"":"""",
                      authorization);
    free(authorization);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1160.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1160.cpp,25,"[""string"", ""string"", ""char *""]","[""Curl_base64_encode_ret"", ""null"", "">""]"
9314bb49e09b323f1c889d95448ca5dd0a42cc61,ENH: Update Curl to 7.16.1,[],Utilities/cmcurl/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_543.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_543.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_543.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1390.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1390.cpp,895,1093,969,1167,,"host = aprintf(""Host: %s\r\n"", host_port);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1161.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1161.cpp,"{
    if(conn->newurl) {
      /* This only happens if we've looped here due to authentication reasons,
         and we don't really use the newly cloned URL here then. Just free()
         it. */
      free(conn->newurl);
      conn->newurl = NULL;
    }

    host_port = aprintf(""%s:%d"", hostname, remote_port);
    if(!host_port)
      return CURLE_OUT_OF_MEMORY;

    /* Setup the proxy-authorization header, if any */
    result = Curl_http_output_auth(conn, (char *)""CONNECT"", host_port, TRUE);
    if(CURLE_OK == result) {

      /* OK, now send the connect request to the proxy */
      result =
        Curl_sendf(tunnelsocket, conn,
                   ""CONNECT %s:%d HTTP/1.0\015\012""
                   ""%s""
                   ""%s""
                   ""\r\n"",
                   hostname, remote_port,
                   conn->bits.proxy_user_passwd?
                   conn->allocptr.proxyuserpwd:"""",
                   data->set.useragent?conn->allocptr.uagent:""""
                   );
      if(result)
        failf(data, ""Failed sending CONNECT to proxy"");
    }
    free(host_port);
    if(result)
      return result;

    FD_ZERO (&readfd);          /* clear it */
    FD_SET (tunnelsocket, &readfd);     /* read socket */

    /* get this in a backup variable to be able to restore it on each lap in
       the select() loop */
    rkeepfd = readfd;

    ptr=data->state.buffer;
    line_start = ptr;

    nread=0;
    perline=0;

    while((nread<BUFSIZE) && (keepon && !error)) {
      readfd = rkeepfd;     /* set every lap */
      interval.tv_sec = 1;  /* timeout each second and check the timeout */
      interval.tv_usec = 0;

      if(data->set.timeout) {
        /* if timeout is requested, find out how much remaining time we have */
        timeout = data->set.timeout - /* timeout time */
          Curl_tvdiff(Curl_tvnow(), conn->now)/1000; /* spent time */
        if(timeout <=0 ) {
          failf(data, ""Proxy connection aborted due to timeout"");
          error = SELECT_TIMEOUT; /* already too little time */
          break;
        }
      }

      switch (select (tunnelsocket+1, &readfd, NULL, NULL, &interval)) {
      case -1: /* select() error, stop reading */
        error = SELECT_ERROR;
        failf(data, ""Proxy CONNECT aborted due to select() error"");
        break;
      case 0: /* timeout */
        break;
      default:
        /*
         * This code previously didn't use the kerberos sec_read() code
         * to read, but when we use Curl_read() it may do so. Do confirm
         * that this is still ok and then remove this comment!
         */
        res= Curl_read(conn, tunnelsocket, ptr, BUFSIZE-nread, &gotbytes);
        if(res< 0)
          /* EWOULDBLOCK */
          continue; /* go loop yourself */
        else if(res)
          keepon = FALSE;
        else if(gotbytes <= 0) {
          keepon = FALSE;
          error = SELECT_ERROR;
          failf(data, ""Proxy CONNECT aborted"");
        }
        else {
          /*
           * We got a whole chunk of data, which can be anything from one byte
           * to a set of lines and possibly just a piece of the last line.
           *
           * TODO: To make this code work less error-prone, we need to make
           * sure that we read and create full lines before we compare them,
           * as there is really nothing that stops the proxy from delivering
           * the response lines in multiple parts, each part consisting of
           * only a little piece of the line(s).  */
          int i;

          nread += gotbytes;
          for(i = 0; i < gotbytes; ptr++, i++) {
            perline++; /* amount of bytes in this line so far */
            if(*ptr=='\n') {
              char letter;
              int writetype;

              /* output debug output if that is requested */
              if(data->set.verbose)
                Curl_debug(data, CURLINFO_HEADER_IN, line_start, perline,
                           conn->host.dispname);

              /* send the header to the callback */
              writetype = CLIENTWRITE_HEADER;
              if(data->set.include_header)
                writetype |= CLIENTWRITE_BODY;

              result = Curl_client_write(data, writetype, line_start, perline);
              if(result)
                return result;

              /* Newlines are CRLF, so the CR is ignored as the line isn't
                 really terminated until the LF comes. Treat a following CR
                 as end-of-headers as well.*/

              if(('\r' == line_start[0]) ||
                 ('\n' == line_start[0])) {
                /* end of response-headers from the proxy */
                keepon=FALSE;
                break; /* breaks out of for-loop, not switch() */
              }

              /* keep a backup of the position we are about to blank */
              letter = line_start[perline];
              line_start[perline]=0; /* zero terminate the buffer */
              if((checkprefix(""WWW-Authenticate:"", line_start) &&
                  (401 == k->httpcode)) ||
                 (checkprefix(""Proxy-authenticate:"", line_start) &&
                  (407 == k->httpcode))) {
                result = Curl_http_input_auth(conn, k->httpcode, line_start);
                if(result)
                  return result;
              }
              else if(2 == sscanf(line_start, ""HTTP/1.%d %d"",
                                  &subversion,
                                  &k->httpcode)) {
                /* store the HTTP code from the proxy */
                data->info.httpproxycode = k->httpcode;
              }
              /* put back the letter we blanked out before */
              line_start[perline]= letter;

              perline=0; /* line starts over here */
              line_start = ptr+1; /* this skips the zero byte we wrote */
            }
          }
        }
        break;
      } /* switch */
    } /* while there's buffer left and loop is requested */

    if(error)
      return CURLE_RECV_ERROR;

    if(data->info.httpproxycode != 200)
      /* Deal with the possibly already received authenticate
         headers. 'newurl' is set to a new URL if we must loop. */
      Curl_http_auth_act(conn);

  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1161.cpp,"[20, 1, 1, 0, 5, 1, 5, 1, 2, 1, 25, 0, 0, 0, 0, 234, 0, 0, 3, 3, 0, 0, 1, 39, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 2, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 25, 22, 3, 0, 22, 0, 0, 42, 3, 60, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1161.cpp,67,"[""unkown""]","[""Curl_http_output_auth_ret"", ""!""]"
9314bb49e09b323f1c889d95448ca5dd0a42cc61,ENH: Update Curl to 7.16.1,[],Utilities/cmcurl/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_543.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_543.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_543.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1391.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1391.cpp,1300,1710,1319,1724,"conn->allocptr.ref = aprintf(""Referer: %s\015\012"", data->change.referer);","conn->allocptr.ref = aprintf(""Referer: %s\r\n"", data->change.referer);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1162.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1162.cpp,"conn->allocptr.ref = aprintf(""Referer: %s\015\012"", data->change.referer)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1162.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1162.cpp,92,"[""string"", ""member""]","[""member"", ""checkheaders_ret"", ""!"", ""&&""]"
9314bb49e09b323f1c889d95448ca5dd0a42cc61,ENH: Update Curl to 7.16.1,[],Utilities/cmcurl/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_543.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_543.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_543.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1391.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1391.cpp,1300,1710,1352,1735,,"(""Accept-Encoding: %s\r\n"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1163.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1163.cpp,"{
  struct SessionHandle *data=conn->data;
  char *buf = data->state.buffer; /* this is a short cut to the buffer */
  CURLcode result;
  struct HTTP *http;
  char *ppath = conn->path;
  char *host = conn->host.name;
  const char *te = """"; /* tranfer-encoding */
  char *ptr;
  char *request;
  Curl_HttpReq httpreq = data->set.httpreq;
  char *addcookies = NULL;

  if(!conn->proto.http) {
    /* Only allocate this struct if we don't already have it! */

    http = (struct HTTP *)malloc(sizeof(struct HTTP));
    if(!http)
      return CURLE_OUT_OF_MEMORY;
    memset(http, 0, sizeof(struct HTTP));
    conn->proto.http = http;
  }
  else
    http = conn->proto.http;

  /* We default to persistant connections */
  conn->bits.close = FALSE;

  if ( (conn->protocol&(PROT_HTTP|PROT_FTP)) &&
       data->set.upload) {
    httpreq = HTTPREQ_PUT;
  }

  /* Now set the 'request' pointer to the proper request string */
  if(data->set.customrequest)
    request = data->set.customrequest;
  else {
    if(conn->bits.no_body)
      request = (char *)""HEAD"";
    else {
      curlassert((httpreq > HTTPREQ_NONE) && (httpreq < HTTPREQ_LAST));
      switch(httpreq) {
      case HTTPREQ_POST:
      case HTTPREQ_POST_FORM:
        request = (char *)""POST"";
        break;
      case HTTPREQ_PUT:
        request = (char *)""PUT"";
        break;
      default: /* this should never happen */
      case HTTPREQ_GET:
        request = (char *)""GET"";
        break;
      case HTTPREQ_HEAD:
        request = (char *)""HEAD"";
        break;
      }
    }
  }

  /* The User-Agent string might have been allocated in url.c already, because
     it might have been used in the proxy connect, but if we have got a header
     with the user-agent string specified, we erase the previously made string
     here. */
  if(checkheaders(data, ""User-Agent:"") && conn->allocptr.uagent) {
    free(conn->allocptr.uagent);
    conn->allocptr.uagent=NULL;
  }

  /* setup the authentication headers */
  result = Curl_http_output_auth(conn, request, ppath, FALSE);
  if(result)
    return result;

  if((!data->state.authhost.done || !data->state.authproxy.done ) &&
     (httpreq != HTTPREQ_GET)) {
    /* Until we are authenticated, we switch over to HEAD. Unless its a GET
       we want to do. The explanation for this is rather long and boring, but
       the point is that it can't be done otherwise without risking having to
       send the POST or PUT data multiple times. */
    httpreq = HTTPREQ_HEAD;
    request = (char *)""HEAD"";
    conn->bits.no_body = TRUE;
    conn->bits.authprobe = TRUE; /* this is a request done to probe for
                                    authentication methods */
  }
  else
    conn->bits.authprobe = FALSE;

  Curl_safefree(conn->allocptr.ref);
  if(data->change.referer && !checkheaders(data, ""Referer:""))
    conn->allocptr.ref = aprintf(""Referer: %s\015\012"", data->change.referer);
  else
    conn->allocptr.ref = NULL;

  if(data->set.cookie && !checkheaders(data, ""Cookie:""))
    addcookies = data->set.cookie;

  if(!conn->bits.upload_chunky && (httpreq != HTTPREQ_GET)) {
    /* not a chunky transfer yet, but data is to be sent */
    ptr = checkheaders(data, ""Transfer-Encoding:"");
    if(ptr) {
      /* Some kind of TE is requested, check if 'chunked' is chosen */
      conn->bits.upload_chunky =
        Curl_compareheader(ptr, ""Transfer-Encoding:"", ""chunked"");
      te = """";
    }
  }
  else if(conn->bits.upload_chunky) {
    /* RFC2616 section 4.4:
       Messages MUST NOT include both a Content-Length header field and a
       non-identity transfer-coding. If the message does include a non-
       identity transfer-coding, the Content-Length MUST be ignored. */

    if(!checkheaders(data, ""Transfer-Encoding:"")) {
      te = ""Transfer-Encoding: chunked\r\n"";
    }
    else {
      te = """";
      conn->bits.upload_chunky = FALSE; /* transfer-encoding was disabled,
                                           so don't chunkify this! */
    }
  }

  Curl_safefree(conn->allocptr.host);

  ptr = checkheaders(data, ""Host:"");
  if(ptr && !data->state.this_is_a_follow) {
    /* If we have a given custom Host: header, we extract the host name in
       order to possibly use it for cookie reasons later on. We only allow the
       custom Host: header if this is NOT a redirect, as setting Host: in the
       redirected request is being out on thin ice. */
    char *start = ptr+strlen(""Host:"");
    while(*start && isspace((int)*start ))
      start++;
    ptr = start; /* start host-scanning here */

    /* scan through the string to find the end (space or colon) */
    while(*ptr && !isspace((int)*ptr) && !(':'==*ptr))
      ptr++;

    if(ptr != start) {
      size_t len=ptr-start;
      conn->allocptr.cookiehost = malloc(len+1);
      if(!conn->allocptr.cookiehost)
        return CURLE_OUT_OF_MEMORY;
      memcpy(conn->allocptr.cookiehost, start, len);
      conn->allocptr.cookiehost[len]=0;
    }

    conn->allocptr.host = NULL;
  }
  else {
    /* When building Host: headers, we must put the host name within
       [brackets] if the host name is a plain IPv6-address. RFC2732-style. */

    if(((conn->protocol&PROT_HTTPS) && (conn->remote_port == PORT_HTTPS)) ||
       (!(conn->protocol&PROT_HTTPS) && (conn->remote_port == PORT_HTTP)) )
      /* If (HTTPS on port 443) OR (non-HTTPS on port 80) then don't include
         the port number in the host string */
      conn->allocptr.host = aprintf(""Host: %s%s%s\r\n"",
                                    conn->bits.ipv6_ip?""["":"""",
                                    host,
                                    conn->bits.ipv6_ip?""]"":"""");
    else
      conn->allocptr.host = aprintf(""Host: %s%s%s:%d\r\n"",
                                    conn->bits.ipv6_ip?""["":"""",
                                    host,
                                    conn->bits.ipv6_ip?""]"":"""",
                                    conn->remote_port);

    if(!conn->allocptr.host)
      /* without Host: we can't make a nice request */
      return CURLE_OUT_OF_MEMORY;
  }

  if (conn->bits.httpproxy && !conn->bits.tunnel_proxy)  {
    /* Using a proxy but does not tunnel through it */

    /* The path sent to the proxy is in fact the entire URL. But if the remote
       host is a IDN-name, we must make sure that the request we produce only
       uses the encoded host name! */
    if(conn->host.dispname != conn->host.name) {
      char *url = data->change.url;
      char *iPtr = strstr(url, conn->host.dispname);
      if(iPtr) {
        /* This is where the display name starts in the URL, now replace this
           part with the encoded name. TODO: This method of replacing the host
           name is rather crude as I believe there's a slight risk that the
           user has entered a user name or password that contain the host name
           string. */
        size_t currlen = strlen(conn->host.dispname);
        size_t newlen = strlen(conn->host.name);
        size_t urllen = strlen(url);

        char *newurl;

        newurl = malloc(urllen + newlen - currlen + 1);
        if(newurl) {
          /* copy the part before the host name */
          memcpy(newurl, url, iPtr - url);
          /* append the new host name instead of the old */
          memcpy(newurl + (iPtr - url), conn->host.name, newlen);
          /* append the piece after the host name */
          memcpy(newurl + newlen + (iPtr - url),
                 iPtr + currlen, /* copy the trailing zero byte too */
                 urllen - (iPtr-url) - currlen + 1);
          if(data->change.url_alloc)
            free(data->change.url);
          data->change.url = newurl;
          data->change.url_alloc = TRUE;
        }
        else
          return CURLE_OUT_OF_MEMORY;
      }
    }
    ppath = data->change.url;
  }
  if(HTTPREQ_POST_FORM == httpreq) {
    /* we must build the whole darned post sequence first, so that we have
       a size of the whole shebang before we start to send it */
     result = Curl_getFormData(&http->sendit, data->set.httppost,
                               &http->postsize);
     if(CURLE_OK != result) {
       /* Curl_getFormData() doesn't use failf() */
       failf(data, ""failed creating formpost data"");
       return result;
     }
  }


  if(!checkheaders(data, ""Pragma:""))
    http->p_pragma = ""Pragma: no-cache\r\n"";

  if(!checkheaders(data, ""Accept:""))
    http->p_accept = ""Accept: */*\r\n"";

  if(( (HTTPREQ_POST == httpreq) ||
       (HTTPREQ_POST_FORM == httpreq) ||
       (HTTPREQ_PUT == httpreq) ) &&
     conn->resume_from) {
    /**********************************************************************
     * Resuming upload in HTTP means that we PUT or POST and that we have
     * got a resume_from value set. The resume value has already created
     * a Range: header that will be passed along. We need to ""fast forward""
     * the file the given number of bytes and decrease the assume upload
     * file size before we continue this venture in the dark lands of HTTP.
     *********************************************************************/

    if(conn->resume_from < 0 ) {
      /*
       * This is meant to get the size of the present remote-file by itself.
       * We don't support this now. Bail out!
       */
       conn->resume_from = 0;
    }

    if(conn->resume_from) {
      /* do we still game? */
      curl_off_t passed=0;

      /* Now, let's read off the proper amount of bytes from the
         input. If we knew it was a proper file we could've just
         fseek()ed but we only have a stream here */
      do {
        size_t readthisamountnow = (size_t)(conn->resume_from - passed);
        size_t actuallyread;

        if(readthisamountnow > BUFSIZE)
          readthisamountnow = BUFSIZE;

        actuallyread =
          data->set.fread(data->state.buffer, 1, (size_t)readthisamountnow,
                          data->set.in);

        passed += actuallyread;
        if(actuallyread != readthisamountnow) {
          failf(data, ""Could only read %"" FORMAT_OFF_T
                "" bytes from the input"",
                passed);
          return CURLE_READ_ERROR;
        }
      } while(passed != conn->resume_from); /* loop until done */

      /* now, decrease the size of the read */
      if(data->set.infilesize>0) {
        data->set.infilesize -= conn->resume_from;

        if(data->set.infilesize <= 0) {
          failf(data, ""File already completely uploaded"");
          return CURLE_PARTIAL_FILE;
        }
      }
      /* we've passed, proceed as normal */
    }
  }
  if(conn->bits.use_range) {
    /*
     * A range is selected. We use different headers whether we're downloading
     * or uploading and we always let customized headers override our internal
     * ones if any such are specified.
     */
    if((httpreq == HTTPREQ_GET) &&
       !checkheaders(data, ""Range:"")) {
      /* if a line like this was already allocated, free the previous one */
      if(conn->allocptr.rangeline)
        free(conn->allocptr.rangeline);
      conn->allocptr.rangeline = aprintf(""Range: bytes=%s\r\n"", conn->range);
    }
    else if((httpreq != HTTPREQ_GET) &&
            !checkheaders(data, ""Content-Range:"")) {

      if(conn->resume_from) {
        /* This is because ""resume"" was selected */
        curl_off_t total_expected_size=
          conn->resume_from + data->set.infilesize;
        conn->allocptr.rangeline =
            aprintf(""Content-Range: bytes %s%"" FORMAT_OFF_T
                    ""/%"" FORMAT_OFF_T ""\r\n"",
                    conn->range, total_expected_size-1,
                    total_expected_size);
      }
      else {
        /* Range was selected and then we just pass the incoming range and
           append total size */
        conn->allocptr.rangeline =
            aprintf(""Content-Range: bytes %s/%"" FORMAT_OFF_T ""\r\n"",
                    conn->range, data->set.infilesize);
      }
    }
  }

  {
    /* Use 1.1 unless the use specificly asked for 1.0 */
    const char *httpstring=
      data->set.httpversion==CURL_HTTP_VERSION_1_0?""1.0"":""1.1"";

    send_buffer *req_buffer;
    struct curl_slist *headers=data->set.headers;
    curl_off_t postsize; /* off_t type to be able to hold a large file size */

    /* initialize a dynamic send-buffer */
    req_buffer = add_buffer_init();

    if(!req_buffer)
      return CURLE_OUT_OF_MEMORY;

    /* add the main request stuff */
    result =
      add_bufferf(req_buffer,
                  ""%s "" /* GET/HEAD/POST/PUT */
                  ""%s HTTP/%s\r\n"" /* path + HTTP version */
                  ""%s"" /* proxyuserpwd */
                  ""%s"" /* userpwd */
                  ""%s"" /* range */
                  ""%s"" /* user agent */
                  ""%s"" /* host */
                  ""%s"" /* pragma */
                  ""%s"" /* accept */
                  ""%s"" /* accept-encoding */
                  ""%s"" /* referer */
                  ""%s"",/* transfer-encoding */

                request,
                ppath,
                httpstring,
                conn->allocptr.proxyuserpwd?
                conn->allocptr.proxyuserpwd:"""",
                conn->allocptr.userpwd?conn->allocptr.userpwd:"""",
                (conn->bits.use_range && conn->allocptr.rangeline)?
                conn->allocptr.rangeline:"""",
                (data->set.useragent && *data->set.useragent && conn->allocptr.uagent)?
                conn->allocptr.uagent:"""",
                (conn->allocptr.host?conn->allocptr.host:""""), /* Host: host */
                http->p_pragma?http->p_pragma:"""",
                http->p_accept?http->p_accept:"""",
                (data->set.encoding && *data->set.encoding && conn->allocptr.accept_encoding)?
                conn->allocptr.accept_encoding:"""",
                (data->change.referer && conn->allocptr.ref)?conn->allocptr.ref:"""" /* Referer: <data> */,
                te
                );

    if(result)
      return result;

    if(data->cookies || addcookies) {
      struct Cookie *co=NULL; /* no cookies from start */
      int count=0;

      if(data->cookies) {
        Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
        co = Curl_cookie_getlist(data->cookies,
                                 conn->allocptr.cookiehost?
                                 conn->allocptr.cookiehost:host, ppath,
                                 (bool)(conn->protocol&PROT_HTTPS?TRUE:FALSE));
        Curl_share_unlock(data, CURL_LOCK_DATA_COOKIE);
      }
      if(co) {
        struct Cookie *store=co;
        /* now loop through all cookies that matched */
        while(co) {
          if(co->value) {
            if(0 == count) {
              result = add_bufferf(req_buffer, ""Cookie: "");
              if(result)
                break;
            }
            result = add_bufferf(req_buffer,
                                 ""%s%s=%s"", count?""; "":"""",
                                 co->name, co->value);
            if(result)
              break;
            count++;
          }
          co = co->next; /* next cookie please */
        }
        Curl_cookie_freelist(store); /* free the cookie list */
      }
      if(addcookies && (CURLE_OK == result)) {
        if(!count)
          result = add_bufferf(req_buffer, ""Cookie: "");
        if(CURLE_OK == result) {
          result = add_bufferf(req_buffer, ""%s%s"",
                               count?""; "":"""",
                               addcookies);
          count++;
        }
      }
      if(count && (CURLE_OK == result))
        result = add_buffer(req_buffer, ""\r\n"", 2);

      if(result)
        return result;
    }

    if(data->set.timecondition) {
      struct tm *thistime;

      /* Phil Karn (Fri, 13 Apr 2001) pointed out that the If-Modified-Since
       * header family should have their times set in GMT as RFC2616 defines:
       * ""All HTTP date/time stamps MUST be represented in Greenwich Mean Time
       * (GMT), without exception. For the purposes of HTTP, GMT is exactly
       * equal to UTC (Coordinated Universal Time)."" (see page 20 of RFC2616).
       */

#ifdef HAVE_GMTIME_R
      /* thread-safe version */
      struct tm keeptime;
      thistime = (struct tm *)gmtime_r(&data->set.timevalue, &keeptime);
#else
      thistime = gmtime(&data->set.timevalue);
#endif

#ifdef HAVE_STRFTIME
      /* format: ""Tue, 15 Nov 1994 12:45:26 GMT"" */
      strftime(buf, BUFSIZE-1, ""%a, %d %b %Y %H:%M:%S GMT"", thistime);
#else
      /* TODO: Right, we *could* write a replacement here */
      strcpy(buf, ""no strftime() support"");
#endif
      switch(data->set.timecondition) {
      case CURL_TIMECOND_IFMODSINCE:
      default:
        result = add_bufferf(req_buffer,
                             ""If-Modified-Since: %s\r\n"", buf);
        break;
      case CURL_TIMECOND_IFUNMODSINCE:
        result = add_bufferf(req_buffer,
                             ""If-Unmodified-Since: %s\r\n"", buf);
        break;
      case CURL_TIMECOND_LASTMOD:
        result = add_bufferf(req_buffer,
                             ""Last-Modified: %s\r\n"", buf);
        break;
      }
      if(result)
        return result;
    }

    while(headers) {
      ptr = strchr(headers->data, ':');
      if(ptr) {
        /* we require a colon for this to be a true header */

        ptr++; /* pass the colon */
        while(*ptr && isspace((int)*ptr))
          ptr++;

        if(*ptr) {
          /* only send this if the contents was non-blank */

          result = add_bufferf(req_buffer, ""%s\r\n"", headers->data);
          if(result)
            return result;
        }
      }
      headers = headers->next;
    }

    http->postdata = NULL;  /* nothing to post at this point */
    Curl_pgrsSetUploadSize(data, 0); /* upload size is 0 atm */

    /* If 'authdone' is FALSE, we must not set the write socket index to the
       Curl_transfer() call below, as we're not ready to actually upload any
       data yet. */

    switch(httpreq) {

    case HTTPREQ_POST_FORM:
      if(Curl_FormInit(&http->form, http->sendit)) {
        failf(data, ""Internal HTTP POST error!"");
        return CURLE_HTTP_POST_ERROR;
      }

      /* set the read function to read from the generated form data */
      conn->fread = (curl_read_callback)Curl_FormReader;
      conn->fread_in = &http->form;

      http->sending = HTTPSEND_BODY;

      if(!conn->bits.upload_chunky) {
        /* only add Content-Length if not uploading chunked */
        result = add_bufferf(req_buffer,
                             ""Content-Length: %"" FORMAT_OFF_T ""\r\n"",
                             http->postsize);
        if(result)
          return result;
      }

      if(!checkheaders(data, ""Expect:"")) {
        /* if not disabled explicitly we add a Expect: 100-continue
           to the headers which actually speeds up post operations (as
           there is one packet coming back from the web server) */
        result = add_bufferf(req_buffer,
                             ""Expect: 100-continue\r\n"");
        if(result)
          return result;
        data->set.expect100header = TRUE;
      }

      if(!checkheaders(data, ""Content-Type:"")) {
        /* Get Content-Type: line from Curl_formpostheader.

           The Content-Type header line also contains the MIME boundary
           string etc why disabling this header is likely to not make things
           work, but we support disabling it anyway.
        */
        char *contentType;
        size_t linelength=0;
        contentType = Curl_formpostheader((void *)&http->form,
                                          &linelength);
        if(!contentType) {
          failf(data, ""Could not get Content-Type header line!"");
          return CURLE_HTTP_POST_ERROR;
        }
        result = add_buffer(req_buffer, contentType, linelength);
        if(result)
          return result;
      }

      /* make the request end in a true CRLF */
      result = add_buffer(req_buffer, ""\r\n"", 2);
      if(result)
        return result;

      /* set upload size to the progress meter */
      Curl_pgrsSetUploadSize(data, http->postsize);

      /* fire away the whole request to the server */
      result = add_buffer_send(req_buffer, conn,
                               &data->info.request_size);
      if(result)
        failf(data, ""Failed sending POST request"");
      else
        /* setup variables for the upcoming transfer */
        result = Curl_Transfer(conn, FIRSTSOCKET, -1, TRUE,
                               &http->readbytecount,
                               FIRSTSOCKET,
                               &http->writebytecount);
      if(result) {
        Curl_formclean(http->sendit); /* free that whole lot */
        return result;
      }
      break;

    case HTTPREQ_PUT: /* Let's PUT the data to the server! */

      if((data->set.infilesize>0) && !conn->bits.upload_chunky) {
        /* only add Content-Length if not uploading chunked */
        result = add_bufferf(req_buffer,
                             ""Content-Length: %"" FORMAT_OFF_T ""\r\n"", /* size */
                             data->set.infilesize );
        if(result)
          return result;
      }

      if(!checkheaders(data, ""Expect:"")) {
        /* if not disabled explicitly we add a Expect: 100-continue
           to the headers which actually speeds up post operations (as
           there is one packet coming back from the web server) */
        result = add_bufferf(req_buffer,
                             ""Expect: 100-continue\r\n"");
        if(result)
          return result;
        data->set.expect100header = TRUE;
      }

      result = add_buffer(req_buffer, ""\r\n"", 2); /* end of headers */
      if(result)
        return result;

      /* set the upload size to the progress meter */
      Curl_pgrsSetUploadSize(data, data->set.infilesize);

      /* this sends the buffer and frees all the buffer resources */
      result = add_buffer_send(req_buffer, conn,
                               &data->info.request_size);
      if(result)
        failf(data, ""Failed sending POST request"");
      else
        /* prepare for transfer */
        result = Curl_Transfer(conn, FIRSTSOCKET, -1, TRUE,
                               &http->readbytecount,
                               FIRSTSOCKET,
                               &http->writebytecount);
      if(result)
        return result;
      break;

    case HTTPREQ_POST:
      /* this is the simple POST, using x-www-form-urlencoded style */

      /* store the size of the postfields */
      postsize = data->set.postfieldsize?
        data->set.postfieldsize:
        (data->set.postfields?(curl_off_t)strlen(data->set.postfields):0);

      if(!conn->bits.upload_chunky) {
        /* We only set Content-Length and allow a custom Content-Length if
           we don't upload data chunked, as RFC2616 forbids us to set both
           kinds of headers (Transfer-Encoding: chunked and Content-Length) */

        if(!checkheaders(data, ""Content-Length:"")) {
          /* we allow replacing this header, although it isn't very wise to
             actually set your own */
          result = add_bufferf(req_buffer,
                               ""Content-Length: %"" FORMAT_OFF_T""\r\n"",
                               postsize);
          if(result)
            return result;
        }
      }

      if(!checkheaders(data, ""Content-Type:"")) {
        result = add_bufferf(req_buffer,
                             ""Content-Type: application/x-www-form-urlencoded\r\n"");
        if(result)
          return result;
      }

      if(data->set.postfields) {

        if((data->state.authhost.done || data->state.authproxy.done )
           && (postsize < (100*1024))) {
          /* If we're not done with the authentication phase, we don't expect
             to actually send off any data yet. Hence, we delay the sending of
             the body until we receive that friendly 100-continue response */

          /* The post data is less than 100K, then append it to the header.
             This limit is no magic limit but only set to prevent really huge
             POSTs to get the data duplicated with malloc() and family. */

          result = add_buffer(req_buffer, ""\r\n"", 2); /* end of headers! */
          if(result)
            return result;

          if(!conn->bits.upload_chunky) {
            /* We're not sending it 'chunked', append it to the request
               already now to reduce the number if send() calls */
            result = add_buffer(req_buffer, data->set.postfields,
                                (size_t)postsize);
          }
          else {
            /* Append the POST data chunky-style */
            result = add_bufferf(req_buffer, ""%x\r\n"", (int)postsize);
            if(CURLE_OK == result)
              result = add_buffer(req_buffer, data->set.postfields,
                                  (size_t)postsize);
            if(CURLE_OK == result)
              result = add_buffer(req_buffer,
                                  ""\r\n0\r\n\r\n"", 7); /* end of a chunked
                                                          transfer stream */
          }
          if(result)
            return result;
        }
        else {
          /* A huge POST coming up, do data separate from the request */
          http->postsize = postsize;
          http->postdata = data->set.postfields;

          http->sending = HTTPSEND_BODY;

          conn->fread = (curl_read_callback)readmoredata;
          conn->fread_in = (void *)conn;

          /* set the upload size to the progress meter */
          Curl_pgrsSetUploadSize(data, http->postsize);

          if(!checkheaders(data, ""Expect:"")) {
            /* if not disabled explicitly we add a Expect: 100-continue to the
               headers which actually speeds up post operations (as there is
               one packet coming back from the web server) */
            add_bufferf(req_buffer,
                        ""Expect: 100-continue\r\n"");
            data->set.expect100header = TRUE;
          }

          add_buffer(req_buffer, ""\r\n"", 2); /* end of headers! */
        }
      }
      else {
        add_buffer(req_buffer, ""\r\n"", 2); /* end of headers! */

        /* set the upload size to the progress meter */
        Curl_pgrsSetUploadSize(data, data->set.infilesize);

        /* set the pointer to mark that we will send the post body using
           the read callback */
        http->postdata = (char *)&http->postdata;
      }
      /* issue the request */
      result = add_buffer_send(req_buffer, conn,
                               &data->info.request_size);

      if(result)
        failf(data, ""Failed sending HTTP POST request"");
      else
        result =
          Curl_Transfer(conn, FIRSTSOCKET, -1, TRUE,
                        &http->readbytecount,
                        http->postdata?FIRSTSOCKET:-1,
                        http->postdata?&http->writebytecount:NULL);
      break;

    default:
      add_buffer(req_buffer, ""\r\n"", 2);

      /* issue the request */
      result = add_buffer_send(req_buffer, conn,
                               &data->info.request_size);

      if(result)
        failf(data, ""Failed sending HTTP request"");
      else
        /* HTTP GET/HEAD download: */
        result = Curl_Transfer(conn, FIRSTSOCKET, -1, TRUE,
                               &http->readbytecount,
                               http->postdata?FIRSTSOCKET:-1,
                               http->postdata?&http->writebytecount:NULL);
    }
    if(result)
      return result;
  }

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1163.cpp,"[93, 5, 0, 1, 12, 0, 30, 3, 11, 3, 121, 0, 0, 0, 2, 1345, 0, 0, 34, 34, 0, 0, 23, 151, 0, 0, 0, 0, 20, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 720, 24, 675, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 1, 0, 126, 117, 43, 0, 116, 0, 0, 144, 2, 292, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1163.cpp,125,"[""member""]","[""Curl_http_output_auth_ret"", ""!""]"
9314bb49e09b323f1c889d95448ca5dd0a42cc61,ENH: Update Curl to 7.16.1,[],Utilities/cmcurl/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_543.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_543.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_543.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1392.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1392.cpp,1533,1942,1535,1944,"conn->allocptr.rangeline = aprintf(""Range: bytes=%s\r\n"", conn->range);","conn->allocptr.rangeline = aprintf(""Range: bytes=%s\r\n"", data->reqdata.range);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1164.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1164.cpp,"{
      /* if a line like this was already allocated, free the previous one */
      if(conn->allocptr.rangeline)
        free(conn->allocptr.rangeline);
      conn->allocptr.rangeline = aprintf(""Range: bytes=%s\r\n"", conn->range);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1164.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1164.cpp,308,"[""string"", ""member""]","[""Curl_HttpReq"", ""macro"", ""=="", ""checkheaders_ret"", ""!"", ""&&""]"
9314bb49e09b323f1c889d95448ca5dd0a42cc61,ENH: Update Curl to 7.16.1,[],Utilities/cmcurl/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_543.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_543.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_543.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1393.cpp,1674,2089,1683,2097,,"snprintf(buf, BUFSIZE-1,
               ""%s, %02d %s %4d %02d:%02d:%02d GMT"",
               Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
               tm->tm_mday,
               Curl_month[tm->tm_mon],
               tm->tm_year + 1900,
               tm->tm_hour,
               tm->tm_min,
               tm->tm_sec);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1165.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1165.cpp,"{
      struct tm *thistime;

      /* Phil Karn (Fri, 13 Apr 2001) pointed out that the If-Modified-Since
       * header family should have their times set in GMT as RFC2616 defines:
       * ""All HTTP date/time stamps MUST be represented in Greenwich Mean Time
       * (GMT), without exception. For the purposes of HTTP, GMT is exactly
       * equal to UTC (Coordinated Universal Time)."" (see page 20 of RFC2616).
       */

#ifdef HAVE_GMTIME_R
      /* thread-safe version */
      struct tm keeptime;
      thistime = (struct tm *)gmtime_r(&data->set.timevalue, &keeptime);
#else
      thistime = gmtime(&data->set.timevalue);
#endif

#ifdef HAVE_STRFTIME
      /* format: ""Tue, 15 Nov 1994 12:45:26 GMT"" */
      strftime(buf, BUFSIZE-1, ""%a, %d %b %Y %H:%M:%S GMT"", thistime);
#else
      /* TODO: Right, we *could* write a replacement here */
      strcpy(buf, ""no strftime() support"");
#endif
      switch(data->set.timecondition) {
      case CURL_TIMECOND_IFMODSINCE:
      default:
        result = add_bufferf(req_buffer,
                             ""If-Modified-Since: %s\r\n"", buf);
        break;
      case CURL_TIMECOND_IFUNMODSINCE:
        result = add_bufferf(req_buffer,
                             ""If-Unmodified-Since: %s\r\n"", buf);
        break;
      case CURL_TIMECOND_LASTMOD:
        result = add_bufferf(req_buffer,
                             ""Last-Modified: %s\r\n"", buf);
        break;
      }
      if(result)
        return result;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1165.cpp,"[1, 0, 0, 0, 3, 0, 1, 1, 3, 1, 3, 0, 0, 0, 0, 51, 0, 0, 2, 2, 0, 0, 0, 6, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 2, 0, 7, 0, 0, 7, 0, 18, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1165.cpp,456,"[""char *"", ""macro"", ""string"", ""gmtime_r_ret""]","[""member""]"
9314bb49e09b323f1c889d95448ca5dd0a42cc61,ENH: Update Curl to 7.16.1,[],Utilities/cmcurl/http_ntlm.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_545.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_545.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_545.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1400.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1400.cpp,372,708,387,745,,"DEBUG_OUT(fprintf(stderr, ""**** Header %s\n "", *allocuserpwd));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1200.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1200.cpp,"{
      Curl_safefree(*allocuserpwd);
      *allocuserpwd = aprintf(""%sAuthorization: NTLM %s\r\n"",
                              proxy?""Proxy-"":"""",
                              base64);
      free(base64);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1200.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1200.cpp,111,"[""char *""]","[""Curl_base64_encode_ret"", ""null"", "">""]"
9314bb49e09b323f1c889d95448ca5dd0a42cc61,ENH: Update Curl to 7.16.1,[],Utilities/cmcurl/http_ntlm.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_545.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_545.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_545.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1401.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1401.cpp,411,770,449,911,"size = snprintf((char *)ntlmbuf, sizeof(ntlmbuf),
                    ""NTLMSSP%c""
                    ""\x03%c%c%c"" /* type-3, 32 bits */

                    ""%c%c%c%c"" /* LanManager length + allocated space */
                    ""%c%c"" /* LanManager offset */
                    ""%c%c"";","size = snprintf((char *)ntlmbuf, sizeof(ntlmbuf),
                    NTLMSSP_SIGNATURE ""%c""
                    ""\x03%c%c%c"" /* type-3, 32 bits */

                    ""%c%c"" /* LanManager length */
                    ""%c%c"" /* LanManager allocated space */
                    ""%c%c"" /* LanManager offset */
                    ""%c%c"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1201.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1201.cpp,"{
    int lmrespoff;
    int ntrespoff;
    int useroff;
    unsigned char lmresp[0x18]; /* fixed-size */
#ifdef USE_NTRESPONSES
    unsigned char ntresp[0x18]; /* fixed-size */
#endif
    const char *user;
    int userlen;

    user = strchr(userp, '\\');
    if(!user)
      user = strchr(userp, '/');

    if (user) {
      domain = userp;
      domlen = (int)(user - domain);
      user++;
    }
    else
      user = userp;
    userlen = (int)strlen(user);

    mkhash(passwdp, &ntlm->nonce[0], lmresp
#ifdef USE_NTRESPONSES
           , ntresp
#endif
      );

    domoff = 64; /* always */
    useroff = domoff + domlen;
    hostoff = useroff + userlen;
    lmrespoff = hostoff + hostlen;
    ntrespoff = lmrespoff + 0x18;

    /* Create the big type-3 message binary blob */
    size = snprintf((char *)ntlmbuf, sizeof(ntlmbuf),
                    ""NTLMSSP%c""
                    ""\x03%c%c%c"" /* type-3, 32 bits */

                    ""%c%c%c%c"" /* LanManager length + allocated space */
                    ""%c%c"" /* LanManager offset */
                    ""%c%c"" /* 2 zeroes */

                    ""%c%c"" /* NT-response length */
                    ""%c%c"" /* NT-response allocated space */
                    ""%c%c"" /* NT-response offset */
                    ""%c%c"" /* 2 zeroes */

                    ""%c%c""  /* domain length */
                    ""%c%c""  /* domain allocated space */
                    ""%c%c""  /* domain name offset */
                    ""%c%c""  /* 2 zeroes */

                    ""%c%c""  /* user length */
                    ""%c%c""  /* user allocated space */
                    ""%c%c""  /* user offset */
                    ""%c%c""  /* 2 zeroes */

                    ""%c%c""  /* host length */
                    ""%c%c""  /* host allocated space */
                    ""%c%c""  /* host offset */
                    ""%c%c%c%c%c%c""  /* 6 zeroes */

                    ""\xff\xff""  /* message length */
                    ""%c%c""  /* 2 zeroes */

                    ""\x01\x82"" /* flags */
                    ""%c%c""  /* 2 zeroes */

                    /* domain string */
                    /* user string */
                    /* host string */
                    /* LanManager response */
                    /* NT response */
                    ,
                    0, /* zero termination */
                    0,0,0, /* type-3 long, the 24 upper bits */

                    SHORTPAIR(0x18),  /* LanManager response length, twice */
                    SHORTPAIR(0x18),
                    SHORTPAIR(lmrespoff),
                    0x0, 0x0,

#ifdef USE_NTRESPONSES
                    SHORTPAIR(0x18),  /* NT-response length, twice */
                    SHORTPAIR(0x18),
#else
                    0x0, 0x0,
                    0x0, 0x0,
#endif
                    SHORTPAIR(ntrespoff),
                    0x0, 0x0,

                    SHORTPAIR(domlen),
                    SHORTPAIR(domlen),
                    SHORTPAIR(domoff),
                    0x0, 0x0,

                    SHORTPAIR(userlen),
                    SHORTPAIR(userlen),
                    SHORTPAIR(useroff),
                    0x0, 0x0,

                    SHORTPAIR(hostlen),
                    SHORTPAIR(hostlen),
                    SHORTPAIR(hostoff),
                    0x0, 0x0, 0x0, 0x0, 0x0, 0x0,

                    0x0, 0x0,

                    0x0, 0x0);

    /* size is now 64 */
    size=64;
    ntlmbuf[62]=ntlmbuf[63]=0;

    memcpy(&ntlmbuf[size], domain, domlen);
    size += domlen;

    memcpy(&ntlmbuf[size], user, userlen);
    size += userlen;

    /* we append the binary hashes to the end of the blob */
    if(size < ((int)sizeof(ntlmbuf) - 0x18)) {
      memcpy(&ntlmbuf[size], lmresp, 0x18);
      size += 0x18;
    }

#ifdef USE_NTRESPONSES
    if(size < ((int)sizeof(ntlmbuf) - 0x18)) {
      memcpy(&ntlmbuf[size], ntresp, 0x18);
      size += 0x18;
    }
#endif

    ntlmbuf[56] = (unsigned char)(size & 0xff);
    ntlmbuf[57] = (unsigned char)(size >> 8);

    /* convert the binary blob into base64 */
    size = Curl_base64_encode((char *)ntlmbuf, size, &base64);

    if(size >0 ) {
      Curl_safefree(*allocuserpwd);
      *allocuserpwd = aprintf(""%sAuthorization: NTLM %s\r\n"",
                              proxy?""Proxy-"":"""",
                              base64);
      free(base64);
    }
    else
      return CURLE_OUT_OF_MEMORY; /* FIX TODO */

    ntlm->state = NTLMSTATE_TYPE3; /* we sent a type-3 */
    authp->done = TRUE;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1201.cpp,"[5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 1, 166, 0, 0, 7, 7, 0, 0, 0, 80, 0, 0, 0, 0, 1, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 1, 146, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 11, 0, 6, 6, 4, 0, 34, 0, 0, 32, 0, 94, 9, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1201.cpp,173,[],"[""member""]"
9314bb49e09b323f1c889d95448ca5dd0a42cc61,ENH: Update Curl to 7.16.1,[],Utilities/cmcurl/http_ntlm.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_545.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_545.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_545.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1402.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1402.cpp,518,983,560,1067,,"DEBUG_OUT(fprintf(stderr, ""**** %s\n "", *allocuserpwd));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1202.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1202.cpp,"{
      Curl_safefree(*allocuserpwd);
      *allocuserpwd = aprintf(""%sAuthorization: NTLM %s\r\n"",
                              proxy?""Proxy-"":"""",
                              base64);
      free(base64);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1202.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1202.cpp,284,"[""char *""]","[""Curl_base64_encode_ret"", ""null"", "">""]"
9314bb49e09b323f1c889d95448ca5dd0a42cc61,ENH: Update Curl to 7.16.1,[],Utilities/cmcurl/memdebug.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_547.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_547.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_547.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1407.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1407.cpp,200,205,202,207,"fprintf(logfile, ""MEM %s:%d realloc(0x%x, %zd) = %p\n"",
            source, line, ptr, wantedsize, mem?mem->mem:NULL);","fprintf(logfile, ""MEM %s:%d realloc(%p, %zd) = %p\n"",
            source, line, ptr, wantedsize, mem?mem->mem:NULL);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1203.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1203.cpp,"fprintf(logfile, ""MEM %s:%d realloc(0x%x, %zd) = %p\n"",
            source, line, ptr, wantedsize, mem?mem->mem:NULL)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1203.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1203.cpp,15,"[""unkown"", ""string"", ""const char *"", ""int"", ""void *"", ""size_t"", ""member""]","[""unkown""]"
2f84bd17581920eb5cbfc3b41e8cf477ba6a5853,ENH: added per test timeout support,[],Source/CTest/cmCTestTestHandler.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_548.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_548.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_548.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1408.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1408.cpp,559,559,561,686,,"sprintf(buffer, ""%02d:%02d:%02d"", hours, minutes, seconds);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1204.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1204.cpp,"void cmCTestTestHandler::ProcessDirectory(std::vector<cmStdString> &passed,
                                          std::vector<cmStdString> &failed)
{
  std::string current_dir = cmSystemTools::GetCurrentWorkingDirectory();
  this->TestList.clear();

  this->GetListOfTests();
  cmCTestTestHandler::ListOfTests::size_type tmsize = this->TestList.size();

  this->StartTest = this->CTest->CurrentTime();
  double elapsed_time_start = cmSystemTools::GetTime();

  *this->LogFile << ""Start testing: "" << this->StartTest << std::endl
    << ""----------------------------------------------------------""
    << std::endl;

  // how many tests are in based on RegExp?
  int inREcnt = 0;
  cmCTestTestHandler::ListOfTests::iterator it;
  for ( it = this->TestList.begin(); it != this->TestList.end(); it ++ )
    {
    if (it->IsInBasedOnREOptions)
      {
      inREcnt ++;
      }
    }
  // expand the test list based on the union flag
  if (this->UseUnion)
    {
    this->ExpandTestsToRunInformation((int)tmsize);
    }
  else
    {
    this->ExpandTestsToRunInformation(inREcnt);
    }

  int cnt = 0;
  inREcnt = 0;
  std::string last_directory = """";
  for ( it = this->TestList.begin(); it != this->TestList.end(); it ++ )
    {
    cnt ++;
    if (it->IsInBasedOnREOptions)
      {
      inREcnt++;
      }

    // if we are out of time then skip this test, we leave two minutes 
    // to submit results
    if (this->CTest->GetRemainingTimeAllowed() - 120 <= 0)
      {
      continue;
      }

    const std::string& testname = it->Name;
    std::vector<std::string>& args = it->Args;
    cmCTestTestResult cres;
    cres.Properties = &*it;
    cres.ExecutionTime = 0;
    cres.ReturnValue = -1;
    cres.Status = cmCTestTestHandler::NOT_RUN;
    cres.TestCount = cnt;

    if (!(last_directory == it->Directory))
      {
      cmCTestLog(this->CTest, HANDLER_VERBOSE_OUTPUT,
        ""Changing directory into "" << it->Directory.c_str() << ""\n"");
      *this->LogFile << ""Changing directory into: "" << it->Directory.c_str()
        << std::endl;
      last_directory = it->Directory;
      cmSystemTools::ChangeDirectory(it->Directory.c_str());
      }
    cres.Name = testname;
    cres.Path = it->Directory.c_str();

    if (this->UseUnion)
      {
      // if it is not in the list and not in the regexp then skip
      if ((this->TestsToRun.size() &&
           std::find(this->TestsToRun.begin(), this->TestsToRun.end(), cnt)
           == this->TestsToRun.end()) && !it->IsInBasedOnREOptions)
        {
        continue;
        }
      }
    else
      {
      // is this test in the list of tests to run? If not then skip it
      if ((this->TestsToRun.size() &&
           std::find(this->TestsToRun.begin(),
             this->TestsToRun.end(), inREcnt)
           == this->TestsToRun.end()) || !it->IsInBasedOnREOptions)
        {
        continue;
        }
      }

    cmCTestLog(this->CTest, HANDLER_OUTPUT, std::setw(3) << cnt << ""/"");
    cmCTestLog(this->CTest, HANDLER_OUTPUT, std::setw(3) << tmsize << "" "");
    if ( this->MemCheck )
      {
      cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Memory Check"");
      }
    else
      {
      cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Testing"");
      }
    cmCTestLog(this->CTest, HANDLER_OUTPUT, "" "");
    std::string outname = testname;
    outname.resize(30, ' ');
    *this->LogFile << cnt << ""/"" << tmsize << "" Testing: "" << testname
      << std::endl;

    if ( this->CTest->GetShowOnly() )
      {
      cmCTestLog(this->CTest, HANDLER_OUTPUT, outname.c_str() << std::endl);
      }
    else
      {
      cmCTestLog(this->CTest, HANDLER_OUTPUT, outname.c_str());
      }

    cmCTestLog(this->CTest, DEBUG, ""Testing "" << args[0].c_str() << "" ... "");
    // find the test executable
    std::string actualCommand = this->FindTheExecutable(args[1].c_str());
    std::string testCommand
      = cmSystemTools::ConvertToOutputPath(actualCommand.c_str());

    // continue if we did not find the executable
    if (testCommand == """")
      {
      *this->LogFile << ""Unable to find executable: "" << args[1].c_str()
        << std::endl;
      cmCTestLog(this->CTest, ERROR_MESSAGE, ""Unable to find executable: ""
        << args[1].c_str() << std::endl);
      cres.Output = ""Unable to find executable: "" + args[1];
      if ( !this->CTest->GetShowOnly() )
        {
        cres.FullCommandLine = actualCommand;
        this->TestResults.push_back( cres );
        failed.push_back(testname);
        continue;
        }
      }

    // add the arguments
    std::vector<std::string>::const_iterator j = args.begin();
    ++j;
    ++j;
    std::vector<const char*> arguments;
    this->GenerateTestCommand(arguments);
    arguments.push_back(actualCommand.c_str());
    for(;j != args.end(); ++j)
      {
      testCommand += "" "";
      testCommand += cmSystemTools::EscapeSpaces(j->c_str());
      arguments.push_back(j->c_str());
      }
    arguments.push_back(0);

    /**
     * Run an executable command and put the stdout in output.
     */
    std::string output;
    int retVal = 0;


    cmCTestLog(this->CTest, HANDLER_VERBOSE_OUTPUT, std::endl
      << (this->MemCheck?""MemCheck"":""Test"") << "" command: "" << testCommand
      << std::endl);
    *this->LogFile << cnt << ""/"" << tmsize
      << "" Test: "" << testname.c_str() << std::endl;
    *this->LogFile << ""Command: "";
    std::vector<cmStdString>::size_type ll;
    for ( ll = 0; ll < arguments.size()-1; ll ++ )
      {
      *this->LogFile << ""\"""" << arguments[ll] << ""\"" "";
      }
    *this->LogFile
      << std::endl
      << ""Directory: "" << it->Directory << std::endl
      << ""\"""" << testname.c_str() << ""\"" start time: ""
      << this->CTest->CurrentTime() << std::endl
      << ""Output:"" << std::endl
      << ""----------------------------------------------------------""
      << std::endl;
    int res = 0;
    double clock_start, clock_finish;
    clock_start = cmSystemTools::GetTime();

    if ( !this->CTest->GetShowOnly() )
      {
      res = this->CTest->RunTest(arguments, &output, &retVal, this->LogFile);
      }

    clock_finish = cmSystemTools::GetTime();

    if ( this->LogFile )
      {
      double ttime = clock_finish - clock_start;
      int hours = static_cast<int>(ttime / (60 * 60));
      int minutes = static_cast<int>(ttime / 60) % 60;
      int seconds = static_cast<int>(ttime) % 60;
      char buffer[100];
      sprintf(buffer, ""%02d:%02d:%02d"", hours, minutes, seconds);
      *this->LogFile
        << ""----------------------------------------------------------""
        << std::endl
        << ""\"""" << testname.c_str() << ""\"" end time: ""
        << this->CTest->CurrentTime() << std::endl
        << ""\"""" << testname.c_str() << ""\"" time elapsed: ""
        << buffer << std::endl
        << ""----------------------------------------------------------""
        << std::endl << std::endl;
      }

    cres.ExecutionTime = (double)(clock_finish - clock_start);
    cres.FullCommandLine = testCommand;

    if ( !this->CTest->GetShowOnly() )
      {
      bool testFailed = false;
      std::vector<cmsys::RegularExpression>::iterator passIt;
      bool forceFail = false;
      if ( it->RequiredRegularExpressions.size() > 0 )
        {
        bool found = false;
        for ( passIt = it->RequiredRegularExpressions.begin();
          passIt != it->RequiredRegularExpressions.end();
          ++ passIt )
          {
          if ( passIt->find(output.c_str()) )
            {
            found = true;
            }
          }
        if ( !found )
          {
          forceFail = true;
          }
        }
      if ( it->ErrorRegularExpressions.size() > 0 )
        {
        for ( passIt = it->ErrorRegularExpressions.begin();
          passIt != it->ErrorRegularExpressions.end();
          ++ passIt )
          {
          if ( passIt->find(output.c_str()) )
            {
            forceFail = true;
            }
          }
        }

      if (res == cmsysProcess_State_Exited &&
          (retVal == 0 || it->RequiredRegularExpressions.size()) &&
          !forceFail)
        {
        cmCTestLog(this->CTest, HANDLER_OUTPUT,   ""   Passed"");
        if ( it->WillFail )
          {
          cmCTestLog(this->CTest, HANDLER_OUTPUT,   "" - But it should fail!"");
          cres.Status = cmCTestTestHandler::FAILED;
          testFailed = true;
          }
        else
          {
          cres.Status = cmCTestTestHandler::COMPLETED;
          }
        cmCTestLog(this->CTest, HANDLER_OUTPUT, std::endl);
        }
      else
        {
        testFailed = true;

        cres.Status = cmCTestTestHandler::FAILED;
        if ( res == cmsysProcess_State_Expired )
          {
          cmCTestLog(this->CTest, HANDLER_OUTPUT, ""***Timeout"" << std::endl);
          cres.Status = cmCTestTestHandler::TIMEOUT;
          }
        else if ( res == cmsysProcess_State_Exception )
          {
          cmCTestLog(this->CTest, HANDLER_OUTPUT, ""***Exception: "");
          switch ( retVal )
            {
          case cmsysProcess_Exception_Fault:
            cmCTestLog(this->CTest, HANDLER_OUTPUT, ""SegFault"");
            cres.Status = cmCTestTestHandler::SEGFAULT;
            break;
          case cmsysProcess_Exception_Illegal:
            cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Illegal"");
            cres.Status = cmCTestTestHandler::ILLEGAL;
            break;
          case cmsysProcess_Exception_Interrupt:
            cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Interrupt"");
            cres.Status = cmCTestTestHandler::INTERRUPT;
            break;
          case cmsysProcess_Exception_Numerical:
            cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Numerical"");
            cres.Status = cmCTestTestHandler::NUMERICAL;
            break;
          default:
            cmCTestLog(this->CTest, HANDLER_OUTPUT, ""Other"");
            cres.Status = cmCTestTestHandler::OTHER_FAULT;
            }
           cmCTestLog(this->CTest, HANDLER_OUTPUT, std::endl);
          }
        else if ( res == cmsysProcess_State_Error )
          {
          cmCTestLog(this->CTest, HANDLER_OUTPUT, ""***Bad command "" << res
            << std::endl);
          cres.Status = cmCTestTestHandler::BAD_COMMAND;
          }
        else
          {
          // Force fail will also be here?
          cmCTestLog(this->CTest, HANDLER_OUTPUT, ""***Failed"");
          if ( it->WillFail )
            {
            cres.Status = cmCTestTestHandler::COMPLETED;
            cmCTestLog(this->CTest, HANDLER_OUTPUT, "" - supposed to fail"");
            testFailed = false;
            }
          cmCTestLog(this->CTest, HANDLER_OUTPUT, std::endl);
          }
        }
      if ( testFailed )
        {
        failed.push_back(testname);
        }
      else
        {
        passed.push_back(testname);
        }
      if (!output.empty() && output.find(""<DartMeasurement"") != output.npos)
        {
        if (this->DartStuff.find(output.c_str()))
          {
          std::string dartString = this->DartStuff.match(1);
          cmSystemTools::ReplaceString(output, dartString.c_str(),"""");
          cres.RegressionImages
            = this->GenerateRegressionImages(dartString);
          }
        }
      }

    if ( cres.Status == cmCTestTestHandler::COMPLETED )
      {
      this->CleanTestOutput(output, static_cast<size_t>(
          this->CustomMaximumPassedTestOutputSize));
      }
    else
      {
      this->CleanTestOutput(output, static_cast<size_t>(
          this->CustomMaximumFailedTestOutputSize));
      }

    cres.Output = output;
    cres.ReturnValue = retVal;
    cres.CompletionStatus = ""Completed"";
    this->TestResults.push_back( cres );
    }

  this->EndTest = this->CTest->CurrentTime();
  this->ElapsedTestingTime = cmSystemTools::GetTime() - elapsed_time_start;
  if ( this->LogFile )
    {
    *this->LogFile << ""End testing: "" << this->EndTest << std::endl;
    }
  cmSystemTools::ChangeDirectory(current_dir.c_str());
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1204.cpp,"[31, 0, 6, 0, 4, 4, 0, 1, 4, 1, 48, 0, 0, 0, 2, 1000, 0, 0, 30, 33, 0, 1, 28, 96, 0, 0, 0, 0, 5, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 498, 1, 332, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 34, 0, 7, 0, 39, 32, 10, 0, 139, 2, 0, 103, 2, 144, 0, 6, 0, 0, 6, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1204.cpp,0,[],[]
2f84bd17581920eb5cbfc3b41e8cf477ba6a5853,ENH: added per test timeout support,[],Source/CTest/cmCTestTestHandler.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_548.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_548.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_548.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1409.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1409.cpp,649,924,765,-1,"sprintf(buffer, ""%02d:%02d:%02d"", hours, minutes, seconds);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1205.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1205.cpp,"{
      double ttime = clock_finish - clock_start;
      int hours = static_cast<int>(ttime / (60 * 60));
      int minutes = static_cast<int>(ttime / 60) % 60;
      int seconds = static_cast<int>(ttime) % 60;
      char buffer[100];
      sprintf(buffer, ""%02d:%02d:%02d"", hours, minutes, seconds);
      *this->LogFile
        << ""----------------------------------------------------------""
        << std::endl
        << ""\"""" << testname.c_str() << ""\"" end time: ""
        << this->CTest->CurrentTime() << std::endl
        << ""\"""" << testname.c_str() << ""\"" time elapsed: ""
        << buffer << std::endl
        << ""----------------------------------------------------------""
        << std::endl << std::endl;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1205.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 53, 0, 0, 5, 5, 0, 0, 4, 13, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 18, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 0, 0, 0, 0, 0, 10, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1205.cpp,204,"[""char *"", ""string"", ""int"", ""int"", ""int""]","[""member""]"
3a32cec96923cf057aad00274b4a8ab7ad82a82f,ENH: merge in changes for beos support,[],Utilities/cmtar/extract.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_549.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_549.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_549.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1410.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1410.cpp,750,751,753,754,"f(""  ==> extracting: %s (mode %04o, directory)\n"", filename,
         mode);","y(buf, filename, sizeof(buf)-1);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1206.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1206.cpp,"{
  mode_t mode;
  char *filename;
  char buf[T_BLOCKSIZE];
  char *pathname = 0;

  if (!TH_ISDIR(t))
  {
    errno = EINVAL;
    return -1;
  }

  if (realname)
    {
    filename = realname;
    }
  else
    {
    pathname = th_get_pathname(t);
    filename = pathname;
    }
  mode = th_get_mode(t);

  /* Make a copy of the string because dirname and mkdirhier may modify the
   * string */
  strncpy(buf, filename, sizeof(buf)-1);
  buf[sizeof(buf)-1] = 0;

  if (mkdirhier(dirname(buf)) == -1)
    {
    if (pathname)
      {
      free(pathname);
      }
    return -1;
    }

#ifdef DEBUG
  printf(""  ==> extracting: %s (mode %04o, directory)\n"", filename,
         mode);
#endif
#ifdef WIN32
  if (mkdir(filename) == -1)
#else
  if (mkdir(filename, mode) == -1)
#endif
  {
#ifdef __BORLANDC__
  /* There is a bug in the Borland Run time library which makes MKDIR
     return EACCES when it should return EEXIST
     if it is some other error besides directory exists
     then return false */
    if ( errno == EACCES) 
    {
      errno = EEXIST;
    }
#endif      
    if (errno == EEXIST)
    {
      if (chmod(filename, mode) == -1)
      {
#ifdef DEBUG
        perror(""chmod()"");
#endif
        if (pathname)
          {
          free(pathname);
          }
        return -1;
      }
      else
      {
#ifdef DEBUG
        puts(""  *** using existing directory"");
#endif
        if (pathname)
          {
          free(pathname);
          }
        return 1;
      }
    }
    else
    {
#ifdef DEBUG
      perror(""mkdir()"");
#endif
      if (pathname)
        {
        free(pathname);
        }
      return -1;
    }
  }

  if (pathname)
    {
    free(pathname);
    }
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1206.cpp,"[13, 0, 0, 0, 0, 0, 6, 0, 0, 0, 17, 0, 0, 0, 0, 76, 0, 0, 4, 4, 0, 0, 1, 18, 0, 0, 0, 0, 2, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 65, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 13, 13, 4, 0, 20, 0, 0, 17, 0, 26, 13, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1206.cpp,40,"[""string"", ""th_get_pathname_ret"", ""th_get_mode_ret""]","[""mkdirhier_ret"", ""int"", ""=="", ""!""]"
ccb77b65c673037780483e23c7bc1b4bf1d17cbc,"ENH: unify version stuff, get rid of it out of cmake and cmMakefile and only use cmVersion",[],Source/cmake.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_551.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_551.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_551.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1413.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1413.cpp,1487,1487,1489,1489,"sprintf(ver,""%i.%i"",cmMakefile::GetMajorVersion(),
            cmMakefile::GetMinorVersion());","sprintf(ver,""%i.%i"",cmVersion::GetMajorVersion(),
            cmVersion::GetMinorVersion());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1208.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1208.cpp,"{
    char ver[256];
    sprintf(ver,""%i.%i"",cmMakefile::GetMajorVersion(),
            cmMakefile::GetMinorVersion());
    this->CacheManager->AddCacheEntry
      (""CMAKE_BACKWARDS_COMPATIBILITY"",ver, 
       ""For backwards compatibility, what version of CMake commands and ""
       ""syntax should this version of CMake allow."",
       cmCacheManager::STRING);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1208.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 19, 0, 0, 1, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1208.cpp,29,"[""char *"", ""constant"", ""cmMakefile :: GetMajorVersion_ret"", ""cmMakefile :: GetMinorVersion_ret""]","[""this -> CacheManager -> GetCacheValue_ret""]"
ccb77b65c673037780483e23c7bc1b4bf1d17cbc,"ENH: unify version stuff, get rid of it out of cmake and cmMakefile and only use cmVersion",[],Source/cmake.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_551.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_551.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_551.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1414.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1414.cpp,1852,1837,1854,1839,"sprintf(tmp,""Version %d.%d (%s)"", cmake::GetMajorVersion(),
          cmake::GetMinorVersion(), cmVersion::GetReleaseVersion().c_str());","sprintf(tmp,""Version %d.%d (%s)"", cmVersion::GetMajorVersion(),
          cmVersion::GetMinorVersion(),
          cmVersion::GetReleaseVersion().c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1209.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1209.cpp,"{
#ifdef CMAKE_BUILD_WITH_CMAKE
  // Loop over all registered commands and print out documentation
  const char *name;
  const char *terse;
  const char *full;
  char tmp[1024];
  sprintf(tmp,""Version %d.%d (%s)"", cmake::GetMajorVersion(),
          cmake::GetMinorVersion(), cmVersion::GetReleaseVersion().c_str());
  f << ""<html>\n"";
  f << ""<h1>Documentation for commands of CMake "" << tmp << ""</h1>\n"";
  f << ""<ul>\n"";
  for(RegisteredCommandsMap::iterator j = this->Commands.begin();
      j != this->Commands.end(); ++j)
    {
    name = (*j).second->GetName();
    terse = (*j).second->GetTerseDocumentation();
    full = (*j).second->GetFullDocumentation();
    f << ""<li><b>"" << name << ""</b> - "" << terse << std::endl
      << ""<br><i>Usage:</i> "" << full << ""</li>"" << std::endl << std::endl;
    }
  f << ""</ul></html>\n"";
#else
  (void)f;
#endif
  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1209.cpp,"[0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 74, 0, 0, 4, 5, 0, 0, 2, 12, 0, 0, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 0, 1, 0, 1, 0, 10, 0, 0, 10, 0, 5, 3, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1209.cpp,8,"[""char *"", ""constant"", ""cmake :: GetMajorVersion_ret"", ""cmake :: GetMinorVersion_ret"", ""cmVersion :: GetReleaseVersion ( ) . c_str_ret""]",[]
ccb77b65c673037780483e23c7bc1b4bf1d17cbc,"ENH: unify version stuff, get rid of it out of cmake and cmMakefile and only use cmVersion",[],Source/cmake.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_551.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_551.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_551.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1415.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1415.cpp,1959,1945,1961,1947,"sprintf(ver,""%i.%i"",cmMakefile::GetMajorVersion(),
            cmMakefile::GetMinorVersion());","sprintf(ver,""%i.%i"",cmVersion::GetMajorVersion(),
            cmVersion::GetMinorVersion());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1210.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1210.cpp,"{
    char ver[256];
    sprintf(ver,""%i.%i"",cmMakefile::GetMajorVersion(),
            cmMakefile::GetMinorVersion());
    this->CacheManager->AddCacheEntry
      (""CMAKE_BACKWARDS_COMPATIBILITY"",ver, 
       ""For backwards compatibility, what version of CMake commands and ""
       ""syntax should this version of CMake allow."",
       cmCacheManager::STRING);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1210.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 19, 0, 0, 1, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1210.cpp,36,"[""char *"", ""constant"", ""cmMakefile :: GetMajorVersion_ret"", ""cmMakefile :: GetMinorVersion_ret""]","[""this -> CacheManager -> GetCacheValue_ret""]"
bdf8e186e5084020a4cbbbe9aa2f63af0febf4ff,BUG: Need to match shared library names before static because some platforms have static name patterns that match their shared patterns but not vice versa.  This is needed for implementing bug#1644 on cygwin.,[u'https://gitlab.kitware.com/cmake/cmake/issues/1644'],Source/cmOrderLinkDirectories.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_555.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_555.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_555.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1420.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1420.cpp,267,267,273,-1,"fprintf(stderr, ""static regex matched [%s] [%s] [%s]\n"",
              this->ExtractStaticLibraryName.match(1).c_str(),
              this->ExtractStaticLibraryName.match(2).c_str(),
              this->ExtractStaticLibraryName.match(3).c_str());",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1212.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1212.cpp,"{
#ifdef CM_ORDER_LINK_DIRECTORIES_DEBUG
      fprintf(stderr, ""static regex matched [%s] [%s] [%s]\n"",
              this->ExtractStaticLibraryName.match(1).c_str(),
              this->ExtractStaticLibraryName.match(2).c_str(),
              this->ExtractStaticLibraryName.match(3).c_str());
#endif
      this->SetCurrentLinkType(LinkStatic);
      this->LinkItems.push_back(this->ExtractStaticLibraryName.match(2));
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1212.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 3, 0, 11, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1212.cpp,12,"[""unkown"", ""string"", ""this -> ExtractStaticLibraryName . match ( 1 ) . c_str_ret"", ""this -> ExtractStaticLibraryName . match ( 2 ) . c_str_ret"", ""this -> ExtractStaticLibraryName . match ( 3 ) . c_str_ret""]","[""this -> ExtractStaticLibraryName . find_ret""]"
bdf8e186e5084020a4cbbbe9aa2f63af0febf4ff,BUG: Need to match shared library names before static because some platforms have static name patterns that match their shared patterns but not vice versa.  This is needed for implementing bug#1644 on cygwin.,[u'https://gitlab.kitware.com/cmake/cmake/issues/1644'],Source/cmOrderLinkDirectories.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_555.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_555.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_555.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1421.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1421.cpp,290,288,292,293,,"fprintf(stderr, ""static regex matched [%s] [%s] [%s]\n"",
              this->ExtractStaticLibraryName.match(1).c_str(),
              this->ExtractStaticLibraryName.match(2).c_str(),
              this->ExtractStaticLibraryName.match(3).c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1213.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1213.cpp,"f(this->ExtractAnyLibraryName.find(*i))
      {
#ifdef CM_ORDER_LINK_DIRECTORIES_DEBUG
      fprintf(stderr, ""any regex matched [%s] [%s] [%s]\n"",
              this->ExtractAnyLibraryName.match(1).c_str(),
              this->ExtractAnyLibraryName.match(2).c_str(),
              this->ExtractAnyLibraryName.match(3).c_str());
#endif
      this->SetCurrentLinkType(this->StartLinkType);
      this->LinkItems.push_back(this->ExtractAnyLibraryName.match(2));
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1213.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 3, 0, 12, 2, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1213.cpp,31,"[""originalLinkItems . begin_ret""]","[""this -> ExtractSharedLibraryName . find_ret"", ""!""]"
f1ea7e88dc8322d4344e6b7acde6bf7bcffd7806,ENH: Exposed pattern->regex API.  Cleaned up and commented implementation of pattern->regex conversion.,[],Source/kwsys/Glob.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_557.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_557.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_557.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1428.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1428.cpp,73,72,82,-1,"sprintf(buffer, ""\\%c"", ch);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1215.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1215.cpp,"{
    sprintf(buffer, ""\\%c"", ch);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1215.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1215.cpp,7,"[""char *"", ""string"", ""int""]","[""char"", ""int"", ""<="", ""int"", ""char"", ""<="", ""&&"", ""char"", ""int"", ""<="", ""int"", ""char"", ""<="", ""&&"", ""char"", ""int"", ""<="", ""int"", ""char"", ""<="", ""&&"", ""||"", ""||"", ""!""]"
f1ea7e88dc8322d4344e6b7acde6bf7bcffd7806,ENH: Exposed pattern->regex API.  Cleaned up and commented implementation of pattern->regex conversion.,[],Source/kwsys/Glob.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_557.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_557.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_557.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1428.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1428.cpp,73,72,88,186,"sprintf(buffer, ""%c"", tolower(ch));",ch = tolower(ch);,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1216.cpp,"{
#if defined( KWSYS_GLOB_CASE_INDEPENDENT )
    // On Windows and apple, no difference between lower and upper case
    sprintf(buffer, ""%c"", tolower(ch));
#else
    sprintf(buffer, ""%c"", ch);
#endif
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1216.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 2, 0, 8, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1216.cpp,13,"[""char *"", ""string"", ""tolower_ret""]","[""char"", ""int"", ""<="", ""int"", ""char"", ""<="", ""&&"", ""char"", ""int"", ""<="", ""int"", ""char"", ""<="", ""&&"", ""char"", ""int"", ""<="", ""int"", ""char"", ""<="", ""&&"", ""||"", ""||"", ""!"", ""!""]"
d4ae4849f77082ee48f61e5b130ca6fd153b71ea,ENH: reorder code to remove forward declarations,[],Utilities/cmcompress/cmcompress.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_558.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_558.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_558.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1429.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1429.cpp,92,89,120,-1,"printf(""Error...\n"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1218.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1218.cpp,"{
      printf(""Error...\n"");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1218.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1218.cpp,10,"[""constant""]","[""ferror_ret""]"
d4ae4849f77082ee48f61e5b130ca6fd153b71ea,ENH: reorder code to remove forward declarations,[],Utilities/cmcompress/cmcompress.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_558.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_558.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_558.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1430.cpp,350,123,370,-1,"fprintf(stream, ""%d.%02d%%"", q / 100, q % 100);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1219.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1219.cpp,"{
  register int q;      /* Doesn't need to be long */

  if(num > 214748L)
    {    /* 2147483647/10000 */
    q = num / (den / 10000L);
    }
  else
    {
    q = 10000L * num / den;    /* Long calculations, though */
    }
  if (q < 0)
    {
    putc('-', stream);
    q = -q;
    }
  fprintf(stream, ""%d.%02d%%"", q / 100, q % 100);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1219.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 18, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1219.cpp,17,"[""FILE *"", ""constant"", ""constant"", ""constant""]",[]
11d18d65dc97ca52d372c8e5ef8294a7f27cb08e,ENH: revert change in parser as it sent the parser into an infinite loop,[],Source/cmDependsFortranLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_559.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_559.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_559.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1438.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1438.cpp,2049,2107,2051,2109,"yy_fatal_error( ""cmDependsFortran_yyset_lineno called with no buffer"" );","yy_fatal_error( ""cmDependsFortran_yyset_lineno called with no buffer"" , yyscanner);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1222.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1222.cpp,"yy_fatal_error( ""cmDependsFortran_yyset_lineno called with no buffer"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1222.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1222.cpp,6,"[""string""]","[""macro"", ""!""]"
11d18d65dc97ca52d372c8e5ef8294a7f27cb08e,ENH: revert change in parser as it sent the parser into an infinite loop,[],Source/cmDependsFortranLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_559.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_559.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_559.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1439.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1439.cpp,2064,2122,2066,2124,"yy_fatal_error( ""cmDependsFortran_yyset_column called with no buffer"" );","yy_fatal_error( ""cmDependsFortran_yyset_column called with no buffer"" , yyscanner);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1223.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1223.cpp,"yy_fatal_error( ""cmDependsFortran_yyset_column called with no buffer"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1223.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1223.cpp,6,"[""string""]","[""macro"", ""!""]"
7169980b59c16370fa5abec8159afc5cc84a96cd,ENH: change comment for fortran depend parsing,[],Source/cmDependsFortranLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_560.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_560.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_560.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1446.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1446.cpp,2107,2049,2109,2051,"yy_fatal_error( ""cmDependsFortran_yyset_lineno called with no buffer"" , yyscanner);","yy_fatal_error( ""cmDependsFortran_yyset_lineno called with no buffer"" );",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1224.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1224.cpp,"yy_fatal_error( ""cmDependsFortran_yyset_lineno called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1224.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1224.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
7169980b59c16370fa5abec8159afc5cc84a96cd,ENH: change comment for fortran depend parsing,[],Source/cmDependsFortranLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_560.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_560.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_560.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1447.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1447.cpp,2122,2064,2124,2066,"yy_fatal_error( ""cmDependsFortran_yyset_column called with no buffer"" , yyscanner);","yy_fatal_error( ""cmDependsFortran_yyset_column called with no buffer"" );",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1225.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1225.cpp,"yy_fatal_error( ""cmDependsFortran_yyset_column called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1225.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1225.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
898dfe5a2deff445d501f3991b7553c3b3332dff,ENH: Cleanup. Replace c-style cast with static_cast and replace sprintf with cmOStringStream,[],Source/cmake.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_561.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_561.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_561.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1448.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1448.cpp,2384,2383,2386,2386,"f(tgtName, ""%s%d"", graphNodePrefix, cnt++);",ostr << graphNodePrefix << cnt++;,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1226.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1226.cpp,"{
      const char* realTargetName = tit->first.c_str();
      if ( ignoreTargetsSet.find(realTargetName) != ignoreTargetsSet.end() )
        {
        // Skip ignored targets
        continue;
        }
      //std::cout << ""Found target: "" << tit->first.c_str() << std::endl;
      sprintf(tgtName, ""%s%d"", graphNodePrefix, cnt++);
      targetNamesNodes[realTargetName] = tgtName;
      targetPtrs[realTargetName] = &tit->second;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1226.cpp,"[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 27, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 4, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1226.cpp,94,"[""char *"", ""string"", ""unkown"", ""int""]","[""ignoreTargetsSet . find_ret"", ""ignoreTargetsSet . end_ret"", ""!="", ""!""]"
898dfe5a2deff445d501f3991b7553c3b3332dff,ENH: Cleanup. Replace c-style cast with static_cast and replace sprintf with cmOStringStream,[],Source/cmake.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_561.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_561.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_561.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1449.cpp,2421,2421,2423,-1,"sprintf(tgtName, ""%s%d"", graphNodePrefix, cnt++);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1227.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1227.cpp,"{
          sprintf(tgtName, ""%s%d"", graphNodePrefix, cnt++);
          targetDeps[libName] = 2;
          targetNamesNodes[libName] = tgtName;
          //str << ""    \"""" << tgtName << ""\"" [ label=\"""" << libName
          //<<  ""\"" shape=\""ellipse\""];"" << std::endl;
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1227.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1227.cpp,131,"[""char *"", ""string"", ""unkown"", ""int""]","[""std :: map < cmStdString , cmStdString > :: iterator"", ""targetNamesNodes . end_ret"", ""==""]"
9bf5af6e32570195b06df594c1cb07f8c7a6a83e,ENH: Moved unique object file name computation from cmLocalUnixMakefileGenerator3 up to cmLocalGenerator for use by all generators.  Created cmLocalVisualStudioGenerator as superclass for all VS generators.  Implemented on-demand unique object file name computation for VS 7 generator to avoid slow compiles when all sources are in subdirectories.,[],Source/cmLocalUnixMakefileGenerator3.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_563.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_563.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_563.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1451.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1451.cpp,1062,1062,1097,-1,"sprintf(rpstr, ""_p_"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1228.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1228.cpp,"{
      bool done;
      int cc = 0;
      char rpstr[100];
      sprintf(rpstr, ""_p_"");
      cmSystemTools::ReplaceString(ssin, ""+"", rpstr);
      std::string sssin = sin;
      do
        {
        done = true;
        for ( it = this->UniqueObjectNamesMap.begin();
              it != this->UniqueObjectNamesMap.end();
              ++ it )
          {
          if ( it->second == ssin )
            {
            done = false;
            }
          }
        if ( done )
          {
          break;
          }
        sssin = ssin;
        cmSystemTools::ReplaceString(ssin, ""_p_"", rpstr);
        sprintf(rpstr, ""_p%d_"", cc++);
        }
      while ( !done );
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1228.cpp,"[2, 0, 1, 1, 1, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 48, 0, 0, 4, 4, 0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 4, 2, 0, 0, 6, 0, 0, 7, 0, 11, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1228.cpp,33,"[""char *"", ""string""]","[""this -> Makefile -> IsOn_ret""]"
9bf5af6e32570195b06df594c1cb07f8c7a6a83e,ENH: Moved unique object file name computation from cmLocalUnixMakefileGenerator3 up to cmLocalGenerator for use by all generators.  Created cmLocalVisualStudioGenerator as superclass for all VS generators.  Implemented on-demand unique object file name computation for VS 7 generator to avoid slow compiles when all sources are in subdirectories.,[],Source/cmLocalUnixMakefileGenerator3.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_563.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_563.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_563.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1451.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1451.cpp,1062,1062,1118,-1,"sprintf(rpstr, ""_p%d_"", cc++);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1229.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1229.cpp,"{
        done = true;
        for ( it = this->UniqueObjectNamesMap.begin();
              it != this->UniqueObjectNamesMap.end();
              ++ it )
          {
          if ( it->second == ssin )
            {
            done = false;
            }
          }
        if ( done )
          {
          break;
          }
        sssin = ssin;
        cmSystemTools::ReplaceString(ssin, ""_p_"", rpstr);
        sprintf(rpstr, ""_p%d_"", cc++);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1229.cpp,"[2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 4, 0, 0, 5, 0, 6, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1229.cpp,54,"[""char *"", ""string"", ""int""]","[""unkown"", ""!""]"
da285df242411b2b798018009e1c2f37e5515c60,ENH: Added test 8 to test grandchildren running after children exit.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_567.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_567.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_567.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1456.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1456.cpp,163,151,170,164,,"fprintf(stdout, ""Output on stdout before grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1230.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1230.cpp,"{
  int result = 0;
  char* data = 0;
  int length = 0;
  double userTimeout = 0;
  double* pUserTimeout = 0;
  kwsysProcess_SetCommand(kp, cmd);
  if(timeout >= 0)
    {
    kwsysProcess_SetTimeout(kp, timeout);
    }
  if(share)
    {
    kwsysProcess_SetPipeShared(kp, kwsysProcess_Pipe_STDOUT, 1);
    kwsysProcess_SetPipeShared(kp, kwsysProcess_Pipe_STDERR, 1);
    }
  kwsysProcess_Execute(kp);

  if(poll)
    {
    pUserTimeout = &userTimeout;
    }

  if(!share)
    {
    int p;
    while((p = kwsysProcess_WaitForData(kp, &data, &length, pUserTimeout)))
      {
      if(output)
        {
        if(poll && p == kwsysProcess_Pipe_Timeout)
          {
          fprintf(stdout, ""WaitForData timeout reached.\n"");
          fflush(stdout);

          /* Count the number of times we polled without getting data.
             If it is excessive then kill the child and fail.  */
          if(++poll >= MAXPOLL)
            {
            fprintf(stdout, ""Poll count reached limit %d.\n"",
                    MAXPOLL);
            kwsysProcess_Kill(kp);
            }
          }
        else
          {
          fwrite(data, 1, length, stdout);
          fflush(stdout);
          }
        }
      if(poll)
        {
        /* Delay to avoid busy loop during polling.  */
#if defined(_WIN32)
        Sleep(100);
#else
        usleep(100000);
#endif
        }
      if(delay)
        {
        /* Purposely sleeping only on Win32 to let pipe fill up.  */
#if defined(_WIN32)
        Sleep(100);
#endif
        }
      }
    }
  
  kwsysProcess_WaitForExit(kp, 0);

  switch (kwsysProcess_GetState(kp))
    {
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n""); break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n""); break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n""); break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"",
             kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n""); break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp)); break;
    };
  
  if(result)
    {
    if(exception != kwsysProcess_GetExitException(kp))
      {
      fprintf(stderr, ""Mismatch in exit exception.  ""
              ""Should have been %d, was %d.\n"",
              exception, kwsysProcess_GetExitException(kp));
      }
    if(value != kwsysProcess_GetExitValue(kp))
      {
      fprintf(stderr, ""Mismatch in exit value.  ""
              ""Should have been %d, was %d.\n"",
              value, kwsysProcess_GetExitValue(kp));
      }
    }
  
  if(kwsysProcess_GetState(kp) != state)
    {
    fprintf(stderr, ""Mismatch in state.  ""
            ""Should have been %d, was %d.\n"",
            state, kwsysProcess_GetState(kp));
    result = 1;
    }

  /* We should have polled more times than there were data if polling
     was enabled.  */
  if(poll && poll < MINPOLL)
    {
    fprintf(stderr, ""Poll count is %d, which is less than %d.\n"",
            poll, MINPOLL);
    result = 1;
    }

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1230.cpp,"[16, 1, 0, 0, 7, 0, 1, 1, 7, 0, 18, 0, 0, 1, 0, 141, 0, 0, 6, 6, 0, 0, 5, 31, 0, 0, 0, 0, 2, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 16, 14, 2, 0, 43, 0, 0, 31, 0, 74, 5, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1230.cpp,5,[],[]
da285df242411b2b798018009e1c2f37e5515c60,ENH: Added test 8 to test grandchildren running after children exit.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_567.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_567.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_567.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1456.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1456.cpp,163,151,170,165,,"fprintf(stderr, ""Output on stderr before grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1231.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1231.cpp,"{
  int result = 0;
  char* data = 0;
  int length = 0;
  double userTimeout = 0;
  double* pUserTimeout = 0;
  kwsysProcess_SetCommand(kp, cmd);
  if(timeout >= 0)
    {
    kwsysProcess_SetTimeout(kp, timeout);
    }
  if(share)
    {
    kwsysProcess_SetPipeShared(kp, kwsysProcess_Pipe_STDOUT, 1);
    kwsysProcess_SetPipeShared(kp, kwsysProcess_Pipe_STDERR, 1);
    }
  kwsysProcess_Execute(kp);

  if(poll)
    {
    pUserTimeout = &userTimeout;
    }

  if(!share)
    {
    int p;
    while((p = kwsysProcess_WaitForData(kp, &data, &length, pUserTimeout)))
      {
      if(output)
        {
        if(poll && p == kwsysProcess_Pipe_Timeout)
          {
          fprintf(stdout, ""WaitForData timeout reached.\n"");
          fflush(stdout);

          /* Count the number of times we polled without getting data.
             If it is excessive then kill the child and fail.  */
          if(++poll >= MAXPOLL)
            {
            fprintf(stdout, ""Poll count reached limit %d.\n"",
                    MAXPOLL);
            kwsysProcess_Kill(kp);
            }
          }
        else
          {
          fwrite(data, 1, length, stdout);
          fflush(stdout);
          }
        }
      if(poll)
        {
        /* Delay to avoid busy loop during polling.  */
#if defined(_WIN32)
        Sleep(100);
#else
        usleep(100000);
#endif
        }
      if(delay)
        {
        /* Purposely sleeping only on Win32 to let pipe fill up.  */
#if defined(_WIN32)
        Sleep(100);
#endif
        }
      }
    }
  
  kwsysProcess_WaitForExit(kp, 0);

  switch (kwsysProcess_GetState(kp))
    {
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n""); break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n""); break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n""); break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"",
             kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n""); break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp)); break;
    };
  
  if(result)
    {
    if(exception != kwsysProcess_GetExitException(kp))
      {
      fprintf(stderr, ""Mismatch in exit exception.  ""
              ""Should have been %d, was %d.\n"",
              exception, kwsysProcess_GetExitException(kp));
      }
    if(value != kwsysProcess_GetExitValue(kp))
      {
      fprintf(stderr, ""Mismatch in exit value.  ""
              ""Should have been %d, was %d.\n"",
              value, kwsysProcess_GetExitValue(kp));
      }
    }
  
  if(kwsysProcess_GetState(kp) != state)
    {
    fprintf(stderr, ""Mismatch in state.  ""
            ""Should have been %d, was %d.\n"",
            state, kwsysProcess_GetState(kp));
    result = 1;
    }

  /* We should have polled more times than there were data if polling
     was enabled.  */
  if(poll && poll < MINPOLL)
    {
    fprintf(stderr, ""Poll count is %d, which is less than %d.\n"",
            poll, MINPOLL);
    result = 1;
    }

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1231.cpp,"[16, 1, 0, 0, 7, 0, 1, 1, 7, 0, 18, 0, 0, 1, 0, 141, 0, 0, 6, 6, 0, 0, 5, 31, 0, 0, 0, 0, 2, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 16, 14, 2, 0, 43, 0, 0, 31, 0, 74, 5, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1231.cpp,5,[],[]
da285df242411b2b798018009e1c2f37e5515c60,ENH: Added test 8 to test grandchildren running after children exit.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_567.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_567.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_567.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1456.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1456.cpp,163,151,170,170,,"fprintf(stdout, ""Output on stdout after grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1232.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1232.cpp,"{
  int result = 0;
  char* data = 0;
  int length = 0;
  double userTimeout = 0;
  double* pUserTimeout = 0;
  kwsysProcess_SetCommand(kp, cmd);
  if(timeout >= 0)
    {
    kwsysProcess_SetTimeout(kp, timeout);
    }
  if(share)
    {
    kwsysProcess_SetPipeShared(kp, kwsysProcess_Pipe_STDOUT, 1);
    kwsysProcess_SetPipeShared(kp, kwsysProcess_Pipe_STDERR, 1);
    }
  kwsysProcess_Execute(kp);

  if(poll)
    {
    pUserTimeout = &userTimeout;
    }

  if(!share)
    {
    int p;
    while((p = kwsysProcess_WaitForData(kp, &data, &length, pUserTimeout)))
      {
      if(output)
        {
        if(poll && p == kwsysProcess_Pipe_Timeout)
          {
          fprintf(stdout, ""WaitForData timeout reached.\n"");
          fflush(stdout);

          /* Count the number of times we polled without getting data.
             If it is excessive then kill the child and fail.  */
          if(++poll >= MAXPOLL)
            {
            fprintf(stdout, ""Poll count reached limit %d.\n"",
                    MAXPOLL);
            kwsysProcess_Kill(kp);
            }
          }
        else
          {
          fwrite(data, 1, length, stdout);
          fflush(stdout);
          }
        }
      if(poll)
        {
        /* Delay to avoid busy loop during polling.  */
#if defined(_WIN32)
        Sleep(100);
#else
        usleep(100000);
#endif
        }
      if(delay)
        {
        /* Purposely sleeping only on Win32 to let pipe fill up.  */
#if defined(_WIN32)
        Sleep(100);
#endif
        }
      }
    }
  
  kwsysProcess_WaitForExit(kp, 0);

  switch (kwsysProcess_GetState(kp))
    {
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n""); break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n""); break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n""); break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"",
             kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n""); break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp)); break;
    };
  
  if(result)
    {
    if(exception != kwsysProcess_GetExitException(kp))
      {
      fprintf(stderr, ""Mismatch in exit exception.  ""
              ""Should have been %d, was %d.\n"",
              exception, kwsysProcess_GetExitException(kp));
      }
    if(value != kwsysProcess_GetExitValue(kp))
      {
      fprintf(stderr, ""Mismatch in exit value.  ""
              ""Should have been %d, was %d.\n"",
              value, kwsysProcess_GetExitValue(kp));
      }
    }
  
  if(kwsysProcess_GetState(kp) != state)
    {
    fprintf(stderr, ""Mismatch in state.  ""
            ""Should have been %d, was %d.\n"",
            state, kwsysProcess_GetState(kp));
    result = 1;
    }

  /* We should have polled more times than there were data if polling
     was enabled.  */
  if(poll && poll < MINPOLL)
    {
    fprintf(stderr, ""Poll count is %d, which is less than %d.\n"",
            poll, MINPOLL);
    result = 1;
    }

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1232.cpp,"[16, 1, 0, 0, 7, 0, 1, 1, 7, 0, 18, 0, 0, 1, 0, 141, 0, 0, 6, 6, 0, 0, 5, 31, 0, 0, 0, 0, 2, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 16, 14, 2, 0, 43, 0, 0, 31, 0, 74, 5, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1232.cpp,5,[],[]
da285df242411b2b798018009e1c2f37e5515c60,ENH: Added test 8 to test grandchildren running after children exit.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_567.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_567.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_567.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1456.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1456.cpp,163,151,170,171,,"fprintf(stderr, ""Output on stderr after grandchild test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1233.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1233.cpp,"{
  int result = 0;
  char* data = 0;
  int length = 0;
  double userTimeout = 0;
  double* pUserTimeout = 0;
  kwsysProcess_SetCommand(kp, cmd);
  if(timeout >= 0)
    {
    kwsysProcess_SetTimeout(kp, timeout);
    }
  if(share)
    {
    kwsysProcess_SetPipeShared(kp, kwsysProcess_Pipe_STDOUT, 1);
    kwsysProcess_SetPipeShared(kp, kwsysProcess_Pipe_STDERR, 1);
    }
  kwsysProcess_Execute(kp);

  if(poll)
    {
    pUserTimeout = &userTimeout;
    }

  if(!share)
    {
    int p;
    while((p = kwsysProcess_WaitForData(kp, &data, &length, pUserTimeout)))
      {
      if(output)
        {
        if(poll && p == kwsysProcess_Pipe_Timeout)
          {
          fprintf(stdout, ""WaitForData timeout reached.\n"");
          fflush(stdout);

          /* Count the number of times we polled without getting data.
             If it is excessive then kill the child and fail.  */
          if(++poll >= MAXPOLL)
            {
            fprintf(stdout, ""Poll count reached limit %d.\n"",
                    MAXPOLL);
            kwsysProcess_Kill(kp);
            }
          }
        else
          {
          fwrite(data, 1, length, stdout);
          fflush(stdout);
          }
        }
      if(poll)
        {
        /* Delay to avoid busy loop during polling.  */
#if defined(_WIN32)
        Sleep(100);
#else
        usleep(100000);
#endif
        }
      if(delay)
        {
        /* Purposely sleeping only on Win32 to let pipe fill up.  */
#if defined(_WIN32)
        Sleep(100);
#endif
        }
      }
    }
  
  kwsysProcess_WaitForExit(kp, 0);

  switch (kwsysProcess_GetState(kp))
    {
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n""); break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n""); break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n""); break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"",
             kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n""); break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp)); break;
    };
  
  if(result)
    {
    if(exception != kwsysProcess_GetExitException(kp))
      {
      fprintf(stderr, ""Mismatch in exit exception.  ""
              ""Should have been %d, was %d.\n"",
              exception, kwsysProcess_GetExitException(kp));
      }
    if(value != kwsysProcess_GetExitValue(kp))
      {
      fprintf(stderr, ""Mismatch in exit value.  ""
              ""Should have been %d, was %d.\n"",
              value, kwsysProcess_GetExitValue(kp));
      }
    }
  
  if(kwsysProcess_GetState(kp) != state)
    {
    fprintf(stderr, ""Mismatch in state.  ""
            ""Should have been %d, was %d.\n"",
            state, kwsysProcess_GetState(kp));
    result = 1;
    }

  /* We should have polled more times than there were data if polling
     was enabled.  */
  if(poll && poll < MINPOLL)
    {
    fprintf(stderr, ""Poll count is %d, which is less than %d.\n"",
            poll, MINPOLL);
    result = 1;
    }

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1233.cpp,"[16, 1, 0, 0, 7, 0, 1, 1, 7, 0, 18, 0, 0, 1, 0, 141, 0, 0, 6, 6, 0, 0, 5, 31, 0, 0, 0, 0, 2, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 16, 14, 2, 0, 43, 0, 0, 31, 0, 74, 5, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1233.cpp,5,[],[]
da285df242411b2b798018009e1c2f37e5515c60,ENH: Added test 8 to test grandchildren running after children exit.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_567.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_567.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_567.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1456.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1456.cpp,163,151,170,180,,"fprintf(stdout, ""Output on stdout from grandchild before sleep.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1234.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1234.cpp,"{
  int result = 0;
  char* data = 0;
  int length = 0;
  double userTimeout = 0;
  double* pUserTimeout = 0;
  kwsysProcess_SetCommand(kp, cmd);
  if(timeout >= 0)
    {
    kwsysProcess_SetTimeout(kp, timeout);
    }
  if(share)
    {
    kwsysProcess_SetPipeShared(kp, kwsysProcess_Pipe_STDOUT, 1);
    kwsysProcess_SetPipeShared(kp, kwsysProcess_Pipe_STDERR, 1);
    }
  kwsysProcess_Execute(kp);

  if(poll)
    {
    pUserTimeout = &userTimeout;
    }

  if(!share)
    {
    int p;
    while((p = kwsysProcess_WaitForData(kp, &data, &length, pUserTimeout)))
      {
      if(output)
        {
        if(poll && p == kwsysProcess_Pipe_Timeout)
          {
          fprintf(stdout, ""WaitForData timeout reached.\n"");
          fflush(stdout);

          /* Count the number of times we polled without getting data.
             If it is excessive then kill the child and fail.  */
          if(++poll >= MAXPOLL)
            {
            fprintf(stdout, ""Poll count reached limit %d.\n"",
                    MAXPOLL);
            kwsysProcess_Kill(kp);
            }
          }
        else
          {
          fwrite(data, 1, length, stdout);
          fflush(stdout);
          }
        }
      if(poll)
        {
        /* Delay to avoid busy loop during polling.  */
#if defined(_WIN32)
        Sleep(100);
#else
        usleep(100000);
#endif
        }
      if(delay)
        {
        /* Purposely sleeping only on Win32 to let pipe fill up.  */
#if defined(_WIN32)
        Sleep(100);
#endif
        }
      }
    }
  
  kwsysProcess_WaitForExit(kp, 0);

  switch (kwsysProcess_GetState(kp))
    {
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n""); break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n""); break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n""); break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"",
             kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n""); break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp)); break;
    };
  
  if(result)
    {
    if(exception != kwsysProcess_GetExitException(kp))
      {
      fprintf(stderr, ""Mismatch in exit exception.  ""
              ""Should have been %d, was %d.\n"",
              exception, kwsysProcess_GetExitException(kp));
      }
    if(value != kwsysProcess_GetExitValue(kp))
      {
      fprintf(stderr, ""Mismatch in exit value.  ""
              ""Should have been %d, was %d.\n"",
              value, kwsysProcess_GetExitValue(kp));
      }
    }
  
  if(kwsysProcess_GetState(kp) != state)
    {
    fprintf(stderr, ""Mismatch in state.  ""
            ""Should have been %d, was %d.\n"",
            state, kwsysProcess_GetState(kp));
    result = 1;
    }

  /* We should have polled more times than there were data if polling
     was enabled.  */
  if(poll && poll < MINPOLL)
    {
    fprintf(stderr, ""Poll count is %d, which is less than %d.\n"",
            poll, MINPOLL);
    result = 1;
    }

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1234.cpp,"[16, 1, 0, 0, 7, 0, 1, 1, 7, 0, 18, 0, 0, 1, 0, 141, 0, 0, 6, 6, 0, 0, 5, 31, 0, 0, 0, 0, 2, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 16, 14, 2, 0, 43, 0, 0, 31, 0, 74, 5, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1234.cpp,5,[],[]
da285df242411b2b798018009e1c2f37e5515c60,ENH: Added test 8 to test grandchildren running after children exit.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_567.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_567.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_567.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1456.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1456.cpp,163,151,170,181,,"fprintf(stderr, ""Output on stderr from grandchild before sleep.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1235.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1235.cpp,"{
  int result = 0;
  char* data = 0;
  int length = 0;
  double userTimeout = 0;
  double* pUserTimeout = 0;
  kwsysProcess_SetCommand(kp, cmd);
  if(timeout >= 0)
    {
    kwsysProcess_SetTimeout(kp, timeout);
    }
  if(share)
    {
    kwsysProcess_SetPipeShared(kp, kwsysProcess_Pipe_STDOUT, 1);
    kwsysProcess_SetPipeShared(kp, kwsysProcess_Pipe_STDERR, 1);
    }
  kwsysProcess_Execute(kp);

  if(poll)
    {
    pUserTimeout = &userTimeout;
    }

  if(!share)
    {
    int p;
    while((p = kwsysProcess_WaitForData(kp, &data, &length, pUserTimeout)))
      {
      if(output)
        {
        if(poll && p == kwsysProcess_Pipe_Timeout)
          {
          fprintf(stdout, ""WaitForData timeout reached.\n"");
          fflush(stdout);

          /* Count the number of times we polled without getting data.
             If it is excessive then kill the child and fail.  */
          if(++poll >= MAXPOLL)
            {
            fprintf(stdout, ""Poll count reached limit %d.\n"",
                    MAXPOLL);
            kwsysProcess_Kill(kp);
            }
          }
        else
          {
          fwrite(data, 1, length, stdout);
          fflush(stdout);
          }
        }
      if(poll)
        {
        /* Delay to avoid busy loop during polling.  */
#if defined(_WIN32)
        Sleep(100);
#else
        usleep(100000);
#endif
        }
      if(delay)
        {
        /* Purposely sleeping only on Win32 to let pipe fill up.  */
#if defined(_WIN32)
        Sleep(100);
#endif
        }
      }
    }
  
  kwsysProcess_WaitForExit(kp, 0);

  switch (kwsysProcess_GetState(kp))
    {
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n""); break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n""); break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n""); break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"",
             kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n""); break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp)); break;
    };
  
  if(result)
    {
    if(exception != kwsysProcess_GetExitException(kp))
      {
      fprintf(stderr, ""Mismatch in exit exception.  ""
              ""Should have been %d, was %d.\n"",
              exception, kwsysProcess_GetExitException(kp));
      }
    if(value != kwsysProcess_GetExitValue(kp))
      {
      fprintf(stderr, ""Mismatch in exit value.  ""
              ""Should have been %d, was %d.\n"",
              value, kwsysProcess_GetExitValue(kp));
      }
    }
  
  if(kwsysProcess_GetState(kp) != state)
    {
    fprintf(stderr, ""Mismatch in state.  ""
            ""Should have been %d, was %d.\n"",
            state, kwsysProcess_GetState(kp));
    result = 1;
    }

  /* We should have polled more times than there were data if polling
     was enabled.  */
  if(poll && poll < MINPOLL)
    {
    fprintf(stderr, ""Poll count is %d, which is less than %d.\n"",
            poll, MINPOLL);
    result = 1;
    }

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1235.cpp,"[16, 1, 0, 0, 7, 0, 1, 1, 7, 0, 18, 0, 0, 1, 0, 141, 0, 0, 6, 6, 0, 0, 5, 31, 0, 0, 0, 0, 2, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 16, 14, 2, 0, 43, 0, 0, 31, 0, 74, 5, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1235.cpp,5,[],[]
da285df242411b2b798018009e1c2f37e5515c60,ENH: Added test 8 to test grandchildren running after children exit.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_567.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_567.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_567.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1457.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1457.cpp,258,303,261,306,,"printf(""Child was disowned.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1236.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1236.cpp,"{
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n""); break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n""); break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n""); break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"",
             kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n""); break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp)); break;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1236.cpp,"[0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 1, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 9, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1236.cpp,96,"[""string"", ""kwsysProcess_GetErrorString_ret""]","[""kwsysProcess_GetState_ret""]"
cac30b5ff8f7034b5290700a4dee28c84e001ac9,STYLE: fix line length,[],Source/cmVTKWrapPythonCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_568.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_568.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_568.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1460.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1460.cpp,196,198,198,200,"fprintf(fout,
            ""extern  \""C\"" {__declspec( dllexport) PyObject *PyVTKClass_%sNew(char *); }\n"",classes[i].c_str());","fprintf(fout, ""extern  \""C\"" {__declspec( dllexport) ""
            ""PyObject *PyVTKClass_%sNew(char *); }\n"", classes[i].c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1237.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1237.cpp,"{
#ifdef _WIN32
    fprintf(fout,
            ""extern  \""C\"" {__declspec( dllexport) PyObject *PyVTKClass_%sNew(char *); }\n"",classes[i].c_str());
#else
    fprintf(fout,""extern  \""C\"" {PyObject *PyVTKClass_%sNew(char *); }\n"",
            classes[i].c_str());
#endif
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1237.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 4, 0, 0, 2, 0, 6, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1237.cpp,25,"[""FILE *"", ""string"", ""classes [ i ] . c_str_ret""]","[""null"", ""classes . size_ret"", ""<""]"
cac30b5ff8f7034b5290700a4dee28c84e001ac9,STYLE: fix line length,[],Source/cmVTKWrapPythonCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_568.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_568.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_568.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1461.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1461.cpp,229,231,231,233,"fprintf(fout,""  if (!d) Py_FatalError(\""can't get dictionary for module %s!\"");\n\n"",
          kitName);","fprintf(fout,""  if (!d) Py_FatalError""
          ""(\""can't get dictionary for module %s!\"");\n\n"", kitName);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1238.cpp,"{
  unsigned int i;
  
  std::string tempOutputFile = outFileName + "".tmp"";
  FILE *fout = fopen(tempOutputFile.c_str(),""w"");
  if (!fout)
    {
    cmSystemTools::ReportLastSystemError(""cmVTKWrapPythonCommand error:"");
    return false;
    }
  
  fprintf(fout,""// Generated by cmVTKWrapPythonCommand in CMake\n\n"");
  fprintf(fout,""#include <string.h>\n"");
  fprintf(fout,""#include \""Python.h\""\n\n"");
  fprintf(fout,""// Handle compiler warning messages, etc.\n""
          ""#if defined( _MSC_VER ) && !defined(VTK_DISPLAY_WIN32_WARNINGS)\n""
          ""#pragma warning ( disable : 4706 )\n""
          ""#endif // Windows Warnings \n\n"");

  for (i = 0; i < classes.size(); i++)
    {
#ifdef _WIN32
    fprintf(fout,
            ""extern  \""C\"" {__declspec( dllexport) PyObject *PyVTKClass_%sNew(char *); }\n"",classes[i].c_str());
#else
    fprintf(fout,""extern  \""C\"" {PyObject *PyVTKClass_%sNew(char *); }\n"",
            classes[i].c_str());
#endif
    }

  fprintf(fout,""\nstatic PyMethodDef Py%s_ClassMethods[] = {\n"",
          kitName);
  fprintf(fout,""{NULL, NULL, 0, NULL}};\n\n"");
  
#ifdef _WIN32
  fprintf(fout,""extern  \""C\"" {__declspec( dllexport) void init%s();}\n\n"",
          kitName);
  fprintf(fout,""void init%s()\n{\n"",kitName);
#else
  fprintf(fout,""extern  \""C\"" {void initlib%s();}\n\n"",kitName);
  fprintf(fout,""void initlib%s()\n{\n"",kitName);
#endif
  

  /* module init function */
  fprintf(fout,""  PyObject *m, *d, *c;\n\n"");
#ifdef _WIN32
  fprintf(fout,""  static char modulename[] = \""%s\"";\n"",kitName);
#else
  fprintf(fout,""  static char modulename[] = \""lib%s\"";\n"",kitName);
#endif
  fprintf(fout,""  m = Py_InitModule(modulename, Py%s_ClassMethods);\n"",
          kitName);
  
  fprintf(fout,""  d = PyModule_GetDict(m);\n"");
  fprintf(fout,""  if (!d) Py_FatalError(\""can't get dictionary for module %s!\"");\n\n"",
          kitName);

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""  if ((c = PyVTKClass_%sNew(modulename)))\n"",
            classes[i].c_str());
    fprintf(fout,""    if (-1 == PyDict_SetItemString(d, \""%s\"", c))\n"",
            classes[i].c_str());
    fprintf(fout,""      Py_FatalError(\""can't add class %s to dictionary!\"");\n\n"",
            classes[i].c_str());
    }
  fprintf(fout,""}\n\n"");
  fclose(fout);
  
  
  // copy the file if different
  cmSystemTools::CopyFileIfDifferent(tempOutputFile.c_str(),
                                     outFileName.c_str());
  cmSystemTools::RemoveFile(tempOutputFile.c_str());
  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1238.cpp,"[1, 0, 2, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 123, 0, 0, 3, 3, 0, 0, 4, 32, 0, 0, 0, 0, 1, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 3, 1, 3, 0, 38, 0, 0, 26, 0, 65, 9, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1238.cpp,58,"[""FILE *"", ""string"", ""const char *""]","[""FILE *"", ""!"", ""!""]"
cac30b5ff8f7034b5290700a4dee28c84e001ac9,STYLE: fix line length,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_569.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1462.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1462.cpp,247,252,246,251,"fprintf(fout,
          ""extern \""C\""\n""
          ""{\n""
          ""#if (TCL_MAJOR_VERSION == 8) && (TCL_MINOR_VERSION >= 4) && (TCL_RELEASE_LEVEL >= TCL_FINAL_RELEASE)\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, CONST84 char *[]);\n""
          ""#else\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, char *[]);\n""
          ""#endif\n""
          ""}\n""
          ""\n"");","fprintf(fout,
          ""extern \""C\""\n""
          ""{\n""
          ""#if (TCL_MAJOR_VERSION == 8) && (TCL_MINOR_VERSION >= 4) ""
          ""&& (TCL_RELEASE_LEVEL >= TCL_FINAL_RELEASE)\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,""
          ""int, CONST84 char *[]);\n""
          ""#else\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,""
          ""int, char *[]);\n""
          ""#endif\n""
          ""}\n""
          ""\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1239.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1239.cpp,"{
  unsigned int i;
  std::string tempOutputFile = outFileName + "".tmp"";
  FILE *fout = fopen(tempOutputFile.c_str(),""w"");
  if (!fout)
    {
    cmSystemTools::Error(""Failed to open TclInit file for "",
                         tempOutputFile.c_str());
    cmSystemTools::ReportLastSystemError("""");
    return false;
    }

  // capitalized commands just once
  std::vector<std::string> capcommands;
  for (i = 0; i < this->Commands.size(); i++)
    {
    capcommands.push_back(cmSystemTools::Capitalized(this->Commands[i]));
    }
  
  fprintf(fout,""#include \""vtkTclUtil.h\""\n"");
  fprintf(fout,""#include \""vtkVersion.h\""\n"");
  fprintf(fout,""#define VTK_TCL_TO_STRING(x) VTK_TCL_TO_STRING0(x)\n"");
  fprintf(fout,""#define VTK_TCL_TO_STRING0(x) #x\n"");
  
  fprintf(fout,
          ""extern \""C\""\n""
          ""{\n""
          ""#if (TCL_MAJOR_VERSION == 8) && (TCL_MINOR_VERSION >= 4) && (TCL_RELEASE_LEVEL >= TCL_FINAL_RELEASE)\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, CONST84 char *[]);\n""
          ""#else\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, char *[]);\n""
          ""#endif\n""
          ""}\n""
          ""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());
    fprintf(fout,""ClientData %sNewCommand();\n"",classes[i].c_str());
    }
  
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""int vtkCommand(ClientData cd, Tcl_Interp *interp,\n""
                 ""               int argc, char *argv[]);\n"");
    fprintf(fout,""\nTcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkCommandLookup;\n"");
    fprintf(fout,""int vtkCommandForward(ClientData cd, Tcl_Interp *interp,\n""
                 ""                      int argc, char *argv[]){\n""
                 ""  return vtkCommand(cd, interp, argc, argv);\n""
                 ""}\n"");
    }
  else
    {
    fprintf(fout,""\nextern Tcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkCommandLookup;\n"");
    }
  fprintf(fout,""extern void vtkTclDeleteObjectFromHash(void *);\n"");  
  fprintf(fout,""extern void vtkTclListInstances(Tcl_Interp *interp, ClientData arg);\n"");

  for (i = 0; i < this->Commands.size(); i++)
    {
    fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
            capcommands[i].c_str());
    }
  
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_SafeInit(Tcl_Interp *interp);}\n"",
          kitName);
  fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
          kitName);
  
  /* create an extern ref to the generic delete function */
  fprintf(fout,""\nextern void vtkTclGenericDeleteObject(ClientData cd);\n"");

  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""extern \""C\""\n{\nvoid vtkCommonDeleteAssocData(ClientData cd)\n"");
    fprintf(fout,""  {\n"");
    fprintf(fout,""  vtkTclInterpStruct *tis = static_cast<vtkTclInterpStruct*>(cd);\n"");
    fprintf(fout,""  delete tis;\n  }\n}\n"");
    }
    
  /* the main declaration */
  fprintf(fout,""\n\nint VTK_EXPORT %s_SafeInit(Tcl_Interp *interp)\n{\n"",kitName);
  fprintf(fout,""  return %s_Init(interp);\n}\n"",kitName);
  
  fprintf(fout,""\n\nint VTK_EXPORT %s_Init(Tcl_Interp *interp)\n{\n"",
          kitName);
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,
            ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");
    fprintf(fout,
            ""  Tcl_CreateExitHandler(vtkCommonDeleteAssocData,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",\n""
                 ""                    reinterpret_cast<vtkTclCommandType>(vtkCommandForward),\n""
                 ""                    (ClientData *)NULL, NULL);\n\n"");
    }
  
  for (i = 0; i < this->Commands.size(); i++)
    {
    fprintf(fout,""  %s_Init(interp);\n"", capcommands[i].c_str());
    }
  fprintf(fout,""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""  vtkTclCreateNew(interp,(char *) \""%s\"", %sNewCommand,\n"",
            classes[i].c_str(), classes[i].c_str());
    fprintf(fout,""                  %sCommand);\n"",classes[i].c_str());
    }
  
  fprintf(fout,""  char pkgName[]=\""%s\"";\n"", this->LibraryName.c_str());
  fprintf(fout,""  char pkgVers[]=VTK_TCL_TO_STRING(VTK_MAJOR_VERSION)""
               "" \"".\"" ""
               ""VTK_TCL_TO_STRING(VTK_MINOR_VERSION);\n"");
  fprintf(fout,""  Tcl_PkgProvide(interp, pkgName, pkgVers);\n"");
  fprintf(fout,""  return TCL_OK;\n}\n"");
  fclose(fout);

  // copy the file if different
  cmSystemTools::CopyFileIfDifferent(tempOutputFile.c_str(),
                                     outFileName.c_str());
  cmSystemTools::RemoveFile(tempOutputFile.c_str());

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1239.cpp,"[4, 0, 5, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 0, 227, 0, 0, 4, 4, 0, 0, 7, 76, 0, 0, 0, 0, 1, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 9, 4, 1, 0, 76, 0, 0, 52, 0, 123, 0, 5, 0, 0, 5, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1239.cpp,27,[],"[""FILE *"", ""!"", ""!""]"
cac30b5ff8f7034b5290700a4dee28c84e001ac9,STYLE: fix line length,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_569.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1462.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1462.cpp,247,252,259,267,"fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());","fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n""
            ,classes[i].c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1240.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1240.cpp,"{
    fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());
    fprintf(fout,""ClientData %sNewCommand();\n"",classes[i].c_str());
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1240.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1240.cpp,40,"[""FILE *"", ""string"", ""classes [ i ] . c_str_ret""]","[""null"", ""classes . size_ret"", ""<""]"
cac30b5ff8f7034b5290700a4dee28c84e001ac9,STYLE: fix line length,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_569.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1462.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1462.cpp,247,252,260,269,,"fprintf(fout,""             int argc, char *argv[]);\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1241.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1241.cpp,"{
    fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());
    fprintf(fout,""ClientData %sNewCommand();\n"",classes[i].c_str());
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1241.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1241.cpp,41,"[""FILE *"", ""string"", ""classes [ i ] . c_str_ret""]","[""null"", ""classes . size_ret"", ""<""]"
cac30b5ff8f7034b5290700a4dee28c84e001ac9,STYLE: fix line length,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_569.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1463.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1463.cpp,280,290,282,292,"fprintf(fout,""extern void vtkTclListInstances(Tcl_Interp *interp, ClientData arg);\n"");","fprintf(fout,""extern void vtkTclListInstances(Tcl_Interp *interp,""
          ""ClientData arg);\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1242.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1242.cpp,"{
  unsigned int i;
  std::string tempOutputFile = outFileName + "".tmp"";
  FILE *fout = fopen(tempOutputFile.c_str(),""w"");
  if (!fout)
    {
    cmSystemTools::Error(""Failed to open TclInit file for "",
                         tempOutputFile.c_str());
    cmSystemTools::ReportLastSystemError("""");
    return false;
    }

  // capitalized commands just once
  std::vector<std::string> capcommands;
  for (i = 0; i < this->Commands.size(); i++)
    {
    capcommands.push_back(cmSystemTools::Capitalized(this->Commands[i]));
    }
  
  fprintf(fout,""#include \""vtkTclUtil.h\""\n"");
  fprintf(fout,""#include \""vtkVersion.h\""\n"");
  fprintf(fout,""#define VTK_TCL_TO_STRING(x) VTK_TCL_TO_STRING0(x)\n"");
  fprintf(fout,""#define VTK_TCL_TO_STRING0(x) #x\n"");
  
  fprintf(fout,
          ""extern \""C\""\n""
          ""{\n""
          ""#if (TCL_MAJOR_VERSION == 8) && (TCL_MINOR_VERSION >= 4) && (TCL_RELEASE_LEVEL >= TCL_FINAL_RELEASE)\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, CONST84 char *[]);\n""
          ""#else\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, char *[]);\n""
          ""#endif\n""
          ""}\n""
          ""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());
    fprintf(fout,""ClientData %sNewCommand();\n"",classes[i].c_str());
    }
  
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""int vtkCommand(ClientData cd, Tcl_Interp *interp,\n""
                 ""               int argc, char *argv[]);\n"");
    fprintf(fout,""\nTcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkCommandLookup;\n"");
    fprintf(fout,""int vtkCommandForward(ClientData cd, Tcl_Interp *interp,\n""
                 ""                      int argc, char *argv[]){\n""
                 ""  return vtkCommand(cd, interp, argc, argv);\n""
                 ""}\n"");
    }
  else
    {
    fprintf(fout,""\nextern Tcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkCommandLookup;\n"");
    }
  fprintf(fout,""extern void vtkTclDeleteObjectFromHash(void *);\n"");  
  fprintf(fout,""extern void vtkTclListInstances(Tcl_Interp *interp, ClientData arg);\n"");

  for (i = 0; i < this->Commands.size(); i++)
    {
    fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
            capcommands[i].c_str());
    }
  
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_SafeInit(Tcl_Interp *interp);}\n"",
          kitName);
  fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
          kitName);
  
  /* create an extern ref to the generic delete function */
  fprintf(fout,""\nextern void vtkTclGenericDeleteObject(ClientData cd);\n"");

  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""extern \""C\""\n{\nvoid vtkCommonDeleteAssocData(ClientData cd)\n"");
    fprintf(fout,""  {\n"");
    fprintf(fout,""  vtkTclInterpStruct *tis = static_cast<vtkTclInterpStruct*>(cd);\n"");
    fprintf(fout,""  delete tis;\n  }\n}\n"");
    }
    
  /* the main declaration */
  fprintf(fout,""\n\nint VTK_EXPORT %s_SafeInit(Tcl_Interp *interp)\n{\n"",kitName);
  fprintf(fout,""  return %s_Init(interp);\n}\n"",kitName);
  
  fprintf(fout,""\n\nint VTK_EXPORT %s_Init(Tcl_Interp *interp)\n{\n"",
          kitName);
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,
            ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");
    fprintf(fout,
            ""  Tcl_CreateExitHandler(vtkCommonDeleteAssocData,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",\n""
                 ""                    reinterpret_cast<vtkTclCommandType>(vtkCommandForward),\n""
                 ""                    (ClientData *)NULL, NULL);\n\n"");
    }
  
  for (i = 0; i < this->Commands.size(); i++)
    {
    fprintf(fout,""  %s_Init(interp);\n"", capcommands[i].c_str());
    }
  fprintf(fout,""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""  vtkTclCreateNew(interp,(char *) \""%s\"", %sNewCommand,\n"",
            classes[i].c_str(), classes[i].c_str());
    fprintf(fout,""                  %sCommand);\n"",classes[i].c_str());
    }
  
  fprintf(fout,""  char pkgName[]=\""%s\"";\n"", this->LibraryName.c_str());
  fprintf(fout,""  char pkgVers[]=VTK_TCL_TO_STRING(VTK_MAJOR_VERSION)""
               "" \"".\"" ""
               ""VTK_TCL_TO_STRING(VTK_MINOR_VERSION);\n"");
  fprintf(fout,""  Tcl_PkgProvide(interp, pkgName, pkgVers);\n"");
  fprintf(fout,""  return TCL_OK;\n}\n"");
  fclose(fout);

  // copy the file if different
  cmSystemTools::CopyFileIfDifferent(tempOutputFile.c_str(),
                                     outFileName.c_str());
  cmSystemTools::RemoveFile(tempOutputFile.c_str());

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1242.cpp,"[4, 0, 5, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 0, 227, 0, 0, 4, 4, 0, 0, 7, 76, 0, 0, 0, 0, 1, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 9, 4, 1, 0, 76, 0, 0, 52, 0, 123, 0, 5, 0, 0, 5, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1242.cpp,63,"[""FILE *"", ""string""]","[""FILE *"", ""!""]"
cac30b5ff8f7034b5290700a4dee28c84e001ac9,STYLE: fix line length,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_569.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1463.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1463.cpp,280,290,290,302,"fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_SafeInit(Tcl_Interp *interp);}\n"",
          kitName);","fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT ""
          ""%s_SafeInit(Tcl_Interp *interp);}\n"", kitName);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1243.cpp,"{
  unsigned int i;
  std::string tempOutputFile = outFileName + "".tmp"";
  FILE *fout = fopen(tempOutputFile.c_str(),""w"");
  if (!fout)
    {
    cmSystemTools::Error(""Failed to open TclInit file for "",
                         tempOutputFile.c_str());
    cmSystemTools::ReportLastSystemError("""");
    return false;
    }

  // capitalized commands just once
  std::vector<std::string> capcommands;
  for (i = 0; i < this->Commands.size(); i++)
    {
    capcommands.push_back(cmSystemTools::Capitalized(this->Commands[i]));
    }
  
  fprintf(fout,""#include \""vtkTclUtil.h\""\n"");
  fprintf(fout,""#include \""vtkVersion.h\""\n"");
  fprintf(fout,""#define VTK_TCL_TO_STRING(x) VTK_TCL_TO_STRING0(x)\n"");
  fprintf(fout,""#define VTK_TCL_TO_STRING0(x) #x\n"");
  
  fprintf(fout,
          ""extern \""C\""\n""
          ""{\n""
          ""#if (TCL_MAJOR_VERSION == 8) && (TCL_MINOR_VERSION >= 4) && (TCL_RELEASE_LEVEL >= TCL_FINAL_RELEASE)\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, CONST84 char *[]);\n""
          ""#else\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, char *[]);\n""
          ""#endif\n""
          ""}\n""
          ""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());
    fprintf(fout,""ClientData %sNewCommand();\n"",classes[i].c_str());
    }
  
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""int vtkCommand(ClientData cd, Tcl_Interp *interp,\n""
                 ""               int argc, char *argv[]);\n"");
    fprintf(fout,""\nTcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkCommandLookup;\n"");
    fprintf(fout,""int vtkCommandForward(ClientData cd, Tcl_Interp *interp,\n""
                 ""                      int argc, char *argv[]){\n""
                 ""  return vtkCommand(cd, interp, argc, argv);\n""
                 ""}\n"");
    }
  else
    {
    fprintf(fout,""\nextern Tcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkCommandLookup;\n"");
    }
  fprintf(fout,""extern void vtkTclDeleteObjectFromHash(void *);\n"");  
  fprintf(fout,""extern void vtkTclListInstances(Tcl_Interp *interp, ClientData arg);\n"");

  for (i = 0; i < this->Commands.size(); i++)
    {
    fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
            capcommands[i].c_str());
    }
  
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_SafeInit(Tcl_Interp *interp);}\n"",
          kitName);
  fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
          kitName);
  
  /* create an extern ref to the generic delete function */
  fprintf(fout,""\nextern void vtkTclGenericDeleteObject(ClientData cd);\n"");

  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""extern \""C\""\n{\nvoid vtkCommonDeleteAssocData(ClientData cd)\n"");
    fprintf(fout,""  {\n"");
    fprintf(fout,""  vtkTclInterpStruct *tis = static_cast<vtkTclInterpStruct*>(cd);\n"");
    fprintf(fout,""  delete tis;\n  }\n}\n"");
    }
    
  /* the main declaration */
  fprintf(fout,""\n\nint VTK_EXPORT %s_SafeInit(Tcl_Interp *interp)\n{\n"",kitName);
  fprintf(fout,""  return %s_Init(interp);\n}\n"",kitName);
  
  fprintf(fout,""\n\nint VTK_EXPORT %s_Init(Tcl_Interp *interp)\n{\n"",
          kitName);
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,
            ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");
    fprintf(fout,
            ""  Tcl_CreateExitHandler(vtkCommonDeleteAssocData,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",\n""
                 ""                    reinterpret_cast<vtkTclCommandType>(vtkCommandForward),\n""
                 ""                    (ClientData *)NULL, NULL);\n\n"");
    }
  
  for (i = 0; i < this->Commands.size(); i++)
    {
    fprintf(fout,""  %s_Init(interp);\n"", capcommands[i].c_str());
    }
  fprintf(fout,""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""  vtkTclCreateNew(interp,(char *) \""%s\"", %sNewCommand,\n"",
            classes[i].c_str(), classes[i].c_str());
    fprintf(fout,""                  %sCommand);\n"",classes[i].c_str());
    }
  
  fprintf(fout,""  char pkgName[]=\""%s\"";\n"", this->LibraryName.c_str());
  fprintf(fout,""  char pkgVers[]=VTK_TCL_TO_STRING(VTK_MAJOR_VERSION)""
               "" \"".\"" ""
               ""VTK_TCL_TO_STRING(VTK_MINOR_VERSION);\n"");
  fprintf(fout,""  Tcl_PkgProvide(interp, pkgName, pkgVers);\n"");
  fprintf(fout,""  return TCL_OK;\n}\n"");
  fclose(fout);

  // copy the file if different
  cmSystemTools::CopyFileIfDifferent(tempOutputFile.c_str(),
                                     outFileName.c_str());
  cmSystemTools::RemoveFile(tempOutputFile.c_str());

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1243.cpp,"[4, 0, 5, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 0, 227, 0, 0, 4, 4, 0, 0, 7, 76, 0, 0, 0, 0, 1, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 9, 4, 1, 0, 76, 0, 0, 52, 0, 123, 0, 5, 0, 0, 5, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1243.cpp,71,"[""FILE *"", ""string"", ""const char *""]","[""FILE *"", ""!""]"
cac30b5ff8f7034b5290700a4dee28c84e001ac9,STYLE: fix line length,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_569.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1463.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1463.cpp,280,290,292,304,"fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
          kitName);","fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init""
          ""(Tcl_Interp *interp);}\n"", kitName);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1244.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1244.cpp,"{
  unsigned int i;
  std::string tempOutputFile = outFileName + "".tmp"";
  FILE *fout = fopen(tempOutputFile.c_str(),""w"");
  if (!fout)
    {
    cmSystemTools::Error(""Failed to open TclInit file for "",
                         tempOutputFile.c_str());
    cmSystemTools::ReportLastSystemError("""");
    return false;
    }

  // capitalized commands just once
  std::vector<std::string> capcommands;
  for (i = 0; i < this->Commands.size(); i++)
    {
    capcommands.push_back(cmSystemTools::Capitalized(this->Commands[i]));
    }
  
  fprintf(fout,""#include \""vtkTclUtil.h\""\n"");
  fprintf(fout,""#include \""vtkVersion.h\""\n"");
  fprintf(fout,""#define VTK_TCL_TO_STRING(x) VTK_TCL_TO_STRING0(x)\n"");
  fprintf(fout,""#define VTK_TCL_TO_STRING0(x) #x\n"");
  
  fprintf(fout,
          ""extern \""C\""\n""
          ""{\n""
          ""#if (TCL_MAJOR_VERSION == 8) && (TCL_MINOR_VERSION >= 4) && (TCL_RELEASE_LEVEL >= TCL_FINAL_RELEASE)\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, CONST84 char *[]);\n""
          ""#else\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, char *[]);\n""
          ""#endif\n""
          ""}\n""
          ""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());
    fprintf(fout,""ClientData %sNewCommand();\n"",classes[i].c_str());
    }
  
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""int vtkCommand(ClientData cd, Tcl_Interp *interp,\n""
                 ""               int argc, char *argv[]);\n"");
    fprintf(fout,""\nTcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkCommandLookup;\n"");
    fprintf(fout,""int vtkCommandForward(ClientData cd, Tcl_Interp *interp,\n""
                 ""                      int argc, char *argv[]){\n""
                 ""  return vtkCommand(cd, interp, argc, argv);\n""
                 ""}\n"");
    }
  else
    {
    fprintf(fout,""\nextern Tcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkCommandLookup;\n"");
    }
  fprintf(fout,""extern void vtkTclDeleteObjectFromHash(void *);\n"");  
  fprintf(fout,""extern void vtkTclListInstances(Tcl_Interp *interp, ClientData arg);\n"");

  for (i = 0; i < this->Commands.size(); i++)
    {
    fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
            capcommands[i].c_str());
    }
  
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_SafeInit(Tcl_Interp *interp);}\n"",
          kitName);
  fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
          kitName);
  
  /* create an extern ref to the generic delete function */
  fprintf(fout,""\nextern void vtkTclGenericDeleteObject(ClientData cd);\n"");

  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""extern \""C\""\n{\nvoid vtkCommonDeleteAssocData(ClientData cd)\n"");
    fprintf(fout,""  {\n"");
    fprintf(fout,""  vtkTclInterpStruct *tis = static_cast<vtkTclInterpStruct*>(cd);\n"");
    fprintf(fout,""  delete tis;\n  }\n}\n"");
    }
    
  /* the main declaration */
  fprintf(fout,""\n\nint VTK_EXPORT %s_SafeInit(Tcl_Interp *interp)\n{\n"",kitName);
  fprintf(fout,""  return %s_Init(interp);\n}\n"",kitName);
  
  fprintf(fout,""\n\nint VTK_EXPORT %s_Init(Tcl_Interp *interp)\n{\n"",
          kitName);
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,
            ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");
    fprintf(fout,
            ""  Tcl_CreateExitHandler(vtkCommonDeleteAssocData,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",\n""
                 ""                    reinterpret_cast<vtkTclCommandType>(vtkCommandForward),\n""
                 ""                    (ClientData *)NULL, NULL);\n\n"");
    }
  
  for (i = 0; i < this->Commands.size(); i++)
    {
    fprintf(fout,""  %s_Init(interp);\n"", capcommands[i].c_str());
    }
  fprintf(fout,""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""  vtkTclCreateNew(interp,(char *) \""%s\"", %sNewCommand,\n"",
            classes[i].c_str(), classes[i].c_str());
    fprintf(fout,""                  %sCommand);\n"",classes[i].c_str());
    }
  
  fprintf(fout,""  char pkgName[]=\""%s\"";\n"", this->LibraryName.c_str());
  fprintf(fout,""  char pkgVers[]=VTK_TCL_TO_STRING(VTK_MAJOR_VERSION)""
               "" \"".\"" ""
               ""VTK_TCL_TO_STRING(VTK_MINOR_VERSION);\n"");
  fprintf(fout,""  Tcl_PkgProvide(interp, pkgName, pkgVers);\n"");
  fprintf(fout,""  return TCL_OK;\n}\n"");
  fclose(fout);

  // copy the file if different
  cmSystemTools::CopyFileIfDifferent(tempOutputFile.c_str(),
                                     outFileName.c_str());
  cmSystemTools::RemoveFile(tempOutputFile.c_str());

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1244.cpp,"[4, 0, 5, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 0, 227, 0, 0, 4, 4, 0, 0, 7, 76, 0, 0, 0, 0, 1, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 9, 4, 1, 0, 76, 0, 0, 52, 0, 123, 0, 5, 0, 0, 5, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1244.cpp,73,"[""FILE *"", ""string"", ""const char *""]","[""FILE *"", ""!""]"
cac30b5ff8f7034b5290700a4dee28c84e001ac9,STYLE: fix line length,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_569.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1463.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1463.cpp,280,290,300,312,"fprintf(fout,""extern \""C\""\n{\nvoid vtkCommonDeleteAssocData(ClientData cd)\n"");","fprintf(fout,""extern \""C\""\n{\nvoid ""
            ""vtkCommonDeleteAssocData(ClientData cd)\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1245.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1245.cpp,"{
    fprintf(fout,""extern \""C\""\n{\nvoid vtkCommonDeleteAssocData(ClientData cd)\n"");
    fprintf(fout,""  {\n"");
    fprintf(fout,""  vtkTclInterpStruct *tis = static_cast<vtkTclInterpStruct*>(cd);\n"");
    fprintf(fout,""  delete tis;\n  }\n}\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1245.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1245.cpp,81,"[""FILE *"", ""string""]","[""strcmp_ret"", ""!""]"
cac30b5ff8f7034b5290700a4dee28c84e001ac9,STYLE: fix line length,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_569.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1463.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1463.cpp,280,290,302,315,"fprintf(fout,""  vtkTclInterpStruct *tis = static_cast<vtkTclInterpStruct*>(cd);\n"");","fprintf(fout,""  vtkTclInterpStruct *tis = ""
            ""static_cast<vtkTclInterpStruct*>(cd);\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1246.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1246.cpp,"{
    fprintf(fout,""extern \""C\""\n{\nvoid vtkCommonDeleteAssocData(ClientData cd)\n"");
    fprintf(fout,""  {\n"");
    fprintf(fout,""  vtkTclInterpStruct *tis = static_cast<vtkTclInterpStruct*>(cd);\n"");
    fprintf(fout,""  delete tis;\n  }\n}\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1246.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1246.cpp,83,"[""FILE *"", ""string""]","[""strcmp_ret"", ""!""]"
cac30b5ff8f7034b5290700a4dee28c84e001ac9,STYLE: fix line length,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_569.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1464.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1464.cpp,324,339,326,341,"fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");","fprintf(fout, ""  Tcl_SetAssocData(interp,(char *) ""
            ""\""vtk\"",NULL,(ClientData *)info);\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1247.cpp,"{
    fprintf(fout,
            ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");
    fprintf(fout,
            ""  Tcl_CreateExitHandler(vtkCommonDeleteAssocData,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",\n""
                 ""                    reinterpret_cast<vtkTclCommandType>(vtkCommandForward),\n""
                 ""                    (ClientData *)NULL, NULL);\n\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1247.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 10, 0, 20, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1247.cpp,107,"[""FILE *"", ""string""]","[""strcmp_ret"", ""!""]"
cac30b5ff8f7034b5290700a4dee28c84e001ac9,STYLE: fix line length,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_569.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1464.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1464.cpp,324,339,328,343,"fprintf(fout,
            ""  Tcl_CreateExitHandler(vtkCommonDeleteAssocData,(ClientData *)info);\n"");","fprintf(fout, ""  Tcl_CreateExitHandler(vtkCommonDeleteAssocData""
            "",(ClientData *)info);\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1248.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1248.cpp,"{
    fprintf(fout,
            ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");
    fprintf(fout,
            ""  Tcl_CreateExitHandler(vtkCommonDeleteAssocData,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",\n""
                 ""                    reinterpret_cast<vtkTclCommandType>(vtkCommandForward),\n""
                 ""                    (ClientData *)NULL, NULL);\n\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1248.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 10, 0, 20, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1248.cpp,109,"[""FILE *"", ""string""]","[""strcmp_ret"", ""!""]"
cac30b5ff8f7034b5290700a4dee28c84e001ac9,STYLE: fix line length,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_569.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_569.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1464.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1464.cpp,324,339,332,347,"fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",\n""
                 ""                    reinterpret_cast<vtkTclCommandType>(vtkCommandForward),\n""
                 ""                    (ClientData *)NULL, NULL);\n\n"");","fprintf(fout,
            ""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",\n""
            ""                    reinterpret_cast<vtkTclCommandType>(""
            ""vtkCommandForward),\n""
            ""                    (ClientData *)NULL, NULL);\n\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1249.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1249.cpp,"{
    fprintf(fout,
            ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");
    fprintf(fout,
            ""  Tcl_CreateExitHandler(vtkCommonDeleteAssocData,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",\n""
                 ""                    reinterpret_cast<vtkTclCommandType>(vtkCommandForward),\n""
                 ""                    (ClientData *)NULL, NULL);\n\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1249.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 10, 0, 20, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1249.cpp,113,[],"[""strcmp_ret"", ""!""]"
1794836ee3e8727c9eed233f1ebaa0a1dbf76e57,ENH: fix build c stuff with c and c++ with c++,[],Tests/COnly/conly.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_573.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_573.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_573.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1471.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1471.cpp,17,18,19,20,"f(""Foo: %s\n"", foo);","f(""Foo: %s %d\n"", foo, class);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1250.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1250.cpp,"{
  if ( LibC1Func() != 2.0 )
    {
    printf(""Problem with libc1\n"");
    return 1;
    }
  if ( LibC2Func() != 1.0 )
    {
    printf(""Problem with libc2\n"");
    return 1;
    }
  printf(""Foo: %s\n"", foo);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1250.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1250.cpp,12,"[""string"", ""unkown""]","[""LibC2Func_ret"", ""constant"", ""!="", ""!""]"
fb5d92ea37b6b7cbd9eda84538ce072b90b80b73,ENH: m_ cleanup for curses,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_578.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_578.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_578.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1479.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1479.cpp,441,441,443,443,"sprintf(firstLine, ""Page %d of %d"", cw->GetPage(), m_NumberOfPages);","sprintf(firstLine, ""Page %d of %d"", cw->GetPage(), this->NumberOfPages);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1251.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1251.cpp,"{
    sprintf(firstLine, ""Page %d of %d"", cw->GetPage(), m_NumberOfPages);
    curses_move(0,65-strlen(firstLine)-1);
    printw(firstLine);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1251.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1251.cpp,80,"[""char *"", ""string"", ""cw -> GetPage_ret"", ""unkown""]","[""cmCursesWidget *""]"
3d96e522617647665d7e99919ba71d34b1db870c,STYLE: some m_ to this-> cleanup,[],Source/cmGlobalGenerator.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_581.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_581.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_581.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1485.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1485.cpp,581,581,583,583,"sprintf(num,""%d"",static_cast<int>(m_LocalGenerators.size()));","sprintf(num,""%d"",static_cast<int>(this->LocalGenerators.size()));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1252.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1252.cpp,"{
  // Delete any existing cmLocalGenerators
  unsigned int i;
  for (i = 0; i < m_LocalGenerators.size(); ++i)
    {
    delete m_LocalGenerators[i];
    }
  m_LocalGenerators.clear();

  // Setup relative path generation.
  this->ConfigureRelativePaths();

  // start with this directory
  cmLocalGenerator *lg = this->CreateLocalGenerator();
  m_LocalGenerators.push_back(lg);

  // set the Start directories
  lg->GetMakefile()->SetStartDirectory
    (m_CMakeInstance->GetStartDirectory());
  lg->GetMakefile()->SetStartOutputDirectory
    (m_CMakeInstance->GetStartOutputDirectory());
  lg->GetMakefile()->MakeStartDirectoriesCurrent();
  
  // now do it
  lg->Configure();
  
  // update the cache entry for the number of local generators, this is used
  // for progress
  char num[100];
  sprintf(num,""%d"",static_cast<int>(m_LocalGenerators.size()));
  this->GetCMakeInstance()->AddCacheEntry
    (""CMAKE_NUMBER_OF_LOCAL_GENERATORS"", num,
     ""number of local generators"", cmCacheManager::INTERNAL);
  
  std::set<cmStdString> notFoundMap;
  // after it is all done do a ConfigureFinalPass
  cmCacheManager* manager = 0;
  for (i = 0; i < m_LocalGenerators.size(); ++i)
    {
    manager = m_LocalGenerators[i]->GetMakefile()->GetCacheManager();
    m_LocalGenerators[i]->ConfigureFinalPass();
    cmTargets & targets = 
      m_LocalGenerators[i]->GetMakefile()->GetTargets(); 
    for (cmTargets::iterator l = targets.begin();
         l != targets.end(); l++)
      {
      cmTarget::LinkLibraries libs = l->second.GetLinkLibraries();
      for(cmTarget::LinkLibraries::iterator lib = libs.begin();
          lib != libs.end(); ++lib)
        {
        if(lib->first.size() > 9 && 
           cmSystemTools::IsNOTFOUND(lib->first.c_str()))
          {
          std::string varName = lib->first.substr(0, lib->first.size()-9);
          notFoundMap.insert(varName);
          }
        }
      std::vector<std::string>& incs = 
        m_LocalGenerators[i]->GetMakefile()->GetIncludeDirectories();
      
      for( std::vector<std::string>::iterator lib = incs.begin();
           lib != incs.end(); ++lib)
        {
        if(lib->size() > 9 && 
           cmSystemTools::IsNOTFOUND(lib->c_str()))
          {
          std::string varName = lib->substr(0, lib->size()-9); 
          notFoundMap.insert(varName);
          }
        }
      m_CMakeInstance->UpdateProgress(""Configuring"", 
                                      0.9f+0.1f*(i+1.0f)/m_LocalGenerators.size());
      m_LocalGenerators[i]->GetMakefile()->CheckInfiniteLoops();
      }
    }

  if(notFoundMap.size())
    {
    std::string notFoundVars;
    for(std::set<cmStdString>::iterator ii = notFoundMap.begin();
        ii != notFoundMap.end(); ++ii)
      { 
      notFoundVars += *ii;
      if(manager)
        {
        cmCacheManager::CacheIterator it = 
          manager->GetCacheIterator(ii->c_str());
        if(it.GetPropertyAsBool(""ADVANCED""))
          {
          notFoundVars += "" (ADVANCED)"";
          }
        }
      notFoundVars += ""\n"";
      }
    cmSystemTools::Error(""This project requires some variables to be set,\n""
                         ""and cmake can not find them.\n""
                         ""Please set the following variables:\n"",
                         notFoundVars.c_str());
    }
  // at this point m_LocalGenerators has been filled,
  // so create the map from project name to vector of local generators
  this->FillProjectMap();
  if ( !m_CMakeInstance->GetScriptMode() )
    {
    m_CMakeInstance->UpdateProgress(""Configuring done"", -1);
    }
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1252.cpp,"[6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 276, 0, 0, 12, 16, 0, 0, 18, 25, 0, 0, 0, 0, 4, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 0, 93, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 7, 0, 12, 6, 0, 0, 66, 0, 0, 22, 0, 32, 0, 6, 0, 0, 6, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1252.cpp,30,"[""char *"", ""string"", ""bool""]",[]
3d96e522617647665d7e99919ba71d34b1db870c,STYLE: some m_ to this-> cleanup,[],Source/cmLocalVisualStudio6Generator.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_584.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_584.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_584.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1489.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1489.cpp,536,537,540,541,"sprintf(output,""%s/%s_force_%i"", m_Makefile->GetStartOutputDirectory(),
          target.GetName(), count);","sprintf(output,""%s/%s_force_%i"", this->Makefile->GetStartOutputDirectory(),
          target.GetName(), count);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1253.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1253.cpp,"{
  // Create a fake output that forces the rule to run.
  char* output = new char[(strlen(m_Makefile->GetStartOutputDirectory()) +
                           strlen(target.GetName()) + 30)];
  sprintf(output,""%s/%s_force_%i"", m_Makefile->GetStartOutputDirectory(),
          target.GetName(), count);

  // Add the rule with the given dependencies and commands.
  const char* no_main_dependency = 0;
  m_Makefile->AddCustomCommandToOutput(output,
                                       depends,
                                       no_main_dependency,
                                       origCommand.GetCommandLines(),
                                       origCommand.GetComment(),
                                       origCommand.GetWorkingDirectory());

  // Replace the dependencies with the output of this rule so that the
  // next rule added will run after this one.
  depends.clear();
  depends.push_back(output);

  // Add a source file representing this output to the project.
  cmSourceFile* outsf = m_Makefile->GetSourceFileWithOutput(output);
  target.GetSourceFiles().push_back(outsf);

  // Free the fake output name.
  delete [] output;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1253.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 57, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 3, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 0, 0, 0, 16, 0, 0, 6, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1253.cpp,9,"[""char *"", ""string"", ""m_Makefile -> GetStartOutputDirectory_ret"", ""target . GetName_ret"", ""int""]",[]
3d96e522617647665d7e99919ba71d34b1db870c,STYLE: some m_ to this-> cleanup,[],Source/cmOutputRequiredFilesCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_585.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_585.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_585.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1490.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1490.cpp,199,199,214,214,"fprintf(fout,""%s\n"",(*d)->m_FullPath.c_str());","fprintf(fout,""%s\n"",(*d)->FullPath.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1254.cpp,"{
          tmp = tmp.substr(0, pos);
          fprintf(fout,""%s\n"",(*d)->m_FullPath.c_str());
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1254.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1254.cpp,21,"[""FILE *"", ""string"", ""( * d ) -> m_FullPath . c_str_ret""]","[""std :: string :: size_type"", ""unkown"", ""!="", ""tmp . substr_ret"", ""constant"", ""!="", ""&&""]"
3d96e522617647665d7e99919ba71d34b1db870c,STYLE: some m_ to this-> cleanup,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_586.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_586.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_586.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1494.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1494.cpp,348,348,350,350,"f(fout,""  char pkgName[]=\""%s\"";\n"", m_LibraryName.c_str());","f(fout,""  char pkgName[]=\""%s\"";\n"", this->LibraryName.c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1255.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1255.cpp,"{
  unsigned int i;
  std::string tempOutputFile = outFileName + "".tmp"";
  FILE *fout = fopen(tempOutputFile.c_str(),""w"");
  if (!fout)
    {
    cmSystemTools::Error(""Failed to open TclInit file for "",
                         tempOutputFile.c_str());
    cmSystemTools::ReportLastSystemError("""");
    return false;
    }

  // capitalized commands just once
  std::vector<std::string> capcommands;
  for (i = 0; i < m_Commands.size(); i++)
    {
    capcommands.push_back(cmSystemTools::Capitalized(m_Commands[i]));
    }
  
  fprintf(fout,""#include \""vtkTclUtil.h\""\n"");
  fprintf(fout,""#include \""vtkVersion.h\""\n"");
  fprintf(fout,""#define VTK_TCL_TO_STRING(x) VTK_TCL_TO_STRING0(x)\n"");
  fprintf(fout,""#define VTK_TCL_TO_STRING0(x) #x\n"");
  
  fprintf(fout,
          ""extern \""C\""\n""
          ""{\n""
          ""#if (TCL_MAJOR_VERSION == 8) && (TCL_MINOR_VERSION >= 4) && (TCL_RELEASE_LEVEL >= TCL_FINAL_RELEASE)\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, CONST84 char *[]);\n""
          ""#else\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, char *[]);\n""
          ""#endif\n""
          ""}\n""
          ""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());
    fprintf(fout,""ClientData %sNewCommand();\n"",classes[i].c_str());
    }
  
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""int vtkCommand(ClientData cd, Tcl_Interp *interp,\n""
                 ""               int argc, char *argv[]);\n"");
    fprintf(fout,""\nTcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkCommandLookup;\n"");
    fprintf(fout,""int vtkCommandForward(ClientData cd, Tcl_Interp *interp,\n""
                 ""                      int argc, char *argv[]){\n""
                 ""  return vtkCommand(cd, interp, argc, argv);\n""
                 ""}\n"");
    }
  else
    {
    fprintf(fout,""\nextern Tcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkCommandLookup;\n"");
    }
  fprintf(fout,""extern void vtkTclDeleteObjectFromHash(void *);\n"");  
  fprintf(fout,""extern void vtkTclListInstances(Tcl_Interp *interp, ClientData arg);\n"");

  for (i = 0; i < m_Commands.size(); i++)
    {
    fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
            capcommands[i].c_str());
    }
  
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_SafeInit(Tcl_Interp *interp);}\n"",
          kitName);
  fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
          kitName);
  
  /* create an extern ref to the generic delete function */
  fprintf(fout,""\nextern void vtkTclGenericDeleteObject(ClientData cd);\n"");

  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""extern \""C\""\n{\nvoid vtkCommonDeleteAssocData(ClientData cd)\n"");
    fprintf(fout,""  {\n"");
    fprintf(fout,""  vtkTclInterpStruct *tis = static_cast<vtkTclInterpStruct*>(cd);\n"");
    fprintf(fout,""  delete tis;\n  }\n}\n"");
    }
    
  /* the main declaration */
  fprintf(fout,""\n\nint VTK_EXPORT %s_SafeInit(Tcl_Interp *interp)\n{\n"",kitName);
  fprintf(fout,""  return %s_Init(interp);\n}\n"",kitName);
  
  fprintf(fout,""\n\nint VTK_EXPORT %s_Init(Tcl_Interp *interp)\n{\n"",
          kitName);
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,
            ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");
    fprintf(fout,
            ""  Tcl_CreateExitHandler(vtkCommonDeleteAssocData,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",\n""
                 ""                    reinterpret_cast<vtkTclCommandType>(vtkCommandForward),\n""
                 ""                    (ClientData *)NULL, NULL);\n\n"");
    }
  
  for (i = 0; i < m_Commands.size(); i++)
    {
    fprintf(fout,""  %s_Init(interp);\n"", capcommands[i].c_str());
    }
  fprintf(fout,""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""  vtkTclCreateNew(interp,(char *) \""%s\"", %sNewCommand,\n"",
            classes[i].c_str(), classes[i].c_str());
    fprintf(fout,""                  %sCommand);\n"",classes[i].c_str());
    }
  
  fprintf(fout,""  char pkgName[]=\""%s\"";\n"", m_LibraryName.c_str());
  fprintf(fout,""  char pkgVers[]=VTK_TCL_TO_STRING(VTK_MAJOR_VERSION)""
               "" \"".\"" ""
               ""VTK_TCL_TO_STRING(VTK_MINOR_VERSION);\n"");
  fprintf(fout,""  Tcl_PkgProvide(interp, pkgName, pkgVers);\n"");
  fprintf(fout,""  return TCL_OK;\n}\n"");
  fclose(fout);

  // copy the file if different
  cmSystemTools::CopyFileIfDifferent(tempOutputFile.c_str(),
                                     outFileName.c_str());
  cmSystemTools::RemoveFile(tempOutputFile.c_str());

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1255.cpp,"[4, 0, 5, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 0, 222, 0, 0, 4, 4, 0, 0, 7, 76, 0, 0, 0, 0, 1, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 9, 4, 1, 0, 76, 0, 0, 52, 0, 123, 0, 5, 0, 0, 5, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1255.cpp,131,"[""FILE *"", ""string"", ""m_LibraryName . c_str_ret""]","[""FILE *"", ""!""]"
ccac9542b109ca6f1edc8a2460310068e90019aa,ENH: Add a way to overwrite some preferences and ignore certain targets,[],Source/cmake.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_606.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_606.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_606.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1529.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1529.cpp,2033,2083,2036,2092,"sprintf(tgtName, ""node%d"", cnt++);","sprintf(tgtName, ""%s%d"", graphNodePrefix, cnt++);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1256.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1256.cpp,"{
      //std::cout << ""Found target: "" << tit->first.c_str() << std::endl;
      sprintf(tgtName, ""node%d"", cnt++);
      targetNamesNodes[tit->first.c_str()] = tgtName;
      targetPtrs[tit->first.c_str()] = &tit->second;
      //str << ""    \"""" << tgtName << ""\"" [ label=\"""" << tit->first.c_str() <<  ""\"" shape=\""box\""];"" << std::endl;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1256.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1256.cpp,33,"[""char *"", ""string"", ""int""]","[""targets -> begin_ret"", ""targets -> end_ret"", ""!=""]"
ccac9542b109ca6f1edc8a2460310068e90019aa,ENH: Add a way to overwrite some preferences and ignore certain targets,[],Source/cmake.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_606.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_606.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_606.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1530.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1530.cpp,2049,2105,2061,2128,"sprintf(tgtName, ""node%d"", cnt++);","sprintf(tgtName, ""%s%d"", graphNodePrefix, cnt++);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1257.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1257.cpp,"{
          sprintf(tgtName, ""node%d"", cnt++);
          targetDeps[libName] = 2;
          targetNamesNodes[libName] = tgtName;
          //str << ""    \"""" << tgtName << ""\"" [ label=\"""" << libName <<  ""\"" shape=\""ellipse\""];"" << std::endl;
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1257.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1257.cpp,58,"[""char *"", ""string"", ""int""]","[""std :: map < cmStdString , cmStdString > :: iterator"", ""targetNamesNodes . end_ret"", ""==""]"
0323a0d6d20402d994f4f886d51b8c33c02ed73a,BUG: Fix mem leaks related to th_get_pathname. Change this implementation of th_get_pathname so that it *always* returns a strdup'ed value. Callers must now free non-NULL returns from th_get_pathname. Change all callers to call free appropriately.,[],Utilities/cmtar/extract.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_607.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_607.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_607.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1531.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1531.cpp,170,197,175,203,"printf(""tar_extract_file(): calling libtar_hash_add(): key=\""%s\"", ""
         ""value=\""%s\""\n"", th_get_pathname(t), realname);","printf(""tar_extract_file(): calling libtar_hash_add(): key=\""%s\"", ""
         ""value=\""%s\""\n"", pathname, realname);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1258.cpp,"{
  int i;
  linkname_t *lnp;

  if (t->options & TAR_NOOVERWRITE)
  {
    struct stat s;

#ifdef WIN32
    if (stat(realname, &s) == 0 || errno != ENOENT)
#else
    if (lstat(realname, &s) == 0 || errno != ENOENT)
#endif
    {
      errno = EEXIST;
      return -1;
    }
  }

  if (TH_ISDIR(t))
  {
    i = tar_extract_dir(t, realname);
    if (i == 1)
      i = 0;
  }
#ifndef _WIN32
  else if (TH_ISLNK(t))
    i = tar_extract_hardlink(t, realname);
  else if (TH_ISSYM(t))
    i = tar_extract_symlink(t, realname);
  else if (TH_ISCHR(t))
    i = tar_extract_chardev(t, realname);
  else if (TH_ISBLK(t))
    i = tar_extract_blockdev(t, realname);
  else if (TH_ISFIFO(t))
    i = tar_extract_fifo(t, realname);
#endif
  else /* if (TH_ISREG(t)) */
    i = tar_extract_regfile(t, realname);

  if (i != 0)
    return i;

  i = tar_set_file_perms(t, realname);
  if (i != 0)
    return i;

  lnp = (linkname_t *)calloc(1, sizeof(linkname_t));
  if (lnp == NULL)
    return -1;
  strlcpy(lnp->ln_save, th_get_pathname(t), sizeof(lnp->ln_save));
  strlcpy(lnp->ln_real, realname, sizeof(lnp->ln_real));
#ifdef DEBUG
  printf(""tar_extract_file(): calling libtar_hash_add(): key=\""%s\"", ""
         ""value=\""%s\""\n"", th_get_pathname(t), realname);
#endif
  if (libtar_hash_add(t->h, lnp) != 0)
    return -1;

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1258.cpp,"[14, 0, 0, 0, 0, 0, 6, 0, 0, 0, 16, 0, 0, 0, 0, 109, 0, 0, 3, 3, 0, 0, 0, 14, 0, 0, 0, 0, 1, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 78, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 14, 14, 2, 0, 26, 0, 0, 14, 5, 44, 7, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1258.cpp,55,[],"[""calloc_ret"", ""null"", ""=="", ""!""]"
0323a0d6d20402d994f4f886d51b8c33c02ed73a,BUG: Fix mem leaks related to th_get_pathname. Change this implementation of th_get_pathname so that it *always* returns a strdup'ed value. Callers must now free non-NULL returns from th_get_pathname. Change all callers to call free appropriately.,[],Utilities/cmtar/extract.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_607.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_607.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_607.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1533.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1533.cpp,268,325,284,357,"printf(""### done extracting %s\n"", filename);","f(""### done extracting %s\n"", filename);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1259.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1259.cpp,"{
  mode_t mode;
  size_t size;
  uid_t uid;
  gid_t gid;
  int fdout;
  int i, k;
  char buf[T_BLOCKSIZE];
  char *filename;

#ifdef DEBUG
  printf(""==> tar_extract_regfile(t=0x%lx, realname=\""%s\"")\n"", t,
         realname);
#endif

  if (!TH_ISREG(t))
  {
    errno = EINVAL;
    return -1;
  }

  filename = (realname ? realname : th_get_pathname(t));
  mode = th_get_mode(t);
  size = th_get_size(t);
  uid = th_get_uid(t);
  gid = th_get_gid(t);

  /* Make a copy of the string because dirname and mkdirhier may modify the
   * string */
  strncpy(buf, filename, sizeof(buf)-1);
  buf[sizeof(buf)-1] = 0;

  if (mkdirhier(dirname(buf)) == -1)
    {
    return -1;
    }

#ifdef DEBUG
  printf(""  ==> extracting: %s (mode %04o, uid %d, gid %d, %d bytes)\n"",
         filename, mode, uid, gid, size);
#endif
  fdout = open(filename, O_WRONLY | O_CREAT | O_TRUNC
#ifdef O_BINARY
         | O_BINARY
#endif
        , 0666);
  if (fdout == -1)
  {
#ifdef DEBUG
    perror(""open()"");
#endif
    return -1;
  }

#if 0
  /* change the owner.  (will only work if run as root) */
  if (fchown(fdout, uid, gid) == -1 && errno != EPERM)
  {
#ifdef DEBUG
    perror(""fchown()"");
#endif
    return -1;
  }

  /* make sure the mode isn't inheritted from a file we're overwriting */
  if (fchmod(fdout, mode & 07777) == -1)
  {
#ifdef DEBUG
    perror(""fchmod()"");
#endif
    return -1;
  }
#endif

  /* extract the file */
  for (i = size; i > 0; i -= T_BLOCKSIZE)
  {
    k = tar_block_read(t, buf);
    if (k != T_BLOCKSIZE)
    {
      if (k != -1)
        errno = EINVAL;
      return -1;
    }

    /* write block to output file */
    if (write(fdout, buf,
        ((i > T_BLOCKSIZE) ? T_BLOCKSIZE : i)) == -1)
      return -1;
  }

  /* close output file */
  if (close(fdout) == -1)
    return -1;

#ifdef DEBUG
  printf(""### done extracting %s\n"", filename);
#endif

  (void)filename;
  (void)gid;
  (void)uid;
  (void)mode;

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1259.cpp,"[8, 0, 1, 0, 0, 0, 7, 0, 0, 0, 9, 0, 0, 0, 0, 108, 0, 0, 8, 9, 0, 0, 1, 22, 0, 0, 0, 0, 1, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 2, 79, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 2, 0, 10, 9, 2, 0, 19, 0, 0, 19, 0, 34, 16, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1259.cpp,98,"[""string"", ""th_get_pathname_ret""]","[""close_ret"", ""int"", ""=="", ""!""]"
0323a0d6d20402d994f4f886d51b8c33c02ed73a,BUG: Fix mem leaks related to th_get_pathname. Change this implementation of th_get_pathname so that it *always* returns a strdup'ed value. Callers must now free non-NULL returns from th_get_pathname. Change all callers to call free appropriately.,[],Utilities/cmtar/output.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_608.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_608.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_608.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1538.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1538.cpp,124,125,126,127,"printf("" %s"", th_get_pathname(t));",pathname = th_get_pathname(t);,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1260.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1260.cpp,"char modestring[12];
#if !defined(_WIN32) || defined(__CYGWIN__)
  struct passwd *pw;
  struct group *gr;
#endif
  uid_t uid;
  gid_t gid;
  char username[_POSIX_LOGIN_NAME_MAX];
  char groupname[_POSIX_LOGIN_NAME_MAX];
  time_t mtime;
  struct tm *mtm;

#ifdef HAVE_STRFTIME
  char timebuf[18];
#else
  const char *months[] = {
    ""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"",
    ""Jul"", ""Aug"", ""Sep"", ""Oct"", ""Nov"", ""Dec""
  };
#endif

  uid = th_get_uid(t);
#if !defined(_WIN32) || defined(__CYGWIN__)
  pw = getpwuid(uid);
  if (pw != NULL)
    strlcpy(username, pw->pw_name, sizeof(username));
  else
#endif
    snprintf(username, sizeof(username), ""%d"", (int)uid);
  gid = th_get_gid(t);
#if !defined(_WIN32) || defined(__CYGWIN__)
  gr = getgrgid(gid);
  if (gr != NULL)
    strlcpy(groupname, gr->gr_name, sizeof(groupname));
  else
#endif
    snprintf(groupname, sizeof(groupname), ""%d"", (int)gid);
    
  strmode(th_get_mode(t), modestring);
  printf(""%.10s %-8.8s %-8.8s "", modestring, username, groupname);

#if !defined(_WIN32) || defined(__CYGWIN__)
  if (TH_ISCHR(t) || TH_ISBLK(t))
    printf("" %3d, %3d "", th_get_devmajor(t), th_get_devminor(t));
  else
#endif
    printf(""%9ld "", (long)th_get_size(t));

  mtime = th_get_mtime(t);
  mtm = localtime(&mtime);
#ifdef HAVE_STRFTIME
  strftime(timebuf, sizeof(timebuf), ""%h %e %H:%M %Y"", mtm);
  printf(""%s"", timebuf);
#else
  printf(""%.3s %2d %2d:%02d %4d"",
         months[mtm->tm_mon],
         mtm->tm_mday, mtm->tm_hour, mtm->tm_min, mtm->tm_year + 1900);
#endif

  printf("" %s"", th_get_pathname(t))",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1260.cpp,"[7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 1, 143, 0, 0, 11, 11, 0, 0, 1, 24, 0, 0, 0, 0, 4, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 104, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 6, 0, 3, 3, 5, 0, 37, 0, 0, 17, 0, 64, 14, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1260.cpp,62,[],[]
bdbb7f84bc85c27aa49133f060e3407aa3990eea,ENH: Added special test 0 to just run a given command line.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_612.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_612.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_612.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1544.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1544.cpp,330,330,339,-1,"fprintf(stdout, ""Usage: %s <test number>\n"", argv[0]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1262.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1262.cpp,"{
    fprintf(stdout, ""Usage: %s <test number>\n"", argv[0]);
    return 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1262.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1262.cpp,30,"[""unkown"", ""string"", ""member""]","[""atoi_ret"", ""int"", ""<"", ""atoi_ret"", ""int"", "">"", ""int"", ""int"", ""=="", ""strcmp_ret"", ""null"", ""!="", ""&&"", ""||"", ""||""]"
c5e532d07dd4e820be2a81b07e12629690425027,COMP: Try to remove warnings and add support for cygwin,[],Utilities/cmtar/output.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_617.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_617.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_617.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1552.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1552.cpp,85,87,93,95,"snprintf(username, sizeof(username), ""%d"", uid);","snprintf(username, sizeof(username), ""%d"", (int)uid);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1264.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1264.cpp,"snprintf(username, sizeof(username), ""%d"", uid)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1264.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1264.cpp,31,"[""char *"", ""unkown"", ""string"", ""th_get_uid_ret""]","[""getpwuid_ret"", ""null"", ""!="", ""!""]"
c5e532d07dd4e820be2a81b07e12629690425027,COMP: Try to remove warnings and add support for cygwin,[],Utilities/cmtar/output.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_617.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_617.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_617.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1552.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1552.cpp,85,87,101,103,"snprintf(groupname, sizeof(groupname), ""%d"", gid);","snprintf(groupname, sizeof(groupname), ""%d"", (int)gid);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1265.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1265.cpp,"snprintf(groupname, sizeof(groupname), ""%d"", gid)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1265.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1265.cpp,39,"[""char *"", ""unkown"", ""string"", ""th_get_gid_ret""]","[""getgrgid_ret"", ""null"", ""!="", ""!""]"
d1180fc4e1545f98fddd9a51bb2140f04af0730d,ENH: Add untaring support,[],Source/cmSystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_618.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_618.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_618.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1554.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1554.cpp,1382,1382,1384,1384,"fprintf(stderr, ""tar_open(): %s\n"", strerror(errno));","cmSystemTools::Error(""Problem with tar_open(): "", strerror(errno));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1266.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1266.cpp,"{
    fprintf(stderr, ""tar_open(): %s\n"", strerror(errno));
    return false;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1266.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1266.cpp,17,"[""unkown"", ""string"", ""strerror_ret""]","[""tar_open_ret"", ""int"", ""==""]"
d1180fc4e1545f98fddd9a51bb2140f04af0730d,ENH: Add untaring support,[],Source/cmSystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_618.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_618.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_618.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1555.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1555.cpp,1395,1395,1397,1442,"fprintf(stderr,
        ""tar_append_tree(\""%s\"", \""%s\""): %s\n"", buf,
        pathname, strerror(errno));","cmSystemTools::Error(""Problem with tar_open(): "", strerror(errno));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1267.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1267.cpp,"{
      fprintf(stderr,
        ""tar_append_tree(\""%s\"", \""%s\""): %s\n"", buf,
        pathname, strerror(errno));
      tar_close(t);
      return false;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1267.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1267.cpp,30,"[""unkown"", ""string"", ""char *"", ""char *"", ""strerror_ret""]","[""tar_append_tree_ret"", ""null"", ""!=""]"
d1180fc4e1545f98fddd9a51bb2140f04af0730d,ENH: Add untaring support,[],Source/cmSystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_618.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_618.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_618.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1555.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1555.cpp,1395,1395,1407,1408,"fprintf(stderr, ""tar_append_eof(): %s\n"", strerror(errno));","cmSystemTools::Error(""Problem with tar_append_eof(): "", strerror(errno));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1268.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1268.cpp,"{
    fprintf(stderr, ""tar_append_eof(): %s\n"", strerror(errno));
    tar_close(t);
    return false;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1268.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1268.cpp,40,"[""unkown"", ""string"", ""strerror_ret""]","[""tar_append_eof_ret"", ""null"", ""!=""]"
d1180fc4e1545f98fddd9a51bb2140f04af0730d,ENH: Add untaring support,[],Source/cmSystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_618.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_618.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_618.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1555.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1555.cpp,1395,1395,1414,1415,"fprintf(stderr, ""tar_close(): %s\n"", strerror(errno));","cmSystemTools::Error(""Problem with tar_close(): "", strerror(errno));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1269.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1269.cpp,"{
    fprintf(stderr, ""tar_close(): %s\n"", strerror(errno));
    return false;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1269.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1269.cpp,47,"[""unkown"", ""string"", ""strerror_ret""]","[""tar_close_ret"", ""null"", ""!=""]"
18d31fd97c3305b54a6d1d56b6ef8600089ef6da,COMP: Several borland fixes,[],Utilities/cmtar/wrapper.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_623.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_623.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_623.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1562.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1562.cpp,145,145,147,147,"snprintf(realpath, MAXPATHLEN, ""%s/%s"", realdir,
       dent->d_name);","snprintf(realpath, TAR_MAXPATHLEN, ""%s/%s"", realdir,
       dent->d_name);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1270.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1270.cpp,"{
    if (strcmp(dent->d_name, ""."") == 0 ||
        strcmp(dent->d_name, "".."") == 0)
      continue;

    snprintf(realpath, MAXPATHLEN, ""%s/%s"", realdir,
       dent->d_name);
    if (savedir)
      snprintf(savepath, MAXPATHLEN, ""%s/%s"", savedir,
         dent->d_name);

#ifndef WIN32
    if (lstat(realpath, &s) != 0)
      return -1;
#else
    if (stat(realpath, &s) != 0)
      return -1;
#endif
    if (S_ISDIR(s.st_mode))
    {
      if (tar_append_tree(t, realpath,
              (savedir ? savepath : NULL)) != 0)
        return -1;
      continue;
    }

    if (tar_append_file(t, realpath,
            (savedir ? savepath : NULL)) != 0)
      return -1;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1270.cpp,"[7, 0, 0, 0, 0, 2, 4, 0, 0, 0, 8, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 2, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 3, 0, 9, 0, 0, 2, 0, 25, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1270.cpp,48,"[""char *"", ""macro"", ""string"", ""char *"", ""member""]","[""strcmp_ret"", ""null"", ""=="", ""strcmp_ret"", ""null"", ""=="", ""||"", ""!""]"
18d31fd97c3305b54a6d1d56b6ef8600089ef6da,COMP: Several borland fixes,[],Utilities/cmtar/wrapper.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_623.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_623.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_623.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1562.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1562.cpp,145,145,150,150,"snprintf(savepath, MAXPATHLEN, ""%s/%s"", savedir,
         dent->d_name);","snprintf(savepath, TAR_MAXPATHLEN, ""%s/%s"", savedir,
         dent->d_name);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1271.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1271.cpp,"snprintf(savepath, MAXPATHLEN, ""%s/%s"", savedir,
         dent->d_name)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1271.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1271.cpp,51,"[""char *"", ""macro"", ""string"", ""char *"", ""member""]","[""char *""]"
9b486bacfc98d6878b0e48f0136653c98cc5b385,ENH: Modify API a little bit to allow arbitrary length values. Encode certain characters. Rename UNIX registry to FILE registry. More testing,[],Source/kwsys/Registry.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_626.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_626.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_626.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1565.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1565.cpp,630,653,656,-1,"::sprintf(newkey, ""%s\\%s"", this->m_SubKey.c_str(), key);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1272.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1272.cpp,"{
  char *newkey;
  if ( !m_SubKeySpecified || m_SubKey.empty() || !key )
    {
    return 0;
    }
  int len = strlen(this->m_SubKey.c_str()) + strlen(key) + 1;
  newkey = new char[ len+1 ] ;
  ::sprintf(newkey, ""%s\\%s"", this->m_SubKey.c_str(), key);
  return newkey;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1272.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 29, 0, 0, 2, 2, 0, 0, 1, 4, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 1, 0, 0, 6, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1272.cpp,9,"[""int"", ""string"", ""this -> m_SubKey . c_str_ret"", ""const char *""]","[""unkown"", ""!"", ""m_SubKey . empty_ret"", ""const char *"", ""!"", ""||"", ""||"", ""!""]"
3f14dae7162f5a78748a13b03d6501b52bbea784,ENH: Extended test 0 to run the executable twice using the same process object.  This tests the reusability of the objects.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_629.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_629.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_629.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1570.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1570.cpp,150,151,164,-1,"fprintf(stderr, ""kwsysProcess_New returned NULL!\n"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1275.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1275.cpp,"{
    fprintf(stderr, ""kwsysProcess_New returned NULL!\n"");
    return 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1275.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1275.cpp,12,"[""unkown"", ""string""]","[""kwsysProcess *"", ""!""]"
3f14dae7162f5a78748a13b03d6501b52bbea784,ENH: Extended test 0 to run the executable twice using the same process object.  This tests the reusability of the objects.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_629.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_629.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_629.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1571.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1571.cpp,288,283,292,297,,"fprintf(stderr, ""kwsysProcess_New returned NULL!\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1276.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1276.cpp,"{
  int result = 0;
  char* data = 0;
  int length = 0;
  double userTimeout = 0;
  double* pUserTimeout = 0;
  kwsysProcess* kp = kwsysProcess_New();
  if(!kp)
    {
    fprintf(stderr, ""kwsysProcess_New returned NULL!\n"");
    return 1;
    }
  
  kwsysProcess_SetCommand(kp, cmd);
  if(timeout >= 0)
    {
    kwsysProcess_SetTimeout(kp, timeout);
    }
  if(share)
    {
    kwsysProcess_SetPipeShared(kp, kwsysProcess_Pipe_STDOUT, 1);
    kwsysProcess_SetPipeShared(kp, kwsysProcess_Pipe_STDERR, 1);
    }
  kwsysProcess_Execute(kp);

  if(poll)
    {
    pUserTimeout = &userTimeout;
    }

  if(!share)
    {
    int p;
    while((p = kwsysProcess_WaitForData(kp, &data, &length, pUserTimeout)))
      {
      if(output)
        {
        if(poll && p == kwsysProcess_Pipe_Timeout)
          {
          fprintf(stdout, ""WaitForData timeout reached.\n"");
          fflush(stdout);

          /* Count the number of times we polled without getting data.
             If it is excessive then kill the child and fail.  */
          if(++poll >= MAXPOLL)
            {
            fprintf(stdout, ""Poll count reached limit %d.\n"",
                    MAXPOLL);
            kwsysProcess_Kill(kp);
            }
          }
        else
          {
          fwrite(data, 1, length, stdout);
          fflush(stdout);
          }
        }
      if(poll)
        {
        /* Delay to avoid busy loop during polling.  */
#if defined(_WIN32)
        Sleep(100);
#else
        usleep(100000);
#endif
        }
      if(delay)
        {
        /* Purposely sleeping only on Win32 to let pipe fill up.  */
#if defined(_WIN32)
        Sleep(100);
#endif
        }
      }
    }
  
  kwsysProcess_WaitForExit(kp, 0);

  switch (kwsysProcess_GetState(kp))
    {
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n""); break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n""); break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n""); break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"",
             kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n""); break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp)); break;
    };
  
  if(result)
    {
    if(exception != kwsysProcess_GetExitException(kp))
      {
      fprintf(stderr, ""Mismatch in exit exception.  ""
              ""Should have been %d, was %d.\n"",
              exception, kwsysProcess_GetExitException(kp));
      }
    if(value != kwsysProcess_GetExitValue(kp))
      {
      fprintf(stderr, ""Mismatch in exit value.  ""
              ""Should have been %d, was %d.\n"",
              value, kwsysProcess_GetExitValue(kp));
      }
    }
  
  if(kwsysProcess_GetState(kp) != state)
    {
    fprintf(stderr, ""Mismatch in state.  ""
            ""Should have been %d, was %d.\n"",
            state, kwsysProcess_GetState(kp));
    result = 1;
    }

  /* We should have polled more times than there were data if polling
     was enabled.  */
  if(poll && poll < MINPOLL)
    {
    fprintf(stderr, ""Poll count is %d, which is less than %d.\n"",
            poll, MINPOLL);
    result = 1;
    }
  
  kwsysProcess_Delete(kp);
  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1276.cpp,"[17, 1, 0, 0, 7, 0, 2, 1, 7, 0, 19, 0, 0, 1, 0, 149, 0, 0, 7, 7, 0, 0, 6, 33, 0, 0, 0, 0, 3, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 17, 15, 2, 0, 46, 0, 0, 33, 0, 77, 5, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1276.cpp,140,[],"[""kwsysProcess *"", ""!"", ""!""]"
05d8429206d7192e328c2646cbc2b9776362dd7b,COMP: Remove warnings,[],Source/CTest/cmCTestSubmitHandler.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_631.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_631.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_631.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1574.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1574.cpp,268,268,270,270,"sprintf(hex, ""%%%02X"", (int)c);","sprintf(hexCh, ""%%%02X"", (int)c);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1277.cpp,"{
        case '+':
        case '?':
        case '/':
        case '\\':
        case '&':
        case ' ':
        case '=':
        case '%':
          sprintf(hex, ""%%%02X"", (int)c);
          ofile.append(hex);
          break;
        default: 
          ofile.append(hex);
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1277.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 8, 1, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1277.cpp,73,"[""char *"", ""string"", ""char""]","[""char""]"
05d8429206d7192e328c2646cbc2b9776362dd7b,COMP: Remove warnings,[],Source/CTest/cmCTestSubmitHandler.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_631.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_631.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_631.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1575.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1575.cpp,419,419,421,421,"sprintf(hex, ""%%%02X"", (int)c);","sprintf(hexCh, ""%%%02X"", (int)c);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1278.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1278.cpp,"{
        case '+':
        case '?':
        case '/':
        case '\\':
        case '&':
        case ' ':
        case '=':
        case '%':
          sprintf(hex, ""%%%02X"", (int)c);
          ofile.append(hex);
          break;
        default: 
          ofile.append(hex);
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1278.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 8, 1, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1278.cpp,72,"[""char *"", ""string"", ""char""]","[""char""]"
1b578d3180ce60976e4cbe928fce988acfd0da39,"ENH: Several improvements with the way things are handled. Also, support multiple submited files",[],Source/CTest/cmCTestCoverageHandler.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_632.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_632.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_632.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1576.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1576.cpp,39,39,47,48,"sprintf(covLogFilename, ""CoverageLog-%d.xml"", logFileCount);","sprintf(covLogFilename, ""CoverageLog-%d"", logFileCount);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1279.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1279.cpp,"{
  char covLogFilename[1024];
  sprintf(covLogFilename, ""CoverageLog-%d.xml"", logFileCount);
  cmCTestLog(m_CTest, HANDLER_VERBOSE_OUTPUT, ""Open file: "" << covLogFilename << std::endl);
  if (!m_CTest->OpenOutputFile(m_CTest->GetCurrentTag(), 
      covLogFilename, covLogFile, true))
    {
    cmCTestLog(m_CTest, ERROR_MESSAGE, ""Cannot open log file: "" << covLogFilename << std::endl);
    return false;
    }
  std::string local_start_time = m_CTest->CurrentTime();
  m_CTest->StartXML(covLogFile);
  covLogFile << ""<CoverageLog>"" << std::endl
    << ""\t<StartDateTime>"" << local_start_time << ""</StartDateTime>"" << std::endl;
  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1279.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 47, 0, 0, 2, 2, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 1, 0, 0, 7, 0, 0, 5, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1279.cpp,3,"[""char *"", ""constant"", ""int""]",[]
dec5cc1082f92fd1ba56afe9efc596377afc4461,ENH: converted macro to use variables and fixed some case issues with some function blockers,[],Source/cmMacroCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_633.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_633.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_633.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1577.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1577.cpp,112,112,203,-1,"sprintf(argvName,""${ARGV%i}"",t);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1280.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1280.cpp,"{
          sprintf(argvName,""${ARGV%i}"",t);
          cmSystemTools::ReplaceString(tmps, argvName,
                                       expandedArgs[t].c_str());
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1280.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1280.cpp,119,"[""char *"", ""string"", ""null""]","[""null"", ""expandedArgs . size_ret"", ""<""]"
dec5cc1082f92fd1ba56afe9efc596377afc4461,ENH: converted macro to use variables and fixed some case issues with some function blockers,[],Source/cmMacroCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_633.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_633.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_633.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1577.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1577.cpp,112,112,246,208,,"sprintf(argvName,""ARGV%i"",j);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1282.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1282.cpp,"{
  // Expand the argument list to the macro.
  std::vector<std::string> expandedArgs;
  m_Makefile->ExpandArguments(args, expandedArgs);
  
  std::string tmps;
  cmListFileArgument arg;
  std::string variable;

  // make sure the number of arguments passed is at least the number
  // required by the signature
  if (expandedArgs.size() < m_Args.size() - 1)
    {
    std::string errorMsg = 
      ""Macro invoked with incorrect arguments for macro named: "";
    errorMsg += m_Args[0];
    this->SetError(errorMsg.c_str());
    return false;
    }
  
  // set the value of argc
  cmOStringStream argcDefStream;
  argcDefStream << expandedArgs.size();
  std::string argcDef = argcDefStream.str();
  
  // declare varuiables for ARGV ARGN but do not compute until needed
  std::string argvDef;
  std::string argnDef;
  bool argnDefInitialized = false;
  bool argvDefInitialized = false;
  
  // Invoke all the functions that were collected in the block.
  cmListFileFunction newLFF;
  // for each function
  for(unsigned int c = 0; c < m_Functions.size(); ++c)
    {
    // Replace the formal arguments and then invoke the command.
    newLFF.m_Arguments.clear();
    newLFF.m_Arguments.reserve(m_Functions[c].m_Arguments.size());
    newLFF.m_Name = m_Functions[c].m_Name;
    newLFF.m_FilePath = m_Functions[c].m_FilePath;
    newLFF.m_Line = m_Functions[c].m_Line;
    const char* def =
      m_Makefile->GetDefinition(""CMAKE_MACRO_REPORT_DEFINITION_LOCATION""); 
    bool macroReportLocation = false;
    if(def && !cmSystemTools::IsOff(def))
      {
      macroReportLocation = true;
      }
    
    // for each argument of the current function
    for (std::vector<cmListFileArgument>::const_iterator k = 
           m_Functions[c].m_Arguments.begin();
         k != m_Functions[c].m_Arguments.end(); ++k)
      {
      tmps = k->Value;
      // replace formal arguments
      for (unsigned int j = 1; j < m_Args.size(); ++j)
        {
        variable = ""${"";
        variable += m_Args[j];
        variable += ""}""; 
        cmSystemTools::ReplaceString(tmps, variable.c_str(),
                                     expandedArgs[j-1].c_str());
        }
      // replace argc
      cmSystemTools::ReplaceString(tmps, ""${ARGC}"",argcDef.c_str());
      
      // repleace ARGN
      if (tmps.find(""${ARGN}"") != std::string::npos)
        {
        if (!argnDefInitialized)
          {
          std::vector<std::string>::const_iterator eit;
          std::vector<std::string>::size_type cnt = 0;
          for ( eit = expandedArgs.begin(); eit != expandedArgs.end(); ++eit )
            {
            if ( cnt >= m_Args.size()-1 )
              {
              if ( argnDef.size() > 0 )
                {
                argnDef += "";"";
                }
              argnDef += *eit;
              }
            cnt ++;
            }
          argnDefInitialized = true;
          }
        cmSystemTools::ReplaceString(tmps, ""${ARGN}"", argnDef.c_str());
        }
      
      // if the current argument of the current function has ${ARGV in it
      // then try replacing ARGV values
      if (tmps.find(""${ARGV"") != std::string::npos)
        {
        char argvName[60];
        
        // repleace ARGV, compute it only once
        if (!argvDefInitialized)
          {
          std::vector<std::string>::const_iterator eit;
          for ( eit = expandedArgs.begin(); eit != expandedArgs.end(); ++eit )
            {
            if ( argvDef.size() > 0 )
              {
              argvDef += "";"";
              }
            argvDef += *eit;
            }
          argvDefInitialized = true;
          }
        cmSystemTools::ReplaceString(tmps, ""${ARGV}"", argvDef.c_str());
        
        // also replace the ARGV1 ARGV2 ... etc
        for (unsigned int t = 0; t < expandedArgs.size(); ++t)
          {
          sprintf(argvName,""${ARGV%i}"",t);
          cmSystemTools::ReplaceString(tmps, argvName,
                                       expandedArgs[t].c_str());
          }
        }
      
      arg.Value = tmps;
      arg.Quoted = k->Quoted;
      if(macroReportLocation)
        {
        // Report the location of the argument where the macro was
        // defined.
        arg.FilePath = k->FilePath;
        arg.Line = k->Line;
        }
      else
        {
        // Report the location of the argument where the macro was
        // invoked.
        if (args.size())
          {
          arg.FilePath = args[0].FilePath;
          arg.Line = args[0].Line;
          }
        else
          {
          arg.FilePath = ""Unknown"";
          arg.Line = 0;
          }
        }
      newLFF.m_Arguments.push_back(arg);
      }
    if(!m_Makefile->ExecuteCommand(newLFF))
      {
      cmOStringStream error;
      error << ""Error in cmake code at\n""
            << args[0].FilePath << "":"" << args[0].Line << "":\n""
            << ""A command failed during the invocation of macro \""""
            << this->m_Args[0].c_str() << ""\""."";
      cmSystemTools::Error(error.str().c_str());
      return false;
      }
    }
  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1282.cpp,"[12, 0, 6, 0, 0, 0, 3, 0, 0, 0, 21, 0, 0, 0, 1, 372, 0, 0, 19, 23, 0, 0, 17, 44, 0, 0, 0, 0, 1, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 16, 0, 18, 12, 2, 0, 50, 0, 0, 38, 0, 34, 0, 6, 0, 0, 6, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1282.cpp,162,[],"[""null"", ""m_Functions . size_ret"", ""<"", ""!""]"
28ffc134a097c77f3548cd236f2d00f0b5686c36,ENH: Added test 7 to expose problems with polling by WaitForData.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_634.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_634.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_634.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1580.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1580.cpp,140,167,154,194,,"fprintf(stdout, ""WaitForData timeout reached.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1287.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1287.cpp,"f(output)
        {
        fwrite(data, 1, length, stdout);
        fflush(stdout);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1287.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 6, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1287.cpp,26,[],"[""kwsysProcess_WaitForData_ret""]"
28ffc134a097c77f3548cd236f2d00f0b5686c36,ENH: Added test 7 to expose problems with polling by WaitForData.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_634.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_634.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_634.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1580.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1580.cpp,140,167,154,201,,"fprintf(stdout, ""Poll count reached limit %d.\n"",
                    MAXPOLL);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1288.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1288.cpp,"f(output)
        {
        fwrite(data, 1, length, stdout);
        fflush(stdout);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1288.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 6, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1288.cpp,26,[],"[""kwsysProcess_WaitForData_ret""]"
28ffc134a097c77f3548cd236f2d00f0b5686c36,ENH: Added test 7 to expose problems with polling by WaitForData.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_634.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_634.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_634.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1581.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1581.cpp,217,279,220,286,,"fprintf(stderr, ""Poll count is %d, which is less than %d.\n"",
            poll, MINPOLL);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1289.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1289.cpp,"{
  int result = 0;
  char* data = 0;
  int length = 0;
  kwsysProcess* kp = kwsysProcess_New();
  if(!kp)
    {
    fprintf(stderr, ""kwsysProcess_New returned NULL!\n"");
    return 1;
    }
  
  kwsysProcess_SetCommand(kp, cmd);
  kwsysProcess_SetTimeout(kp, timeout);
  if(share)
    {
    kwsysProcess_SetPipeShared(kp, kwsysProcess_Pipe_STDOUT, 1);
    kwsysProcess_SetPipeShared(kp, kwsysProcess_Pipe_STDERR, 1);
    }
  kwsysProcess_Execute(kp);

  if(!share)
    {
    while(kwsysProcess_WaitForData(kp, &data, &length, 0))
      {
      if(output)
        {
        fwrite(data, 1, length, stdout);
        fflush(stdout);
        }
      if(delay)
        {
        /* Purposely sleeping only on Win32 to let pipe fill up.  */
#if defined(_WIN32)
        Sleep(100);
#endif
        }
      }
    }
  
  kwsysProcess_WaitForExit(kp, 0);
  
  switch (kwsysProcess_GetState(kp))
    {
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n""); break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n""); break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n""); break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"",
             kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n""); break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally: %s\n"",
             kwsysProcess_GetExceptionString(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp)); break;
    };
  
  if(result)
    {
    if(exception != kwsysProcess_GetExitException(kp))
      {
      fprintf(stderr, ""Mismatch in exit exception.  ""
              ""Should have been %d, was %d.\n"",
              exception, kwsysProcess_GetExitException(kp));
      }
    if(value != kwsysProcess_GetExitValue(kp))
      {
      fprintf(stderr, ""Mismatch in exit value.  ""
              ""Should have been %d, was %d.\n"",
              value, kwsysProcess_GetExitValue(kp));
      }
    }
  
  if(kwsysProcess_GetState(kp) != state)
    {
    fprintf(stderr, ""Mismatch in state.  ""
            ""Should have been %d, was %d.\n"",
            state, kwsysProcess_GetState(kp));
    result = 1;
    }
  
  kwsysProcess_Delete(kp);
  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1289.cpp,"[10, 1, 0, 0, 7, 0, 2, 1, 7, 0, 12, 0, 0, 1, 0, 110, 0, 0, 4, 4, 0, 0, 4, 25, 0, 0, 0, 0, 2, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 11, 9, 0, 0, 38, 0, 0, 24, 0, 63, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1289.cpp,92,"[""kwsysProcess *""]","[""kwsysProcess *"", ""!"", ""!""]"
d36f3c5543eed9e120b855e3c1b0d55d800f374e,ENH: Handle errors and optimize a bit,[],Source/cmCommandArgumentParserHelper.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_635.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_635.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_635.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1585.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1585.cpp,296,303,298,-1,"fprintf(stderr, ""Argument Parser Error: %s (%lu / Line: %d)\n"", str, pos, this->CurrentLine);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1290.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1290.cpp,"{
  unsigned long pos = static_cast<unsigned long>(this->InputBufferPos);
  fprintf(stderr, ""Argument Parser Error: %s (%lu / Line: %d)\n"", str, pos, this->CurrentLine);
  int cc;
  std::cerr << ""String: ["";
  for ( cc = 0; cc < 30 && *(this->InputBuffer.c_str() + this->InputBufferPos + cc);
    cc ++ )
    {
    std::cerr << *(this->InputBuffer.c_str() + this->InputBufferPos + cc);
    }
  std::cerr << ""]"" << std::endl;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1290.cpp,"[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 48, 0, 0, 2, 2, 0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 4, 0, 7, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1290.cpp,3,"[""unkown"", ""string"", ""const char *"", ""unkown"", ""member""]",[]
bbf1c3a0e87c4358b65d41393455fc393d8e16e0,ENH: Handle more cases,[],Source/cmCommandArgumentParserHelper.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_636.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_636.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_636.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1586.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1586.cpp,289,296,291,298,"fprintf(stderr, ""JPError: %s (%lu / Line: %d)\n"", str, pos, this->CurrentLine);","fprintf(stderr, ""Argument Parser Error: %s (%lu / Line: %d)\n"", str, pos, this->CurrentLine);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1291.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1291.cpp,"{
  unsigned long pos = static_cast<unsigned long>(this->InputBufferPos);
  fprintf(stderr, ""JPError: %s (%lu / Line: %d)\n"", str, pos, this->CurrentLine);
  int cc;
  std::cerr << ""String: ["";
  for ( cc = 0; cc < 30 && *(this->InputBuffer.c_str() + this->InputBufferPos + cc);
    cc ++ )
    {
    std::cerr << *(this->InputBuffer.c_str() + this->InputBufferPos + cc);
    }
  std::cerr << ""]"" << std::endl;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1291.cpp,"[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 48, 0, 0, 2, 2, 0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 4, 0, 7, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1291.cpp,3,"[""unkown"", ""string"", ""const char *"", ""unkown"", ""member""]",[]
f6e5a878fc8de3ac3ef38b144a0a649a9f227682,"ENH: Add support for writing output file. While doing that, redesign the way ctest does output. There may still be problems with commands failing, but that should be fixed by applying the similar concept to whole CMake",[],Source/CTest/cmCTestTestHandler.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_638.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_638.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_638.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1589.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1589.cpp,257,257,259,259,"fprintf(stderr,""\n%.0f%% tests passed, %i tests failed out of %i\n"",
      percent, int(failed.size()), total);","cmCTestLog(m_CTest, HANDLER_OUTPUT, std::endl << std::setprecision(0) << percent << ""% tests passed, ""
      << failed.size() << "" tests failed out of "" << total << std::endl);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1292.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1292.cpp,"{
    if (m_Verbose && passed.size() && 
      (m_UseIncludeRegExp || m_UseExcludeRegExp)) 
      {
      std::cerr << ""\nThe following tests passed:\n"";
      for(std::vector<cmStdString>::iterator j = passed.begin();
          j != passed.end(); ++j)
        {   
        std::cerr << ""\t"" << *j << ""\n"";
        }
      }

    float percent = float(passed.size()) * 100.0f / total;
    if ( failed.size() > 0 &&  percent > 99)
      {
      percent = 99;
      }
    fprintf(stderr,""\n%.0f%% tests passed, %i tests failed out of %i\n"",
      percent, int(failed.size()), total);

    if (failed.size()) 
      {
      cmGeneratedFileStream ofs;

      std::cerr << ""\nThe following tests FAILED:\n"";
      m_CTest->OpenOutputFile(""Temporary"", ""LastTestsFailed.log"", ofs);

      std::vector<cmCTestTestHandler::cmCTestTestResult>::iterator ftit;
      for(ftit = m_TestResults.begin();
        ftit != m_TestResults.end(); ++ftit)
        {
        if ( ftit->m_Status != cmCTestTestHandler::COMPLETED )
          {
          ofs << ftit->m_TestCount << "":"" << ftit->m_Name << std::endl;
          fprintf(stderr, ""\t%3d - %s (%s)\n"", ftit->m_TestCount, ftit->m_Name.c_str(),
            this->GetTestStatus(ftit->m_Status));
          }
        }

      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1292.cpp,"[4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 109, 0, 0, 3, 4, 0, 0, 4, 13, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 4, 0, 0, 18, 0, 0, 8, 0, 18, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1292.cpp,60,"[""unkown"", ""constant"", ""int"", ""int_ret"", ""int_ret""]","[""int_ret"", ""null"", ""=="", ""!""]"
f6e5a878fc8de3ac3ef38b144a0a649a9f227682,"ENH: Add support for writing output file. While doing that, redesign the way ctest does output. There may still be problems with commands failing, but that should be fixed by applying the similar concept to whole CMake",[],Source/CTest/cmCTestTestHandler.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_638.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_638.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_638.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1590.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1590.cpp,274,276,276,278,"fprintf(stderr, ""\t%3d - %s (%s)\n"", ftit->m_TestCount, ftit->m_Name.c_str(),
            this->GetTestStatus(ftit->m_Status));","cmCTestLog(m_CTest, HANDLER_OUTPUT, ""\t"" << std::setw(3) << ftit->m_TestCount << "" - "" << ftit->m_Name.c_str() << "" ("" << this->GetTestStatus(ftit->m_Status) << "")"" << std::endl);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1293.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1293.cpp,"{
          ofs << ftit->m_TestCount << "":"" << ftit->m_Name << std::endl;
          fprintf(stderr, ""\t%3d - %s (%s)\n"", ftit->m_TestCount, ftit->m_Name.c_str(),
            this->GetTestStatus(ftit->m_Status));
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1293.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1293.cpp,77,"[""unkown"", ""string"", ""member"", ""ftit -> m_Name . c_str_ret"", ""this -> GetTestStatus_ret""]","[""member"", ""unkown"", ""!=""]"
15c7d45ecd787b74eb4a4dc5cafe69bd92351938,BUG: Fixed ordering of multiple commands in a custom target when implemented as custom commands.  Also added support to execute pre-build rules first to be consistent with makefile generator.,[],Source/cmLocalVisualStudio6Generator.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_644.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_644.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_644.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1596.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1596.cpp,217,217,233,242,"sprintf(output,""%s/%s_force_%i"",
              m_Makefile->GetStartOutputDirectory(),
              libName, count);","depends.insert(depends.end(),
                     cr->GetDepends().begin(), cr->GetDepends().end());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1294.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1294.cpp,"{
      char *output = new char [
        strlen(m_Makefile->GetStartOutputDirectory()) + 
        strlen(libName) + 30];
      sprintf(output,""%s/%s_force_%i"",
              m_Makefile->GetStartOutputDirectory(),
              libName, count);
      const char* no_main_dependency = 0;
      const char* no_comment = 0;
      m_Makefile->AddCustomCommandToOutput(output,
                                           cr->GetDepends(),
                                           no_main_dependency,
                                           cr->GetCommandLines(),
                                           no_comment);
      cmSourceFile* outsf = 
        m_Makefile->GetSourceFileWithOutput(output);
      target.GetSourceFiles().push_back(outsf);
      count++;
      delete [] output;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1294.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 46, 0, 0, 4, 4, 0, 0, 4, 4, 0, 0, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 11, 0, 0, 5, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1294.cpp,26,"[""char *"", ""string"", ""m_Makefile -> GetStartOutputDirectory_ret"", ""const char *"", ""int""]","[""target . GetPostBuildCommands ( ) . begin_ret"", ""target . GetPostBuildCommands ( ) . end_ret"", ""!=""]"
f362d6e2ef1766425070e8dbfaa8a2fd668a988d,BUG: Expanded difference in timeouts between tests 4 and 5 so that 5 does not timeout while waiting for 4 to timeout.  This should fix the intermittent failure of test 5 on cygwin.  ENH: When a mismatch is reported it now reports what it was as well as what it should have been.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_647.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_647.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_647.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1601.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1601.cpp,198,198,200,200,"fprintf(stderr, ""Mismatch in exit exception.  Should have been %d.\n"",
              exception);","fprintf(stderr, ""Mismatch in exit exception.  ""
              ""Should have been %d, was %d.\n"",
              exception, kwsysProcess_GetExitException(kp));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1296.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1296.cpp,"{
      fprintf(stderr, ""Mismatch in exit exception.  Should have been %d.\n"",
              exception);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1296.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1296.cpp,72,"[""unkown"", ""constant"", ""int""]","[""int"", ""kwsysProcess_GetExitException_ret"", ""!=""]"
f362d6e2ef1766425070e8dbfaa8a2fd668a988d,BUG: Expanded difference in timeouts between tests 4 and 5 so that 5 does not timeout while waiting for 4 to timeout.  This should fix the intermittent failure of test 5 on cygwin.  ENH: When a mismatch is reported it now reports what it was as well as what it should have been.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_647.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_647.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_647.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1601.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1601.cpp,198,198,205,206,"fprintf(stderr, ""Mismatch in exit value.  Should have been %d.\n"",
              value);","fprintf(stderr, ""Mismatch in exit value.  ""
              ""Should have been %d, was %d.\n"",
              value, kwsysProcess_GetExitValue(kp));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1297.cpp,"{
      fprintf(stderr, ""Mismatch in exit value.  Should have been %d.\n"",
              value);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1297.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1297.cpp,77,"[""unkown"", ""constant"", ""int""]","[""int"", ""kwsysProcess_GetExitValue_ret"", ""!=""]"
f362d6e2ef1766425070e8dbfaa8a2fd668a988d,BUG: Expanded difference in timeouts between tests 4 and 5 so that 5 does not timeout while waiting for 4 to timeout.  This should fix the intermittent failure of test 5 on cygwin.  ENH: When a mismatch is reported it now reports what it was as well as what it should have been.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_647.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_647.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_647.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1601.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1601.cpp,198,198,212,214,"fprintf(stderr, ""Mismatch in state.  Should have been %d.\n"", state);","fprintf(stderr, ""Mismatch in state.  ""
            ""Should have been %d, was %d.\n"",
            state, kwsysProcess_GetState(kp));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1298.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1298.cpp,"{
    fprintf(stderr, ""Mismatch in state.  Should have been %d.\n"", state);
    result = 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1298.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1298.cpp,84,"[""unkown"", ""constant"", ""int""]","[""kwsysProcess_GetState_ret"", ""int"", ""!=""]"
3caedbdddb285909854833375ef736fef6a7b04a,ENH: Initial implementation of SVN support. Closes Bug #1601 - Add subversion support,[u'https://gitlab.kitware.com/cmake/cmake/issues/1601'],Source/CTest/cmCTestUpdateHandler.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_650.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_650.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_650.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1605.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1605.cpp,45,166,81,268,"sprintf(current_time, ""%04d-%02d-%02d %02d:%02d:%02d UTC"",
      t->tm_year + 1900,
      t->tm_mon + 1,
      t->tm_mday,
      t->tm_hour,
      t->tm_min,
      t->tm_sec);","sprintf(current_time, ""%04d-%02d-%02d %02d:%02d:%02d"",
      t->tm_year + 1900,
      t->tm_mon + 1,
      t->tm_mday,
      t->tm_hour,
      t->tm_min,
      t->tm_sec);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1301.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1301.cpp,"{
    struct tm* t = cmCTest::GetNightlyTime(m_CTest->GetDartConfiguration(""NightlyStartTime""),
      m_Verbose, m_CTest->GetTomorrowTag());
    char current_time[1024];
    sprintf(current_time, ""%04d-%02d-%02d %02d:%02d:%02d UTC"",
      t->tm_year + 1900,
      t->tm_mon + 1,
      t->tm_mday,
      t->tm_hour,
      t->tm_min,
      t->tm_sec);
    std::string today_update_date = current_time;
   
    extra_update_opts += ""-D \"""" + today_update_date +""\"""";
    //std::cout << ""Update: "" << extra_update_opts << std::endl;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1301.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 44, 0, 0, 3, 3, 0, 0, 2, 7, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1301.cpp,30,"[""char *"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""m_CTest -> GetTestModel_ret"", ""unkown"", ""==""]"
93384c776363f749c910ff95836533a1a9be0e4a,BUG: Removing debugging code now that the problem has been fixed on the remote dashboard.,[],Source/kwsys/SystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_651.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_651.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_651.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1606.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1606.cpp,2280,2280,2283,-1,"fprintf(stderr, ""cwd=[%s]\npwd=[%s]\npwd_path=[%s]\n"",
                cwd, pwd, pwd_path.c_str());",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1302.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1302.cpp,"{
#if defined(__HP_aCC)
        fprintf(stderr, ""cwd=[%s]\npwd=[%s]\npwd_path=[%s]\n"",
                cwd, pwd, pwd_path.c_str());
#endif
        // The current working directory is a logical path.  Split
        // both the logical and physical paths into their components.
        kwsys_stl::vector<kwsys_stl::string> cwd_components;
        kwsys_stl::vector<kwsys_stl::string> pwd_components;
        SystemTools::SplitPath(cwd, cwd_components);
        SystemTools::SplitPath(pwd, pwd_components);

        // Remove the common ending of the paths to leave only the
        // part that changes under the logical mapping.
        kwsys_stl::vector<kwsys_stl::string>::iterator ic = cwd_components.end();
        kwsys_stl::vector<kwsys_stl::string>::iterator ip = pwd_components.end();
        for(;ip != pwd_components.begin() && ic != cwd_components.begin() &&
              *(ip-1) == *(ic-1); --ip,--ic);
        cwd_components.erase(ic, cwd_components.end());
        pwd_components.erase(ip, pwd_components.end());

        // Reconstruct the string versions of the part of the path
        // that changed.
        kwsys_stl::string cwd_changed = SystemTools::JoinPath(cwd_components);
        kwsys_stl::string pwd_changed = SystemTools::JoinPath(pwd_components);

        // Add the translation to keep the logical path name.
        if(!cwd_changed.empty() && !pwd_changed.empty())
          {
#if defined(__HP_aCC)
          fprintf(stderr, ""adding [%s]->[%s]\n"", cwd_changed.c_str(),
                  pwd_changed.c_str());
#endif
          SystemTools::AddTranslationPath(cwd_changed.c_str(),
                                          pwd_changed.c_str());
          }
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1302.cpp,"[3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 126, 0, 0, 6, 6, 0, 0, 5, 4, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 2, 1, 0, 0, 28, 0, 0, 7, 0, 27, 4, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1302.cpp,26,"[""unkown"", ""string"", ""unkown"", ""unkown"", ""pwd_path . c_str_ret""]","[""unkown"", ""kwsys_stl :: string"", ""=="", ""strcmp_ret"", ""null"", ""!="", ""&&""]"
93384c776363f749c910ff95836533a1a9be0e4a,BUG: Removing debugging code now that the problem has been fixed on the remote dashboard.,[],Source/kwsys/SystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_651.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_651.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_651.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1607.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1607.cpp,2308,2304,2311,-1,"fprintf(stderr, ""adding [%s]->[%s]\n"", cwd_changed.c_str(),
                  pwd_changed.c_str());",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1303.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1303.cpp,"{
#if defined(__HP_aCC)
          fprintf(stderr, ""adding [%s]->[%s]\n"", cwd_changed.c_str(),
                  pwd_changed.c_str());
#endif
          SystemTools::AddTranslationPath(cwd_changed.c_str(),
                                          pwd_changed.c_str());
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1303.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 2, 0, 7, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1303.cpp,54,"[""unkown"", ""constant"", ""cwd_changed . c_str_ret"", ""pwd_changed . c_str_ret""]","[""cwd_changed . empty_ret"", ""pwd_changed . empty_ret"", ""&&""]"
89a8261f68dd06778e14fc02ccf051489cdb4381,ENH: Mangled lexer symbols to begin in cmListFileLexer_yy instead of just yy to avoid conflict with other lexers that may be added.,[],Source/cmListFileLexer.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_653.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_653.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_653.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1609.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1609.cpp,1479,1481,1487,1489,"YY_FATAL_ERROR( ""out of dynamic memory in yy_create_buffer()"" );","YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yy_create_buffer()"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1304.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1304.cpp,"YY_FATAL_ERROR( ""out of dynamic memory in yy_create_buffer()"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1304.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1304.cpp,6,"[""string""]","[""yyalloc_ret"", ""!""]"
89a8261f68dd06778e14fc02ccf051489cdb4381,ENH: Mangled lexer symbols to begin in cmListFileLexer_yy instead of just yy to avoid conflict with other lexers that may be added.,[],Source/cmListFileLexer.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_653.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_653.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_653.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1609.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1609.cpp,1479,1481,1496,1498,"YY_FATAL_ERROR( ""out of dynamic memory in yy_create_buffer()"" );","YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yy_create_buffer()"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1305.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1305.cpp,"YY_FATAL_ERROR( ""out of dynamic memory in yy_create_buffer()"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1305.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1305.cpp,15,"[""string""]","[""member""]"
89a8261f68dd06778e14fc02ccf051489cdb4381,ENH: Mangled lexer symbols to begin in cmListFileLexer_yy instead of just yy to avoid conflict with other lexers that may be added.,[],Source/cmListFileLexer.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_653.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_653.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_653.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1610.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1610.cpp,1697,1699,1701,1703,"YY_FATAL_ERROR( ""out of dynamic memory in yy_scan_buffer()"" );","YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yy_scan_buffer()"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1306.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1306.cpp,"YY_FATAL_ERROR( ""out of dynamic memory in yy_scan_buffer()"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1306.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1306.cpp,12,"[""string""]","[""yyalloc_ret"", ""!""]"
89a8261f68dd06778e14fc02ccf051489cdb4381,ENH: Mangled lexer symbols to begin in cmListFileLexer_yy instead of just yy to avoid conflict with other lexers that may be added.,[],Source/cmListFileLexer.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_653.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_653.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_653.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1611.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1611.cpp,1746,1748,1750,1752,"YY_FATAL_ERROR( ""out of dynamic memory in yy_scan_bytes()"" );","YY_FATAL_ERROR( ""out of dynamic memory in cmListFileLexer_yy_scan_bytes()"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1307.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1307.cpp,"YY_FATAL_ERROR( ""out of dynamic memory in yy_scan_bytes()"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1307.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1307.cpp,11,"[""string""]","[""yyalloc_ret"", ""!""]"
89a8261f68dd06778e14fc02ccf051489cdb4381,ENH: Mangled lexer symbols to begin in cmListFileLexer_yy instead of just yy to avoid conflict with other lexers that may be added.,[],Source/cmListFileLexer.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_653.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_653.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_653.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1611.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1611.cpp,1746,1748,1759,1761,"YY_FATAL_ERROR( ""bad buffer in yy_scan_bytes()"" );","YY_FATAL_ERROR( ""bad buffer in cmListFileLexer_yy_scan_bytes()"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1308.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1308.cpp,"YY_FATAL_ERROR( ""bad buffer in yy_scan_bytes()"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1308.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1308.cpp,20,"[""string""]","[""yy_scan_buffer_ret"", ""!""]"
89a8261f68dd06778e14fc02ccf051489cdb4381,ENH: Mangled lexer symbols to begin in cmListFileLexer_yy instead of just yy to avoid conflict with other lexers that may be added.,[],Source/cmListFileLexer.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_653.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_653.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_653.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1612.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1612.cpp,1883,1885,1891,1893,"yy_fatal_error( ""yyset_lineno called with no buffer"" , yyscanner);","yy_fatal_error( ""cmListFileLexer_yyset_lineno called with no buffer"" , yyscanner);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1309.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1309.cpp,"yy_fatal_error( ""yyset_lineno called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1309.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1309.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
89a8261f68dd06778e14fc02ccf051489cdb4381,ENH: Mangled lexer symbols to begin in cmListFileLexer_yy instead of just yy to avoid conflict with other lexers that may be added.,[],Source/cmListFileLexer.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_653.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_653.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_653.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1613.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1613.cpp,1898,1900,1906,1908,"yy_fatal_error( ""yyset_column called with no buffer"" , yyscanner);","yy_fatal_error( ""cmListFileLexer_yyset_column called with no buffer"" , yyscanner);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1310.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1310.cpp,"yy_fatal_error( ""yyset_column called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1310.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1310.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
17619508e9d651f32cbd8d5bfbea6ac94ef975fc,"ENH: Update to the new coverage code. It may not be perfect yet, but it is a start",[],Source/CTest/cmCTestCoverageHandler.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_655.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_655.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_655.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1615.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1615.cpp,19,19,449,-1,"sprintf(cfileoutputname, ""CoverageLog-%d.xml"", cfileoutputcount++);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1311.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1311.cpp,"{
      sprintf(cfileoutputname, ""CoverageLog-%d.xml"", cfileoutputcount++);
      std::cout << ""Open file: "" << cfileoutputname << std::endl;
      if (!m_CTest->OpenOutputFile(m_CTest->GetCurrentTag(), 
                                   cfileoutputname, cfileoutput))
        {
        std::cerr << ""Cannot open log file: "" << cfileoutputname << std::endl;
        return 1;
        }
      local_start_time = m_CTest->CurrentTime();
      m_CTest->StartXML(cfileoutput);
      cfileoutput << ""<CoverageLog>\n""
        << ""\t<StartDateTime>"" << local_start_time << ""</StartDateTime>"" << std::endl;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1311.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1311.cpp,408,"[""char *"", ""constant"", ""int""]","[""int"", ""null"", ""==""]"
609801fe67c95f9959468df8316a8f4a26943842,ENH: Update Curl to 7.12.1,[],Source/CTest/Curl/base64.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_656.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_656.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_656.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1616.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1616.cpp,144,152,156,162,"sprintf(output, ""%c%c=="", 
              table64[obuf[0]],
              table64[obuf[1]]);","snprintf(output, 5, ""%c%c=="",
               table64[obuf[0]],
               table64[obuf[1]]);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1314.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1314.cpp,"{
    case 1: /* only one byte read */
      sprintf(output, ""%c%c=="", 
              table64[obuf[0]],
              table64[obuf[1]]);
      break;
    case 2: /* two bytes read */
      sprintf(output, ""%c%c%c="", 
              table64[obuf[0]],
              table64[obuf[1]],
              table64[obuf[2]]);
      break;
    default:
      sprintf(output, ""%c%c%c%c"", 
              table64[obuf[0]],
              table64[obuf[1]],
              table64[obuf[2]],
              table64[obuf[3]] );
      break;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1314.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 15, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1314.cpp,39,"[""malloc_ret"", ""string"", ""member"", ""member""]","[""null""]"
609801fe67c95f9959468df8316a8f4a26943842,ENH: Update Curl to 7.12.1,[],Source/CTest/Curl/base64.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_656.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_656.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_656.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1616.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1616.cpp,144,152,161,167,"sprintf(output, ""%c%c%c="", 
              table64[obuf[0]],
              table64[obuf[1]],
              table64[obuf[2]]);","snprintf(output, 5, ""%c%c%c="",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]]);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1315.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1315.cpp,"{
    case 1: /* only one byte read */
      sprintf(output, ""%c%c=="", 
              table64[obuf[0]],
              table64[obuf[1]]);
      break;
    case 2: /* two bytes read */
      sprintf(output, ""%c%c%c="", 
              table64[obuf[0]],
              table64[obuf[1]],
              table64[obuf[2]]);
      break;
    default:
      sprintf(output, ""%c%c%c%c"", 
              table64[obuf[0]],
              table64[obuf[1]],
              table64[obuf[2]],
              table64[obuf[3]] );
      break;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1315.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 15, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1315.cpp,44,"[""malloc_ret"", ""string"", ""member"", ""member"", ""member""]","[""null""]"
609801fe67c95f9959468df8316a8f4a26943842,ENH: Update Curl to 7.12.1,[],Source/CTest/Curl/base64.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_656.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_656.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_656.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1616.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1616.cpp,144,152,167,173,"sprintf(output, ""%c%c%c%c"", 
              table64[obuf[0]],
              table64[obuf[1]],
              table64[obuf[2]],
              table64[obuf[3]] );","snprintf(output, 5, ""%c%c%c%c"",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]],
               table64[obuf[3]] );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1316.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1316.cpp,"{
    case 1: /* only one byte read */
      sprintf(output, ""%c%c=="", 
              table64[obuf[0]],
              table64[obuf[1]]);
      break;
    case 2: /* two bytes read */
      sprintf(output, ""%c%c%c="", 
              table64[obuf[0]],
              table64[obuf[1]],
              table64[obuf[2]]);
      break;
    default:
      sprintf(output, ""%c%c%c%c"", 
              table64[obuf[0]],
              table64[obuf[1]],
              table64[obuf[2]],
              table64[obuf[3]] );
      break;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1316.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 15, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1316.cpp,50,"[""malloc_ret"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""null""]"
609801fe67c95f9959468df8316a8f4a26943842,ENH: Update Curl to 7.12.1,[],Source/CTest/Curl/formdata.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_658.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_658.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_658.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1620.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1620.cpp,1006,780,1042,848,"vsprintf(s, fmt, ap);","vsnprintf(s, sizeof(s), fmt, ap);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1322.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1322.cpp,"{
  char s[4096];
  va_list ap;
  va_start(ap, fmt);
  vsprintf(s, fmt, ap);
  va_end(ap);

  return AddFormData(formp, s, 0);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1322.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1322.cpp,6,"[""char *"", ""const char *"", ""va_list""]",[]
609801fe67c95f9959468df8316a8f4a26943842,ENH: Update Curl to 7.12.1,[],Source/CTest/Curl/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_659.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_659.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_659.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1622.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1622.cpp,770,932,772,934,"sprintf(buf, ""%04d%02d%02d %02d:%02d:%02d"",
                year, month, day, hour, minute, second);","snprintf(buf, sizeof(conn->data->state.buffer),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1325.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1325.cpp,"{
        /* we have a time, reformat it */
        time_t secs=time(NULL);
        sprintf(buf, ""%04d%02d%02d %02d:%02d:%02d"",
                year, month, day, hour, minute, second);
        /* now, convert this into a time() value: */
        conn->data->info.filetime = curl_getdate(buf, &secs);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1325.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1325.cpp,26,"[""char *"", ""string"", ""int"", ""int"", ""int"", ""int"", ""int"", ""int""]","[""int"", ""sscanf_ret"", ""==""]"
609801fe67c95f9959468df8316a8f4a26943842,ENH: Update Curl to 7.12.1,[],Source/CTest/Curl/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_659.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_659.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_659.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1625.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1625.cpp,1444,1507,1446,1509,"f(newhost, ""%d.%d.%d.%d"", ip[0], ip[1], ip[2], ip[3]);","f(newhost, sizeof(newhost),
             ""%d.%d.%d.%d"", ip[0], ip[1], ip[2], ip[3]);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1328.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1328.cpp,"{
    int ip[4];
    int port[2];
    char *str=buf;

    /*
     * New 227-parser June 3rd 1999.
     * It now scans for a sequence of six comma-separated numbers and
     * will take them as IP+port indicators.
     *
     * Found reply-strings include:
     * ""227 Entering Passive Mode (127,0,0,1,4,51)""
     * ""227 Data transfer will passively listen to 127,0,0,1,4,51""
     * ""227 Entering passive mode. 127,0,0,1,4,51""
     */
      
    while(*str) {
      if (6 == sscanf(str, ""%d,%d,%d,%d,%d,%d"",
                      &ip[0], &ip[1], &ip[2], &ip[3],
                      &port[0], &port[1]))
        break;
      str++;
    }

    if(!*str) {
      failf(data, ""Couldn't interpret this 227-reply: %s"", buf);
      return CURLE_FTP_WEIRD_227_FORMAT;
    }

    sprintf(newhost, ""%d.%d.%d.%d"", ip[0], ip[1], ip[2], ip[3]);
    newhostp = newhost;
    newport = (unsigned short)((port[0]<<8) + port[1]);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1328.cpp,"[2, 1, 0, 0, 1, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 49, 0, 0, 3, 3, 0, 0, 1, 19, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 14, 0, 3, 2, 0, 0, 4, 0, 0, 5, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1328.cpp,92,"[""char *"", ""constant"", ""member"", ""member"", ""member"", ""member""]","[""char *"", ""!"", ""!""]"
609801fe67c95f9959468df8316a8f4a26943842,ENH: Update Curl to 7.12.1,[],Source/CTest/Curl/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_659.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_659.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_659.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1626.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1626.cpp,1999,2163,2001,2165,"sprintf(buf, ""Content-Length: %d\r\n"", filesize);","snprintf(buf, sizeof(data->state.buffer),
               ""Content-Length: %"" FORMAT_OFF_T ""\r\n"", filesize);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1329.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1329.cpp,"{
      sprintf(buf, ""Content-Length: %d\r\n"", filesize);
      result = Curl_client_write(data, CLIENTWRITE_BOTH, buf, 0);
      if(result)
        return result;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1329.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1329.cpp,61,"[""char *"", ""string"", ""ssize_t""]","[""macro"", ""ftp_getsize_ret"", ""==""]"
6972cdf9e9ca78f9031bd419f48c270bd67c8a71,ENH: Move all extracting of variables to ExtractVariables. This way it is easy to know what variables are used,[],Source/CTest/cmCTestScriptHandler.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_662.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_662.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_662.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1635.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1635.cpp,177,180,186,208,,"sprintf(updateVar,""CTEST_EXTRA_UPDATES_%i"",i);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1339.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1339.cpp,"(m_Backup && m_CVSCheckOut.empty())
    {
    cmSystemTools::Error(
      ""Backup was requested without specifying CTEST_CVS_CHECKOUT."");    
    return 3;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1339.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1339.cpp,12,[],[]
6972cdf9e9ca78f9031bd419f48c270bd67c8a71,ENH: Move all extracting of variables to ExtractVariables. This way it is easy to know what variables are used,[],Source/CTest/cmCTestScriptHandler.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_662.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_662.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_662.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1636.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1636.cpp,397,428,403,-1,"sprintf(updateVar,""CTEST_EXTRA_UPDATES_%i"",i);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1340.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1340.cpp,"{
    sprintf(updateVar,""CTEST_EXTRA_UPDATES_%i"",i);
    const char *updateVal = m_Makefile->GetDefinition(updateVar);
    if (updateVal)
      {
      if (m_CVSCmd.empty())
        {
        cmSystemTools::Error(updateVar, "" specified without specifying CTEST_CVS_COMMAND."");
        this->RestoreBackupDirectories();
        return 12;
        }
      std::vector<std::string> cvsArgs;
      cmSystemTools::ExpandListArgument(updateVal,cvsArgs);
      if (cvsArgs.size() == 2)
        {
        std::string fullCommand = command;
        fullCommand += "" update "";
        fullCommand += cvsArgs[1];
        output = """";
        retVal = 0;
        if ( m_Verbose )
          {
          std::cerr << ""Run CVS: "" << fullCommand.c_str() << std::endl;
          }
        res = cmSystemTools::RunSingleCommand(fullCommand.c_str(), &output, 
          &retVal, cvsArgs[0].c_str(),
          m_Verbose, 0 /*m_TimeOut*/);
        if (!res || retVal != 0)
          {
          cmSystemTools::Error(""Unable to perform extra cvs updates:\n"", 
            output.c_str());
          this->RestoreBackupDirectories();
          return 8;
          }
        }
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1340.cpp,"[5, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 1, 81, 0, 0, 3, 3, 0, 0, 2, 14, 0, 0, 0, 0, 1, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 5, 5, 0, 0, 15, 0, 0, 12, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1340.cpp,13,"[""char *"", ""string"", ""int""]","[""int"", ""int"", ""<""]"
a2c19a4d46b82f747d97ad0005887ce44c89af72,"ENH: Condense help string, add support for setting line length and make it work",[],Source/kwsys/CommandLineArguments.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_664.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_664.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_664.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1638.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1638.cpp,539,550,543,556,"sprintf(format, ""%%%ds"", static_cast<unsigned int>(maxlen));","sprintf(format, ""%%%ds  "", static_cast<unsigned int>(maxlen-2));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1341.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1341.cpp,"{
  kwsys_ios::ostringstream str;

  // Collapse all arguments into the map of vectors of all arguments that do
  // the same thing.
  CommandLineArguments::Internal::CallbacksMap::iterator it;
  typedef kwsys_stl::map<CommandLineArguments::Internal::String, 
     CommandLineArguments::Internal::SetOfStrings > MapArgs;
  MapArgs mp;
  MapArgs::iterator mpit, smpit;
  for ( it = this->Internals->Callbacks.begin();
    it != this->Internals->Callbacks.end();
    it ++ )
    {
    CommandLineArgumentsCallbackStructure *cs = &(it->second);
    mpit = mp.find(cs->Help);
    if ( mpit != mp.end() )
      {
      mpit->second.insert(it->first);
      mp[it->first].insert(it->first);
      }
    else
      {
      mp[it->first].insert(it->first);
      }
    }
  for ( it = this->Internals->Callbacks.begin();
    it != this->Internals->Callbacks.end();
    it ++ )
    {
    CommandLineArgumentsCallbackStructure *cs = &(it->second);
    mpit = mp.find(cs->Help);
    if ( mpit != mp.end() )
      {
      mpit->second.insert(it->first);
      smpit = mp.find(it->first);
      CommandLineArguments::Internal::SetOfStrings::iterator sit;
      for ( sit = smpit->second.begin(); sit != smpit->second.end(); sit++ )
        {
        mpit->second.insert(*sit);
        }
      mp.erase(smpit);
      }
    else
      {
      mp[it->first].insert(it->first);
      }
    }
 
  // Find the length of the longest string
  CommandLineArguments::Internal::String::size_type maxlen = 0;
  for ( mpit = mp.begin();
    mpit != mp.end();
    mpit ++ )
    {
    CommandLineArguments::Internal::SetOfStrings::iterator sit;
    for ( sit = mpit->second.begin(); sit != mpit->second.end(); sit++ )
      {
      CommandLineArguments::Internal::String::size_type clen = sit->size();
      switch ( this->Internals->Callbacks[*sit].ArgumentType )
        {
        case CommandLineArguments::NO_ARGUMENT:     clen += 0; break;
        case CommandLineArguments::CONCAT_ARGUMENT: clen += 6; break;
        case CommandLineArguments::SPACE_ARGUMENT:  clen += 7; break;
        case CommandLineArguments::EQUAL_ARGUMENT:  clen += 7; break;
        }
      if ( clen > maxlen )
        {
        maxlen = clen;
        }
      }
    }

  // Create format for that string
  char format[80];
  sprintf(format, ""%%%ds"", static_cast<unsigned int>(maxlen));


  // Print help for each option
  for ( mpit = mp.begin();
    mpit != mp.end();
    mpit ++ )
    {
    CommandLineArguments::Internal::SetOfStrings::iterator sit;
    for ( sit = mpit->second.begin(); sit != mpit->second.end(); sit++ )
      {
      str << kwsys_ios::endl;
      char argument[100];
      sprintf(argument, sit->c_str());
      switch ( this->Internals->Callbacks[*sit].ArgumentType )
        {
        case CommandLineArguments::NO_ARGUMENT: break;
        case CommandLineArguments::CONCAT_ARGUMENT: strcat(argument, ""option""); break;
        case CommandLineArguments::SPACE_ARGUMENT:  strcat(argument, "" option""); break;
        case CommandLineArguments::EQUAL_ARGUMENT:  strcat(argument, ""=option""); break;
        }
      char buffer[80];
      sprintf(buffer, format, argument);
      str << buffer;
      }
    str << ""\t"";
    const char* ptr = this->Internals->Callbacks[mpit->first].Help;
    int len = strlen(ptr);
    int cnt = 0;
    while ( len > 0)
      {
      // If argument with help is longer than line length, split it on previous
      // space (or tab) and continue on the next line
      CommandLineArguments::Internal::String::size_type cc;
      for ( cc = 0; ptr[cc]; cc ++ )
        {
        if ( *ptr == ' ' || *ptr == '\t' )
          {
          ptr ++;
          len --;
          }
        }
      if ( cnt > 0 )
        {
        for ( cc = 0; cc < maxlen; cc ++ )
          {
          str << "" "";
          }
        str << ""\t"";
        }
      CommandLineArguments::Internal::String::size_type skip = len;
      if ( skip > this->LineLength - maxlen )
        {
        skip = this->LineLength - maxlen;
        for ( cc = skip-1; cc > 0; cc -- )
          {
          if ( ptr[cc] == ' ' || ptr[cc] == '\t' )
            {
            break;
            }
          }
        if ( cc != 0 )
          {
          skip = cc;
          }
        }
      str.write(ptr, skip);
      str << kwsys_ios::endl;
      ptr += skip;
      len -= skip;
      cnt ++;
      }
    }
  this->Help = str.str();
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1341.cpp,"[8, 1, 10, 0, 9, 0, 0, 2, 8, 0, 24, 0, 0, 0, 1, 398, 0, 0, 19, 20, 0, 0, 18, 27, 0, 0, 0, 1, 3, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 0, 136, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 12, 0, 21, 8, 2, 0, 40, 0, 0, 36, 0, 31, 0, 10, 0, 0, 10, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1341.cpp,76,[],[]
43d8918f4078dc2f99a868b23bcdffabaa739a95,more cleanup of ctest,[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_666.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_666.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_666.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1641.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1641.cpp,558,472,1039,-1,"sprintf(cfileoutputname, ""CoverageLog-%d.xml"", cfileoutputcount++);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1342.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1342.cpp,"{
      sprintf(cfileoutputname, ""CoverageLog-%d.xml"", cfileoutputcount++);
      std::cout << ""Open file: "" << cfileoutputname << std::endl;
      if (!this->OpenOutputFile(m_CurrentTag, cfileoutputname, cfileoutput))
        {
        std::cerr << ""Cannot open log file: "" << cfileoutputname << std::endl;
        return 1;
        }
      local_start_time = this->CurrentTime();
      this->StartXML(cfileoutput);
      cfileoutput << ""<CoverageLog>\n""
        << ""\t<StartDateTime>"" << local_start_time << ""</StartDateTime>"" << std::endl;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1342.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1342.cpp,406,"[""char *"", ""constant"", ""int""]","[""int"", ""null"", ""==""]"
43d8918f4078dc2f99a868b23bcdffabaa739a95,more cleanup of ctest,[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_666.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_666.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_666.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1641.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1641.cpp,558,472,1507,-1,"sprintf(buffer, ""%02d:%02d:%02d"", hours, minutes, seconds);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1343.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1343.cpp,"{
      double ttime = clock_finish - clock_start;
      int hours = static_cast<int>(ttime / (60 * 60));
      int minutes = static_cast<int>(ttime / 60) % 60;
      int seconds = static_cast<int>(ttime) % 60;
      char buffer[100];
      sprintf(buffer, ""%02d:%02d:%02d"", hours, minutes, seconds);
      *olog 
        << ""----------------------------------------------------------""
        << std::endl
        << ""\"""" << testname.c_str() << ""\"" end time: "" 
        << this->CurrentTime() << std::endl
        << ""\"""" << testname.c_str() << ""\"" time elapsed: "" 
        << buffer << std::endl
        << ""----------------------------------------------------------""
        << std::endl << std::endl;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1343.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 50, 0, 0, 5, 5, 0, 0, 4, 13, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 18, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 0, 0, 0, 0, 0, 10, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1343.cpp,180,"[""char *"", ""string"", ""int"", ""int"", ""int""]","[""std :: ofstream *""]"
43d8918f4078dc2f99a868b23bcdffabaa739a95,more cleanup of ctest,[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_666.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_666.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_666.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1641.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1641.cpp,558,472,1761,-1,"fprintf(stderr,""\n%.0f%% tests passed, %i tests failed out of %i\n"",
      percent, int(failed.size()), total);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1344.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1344.cpp,"{
    if (m_Verbose && passed.size() && 
      (m_UseIncludeRegExp || m_UseExcludeRegExp)) 
      {
      std::cerr << ""\nThe following tests passed:\n"";
      for(cmCTest::tm_VectorOfStrings::iterator j = passed.begin();
        j != passed.end(); ++j)
        {   
        std::cerr << ""\t"" << *j << ""\n"";
        }
      }

    float percent = float(passed.size()) * 100.0f / total;
    if ( failed.size() > 0 &&  percent > 99)
      {
      percent = 99;
      }
    fprintf(stderr,""\n%.0f%% tests passed, %i tests failed out of %i\n"",
      percent, int(failed.size()), total);

    if (failed.size()) 
      {
      std::ofstream ofs;

      std::cerr << ""\nThe following tests FAILED:\n"";
      this->OpenOutputFile(""Temporary"", ""LastTestsFailed.log"", ofs);

      std::vector<cmCTest::cmCTestTestResult>::iterator ftit;
      for(ftit = m_TestResults.begin();
        ftit != m_TestResults.end(); ++ftit)
        {
        if ( ftit->m_Status != cmCTest::COMPLETED )
          {
          ofs << ftit->m_TestCount << "":"" << ftit->m_Name << std::endl;
          fprintf(stderr, ""\t%3d - %s (%s)\n"", ftit->m_TestCount, ftit->m_Name.c_str(),
            this->GetTestStatus(ftit->m_Status));
          }
        }

      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1344.cpp,"[4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 109, 0, 0, 3, 4, 0, 0, 4, 13, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 4, 0, 0, 17, 0, 0, 8, 0, 17, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1344.cpp,62,"[""unkown"", ""constant"", ""int"", ""int_ret"", ""int_ret""]","[""int_ret"", ""null"", ""=="", ""!""]"
43d8918f4078dc2f99a868b23bcdffabaa739a95,more cleanup of ctest,[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_666.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_666.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_666.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1641.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1641.cpp,558,472,1778,-1,"fprintf(stderr, ""\t%3d - %s (%s)\n"", ftit->m_TestCount, ftit->m_Name.c_str(),
            this->GetTestStatus(ftit->m_Status));",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1345.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1345.cpp,"{
          ofs << ftit->m_TestCount << "":"" << ftit->m_Name << std::endl;
          fprintf(stderr, ""\t%3d - %s (%s)\n"", ftit->m_TestCount, ftit->m_Name.c_str(),
            this->GetTestStatus(ftit->m_Status));
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1345.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1345.cpp,79,"[""unkown"", ""string"", ""member"", ""ftit -> m_Name . c_str_ret"", ""this -> GetTestStatus_ret""]","[""member"", ""unkown"", ""!=""]"
05d985c08277350c3a1ca5ea6023ac397cf9bf1b,some bug fixes for my recent checkins and some more cleanup,[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_667.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_667.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_667.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1642.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1642.cpp,710,719,743,-1,"sprintf(current_time, ""%04d-%02d-%02d %02d:%02d:%02d UTC"",
      t->tm_year + 1900,
      t->tm_mon + 1,
      t->tm_mday,
      t->tm_hour,
      t->tm_min,
      t->tm_sec);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1346.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1346.cpp,"{
    struct tm* t = ::GetNightlyTime(m_DartConfiguration[""NightlyStartTime""],
      m_Verbose,
      m_TomorrowTag);
    char current_time[1024];
    sprintf(current_time, ""%04d-%02d-%02d %02d:%02d:%02d UTC"",
      t->tm_year + 1900,
      t->tm_mon + 1,
      t->tm_mday,
      t->tm_hour,
      t->tm_min,
      t->tm_sec);
    std::string today_update_date = current_time;
   
    extra_update_opts += ""-D \"""" + today_update_date +""\"""";
    //std::cout << ""Update: "" << extra_update_opts << std::endl;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1346.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 40, 0, 0, 3, 3, 0, 0, 2, 7, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1346.cpp,31,"[""char *"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""unkown"", ""unkown"", ""==""]"
1b5b6ab30378d0648eccb66c1fc41a7e8c762dea,starting cleanup of ctest,[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_668.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_668.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_668.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1643.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1643.cpp,3602,3598,3946,-1,"sprintf(updateVar,""CTEST_EXTRA_UPDATES_%i"",i);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1347.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1347.cpp,"{
      sprintf(updateVar,""CTEST_EXTRA_UPDATES_%i"",i);
      const char *updateVal = mf->GetDefinition(updateVar);
      if (updateVal)
        {
        std::vector<std::string> cvsArgs;
        cmSystemTools::ExpandListArgument(updateVal,cvsArgs);
        if (cvsArgs.size() == 2)
          {
          std::string fullCommand = command;
          fullCommand += "" update "";
          fullCommand += cvsArgs[1];
          output = """";
          retVal = 0;
          if ( m_Verbose )
            {
            std::cerr << ""Run CVS: "" << fullCommand.c_str() << std::endl;
            }
          res = cmSystemTools::RunSingleCommand(fullCommand.c_str(), &output, 
            &retVal, cvsArgs[0].c_str(),
            m_Verbose, 0 /*m_TimeOut*/);
          if (!res || retVal != 0)
            {
            cmSystemTools::Error(""Unable to perform extra cvs updates:\n"", output.c_str());
            this->RestoreBackupDirectories(backup, srcDir, binDir,
              backupSrcDir.c_str(), 
              backupBinDir.c_str());
            return 8;
            }
          }
        }
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1347.cpp,"[4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 1, 80, 0, 0, 3, 3, 0, 0, 2, 12, 0, 0, 0, 0, 1, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 4, 4, 0, 0, 14, 0, 0, 10, 0, 20, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1347.cpp,141,"[""char *"", ""string"", ""int""]","[""int"", ""int"", ""<""]"
66a08c10e5bd4b8eff58837cd58372a4dfdd19df,"ENH: more uniform approach to enable language, one step closer to being able to enable a language without modifing cmake source code",[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_669.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_669.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_669.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1644.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1644.cpp,158,158,160,160,"fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE FORTRAN)\n"");","fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE Fortran)\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1348.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1348.cpp,"{
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE FORTRAN)\n"");      
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1348.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1348.cpp,138,"[""FILE *"", ""string""]","[""cmSystemTools :: FileFormat"", ""unkown"", ""==""]"
66a08c10e5bd4b8eff58837cd58372a4dfdd19df,"ENH: more uniform approach to enable language, one step closer to being able to enable a language without modifing cmake source code",[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_669.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_669.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_669.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1645.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1645.cpp,187,187,190,190,"fprintf(fout, ""SET(CMAKE_FORTRAN_FLAGS \""${CMAKE_FORTRAN_FLAGS} "");","fprintf(fout, ""SET(CMAKE_Fortran_FLAGS \""${CMAKE_Fortran_FLAGS} "");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1349.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1349.cpp,"{
      const char* fflags = mf->GetDefinition(""CMAKE_FORTRAN_FLAGS"");
      fprintf(fout, ""SET(CMAKE_FORTRAN_FLAGS \""${CMAKE_FORTRAN_FLAGS} "");
      if(fflags)
        {
        fprintf(fout, "" %s "", fflags);
        }
      fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1349.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 13, 0, 0, 1, 1, 0, 0, 1, 4, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1349.cpp,168,"[""FILE *"", ""string""]","[""cmSystemTools :: FileFormat"", ""unkown"", ""==""]"
d2087dfe99d87356462a9a8b6608ca56d6293c5e,"ENH: fixes for RUN_TESTS from visual studio IDE, fprintf does not print right away, so std::cerr had to be used.  Also, allow .\ to start the config type",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_670.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1646.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1646.cpp,2156,2156,2158,-1,"fprintf(stderr,""%3d/%3d Testing %-30s\n"", cnt, (int)tmsize, testname.c_str());",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1350.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1350.cpp,"{
      fprintf(stderr,""%3d/%3d Testing %-30s\n"", cnt, (int)tmsize, testname.c_str());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1350.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1350.cpp,63,"[""unkown"", ""string"", ""int"", ""tm_ListOfTests :: size_type"", ""testname . c_str_ret""]","[""unkown""]"
d2087dfe99d87356462a9a8b6608ca56d6293c5e,"ENH: fixes for RUN_TESTS from visual studio IDE, fprintf does not print right away, so std::cerr had to be used.  Also, allow .\ to start the config type",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_670.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1646.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1646.cpp,2156,2156,2162,-1,"fprintf(stderr,""%3d/%3d Testing %-30s "", cnt, (int)tmsize, testname.c_str());",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1351.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1351.cpp,"{
      fprintf(stderr,""%3d/%3d Testing %-30s "", cnt, (int)tmsize, testname.c_str());
      fflush(stderr);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1351.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1351.cpp,67,"[""unkown"", ""string"", ""int"", ""tm_ListOfTests :: size_type"", ""testname . c_str_ret""]","[""unkown"", ""!""]"
d2087dfe99d87356462a9a8b6608ca56d6293c5e,"ENH: fixes for RUN_TESTS from visual studio IDE, fprintf does not print right away, so std::cerr had to be used.  Also, allow .\ to start the config type",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_670.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1647.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1647.cpp,2279,2293,2281,2295,"fprintf(stderr,""   Passed\n"");","std::cerr <<   ""   Passed\n"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1352.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1352.cpp,"{
        fprintf(stderr,""   Passed\n"");
        passed.push_back(testname);
        cres.m_Status = cmCTest::COMPLETED;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1352.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1352.cpp,186,"[""unkown"", ""string""]","[""this -> RunTest_ret"", ""unkown"", ""=="", ""int"", ""null"", ""=="", ""&&""]"
d2087dfe99d87356462a9a8b6608ca56d6293c5e,"ENH: fixes for RUN_TESTS from visual studio IDE, fprintf does not print right away, so std::cerr had to be used.  Also, allow .\ to start the config type",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_670.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1648.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1648.cpp,2288,2302,2290,2304,"fprintf(stderr,""***Timeout\n"");","std::cerr << ""***Timeout\n"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1353.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1353.cpp,"{
          fprintf(stderr,""***Timeout\n"");
          cres.m_Status = cmCTest::TIMEOUT;
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1353.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1353.cpp,195,"[""unkown"", ""string""]","[""this -> RunTest_ret"", ""unkown"", ""==""]"
d2087dfe99d87356462a9a8b6608ca56d6293c5e,"ENH: fixes for RUN_TESTS from visual studio IDE, fprintf does not print right away, so std::cerr had to be used.  Also, allow .\ to start the config type",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_670.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1648.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1648.cpp,2288,2302,2295,2309,"fprintf(stderr,""***Exception: "");","std::cerr << ""***Exception: "";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1354.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1354.cpp,"{
          fprintf(stderr,""***Exception: "");
          switch ( retVal )
            {
          case cmsysProcess_Exception_Fault:
            fprintf(stderr,""SegFault"");
            cres.m_Status = cmCTest::SEGFAULT;
            break;
          case cmsysProcess_Exception_Illegal:
            fprintf(stderr,""Illegal"");
            cres.m_Status = cmCTest::ILLEGAL;
            break;
          case cmsysProcess_Exception_Interrupt:
            fprintf(stderr,""Interrupt"");
            cres.m_Status = cmCTest::INTERRUPT;
            break;
          case cmsysProcess_Exception_Numerical:
            fprintf(stderr,""Numerical"");
            cres.m_Status = cmCTest::NUMERICAL;
            break;
          default:
            fprintf(stderr,""Other"");
            cres.m_Status = cmCTest::OTHER_FAULT;
            }
          fprintf(stderr,""\n"");
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1354.cpp,"[0, 0, 0, 0, 4, 0, 0, 1, 4, 1, 2, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1354.cpp,200,"[""unkown"", ""string""]","[""this -> RunTest_ret"", ""unkown"", ""==""]"
d2087dfe99d87356462a9a8b6608ca56d6293c5e,"ENH: fixes for RUN_TESTS from visual studio IDE, fprintf does not print right away, so std::cerr had to be used.  Also, allow .\ to start the config type",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_670.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1648.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1648.cpp,2288,2302,2299,2313,"fprintf(stderr,""SegFault"");","std::cerr << ""SegFault"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1355.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1355.cpp,"{
          case cmsysProcess_Exception_Fault:
            fprintf(stderr,""SegFault"");
            cres.m_Status = cmCTest::SEGFAULT;
            break;
          case cmsysProcess_Exception_Illegal:
            fprintf(stderr,""Illegal"");
            cres.m_Status = cmCTest::ILLEGAL;
            break;
          case cmsysProcess_Exception_Interrupt:
            fprintf(stderr,""Interrupt"");
            cres.m_Status = cmCTest::INTERRUPT;
            break;
          case cmsysProcess_Exception_Numerical:
            fprintf(stderr,""Numerical"");
            cres.m_Status = cmCTest::NUMERICAL;
            break;
          default:
            fprintf(stderr,""Other"");
            cres.m_Status = cmCTest::OTHER_FAULT;
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1355.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 10, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1355.cpp,204,"[""unkown"", ""string""]","[""int""]"
d2087dfe99d87356462a9a8b6608ca56d6293c5e,"ENH: fixes for RUN_TESTS from visual studio IDE, fprintf does not print right away, so std::cerr had to be used.  Also, allow .\ to start the config type",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_670.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1648.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1648.cpp,2288,2302,2303,2317,"fprintf(stderr,""Illegal"");","std::cerr << ""Illegal"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1356.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1356.cpp,"{
          case cmsysProcess_Exception_Fault:
            fprintf(stderr,""SegFault"");
            cres.m_Status = cmCTest::SEGFAULT;
            break;
          case cmsysProcess_Exception_Illegal:
            fprintf(stderr,""Illegal"");
            cres.m_Status = cmCTest::ILLEGAL;
            break;
          case cmsysProcess_Exception_Interrupt:
            fprintf(stderr,""Interrupt"");
            cres.m_Status = cmCTest::INTERRUPT;
            break;
          case cmsysProcess_Exception_Numerical:
            fprintf(stderr,""Numerical"");
            cres.m_Status = cmCTest::NUMERICAL;
            break;
          default:
            fprintf(stderr,""Other"");
            cres.m_Status = cmCTest::OTHER_FAULT;
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1356.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 10, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1356.cpp,208,"[""unkown"", ""string""]","[""int""]"
d2087dfe99d87356462a9a8b6608ca56d6293c5e,"ENH: fixes for RUN_TESTS from visual studio IDE, fprintf does not print right away, so std::cerr had to be used.  Also, allow .\ to start the config type",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_670.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1648.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1648.cpp,2288,2302,2307,2321,"fprintf(stderr,""Interrupt"");","std::cerr << ""Interrupt"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1357.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1357.cpp,"{
          case cmsysProcess_Exception_Fault:
            fprintf(stderr,""SegFault"");
            cres.m_Status = cmCTest::SEGFAULT;
            break;
          case cmsysProcess_Exception_Illegal:
            fprintf(stderr,""Illegal"");
            cres.m_Status = cmCTest::ILLEGAL;
            break;
          case cmsysProcess_Exception_Interrupt:
            fprintf(stderr,""Interrupt"");
            cres.m_Status = cmCTest::INTERRUPT;
            break;
          case cmsysProcess_Exception_Numerical:
            fprintf(stderr,""Numerical"");
            cres.m_Status = cmCTest::NUMERICAL;
            break;
          default:
            fprintf(stderr,""Other"");
            cres.m_Status = cmCTest::OTHER_FAULT;
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1357.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 10, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1357.cpp,212,"[""unkown"", ""string""]","[""int""]"
d2087dfe99d87356462a9a8b6608ca56d6293c5e,"ENH: fixes for RUN_TESTS from visual studio IDE, fprintf does not print right away, so std::cerr had to be used.  Also, allow .\ to start the config type",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_670.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1648.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1648.cpp,2288,2302,2311,2325,"fprintf(stderr,""Numerical"");","std::cerr << ""Numerical"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1358.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1358.cpp,"{
          case cmsysProcess_Exception_Fault:
            fprintf(stderr,""SegFault"");
            cres.m_Status = cmCTest::SEGFAULT;
            break;
          case cmsysProcess_Exception_Illegal:
            fprintf(stderr,""Illegal"");
            cres.m_Status = cmCTest::ILLEGAL;
            break;
          case cmsysProcess_Exception_Interrupt:
            fprintf(stderr,""Interrupt"");
            cres.m_Status = cmCTest::INTERRUPT;
            break;
          case cmsysProcess_Exception_Numerical:
            fprintf(stderr,""Numerical"");
            cres.m_Status = cmCTest::NUMERICAL;
            break;
          default:
            fprintf(stderr,""Other"");
            cres.m_Status = cmCTest::OTHER_FAULT;
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1358.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 10, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1358.cpp,216,"[""unkown"", ""string""]","[""int""]"
d2087dfe99d87356462a9a8b6608ca56d6293c5e,"ENH: fixes for RUN_TESTS from visual studio IDE, fprintf does not print right away, so std::cerr had to be used.  Also, allow .\ to start the config type",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_670.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1648.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1648.cpp,2288,2302,2315,2329,"fprintf(stderr,""Other"");","std::cerr << ""Other"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1359.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1359.cpp,"{
          case cmsysProcess_Exception_Fault:
            fprintf(stderr,""SegFault"");
            cres.m_Status = cmCTest::SEGFAULT;
            break;
          case cmsysProcess_Exception_Illegal:
            fprintf(stderr,""Illegal"");
            cres.m_Status = cmCTest::ILLEGAL;
            break;
          case cmsysProcess_Exception_Interrupt:
            fprintf(stderr,""Interrupt"");
            cres.m_Status = cmCTest::INTERRUPT;
            break;
          case cmsysProcess_Exception_Numerical:
            fprintf(stderr,""Numerical"");
            cres.m_Status = cmCTest::NUMERICAL;
            break;
          default:
            fprintf(stderr,""Other"");
            cres.m_Status = cmCTest::OTHER_FAULT;
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1359.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 10, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1359.cpp,220,"[""unkown"", ""string""]","[""int""]"
d2087dfe99d87356462a9a8b6608ca56d6293c5e,"ENH: fixes for RUN_TESTS from visual studio IDE, fprintf does not print right away, so std::cerr had to be used.  Also, allow .\ to start the config type",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_670.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1648.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1648.cpp,2288,2302,2318,2332,"fprintf(stderr,""\n"");","std::cerr << ""\n"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1360.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1360.cpp,"{
          fprintf(stderr,""***Exception: "");
          switch ( retVal )
            {
          case cmsysProcess_Exception_Fault:
            fprintf(stderr,""SegFault"");
            cres.m_Status = cmCTest::SEGFAULT;
            break;
          case cmsysProcess_Exception_Illegal:
            fprintf(stderr,""Illegal"");
            cres.m_Status = cmCTest::ILLEGAL;
            break;
          case cmsysProcess_Exception_Interrupt:
            fprintf(stderr,""Interrupt"");
            cres.m_Status = cmCTest::INTERRUPT;
            break;
          case cmsysProcess_Exception_Numerical:
            fprintf(stderr,""Numerical"");
            cres.m_Status = cmCTest::NUMERICAL;
            break;
          default:
            fprintf(stderr,""Other"");
            cres.m_Status = cmCTest::OTHER_FAULT;
            }
          fprintf(stderr,""\n"");
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1360.cpp,"[0, 0, 0, 0, 4, 0, 0, 1, 4, 1, 2, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1360.cpp,223,"[""unkown"", ""string""]","[""this -> RunTest_ret"", ""unkown"", ""==""]"
d2087dfe99d87356462a9a8b6608ca56d6293c5e,"ENH: fixes for RUN_TESTS from visual studio IDE, fprintf does not print right away, so std::cerr had to be used.  Also, allow .\ to start the config type",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_670.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1648.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1648.cpp,2288,2302,2322,2336,"fprintf(stderr,""***Bad command %d\n"", res);","std::cerr << ""***Bad command "" << res << ""\n"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1361.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1361.cpp,"{
          fprintf(stderr,""***Bad command %d\n"", res);
          cres.m_Status = cmCTest::BAD_COMMAND;
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1361.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1361.cpp,227,"[""unkown"", ""string"", ""this -> RunTest_ret""]","[""this -> RunTest_ret"", ""unkown"", ""==""]"
d2087dfe99d87356462a9a8b6608ca56d6293c5e,"ENH: fixes for RUN_TESTS from visual studio IDE, fprintf does not print right away, so std::cerr had to be used.  Also, allow .\ to start the config type",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_670.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_670.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1648.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1648.cpp,2288,2302,2327,2341,"fprintf(stderr,""***Failed\n"");","std::cerr << ""***Failed\n"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1362.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1362.cpp,"{
          fprintf(stderr,""***Failed\n"");
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1362.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1362.cpp,232,"[""unkown"", ""string""]","[""this -> RunTest_ret"", ""unkown"", ""=="", ""!""]"
9655299f08b5aa04ea63193ebecfa08efae7ca3d,ENH: initial fortran support,[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_671.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_671.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_671.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1650.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1650.cpp,181,185,183,190,,"fprintf(fout, ""SET(CMAKE_FORTRAN_FLAGS \""${CMAKE_FORTRAN_FLAGS} "");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1364.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1364.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return -1;
      }
    
    std::string source = argv[2];
    cmSystemTools::FileFormat format = 
      cmSystemTools::GetFileFormat( 
        cmSystemTools::GetFilenameExtension(source).c_str());
    if ( format == cmSystemTools::C_FILE_FORMAT )
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE C)\n"");      
      }
    else if ( format == cmSystemTools::CXX_FILE_FORMAT )
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE CXX)\n"");      
      }
    else
      {
      cmSystemTools::Error(""Unknown file format for file: "", source.c_str(), 
                           ""; TRY_COMPILE only works for C and CXX files"");
      return -1;
      }
    const char* cflags = mf->GetDefinition(""CMAKE_C_FLAGS""); 
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    fprintf(fout, ""SET(CMAKE_C_FLAGS \""${CMAKE_C_FLAGS}"");
    if(cflags)
      {
      fprintf(fout, "" %s "", cflags);
      }
    fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");
    // CXX specific flags
    if(format == cmSystemTools::CXX_FILE_FORMAT )
      {
      const char* cxxflags = mf->GetDefinition(""CMAKE_CXX_FLAGS"");
      fprintf(fout, ""SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} "");
      if(cxxflags)
        {
        fprintf(fout, "" %s "", cxxflags);
        }
      fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");
      }
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }
    
    fprintf(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",source.c_str());
    fprintf(fout, ""TARGET_LINK_LIBRARIES(cmTryCompileExec ${LINK_LIBRARIES})\n"");
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    // if the source is not in CMakeTmp 
    if(source.find(argv[1] + ""/CMakeTmp"") == source.npos)
      {
      mf->AddCMakeDependFile(source.c_str());
      }
    
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1364.cpp,"[8, 0, 1, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 2, 142, 0, 0, 6, 6, 0, 0, 7, 31, 0, 0, 0, 0, 3, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 3, 0, 9, 8, 1, 0, 37, 0, 0, 24, 1, 51, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1364.cpp,161,"[""FILE *"", ""string""]","[""cmSystemTools :: FileFormat"", ""unkown"", ""==""]"
9655299f08b5aa04ea63193ebecfa08efae7ca3d,ENH: initial fortran support,[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_671.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_671.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_671.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1650.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1650.cpp,181,185,183,193,,"fprintf(fout, "" %s "", fflags);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1365.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1365.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return -1;
      }
    
    std::string source = argv[2];
    cmSystemTools::FileFormat format = 
      cmSystemTools::GetFileFormat( 
        cmSystemTools::GetFilenameExtension(source).c_str());
    if ( format == cmSystemTools::C_FILE_FORMAT )
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE C)\n"");      
      }
    else if ( format == cmSystemTools::CXX_FILE_FORMAT )
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE CXX)\n"");      
      }
    else
      {
      cmSystemTools::Error(""Unknown file format for file: "", source.c_str(), 
                           ""; TRY_COMPILE only works for C and CXX files"");
      return -1;
      }
    const char* cflags = mf->GetDefinition(""CMAKE_C_FLAGS""); 
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    fprintf(fout, ""SET(CMAKE_C_FLAGS \""${CMAKE_C_FLAGS}"");
    if(cflags)
      {
      fprintf(fout, "" %s "", cflags);
      }
    fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");
    // CXX specific flags
    if(format == cmSystemTools::CXX_FILE_FORMAT )
      {
      const char* cxxflags = mf->GetDefinition(""CMAKE_CXX_FLAGS"");
      fprintf(fout, ""SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} "");
      if(cxxflags)
        {
        fprintf(fout, "" %s "", cxxflags);
        }
      fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");
      }
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }
    
    fprintf(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",source.c_str());
    fprintf(fout, ""TARGET_LINK_LIBRARIES(cmTryCompileExec ${LINK_LIBRARIES})\n"");
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    // if the source is not in CMakeTmp 
    if(source.find(argv[1] + ""/CMakeTmp"") == source.npos)
      {
      mf->AddCMakeDependFile(source.c_str());
      }
    
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1365.cpp,"[8, 0, 1, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 2, 142, 0, 0, 6, 6, 0, 0, 7, 31, 0, 0, 0, 0, 3, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 3, 0, 9, 8, 1, 0, 37, 0, 0, 24, 1, 51, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1365.cpp,161,"[""FILE *"", ""string""]","[""cmSystemTools :: FileFormat"", ""unkown"", ""==""]"
9655299f08b5aa04ea63193ebecfa08efae7ca3d,ENH: initial fortran support,[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_671.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_671.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_671.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1650.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1650.cpp,181,185,183,195,,(fout;,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1366.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1366.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return -1;
      }
    
    std::string source = argv[2];
    cmSystemTools::FileFormat format = 
      cmSystemTools::GetFileFormat( 
        cmSystemTools::GetFilenameExtension(source).c_str());
    if ( format == cmSystemTools::C_FILE_FORMAT )
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE C)\n"");      
      }
    else if ( format == cmSystemTools::CXX_FILE_FORMAT )
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE CXX)\n"");      
      }
    else
      {
      cmSystemTools::Error(""Unknown file format for file: "", source.c_str(), 
                           ""; TRY_COMPILE only works for C and CXX files"");
      return -1;
      }
    const char* cflags = mf->GetDefinition(""CMAKE_C_FLAGS""); 
    fprintf(fout, ""SET(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    fprintf(fout, ""SET(CMAKE_C_FLAGS \""${CMAKE_C_FLAGS}"");
    if(cflags)
      {
      fprintf(fout, "" %s "", cflags);
      }
    fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");
    // CXX specific flags
    if(format == cmSystemTools::CXX_FILE_FORMAT )
      {
      const char* cxxflags = mf->GetDefinition(""CMAKE_CXX_FLAGS"");
      fprintf(fout, ""SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} "");
      if(cxxflags)
        {
        fprintf(fout, "" %s "", cxxflags);
        }
      fprintf(fout, "" ${COMPILE_DEFINITIONS}\"")\n"");
      }
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }
    
    fprintf(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",source.c_str());
    fprintf(fout, ""TARGET_LINK_LIBRARIES(cmTryCompileExec ${LINK_LIBRARIES})\n"");
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    // if the source is not in CMakeTmp 
    if(source.find(argv[1] + ""/CMakeTmp"") == source.npos)
      {
      mf->AddCMakeDependFile(source.c_str());
      }
    
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1366.cpp,"[8, 0, 1, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 2, 142, 0, 0, 6, 6, 0, 0, 7, 31, 0, 0, 0, 0, 3, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 3, 0, 9, 8, 1, 0, 37, 0, 0, 24, 1, 51, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1366.cpp,161,"[""FILE *"", ""string""]","[""cmSystemTools :: FileFormat"", ""unkown"", ""==""]"
c19a70b3ada66a59c7a0ff78bf1a4a1cd557db9a,WRN: remove warnings,[],Source/cmMacroCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_674.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_674.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_674.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1657.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1657.cpp,71,71,76,74,"sprintf(argcDef,""%i"",expandedArguments.size());",argcDefStream << expandedArguments.size();,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1367.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1367.cpp,"{
    std::string tmps;
    cmListFileArgument arg;
    std::string variable;
    // Expand the argument list to the macro.
    std::vector<std::string> expandedArguments;
    mf.ExpandArguments(lff.m_Arguments, expandedArguments);

    // make sure the number of arguments passed is at least the number
    // required by the signature
    if (expandedArguments.size() < m_Args.size() - 1)
      {
      cmOStringStream error;
      error << ""Error in cmake code at\n""
            << lff.m_FilePath << "":"" << lff.m_Line << "":\n""
            << ""Invocation of macro \""""
            << lff.m_Name.c_str() << ""\"" with incorrect number of arguments."";
      cmSystemTools::Error(error.str().c_str());
      return true;
      }
    
    // now set the new argcDef
    char argcDef[64];
    sprintf(argcDef,""%i"",expandedArguments.size());    
    
    // Invoke all the functions that were collected in the block.
    cmListFileFunction newLFF;
    for(unsigned int c = 0; c < m_Functions.size(); ++c)
      {
      // Replace the formal arguments and then invoke the command.
      newLFF.m_Arguments.clear();
      newLFF.m_Arguments.reserve(m_Functions[c].m_Arguments.size());
      newLFF.m_Name = m_Functions[c].m_Name;
      newLFF.m_FilePath = m_Functions[c].m_FilePath;
      newLFF.m_Line = m_Functions[c].m_Line;
      for (std::vector<cmListFileArgument>::const_iterator k = 
             m_Functions[c].m_Arguments.begin();
           k != m_Functions[c].m_Arguments.end(); ++k)
        {
        tmps = k->Value;
        // replace formal arguments
        for (unsigned int j = 1; j < m_Args.size(); ++j)
          {
          variable = ""${"";
          variable += m_Args[j];
          variable += ""}""; 
          cmSystemTools::ReplaceString(tmps, variable.c_str(),
                                       expandedArguments[j-1].c_str());
          }
        // replace argc, argv arguments
        for (unsigned int j = 1; j < m_Args.size(); ++j)
          {
          variable = ""${ARGC}"";
          cmSystemTools::ReplaceString(tmps, variable.c_str(),argcDef);
          }
        for (unsigned int j = 1; j < m_Args.size(); ++j)
          {
          // since this could be slow, first check if there is an ARGV
          // only then do the inner loop. PS std::string sucks
          char argvName[60];
          if (tmps.find(""${ARGV"") != std::string::npos)
            {
            for (unsigned int t = 0; t < expandedArguments.size(); ++t)
              {
              sprintf(argvName,""${ARGV%i}"",t);
              cmSystemTools::ReplaceString(tmps, argvName,
                                           expandedArguments[t].c_str());
              }
            }
          }
        
        arg.Value = tmps;
        arg.Quoted = k->Quoted;
        newLFF.m_Arguments.push_back(arg);
        }
      if(!mf.ExecuteCommand(newLFF))
        {
        cmOStringStream error;
        error << ""Error in cmake code at\n""
              << lff.m_FilePath << "":"" << lff.m_Line << "":\n""
              << ""A command failed during the invocation of macro \""""
              << lff.m_Name.c_str() << ""\""."";
        cmSystemTools::Error(error.str().c_str());
        }
      }
    return true;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1367.cpp,"[3, 0, 6, 0, 0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 0, 248, 0, 0, 9, 15, 0, 0, 12, 27, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 11, 0, 9, 3, 0, 0, 36, 0, 0, 23, 0, 25, 0, 6, 0, 0, 6, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1367.cpp,58,"[""char *"", ""string"", ""expandedArguments . size_ret""]","[""expandedArguments . size_ret"", ""m_Args . size_ret"", ""<"", ""!""]"
824b231f42af0b228040202d3e62c781f5d6c409,ENH: Count tests while they go. Also in the logs report more stuff like elapsed time etc.,[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_677.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_677.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_677.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1661.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1661.cpp,1929,1924,1961,2000,"fprintf(stderr,""Testing %-30s "",args[0].Value.c_str());","fprintf(stderr,""%3d/%3d Testing %-30s "", cnt, tmsize, testname.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1368.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1368.cpp,"{
        fprintf(stderr,""Testing %-30s "",args[0].Value.c_str());
        fflush(stderr);
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1368.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1368.cpp,133,"[""unkown"", ""string"", ""args [ 0 ] . Value . c_str_ret""]","[""unkown"", ""!""]"
824b231f42af0b228040202d3e62c781f5d6c409,ENH: Count tests while they go. Also in the logs report more stuff like elapsed time etc.,[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_677.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_677.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_677.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1661.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1661.cpp,1929,1924,1971,1996,,"fprintf(stderr,""%3d/%3d Testing %-30s\n"", cnt, tmsize, testname.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1369.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1369.cpp,"(testCommand == """")
        {
        std::cerr << ""Unable to find executable: "" <<
          args[1].Value.c_str() << ""\n"";
        m_TestResults.push_back( cres ); 
        failed.push_back(args[0].Value);
        continue;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1369.cpp,"[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1369.cpp,143,[],"[""member"", ""member"", ""ereg . find_ret"", ""&&"", ""&&"", ""!""]"
824b231f42af0b228040202d3e62c781f5d6c409,ENH: Count tests while they go. Also in the logs report more stuff like elapsed time etc.,[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_677.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_677.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_677.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1661.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1661.cpp,1929,1924,1971,2100,,"sprintf(buffer, ""%02d:%02d:%02d"", hours, minutes, seconds);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1370.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1370.cpp,"(testCommand == """")
        {
        std::cerr << ""Unable to find executable: "" <<
          args[1].Value.c_str() << ""\n"";
        m_TestResults.push_back( cres ); 
        failed.push_back(args[0].Value);
        continue;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1370.cpp,"[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1370.cpp,143,[],"[""member"", ""member"", ""ereg . find_ret"", ""&&"", ""&&"", ""!""]"
740505bb63b883d5350f8e8f5684b11a486ad792,ENH: Added a recursive process execution test.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_679.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_679.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_679.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1666.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1666.cpp,63,70,67,80,,"fprintf(stdout, ""Output on stdout before recursive test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1371.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1371.cpp,"{
  int result = 0;
  char* data = 0;
  int length = 0;
  kwsysProcess* kp = kwsysProcess_New();
  if(!kp)
    {
    fprintf(stderr, ""kwsysProcess_New returned NULL!\n"");
    return 1;
    }
  
  kwsysProcess_SetCommand(kp, cmd);
  kwsysProcess_SetTimeout(kp, 3);
  kwsysProcess_Execute(kp);
  
  while(kwsysProcess_WaitForData(kp, &data, &length, 0))
    {
    fwrite(data, 1, length, stdout);
    fflush(stdout);
    }
  
  kwsysProcess_WaitForExit(kp, 0);
  
  switch (kwsysProcess_GetState(kp))
    {
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n""); break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n""); break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n""); break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"",
             kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n""); break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally.\n"");
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp)); break;
    };
  
  if(result)
    {
    if(exception != kwsysProcess_GetExitException(kp))
      {
      fprintf(stderr, ""Mismatch in exit exception.  Should have been %d.\n"",
              exception);
      }
    if(value != kwsysProcess_GetExitValue(kp))
      {
      fprintf(stderr, ""Mismatch in exit value.  Should have been %d.\n"",
              value);
      }
    }
  
  if(kwsysProcess_GetState(kp) != state)
    {
    fprintf(stderr, ""Mismatch in state.  Should have been %d.\n"", state);
    result = 1;
    }
  
  kwsysProcess_Delete(kp);
  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1371.cpp,"[5, 1, 0, 0, 7, 0, 2, 1, 7, 0, 8, 0, 0, 1, 0, 88, 0, 0, 4, 4, 0, 0, 4, 20, 0, 0, 0, 0, 2, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 5, 0, 0, 30, 0, 0, 21, 0, 47, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1371.cpp,2,[],[]
740505bb63b883d5350f8e8f5684b11a486ad792,ENH: Added a recursive process execution test.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_679.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_679.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_679.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1666.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1666.cpp,63,70,67,81,,"fprintf(stderr, ""Output on stderr before recursive test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1372.cpp,"{
  int result = 0;
  char* data = 0;
  int length = 0;
  kwsysProcess* kp = kwsysProcess_New();
  if(!kp)
    {
    fprintf(stderr, ""kwsysProcess_New returned NULL!\n"");
    return 1;
    }
  
  kwsysProcess_SetCommand(kp, cmd);
  kwsysProcess_SetTimeout(kp, 3);
  kwsysProcess_Execute(kp);
  
  while(kwsysProcess_WaitForData(kp, &data, &length, 0))
    {
    fwrite(data, 1, length, stdout);
    fflush(stdout);
    }
  
  kwsysProcess_WaitForExit(kp, 0);
  
  switch (kwsysProcess_GetState(kp))
    {
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n""); break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n""); break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n""); break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"",
             kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n""); break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally.\n"");
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp)); break;
    };
  
  if(result)
    {
    if(exception != kwsysProcess_GetExitException(kp))
      {
      fprintf(stderr, ""Mismatch in exit exception.  Should have been %d.\n"",
              exception);
      }
    if(value != kwsysProcess_GetExitValue(kp))
      {
      fprintf(stderr, ""Mismatch in exit value.  Should have been %d.\n"",
              value);
      }
    }
  
  if(kwsysProcess_GetState(kp) != state)
    {
    fprintf(stderr, ""Mismatch in state.  Should have been %d.\n"", state);
    result = 1;
    }
  
  kwsysProcess_Delete(kp);
  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1372.cpp,"[5, 1, 0, 0, 7, 0, 2, 1, 7, 0, 8, 0, 0, 1, 0, 88, 0, 0, 4, 4, 0, 0, 4, 20, 0, 0, 0, 0, 2, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 5, 0, 0, 30, 0, 0, 21, 0, 47, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1372.cpp,2,[],[]
740505bb63b883d5350f8e8f5684b11a486ad792,ENH: Added a recursive process execution test.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_679.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_679.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_679.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1666.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1666.cpp,63,70,67,86,,"fprintf(stdout, ""Output on stdout after recursive test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1373.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1373.cpp,"{
  int result = 0;
  char* data = 0;
  int length = 0;
  kwsysProcess* kp = kwsysProcess_New();
  if(!kp)
    {
    fprintf(stderr, ""kwsysProcess_New returned NULL!\n"");
    return 1;
    }
  
  kwsysProcess_SetCommand(kp, cmd);
  kwsysProcess_SetTimeout(kp, 3);
  kwsysProcess_Execute(kp);
  
  while(kwsysProcess_WaitForData(kp, &data, &length, 0))
    {
    fwrite(data, 1, length, stdout);
    fflush(stdout);
    }
  
  kwsysProcess_WaitForExit(kp, 0);
  
  switch (kwsysProcess_GetState(kp))
    {
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n""); break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n""); break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n""); break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"",
             kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n""); break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally.\n"");
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp)); break;
    };
  
  if(result)
    {
    if(exception != kwsysProcess_GetExitException(kp))
      {
      fprintf(stderr, ""Mismatch in exit exception.  Should have been %d.\n"",
              exception);
      }
    if(value != kwsysProcess_GetExitValue(kp))
      {
      fprintf(stderr, ""Mismatch in exit value.  Should have been %d.\n"",
              value);
      }
    }
  
  if(kwsysProcess_GetState(kp) != state)
    {
    fprintf(stderr, ""Mismatch in state.  Should have been %d.\n"", state);
    result = 1;
    }
  
  kwsysProcess_Delete(kp);
  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1373.cpp,"[5, 1, 0, 0, 7, 0, 2, 1, 7, 0, 8, 0, 0, 1, 0, 88, 0, 0, 4, 4, 0, 0, 4, 20, 0, 0, 0, 0, 2, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 5, 0, 0, 30, 0, 0, 21, 0, 47, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1373.cpp,2,[],[]
740505bb63b883d5350f8e8f5684b11a486ad792,ENH: Added a recursive process execution test.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_679.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_679.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_679.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1666.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1666.cpp,63,70,67,87,,"fprintf(stderr, ""Output on stderr after recursive test.\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1374.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1374.cpp,"{
  int result = 0;
  char* data = 0;
  int length = 0;
  kwsysProcess* kp = kwsysProcess_New();
  if(!kp)
    {
    fprintf(stderr, ""kwsysProcess_New returned NULL!\n"");
    return 1;
    }
  
  kwsysProcess_SetCommand(kp, cmd);
  kwsysProcess_SetTimeout(kp, 3);
  kwsysProcess_Execute(kp);
  
  while(kwsysProcess_WaitForData(kp, &data, &length, 0))
    {
    fwrite(data, 1, length, stdout);
    fflush(stdout);
    }
  
  kwsysProcess_WaitForExit(kp, 0);
  
  switch (kwsysProcess_GetState(kp))
    {
    case kwsysProcess_State_Starting:
      printf(""No process has been executed.\n""); break;
    case kwsysProcess_State_Executing:
      printf(""The process is still executing.\n""); break;
    case kwsysProcess_State_Expired:
      printf(""Child was killed when timeout expired.\n""); break;
    case kwsysProcess_State_Exited:
      printf(""Child exited with value = %d\n"",
             kwsysProcess_GetExitValue(kp));
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Killed:
      printf(""Child was killed by parent.\n""); break;
    case kwsysProcess_State_Exception:
      printf(""Child terminated abnormally.\n"");
      result = ((exception != kwsysProcess_GetExitException(kp)) ||
                (value != kwsysProcess_GetExitValue(kp))); break;
    case kwsysProcess_State_Error:
      printf(""Error in administrating child process: [%s]\n"",
             kwsysProcess_GetErrorString(kp)); break;
    };
  
  if(result)
    {
    if(exception != kwsysProcess_GetExitException(kp))
      {
      fprintf(stderr, ""Mismatch in exit exception.  Should have been %d.\n"",
              exception);
      }
    if(value != kwsysProcess_GetExitValue(kp))
      {
      fprintf(stderr, ""Mismatch in exit value.  Should have been %d.\n"",
              value);
      }
    }
  
  if(kwsysProcess_GetState(kp) != state)
    {
    fprintf(stderr, ""Mismatch in state.  Should have been %d.\n"", state);
    result = 1;
    }
  
  kwsysProcess_Delete(kp);
  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1374.cpp,"[5, 1, 0, 0, 7, 0, 2, 1, 7, 0, 8, 0, 0, 1, 0, 88, 0, 0, 4, 4, 0, 0, 4, 20, 0, 0, 0, 0, 2, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 5, 0, 0, 30, 0, 0, 21, 0, 47, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1374.cpp,2,[],[]
740505bb63b883d5350f8e8f5684b11a486ad792,ENH: Added a recursive process execution test.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_679.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_679.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_679.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1667.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1667.cpp,156,210,184,247,,"fprintf(stdout, ""Output on stdout before test %d.\n"", n);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1375.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1375.cpp,"{
    int states[4] =
      {
        kwsysProcess_State_Exited,
        kwsysProcess_State_Exited,
        kwsysProcess_State_Expired,
        kwsysProcess_State_Exception
      };
    int exceptions[4] = {kwsysProcess_Exception_None, kwsysProcess_Exception_None,
                         kwsysProcess_Exception_None, kwsysProcess_Exception_Fault};
    int values[4] = {0, 123, 1, 1};
    const char* cmd[4];
    cmd[0] = argv[0];
    cmd[1] = ""run"";
    cmd[2] = argv[1];
    cmd[3] = 0;
    return runChild(cmd, states[n-1], exceptions[n-1], values[n-1]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1375.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 1, 43, 0, 0, 4, 4, 0, 0, 3, 19, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 13, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1375.cpp,47,"[""const char * *"", ""member"", ""member"", ""member""]","[""atoi_ret"", ""int"", ""<=""]"
740505bb63b883d5350f8e8f5684b11a486ad792,ENH: Added a recursive process execution test.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_679.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_679.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_679.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1667.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1667.cpp,156,210,184,248,,"fprintf(stderr, ""Output on stderr before test %d.\n"", n);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1376.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1376.cpp,"{
    int states[4] =
      {
        kwsysProcess_State_Exited,
        kwsysProcess_State_Exited,
        kwsysProcess_State_Expired,
        kwsysProcess_State_Exception
      };
    int exceptions[4] = {kwsysProcess_Exception_None, kwsysProcess_Exception_None,
                         kwsysProcess_Exception_None, kwsysProcess_Exception_Fault};
    int values[4] = {0, 123, 1, 1};
    const char* cmd[4];
    cmd[0] = argv[0];
    cmd[1] = ""run"";
    cmd[2] = argv[1];
    cmd[3] = 0;
    return runChild(cmd, states[n-1], exceptions[n-1], values[n-1]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1376.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 1, 43, 0, 0, 4, 4, 0, 0, 3, 19, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 13, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1376.cpp,47,"[""const char * *"", ""member"", ""member"", ""member""]","[""atoi_ret"", ""int"", ""<=""]"
740505bb63b883d5350f8e8f5684b11a486ad792,ENH: Added a recursive process execution test.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_679.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_679.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_679.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1667.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1667.cpp,156,210,184,252,,"fprintf(stdout, ""Output on stdout after test %d.\n"", n);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1377.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1377.cpp,"{
    int states[4] =
      {
        kwsysProcess_State_Exited,
        kwsysProcess_State_Exited,
        kwsysProcess_State_Expired,
        kwsysProcess_State_Exception
      };
    int exceptions[4] = {kwsysProcess_Exception_None, kwsysProcess_Exception_None,
                         kwsysProcess_Exception_None, kwsysProcess_Exception_Fault};
    int values[4] = {0, 123, 1, 1};
    const char* cmd[4];
    cmd[0] = argv[0];
    cmd[1] = ""run"";
    cmd[2] = argv[1];
    cmd[3] = 0;
    return runChild(cmd, states[n-1], exceptions[n-1], values[n-1]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1377.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 1, 43, 0, 0, 4, 4, 0, 0, 3, 19, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 13, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1377.cpp,47,"[""const char * *"", ""member"", ""member"", ""member""]","[""atoi_ret"", ""int"", ""<=""]"
740505bb63b883d5350f8e8f5684b11a486ad792,ENH: Added a recursive process execution test.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_679.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_679.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_679.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1667.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1667.cpp,156,210,184,253,,"fprintf(stderr, ""Output on stderr after test %d.\n"", n);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1378.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1378.cpp,"{
    int states[4] =
      {
        kwsysProcess_State_Exited,
        kwsysProcess_State_Exited,
        kwsysProcess_State_Expired,
        kwsysProcess_State_Exception
      };
    int exceptions[4] = {kwsysProcess_Exception_None, kwsysProcess_Exception_None,
                         kwsysProcess_Exception_None, kwsysProcess_Exception_Fault};
    int values[4] = {0, 123, 1, 1};
    const char* cmd[4];
    cmd[0] = argv[0];
    cmd[1] = ""run"";
    cmd[2] = argv[1];
    cmd[3] = 0;
    return runChild(cmd, states[n-1], exceptions[n-1], values[n-1]);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1378.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 1, 43, 0, 0, 4, 4, 0, 0, 3, 19, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 13, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1378.cpp,47,"[""const char * *"", ""member"", ""member"", ""member""]","[""atoi_ret"", ""int"", ""<=""]"
740505bb63b883d5350f8e8f5684b11a486ad792,ENH: Added a recursive process execution test.,[],Source/kwsys/testProcess.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_679.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_679.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_679.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1667.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1667.cpp,156,210,188,260,,"fprintf(stderr, ""Test number out of range\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1379.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1379.cpp,"{
    return 0;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1379.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1379.cpp,51,[],"[""atoi_ret"", ""int"", ""<="", ""!""]"
2c2291bbe03aec2dd6637a5311204f09ff6c58ba,"ENH: add new feature to ctest so that it can cmake, build and run a test executable",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_680.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_680.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_680.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1668.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1668.cpp,1961,1962,1963,1964,"fprintf(stderr,""***Bad command\n"");","fprintf(stderr,""***Bad command %d\n"", res);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1380.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1380.cpp,"{
            fprintf(stderr,""***Bad command\n"");
            cres.m_Status = cmCTest::BAD_COMMAND;
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1380.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1380.cpp,203,"[""unkown"", ""string""]","[""this -> RunTest_ret"", ""unkown"", ""==""]"
5dcbef7dfe7e365b1cb2f5881be07bc934df8df5,ENH: Using CreateFile with FILE_FLAG_DELETE_ON_CLOSE to automatically delete the Win9x forwarding executable even if the parent process crashes.,[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_684.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_684.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_684.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1672.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1672.cpp,286,289,288,291,"sprintf(fwdName, ""cmw9xfwd_%u_%p.exe"", GetCurrentProcessId(), cp);","sprintf(fwdName, KWSYS_NAMESPACE_STRING ""pew9xfwd_%u_%p.exe"",
            GetCurrentProcessId(), cp);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1381.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1381.cpp,"{
    /* This is Win9x.  We need the console forwarding executable to
       work-around a Windows 9x bug.  */
    char fwdName[_MAX_FNAME+1] = """";
    char tempDir[_MAX_PATH+1] = """";

    /* We will try putting the executable in the system temp
       directory.  Note that the returned path already has a trailing
       slash.  */
    DWORD length = GetTempPath(_MAX_PATH+1, tempDir);

    /* Construct the executable name from the process id and kwsysProcess
       instance.  This should be unique.  */
    sprintf(fwdName, ""cmw9xfwd_%u_%p.exe"", GetCurrentProcessId(), cp);

    /* If we have a temp directory, use it.  */
    if(length > 0 && length <= _MAX_PATH)
      {
      /* Allocate a buffer to hold the forwarding executable path.  */
      size_t tdlen = strlen(tempDir);
      win9x = (char*)malloc(tdlen + strlen(fwdName) + 2);
      if(!win9x)
        {
        kwsysProcess_Delete(cp);
        return 0;
        }

      /* Construct the full path to the forwarding executable.  */
      sprintf(win9x, ""%s%s"", tempDir, fwdName);
      }

    /* If we found a place to put the forwarding executable, try to
       write it. */
    if(win9x)
      {
      if(!kwsysEncodedWriteArrayProcessFwd9x(win9x))
        {
        /* Failed to create forwarding executable.  Give up.  */
        free(win9x);
        kwsysProcess_Delete(cp);
        return 0;
        }
      }
    else
      {
      /* Failed to find a place to put forwarding executable.  */
      kwsysProcess_Delete(cp);
      return 0;
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1381.cpp,"[4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 0, 46, 0, 0, 4, 4, 0, 0, 4, 12, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 4, 4, 1, 0, 12, 0, 0, 7, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1381.cpp,44,"[""char *"", ""constant"", ""GetCurrentProcessId_ret"", ""malloc_ret""]","[""member"", ""macro"", ""==""]"
ad8bc4b1a43dd017d361f189ec2b38d97e7de987,ENH: Merged changes from KWSys-MultiProcess-bp to KWSys-MultiProcess-b2t-1-mp to main tree.  This introduces support for process pipelines.,[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_687.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_687.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_687.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1677.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1677.cpp,698,779,771,-1,"sprintf(cp->RealCommand, ""%s %p %p %d %s"", cp->Win9x,
            cp->Pipe[CMPE_PIPE_ERROR].Write, cp->Win9xKillEvent,
            cp->HideWindow, cp->Command);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1382.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1382.cpp,"{
    /* Windows 9x */
    
    /* The forwarding executable is given a handle to the error pipe
       and a handle to the kill event.  */
    cp->RealCommand = malloc(strlen(cp->Win9x)+strlen(cp->Command)+100);
    sprintf(cp->RealCommand, ""%s %p %p %d %s"", cp->Win9x,
            cp->Pipe[CMPE_PIPE_ERROR].Write, cp->Win9xKillEvent,
            cp->HideWindow, cp->Command);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1382.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1382.cpp,75,"[""member"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""member""]"
ad8bc4b1a43dd017d361f189ec2b38d97e7de987,ENH: Merged changes from KWSys-MultiProcess-bp to KWSys-MultiProcess-b2t-1-mp to main tree.  This introduces support for process pipelines.,[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_687.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_687.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_687.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1679.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1679.cpp,1258,1565,1269,1579,"_snprintf(cp->ErrorMessage, CMPE_PIPE_BUFFER_SIZE,
                ""Process execution failed with error 0x%X.  ""
                ""FormatMessage failed with error 0x%X"",
                original, GetLastError());","_snprintf(cp->ErrorMessage, KWSYSPE_PIPE_BUFFER_SIZE,
                  ""Process execution failed with error 0x%X.  ""
                  ""FormatMessage failed with error 0x%X"",
                  original, GetLastError());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1384.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1384.cpp,"{
      /* FormatMessage failed.  Use a default message.  */
      _snprintf(cp->ErrorMessage, CMPE_PIPE_BUFFER_SIZE,
                ""Process execution failed with error 0x%X.  ""
                ""FormatMessage failed with error 0x%X"",
                original, GetLastError());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1384.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1384.cpp,16,[],"[""DWORD"", ""int"", ""<""]"
3bbe95397a1331d52d53f66ab4a12baf63c02860,"ENH: Fix verbose output, fix error message, and fix the exit code check",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_690.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_690.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_690.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1684.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1684.cpp,1772,1772,1774,1774,"fprintf(stderr,""SegFault"");","fprintf(stderr,""Illegal"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1385.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1385.cpp,"{
              case cmsysProcess_Exception_Fault:
                fprintf(stderr,""SegFault"");
                cres.m_Status = cmCTest::SEGFAULT;
                break;
              case cmsysProcess_Exception_Illegal:
                fprintf(stderr,""SegFault"");
                cres.m_Status = cmCTest::ILLEGAL;
                break;
              case cmsysProcess_Exception_Interrupt:
                fprintf(stderr,""SegFault"");
                cres.m_Status = cmCTest::INTERRUPT;
                break;
              case cmsysProcess_Exception_Numerical:
                fprintf(stderr,""SegFault"");
                cres.m_Status = cmCTest::NUMERICAL;
                break;
              default:
                fprintf(stderr,""Other"");
                cres.m_Status = cmCTest::OTHER_FAULT;
                }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1385.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 10, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1385.cpp,159,"[""unkown"", ""string""]","[""int""]"
3bbe95397a1331d52d53f66ab4a12baf63c02860,"ENH: Fix verbose output, fix error message, and fix the exit code check",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_690.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_690.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_690.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1684.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1684.cpp,1772,1772,1778,1778,"fprintf(stderr,""SegFault"");","fprintf(stderr,""Interrupt"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1386.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1386.cpp,"{
              case cmsysProcess_Exception_Fault:
                fprintf(stderr,""SegFault"");
                cres.m_Status = cmCTest::SEGFAULT;
                break;
              case cmsysProcess_Exception_Illegal:
                fprintf(stderr,""SegFault"");
                cres.m_Status = cmCTest::ILLEGAL;
                break;
              case cmsysProcess_Exception_Interrupt:
                fprintf(stderr,""SegFault"");
                cres.m_Status = cmCTest::INTERRUPT;
                break;
              case cmsysProcess_Exception_Numerical:
                fprintf(stderr,""SegFault"");
                cres.m_Status = cmCTest::NUMERICAL;
                break;
              default:
                fprintf(stderr,""Other"");
                cres.m_Status = cmCTest::OTHER_FAULT;
                }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1386.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 10, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1386.cpp,163,"[""unkown"", ""string""]","[""int""]"
3bbe95397a1331d52d53f66ab4a12baf63c02860,"ENH: Fix verbose output, fix error message, and fix the exit code check",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_690.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_690.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_690.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1684.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1684.cpp,1772,1772,1782,1782,"fprintf(stderr,""SegFault"");","fprintf(stderr,""Numerical"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1387.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1387.cpp,"{
              case cmsysProcess_Exception_Fault:
                fprintf(stderr,""SegFault"");
                cres.m_Status = cmCTest::SEGFAULT;
                break;
              case cmsysProcess_Exception_Illegal:
                fprintf(stderr,""SegFault"");
                cres.m_Status = cmCTest::ILLEGAL;
                break;
              case cmsysProcess_Exception_Interrupt:
                fprintf(stderr,""SegFault"");
                cres.m_Status = cmCTest::INTERRUPT;
                break;
              case cmsysProcess_Exception_Numerical:
                fprintf(stderr,""SegFault"");
                cres.m_Status = cmCTest::NUMERICAL;
                break;
              default:
                fprintf(stderr,""Other"");
                cres.m_Status = cmCTest::OTHER_FAULT;
                }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1387.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 4, 1, 1, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 10, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1387.cpp,167,"[""unkown"", ""string""]","[""int""]"
cbeeaa71880c565226efeab605e0492eb1806e66,ENH: Better error reporting,[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_691.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_691.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_691.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1685.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1685.cpp,1750,1750,1754,1797,"fprintf(stderr,""***Failed\n"");","fprintf(stderr,""***Failed\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1388.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1388.cpp,"{
            fprintf(stderr,""***Failed\n"");
            if (output != """")
              {
              if (dartStuff.find(output.c_str()))
                {
                std::string dartString = dartStuff.match(1);
                cmSystemTools::ReplaceString(output, dartString.c_str(),"""");
                cres.m_RegressionImages = this->GenerateRegressionImages(dartString);
                }
              if (output != """" && m_Verbose)
                {
                std::cerr << output.c_str() << ""\n"";
                }
              }
            failed.push_back(args[0].Value); 
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1388.cpp,"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 44, 0, 0, 1, 1, 0, 0, 1, 7, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 3, 3, 0, 0, 9, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1388.cpp,139,"[""unkown"", ""string""]","[""cmSystemTools :: RunSingleCommand_ret"", ""!"", ""int"", ""null"", ""!="", ""||""]"
cbeeaa71880c565226efeab605e0492eb1806e66,ENH: Better error reporting,[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_691.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_691.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_691.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1685.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1685.cpp,1750,1750,1772,1754,"fprintf(stderr,""   Passed\n"");","fprintf(stderr,""   Passed\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1389.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1389.cpp,"{
            fprintf(stderr,""   Passed\n"");
            if (output != """")
              {
              if (dartStuff.find(output.c_str()))
                {
                std::string dartString = dartStuff.match(1);
                cmSystemTools::ReplaceString(output, dartString.c_str(),"""");
                cres.m_RegressionImages = this->GenerateRegressionImages(dartString);
                }
              if (output != """" && m_Verbose)
                {
                std::cerr << output.c_str() << ""\n"";
                }
              }
            passed.push_back(args[0].Value); 
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1389.cpp,"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 44, 0, 0, 1, 1, 0, 0, 1, 7, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 3, 3, 0, 0, 9, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1389.cpp,157,"[""unkown"", ""string""]","[""cmSystemTools :: RunSingleCommand_ret"", ""!"", ""int"", ""null"", ""!="", ""||"", ""!""]"
beda09a96b2139a5e22f7f78c4cdff7783669d99,ENH: Made error message consistent between win9x and non-win9x version of error reporting.,[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_692.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_692.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_692.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1686.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1686.cpp,1261,1266,1286,1271,"_snprintf(cp->ErrorMessage, CMPE_PIPE_BUFFER_SIZE,
                ""Process execution failed with error 0x%X.  ""
                ""FormatMessage failed with error 0x%X."",
                original, GetLastError());","_snprintf(cp->ErrorMessage, CMPE_PIPE_BUFFER_SIZE,
                ""Process execution failed with error 0x%X.  ""
                ""FormatMessage failed with error 0x%X"",
                original, GetLastError());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1398.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1398.cpp,"{
      /* FormatMessage failed.  Use a default message.  */
      _snprintf(cp->ErrorMessage, CMPE_PIPE_BUFFER_SIZE,
                ""Process execution failed with error 0x%X.  ""
                ""FormatMessage failed with error 0x%X."",
                original, GetLastError());
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1398.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1398.cpp,36,[],"[""DWORD"", ""null"", "">"", ""!""]"
8d22e9f70a1653fc6620cc8b5389d1036ec27596,ENH: On windows and apple handle lowercase/upercase file name problem,[],Source/cmGlob.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_696.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_696.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_696.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1691.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1691.cpp,51,52,53,56,,"sprintf(buffer, ""%c"", tolower(ch));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1399.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1399.cpp,"{
    sprintf(buffer, ""%c"", ch);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1399.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1399.cpp,11,"[""char *"", ""string"", ""int""]","[""char"", ""int"", ""<="", ""int"", ""char"", ""<="", ""&&"", ""char"", ""int"", ""<="", ""int"", ""char"", ""<="", ""&&"", ""char"", ""int"", ""<="", ""int"", ""char"", ""<="", ""&&"", ""||"", ""||"", ""!"", ""!""]"
36880845b66fbe9062fb9e72b703a14dfb2c2036,ERR: Using strncpy instead of snprintf for portability.,[],Source/kwsys/ProcessUNIX.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_697.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_697.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_697.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1692.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1692.cpp,526,526,528,528,"snprintf(cp->ErrorMessage, KWSYSPE_PIPE_BUFFER_SIZE,
               ""%s"", strerror(errno));","strncpy(cp->ErrorMessage, strerror(errno), KWSYSPE_PIPE_BUFFER_SIZE);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1400.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1400.cpp,"{
      /* Select returned an error.  Leave the error description in the
         pipe buffer.  */
      snprintf(cp->ErrorMessage, KWSYSPE_PIPE_BUFFER_SIZE,
               ""%s"", strerror(errno));
      
      /* Kill the child now.  */
      kwsysProcess_Kill(cp);
      cp->Killed = 0;
      cp->ChildError = 1;
      cp->PipesLeft = 0;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1400.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1400.cpp,145,"[""member"", ""macro"", ""string"", ""strerror_ret""]","[""select_ret"", ""null"", ""<""]"
36880845b66fbe9062fb9e72b703a14dfb2c2036,ERR: Using strncpy instead of snprintf for portability.,[],Source/kwsys/ProcessUNIX.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_697.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_697.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_697.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1693.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1693.cpp,730,729,732,731,"snprintf(cp->ErrorMessage, KWSYSPE_PIPE_BUFFER_SIZE, ""%s"", strerror(errno));","strncpy(cp->ErrorMessage, strerror(errno), KWSYSPE_PIPE_BUFFER_SIZE);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1401.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1401.cpp,"{
    snprintf(cp->ErrorMessage, KWSYSPE_PIPE_BUFFER_SIZE, ""%s"", strerror(errno));
    cp->State = kwsysProcess_State_Error;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1401.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1401.cpp,7,"[""member"", ""macro"", ""string"", ""strerror_ret""]","[""int""]"
36880845b66fbe9062fb9e72b703a14dfb2c2036,ERR: Using strncpy instead of snprintf for portability.,[],Source/kwsys/ProcessUNIX.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_697.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_697.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_697.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1694.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1694.cpp,887,886,889,888,"snprintf(buffer, KWSYSPE_PIPE_BUFFER_SIZE, ""%s"", strerror(errno));","strncpy(buffer, strerror(errno), KWSYSPE_PIPE_BUFFER_SIZE);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1402.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1402.cpp,"{
  /* Construct the error message.  */
  char buffer[KWSYSPE_PIPE_BUFFER_SIZE];
  snprintf(buffer, KWSYSPE_PIPE_BUFFER_SIZE, ""%s"", strerror(errno));
  
  /* Report the error to the parent through the special pipe.  */
  write(cp->PipeWriteEnds[KWSYSPE_PIPE_ERROR], buffer, strlen(buffer));
  
  /* Terminate without cleanup.  */
  _exit(1);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1402.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 5, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1402.cpp,4,"[""char *"", ""macro"", ""string"", ""strerror_ret""]",[]
179abe7ffeb125ef4bfa7c852dfad03544d66194,ENH: Using GetTempPath instead of TEMP environment variable to get a location to write the Win9x forwarding executable.,[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_699.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_699.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_699.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1697.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1697.cpp,274,268,276,270,"f(win9x, ""%s/%s"", tempDir, fwdName);","f(win9x, ""%s%s"", tempDir, fwdName);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1403.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1403.cpp,"{
      /* Make sure there is no trailing slash.  */
      size_t tdlen = strlen(tempDir);
      if(tempDir[tdlen-1] == '/' || tempDir[tdlen-1] == '\\')
        {
        tempDir[tdlen-1] = 0;
        --tdlen;
        }
      
      /* Allocate a buffer to hold the forwarding executable path.  */
      win9x = (char*)malloc(tdlen + strlen(fwdName) + 2);
      if(!win9x)
        {
        kwsysProcess_Delete(cp);
        return 0;
        }
      
      /* Construct the full path to the forwarding executable.  */
      sprintf(win9x, ""%s/%s"", tempDir, fwdName);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1403.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 27, 0, 0, 1, 1, 0, 0, 1, 9, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 2, 0, 0, 5, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1403.cpp,65,"[""malloc_ret"", ""string"", ""char *"", ""char *""]","[""malloc_ret"", ""!"", ""!""]"
ef76ed76f8a31f706ee675160e5c57c34b608516,ENH: Added DLL support.,[],Source/kwsys/EncodeExecutable.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_700.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_700.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_700.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1699.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1699.cpp,74,75,76,77,"fprintf(ofp, ""extern int %sEncodedWriteArray%s(const char* fname)\n"",
          argv[3], argv[4]);","fprintf(ofp, ""extern %s_EXPORT int %sEncodedWriteArray%s(const char* fname)\n"",
          argv[3], argv[3], argv[4]);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1405.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1405.cpp,"{
  FILE* ifp;
  FILE* ofp;
  int i;
  int n;
  int count = 0;
  unsigned char buffer[1024];
  
  /* Check arguments.  */
  if(argc != 5)
    {
    fprintf(stderr, ""Usage: %s <input> <output> <kwsys-name> <array>\n"",
            argv[0]);
    return 1;
    }
  
  /* Open the input file.  */
  ifp = fopen(argv[1], ""rb"");
  if(!ifp)
    {
    fprintf(stderr, ""Cannot open input file: \""%s\""\n"", argv[1]);
    return 2;
    }
  ofp = fopen(argv[2], ""w"");
  if(!ofp)
    {
    fprintf(stderr, ""Cannot open output file: \""%s\""\n"", argv[2]);
    return 2;
    }
  
  /* Prepend header comment.  */
  fprintf(ofp, ""/*\n * DO NOT EDIT\n * This file is generated by:\n"");
  fprintf(ofp, "" * %s\n */\n\n"", argv[0]);
  fprintf(ofp, ""#include <stdio.h>\n\n"");
  
  /* Split file up in 1024-byte chunks.  */
  while((n = fread(buffer, 1, 1024, ifp)) > 0)
    {
    fprintf(ofp, ""static unsigned char kwsysEncodedArray%s_%d[%d] = {\n"", 
            argv[4], count++, n);
    for(i=0; i < n-1; ++i)
      {
      fprintf(ofp, ""0x%02X"", buffer[i]);
      if(i%10 == 9)
        {
        fprintf(ofp, "",\n"");
        }
      else
        {
        fprintf(ofp, "", "");
        }
      }
    fprintf(ofp, ""0x%02X};\n\n"", buffer[n-1]);
    }
  fclose(ifp);
  
  /* Provide a function to write the data to a file.  */
  fprintf(ofp, ""extern int %sEncodedWriteArray%s(const char* fname)\n"",
          argv[3], argv[4]);
  fprintf(ofp, ""{\n"");
  fprintf(ofp, ""  FILE* ofp = fopen(fname, \""wb\"");\n"");
  fprintf(ofp, ""  if(!ofp) { return 0; }\n"");
  for(i=0; i < count; ++i)
    {
    fprintf(ofp, ""  if(fwrite(kwsysEncodedArray%s_%d, 1,\n""
                 ""            sizeof(kwsysEncodedArray%s_%d), ofp) !=\n""
                 ""       sizeof(kwsysEncodedArray%s_%d))\n"",
            argv[4], i, argv[4], i, argv[4], i);
    fprintf(ofp, ""    {\n"");
    fprintf(ofp, ""    fclose(ofp);\n"");
    fprintf(ofp, ""    _unlink(fname);\n"");
    fprintf(ofp, ""    return 0;\n"");
    fprintf(ofp, ""    }\n"");
    }
  fprintf(ofp, ""  fclose(ofp);\n"");
  fprintf(ofp, ""  return 1;\n"");
  fprintf(ofp, ""}\n"");
  fclose(ofp);
  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1405.cpp,"[4, 1, 2, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 0, 121, 0, 0, 6, 6, 0, 0, 3, 56, 0, 0, 0, 0, 2, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 15, 0, 7, 4, 1, 0, 29, 0, 0, 28, 0, 75, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1405.cpp,58,"[""fopen_ret"", ""string"", ""member"", ""member""]","[""fopen_ret"", ""!"", ""!""]"
ef5214c6c52d81df38923feefd147dccb18200be,ERR: Using GetCurrentProcessId instead of _getpid so we don't need to include the system process.h header.  Also creating pipe threads with 1K stacks to save memory.,[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_702.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_702.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_702.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1701.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1701.cpp,234,233,236,235,"sprintf(fwdName, ""cmw9xfwd_%u_%p.exe"", _getpid(), cp);","sprintf(fwdName, ""cmw9xfwd_%u_%p.exe"", GetCurrentProcessId(), cp);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1406.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1406.cpp,"{
    /* This is Win9x.  We need the console forwarding executable to
       work-around a Windows 9x bug.  */
    char fwdName[_MAX_FNAME+1] = """";
    char tempDir[_MAX_PATH+1] = """";
    
    /* We will try putting the executable in the system temp
       directory.  */
    DWORD length = GetEnvironmentVariable(""TEMP"", tempDir, _MAX_PATH);
    
    /* Construct the executable name from the process id and kwsysProcess
       instance.  This should be unique.  */
    sprintf(fwdName, ""cmw9xfwd_%u_%p.exe"", _getpid(), cp);
    
    /* If the environment variable ""TEMP"" gave us a directory, use it.  */
    if(length > 0 && length <= _MAX_PATH)
      {
      /* Make sure there is no trailing slash.  */
      size_t tdlen = strlen(tempDir);
      if(tempDir[tdlen-1] == '/' || tempDir[tdlen-1] == '\\')
        {
        tempDir[tdlen-1] = 0;
        --tdlen;
        }
      
      /* Allocate a buffer to hold the forwarding executable path.  */
      win9x = (char*)malloc(tdlen + strlen(fwdName) + 2);
      if(!win9x)
        {
        kwsysProcess_Delete(cp);
        return 0;
        }
      
      /* Construct the full path to the forwarding executable.  */
      sprintf(win9x, ""%s/%s"", tempDir, fwdName);
      }
    
    /* If we found a place to put the forwarding executable, try to
       write it. */
    if(win9x)
      {
      if(!kwsysEncodedWriteArrayProcessFwd9x(win9x))
        {
        /* Failed to create forwarding executable.  Give up.  */
        free(win9x);
        kwsysProcess_Delete(cp);
        return 0;
        }
      }
    else
      {
      /* Failed to find a place to put forwarding executable.  */
      kwsysProcess_Delete(cp);
      return 0;
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1406.cpp,"[5, 0, 0, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0, 0, 56, 0, 0, 4, 4, 0, 0, 4, 18, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 5, 5, 1, 0, 12, 0, 0, 9, 0, 19, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1406.cpp,38,"[""char *"", ""constant"", ""_getpid_ret"", ""malloc_ret""]","[""member"", ""macro"", ""==""]"
7f48313225537a7bcc92c0f1c73754bdc50a2ca4,"Remove nan and inf, use iostreams to set precision, fix file name, and remove bogus files",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_709.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_709.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_709.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1710.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1710.cpp,1428,1437,1439,-1,"sprintf(cmbuff, ""%.2f"", cmet);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1407.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1407.cpp,"{
    if ( ccount == 100 )
      {
      local_end_time = ::CurrentTime();
      cfileoutput << ""\t<EndDateTime>"" << local_end_time << ""</EndDateTime>\n""
        << ""</CoverageLog>\n""
        << ""</Site>"" << std::endl;
      cfileoutput.close();
      std::cout << ""Close file: "" << cfileoutputname << std::endl;
      ccount = 0;
      }
    if ( ccount == 0 )
      {
      sprintf(cfileoutputname, ""CoverageLog-%d.xml"", cfileoutputcount++);
      std::cout << ""Open file: "" << cfileoutputname << std::endl;
      if (!this->OpenOutputFile(m_CurrentTag, cfileoutputname, cfileoutput))
        {
        std::cout << ""Cannot open log file: "" << cfileoutputname << std::endl;
        return 1;
        }
      local_start_time = ::CurrentTime();
      cfileoutput << ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n""
        << ""<Site BuildName=\"""" << m_DartConfiguration[""BuildName""]
        << ""\"" BuildStamp=\"""" << m_CurrentTag << ""-""
        << this->GetTestModelString() << ""\"" Site=\""""
        << m_DartConfiguration[""Site""] << ""\"">\n""
        << ""<CoverageLog>\n""
        << ""\t<StartDateTime>"" << local_start_time << ""</StartDateTime>"" << std::endl;
      }

    //std::cerr << ""Final process of Source file: "" << cit->first << std::endl;
    cmCTest::cmCTestCoverage &cov = cit->second;


    std::ifstream ifile(cov.m_AbsolutePath.c_str());
    if ( !ifile )
      {
      std::cerr << ""Cannot open file: "" << cov.m_FullPath.c_str() << std::endl;
      }
    ifile.seekg (0, std::ios::end);
    int length = ifile.tellg();
    ifile.seekg (0, std::ios::beg);
    char *buffer = new char [ length + 1 ];
    ifile.read(buffer, length);
    buffer [length] = 0;
    //std::cout << ""Read: "" << buffer << std::endl;
    std::vector<cmStdString> lines;
    cmSystemTools::Split(buffer, lines);
    delete [] buffer;
    cfileoutput << ""\t<File Name=\"""" << cit->first << ""\"" FullPath=\""""
      << cov.m_FullPath << std::endl << ""\"">\n""
      << ""\t\t<Report>"" << std::endl;
    for ( cc = 0; cc < lines.size(); cc ++ )
      {
      cfileoutput << ""\t\t<Line Number=\"""" 
        << static_cast<int>(cc) << ""\"" Count=\""""
        << cov.m_Lines[cc] << ""\"">""
        << cmCTest::MakeXMLSafe(lines[cc]) << ""</Line>"" << std::endl;
      }
    cfileoutput << ""\t\t</Report>\n""
      << ""\t</File>"" << std::endl;


    total_tested += cov.m_Tested;
    total_untested += cov.m_UnTested;
    float cper = 0;
    float cmet = 0;
    if ( total_tested + total_untested > 0 )
      {
      cper = (100 * static_cast<float>(cov.m_Tested)/
        static_cast<float>(cov.m_Tested + cov.m_UnTested));
      cmet = ( static_cast<float>(cov.m_Tested + 10) /
        static_cast<float>(cov.m_Tested + cov.m_UnTested + 10));
      }
    char cmbuff[100];
    char cpbuff[100];
    sprintf(cmbuff, ""%.2f"", cmet);
    sprintf(cpbuff, ""%.2f"", cper);

    log << ""\t<File Name=\"""" << cit->first << ""\"" FullPath=\"""" << cov.m_FullPath
      << ""\"" Covered=\"""" << (cmet>0?""true"":""false"") << ""\"">\n""
      << ""\t\t<LOCTested>"" << cov.m_Tested << ""</LOCTested>\n""
      << ""\t\t<LOCUnTested>"" << cov.m_UnTested << ""</LOCUnTested>\n""
      << ""\t\t<PercentCoverage>"" << cpbuff << ""</PercentCoverage>\n""
      << ""\t\t<CoverageMetric>"" << cmbuff << ""</CoverageMetric>\n""
      << ""\t</File>"" << std::endl;
    ccount ++;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1407.cpp,"[5, 0, 1, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 239, 0, 0, 9, 9, 0, 0, 6, 65, 0, 0, 0, 0, 2, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 1, 86, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 9, 0, 7, 6, 1, 0, 29, 0, 0, 28, 0, 33, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1407.cpp,356,"[""char *"", ""constant"", ""float""]","[""this -> OpenOutputFile_ret""]"
7f48313225537a7bcc92c0f1c73754bdc50a2ca4,"Remove nan and inf, use iostreams to set precision, fix file name, and remove bogus files",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_709.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_709.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_709.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1710.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1710.cpp,1428,1437,1440,1454,"sprintf(cpbuff, ""%.2f"", cper);","log << FIXNUM(cper) << ""</PercentCoverage>\n""
      << ""\t\t<CoverageMetric>"";;",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1408.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1408.cpp,"{
    if ( ccount == 100 )
      {
      local_end_time = ::CurrentTime();
      cfileoutput << ""\t<EndDateTime>"" << local_end_time << ""</EndDateTime>\n""
        << ""</CoverageLog>\n""
        << ""</Site>"" << std::endl;
      cfileoutput.close();
      std::cout << ""Close file: "" << cfileoutputname << std::endl;
      ccount = 0;
      }
    if ( ccount == 0 )
      {
      sprintf(cfileoutputname, ""CoverageLog-%d.xml"", cfileoutputcount++);
      std::cout << ""Open file: "" << cfileoutputname << std::endl;
      if (!this->OpenOutputFile(m_CurrentTag, cfileoutputname, cfileoutput))
        {
        std::cout << ""Cannot open log file: "" << cfileoutputname << std::endl;
        return 1;
        }
      local_start_time = ::CurrentTime();
      cfileoutput << ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n""
        << ""<Site BuildName=\"""" << m_DartConfiguration[""BuildName""]
        << ""\"" BuildStamp=\"""" << m_CurrentTag << ""-""
        << this->GetTestModelString() << ""\"" Site=\""""
        << m_DartConfiguration[""Site""] << ""\"">\n""
        << ""<CoverageLog>\n""
        << ""\t<StartDateTime>"" << local_start_time << ""</StartDateTime>"" << std::endl;
      }

    //std::cerr << ""Final process of Source file: "" << cit->first << std::endl;
    cmCTest::cmCTestCoverage &cov = cit->second;


    std::ifstream ifile(cov.m_AbsolutePath.c_str());
    if ( !ifile )
      {
      std::cerr << ""Cannot open file: "" << cov.m_FullPath.c_str() << std::endl;
      }
    ifile.seekg (0, std::ios::end);
    int length = ifile.tellg();
    ifile.seekg (0, std::ios::beg);
    char *buffer = new char [ length + 1 ];
    ifile.read(buffer, length);
    buffer [length] = 0;
    //std::cout << ""Read: "" << buffer << std::endl;
    std::vector<cmStdString> lines;
    cmSystemTools::Split(buffer, lines);
    delete [] buffer;
    cfileoutput << ""\t<File Name=\"""" << cit->first << ""\"" FullPath=\""""
      << cov.m_FullPath << std::endl << ""\"">\n""
      << ""\t\t<Report>"" << std::endl;
    for ( cc = 0; cc < lines.size(); cc ++ )
      {
      cfileoutput << ""\t\t<Line Number=\"""" 
        << static_cast<int>(cc) << ""\"" Count=\""""
        << cov.m_Lines[cc] << ""\"">""
        << cmCTest::MakeXMLSafe(lines[cc]) << ""</Line>"" << std::endl;
      }
    cfileoutput << ""\t\t</Report>\n""
      << ""\t</File>"" << std::endl;


    total_tested += cov.m_Tested;
    total_untested += cov.m_UnTested;
    float cper = 0;
    float cmet = 0;
    if ( total_tested + total_untested > 0 )
      {
      cper = (100 * static_cast<float>(cov.m_Tested)/
        static_cast<float>(cov.m_Tested + cov.m_UnTested));
      cmet = ( static_cast<float>(cov.m_Tested + 10) /
        static_cast<float>(cov.m_Tested + cov.m_UnTested + 10));
      }
    char cmbuff[100];
    char cpbuff[100];
    sprintf(cmbuff, ""%.2f"", cmet);
    sprintf(cpbuff, ""%.2f"", cper);

    log << ""\t<File Name=\"""" << cit->first << ""\"" FullPath=\"""" << cov.m_FullPath
      << ""\"" Covered=\"""" << (cmet>0?""true"":""false"") << ""\"">\n""
      << ""\t\t<LOCTested>"" << cov.m_Tested << ""</LOCTested>\n""
      << ""\t\t<LOCUnTested>"" << cov.m_UnTested << ""</LOCUnTested>\n""
      << ""\t\t<PercentCoverage>"" << cpbuff << ""</PercentCoverage>\n""
      << ""\t\t<CoverageMetric>"" << cmbuff << ""</CoverageMetric>\n""
      << ""\t</File>"" << std::endl;
    ccount ++;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1408.cpp,"[5, 0, 1, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 239, 0, 0, 9, 9, 0, 0, 6, 65, 0, 0, 0, 0, 2, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 1, 86, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 9, 0, 7, 6, 1, 0, 29, 0, 0, 28, 0, 33, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1408.cpp,357,"[""char *"", ""constant"", ""float""]","[""this -> OpenOutputFile_ret""]"
7f48313225537a7bcc92c0f1c73754bdc50a2ca4,"Remove nan and inf, use iostreams to set precision, fix file name, and remove bogus files",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_709.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_709.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_709.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1711.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1711.cpp,1468,1479,1471,-1,"sprintf(buffer, ""%.2f"", percent_coverage);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1409.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1409.cpp,"{
  std::cout << ""Performing coverage"" << std::endl;
  std::vector<std::string> files;
  std::vector<std::string> cfiles;
  std::vector<std::string> cdirs;
  bool done = false;
  std::string::size_type cc;
  std::string glob;
  std::map<std::string, std::string> allsourcefiles;
  std::map<std::string, std::string> allbinaryfiles;

  std::string start_time = ::CurrentTime();

  // Find all source files.
  std::string sourceDirectory = m_DartConfiguration[""SourceDirectory""];
  if ( sourceDirectory.size() == 0 )
    {
    std::cerr << ""Cannot find SourceDirectory  key in the DartConfiguration.tcl"" << std::endl;
    return 1;
    }
  cdirs.push_back(sourceDirectory);
  while ( !done ) 
    {
    if ( cdirs.size() <= 0 )
      {
      break;
      }
    glob = cdirs[cdirs.size()-1] + ""/*"";
    //std::cout << ""Glob: "" << glob << std::endl;
    cdirs.pop_back();
    if ( cmSystemTools::SimpleGlob(glob, cfiles, 1) )
      {
      for ( cc = 0; cc < cfiles.size(); cc ++ )
        {
        allsourcefiles[cmSystemTools::GetFilenameName(cfiles[cc])] = cfiles[cc];
        }
      }
    if ( cmSystemTools::SimpleGlob(glob, cfiles, -1) )
      {
      for ( cc = 0; cc < cfiles.size(); cc ++ )
        {
        if ( cfiles[cc] != ""."" && cfiles[cc] != "".."" )
          {
          cdirs.push_back(cfiles[cc]);
          }
        }
      }
    }

  // find all binary files
  cdirs.push_back(cmSystemTools::GetCurrentWorkingDirectory());
  while ( !done ) 
    {
    if ( cdirs.size() <= 0 )
      {
      break;
      }
    glob = cdirs[cdirs.size()-1] + ""/*"";
    //std::cout << ""Glob: "" << glob << std::endl;
    cdirs.pop_back();
    if ( cmSystemTools::SimpleGlob(glob, cfiles, 1) )
      {
      for ( cc = 0; cc < cfiles.size(); cc ++ )
        {
        allbinaryfiles[cmSystemTools::GetFilenameName(cfiles[cc])] = cfiles[cc];
        }
      }
    if ( cmSystemTools::SimpleGlob(glob, cfiles, -1) )
      {
      for ( cc = 0; cc < cfiles.size(); cc ++ )
        {
        if ( cfiles[cc] != ""."" && cfiles[cc] != "".."" )
          {
          cdirs.push_back(cfiles[cc]);
          }
        }
      }
    }

  std::map<std::string, std::string>::iterator sit;
  for ( sit = allbinaryfiles.begin(); sit != allbinaryfiles.end(); sit ++ )
    {
    const std::string& fname = sit->second;
    //std::cout << ""File: "" << fname << std::endl;
    if ( strcmp(fname.substr(fname.size()-3, 3).c_str(), "".da"") == 0 )
      {
      files.push_back(fname);
      }
    }
  
  if ( files.size() == 0 )
    {
    std::cout << ""Cannot find any coverage information files (.da)"" << std::endl;
    return 1;
    }

  std::ofstream log; 
  if (!this->OpenOutputFile(""Temporary"", ""Coverage.log"", log))
    {
    std::cout << ""Cannot open log file"" << std::endl;
    return 1;
    }
  log.close();
  if (!this->OpenOutputFile(m_CurrentTag, ""Coverage.xml"", log))
    {
    std::cout << ""Cannot open log file"" << std::endl;
    return 1;
    }

  std::string opath = m_ToplevelPath + ""/Testing/Temporary/Coverage"";
  cmSystemTools::MakeDirectory(opath.c_str());
  
  for ( cc = 0; cc < files.size(); cc ++ )
    {
    std::string command = ""gcov -l \"""" + files[cc] + ""\"""";
    std::string output;
    int retVal = 0;
    //std::cout << ""Run gcov on "" << files[cc] << std::flush;
    //std::cout << ""   --- Run ["" << command << ""]"" << std::endl;
    bool res = true;
    if ( !m_ShowOnly )
      {
      res = cmSystemTools::RunCommand(command.c_str(), output, 
                                      retVal, opath.c_str(),
                                      m_Verbose);
      }
    if ( res && retVal == 0 )
      {
      //std::cout << "" - done"" << std::endl;
      }
    else
      {
      //std::cout << "" - fail"" << std::endl;
      }
    }
  
  files.clear();
  glob = opath + ""/*"";
  if ( !cmSystemTools::SimpleGlob(glob, cfiles, 1) )
    {
    std::cout << ""Cannot found any coverage files"" << std::endl;
    return 1;
    }
  std::map<std::string, std::vector<std::string> > sourcefiles;
  for ( cc = 0; cc < cfiles.size(); cc ++ )
    {
    std::string& fname = cfiles[cc];
    //std::cout << ""File: "" << fname << std::endl;
    if ( strcmp(fname.substr(fname.size()-5, 5).c_str(), "".gcov"") == 0 )
      {
      files.push_back(fname);
      std::string::size_type pos = fname.find("".da."");
      if ( pos != fname.npos )
        {
        pos += 4;
        std::string::size_type epos = fname.size() - pos - strlen("".gcov"");
        std::string nf = fname.substr(pos, epos);
        //std::cout << ""Substring: "" << nf << std::endl;
        if ( allsourcefiles.find(nf) != allsourcefiles.end() || 
             allbinaryfiles.find(nf) != allbinaryfiles.end() )
          {
          std::vector<std::string> &cvec = sourcefiles[nf];
          cvec.push_back(fname);
          }
        }
      }
    }
  for ( cc = 0; cc < files.size(); cc ++ )
    {
    //std::cout << ""File: "" << files[cc] << std::endl;
    }

  std::map<std::string, std::vector<std::string> >::iterator it;
  cmCTest::tm_CoverageMap coverageresults;

  log << ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n""
      << ""<Site BuildName=\"""" << m_DartConfiguration[""BuildName""]
      << ""\"" BuildStamp=\"""" << m_CurrentTag << ""-""
      << this->GetTestModelString() << ""\"" Name=\""""
      << m_DartConfiguration[""Site""] << ""\"">\n""
      << ""<Coverage>\n""
      << ""\t<StartDateTime>"" << start_time << ""</StartDateTime>"" << std::endl;

  int total_tested = 0;
  int total_untested = 0;

  for ( it = sourcefiles.begin(); it != sourcefiles.end(); it ++ )
    {
    //std::cerr << ""Source file: "" << it->first << std::endl;
    std::vector<std::string> &gfiles = it->second;
    for ( cc = 0; cc < gfiles.size(); cc ++ )
      {
      //std::cout << ""\t"" << gfiles[cc] << std::endl;
      std::ifstream ifile(gfiles[cc].c_str());
      if ( !ifile )
        {
        std::cout << ""Cannot open file: "" << gfiles[cc].c_str() << std::endl;
        }

      ifile.seekg (0, std::ios::end);
      int length = ifile.tellg();
      ifile.seekg (0, std::ios::beg);
      char *buffer = new char [ length + 1 ];
      ifile.read(buffer, length);
      buffer [length] = 0;
      //std::cout << ""Read: "" << buffer << std::endl;
      std::vector<cmStdString> lines;
      cmSystemTools::Split(buffer, lines);
      delete [] buffer;
      cmCTest::cmCTestCoverage& cov = coverageresults[it->first];
      std::vector<int>& covlines = cov.m_Lines; 
      if ( cov.m_FullPath == """" )
        {
        covlines.insert(covlines.begin(), lines.size(), -1);
        if ( allsourcefiles.find(it->first) != allsourcefiles.end() )
          {
          cov.m_FullPath = allsourcefiles[it->first];
          }
        else if ( allbinaryfiles.find(it->first) != allbinaryfiles.end() )
          {
          cov.m_FullPath = allbinaryfiles[it->first];
          }
        cov.m_AbsolutePath = cov.m_FullPath;
        std::string src_dir = m_DartConfiguration[""SourceDirectory""];
        if ( src_dir[src_dir.size()-1] != '/' )
          {
          src_dir = src_dir + ""/"";
          }
        std::string::size_type spos = cov.m_FullPath.find(src_dir);
        if ( spos == 0 )
          {
          cov.m_FullPath = std::string(""./"") + cov.m_FullPath.substr(src_dir.size());
          }
        else
          {
          //std::cerr << ""Compare -- "" << cov.m_FullPath << std::endl;
          //std::cerr << ""        -- "" << src_dir << std::endl;
          continue;
          }
        }
      for ( cc = 0; cc < lines.size(); cc ++ )
        {
        std::string& line = lines[cc];
        std::string sub = line.substr(0, strlen(""      ######""));
        int count = atoi(sub.c_str());
        if ( sub.compare(""      ######"") == 0 )
          {
          if ( covlines[cc] == -1 )
            {
            covlines[cc] = 0;
            }
          cov.m_UnTested ++;
          //std::cout << ""Untested - "";
          }
        else if ( count > 0 )
          {
          if ( covlines[cc] == -1 )
            {
            covlines[cc] = 0;
            }
          cov.m_Tested ++;
          covlines[cc] += count;
          //std::cout << ""Tested["" << count << ""] - "";
          }

        //std::cout << line << std::endl;
        }
      }
    }

  //std::cerr << ""Finalizing"" << std::endl;
  cmCTest::tm_CoverageMap::iterator cit;
  int ccount = 0;
  std::ofstream cfileoutput; 
  int cfileoutputcount = 0;
  char cfileoutputname[100];
  std::string local_start_time = ::CurrentTime();
  std::string local_end_time;
  for ( cit = coverageresults.begin(); cit != coverageresults.end(); cit ++ )
    {
    if ( ccount == 100 )
      {
      local_end_time = ::CurrentTime();
      cfileoutput << ""\t<EndDateTime>"" << local_end_time << ""</EndDateTime>\n""
        << ""</CoverageLog>\n""
        << ""</Site>"" << std::endl;
      cfileoutput.close();
      std::cout << ""Close file: "" << cfileoutputname << std::endl;
      ccount = 0;
      }
    if ( ccount == 0 )
      {
      sprintf(cfileoutputname, ""CoverageLog-%d.xml"", cfileoutputcount++);
      std::cout << ""Open file: "" << cfileoutputname << std::endl;
      if (!this->OpenOutputFile(m_CurrentTag, cfileoutputname, cfileoutput))
        {
        std::cout << ""Cannot open log file: "" << cfileoutputname << std::endl;
        return 1;
        }
      local_start_time = ::CurrentTime();
      cfileoutput << ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n""
        << ""<Site BuildName=\"""" << m_DartConfiguration[""BuildName""]
        << ""\"" BuildStamp=\"""" << m_CurrentTag << ""-""
        << this->GetTestModelString() << ""\"" Site=\""""
        << m_DartConfiguration[""Site""] << ""\"">\n""
        << ""<CoverageLog>\n""
        << ""\t<StartDateTime>"" << local_start_time << ""</StartDateTime>"" << std::endl;
      }

    //std::cerr << ""Final process of Source file: "" << cit->first << std::endl;
    cmCTest::cmCTestCoverage &cov = cit->second;


    std::ifstream ifile(cov.m_AbsolutePath.c_str());
    if ( !ifile )
      {
      std::cerr << ""Cannot open file: "" << cov.m_FullPath.c_str() << std::endl;
      }
    ifile.seekg (0, std::ios::end);
    int length = ifile.tellg();
    ifile.seekg (0, std::ios::beg);
    char *buffer = new char [ length + 1 ];
    ifile.read(buffer, length);
    buffer [length] = 0;
    //std::cout << ""Read: "" << buffer << std::endl;
    std::vector<cmStdString> lines;
    cmSystemTools::Split(buffer, lines);
    delete [] buffer;
    cfileoutput << ""\t<File Name=\"""" << cit->first << ""\"" FullPath=\""""
      << cov.m_FullPath << std::endl << ""\"">\n""
      << ""\t\t<Report>"" << std::endl;
    for ( cc = 0; cc < lines.size(); cc ++ )
      {
      cfileoutput << ""\t\t<Line Number=\"""" 
        << static_cast<int>(cc) << ""\"" Count=\""""
        << cov.m_Lines[cc] << ""\"">""
        << cmCTest::MakeXMLSafe(lines[cc]) << ""</Line>"" << std::endl;
      }
    cfileoutput << ""\t\t</Report>\n""
      << ""\t</File>"" << std::endl;


    total_tested += cov.m_Tested;
    total_untested += cov.m_UnTested;
    float cper = 0;
    float cmet = 0;
    if ( total_tested + total_untested > 0 )
      {
      cper = (100 * static_cast<float>(cov.m_Tested)/
        static_cast<float>(cov.m_Tested + cov.m_UnTested));
      cmet = ( static_cast<float>(cov.m_Tested + 10) /
        static_cast<float>(cov.m_Tested + cov.m_UnTested + 10));
      }
    char cmbuff[100];
    char cpbuff[100];
    sprintf(cmbuff, ""%.2f"", cmet);
    sprintf(cpbuff, ""%.2f"", cper);

    log << ""\t<File Name=\"""" << cit->first << ""\"" FullPath=\"""" << cov.m_FullPath
      << ""\"" Covered=\"""" << (cmet>0?""true"":""false"") << ""\"">\n""
      << ""\t\t<LOCTested>"" << cov.m_Tested << ""</LOCTested>\n""
      << ""\t\t<LOCUnTested>"" << cov.m_UnTested << ""</LOCUnTested>\n""
      << ""\t\t<PercentCoverage>"" << cpbuff << ""</PercentCoverage>\n""
      << ""\t\t<CoverageMetric>"" << cmbuff << ""</CoverageMetric>\n""
      << ""\t</File>"" << std::endl;
    ccount ++;
    }
  
  if ( ccount > 0 )
    {
    local_end_time = ::CurrentTime();
    cfileoutput << ""\t<EndDateTime>"" << local_end_time << ""</EndDateTime>\n""
                << ""</CoverageLog>\n""
                << ""</Site>"" << std::endl;
    cfileoutput.close();
    }

  int total_lines = total_tested + total_untested;
  float percent_coverage = 100 * static_cast<float>(total_tested) / 
    static_cast<float>(total_lines);
  if ( total_lines == 0 )
    {
    percent_coverage = 0;
    }

  std::string end_time = ::CurrentTime();
  char buffer[100];
  sprintf(buffer, ""%.2f"", percent_coverage);

  log << ""\t<LOCTested>"" << total_tested << ""</LOCTested>\n""
      << ""\t<LOCUntested>"" << total_untested << ""</LOCUntested>\n""
      << ""\t<LOC>"" << total_lines << ""</LOC>\n""
      << ""\t<PercentCoverage>"" << buffer << ""</PercentCoverage>\n""
      << ""\t<EndDateTime>"" << end_time << ""</EndDateTime>\n""
      << ""</Coverage>\n""
      << ""</Site>"" << std::endl;

  std::cout << ""\tCovered LOC:         "" << total_tested << std::endl
            << ""\tNot covered LOC:     "" << total_untested << std::endl
            << ""\tTotal LOC:           "" << total_lines << std::endl
            << ""\tPercentage Coverage: "" << percent_coverage << ""%"" << std::endl;


  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1409.cpp,"[36, 2, 13, 0, 2, 1, 7, 0, 0, 0, 54, 0, 0, 0, 1, 1082, 0, 0, 60, 60, 0, 0, 49, 191, 0, 0, 0, 0, 10, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 542, 1, 378, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 47, 0, 52, 37, 3, 0, 142, 0, 0, 79, 2, 131, 0, 13, 0, 0, 13, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1409.cpp,388,"[""char *"", ""constant"", ""float""]","[""coverageresults . begin_ret"", ""coverageresults . end_ret"", ""!="", ""!""]"
a956b8c68c37eaa924ce3cfd57db2b7ec410a2b1,Some cov improvements and better esc,[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_710.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_710.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_710.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1712.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1712.cpp,168,168,172,172,"sprintf(buffer, ""&gt;&lt;"");","sprintf(buffer, ""&gt;%d&lt;"", (int)ch);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1410.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1410.cpp,"{
      sprintf(buffer, ""&gt;&lt;"");
      //sprintf(buffer, ""&#x%0x;"", (unsigned int)ch);
      ost << buffer;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1410.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1410.cpp,10,"[""char *"", ""string""]","[""unsigned char"", ""int"", "">"", ""unsigned char"", ""int"", ""<"", ""||"", ""unsigned char"", ""int"", ""!="", ""&&""]"
a956b8c68c37eaa924ce3cfd57db2b7ec410a2b1,Some cov improvements and better esc,[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_710.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_710.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_710.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1713.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1713.cpp,1420,1435,1429,1439,,"sprintf(cmbuff, ""%.2f"", cmet);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1411.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1411.cpp,"{
    if ( ccount == 100 )
      {
      local_end_time = ::CurrentTime();
      cfileoutput << ""\t<EndDateTime>"" << local_end_time << ""</EndDateTime>\n""
        << ""</CoverageLog>\n""
        << ""</Site>"" << std::endl;
      cfileoutput.close();
      std::cout << ""Close file: "" << cfileoutputname << std::endl;
      ccount = 0;
      }
    if ( ccount == 0 )
      {
      sprintf(cfileoutputname, ""CoverageLog-%d.xml"", cfileoutputcount++);
      std::cout << ""Open file: "" << cfileoutputname << std::endl;
      if (!this->OpenOutputFile(m_CurrentTag, cfileoutputname, cfileoutput))
        {
        std::cout << ""Cannot open log file: "" << cfileoutputname << std::endl;
        return 1;
        }
      local_start_time = ::CurrentTime();
      cfileoutput << ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n""
        << ""<Site BuildName=\"""" << m_DartConfiguration[""BuildName""]
        << ""\"" BuildStamp=\"""" << m_CurrentTag << ""-""
        << this->GetTestModelString() << ""\"" Site=\""""
        << m_DartConfiguration[""Site""] << ""\"">\n""
        << ""<CoverageLog>\n""
        << ""\t<StartDateTime>"" << local_start_time << ""</StartDateTime>"" << std::endl;
      }

    //std::cerr << ""Final process of Source file: "" << cit->first << std::endl;
    cmCTest::cmCTestCoverage &cov = cit->second;


    std::ifstream ifile(cov.m_FullPath.c_str());
    ifile.seekg (0, std::ios::end);
    int length = ifile.tellg();
    ifile.seekg (0, std::ios::beg);
    char *buffer = new char [ length + 1 ];
    ifile.read(buffer, length);
    buffer [length] = 0;
    //std::cout << ""Read: "" << buffer << std::endl;
    std::vector<cmStdString> lines;
    cmSystemTools::Split(buffer, lines);
    delete [] buffer;
    cfileoutput << ""\t<File Name=\"""" << cit->first << ""\"" FullPath=\""""
      << cov.m_FullPath << std::endl << ""\"">\n""
      << ""\t\t<Report>"" << std::endl;
    for ( cc = 0; cc < lines.size(); cc ++ )
      {
      cfileoutput << ""\t\t<Line Number=\"""" 
        << static_cast<int>(cc) << ""\"" Count=\""""
        << cov.m_Lines[cc] << ""\"">""
        << cmCTest::MakeXMLSafe(lines[cc]) << ""</Line>"" << std::endl;
      }
    cfileoutput << ""\t\t</Report>\n""
      << ""\t</File>"" << std::endl;


    total_tested += cov.m_Tested;
    total_untested += cov.m_UnTested;
    float cper = 0;
    float cmet = 0;
    if ( total_tested + total_untested > 0 )
      {
      cper = (100 * static_cast<float>(cov.m_Tested)/
        static_cast<float>(cov.m_Tested + cov.m_UnTested));
      cmet = ( static_cast<float>(cov.m_Tested + 10) /
        static_cast<float>(cov.m_Tested + cov.m_UnTested + 10));
      }
    log << ""\t<File Name=\"""" << cit->first << ""\"" FullPath=\"""" << cov.m_FullPath
      << ""\"" Covered=\"""" << (cmet>0?""true"":""false"") << ""\"">\n""
      << ""\t\t<LOCTested>"" << cov.m_Tested << ""</LOCTested>\n""
      << ""\t\t<LOCUnTested>"" << cov.m_UnTested << ""</LOCUnTested>\n""
      << ""\t\t<PercentCoverage>"" << cper << ""</PercentCoverage>\n""
      << ""\t\t<CoverageMetric>"" << cmet << ""</CoverageMetric>\n""
      << ""\t</File>"" << std::endl;
    ccount ++;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1411.cpp,"[4, 0, 1, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 216, 0, 0, 7, 7, 0, 0, 6, 60, 0, 0, 0, 0, 2, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 1, 74, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 6, 5, 1, 0, 26, 0, 0, 25, 0, 27, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1411.cpp,346,[],"[""int"", ""null"", ""=="", ""!""]"
a956b8c68c37eaa924ce3cfd57db2b7ec410a2b1,Some cov improvements and better esc,[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_710.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_710.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_710.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1713.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1713.cpp,1420,1435,1429,1440,,"sprintf(cpbuff, ""%.2f"", cper);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1412.cpp,"{
    if ( ccount == 100 )
      {
      local_end_time = ::CurrentTime();
      cfileoutput << ""\t<EndDateTime>"" << local_end_time << ""</EndDateTime>\n""
        << ""</CoverageLog>\n""
        << ""</Site>"" << std::endl;
      cfileoutput.close();
      std::cout << ""Close file: "" << cfileoutputname << std::endl;
      ccount = 0;
      }
    if ( ccount == 0 )
      {
      sprintf(cfileoutputname, ""CoverageLog-%d.xml"", cfileoutputcount++);
      std::cout << ""Open file: "" << cfileoutputname << std::endl;
      if (!this->OpenOutputFile(m_CurrentTag, cfileoutputname, cfileoutput))
        {
        std::cout << ""Cannot open log file: "" << cfileoutputname << std::endl;
        return 1;
        }
      local_start_time = ::CurrentTime();
      cfileoutput << ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n""
        << ""<Site BuildName=\"""" << m_DartConfiguration[""BuildName""]
        << ""\"" BuildStamp=\"""" << m_CurrentTag << ""-""
        << this->GetTestModelString() << ""\"" Site=\""""
        << m_DartConfiguration[""Site""] << ""\"">\n""
        << ""<CoverageLog>\n""
        << ""\t<StartDateTime>"" << local_start_time << ""</StartDateTime>"" << std::endl;
      }

    //std::cerr << ""Final process of Source file: "" << cit->first << std::endl;
    cmCTest::cmCTestCoverage &cov = cit->second;


    std::ifstream ifile(cov.m_FullPath.c_str());
    ifile.seekg (0, std::ios::end);
    int length = ifile.tellg();
    ifile.seekg (0, std::ios::beg);
    char *buffer = new char [ length + 1 ];
    ifile.read(buffer, length);
    buffer [length] = 0;
    //std::cout << ""Read: "" << buffer << std::endl;
    std::vector<cmStdString> lines;
    cmSystemTools::Split(buffer, lines);
    delete [] buffer;
    cfileoutput << ""\t<File Name=\"""" << cit->first << ""\"" FullPath=\""""
      << cov.m_FullPath << std::endl << ""\"">\n""
      << ""\t\t<Report>"" << std::endl;
    for ( cc = 0; cc < lines.size(); cc ++ )
      {
      cfileoutput << ""\t\t<Line Number=\"""" 
        << static_cast<int>(cc) << ""\"" Count=\""""
        << cov.m_Lines[cc] << ""\"">""
        << cmCTest::MakeXMLSafe(lines[cc]) << ""</Line>"" << std::endl;
      }
    cfileoutput << ""\t\t</Report>\n""
      << ""\t</File>"" << std::endl;


    total_tested += cov.m_Tested;
    total_untested += cov.m_UnTested;
    float cper = 0;
    float cmet = 0;
    if ( total_tested + total_untested > 0 )
      {
      cper = (100 * static_cast<float>(cov.m_Tested)/
        static_cast<float>(cov.m_Tested + cov.m_UnTested));
      cmet = ( static_cast<float>(cov.m_Tested + 10) /
        static_cast<float>(cov.m_Tested + cov.m_UnTested + 10));
      }
    log << ""\t<File Name=\"""" << cit->first << ""\"" FullPath=\"""" << cov.m_FullPath
      << ""\"" Covered=\"""" << (cmet>0?""true"":""false"") << ""\"">\n""
      << ""\t\t<LOCTested>"" << cov.m_Tested << ""</LOCTested>\n""
      << ""\t\t<LOCUnTested>"" << cov.m_UnTested << ""</LOCUnTested>\n""
      << ""\t\t<PercentCoverage>"" << cper << ""</PercentCoverage>\n""
      << ""\t\t<CoverageMetric>"" << cmet << ""</CoverageMetric>\n""
      << ""\t</File>"" << std::endl;
    ccount ++;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1412.cpp,"[4, 0, 1, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 216, 0, 0, 7, 7, 0, 0, 6, 60, 0, 0, 0, 0, 2, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 1, 74, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 6, 5, 1, 0, 26, 0, 0, 25, 0, 27, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1412.cpp,346,[],"[""this -> OpenOutputFile_ret""]"
a956b8c68c37eaa924ce3cfd57db2b7ec410a2b1,Some cov improvements and better esc,[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_710.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_710.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_710.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1714.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1714.cpp,1448,1468,1451,1471,,"sprintf(buffer, ""%.2f"", percent_coverage);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1413.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1413.cpp,"{
  std::cout << ""Performing coverage"" << std::endl;
  std::vector<std::string> files;
  std::vector<std::string> cfiles;
  std::vector<std::string> cdirs;
  bool done = false;
  std::string::size_type cc;
  std::string glob;
  std::map<std::string, std::string> allsourcefiles;
  std::map<std::string, std::string> allbinaryfiles;

  std::string start_time = ::CurrentTime();

  // Find all source files.
  std::string sourceDirectory = m_DartConfiguration[""SourceDirectory""];
  if ( sourceDirectory.size() == 0 )
    {
    std::cerr << ""Cannot find SourceDirectory  key in the DartConfiguration.tcl"" << std::endl;
    return 1;
    }
  cdirs.push_back(sourceDirectory);
  while ( !done ) 
    {
    if ( cdirs.size() <= 0 )
      {
      break;
      }
    glob = cdirs[cdirs.size()-1] + ""/*"";
    //std::cout << ""Glob: "" << glob << std::endl;
    cdirs.pop_back();
    if ( cmSystemTools::SimpleGlob(glob, cfiles, 1) )
      {
      for ( cc = 0; cc < cfiles.size(); cc ++ )
        {
        allsourcefiles[cmSystemTools::GetFilenameName(cfiles[cc])] = cfiles[cc];
        }
      }
    if ( cmSystemTools::SimpleGlob(glob, cfiles, -1) )
      {
      for ( cc = 0; cc < cfiles.size(); cc ++ )
        {
        if ( cfiles[cc] != ""."" && cfiles[cc] != "".."" )
          {
          cdirs.push_back(cfiles[cc]);
          }
        }
      }
    }

  // find all binary files
  cdirs.push_back(cmSystemTools::GetCurrentWorkingDirectory());
  while ( !done ) 
    {
    if ( cdirs.size() <= 0 )
      {
      break;
      }
    glob = cdirs[cdirs.size()-1] + ""/*"";
    //std::cout << ""Glob: "" << glob << std::endl;
    cdirs.pop_back();
    if ( cmSystemTools::SimpleGlob(glob, cfiles, 1) )
      {
      for ( cc = 0; cc < cfiles.size(); cc ++ )
        {
        allbinaryfiles[cmSystemTools::GetFilenameName(cfiles[cc])] = cfiles[cc];
        }
      }
    if ( cmSystemTools::SimpleGlob(glob, cfiles, -1) )
      {
      for ( cc = 0; cc < cfiles.size(); cc ++ )
        {
        if ( cfiles[cc] != ""."" && cfiles[cc] != "".."" )
          {
          cdirs.push_back(cfiles[cc]);
          }
        }
      }
    }

  std::map<std::string, std::string>::iterator sit;
  for ( sit = allbinaryfiles.begin(); sit != allbinaryfiles.end(); sit ++ )
    {
    const std::string& fname = sit->second;
    //std::cout << ""File: "" << fname << std::endl;
    if ( strcmp(fname.substr(fname.size()-3, 3).c_str(), "".da"") == 0 )
      {
      files.push_back(fname);
      }
    }
  
  if ( files.size() == 0 )
    {
    std::cout << ""Cannot find any coverage information files (.da)"" << std::endl;
    return 1;
    }

  std::ofstream log; 
  if (!this->OpenOutputFile(""Temporary"", ""Coverage.log"", log))
    {
    std::cout << ""Cannot open log file"" << std::endl;
    return 1;
    }
  log.close();
  if (!this->OpenOutputFile(m_CurrentTag, ""Coverage.xml"", log))
    {
    std::cout << ""Cannot open log file"" << std::endl;
    return 1;
    }

  std::string opath = m_ToplevelPath + ""/Testing/Temporary/Coverage"";
  cmSystemTools::MakeDirectory(opath.c_str());
  
  for ( cc = 0; cc < files.size(); cc ++ )
    {
    std::string command = ""gcov -l \"""" + files[cc] + ""\"""";
    std::string output;
    int retVal = 0;
    //std::cout << ""Run gcov on "" << files[cc] << std::flush;
    //std::cout << ""   --- Run ["" << command << ""]"" << std::endl;
    bool res = true;
    if ( !m_ShowOnly )
      {
      res = cmSystemTools::RunCommand(command.c_str(), output, 
                                      retVal, opath.c_str(),
                                      m_Verbose);
      }
    if ( res && retVal == 0 )
      {
      //std::cout << "" - done"" << std::endl;
      }
    else
      {
      //std::cout << "" - fail"" << std::endl;
      }
    }
  
  files.clear();
  glob = opath + ""/*"";
  if ( !cmSystemTools::SimpleGlob(glob, cfiles, 1) )
    {
    std::cout << ""Cannot found any coverage files"" << std::endl;
    return 1;
    }
  std::map<std::string, std::vector<std::string> > sourcefiles;
  for ( cc = 0; cc < cfiles.size(); cc ++ )
    {
    std::string& fname = cfiles[cc];
    //std::cout << ""File: "" << fname << std::endl;
    if ( strcmp(fname.substr(fname.size()-5, 5).c_str(), "".gcov"") == 0 )
      {
      files.push_back(fname);
      std::string::size_type pos = fname.find("".da."");
      if ( pos != fname.npos )
        {
        pos += 4;
        std::string::size_type epos = fname.size() - pos - strlen("".gcov"");
        std::string nf = fname.substr(pos, epos);
        //std::cout << ""Substring: "" << nf << std::endl;
        if ( allsourcefiles.find(nf) != allsourcefiles.end() || 
             allbinaryfiles.find(nf) != allbinaryfiles.end() )
          {
          std::vector<std::string> &cvec = sourcefiles[nf];
          cvec.push_back(fname);
          }
        }
      }
    }
  for ( cc = 0; cc < files.size(); cc ++ )
    {
    //std::cout << ""File: "" << files[cc] << std::endl;
    }

  std::map<std::string, std::vector<std::string> >::iterator it;
  cmCTest::tm_CoverageMap coverageresults;

  log << ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n""
      << ""<Site BuildName=\"""" << m_DartConfiguration[""BuildName""]
      << ""\"" BuildStamp=\"""" << m_CurrentTag << ""-""
      << this->GetTestModelString() << ""\"" Name=\""""
      << m_DartConfiguration[""Site""] << ""\"">\n""
      << ""<Coverage>\n""
      << ""\t<StartDateTime>"" << start_time << ""</StartDateTime>"" << std::endl;

  int total_tested = 0;
  int total_untested = 0;

  for ( it = sourcefiles.begin(); it != sourcefiles.end(); it ++ )
    {
    //std::cerr << ""Source file: "" << it->first << std::endl;
    std::vector<std::string> &gfiles = it->second;
    for ( cc = 0; cc < gfiles.size(); cc ++ )
      {
      //std::cout << ""\t"" << gfiles[cc] << std::endl;
      std::ifstream ifile(gfiles[cc].c_str());
      ifile.seekg (0, std::ios::end);
      int length = ifile.tellg();
      ifile.seekg (0, std::ios::beg);
      char *buffer = new char [ length + 1 ];
      ifile.read(buffer, length);
      buffer [length] = 0;
      //std::cout << ""Read: "" << buffer << std::endl;
      std::vector<cmStdString> lines;
      cmSystemTools::Split(buffer, lines);
      delete [] buffer;
      cmCTest::cmCTestCoverage& cov = coverageresults[it->first];
      std::vector<int>& covlines = cov.m_Lines; 
      if ( cov.m_FullPath == """" )
        {
        covlines.insert(covlines.begin(), lines.size(), -1);
        if ( allsourcefiles.find(it->first) != allsourcefiles.end() )
          {
          cov.m_FullPath = allsourcefiles[it->first];
          }
        else if ( allbinaryfiles.find(it->first) != allbinaryfiles.end() )
          {
          cov.m_FullPath = allbinaryfiles[it->first];
          }
        std::string src_dir = m_DartConfiguration[""SourceDirectory""];
        std::string::size_type spos = cov.m_FullPath.find(src_dir);
        if ( spos == 0 )
          {
          cov.m_FullPath = std::string(""."") + cov.m_FullPath.substr(src_dir.size());
          }
        else
          {
          std::cerr << ""Compare -- "" << cov.m_FullPath << std::endl;
          std::cerr << ""        -- "" << src_dir << std::endl;
          }
        }
      for ( cc = 0; cc < lines.size(); cc ++ )
        {
        std::string& line = lines[cc];
        std::string sub = line.substr(0, strlen(""      ######""));
        int count = atoi(sub.c_str());
        if ( sub.compare(""      ######"") == 0 )
          {
          if ( covlines[cc] == -1 )
            {
            covlines[cc] = 0;
            }
          cov.m_UnTested ++;
          //std::cout << ""Untested - "";
          }
        else if ( count > 0 )
          {
          if ( covlines[cc] == -1 )
            {
            covlines[cc] = 0;
            }
          cov.m_Tested ++;
          covlines[cc] += count;
          //std::cout << ""Tested["" << count << ""] - "";
          }

        //std::cout << line << std::endl;
        }
      }
    }

  //std::cerr << ""Finalizing"" << std::endl;
  cmCTest::tm_CoverageMap::iterator cit;
  int ccount = 0;
  std::ofstream cfileoutput; 
  int cfileoutputcount = 0;
  char cfileoutputname[100];
  std::string local_start_time = ::CurrentTime();
  std::string local_end_time;
  for ( cit = coverageresults.begin(); cit != coverageresults.end(); cit ++ )
    {
    if ( ccount == 100 )
      {
      local_end_time = ::CurrentTime();
      cfileoutput << ""\t<EndDateTime>"" << local_end_time << ""</EndDateTime>\n""
        << ""</CoverageLog>\n""
        << ""</Site>"" << std::endl;
      cfileoutput.close();
      std::cout << ""Close file: "" << cfileoutputname << std::endl;
      ccount = 0;
      }
    if ( ccount == 0 )
      {
      sprintf(cfileoutputname, ""CoverageLog-%d.xml"", cfileoutputcount++);
      std::cout << ""Open file: "" << cfileoutputname << std::endl;
      if (!this->OpenOutputFile(m_CurrentTag, cfileoutputname, cfileoutput))
        {
        std::cout << ""Cannot open log file: "" << cfileoutputname << std::endl;
        return 1;
        }
      local_start_time = ::CurrentTime();
      cfileoutput << ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n""
        << ""<Site BuildName=\"""" << m_DartConfiguration[""BuildName""]
        << ""\"" BuildStamp=\"""" << m_CurrentTag << ""-""
        << this->GetTestModelString() << ""\"" Site=\""""
        << m_DartConfiguration[""Site""] << ""\"">\n""
        << ""<CoverageLog>\n""
        << ""\t<StartDateTime>"" << local_start_time << ""</StartDateTime>"" << std::endl;
      }

    //std::cerr << ""Final process of Source file: "" << cit->first << std::endl;
    cmCTest::cmCTestCoverage &cov = cit->second;


    std::ifstream ifile(cov.m_FullPath.c_str());
    ifile.seekg (0, std::ios::end);
    int length = ifile.tellg();
    ifile.seekg (0, std::ios::beg);
    char *buffer = new char [ length + 1 ];
    ifile.read(buffer, length);
    buffer [length] = 0;
    //std::cout << ""Read: "" << buffer << std::endl;
    std::vector<cmStdString> lines;
    cmSystemTools::Split(buffer, lines);
    delete [] buffer;
    cfileoutput << ""\t<File Name=\"""" << cit->first << ""\"" FullPath=\""""
      << cov.m_FullPath << std::endl << ""\"">\n""
      << ""\t\t<Report>"" << std::endl;
    for ( cc = 0; cc < lines.size(); cc ++ )
      {
      cfileoutput << ""\t\t<Line Number=\"""" 
        << static_cast<int>(cc) << ""\"" Count=\""""
        << cov.m_Lines[cc] << ""\"">""
        << cmCTest::MakeXMLSafe(lines[cc]) << ""</Line>"" << std::endl;
      }
    cfileoutput << ""\t\t</Report>\n""
      << ""\t</File>"" << std::endl;


    total_tested += cov.m_Tested;
    total_untested += cov.m_UnTested;
    float cper = 0;
    float cmet = 0;
    if ( total_tested + total_untested > 0 )
      {
      cper = (100 * static_cast<float>(cov.m_Tested)/
        static_cast<float>(cov.m_Tested + cov.m_UnTested));
      cmet = ( static_cast<float>(cov.m_Tested + 10) /
        static_cast<float>(cov.m_Tested + cov.m_UnTested + 10));
      }
    log << ""\t<File Name=\"""" << cit->first << ""\"" FullPath=\"""" << cov.m_FullPath
      << ""\"" Covered=\"""" << (cmet>0?""true"":""false"") << ""\"">\n""
      << ""\t\t<LOCTested>"" << cov.m_Tested << ""</LOCTested>\n""
      << ""\t\t<LOCUnTested>"" << cov.m_UnTested << ""</LOCUnTested>\n""
      << ""\t\t<PercentCoverage>"" << cper << ""</PercentCoverage>\n""
      << ""\t\t<CoverageMetric>"" << cmet << ""</CoverageMetric>\n""
      << ""\t</File>"" << std::endl;
    ccount ++;
    }
  
  if ( ccount > 0 )
    {
    local_end_time = ::CurrentTime();
    cfileoutput << ""\t<EndDateTime>"" << local_end_time << ""</EndDateTime>\n""
                << ""</CoverageLog>\n""
                << ""</Site>"" << std::endl;
    cfileoutput.close();
    }

  int total_lines = total_tested + total_untested;
  float percent_coverage = 100 * static_cast<float>(total_tested) / 
    static_cast<float>(total_lines);
  if ( total_lines == 0 )
    {
    percent_coverage = 0;
    }

  std::string end_time = ::CurrentTime();

  log << ""\t<LOCTested>"" << total_tested << ""</LOCTested>\n""
      << ""\t<LOCUntested>"" << total_untested << ""</LOCUntested>\n""
      << ""\t<LOC>"" << total_lines << ""</LOC>\n""
      << ""\t<PercentCoverage>"" << percent_coverage << ""</PercentCoverage>\n""
      << ""\t<EndDateTime>"" << end_time << ""</EndDateTime>\n""
      << ""</Coverage>\n""
      << ""</Site>"" << std::endl;

  std::cout << ""\tCovered LOC:         "" << total_tested << std::endl
            << ""\tNot covered LOC:     "" << total_untested << std::endl
            << ""\tTotal LOC:           "" << total_lines << std::endl
            << ""\tPercentage Coverage: "" << percent_coverage << ""%"" << std::endl;


  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1413.cpp,"[33, 2, 13, 0, 2, 0, 7, 0, 0, 0, 51, 0, 0, 0, 1, 1045, 0, 0, 57, 57, 0, 0, 49, 182, 0, 0, 0, 0, 10, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 530, 1, 356, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 42, 0, 49, 34, 3, 0, 136, 0, 0, 74, 2, 122, 0, 13, 0, 0, 13, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1413.cpp,368,[],"[""coverageresults . begin_ret"", ""coverageresults . end_ret"", ""!="", ""!""]"
394149a03420c2160b4150f9481f82be27ba69a9,"Fix cov. problems, ignore nonascii char. Propagate verbosity",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_711.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_711.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_711.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1715.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1715.cpp,167,167,172,172,"sprintf(buffer, ""&%x"", (int)ch);","sprintf(buffer, ""&gt;&lt;"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1414.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1414.cpp,"{
      sprintf(buffer, ""&%x"", (int)ch);
      ost << buffer;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1414.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1414.cpp,10,"[""char *"", ""string"", ""char""]","[""char"", ""int"", "">""]"
394149a03420c2160b4150f9481f82be27ba69a9,"Fix cov. problems, ignore nonascii char. Propagate verbosity",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_711.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_711.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_711.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1716.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1716.cpp,1307,1320,1309,-1,"sprintf(cfileoutputname, ""CoverageLog-%d.xml"", cfileoutputcount++);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1415.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1415.cpp,"{
  std::cout << ""Performing coverage"" << std::endl;
  std::vector<std::string> files;
  std::vector<std::string> cfiles;
  std::vector<std::string> cdirs;
  bool done = false;
  std::string::size_type cc;
  std::string glob;
  std::map<std::string, std::string> allsourcefiles;
  std::map<std::string, std::string> allbinaryfiles;

  std::string start_time = ::CurrentTime();

  // Find all source files.
  std::string sourceDirectory = m_DartConfiguration[""SourceDirectory""];
  if ( sourceDirectory.size() == 0 )
    {
    std::cerr << ""Cannot find SourceDirectory  key in the DartConfiguration.tcl"" << std::endl;
    return 1;
    }
  cdirs.push_back(sourceDirectory);
  while ( !done ) 
    {
    if ( cdirs.size() <= 0 )
      {
      break;
      }
    glob = cdirs[cdirs.size()-1] + ""/*"";
    //std::cout << ""Glob: "" << glob << std::endl;
    cdirs.pop_back();
    if ( cmSystemTools::SimpleGlob(glob, cfiles, 1) )
      {
      for ( cc = 0; cc < cfiles.size(); cc ++ )
        {
        allsourcefiles[cmSystemTools::GetFilenameName(cfiles[cc])] = cfiles[cc];
        }
      }
    if ( cmSystemTools::SimpleGlob(glob, cfiles, -1) )
      {
      for ( cc = 0; cc < cfiles.size(); cc ++ )
        {
        if ( cfiles[cc] != ""."" && cfiles[cc] != "".."" )
          {
          cdirs.push_back(cfiles[cc]);
          }
        }
      }
    }

  // find all binary files
  cdirs.push_back(cmSystemTools::GetCurrentWorkingDirectory());
  while ( !done ) 
    {
    if ( cdirs.size() <= 0 )
      {
      break;
      }
    glob = cdirs[cdirs.size()-1] + ""/*"";
    //std::cout << ""Glob: "" << glob << std::endl;
    cdirs.pop_back();
    if ( cmSystemTools::SimpleGlob(glob, cfiles, 1) )
      {
      for ( cc = 0; cc < cfiles.size(); cc ++ )
        {
        allbinaryfiles[cmSystemTools::GetFilenameName(cfiles[cc])] = cfiles[cc];
        }
      }
    if ( cmSystemTools::SimpleGlob(glob, cfiles, -1) )
      {
      for ( cc = 0; cc < cfiles.size(); cc ++ )
        {
        if ( cfiles[cc] != ""."" && cfiles[cc] != "".."" )
          {
          cdirs.push_back(cfiles[cc]);
          }
        }
      }
    }

  std::map<std::string, std::string>::iterator sit;
  for ( sit = allbinaryfiles.begin(); sit != allbinaryfiles.end(); sit ++ )
    {
    const std::string& fname = sit->second;
    //std::cout << ""File: "" << fname << std::endl;
    if ( strcmp(fname.substr(fname.size()-3, 3).c_str(), "".da"") == 0 )
      {
      files.push_back(fname);
      }
    }
  
  if ( files.size() == 0 )
    {
    std::cout << ""Cannot find any coverage information files (.da)"" << std::endl;
    return 1;
    }

  std::ofstream log; 
  if (!this->OpenOutputFile(""Coverage"", ""Coverage.log"", log))
    {
    std::cout << ""Cannot open log file"" << std::endl;
    return 1;
    }
  log.close();
  if (!this->OpenOutputFile(m_CurrentTag, ""Coverage.xml"", log))
    {
    std::cout << ""Cannot open log file"" << std::endl;
    return 1;
    }

  std::string opath = m_ToplevelPath + ""/Testing/"" + m_CurrentTag + ""/Coverage"";
  
  for ( cc = 0; cc < files.size(); cc ++ )
    {
    std::string command = ""gcov -l \"""" + files[cc] + ""\"""";
    std::string output;
    int retVal = 0;
    //std::cout << ""Run gcov on "" << files[cc] << std::flush;
    bool res = true;
    if ( !m_ShowOnly )
      {
      res = cmSystemTools::RunCommand(command.c_str(), output, 
                                      retVal, opath.c_str(),
                                      m_Verbose);
      }
    if ( res && retVal == 0 )
      {
      //std::cout << "" - done"" << std::endl;
      }
    else
      {
      //std::cout << "" - fail"" << std::endl;
      }
    }
  
  files.clear();
  glob = opath + ""/*"";
  if ( !cmSystemTools::SimpleGlob(glob, cfiles, 1) )
    {
    std::cout << ""Cannot found any coverage files"" << std::endl;
    return 1;
    }
  std::map<std::string, std::vector<std::string> > sourcefiles;
  for ( cc = 0; cc < cfiles.size(); cc ++ )
    {
    std::string& fname = cfiles[cc];
    //std::cout << ""File: "" << fname << std::endl;
    if ( strcmp(fname.substr(fname.size()-5, 5).c_str(), "".gcov"") == 0 )
      {
      files.push_back(fname);
      std::string::size_type pos = fname.find("".da."");
      if ( pos != fname.npos )
        {
        pos += 4;
        std::string::size_type epos = fname.size() - pos - strlen("".gcov"");
        std::string nf = fname.substr(pos, epos);
        //std::cout << ""Substring: "" << nf << std::endl;
        if ( allsourcefiles.find(nf) != allsourcefiles.end() || 
             allbinaryfiles.find(nf) != allbinaryfiles.end() )
          {
          std::vector<std::string> &cvec = sourcefiles[nf];
          cvec.push_back(fname);
          }
        }
      }
    }
  for ( cc = 0; cc < files.size(); cc ++ )
    {
    //std::cout << ""File: "" << files[cc] << std::endl;
    }

  std::map<std::string, std::vector<std::string> >::iterator it;
  cmCTest::tm_CoverageMap coverageresults;

  log << ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n""
      << ""<Site BuildName=\"""" << m_DartConfiguration[""BuildName""]
      << ""\"" BuildStamp=\"""" << m_CurrentTag << ""-""
      << this->GetTestModelString() << ""\"" Name=\""""
      << m_DartConfiguration[""Site""] << ""\"">\n""
      << ""<Coverage>\n""
      << ""\t<StartDateTime>"" << start_time << ""</StartDateTime>"" << std::endl;

  int total_tested = 0;
  int total_untested = 0;

  for ( it = sourcefiles.begin(); it != sourcefiles.end(); it ++ )
    {
    //std::cerr << ""Source file: "" << it->first << std::endl;
    std::vector<std::string> &gfiles = it->second;
    for ( cc = 0; cc < gfiles.size(); cc ++ )
      {
      //std::cout << ""\t"" << gfiles[cc] << std::endl;
      std::ifstream ifile(gfiles[cc].c_str());
      ifile.seekg (0, std::ios::end);
      int length = ifile.tellg();
      ifile.seekg (0, std::ios::beg);
      char *buffer = new char [ length + 1 ];
      ifile.read(buffer, length);
      buffer [length] = 0;
      //std::cout << ""Read: "" << buffer << std::endl;
      std::vector<cmStdString> lines;
      cmSystemTools::Split(buffer, lines);
      delete [] buffer;
      cmCTest::cmCTestCoverage& cov = coverageresults[it->first];
      std::vector<int>& covlines = cov.m_Lines; 
      if ( cov.m_FullPath == """" )
        {
        covlines.insert(covlines.begin(), lines.size(), -1);
        if ( allsourcefiles.find(it->first) != allsourcefiles.end() )
          {
          cov.m_FullPath = allsourcefiles[it->first];
          }
        else if ( allbinaryfiles.find(it->first) != allbinaryfiles.end() )
          {
          cov.m_FullPath = allbinaryfiles[it->first];
          }
        //std::cerr << ""Full path: "" << cov.m_FullPath << std::endl;
        }
      for ( cc = 0; cc < lines.size(); cc ++ )
        {
        std::string& line = lines[cc];
        std::string sub = line.substr(0, strlen(""      ######""));
        int count = atoi(sub.c_str());
        if ( sub.compare(""      ######"") == 0 )
          {
          if ( covlines[cc] == -1 )
            {
            covlines[cc] = 0;
            }
          cov.m_UnTested ++;
          //std::cout << ""Untested - "";
          }
        else if ( count > 0 )
          {
          if ( covlines[cc] == -1 )
            {
            covlines[cc] = 0;
            }
          cov.m_Tested ++;
          covlines[cc] += count;
          //std::cout << ""Tested["" << count << ""] - "";
          }

        //std::cout << line << std::endl;
        }
      }
    }

  //std::cerr << ""Finalizing"" << std::endl;
  cmCTest::tm_CoverageMap::iterator cit;
  int ccount = 0;
  std::ofstream cfileoutput; 
  int cfileoutputcount = 0;
  char cfileoutputname[100];
  sprintf(cfileoutputname, ""CoverageLog-%d.xml"", cfileoutputcount++);
  if (!this->OpenOutputFile(m_CurrentTag, cfileoutputname, cfileoutput))
    {
    std::cout << ""Cannot open log file"" << std::endl;
    return 1;
    }
  std::string local_start_time = ::CurrentTime();
  std::string local_end_time;
  for ( cit = coverageresults.begin(); cit != coverageresults.end(); cit ++ )
    {
    if ( ccount == 100 )
      {
      local_end_time = ::CurrentTime();
      cfileoutput << ""\t<EndDateTime>"" << local_end_time << ""</EndDateTime>\n""
                  << ""</CoverageLog>\n""
                  << ""</Site>"" << std::endl;
      cfileoutput.close();
      sprintf(cfileoutputname, ""CoverageLog-%d.xml"", cfileoutputcount++);
      if (!this->OpenOutputFile(m_CurrentTag, cfileoutputname, cfileoutput))
        {
        std::cout << ""Cannot open log file"" << std::endl;
        return 1;
        }
      ccount = 0;
      }

    if ( ccount == 0 )
      {
      local_start_time = ::CurrentTime();
      cfileoutput << ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n""
                  << ""<Site BuildName=\"""" << m_DartConfiguration[""BuildName""]
                  << ""\"" BuildStamp=\"""" << m_CurrentTag << ""-""
                  << this->GetTestModelString() << ""\"" Name=\""""
                  << m_DartConfiguration[""Site""] << ""\"">\n""
                  << ""<CoverageLog>\n""
                  << ""\t<StartDateTime>"" << local_start_time << ""</StartDateTime>"" << std::endl;
      }

    //std::cerr << ""Final process of Source file: "" << cit->first << std::endl;
    cmCTest::cmCTestCoverage &cov = cit->second;


    std::ifstream ifile(cov.m_FullPath.c_str());
    ifile.seekg (0, std::ios::end);
    int length = ifile.tellg();
    ifile.seekg (0, std::ios::beg);
    char *buffer = new char [ length + 1 ];
    ifile.read(buffer, length);
    buffer [length] = 0;
    //std::cout << ""Read: "" << buffer << std::endl;
    std::vector<cmStdString> lines;
    cmSystemTools::Split(buffer, lines);
    delete [] buffer;
    cfileoutput << ""\t<File Name=\"""" << cit->first << ""\"" FullPath=\""""
                << cov.m_FullPath << std::endl << ""\"">\n""
                << ""\t\t<Report>"" << std::endl;
    for ( cc = 0; cc < lines.size(); cc ++ )
      {
      cfileoutput << ""\t\t<Line Number=\"""" 
                  << static_cast<int>(cc) << ""\"" Count=\""""
                  << cov.m_Lines[cc] << ""\"">""
                  << lines[cc] << ""</Line>"" << std::endl;
      }
    cfileoutput << ""\t\t</Report>\n""
                << ""\t</File>"" << std::endl;


    total_tested += cov.m_Tested;
    total_untested += cov.m_UnTested;
    float cper = 0;
    float cmet = 0;
    if ( total_tested + total_untested > 0 )
      {
      cper = (100 * static_cast<float>(cov.m_Tested)/
              static_cast<float>(cov.m_Tested + cov.m_UnTested));
      cmet = ( static_cast<float>(cov.m_Tested + 10) /
               static_cast<float>(cov.m_Tested + cov.m_UnTested + 10));
      }
    log << ""\t<File Name=\"""" << cit->first << ""\"" FullPath=\"""" << cov.m_FullPath
        << ""\"" Covered=\"""" << cov.m_Covered << ""\"">\n""
        << ""\t\t<LOCTested>"" << cov.m_Tested << ""</LOCTested>\n""
        << ""\t\t<LOCUnTested>"" << cov.m_UnTested << ""</LOCUnTested>\n""
        << ""\t\t<PercentCoverage>"" << cper << ""</PercentCoverage>\n""
        << ""\t\t<CoverageMetric>"" << cmet << ""</CoverageMetric>\n""
        << ""\t</File>"" << std::endl;
    }
  
  if ( ccount > 0 )
    {
    local_end_time = ::CurrentTime();
    cfileoutput << ""\t<EndDateTime>"" << local_end_time << ""</EndDateTime>\n""
                << ""</CoverageLog>\n""
                << ""</Site>"" << std::endl;
    cfileoutput.close();
    }

  int total_lines = total_tested + total_untested;
  float percent_coverage = 100 * static_cast<float>(total_tested) / 
    static_cast<float>(total_lines);
  if ( total_lines == 0 )
    {
    percent_coverage = 0;
    }

  std::string end_time = ::CurrentTime();

  log << ""\t<LOCTested>"" << total_tested << ""</LOCTested>\n""
      << ""\t<LOCUntested>"" << total_untested << ""</LOCUntested>\n""
      << ""\t<LOC>"" << total_lines << ""</LOC>\n""
      << ""\t<PercentCoverage>"" << percent_coverage << ""</PercentCoverage>\n""
      << ""\t<EndDateTime>"" << end_time << ""</EndDateTime>\n""
      << ""</Coverage>\n""
      << ""</Site>"" << std::endl;

  std::cout << ""\tCovered LOC:         "" << total_tested << std::endl
            << ""\tNot covered LOC:     "" << total_untested << std::endl
            << ""\tTotal LOC:           "" << total_lines << std::endl
            << ""\tPercentage Coverage: "" << percent_coverage << ""%"" << std::endl;


  std::cerr << ""Coverage test is not yet implemented"" << std::endl;
  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1415.cpp,"[33, 2, 13, 0, 2, 0, 8, 0, 0, 0, 50, 0, 0, 0, 1, 998, 0, 0, 55, 55, 0, 0, 47, 177, 0, 0, 0, 0, 10, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 502, 0, 348, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 41, 0, 48, 33, 1, 0, 131, 0, 0, 70, 2, 123, 0, 13, 0, 0, 13, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1415.cpp,254,"[""char *"", ""constant"", ""int""]","[""cmSystemTools :: SimpleGlob_ret"", ""!""]"
394149a03420c2160b4150f9481f82be27ba69a9,"Fix cov. problems, ignore nonascii char. Propagate verbosity",[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_711.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_711.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_711.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1717.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1717.cpp,1321,1328,1326,1338,"sprintf(cfileoutputname, ""CoverageLog-%d.xml"", cfileoutputcount++);","sprintf(cfileoutputname, ""CoverageLog-%d.xml"", cfileoutputcount++);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1416.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1416.cpp,"{
      local_end_time = ::CurrentTime();
      cfileoutput << ""\t<EndDateTime>"" << local_end_time << ""</EndDateTime>\n""
                  << ""</CoverageLog>\n""
                  << ""</Site>"" << std::endl;
      cfileoutput.close();
      sprintf(cfileoutputname, ""CoverageLog-%d.xml"", cfileoutputcount++);
      if (!this->OpenOutputFile(m_CurrentTag, cfileoutputname, cfileoutput))
        {
        std::cout << ""Cannot open log file"" << std::endl;
        return 1;
        }
      ccount = 0;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1416.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1416.cpp,271,"[""char *"", ""constant"", ""char *""]","[""int"", ""int"", ""==""]"
d9324c178bbfa5e2ef1dcabb6ace504fe3c94328,Fix proxy code and fix comments to be C comments,[],Source/CTest/Curl/Testing/curltest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_715.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_715.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_715.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1722.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1722.cpp,46,46,48,48,"sprintf(""%s:%s"", getenv(""HTTP_PROXY""), getenv(""HTTP_PROXY_PORT""));","sprintf(proxy, ""%s:%s"", getenv(""HTTP_PROXY""), getenv(""HTTP_PROXY_PORT""));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1419.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1419.cpp,"{
      sprintf(""%s:%s"", getenv(""HTTP_PROXY""), getenv(""HTTP_PROXY_PORT""));
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1419.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1419.cpp,14,"[""string"", ""getenv_ret"", ""getenv_ret""]","[""getenv_ret""]"
d9324c178bbfa5e2ef1dcabb6ace504fe3c94328,Fix proxy code and fix comments to be C comments,[],Source/CTest/Curl/Testing/curltest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_715.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_715.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_715.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1722.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1722.cpp,46,46,52,52,"sprintf(""%s"", getenv(""HTTP_PROXY""));","sprintf(proxy, ""%s"", getenv(""HTTP_PROXY""));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1420.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1420.cpp,"{
      sprintf(""%s"", getenv(""HTTP_PROXY""));
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1420.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1420.cpp,18,"[""string"", ""getenv_ret""]","[""getenv_ret"", ""!""]"
55e1cb875d87c50956f242c375848cbb3a1fc17a,Add proxy support,[],Source/CTest/Curl/Testing/curltest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_716.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_716.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_716.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1723.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1723.cpp,36,37,39,48,,"sprintf(""%s:%s"", getenv(""HTTP_PROXY""), getenv(""HTTP_PROXY_PORT""));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1421.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1421.cpp,"f(curl) 
    {
    curl_easy_setopt(curl, CURLOPT_VERBOSE, 1);
    curl_easy_setopt(curl, CURLOPT_HEADER, 1);

    /* get the first document */
    curl_easy_setopt(curl, CURLOPT_URL, ""http://www.cmake.org/page1.html"");
    res = curl_easy_perform(curl);
    if ( res != 0 )
      {
      printf(""Error fetching: http://www.cmake.org/page1.html\n"");
      retVal = 1;
      }


    /* get another document from the same server using the same
       connection */
    curl_easy_setopt(curl, CURLOPT_URL, ""http://www.cmake.org/page2.html"");
    res = curl_easy_perform(curl);
    if ( res != 0 )
      {
      printf(""Error fetching: http://www.cmake.org/page2.html\n"");
      retVal = 1;
      }

    /* always cleanup */
    curl_easy_cleanup(curl);
    }
  else
    {
    printf(""Cannot create curl object\n"");
    retVal = 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1421.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 11, 0, 0, 13, 0, 19, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1421.cpp,6,[],[]
55e1cb875d87c50956f242c375848cbb3a1fc17a,Add proxy support,[],Source/CTest/Curl/Testing/curltest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_716.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_716.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_716.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1723.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1723.cpp,36,37,39,52,,"sprintf(""%s"", getenv(""HTTP_PROXY""));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1422.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1422.cpp,"f(curl) 
    {
    curl_easy_setopt(curl, CURLOPT_VERBOSE, 1);
    curl_easy_setopt(curl, CURLOPT_HEADER, 1);

    /* get the first document */
    curl_easy_setopt(curl, CURLOPT_URL, ""http://www.cmake.org/page1.html"");
    res = curl_easy_perform(curl);
    if ( res != 0 )
      {
      printf(""Error fetching: http://www.cmake.org/page1.html\n"");
      retVal = 1;
      }


    /* get another document from the same server using the same
       connection */
    curl_easy_setopt(curl, CURLOPT_URL, ""http://www.cmake.org/page2.html"");
    res = curl_easy_perform(curl);
    if ( res != 0 )
      {
      printf(""Error fetching: http://www.cmake.org/page2.html\n"");
      retVal = 1;
      }

    /* always cleanup */
    curl_easy_cleanup(curl);
    }
  else
    {
    printf(""Cannot create curl object\n"");
    retVal = 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1422.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 11, 0, 0, 13, 0, 19, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1422.cpp,6,[],[]
55e1cb875d87c50956f242c375848cbb3a1fc17a,Add proxy support,[],Source/CTest/Curl/Testing/curltest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_716.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_716.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_716.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1724.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1724.cpp,51,102,60,-1,"printf(""Error fetching: http://www.cmake.org/page2.html\n"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1423.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1423.cpp,"{
      printf(""Error fetching: http://www.cmake.org/page2.html\n"");
      retVal = 1;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1423.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1423.cpp,27,"[""constant""]","[""curl_easy_perform_ret"", ""null"", ""!=""]"
587b06788071e818823aabb5e31ef283f9278506,New Curl version 7.10.3,[],Source/CTest/Curl/security.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_722.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_722.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_722.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1734.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1734.cpp,279,279,286,-1,"vfprintf(f, fmt, ap);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1424.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1424.cpp,"return vfprintf(f, fmt, ap);",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1424.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1424.cpp,6,"[""FILE *"", ""const char *"", ""va_list""]","[""member"", ""unkown"", ""==""]"
587b06788071e818823aabb5e31ef283f9278506,New Curl version 7.10.3,[],Source/CTest/Curl/security.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_722.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_722.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_722.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1734.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1734.cpp,279,279,288,-1,"buf = aprintf(fmt, ap);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1425.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1425.cpp,"{
    buf = aprintf(fmt, ap);
    ret = buffer_write(&conn->out_buffer, buf, strlen(buf));
    free(buf);
    return ret;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1425.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1425.cpp,8,"[""const char *"", ""va_list""]","[""member"", ""unkown"", ""=="", ""!""]"
587b06788071e818823aabb5e31ef283f9278506,New Curl version 7.10.3,[],Source/CTest/Curl/security.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_722.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_722.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_722.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1735.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1735.cpp,346,321,357,-1,"vfprintf(f, fmt, ap);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1426.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1426.cpp,"return vfprintf(f, fmt, ap);",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1426.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1426.cpp,8,"[""FILE *"", ""const char *"", ""va_list""]","[""member""]"
587b06788071e818823aabb5e31ef283f9278506,New Curl version 7.10.3,[],Source/CTest/Curl/security.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_722.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_722.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_722.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1735.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1735.cpp,346,321,359,-1,"buf = aprintf(fmt, ap);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1427.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1427.cpp,"{
    int ret = 0;
    char *buf;
    void *enc;
    int len;
    if(!conn->sec_complete)
        return vfprintf(f, fmt, ap);
    
    buf = aprintf(fmt, ap);
    len = (conn->mech->encode)(conn->app_data, buf, strlen(buf),
                               conn->command_prot, &enc,
                               conn);
    free(buf);
    if(len < 0) {
        failf(conn->data, ""Failed to encode command."");
        return -1;
    }
    if(Curl_base64_encode(enc, len, &buf) < 0){
      failf(conn->data, ""Out of memory base64-encoding."");
      return -1;
    }
    if(conn->command_prot == prot_safe)
        ret = fprintf(f, ""MIC %s"", buf);
    else if(conn->command_prot == prot_private)
        ret = fprintf(f, ""ENC %s"", buf);
    else if(conn->command_prot == prot_confidential)
        ret = fprintf(f, ""CONF %s"", buf);

    free(buf);
    return ret;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1427.cpp,"[6, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 0, 77, 0, 0, 4, 4, 0, 0, 1, 10, 0, 0, 0, 0, 2, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 6, 0, 0, 12, 0, 0, 9, 2, 30, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1427.cpp,10,"[""const char *"", ""va_list""]","[""member"", ""!""]"
587b06788071e818823aabb5e31ef283f9278506,New Curl version 7.10.3,[],Source/CTest/Curl/security.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_722.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_722.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_722.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1735.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1735.cpp,346,321,373,-1,"ret = fprintf(f, ""MIC %s"", buf);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1428.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1428.cpp,"ret = fprintf(f, ""MIC %s"", buf)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1428.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1428.cpp,24,"[""FILE *"", ""string"", ""aprintf_ret""]","[""member"", ""unkown"", ""==""]"
587b06788071e818823aabb5e31ef283f9278506,New Curl version 7.10.3,[],Source/CTest/Curl/security.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_722.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_722.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_722.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1735.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1735.cpp,346,321,375,-1,"ret = fprintf(f, ""ENC %s"", buf);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1429.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1429.cpp,"ret = fprintf(f, ""ENC %s"", buf)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1429.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1429.cpp,26,"[""FILE *"", ""string"", ""aprintf_ret""]","[""member"", ""unkown"", ""==""]"
587b06788071e818823aabb5e31ef283f9278506,New Curl version 7.10.3,[],Source/CTest/Curl/security.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_722.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_722.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_722.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1735.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1735.cpp,346,321,377,-1,"ret = fprintf(f, ""CONF %s"", buf);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1430.cpp,"ret = fprintf(f, ""CONF %s"", buf)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1430.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1430.cpp,28,"[""FILE *"", ""string"", ""aprintf_ret""]","[""member"", ""unkown"", ""==""]"
587b06788071e818823aabb5e31ef283f9278506,New Curl version 7.10.3,[],Source/CTest/Curl/security.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_722.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_722.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_722.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1735.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1735.cpp,346,321,389,-1,"ret = Curl_sec_vfprintf(conn, f, fmt, ap);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1431.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1431.cpp,"{
    va_list ap;
    int ret;
    va_start(ap, fmt);
    ret = Curl_sec_vfprintf(conn, f, fmt, ap);
    va_end(ap);
    return ret;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1431.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1431.cpp,6,"[""struct connectdata *"", ""FILE *"", ""const char *"", ""va_list""]",[]
6beecfa3de806bf54de02d0a20c76c851e07a188,"Better page, so the resulting dart page will not refresh",[],Source/CTest/Curl/Testing/curltest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_724.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_724.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_724.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1737.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1737.cpp,16,16,18,18,"printf(""Error fetching: http://www.cmake.org/\n"");","printf(""Error fetching: ftp://public.kitware.com/pub/cmake/cygwin/setup.hint\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1432.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1432.cpp,"{
      printf(""Error fetching: http://www.cmake.org/\n"");
      retVal = 1;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1432.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1432.cpp,16,"[""constant""]","[""curl_easy_perform_ret"", ""null"", ""!=""]"
6beecfa3de806bf54de02d0a20c76c851e07a188,"Better page, so the resulting dart page will not refresh",[],Source/CTest/Curl/Testing/curltest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_724.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_724.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_724.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1738.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1738.cpp,43,43,49,49,"printf(""Error fetching: http://www.cmake.org/\n"");","printf(""Error fetching: http://www.cmake.org/HTML/Sponsors.html\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1433.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1433.cpp,"{
      printf(""Error fetching: http://www.cmake.org/\n"");
      retVal = 1;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1433.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1433.cpp,16,"[""constant""]","[""curl_easy_perform_ret"", ""null"", ""!=""]"
3ad91bf9d39c22dc6941068e6fdc1453988f0b07,New version of libcurl,[],Source/CTest/Curl/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_725.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_725.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_725.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1739.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1739.cpp,1470,1477,1562,-1,"sprintf(buf, ""Content-Length: %d\r\n"", filesize);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1434.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1434.cpp,"{
      sprintf(buf, ""Content-Length: %d\r\n"", filesize);
      result = Curl_client_write(data, CLIENTWRITE_BOTH, buf, 0);
      if(result)
        return result;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1434.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1434.cpp,61,"[""char *"", ""string"", ""ssize_t""]","[""macro"", ""ftp_getsize_ret"", ""==""]"
3ad91bf9d39c22dc6941068e6fdc1453988f0b07,New version of libcurl,[],Source/CTest/Curl/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_725.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_725.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_725.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1741.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1741.cpp,2081,2117,2085,-1,"fprintf(conn->data->set.err, ""> %s\n"", s);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1436.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1436.cpp,"fprintf(conn->data->set.err, ""> %s\n"", s)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1436.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1436.cpp,15,"[""member"", ""string"", ""char *""]","[""member""]"
3ad91bf9d39c22dc6941068e6fdc1453988f0b07,New version of libcurl,[],Source/CTest/Curl/hostip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_727.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_727.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_727.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1744.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1744.cpp,283,349,298,378,"snprintf(sbuf, sizeof(sbuf), ""%d"", port);","snprintf(sbuf, sizeof(sbuf), ""%d"", port);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1438.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1438.cpp,"{
  struct addrinfo hints, *res;
  int error;
  char sbuf[NI_MAXSERV];

  memset(&hints, 0, sizeof(hints));
  hints.ai_family = PF_INET;
  hints.ai_socktype = SOCK_STREAM;
  hints.ai_flags = AI_CANONNAME;
  snprintf(sbuf, sizeof(sbuf), ""%d"", port);
  error = getaddrinfo(hostname, sbuf, &hints, &res);
  if (error) {
    infof(data, ""getaddrinfo(3) failed for %s\n"", hostname);    
    return NULL;
  }
  *bufp=(char *)res; /* make it point to the result struct */

  return res;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1438.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 45, 0, 0, 3, 4, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 28, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 1, 1, 0, 0, 6, 0, 0, 8, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1438.cpp,13,"[""char *"", ""unkown"", ""string"", ""int""]",[]
3ad91bf9d39c22dc6941068e6fdc1453988f0b07,New version of libcurl,[],Source/CTest/Curl/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_728.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_728.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_728.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1746.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1746.cpp,579,587,585,596,"conn->allocptr.host = aprintf(""Host: %s\r\n"", host);","conn->allocptr.host = aprintf(""Host: %s%s%s\r\n"",
                                    conn->bits.ipv6_ip?""["":"""",
                                    host,
                                    conn->bits.ipv6_ip?""]"":"""");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1439.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1439.cpp,"conn->allocptr.host = aprintf(""Host: %s\r\n"", host)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1439.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1439.cpp,101,"[""string"", ""char *""]","[""bool"", ""member"", ""macro"", ""=="", ""&&"", ""bool"", ""member"", ""macro"", ""=="", ""&&"", ""||""]"
3ad91bf9d39c22dc6941068e6fdc1453988f0b07,New version of libcurl,[],Source/CTest/Curl/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_728.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_728.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_728.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1746.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1746.cpp,579,587,587,601,"conn->allocptr.host = aprintf(""Host: %s:%d\r\n"", host,
                                    conn->remote_port);","conn->allocptr.host = aprintf(""Host: %s%s%s:%d\r\n"",
                                    conn->bits.ipv6_ip?""["":"""",
                                    host,
                                    conn->bits.ipv6_ip?""]"":"""",
                                    conn->remote_port);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1440.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1440.cpp,"conn->allocptr.host = aprintf(""Host: %s:%d\r\n"", host,
                                    conn->remote_port)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1440.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1440.cpp,103,"[""string"", ""char *"", ""member""]","[""bool"", ""member"", ""macro"", ""=="", ""&&"", ""bool"", ""member"", ""macro"", ""=="", ""&&"", ""||"", ""!""]"
3ad91bf9d39c22dc6941068e6fdc1453988f0b07,New version of libcurl,[],Source/CTest/Curl/netrc.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_730.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_730.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_730.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1750.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1750.cpp,116,119,119,130,,"printf(""NETRC: overridden .netrc file: %s\n"", home);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1441.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1441.cpp,"f(file) {
    char *tok;
        char *tok_buf;
    while(fgets(netrcbuffer, sizeof(netrcbuffer), file)) {
      tok=strtok_r(netrcbuffer, "" \t\n"", &tok_buf);
      while(tok) {
        switch(state) {
        case NOTHING:
          if(strequal(""machine"", tok)) {
            /* the next tok is the machine name, this is in itself the
               delimiter that starts the stuff entered for this machine,
               after this we need to search for 'login' and
               'password'. */
            state=HOSTFOUND;
          }
          break;
        case HOSTFOUND:
          if(strequal(host, tok)) {
            /* and yes, this is our host! */
            state=HOSTVALID;
#ifdef _NETRC_DEBUG
            printf(""HOST: %s\n"", tok);
#endif
            retcode=0; /* we did find our host */
          }
          else
            /* not our host */
            state=NOTHING;
          break;
        case HOSTVALID:
          /* we are now parsing sub-keywords concerning ""our"" host */
          if(state_login) {
            strncpy(login, tok, LOGINSIZE-1);
#ifdef _NETRC_DEBUG
            printf(""LOGIN: %s\n"", login);
#endif
            state_login=0;
          }
          else if(state_password) {
            strncpy(password, tok, PASSWORDSIZE-1);
#ifdef _NETRC_DEBUG
            printf(""PASSWORD: %s\n"", password);
#endif
            state_password=0;
          }
          else if(strequal(""login"", tok))
            state_login=1;
          else if(strequal(""password"", tok))
            state_password=1;
          else if(strequal(""machine"", tok)) {
            /* ok, there's machine here go => */
            state = HOSTFOUND;
          }
          break;
        } /* switch (state) */
        tok = strtok_r(NULL, "" \t\n"", &tok_buf);
      } /* while (tok) */
    } /* while fgets() */

    fclose(file);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1441.cpp,"[7, 2, 0, 0, 3, 0, 0, 1, 3, 0, 12, 0, 0, 0, 0, 67, 0, 0, 2, 2, 0, 0, 0, 16, 0, 0, 0, 0, 2, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 63, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 10, 7, 1, 0, 16, 0, 0, 17, 4, 34, 6, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1441.cpp,46,[],"[""strlen_ret"", ""strlen_ret"", "">"", ""!""]"
3ad91bf9d39c22dc6941068e6fdc1453988f0b07,New version of libcurl,[],Source/CTest/Curl/sendf.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_731.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_731.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_731.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1752.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1752.cpp,84,84,139,138,"vfprintf(data->set.err, fmt, ap);","vsnprintf(print_buffer, 1024, fmt, ap);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1442.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1442.cpp,"{
    va_start(ap, fmt);
    fputs(""* "", data->set.err);
    vfprintf(data->set.err, fmt, ap);
    va_end(ap);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1442.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1442.cpp,6,"[""member"", ""const char *"", ""va_list""]","[""member""]"
3ad91bf9d39c22dc6941068e6fdc1453988f0b07,New version of libcurl,[],Source/CTest/Curl/sendf.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_731.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_731.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_731.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1754.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1754.cpp,163,167,174,192,"fprintf(data->set.err, ""> %s"", s);","Curl_debug(data, CURLINFO_DATA_OUT, sptr, bytes_written);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1443.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1443.cpp,"fprintf(data->set.err, ""> %s"", s)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1443.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1443.cpp,14,"[""member"", ""string"", ""vaprintf_ret""]","[""member""]"
3ad91bf9d39c22dc6941068e6fdc1453988f0b07,New version of libcurl,[],Source/CTest/Curl/transfer.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_732.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_732.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_732.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1755.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1755.cpp,748,899,753,919,,"int hexlen = snprintf(hexbuffer, sizeof(hexbuffer),
                                  ""%x\r\n"", nread);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1444.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1444.cpp,"{
        /* init the ""upload from here"" pointer */
        conn->upload_fromhere = k->uploadbuf;

        nread = data->set.fread(conn->upload_fromhere, 1,
                                BUFSIZE, data->set.in);

        /* the signed int typecase of nread of for systems that has
           unsigned size_t */
        if (nread<=0) {
          /* done */
          k->keepon &= ~KEEP_WRITE; /* we're done writing */
          FD_ZERO(&k->wkeepfd);
          break;
        }

        /* store number of bytes available for upload */
        conn->upload_present = nread;

        /* convert LF to CRLF if so asked */
        if (data->set.crlf) {
          for(i = 0, si = 0; i < nread; i++, si++) {
            if (k->buf[i] == 0x0a) {
              data->state.scratch[si++] = 0x0d;
              data->state.scratch[si] = 0x0a;
            }
            else {
              data->state.scratch[si] = k->uploadbuf[i];
            }
          }
          nread = si;
          k->buf = data->state.scratch; /* point to the new buffer */
        }
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1444.cpp,"[3, 0, 1, 0, 1, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 1, 7, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 3, 1, 0, 2, 0, 0, 10, 0, 5, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1444.cpp,583,"[""member"", ""int"", ""macro"", ""member""]","[""null"", ""member"", ""==""]"
3ad91bf9d39c22dc6941068e6fdc1453988f0b07,New version of libcurl,[],Source/CTest/Curl/transfer.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_732.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_732.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_732.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1757.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1757.cpp,1136,1607,1227,-1,"sprintf(newest, ""%s%s%s"", url_clone, ('/' == newurl[0])?"""":""/"",
                  newurl);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1446.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1446.cpp,"{
          /***
           *DANG* this is an RFC 2068 violation. The URL is supposed
           to be absolute and this doesn't seem to be that!
           ***
           Instead, we have to TRY to append this new path to the old URL
           to the right of the host part. Oh crap, this is doomed to cause
           problems in the future...
          */
          char *protsep;
          char *pathsep;
          char *newest;

          /* we must make our own copy of the URL to play with, as it may
             point to read-only data */
          char *url_clone=strdup(data->change.url);

          if(!url_clone) {
            res = CURLE_OUT_OF_MEMORY;
            break; /* skip out of this loop NOW */
          }

          /* protsep points to the start of the host name */
          protsep=strstr(url_clone, ""//"");
          if(!protsep)
            protsep=url_clone;
          else
            protsep+=2; /* pass the slashes */

          if('/' != newurl[0]) {
            /* First we need to find out if there's a ?-letter in the URL,
               and cut it and the right-side of that off */
            pathsep = strrchr(protsep, '?');
            if(pathsep)
              *pathsep=0;

            /* we have a relative path to append to the last slash if
               there's one available */
            pathsep = strrchr(protsep, '/');
            if(pathsep)
              *pathsep=0;
          }
          else {
            /* We got a new absolute path for this server, cut off from the
               first slash */
            pathsep = strchr(protsep, '/');
            if(pathsep)
              *pathsep=0;
          }

          newest=(char *)malloc( strlen(url_clone) +
                                 1 + /* possible slash */
                                 strlen(newurl) + 1/* zero byte */);

          if(!newest) {
            res = CURLE_OUT_OF_MEMORY;
            break; /* go go go out from this loop */
          }
          sprintf(newest, ""%s%s%s"", url_clone, ('/' == newurl[0])?"""":""/"",
                  newurl);
          free(newurl);
          free(url_clone);
          newurl = newest;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1446.cpp,"[7, 0, 0, 0, 2, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 62, 0, 0, 4, 4, 0, 0, 1, 17, 0, 0, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 1, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 8, 8, 3, 0, 11, 0, 0, 16, 0, 19, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1446.cpp,150,"[""malloc_ret"", ""string"", ""char *"", ""string"", ""strdup_ret""]","[""malloc_ret"", ""!"", ""!""]"
3ad91bf9d39c22dc6941068e6fdc1453988f0b07,New version of libcurl,[],Source/CTest/Curl/url.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_733.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_733.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_733.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1759.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1759.cpp,2194,2766,2236,2770,"snprintf(hbuf, sizeof(hbuf), ""?"");",free(conn->allocptr.accept_encoding);,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1448.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1448.cpp,"{
      snprintf(hbuf, sizeof(hbuf), ""?"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1448.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1448.cpp,990,"[""char *"", ""unkown"", ""string""]","[""getnameinfo_ret""]"
3ad91bf9d39c22dc6941068e6fdc1453988f0b07,New version of libcurl,[],Source/CTest/Curl/url.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_733.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_733.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_733.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1759.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1759.cpp,2194,2766,2196,2772,,"(""Accept-Encoding: %s\015\012"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1449.cpp,"f(-1 == conn->firstsocket) {
    /* Connect only if not already connected! */
    result = ConnectPlease(conn);
    if(CURLE_OK != result)
      return result;

    if(conn->curl_connect) {
      /* is there a connect() procedure? */

      /* set start time here for timeout purposes in the
       * connect procedure, it is later set again for the
       * progress meter purpose */
      conn->now = Curl_tvnow();

      /* Call the protocol-specific connect function */
      result = conn->curl_connect(conn);
      if(result != CURLE_OK)
        return result; /* pass back errors */
    }
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1449.cpp,"[3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 4, 0, 0, 3, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1449.cpp,950,[],"[""macro"", ""!""]"
3ad91bf9d39c22dc6941068e6fdc1453988f0b07,New version of libcurl,[],Source/CTest/Curl/version.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_734.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_734.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_734.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1760.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1760.cpp,56,52,58,54,"f(ptr, "" (OpenSSL %lx.%lx.%lx%s)"",
            (ssleay_value>>28)&0xf,
            (ssleay_value>>20)&0xff,
            (ssleay_value>>12)&0xff,
            sub);","f(ptr, "" OpenSSL/%lx.%lx.%lx%s"",
            (ssleay_value>>28)&0xf,
            (ssleay_value>>20)&0xff,
            (ssleay_value>>12)&0xff,
            sub);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1450.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1450.cpp,"{
    char sub[2];
    unsigned long ssleay_value;
    sub[1]='\0';
    ssleay_value=SSLeay();
    if(ssleay_value < 0x906000) {
      ssleay_value=SSLEAY_VERSION_NUMBER;
      sub[0]='\0';
    }
    else {
      if(ssleay_value&0xff0) {
        sub[0]=((ssleay_value>>4)&0xff) + 'a' -1;
      }
      else
        sub[0]='\0';
    }

    sprintf(ptr, "" (OpenSSL %lx.%lx.%lx%s)"",
            (ssleay_value>>28)&0xf,
            (ssleay_value>>20)&0xff,
            (ssleay_value>>12)&0xff,
            sub);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1450.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 27, 0, 0, 2, 2, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 2, 2, 2, 0, 2, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1450.cpp,27,"[""strchr_ret"", ""constant"", ""bool"", ""bool"", ""bool"", ""char *""]",[]
3ad91bf9d39c22dc6941068e6fdc1453988f0b07,New version of libcurl,[],Source/CTest/Curl/version.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_734.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_734.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_734.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1761.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1761.cpp,79,76,95,98,"sprintf(ptr, ""krb4 "");","getssl_version(ptr, &num);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1453.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1453.cpp,"{
  static char version[200];
  char *ptr;
  strcpy(version, LIBCURL_NAME "" "" LIBCURL_VERSION );
  ptr=strchr(version, '\0');

#ifdef USE_SSLEAY

#if (SSLEAY_VERSION_NUMBER >= 0x905000)
  {
    char sub[2];
    unsigned long ssleay_value;
    sub[1]='\0';
    ssleay_value=SSLeay();
    if(ssleay_value < 0x906000) {
      ssleay_value=SSLEAY_VERSION_NUMBER;
      sub[0]='\0';
    }
    else {
      if(ssleay_value&0xff0) {
        sub[0]=((ssleay_value>>4)&0xff) + 'a' -1;
      }
      else
        sub[0]='\0';
    }

    sprintf(ptr, "" (OpenSSL %lx.%lx.%lx%s)"",
            (ssleay_value>>28)&0xf,
            (ssleay_value>>20)&0xff,
            (ssleay_value>>12)&0xff,
            sub);
  }

#else
#if (SSLEAY_VERSION_NUMBER >= 0x900000)
  sprintf(ptr, "" (SSL %lx.%lx.%lx)"",
          (SSLEAY_VERSION_NUMBER>>28)&0xff,
          (SSLEAY_VERSION_NUMBER>>20)&0xff,
          (SSLEAY_VERSION_NUMBER>>12)&0xf);
#else
  {
    char sub[2];
    sub[1]='\0';
    if(SSLEAY_VERSION_NUMBER&0x0f) {
      sub[0]=(SSLEAY_VERSION_NUMBER&0x0f) + 'a' -1;
    }
    else
      sub[0]='\0';

    sprintf(ptr, "" (SSL %x.%x.%x%s)"",
            (SSLEAY_VERSION_NUMBER>>12)&0xff,
            (SSLEAY_VERSION_NUMBER>>8)&0xf,
            (SSLEAY_VERSION_NUMBER>>4)&0xf, sub);
  }
#endif
#endif
  ptr=strchr(ptr, '\0');
#endif

#if defined(KRB4) || defined(ENABLE_IPV6)
  strcat(ptr, "" ("");
  ptr+=2;
#ifdef KRB4
  sprintf(ptr, ""krb4 "");
  ptr += strlen(ptr);
#endif
#ifdef ENABLE_IPV6
  sprintf(ptr, ""ipv6 "");
  ptr += strlen(ptr);
#endif
  sprintf(ptr, ""enabled)"");
  ptr += strlen(ptr);
#endif

#ifdef USE_ZLIB
  sprintf(ptr, "" (zlib %s)"", zlibVersion());
  ptr += strlen(ptr);
#endif

  return version;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1453.cpp,"[6, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 1, 99, 0, 0, 5, 5, 0, 0, 0, 57, 0, 0, 0, 0, 1, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 10, 0, 3, 3, 5, 0, 19, 0, 0, 25, 0, 40, 16, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1453.cpp,64,"[""int"", ""string""]",[]
3ad91bf9d39c22dc6941068e6fdc1453988f0b07,New version of libcurl,[],Source/CTest/Curl/version.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_734.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_734.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_734.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1761.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1761.cpp,79,76,99,109,"sprintf(ptr, ""ipv6 "");","sprintf(ptr, "" ipv6"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1454.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1454.cpp,"{
  static char version[200];
  char *ptr;
  strcpy(version, LIBCURL_NAME "" "" LIBCURL_VERSION );
  ptr=strchr(version, '\0');

#ifdef USE_SSLEAY

#if (SSLEAY_VERSION_NUMBER >= 0x905000)
  {
    char sub[2];
    unsigned long ssleay_value;
    sub[1]='\0';
    ssleay_value=SSLeay();
    if(ssleay_value < 0x906000) {
      ssleay_value=SSLEAY_VERSION_NUMBER;
      sub[0]='\0';
    }
    else {
      if(ssleay_value&0xff0) {
        sub[0]=((ssleay_value>>4)&0xff) + 'a' -1;
      }
      else
        sub[0]='\0';
    }

    sprintf(ptr, "" (OpenSSL %lx.%lx.%lx%s)"",
            (ssleay_value>>28)&0xf,
            (ssleay_value>>20)&0xff,
            (ssleay_value>>12)&0xff,
            sub);
  }

#else
#if (SSLEAY_VERSION_NUMBER >= 0x900000)
  sprintf(ptr, "" (SSL %lx.%lx.%lx)"",
          (SSLEAY_VERSION_NUMBER>>28)&0xff,
          (SSLEAY_VERSION_NUMBER>>20)&0xff,
          (SSLEAY_VERSION_NUMBER>>12)&0xf);
#else
  {
    char sub[2];
    sub[1]='\0';
    if(SSLEAY_VERSION_NUMBER&0x0f) {
      sub[0]=(SSLEAY_VERSION_NUMBER&0x0f) + 'a' -1;
    }
    else
      sub[0]='\0';

    sprintf(ptr, "" (SSL %x.%x.%x%s)"",
            (SSLEAY_VERSION_NUMBER>>12)&0xff,
            (SSLEAY_VERSION_NUMBER>>8)&0xf,
            (SSLEAY_VERSION_NUMBER>>4)&0xf, sub);
  }
#endif
#endif
  ptr=strchr(ptr, '\0');
#endif

#if defined(KRB4) || defined(ENABLE_IPV6)
  strcat(ptr, "" ("");
  ptr+=2;
#ifdef KRB4
  sprintf(ptr, ""krb4 "");
  ptr += strlen(ptr);
#endif
#ifdef ENABLE_IPV6
  sprintf(ptr, ""ipv6 "");
  ptr += strlen(ptr);
#endif
  sprintf(ptr, ""enabled)"");
  ptr += strlen(ptr);
#endif

#ifdef USE_ZLIB
  sprintf(ptr, "" (zlib %s)"", zlibVersion());
  ptr += strlen(ptr);
#endif

  return version;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1454.cpp,"[6, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 1, 99, 0, 0, 5, 5, 0, 0, 0, 57, 0, 0, 0, 0, 1, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 10, 0, 3, 3, 5, 0, 19, 0, 0, 25, 0, 40, 16, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1454.cpp,68,"[""strlen_ret"", ""string""]",[]
3ad91bf9d39c22dc6941068e6fdc1453988f0b07,New version of libcurl,[],Source/CTest/Curl/version.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_734.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_734.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_734.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1761.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1761.cpp,79,76,102,105,"sprintf(ptr, ""enabled)"");","sprintf(ptr, "" krb4"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1455.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1455.cpp,"{
  static char version[200];
  char *ptr;
  strcpy(version, LIBCURL_NAME "" "" LIBCURL_VERSION );
  ptr=strchr(version, '\0');

#ifdef USE_SSLEAY

#if (SSLEAY_VERSION_NUMBER >= 0x905000)
  {
    char sub[2];
    unsigned long ssleay_value;
    sub[1]='\0';
    ssleay_value=SSLeay();
    if(ssleay_value < 0x906000) {
      ssleay_value=SSLEAY_VERSION_NUMBER;
      sub[0]='\0';
    }
    else {
      if(ssleay_value&0xff0) {
        sub[0]=((ssleay_value>>4)&0xff) + 'a' -1;
      }
      else
        sub[0]='\0';
    }

    sprintf(ptr, "" (OpenSSL %lx.%lx.%lx%s)"",
            (ssleay_value>>28)&0xf,
            (ssleay_value>>20)&0xff,
            (ssleay_value>>12)&0xff,
            sub);
  }

#else
#if (SSLEAY_VERSION_NUMBER >= 0x900000)
  sprintf(ptr, "" (SSL %lx.%lx.%lx)"",
          (SSLEAY_VERSION_NUMBER>>28)&0xff,
          (SSLEAY_VERSION_NUMBER>>20)&0xff,
          (SSLEAY_VERSION_NUMBER>>12)&0xf);
#else
  {
    char sub[2];
    sub[1]='\0';
    if(SSLEAY_VERSION_NUMBER&0x0f) {
      sub[0]=(SSLEAY_VERSION_NUMBER&0x0f) + 'a' -1;
    }
    else
      sub[0]='\0';

    sprintf(ptr, "" (SSL %x.%x.%x%s)"",
            (SSLEAY_VERSION_NUMBER>>12)&0xff,
            (SSLEAY_VERSION_NUMBER>>8)&0xf,
            (SSLEAY_VERSION_NUMBER>>4)&0xf, sub);
  }
#endif
#endif
  ptr=strchr(ptr, '\0');
#endif

#if defined(KRB4) || defined(ENABLE_IPV6)
  strcat(ptr, "" ("");
  ptr+=2;
#ifdef KRB4
  sprintf(ptr, ""krb4 "");
  ptr += strlen(ptr);
#endif
#ifdef ENABLE_IPV6
  sprintf(ptr, ""ipv6 "");
  ptr += strlen(ptr);
#endif
  sprintf(ptr, ""enabled)"");
  ptr += strlen(ptr);
#endif

#ifdef USE_ZLIB
  sprintf(ptr, "" (zlib %s)"", zlibVersion());
  ptr += strlen(ptr);
#endif

  return version;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1455.cpp,"[6, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 1, 99, 0, 0, 5, 5, 0, 0, 0, 57, 0, 0, 0, 0, 1, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 10, 0, 3, 3, 5, 0, 19, 0, 0, 25, 0, 40, 16, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1455.cpp,71,"[""strlen_ret"", ""string""]",[]
3ad91bf9d39c22dc6941068e6fdc1453988f0b07,New version of libcurl,[],Source/CTest/Curl/version.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_734.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_734.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_734.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1761.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1761.cpp,79,76,107,113,"sprintf(ptr, "" (zlib %s)"", zlibVersion());","sprintf(ptr, "" zlib/%s"", zlibVersion());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1456.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1456.cpp,"{
  static char version[200];
  char *ptr;
  strcpy(version, LIBCURL_NAME "" "" LIBCURL_VERSION );
  ptr=strchr(version, '\0');

#ifdef USE_SSLEAY

#if (SSLEAY_VERSION_NUMBER >= 0x905000)
  {
    char sub[2];
    unsigned long ssleay_value;
    sub[1]='\0';
    ssleay_value=SSLeay();
    if(ssleay_value < 0x906000) {
      ssleay_value=SSLEAY_VERSION_NUMBER;
      sub[0]='\0';
    }
    else {
      if(ssleay_value&0xff0) {
        sub[0]=((ssleay_value>>4)&0xff) + 'a' -1;
      }
      else
        sub[0]='\0';
    }

    sprintf(ptr, "" (OpenSSL %lx.%lx.%lx%s)"",
            (ssleay_value>>28)&0xf,
            (ssleay_value>>20)&0xff,
            (ssleay_value>>12)&0xff,
            sub);
  }

#else
#if (SSLEAY_VERSION_NUMBER >= 0x900000)
  sprintf(ptr, "" (SSL %lx.%lx.%lx)"",
          (SSLEAY_VERSION_NUMBER>>28)&0xff,
          (SSLEAY_VERSION_NUMBER>>20)&0xff,
          (SSLEAY_VERSION_NUMBER>>12)&0xf);
#else
  {
    char sub[2];
    sub[1]='\0';
    if(SSLEAY_VERSION_NUMBER&0x0f) {
      sub[0]=(SSLEAY_VERSION_NUMBER&0x0f) + 'a' -1;
    }
    else
      sub[0]='\0';

    sprintf(ptr, "" (SSL %x.%x.%x%s)"",
            (SSLEAY_VERSION_NUMBER>>12)&0xff,
            (SSLEAY_VERSION_NUMBER>>8)&0xf,
            (SSLEAY_VERSION_NUMBER>>4)&0xf, sub);
  }
#endif
#endif
  ptr=strchr(ptr, '\0');
#endif

#if defined(KRB4) || defined(ENABLE_IPV6)
  strcat(ptr, "" ("");
  ptr+=2;
#ifdef KRB4
  sprintf(ptr, ""krb4 "");
  ptr += strlen(ptr);
#endif
#ifdef ENABLE_IPV6
  sprintf(ptr, ""ipv6 "");
  ptr += strlen(ptr);
#endif
  sprintf(ptr, ""enabled)"");
  ptr += strlen(ptr);
#endif

#ifdef USE_ZLIB
  sprintf(ptr, "" (zlib %s)"", zlibVersion());
  ptr += strlen(ptr);
#endif

  return version;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1456.cpp,"[6, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 1, 99, 0, 0, 5, 5, 0, 0, 0, 57, 0, 0, 0, 0, 1, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 10, 0, 3, 3, 5, 0, 19, 0, 0, 25, 0, 40, 16, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1456.cpp,76,"[""strlen_ret"", ""string"", ""zlibVersion_ret""]",[]
8aba833b7714c746436282a0db9f5a5478c75271,Work on submitting,[],Source/cmCTest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_735.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_735.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_735.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1762.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1762.cpp,273,277,273,277,"sprintf(datestring, ""%04d%02d%02d-%02d%02d"",
              lctime->tm_year + 1900,
              lctime->tm_mon,
              lctime->tm_mday,
              lctime->tm_hour,
              lctime->tm_min);","sprintf(datestring, ""%04d%02d%02d-%02d%02d"",
              lctime->tm_year + 1900,
              lctime->tm_mon+1,
              lctime->tm_mday,
              lctime->tm_hour,
              lctime->tm_min);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1457.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1457.cpp,"{
      char datestring[100];
      sprintf(datestring, ""%04d%02d%02d-%02d%02d"",
              lctime->tm_year + 1900,
              lctime->tm_mon,
              lctime->tm_mday,
              lctime->tm_hour,
              lctime->tm_min);
      tag = datestring;
      std::ofstream ofs(tagfile.c_str());
      if ( ofs )
        {
        ofs << tag << std::endl;
        }
      ofs.close();
      std::cout << ""Create new tag: "" << tag << std::endl;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1457.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 45, 0, 0, 2, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 1, 0, 0, 4, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1457.cpp,91,"[""char *"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""tag . size_ret"", ""null"", ""==""]"
190424b29ca2367bf2893736b9f929efbe35b127,ENH: Tcl packages now Tcl_PkgProvide their own name and version.,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_736.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_736.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_736.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1763.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1763.cpp,228,228,231,230,,"fprintf(fout,""#include \""vtkVersion.h\""\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1458.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1458.cpp,"{
  unsigned int i;
  std::string tempOutputFile = outFileName + "".tmp"";
  FILE *fout = fopen(tempOutputFile.c_str(),""w"");
  if (!fout)
    {
    cmSystemTools::Error(""Failed to open TclInit file for "", tempOutputFile.c_str());
    return false;
    }

  // capitalized commands just once
  std::vector<std::string> capcommands;
  for (i = 0; i < m_Commands.size(); i++)
    {
    capcommands.push_back(cmSystemTools::Capitalized(m_Commands[i]));
    }
  
  fprintf(fout,""#include \""vtkTclUtil.h\""\n"");
  
  fprintf(fout,
          ""extern \""C\""\n""
          ""{\n""
          ""#if (TCL_MAJOR_VERSION == 8) && (TCL_MINOR_VERSION >= 4) && (TCL_RELEASE_LEVEL >= TCL_FINAL_RELEASE)\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, CONST84 char *[]);\n""
          ""#else\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, char *[]);\n""
          ""#endif\n""
          ""}\n""
          ""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());
    fprintf(fout,""ClientData %sNewCommand();\n"",classes[i].c_str());
    }
  
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""int vtkCommand(ClientData cd, Tcl_Interp *interp,\n""
                 ""               int argc, char *argv[]);\n"");
    fprintf(fout,""\nTcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkCommandLookup;\n"");
    fprintf(fout,""int vtkCommandForward(ClientData cd, Tcl_Interp *interp,\n""
                 ""                      int argc, char *argv[]){\n""
                 ""  return vtkCommand(cd, interp, argc, argv);\n""
                 ""}\n"");
    }
  else
    {
    fprintf(fout,""\nextern Tcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkCommandLookup;\n"");
    }
  fprintf(fout,""extern void vtkTclDeleteObjectFromHash(void *);\n"");  
  fprintf(fout,""extern void vtkTclListInstances(Tcl_Interp *interp, ClientData arg);\n"");

  for (i = 0; i < m_Commands.size(); i++)
    {
    fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
            capcommands[i].c_str());
    }
  
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_SafeInit(Tcl_Interp *interp);}\n"",
          kitName);
  fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
          kitName);
  
  /* create an extern ref to the generic delete function */
  fprintf(fout,""\nextern void vtkTclGenericDeleteObject(ClientData cd);\n"");

  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""extern \""C\""\n{\nvoid vtkCommonDeleteAssocData(ClientData cd)\n"");
    fprintf(fout,""  {\n"");
    fprintf(fout,""  vtkTclInterpStruct *tis = static_cast<vtkTclInterpStruct*>(cd);\n"");
    fprintf(fout,""  delete tis;\n  }\n}\n"");
    }
    
  /* the main declaration */
  fprintf(fout,""\n\nint VTK_EXPORT %s_SafeInit(Tcl_Interp *interp)\n{\n"",kitName);
  fprintf(fout,""  return %s_Init(interp);\n}\n"",kitName);
  
  fprintf(fout,""\n\nint VTK_EXPORT %s_Init(Tcl_Interp *interp)\n{\n"",
          kitName);
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,
            ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");
    fprintf(fout,
            ""  Tcl_CreateExitHandler(vtkCommonDeleteAssocData,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",\n""
                 ""                    reinterpret_cast<vtkTclCommandType>(vtkCommandForward),\n""
                 ""                    (ClientData *)NULL, NULL);\n\n"");
    }
  
  for (i = 0; i < m_Commands.size(); i++)
    {
    fprintf(fout,""  %s_Init(interp);\n"", capcommands[i].c_str());
    }
  fprintf(fout,""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""  vtkTclCreateNew(interp,(char *) \""%s\"", %sNewCommand,\n"",
            classes[i].c_str(), classes[i].c_str());
    fprintf(fout,""                  %sCommand);\n"",classes[i].c_str());
    }
  
  fprintf(fout,""  return TCL_OK;\n}\n"");
  fclose(fout);

  // copy the file if different
  cmSystemTools::CopyFileIfDifferent(tempOutputFile.c_str(),
                                     outFileName.c_str());
  cmSystemTools::RemoveFile(tempOutputFile.c_str());

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1458.cpp,"[4, 0, 5, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 0, 204, 0, 0, 4, 4, 0, 0, 7, 67, 0, 0, 0, 0, 1, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 9, 4, 1, 0, 68, 0, 0, 45, 0, 109, 0, 5, 0, 0, 5, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1458.cpp,22,[],"[""FILE *"", ""!"", ""!""]"
190424b29ca2367bf2893736b9f929efbe35b127,ENH: Tcl packages now Tcl_PkgProvide their own name and version.,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_736.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_736.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_736.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1763.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1763.cpp,228,228,231,231,,"fprintf(fout,""#define VTK_TCL_TO_STRING(x) VTK_TCL_TO_STRING0(x)\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1459.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1459.cpp,"{
  unsigned int i;
  std::string tempOutputFile = outFileName + "".tmp"";
  FILE *fout = fopen(tempOutputFile.c_str(),""w"");
  if (!fout)
    {
    cmSystemTools::Error(""Failed to open TclInit file for "", tempOutputFile.c_str());
    return false;
    }

  // capitalized commands just once
  std::vector<std::string> capcommands;
  for (i = 0; i < m_Commands.size(); i++)
    {
    capcommands.push_back(cmSystemTools::Capitalized(m_Commands[i]));
    }
  
  fprintf(fout,""#include \""vtkTclUtil.h\""\n"");
  
  fprintf(fout,
          ""extern \""C\""\n""
          ""{\n""
          ""#if (TCL_MAJOR_VERSION == 8) && (TCL_MINOR_VERSION >= 4) && (TCL_RELEASE_LEVEL >= TCL_FINAL_RELEASE)\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, CONST84 char *[]);\n""
          ""#else\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, char *[]);\n""
          ""#endif\n""
          ""}\n""
          ""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());
    fprintf(fout,""ClientData %sNewCommand();\n"",classes[i].c_str());
    }
  
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""int vtkCommand(ClientData cd, Tcl_Interp *interp,\n""
                 ""               int argc, char *argv[]);\n"");
    fprintf(fout,""\nTcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkCommandLookup;\n"");
    fprintf(fout,""int vtkCommandForward(ClientData cd, Tcl_Interp *interp,\n""
                 ""                      int argc, char *argv[]){\n""
                 ""  return vtkCommand(cd, interp, argc, argv);\n""
                 ""}\n"");
    }
  else
    {
    fprintf(fout,""\nextern Tcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkCommandLookup;\n"");
    }
  fprintf(fout,""extern void vtkTclDeleteObjectFromHash(void *);\n"");  
  fprintf(fout,""extern void vtkTclListInstances(Tcl_Interp *interp, ClientData arg);\n"");

  for (i = 0; i < m_Commands.size(); i++)
    {
    fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
            capcommands[i].c_str());
    }
  
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_SafeInit(Tcl_Interp *interp);}\n"",
          kitName);
  fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
          kitName);
  
  /* create an extern ref to the generic delete function */
  fprintf(fout,""\nextern void vtkTclGenericDeleteObject(ClientData cd);\n"");

  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""extern \""C\""\n{\nvoid vtkCommonDeleteAssocData(ClientData cd)\n"");
    fprintf(fout,""  {\n"");
    fprintf(fout,""  vtkTclInterpStruct *tis = static_cast<vtkTclInterpStruct*>(cd);\n"");
    fprintf(fout,""  delete tis;\n  }\n}\n"");
    }
    
  /* the main declaration */
  fprintf(fout,""\n\nint VTK_EXPORT %s_SafeInit(Tcl_Interp *interp)\n{\n"",kitName);
  fprintf(fout,""  return %s_Init(interp);\n}\n"",kitName);
  
  fprintf(fout,""\n\nint VTK_EXPORT %s_Init(Tcl_Interp *interp)\n{\n"",
          kitName);
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,
            ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");
    fprintf(fout,
            ""  Tcl_CreateExitHandler(vtkCommonDeleteAssocData,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",\n""
                 ""                    reinterpret_cast<vtkTclCommandType>(vtkCommandForward),\n""
                 ""                    (ClientData *)NULL, NULL);\n\n"");
    }
  
  for (i = 0; i < m_Commands.size(); i++)
    {
    fprintf(fout,""  %s_Init(interp);\n"", capcommands[i].c_str());
    }
  fprintf(fout,""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""  vtkTclCreateNew(interp,(char *) \""%s\"", %sNewCommand,\n"",
            classes[i].c_str(), classes[i].c_str());
    fprintf(fout,""                  %sCommand);\n"",classes[i].c_str());
    }
  
  fprintf(fout,""  return TCL_OK;\n}\n"");
  fclose(fout);

  // copy the file if different
  cmSystemTools::CopyFileIfDifferent(tempOutputFile.c_str(),
                                     outFileName.c_str());
  cmSystemTools::RemoveFile(tempOutputFile.c_str());

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1459.cpp,"[4, 0, 5, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 0, 204, 0, 0, 4, 4, 0, 0, 7, 67, 0, 0, 0, 0, 1, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 9, 4, 1, 0, 68, 0, 0, 45, 0, 109, 0, 5, 0, 0, 5, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1459.cpp,22,[],"[""FILE *"", ""!"", ""!""]"
190424b29ca2367bf2893736b9f929efbe35b127,ENH: Tcl packages now Tcl_PkgProvide their own name and version.,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_736.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_736.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_736.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1763.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1763.cpp,228,228,231,232,,"fprintf(fout,""#define VTK_TCL_TO_STRING0(x) #x\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1460.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1460.cpp,"{
  unsigned int i;
  std::string tempOutputFile = outFileName + "".tmp"";
  FILE *fout = fopen(tempOutputFile.c_str(),""w"");
  if (!fout)
    {
    cmSystemTools::Error(""Failed to open TclInit file for "", tempOutputFile.c_str());
    return false;
    }

  // capitalized commands just once
  std::vector<std::string> capcommands;
  for (i = 0; i < m_Commands.size(); i++)
    {
    capcommands.push_back(cmSystemTools::Capitalized(m_Commands[i]));
    }
  
  fprintf(fout,""#include \""vtkTclUtil.h\""\n"");
  
  fprintf(fout,
          ""extern \""C\""\n""
          ""{\n""
          ""#if (TCL_MAJOR_VERSION == 8) && (TCL_MINOR_VERSION >= 4) && (TCL_RELEASE_LEVEL >= TCL_FINAL_RELEASE)\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, CONST84 char *[]);\n""
          ""#else\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, char *[]);\n""
          ""#endif\n""
          ""}\n""
          ""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());
    fprintf(fout,""ClientData %sNewCommand();\n"",classes[i].c_str());
    }
  
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""int vtkCommand(ClientData cd, Tcl_Interp *interp,\n""
                 ""               int argc, char *argv[]);\n"");
    fprintf(fout,""\nTcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkCommandLookup;\n"");
    fprintf(fout,""int vtkCommandForward(ClientData cd, Tcl_Interp *interp,\n""
                 ""                      int argc, char *argv[]){\n""
                 ""  return vtkCommand(cd, interp, argc, argv);\n""
                 ""}\n"");
    }
  else
    {
    fprintf(fout,""\nextern Tcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkCommandLookup;\n"");
    }
  fprintf(fout,""extern void vtkTclDeleteObjectFromHash(void *);\n"");  
  fprintf(fout,""extern void vtkTclListInstances(Tcl_Interp *interp, ClientData arg);\n"");

  for (i = 0; i < m_Commands.size(); i++)
    {
    fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
            capcommands[i].c_str());
    }
  
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_SafeInit(Tcl_Interp *interp);}\n"",
          kitName);
  fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
          kitName);
  
  /* create an extern ref to the generic delete function */
  fprintf(fout,""\nextern void vtkTclGenericDeleteObject(ClientData cd);\n"");

  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""extern \""C\""\n{\nvoid vtkCommonDeleteAssocData(ClientData cd)\n"");
    fprintf(fout,""  {\n"");
    fprintf(fout,""  vtkTclInterpStruct *tis = static_cast<vtkTclInterpStruct*>(cd);\n"");
    fprintf(fout,""  delete tis;\n  }\n}\n"");
    }
    
  /* the main declaration */
  fprintf(fout,""\n\nint VTK_EXPORT %s_SafeInit(Tcl_Interp *interp)\n{\n"",kitName);
  fprintf(fout,""  return %s_Init(interp);\n}\n"",kitName);
  
  fprintf(fout,""\n\nint VTK_EXPORT %s_Init(Tcl_Interp *interp)\n{\n"",
          kitName);
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,
            ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");
    fprintf(fout,
            ""  Tcl_CreateExitHandler(vtkCommonDeleteAssocData,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",\n""
                 ""                    reinterpret_cast<vtkTclCommandType>(vtkCommandForward),\n""
                 ""                    (ClientData *)NULL, NULL);\n\n"");
    }
  
  for (i = 0; i < m_Commands.size(); i++)
    {
    fprintf(fout,""  %s_Init(interp);\n"", capcommands[i].c_str());
    }
  fprintf(fout,""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""  vtkTclCreateNew(interp,(char *) \""%s\"", %sNewCommand,\n"",
            classes[i].c_str(), classes[i].c_str());
    fprintf(fout,""                  %sCommand);\n"",classes[i].c_str());
    }
  
  fprintf(fout,""  return TCL_OK;\n}\n"");
  fclose(fout);

  // copy the file if different
  cmSystemTools::CopyFileIfDifferent(tempOutputFile.c_str(),
                                     outFileName.c_str());
  cmSystemTools::RemoveFile(tempOutputFile.c_str());

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1460.cpp,"[4, 0, 5, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 0, 204, 0, 0, 4, 4, 0, 0, 7, 67, 0, 0, 0, 0, 1, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 9, 4, 1, 0, 68, 0, 0, 45, 0, 109, 0, 5, 0, 0, 5, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1460.cpp,22,[],"[""FILE *"", ""!"", ""!""]"
190424b29ca2367bf2893736b9f929efbe35b127,ENH: Tcl packages now Tcl_PkgProvide their own name and version.,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_736.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_736.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_736.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1764.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1764.cpp,333,336,335,338,"f(fout,""  return TCL_OK;\n}\n"");","f(fout,""  Tcl_PkgProvide(interp, \""%s\"", ""
               ""VTK_TCL_TO_STRING(VTK_MAJOR_VERSION) \"".\"" ""
               ""VTK_TCL_TO_STRING(VTK_MINOR_VERSION));\n"",
          m_LibraryName.c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1461.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1461.cpp,"{
  unsigned int i;
  std::string tempOutputFile = outFileName + "".tmp"";
  FILE *fout = fopen(tempOutputFile.c_str(),""w"");
  if (!fout)
    {
    cmSystemTools::Error(""Failed to open TclInit file for "", tempOutputFile.c_str());
    return false;
    }

  // capitalized commands just once
  std::vector<std::string> capcommands;
  for (i = 0; i < m_Commands.size(); i++)
    {
    capcommands.push_back(cmSystemTools::Capitalized(m_Commands[i]));
    }
  
  fprintf(fout,""#include \""vtkTclUtil.h\""\n"");
  
  fprintf(fout,
          ""extern \""C\""\n""
          ""{\n""
          ""#if (TCL_MAJOR_VERSION == 8) && (TCL_MINOR_VERSION >= 4) && (TCL_RELEASE_LEVEL >= TCL_FINAL_RELEASE)\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, CONST84 char *[]);\n""
          ""#else\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, char *[]);\n""
          ""#endif\n""
          ""}\n""
          ""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());
    fprintf(fout,""ClientData %sNewCommand();\n"",classes[i].c_str());
    }
  
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""int vtkCommand(ClientData cd, Tcl_Interp *interp,\n""
                 ""               int argc, char *argv[]);\n"");
    fprintf(fout,""\nTcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkCommandLookup;\n"");
    fprintf(fout,""int vtkCommandForward(ClientData cd, Tcl_Interp *interp,\n""
                 ""                      int argc, char *argv[]){\n""
                 ""  return vtkCommand(cd, interp, argc, argv);\n""
                 ""}\n"");
    }
  else
    {
    fprintf(fout,""\nextern Tcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkCommandLookup;\n"");
    }
  fprintf(fout,""extern void vtkTclDeleteObjectFromHash(void *);\n"");  
  fprintf(fout,""extern void vtkTclListInstances(Tcl_Interp *interp, ClientData arg);\n"");

  for (i = 0; i < m_Commands.size(); i++)
    {
    fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
            capcommands[i].c_str());
    }
  
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_SafeInit(Tcl_Interp *interp);}\n"",
          kitName);
  fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
          kitName);
  
  /* create an extern ref to the generic delete function */
  fprintf(fout,""\nextern void vtkTclGenericDeleteObject(ClientData cd);\n"");

  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""extern \""C\""\n{\nvoid vtkCommonDeleteAssocData(ClientData cd)\n"");
    fprintf(fout,""  {\n"");
    fprintf(fout,""  vtkTclInterpStruct *tis = static_cast<vtkTclInterpStruct*>(cd);\n"");
    fprintf(fout,""  delete tis;\n  }\n}\n"");
    }
    
  /* the main declaration */
  fprintf(fout,""\n\nint VTK_EXPORT %s_SafeInit(Tcl_Interp *interp)\n{\n"",kitName);
  fprintf(fout,""  return %s_Init(interp);\n}\n"",kitName);
  
  fprintf(fout,""\n\nint VTK_EXPORT %s_Init(Tcl_Interp *interp)\n{\n"",
          kitName);
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,
            ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");
    fprintf(fout,
            ""  Tcl_CreateExitHandler(vtkCommonDeleteAssocData,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",\n""
                 ""                    reinterpret_cast<vtkTclCommandType>(vtkCommandForward),\n""
                 ""                    (ClientData *)NULL, NULL);\n\n"");
    }
  
  for (i = 0; i < m_Commands.size(); i++)
    {
    fprintf(fout,""  %s_Init(interp);\n"", capcommands[i].c_str());
    }
  fprintf(fout,""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""  vtkTclCreateNew(interp,(char *) \""%s\"", %sNewCommand,\n"",
            classes[i].c_str(), classes[i].c_str());
    fprintf(fout,""                  %sCommand);\n"",classes[i].c_str());
    }
  
  fprintf(fout,""  return TCL_OK;\n}\n"");
  fclose(fout);

  // copy the file if different
  cmSystemTools::CopyFileIfDifferent(tempOutputFile.c_str(),
                                     outFileName.c_str());
  cmSystemTools::RemoveFile(tempOutputFile.c_str());

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1461.cpp,"[4, 0, 5, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 0, 204, 0, 0, 4, 4, 0, 0, 7, 67, 0, 0, 0, 0, 1, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 9, 4, 1, 0, 68, 0, 0, 45, 0, 109, 0, 5, 0, 0, 5, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1461.cpp,126,"[""FILE *"", ""string""]","[""FILE *"", ""!""]"
190424b29ca2367bf2893736b9f929efbe35b127,ENH: Tcl packages now Tcl_PkgProvide their own name and version.,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_736.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_736.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_736.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1764.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1764.cpp,333,336,336,342,,"fprintf(fout,""  return TCL_OK;\n}\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1462.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1462.cpp,"{
  unsigned int i;
  std::string tempOutputFile = outFileName + "".tmp"";
  FILE *fout = fopen(tempOutputFile.c_str(),""w"");
  if (!fout)
    {
    cmSystemTools::Error(""Failed to open TclInit file for "", tempOutputFile.c_str());
    return false;
    }

  // capitalized commands just once
  std::vector<std::string> capcommands;
  for (i = 0; i < m_Commands.size(); i++)
    {
    capcommands.push_back(cmSystemTools::Capitalized(m_Commands[i]));
    }
  
  fprintf(fout,""#include \""vtkTclUtil.h\""\n"");
  
  fprintf(fout,
          ""extern \""C\""\n""
          ""{\n""
          ""#if (TCL_MAJOR_VERSION == 8) && (TCL_MINOR_VERSION >= 4) && (TCL_RELEASE_LEVEL >= TCL_FINAL_RELEASE)\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, CONST84 char *[]);\n""
          ""#else\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, char *[]);\n""
          ""#endif\n""
          ""}\n""
          ""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());
    fprintf(fout,""ClientData %sNewCommand();\n"",classes[i].c_str());
    }
  
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""int vtkCommand(ClientData cd, Tcl_Interp *interp,\n""
                 ""               int argc, char *argv[]);\n"");
    fprintf(fout,""\nTcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkCommandLookup;\n"");
    fprintf(fout,""int vtkCommandForward(ClientData cd, Tcl_Interp *interp,\n""
                 ""                      int argc, char *argv[]){\n""
                 ""  return vtkCommand(cd, interp, argc, argv);\n""
                 ""}\n"");
    }
  else
    {
    fprintf(fout,""\nextern Tcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkCommandLookup;\n"");
    }
  fprintf(fout,""extern void vtkTclDeleteObjectFromHash(void *);\n"");  
  fprintf(fout,""extern void vtkTclListInstances(Tcl_Interp *interp, ClientData arg);\n"");

  for (i = 0; i < m_Commands.size(); i++)
    {
    fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
            capcommands[i].c_str());
    }
  
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_SafeInit(Tcl_Interp *interp);}\n"",
          kitName);
  fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
          kitName);
  
  /* create an extern ref to the generic delete function */
  fprintf(fout,""\nextern void vtkTclGenericDeleteObject(ClientData cd);\n"");

  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""extern \""C\""\n{\nvoid vtkCommonDeleteAssocData(ClientData cd)\n"");
    fprintf(fout,""  {\n"");
    fprintf(fout,""  vtkTclInterpStruct *tis = static_cast<vtkTclInterpStruct*>(cd);\n"");
    fprintf(fout,""  delete tis;\n  }\n}\n"");
    }
    
  /* the main declaration */
  fprintf(fout,""\n\nint VTK_EXPORT %s_SafeInit(Tcl_Interp *interp)\n{\n"",kitName);
  fprintf(fout,""  return %s_Init(interp);\n}\n"",kitName);
  
  fprintf(fout,""\n\nint VTK_EXPORT %s_Init(Tcl_Interp *interp)\n{\n"",
          kitName);
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,
            ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");
    fprintf(fout,
            ""  Tcl_CreateExitHandler(vtkCommonDeleteAssocData,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",\n""
                 ""                    reinterpret_cast<vtkTclCommandType>(vtkCommandForward),\n""
                 ""                    (ClientData *)NULL, NULL);\n\n"");
    }
  
  for (i = 0; i < m_Commands.size(); i++)
    {
    fprintf(fout,""  %s_Init(interp);\n"", capcommands[i].c_str());
    }
  fprintf(fout,""\n"");

  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""  vtkTclCreateNew(interp,(char *) \""%s\"", %sNewCommand,\n"",
            classes[i].c_str(), classes[i].c_str());
    fprintf(fout,""                  %sCommand);\n"",classes[i].c_str());
    }
  
  fprintf(fout,""  return TCL_OK;\n}\n"");
  fclose(fout);

  // copy the file if different
  cmSystemTools::CopyFileIfDifferent(tempOutputFile.c_str(),
                                     outFileName.c_str());
  cmSystemTools::RemoveFile(tempOutputFile.c_str());

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1462.cpp,"[4, 0, 5, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 0, 204, 0, 0, 4, 4, 0, 0, 7, 67, 0, 0, 0, 0, 1, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 9, 4, 1, 0, 68, 0, 0, 45, 0, 109, 0, 5, 0, 0, 5, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1462.cpp,127,"[""FILE *""]","[""FILE *"", ""!""]"
e0cec1e650138f797467967e8a4c8ae66dc61e37,Add support for only showing what will be done. This way you can for example get a list of all tests: ctest -N or list of all tests that match regex: ctest -N -R regex,[],Source/ctest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_737.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_737.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_737.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1765.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1765.cpp,1163,1193,1165,1201,"fprintf(stderr,""Testing %-30s "",args[0].Value.c_str());","fprintf(stderr,""Testing %-30s "",args[0].Value.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1463.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1463.cpp,"{
        if (this->m_UseExcludeRegExp && 
            this->m_UseExcludeRegExpFirst && 
            ereg.find(args[0].Value.c_str()))
          {
          continue;
          }
        if (this->m_UseIncludeRegExp && !ireg.find(args[0].Value.c_str()))
          {
          continue;
          }
        if (this->m_UseExcludeRegExp && 
            !this->m_UseExcludeRegExpFirst && 
            ereg.find(args[0].Value.c_str()))
          {
          continue;
          }

        cmCTestTestResult cres;

        if (firstTest)
          {
          std::string nwd = cmSystemTools::GetCurrentWorkingDirectory();
          std::cerr << ""Changing directory into "" << nwd.c_str() << ""\n"";
          firstTest = 0;
          }
        cres.m_Name = args[0].Value;
        fprintf(stderr,""Testing %-30s "",args[0].Value.c_str());
        fflush(stderr);
        //std::cerr << ""Testing "" << args[0] << "" ... "";
        // find the test executable
        std::string testCommand = this->FindExecutable(args[1].Value.c_str());
        testCommand = cmSystemTools::ConvertToOutputPath(testCommand.c_str());

        // continue if we did not find the executable
        if (testCommand == """")
          {
          std::cerr << ""Unable to find executable: "" << 
            args[1].Value.c_str() << ""\n"";
          continue;
          }
        
        // add the arguments
        std::vector<cmListFileArgument>::const_iterator j = args.begin();
        ++j;
        ++j;
        for(;j != args.end(); ++j)
          {   
          testCommand += "" "";
          testCommand += cmSystemTools::EscapeSpaces(j->Value.c_str());
          }
        /**
         * Run an executable command and put the stdout in output.
         */
        std::string output;
        int retVal;

        double clock_start, clock_finish;
        clock_start = cmSystemTools::GetTime();

        if ( m_Verbose )
          {
          std::cout << std::endl << ""Test command: "" << testCommand << std::endl;
          }
        bool res = cmSystemTools::RunCommand(testCommand.c_str(), output, 
                                             retVal, 0, false);
        clock_finish = cmSystemTools::GetTime();

        cres.m_ExecutionTime = (double)(clock_finish - clock_start);
        cres.m_FullCommandLine = testCommand;

        if (!res || retVal != 0)
          {
          fprintf(stderr,""***Failed\n"");
          if (output != """")
            {
            if (dartStuff.find(output.c_str()))
              {
              cmSystemTools::ReplaceString(output,
                                           dartStuff.match(1).c_str(),"""");
              }
            if (output != """" && m_Verbose)
              {
              std::cerr << output.c_str() << ""\n"";
              }
            }
          failed.push_back(args[0].Value); 
          }
        else
          {
          fprintf(stderr,""   Passed\n"");
          if (output != """")
            {
            if (dartStuff.find(output.c_str()))
              {
              cmSystemTools::ReplaceString(output,
                                           dartStuff.match(1).c_str(),"""");
              }
            if (output != """" && m_Verbose)
              {
              std::cerr << output.c_str() << ""\n"";
              }
            }
          passed.push_back(args[0].Value); 
          }
        cres.m_Output = output;
        cres.m_ReturnValue = retVal;
        std::string nwd = cmSystemTools::GetCurrentWorkingDirectory();
        if ( nwd.size() > m_ToplevelPath.size() )
          {
          nwd = ""."" + nwd.substr(m_ToplevelPath.size(), nwd.npos);
          }
        cres.m_Path = nwd;
        cres.m_CompletionStatus = ""Completed"";
        m_TestResults.push_back( cres );
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1463.cpp,"[14, 0, 1, 0, 0, 4, 0, 0, 0, 0, 17, 0, 0, 0, 0, 279, 0, 0, 9, 10, 0, 0, 6, 35, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 9, 0, 15, 14, 1, 0, 48, 0, 0, 30, 0, 36, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1463.cpp,78,"[""unkown"", ""string"", ""args [ 0 ] . Value . c_str_ret""]","[""member"", ""member"", ""ereg . find_ret"", ""&&"", ""&&"", ""!""]"
e0cec1e650138f797467967e8a4c8ae66dc61e37,Add support for only showing what will be done. This way you can for example get a list of all tests: ctest -N or list of all tests that match regex: ctest -N -R regex,[],Source/ctest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_737.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_737.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_737.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1767.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1767.cpp,1163,1193,1165,1201,"fprintf(stderr,""Testing %-30s "",args[0].Value.c_str());","fprintf(stderr,""Testing %-30s "",args[0].Value.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1464.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1464.cpp,"{
        if (this->m_UseExcludeRegExp && 
            this->m_UseExcludeRegExpFirst && 
            ereg.find(args[0].Value.c_str()))
          {
          continue;
          }
        if (this->m_UseIncludeRegExp && !ireg.find(args[0].Value.c_str()))
          {
          continue;
          }
        if (this->m_UseExcludeRegExp && 
            !this->m_UseExcludeRegExpFirst && 
            ereg.find(args[0].Value.c_str()))
          {
          continue;
          }

        cmCTestTestResult cres;

        if (firstTest)
          {
          std::string nwd = cmSystemTools::GetCurrentWorkingDirectory();
          std::cerr << ""Changing directory into "" << nwd.c_str() << ""\n"";
          firstTest = 0;
          }
        cres.m_Name = args[0].Value;
        fprintf(stderr,""Testing %-30s "",args[0].Value.c_str());
        fflush(stderr);
        //std::cerr << ""Testing "" << args[0] << "" ... "";
        // find the test executable
        std::string testCommand = this->FindExecutable(args[1].Value.c_str());
        testCommand = cmSystemTools::ConvertToOutputPath(testCommand.c_str());

        // continue if we did not find the executable
        if (testCommand == """")
          {
          std::cerr << ""Unable to find executable: "" << 
            args[1].Value.c_str() << ""\n"";
          continue;
          }
        
        // add the arguments
        std::vector<cmListFileArgument>::const_iterator j = args.begin();
        ++j;
        ++j;
        for(;j != args.end(); ++j)
          {   
          testCommand += "" "";
          testCommand += cmSystemTools::EscapeSpaces(j->Value.c_str());
          }
        /**
         * Run an executable command and put the stdout in output.
         */
        std::string output;
        int retVal;

        double clock_start, clock_finish;
        clock_start = cmSystemTools::GetTime();

        if ( m_Verbose )
          {
          std::cout << std::endl << ""Test command: "" << testCommand << std::endl;
          }
        bool res = cmSystemTools::RunCommand(testCommand.c_str(), output, 
                                             retVal, 0, false);
        clock_finish = cmSystemTools::GetTime();

        cres.m_ExecutionTime = (double)(clock_finish - clock_start);
        cres.m_FullCommandLine = testCommand;

        if (!res || retVal != 0)
          {
          fprintf(stderr,""***Failed\n"");
          if (output != """")
            {
            if (dartStuff.find(output.c_str()))
              {
              cmSystemTools::ReplaceString(output,
                                           dartStuff.match(1).c_str(),"""");
              }
            if (output != """" && m_Verbose)
              {
              std::cerr << output.c_str() << ""\n"";
              }
            }
          failed.push_back(args[0].Value); 
          }
        else
          {
          fprintf(stderr,""   Passed\n"");
          if (output != """")
            {
            if (dartStuff.find(output.c_str()))
              {
              cmSystemTools::ReplaceString(output,
                                           dartStuff.match(1).c_str(),"""");
              }
            if (output != """" && m_Verbose)
              {
              std::cerr << output.c_str() << ""\n"";
              }
            }
          passed.push_back(args[0].Value); 
          }
        cres.m_Output = output;
        cres.m_ReturnValue = retVal;
        std::string nwd = cmSystemTools::GetCurrentWorkingDirectory();
        if ( nwd.size() > m_ToplevelPath.size() )
          {
          nwd = ""."" + nwd.substr(m_ToplevelPath.size(), nwd.npos);
          }
        cres.m_Path = nwd;
        cres.m_CompletionStatus = ""Completed"";
        m_TestResults.push_back( cres );
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1464.cpp,"[14, 0, 1, 0, 0, 4, 0, 0, 0, 0, 17, 0, 0, 0, 0, 279, 0, 0, 9, 10, 0, 0, 6, 35, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 9, 0, 15, 14, 1, 0, 48, 0, 0, 30, 0, 36, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1464.cpp,78,"[""unkown"", ""string"", ""args [ 0 ] . Value . c_str_ret""]","[""member"", ""member"", ""ereg . find_ret"", ""&&"", ""&&"", ""!""]"
4888c088ae0ca829862e8b2f9568abca12dc34d1,"ENH: Moved ExpandListVariables out of individual commands.  Argument evaluation rules are now very consistent.  Double quotes can always be used to create exactly one argument, regardless of contents inside.",[],Source/ctest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_738.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_738.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_738.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1769.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1769.cpp,1159,1162,1162,1165,"fprintf(stderr,""Testing %-30s "",args[0].c_str());","fprintf(stderr,""Testing %-30s "",args[0].Value.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1465.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1465.cpp,"{
        if (this->m_UseExcludeRegExp && 
            this->m_UseExcludeRegExpFirst && 
            ereg.find(args[0].c_str()))
          {
          continue;
          }
        if (this->m_UseIncludeRegExp && !ireg.find(args[0].c_str()))
          {
          continue;
          }
        if (this->m_UseExcludeRegExp && 
            !this->m_UseExcludeRegExpFirst && 
            ereg.find(args[0].c_str()))
          {
          continue;
          }

        cmCTestTestResult cres;

        if (firstTest)
          {
          std::string nwd = cmSystemTools::GetCurrentWorkingDirectory();
          std::cerr << ""Changing directory into "" << nwd.c_str() << ""\n"";
          firstTest = 0;
          }
        cres.m_Name = args[0];
        fprintf(stderr,""Testing %-30s "",args[0].c_str());
        fflush(stderr);
        //std::cerr << ""Testing "" << args[0] << "" ... "";
        // find the test executable
        std::string testCommand = this->FindExecutable(args[1].c_str());
        testCommand = cmSystemTools::ConvertToOutputPath(testCommand.c_str());

        // continue if we did not find the executable
        if (testCommand == """")
          {
          std::cerr << ""Unable to find executable: "" << 
            args[1].c_str() << ""\n"";
          continue;
          }
        
        // add the arguments
        std::vector<std::string>::iterator j = args.begin();
        ++j;
        ++j;
        for(;j != args.end(); ++j)
          {   
          testCommand += "" "";
          testCommand += cmSystemTools::EscapeSpaces(j->c_str());
          }
        /**
         * Run an executable command and put the stdout in output.
         */
        std::string output;
        int retVal;

        double clock_start, clock_finish;
        clock_start = cmSystemTools::GetTime();

        if ( m_Verbose )
          {
          std::cout << std::endl << ""Test command: "" << testCommand << std::endl;
          }
        bool res = cmSystemTools::RunCommand(testCommand.c_str(), output, 
                                             retVal, 0, false);
        clock_finish = cmSystemTools::GetTime();

        cres.m_ExecutionTime = (double)(clock_finish - clock_start);
        cres.m_FullCommandLine = testCommand;

        if (!res || retVal != 0)
          {
          fprintf(stderr,""***Failed\n"");
          if (output != """")
            {
            if (dartStuff.find(output.c_str()))
              {
              cmSystemTools::ReplaceString(output,
                                           dartStuff.match(1).c_str(),"""");
              }
            if (output != """" && m_Verbose)
              {
              std::cerr << output.c_str() << ""\n"";
              }
            }
          failed.push_back(args[0]); 
          }
        else
          {
          fprintf(stderr,""   Passed\n"");
          if (output != """")
            {
            if (dartStuff.find(output.c_str()))
              {
              cmSystemTools::ReplaceString(output,
                                           dartStuff.match(1).c_str(),"""");
              }
            if (output != """" && m_Verbose)
              {
              std::cerr << output.c_str() << ""\n"";
              }
            }
          passed.push_back(args[0]); 
          }
        cres.m_Output = output;
        cres.m_ReturnValue = retVal;
        std::string nwd = cmSystemTools::GetCurrentWorkingDirectory();
        if ( nwd.size() > m_ToplevelPath.size() )
          {
          nwd = ""."" + nwd.substr(m_ToplevelPath.size(), nwd.npos);
          }
        cres.m_Path = nwd;
        cres.m_CompletionStatus = ""Completed"";
        m_TestResults.push_back( cres );
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1465.cpp,"[14, 0, 1, 0, 0, 4, 0, 0, 0, 0, 17, 0, 0, 0, 0, 265, 0, 0, 9, 10, 0, 0, 6, 35, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 9, 0, 15, 14, 1, 0, 48, 0, 0, 30, 0, 36, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1465.cpp,76,"[""unkown"", ""string"", ""args [ 0 ] . c_str_ret""]","[""member"", ""member"", ""ereg . find_ret"", ""&&"", ""&&"", ""!""]"
c1132e4b08da658a1eab86e212a9b205bce63337,ENH: move version to title bar,[],Source/MFCDialog/CMakeSetupDialog.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_741.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_741.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_741.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1774.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1774.cpp,288,287,290,289,"sprintf(tmp,""Version %d.%d - %s"", cmake::GetMajorVersion(),
          cmake::GetMinorVersion(), cmake::GetReleaseVersion());","sprintf(tmp,""CMake %d.%d - %s"", cmake::GetMajorVersion(),
          cmake::GetMinorVersion(), cmake::GetReleaseVersion());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1466.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1466.cpp,"{
  CDialog::OnInitDialog();
  this->DragAcceptFiles(true);

  // Add ""Create shortcut"" menu item to system menu.

  // IDM_CREATESHORTCUT must be in the system command range.
  ASSERT((IDM_CREATESHORTCUT & 0xFFF0) == IDM_CREATESHORTCUT);
  ASSERT(IDM_CREATESHORTCUT < 0xF000);

  // Add ""About..."" menu item to system menu.

  // IDM_ABOUTBOX must be in the system command range.
  ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
  ASSERT(IDM_ABOUTBOX < 0xF000);

  CMenu* pSysMenu = GetSystemMenu(FALSE);
  if (pSysMenu != NULL)
    {
    CString strCreateShortcutMenu;
    strCreateShortcutMenu.LoadString(IDS_CREATESHORTCUT);
    if (!strCreateShortcutMenu.IsEmpty())
      {
      pSysMenu->AppendMenu(MF_SEPARATOR);
      pSysMenu->AppendMenu(MF_STRING, 
                           IDM_CREATESHORTCUT, 
                           strCreateShortcutMenu);
      }

    CString strAboutMenu;
    strAboutMenu.LoadString(IDS_ABOUTBOX);
    if (!strAboutMenu.IsEmpty())
      {
      pSysMenu->AppendMenu(MF_SEPARATOR);
      pSysMenu->AppendMenu(MF_STRING, 
                           IDM_ABOUTBOX, 
                           strAboutMenu);
      }
    }

  // Set the icon for this dialog.  The framework does this automatically
  //  when the application's main window is not a dialog
  SetIcon(m_hIcon, TRUE);			// Set big icon
  SetIcon(m_hIcon, FALSE);		// Set small icon
  // Load source and build dirs from registry
  this->LoadFromRegistry();
  std::vector<std::string> names;
  this->m_CMakeInstance->GetRegisteredGenerators(names);
  for(std::vector<std::string>::iterator i = names.begin();
      i != names.end(); ++i)
    {
    m_GeneratorChoice.AddString(i->c_str());
    }
  if (m_GeneratorChoiceString == _T("""")) 
    {
    m_GeneratorChoiceString = ""Visual Studio 6"";
    }

  // try to load the cmake cache from disk
  this->LoadCacheFromDiskToGUI();
  m_WhereBuildControl.LimitText(2048);
  m_WhereSourceControl.LimitText(2048);
  m_GeneratorChoice.LimitText(2048);
    
  // Set the version number
  char tmp[1024];
  sprintf(tmp,""Version %d.%d - %s"", cmake::GetMajorVersion(),
          cmake::GetMinorVersion(), cmake::GetReleaseVersion());
  SetDlgItemText(IDC_CMAKE_VERSION, tmp);
  SetDlgItemText(IDC_PROGRESS, """");
  this->UpdateData(FALSE);
  return TRUE;  // return TRUE  unless you set the focus to a control
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1466.cpp,"[4, 0, 1, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 144, 0, 0, 5, 6, 0, 0, 3, 13, 0, 0, 0, 0, 1, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 5, 4, 0, 0, 37, 0, 0, 26, 0, 38, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1466.cpp,67,"[""char *"", ""constant"", ""cmake :: GetMajorVersion_ret"", ""cmake :: GetMinorVersion_ret"", ""cmake :: GetReleaseVersion_ret""]",[]
145390fcc9f6d59435d03b6217e1adc4f8fc93d0,fix flag setting,[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_742.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_742.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_742.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1775.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1775.cpp,153,153,155,155,"f(fout, ""SET(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} ${COMPILE_DEFINITIONS})\n"");","f(fout, ""SET(CMAKE_C_FLAGS \""${CMAKE_C_FLAGS} ${COMPILE_DEFINITIONS}\""\"")\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1467.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1467.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return -1;
      }
    
    std::string source = argv[2];
    cmSystemTools::FileFormat format = 
      cmSystemTools::GetFileFormat( 
        cmSystemTools::GetFilenameExtension(source).c_str());
    if ( format == cmSystemTools::C_FILE_FORMAT )
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE C)\n"");      
      }
    else if ( format == cmSystemTools::CXX_FILE_FORMAT )
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE CXX)\n"");      
      }
    else
      {
      cmSystemTools::Error(""Unknown file format for file: "", source.c_str(), 
                           ""; TRY_COMPILE only works for C and CXX files"");
      return -1;
      }

    fprintf(fout, ""SET(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} ${COMPILE_DEFINITIONS})\n"");
    fprintf(fout, ""SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ${COMPILE_DEFINITIONS})\n"");
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }
    
    fprintf(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",source.c_str());
    fprintf(fout, ""TARGET_LINK_LIBRARIES(cmTryCompileExec ${LINK_LIBRARIES})\n"");
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1467.cpp,"[4, 0, 1, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 0, 100, 0, 0, 4, 4, 0, 0, 5, 22, 0, 0, 0, 0, 1, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 5, 4, 1, 0, 27, 0, 0, 18, 1, 35, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1467.cpp,135,"[""FILE *"", ""string""]","[""cmSystemTools :: FileFormat"", ""unkown"", ""==""]"
145390fcc9f6d59435d03b6217e1adc4f8fc93d0,fix flag setting,[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_742.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_742.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_742.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1775.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1775.cpp,153,153,156,156,"fprintf(fout, ""SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ${COMPILE_DEFINITIONS})\n"");","fprintf(fout, ""SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} ${COMPILE_DEFINITIONS}\"")\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1468.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1468.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return -1;
      }
    
    std::string source = argv[2];
    cmSystemTools::FileFormat format = 
      cmSystemTools::GetFileFormat( 
        cmSystemTools::GetFilenameExtension(source).c_str());
    if ( format == cmSystemTools::C_FILE_FORMAT )
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE C)\n"");      
      }
    else if ( format == cmSystemTools::CXX_FILE_FORMAT )
      {
      fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE CXX)\n"");      
      }
    else
      {
      cmSystemTools::Error(""Unknown file format for file: "", source.c_str(), 
                           ""; TRY_COMPILE only works for C and CXX files"");
      return -1;
      }

    fprintf(fout, ""SET(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} ${COMPILE_DEFINITIONS})\n"");
    fprintf(fout, ""SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ${COMPILE_DEFINITIONS})\n"");
    fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }
    
    fprintf(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",source.c_str());
    fprintf(fout, ""TARGET_LINK_LIBRARIES(cmTryCompileExec ${LINK_LIBRARIES})\n"");
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1468.cpp,"[4, 0, 1, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 0, 100, 0, 0, 4, 4, 0, 0, 5, 22, 0, 0, 0, 0, 1, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 5, 4, 1, 0, 27, 0, 0, 18, 1, 35, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1468.cpp,136,"[""FILE *"", ""string""]","[""cmSystemTools :: FileFormat"", ""unkown"", ""==""]"
1d39833446340e262020c83d9ef3124da6a1e3f7,Add progress to ccmake,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_743.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_743.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_743.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1776.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1776.cpp,381,381,384,388,,"sprintf(firstLine, 
            ""                                                               "");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1469.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1469.cpp,"(m_OkToGenerate)
      {
      sprintf(firstLine,  ""Press [c] to configure     Press [g] to generate and exit"");
      }
    else
      {
      sprintf(firstLine,  ""Press [c] to configure                                   "");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1469.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1469.cpp,29,[],"[""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""||"", ""||"", ""!""]"
1d39833446340e262020c83d9ef3124da6a1e3f7,Add progress to ccmake,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_743.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_743.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_743.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1776.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1776.cpp,381,381,384,390,,"sprintf(secondLine, 
            ""                                                               "");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1470.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1470.cpp,"(m_OkToGenerate)
      {
      sprintf(firstLine,  ""Press [c] to configure     Press [g] to generate and exit"");
      }
    else
      {
      sprintf(firstLine,  ""Press [c] to configure                                   "");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1470.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1470.cpp,29,[],"[""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""||"", ""||"", ""!""]"
1d39833446340e262020c83d9ef3124da6a1e3f7,Add progress to ccmake,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_743.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_743.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_743.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1776.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1776.cpp,381,381,384,392,,"sprintf(thirdLine, 
            ""                                                               "");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1471.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1471.cpp,"(m_OkToGenerate)
      {
      sprintf(firstLine,  ""Press [c] to configure     Press [g] to generate and exit"");
      }
    else
      {
      sprintf(firstLine,  ""Press [c] to configure                                   "");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1471.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1471.cpp,29,[],"[""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""||"", ""||"", ""!""]"
5b9feb6fdc32488e0f3fece5df9633981e11b06a,Fix network build,[],Source/cmWin32ProcessExecution.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_750.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_750.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_750.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1790.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1790.cpp,310,310,318,319,"sprintf(s2, ""%s%s%s"", s1, s3, cmdstring);","sprintf(s2, ""%s"", cmdstring);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1473.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1473.cpp,"{
      /* NT/2000 and not using command.com. */
      x = i + (int)strlen(s3) + (int)strlen(cmdstring) + 1;
      s2 = (char *)_alloca(x);
      ZeroMemory(s2, x);
      sprintf(s2, ""%s%s%s"", s1, s3, cmdstring);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1473.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1473.cpp,38,"[""_alloca_ret"", ""string"", ""_alloca_ret"", ""char *"", ""const char *""]","[""GetVersion_ret"", ""constant"", ""<"", ""STRICMP_ret"", ""null"", ""!="", ""&&""]"
ea87271c4a4e534772d7d8f14b70b6fd8ac648be,"Reorganization, cleanup and some improvement in dart emulation",[],Source/ctest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_751.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_751.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_751.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1793.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1793.cpp,547,589,570,-1,"sprintf(datestring, ""%4d%02d%02d-%d%d"",
          lctime->tm_year + 1900,
          lctime->tm_mon,
          lctime->tm_mday,
          lctime->tm_hour,
          lctime->tm_min);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1475.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1475.cpp,"{
  time_t tctime = time(0);
  struct tm *lctime = gmtime(&tctime);
  char datestring[100];
  sprintf(datestring, ""%4d%02d%02d-%d%d"",
          lctime->tm_year + 1900,
          lctime->tm_mon,
          lctime->tm_mday,
          lctime->tm_hour,
          lctime->tm_min);

  os << ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n""
     << ""<Site BuildName=\"""" << m_DartConfiguration[""BuildName""]
     << ""\"" BuildStamp=\"""" << datestring << ""-Experimental\"" Name=\""""
     << m_DartConfiguration[""Site""] << ""\"">\n""
     << ""<Build>\n""
     << ""  <StartDateTime>"" << ::CurrentTime() << ""</StartDateTime>\n""
     << ""  <BuildCommand>"" << m_DartConfiguration[""MakeCommand""]
     << ""</BuildCommand>"" << std::endl;
    
  std::vector<cmCTestBuildErrorWarning>::iterator it;
  for ( it = ew.begin(); it != ew.end(); it++ )
    {
    cmCTestBuildErrorWarning *cm = &(*it);
    os << ""  <"" << (cm->m_Error ? ""Error"" : ""Warning"") << "">\n""
       << ""    <BuildLogLine>"" << cm->m_LogLine << ""</BuildLogLine>\n""
       << ""    <Text>"" << cm->m_Text << ""</Text>"" << std::endl;
    if ( cm->m_SourceFile.size() > 0 )
      {
      os << ""    <SourceFile>"" << cm->m_SourceFile << ""</SourceFile>"" 
         << std::endl;
      }
    if ( cm->m_SourceFileTail.size() > 0 )
      {
      os << ""    <SourceFileTail>"" << cm->m_SourceFileTail 
         << ""</SourceFileTail>"" << std::endl;
      }
    if ( cm->m_LineNumber >= 0 )
      {
      os << ""    <SourceLineNumber>"" << cm->m_LineNumber 
         << ""</SourceLineNumber>"" << std::endl;
      }
    os << ""    <PreContext>"" << cm->m_PreContext << ""</PreContext>\n""
       << ""    <PostContext>"" << cm->m_PostContext << ""</PostContext>\n""
       << ""  </"" << (cm->m_Error ? ""Error"" : ""Warning"") << "">"" 
       << std::endl;
    }
  os << ""  <Log Encoding=\""base64\"" Compression=\""/bin/gzip\"">\n    </Log>\n""
     << ""  <EndDateTime>"" << ::CurrentTime() << ""</EndDateTime>\n""
     << ""</Build>\n""
     << ""</Site>"" << std::endl;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1475.cpp,"[3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 125, 0, 0, 5, 5, 0, 0, 4, 47, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 2, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 6, 5, 2, 0, 10, 0, 0, 8, 0, 10, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1475.cpp,6,"[""char *"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member""]",[]
ea87271c4a4e534772d7d8f14b70b6fd8ac648be,"Reorganization, cleanup and some improvement in dart emulation",[],Source/ctest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_751.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_751.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_751.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1795.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1795.cpp,795,929,800,-1,"sprintf(datestring, ""%4d%02d%02d-%d%d"",
          lctime->tm_year + 1900,
          lctime->tm_mon,
          lctime->tm_mday,
          lctime->tm_hour,
          lctime->tm_min);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1477.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1477.cpp,"{
  if ( !m_DartMode )
    {
    return;
    }

  if ( m_TestResults.size() == 0 )
    {
    return;
    }

  time_t tctime = time(0);
  struct tm *lctime = gmtime(&tctime);
  char datestring[100];
  sprintf(datestring, ""%4d%02d%02d-%d%d"",
          lctime->tm_year + 1900,
          lctime->tm_mon,
          lctime->tm_mday,
          lctime->tm_hour,
          lctime->tm_min);

  os << ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n""
     << ""<Site BuildName=\"""" << m_DartConfiguration[""BuildName""]
     << ""\"" BuildStamp=\"""" << datestring << ""-Experimental\"" Name=\""""
     << m_DartConfiguration[""Site""] << ""\"">\n""
     << ""<Testing>\n""
     << ""  <StartDateTime>"" << ::CurrentTime() << ""</StartDateTime>\n""
     << ""  <TestList>\n"";
  tm_TestResultsVector::size_type cc;
  for ( cc = 0; cc < m_TestResults.size(); cc ++ )
    {
    cmCTestTestResult *result = &m_TestResults[cc];
    os << ""    <Test>"" << result->m_Path << ""/"" << result->m_Name 
       << ""</Test>"" << std::endl;
    }
  os << ""  </TestList>\n"";
  for ( cc = 0; cc < m_TestResults.size(); cc ++ )
    {
    cmCTestTestResult *result = &m_TestResults[cc];
    os << ""  <Test Status=\"""" << (result->m_ReturnValue?""failed"":""passed"") 
       << ""\"">\n""
       << ""    <Name>"" << result->m_Name << ""</Name>\n""
       << ""    <Path>"" << result->m_Path << ""</Path>\n""
       << ""    <FullName>"" << result->m_Path << ""/"" << result->m_Name << ""</FullName>\n""
       << ""    <FullCommandLine>"" << result->m_FullCommandLine << ""</FullCommandLine>\n""
       << ""    <Results>"" << std::endl;
    if ( result->m_ReturnValue )
      {
      os << ""      <NamedMeasurement type=\""text/string\"" name=\""Exit Code\""><Value>""
         << ""CHILDSTATUS"" << ""</Value></NamedMeasurement>\n""
         << ""      <NamedMeasurement type=\""text/string\"" name=\""Exit Value\""><Value>""
         << result->m_ReturnValue << ""</Value></NamedMeasurement>"" << std::endl;
      }
    os << ""      <NamedMeasurement type=\""numeric/double\"" ""
       << ""name=\""Execution Time\""><Value>""
       << result->m_ExecutionTime << ""</Value></NamedMeasurement>\n""
       << ""      <NamedMeasurement type=\""text/string\"" ""
       << ""name=\""Completion Status\""><Value>""
       << result->m_CompletionStatus << ""</Value></NamedMeasurement>\n""
       << ""      <Measurement>\n""
       << ""        <Value>"" << result->m_Output << ""</value>\n""
       << ""      </Measurement>\n""
       << ""    </Results>\n""
       << ""  </Test>"" << std::endl;
    }
  
  os << ""<EndDateTime>"" << ::CurrentTime() << ""</EndDateTime>\n""
     << ""</Testing>\n""
     << ""</Site>"" << std::endl;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1477.cpp,"[3, 0, 2, 0, 0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 0, 129, 0, 0, 6, 6, 0, 0, 6, 57, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 1, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 6, 4, 1, 0, 8, 0, 0, 8, 0, 9, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1477.cpp,15,"[""char *"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""m_TestResults . size_ret"", ""null"", ""=="", ""!""]"
ea87271c4a4e534772d7d8f14b70b6fd8ac648be,"Reorganization, cleanup and some improvement in dart emulation",[],Source/ctest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_751.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_751.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_751.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1796.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1796.cpp,883,1007,910,-1,"fprintf(stderr,""\n%.0f%% tests passed, %i tests failed out of %i\n"",
              percent, int(failed.size()), total);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1478.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1478.cpp,"{
      if (passed.size() && (m_UseIncludeRegExp || m_UseExcludeRegExp)) 
        {
        std::cerr << ""\nThe following tests passed:\n"";
        for(std::vector<std::string>::iterator j = passed.begin();
            j != passed.end(); ++j)
          {   
          std::cerr << ""\t"" << *j << ""\n"";
          }
        }

      float percent = float(passed.size()) * 100.0f / total;
      fprintf(stderr,""\n%.0f%% tests passed, %i tests failed out of %i\n"",
              percent, int(failed.size()), total);

      if (failed.size()) 
        {
        std::cerr << ""\nThe following tests FAILED:\n"";
        for(std::vector<std::string>::iterator j = failed.begin();
            j != failed.end(); ++j)
          {   
          std::cerr << ""\t"" << *j << ""\n"";
          }
        }
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1478.cpp,"[2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 71, 0, 0, 1, 3, 0, 0, 5, 8, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 2, 0, 0, 13, 0, 0, 5, 0, 9, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1478.cpp,53,"[""unkown"", ""constant"", ""float"", ""int_ret"", ""int_ret""]","[""int_ret"", ""null"", ""=="", ""!""]"
a7692d84f038d24e167fdc8576713218ddcfb2f0,Cleanups and hopefully now it works on all windows platforms,[],Source/cmWin32ProcessExecution.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_755.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_755.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_755.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1803.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1803.cpp,61,61,77,-1,"printf(""%d - %s: %s (%d)\n"",line,str,msg, lastmsg);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1482.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1482.cpp,"{
  DWORD lastmsg = GetLastError();
  LPVOID msg;
  FormatMessage(
    FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,
    NULL,
    lastmsg,
    MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // Default language
    (LPTSTR) &msg,
    0,
    NULL
  );
  printf(""%d - %s: %s (%d)\n"",line,str,msg, lastmsg);
  LocalFree(msg);
  ::SetLastError(ERROR_SUCCESS);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1482.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 26, 0, 0, 2, 2, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 4, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1482.cpp,13,"[""string"", ""int"", ""char *"", ""LPVOID"", ""DWORD""]",[]
aad36568ea85acc1305e1f3cad2b5e307d25472d,It is late and it at least seems to work better than before...,[],Source/cmSystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_756.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_756.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_756.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1806.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1806.cpp,1430,1430,1436,1436,"printf(""%s"",buf);",std::cout << buf << std::flush;,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1484.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1484.cpp,"{
	  //std::cout << ""Read data..."" << std::endl;
          ReadFile(read_stdout,buf,1023,&bread,NULL);
 
//read the stdout pipe 
          printf(""%s"",buf);
          memset(buf, 0, sizeof(buf));
 
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1484.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 14, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1484.cpp,112,"[""string"", ""char *""]","[""unsigned long"", ""int"", "">=""]"
561a3da2043c3fbebd1f90c88842513625076aed,"Several changes: COMPILE_DEFINITIONS is now depricated. If you want to specify some, use CMAKE_FLAGS -DCMAKE_DEFINITIONS:STRING=...; same goes for libraries, include path, ... It now detects wether the file is C or C++ and uses the apropriate project command, it also does the right thing when doing try_compile, so it does not execute configure for every single try_compile",[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_758.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1808.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1808.cpp,133,133,135,-1,"f(fout, ""PROJECT(CMAKE_TRY_COMPILE)\n"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1485.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1485.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return -1;
      }
    fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE)\n"");
    fprintf(fout, ""IF (CMAKE_ANSI_CXXFLAGS)\n"");
    fprintf(fout, ""  SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} ${CMAKE_ANSI_CXXFLAGS}\"")\n"");
    fprintf(fout, ""  SET(CMAKE_C_FLAGS \""${CMAKE_C_FLAGS} ${CMAKE_ANSI_CFLAGS}\"")\n"");
    fprintf(fout, ""ENDIF (CMAKE_ANSI_CXXFLAGS)\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }
    
    fprintf(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",argv[2].c_str());
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1485.cpp,"[2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 64, 0, 0, 2, 2, 0, 0, 3, 17, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 2, 0, 0, 20, 0, 0, 15, 0, 26, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1485.cpp,115,"[""FILE *"", ""string""]","[""FILE *"", ""!"", ""!""]"
561a3da2043c3fbebd1f90c88842513625076aed,"Several changes: COMPILE_DEFINITIONS is now depricated. If you want to specify some, use CMAKE_FLAGS -DCMAKE_DEFINITIONS:STRING=...; same goes for libraries, include path, ... It now detects wether the file is C or C++ and uses the apropriate project command, it also does the right thing when doing try_compile, so it does not execute configure for every single try_compile",[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_758.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1808.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1808.cpp,133,133,136,157,"fprintf(fout, ""IF (CMAKE_ANSI_CXXFLAGS)\n"");","fprintf(fout, ""IF (CMAKE_ANSI_CXXFLAGS)\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1486.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1486.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return -1;
      }
    fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE)\n"");
    fprintf(fout, ""IF (CMAKE_ANSI_CXXFLAGS)\n"");
    fprintf(fout, ""  SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} ${CMAKE_ANSI_CXXFLAGS}\"")\n"");
    fprintf(fout, ""  SET(CMAKE_C_FLAGS \""${CMAKE_C_FLAGS} ${CMAKE_ANSI_CFLAGS}\"")\n"");
    fprintf(fout, ""ENDIF (CMAKE_ANSI_CXXFLAGS)\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }
    
    fprintf(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",argv[2].c_str());
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1486.cpp,"[2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 64, 0, 0, 2, 2, 0, 0, 3, 17, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 2, 0, 0, 20, 0, 0, 15, 0, 26, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1486.cpp,116,"[""FILE *"", ""string""]","[""FILE *"", ""!"", ""!""]"
561a3da2043c3fbebd1f90c88842513625076aed,"Several changes: COMPILE_DEFINITIONS is now depricated. If you want to specify some, use CMAKE_FLAGS -DCMAKE_DEFINITIONS:STRING=...; same goes for libraries, include path, ... It now detects wether the file is C or C++ and uses the apropriate project command, it also does the right thing when doing try_compile, so it does not execute configure for every single try_compile",[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_758.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1808.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1808.cpp,133,133,137,142,"fprintf(fout, ""  SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} ${CMAKE_ANSI_CXXFLAGS}\"")\n"");","fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE C)\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1487.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1487.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return -1;
      }
    fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE)\n"");
    fprintf(fout, ""IF (CMAKE_ANSI_CXXFLAGS)\n"");
    fprintf(fout, ""  SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} ${CMAKE_ANSI_CXXFLAGS}\"")\n"");
    fprintf(fout, ""  SET(CMAKE_C_FLAGS \""${CMAKE_C_FLAGS} ${CMAKE_ANSI_CFLAGS}\"")\n"");
    fprintf(fout, ""ENDIF (CMAKE_ANSI_CXXFLAGS)\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }
    
    fprintf(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",argv[2].c_str());
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1487.cpp,"[2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 64, 0, 0, 2, 2, 0, 0, 3, 17, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 2, 0, 0, 20, 0, 0, 15, 0, 26, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1487.cpp,117,"[""FILE *"", ""string""]","[""FILE *"", ""!"", ""!""]"
561a3da2043c3fbebd1f90c88842513625076aed,"Several changes: COMPILE_DEFINITIONS is now depricated. If you want to specify some, use CMAKE_FLAGS -DCMAKE_DEFINITIONS:STRING=...; same goes for libraries, include path, ... It now detects wether the file is C or C++ and uses the apropriate project command, it also does the right thing when doing try_compile, so it does not execute configure for every single try_compile",[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_758.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1808.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1808.cpp,133,133,138,166,"fprintf(fout, ""  SET(CMAKE_C_FLAGS \""${CMAKE_C_FLAGS} ${CMAKE_ANSI_CFLAGS}\"")\n"");","fprintf(fout, ""  SET(CMAKE_C_FLAGS \""${CMAKE_C_FLAGS} ${CMAKE_ANSI_CFLAGS}\"")\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1488.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1488.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return -1;
      }
    fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE)\n"");
    fprintf(fout, ""IF (CMAKE_ANSI_CXXFLAGS)\n"");
    fprintf(fout, ""  SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} ${CMAKE_ANSI_CXXFLAGS}\"")\n"");
    fprintf(fout, ""  SET(CMAKE_C_FLAGS \""${CMAKE_C_FLAGS} ${CMAKE_ANSI_CFLAGS}\"")\n"");
    fprintf(fout, ""ENDIF (CMAKE_ANSI_CXXFLAGS)\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }
    
    fprintf(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",argv[2].c_str());
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1488.cpp,"[2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 64, 0, 0, 2, 2, 0, 0, 3, 17, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 2, 0, 0, 20, 0, 0, 15, 0, 26, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1488.cpp,118,"[""FILE *"", ""string""]","[""FILE *"", ""!"", ""!""]"
561a3da2043c3fbebd1f90c88842513625076aed,"Several changes: COMPILE_DEFINITIONS is now depricated. If you want to specify some, use CMAKE_FLAGS -DCMAKE_DEFINITIONS:STRING=...; same goes for libraries, include path, ... It now detects wether the file is C or C++ and uses the apropriate project command, it also does the right thing when doing try_compile, so it does not execute configure for every single try_compile",[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_758.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1808.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1808.cpp,133,133,139,160,"fprintf(fout, ""ENDIF (CMAKE_ANSI_CXXFLAGS)\n"");","fprintf(fout, ""ENDIF (CMAKE_ANSI_CXXFLAGS)\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1489.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1489.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return -1;
      }
    fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE)\n"");
    fprintf(fout, ""IF (CMAKE_ANSI_CXXFLAGS)\n"");
    fprintf(fout, ""  SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} ${CMAKE_ANSI_CXXFLAGS}\"")\n"");
    fprintf(fout, ""  SET(CMAKE_C_FLAGS \""${CMAKE_C_FLAGS} ${CMAKE_ANSI_CFLAGS}\"")\n"");
    fprintf(fout, ""ENDIF (CMAKE_ANSI_CXXFLAGS)\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }
    
    fprintf(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",argv[2].c_str());
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1489.cpp,"[2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 64, 0, 0, 2, 2, 0, 0, 3, 17, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 2, 0, 0, 20, 0, 0, 15, 0, 26, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1489.cpp,119,"[""FILE *"", ""string""]","[""FILE *"", ""!"", ""!""]"
561a3da2043c3fbebd1f90c88842513625076aed,"Several changes: COMPILE_DEFINITIONS is now depricated. If you want to specify some, use CMAKE_FLAGS -DCMAKE_DEFINITIONS:STRING=...; same goes for libraries, include path, ... It now detects wether the file is C or C++ and uses the apropriate project command, it also does the right thing when doing try_compile, so it does not execute configure for every single try_compile",[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_758.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1808.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1808.cpp,133,133,137,146,,"fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE CXX)\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1490.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1490.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return -1;
      }
    fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE)\n"");
    fprintf(fout, ""IF (CMAKE_ANSI_CXXFLAGS)\n"");
    fprintf(fout, ""  SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} ${CMAKE_ANSI_CXXFLAGS}\"")\n"");
    fprintf(fout, ""  SET(CMAKE_C_FLAGS \""${CMAKE_C_FLAGS} ${CMAKE_ANSI_CFLAGS}\"")\n"");
    fprintf(fout, ""ENDIF (CMAKE_ANSI_CXXFLAGS)\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }
    
    fprintf(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",argv[2].c_str());
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1490.cpp,"[2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 64, 0, 0, 2, 2, 0, 0, 3, 17, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 2, 0, 0, 20, 0, 0, 15, 0, 26, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1490.cpp,117,"[""FILE *"", ""string""]","[""FILE *"", ""!"", ""!""]"
561a3da2043c3fbebd1f90c88842513625076aed,"Several changes: COMPILE_DEFINITIONS is now depricated. If you want to specify some, use CMAKE_FLAGS -DCMAKE_DEFINITIONS:STRING=...; same goes for libraries, include path, ... It now detects wether the file is C or C++ and uses the apropriate project command, it also does the right thing when doing try_compile, so it does not execute configure for every single try_compile",[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_758.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1808.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1808.cpp,133,133,138,158,,"fprintf(fout, ""  SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS}""
              "" ${CMAKE_ANSI_CXXFLAGS}\"")\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1491.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1491.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return -1;
      }
    fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE)\n"");
    fprintf(fout, ""IF (CMAKE_ANSI_CXXFLAGS)\n"");
    fprintf(fout, ""  SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} ${CMAKE_ANSI_CXXFLAGS}\"")\n"");
    fprintf(fout, ""  SET(CMAKE_C_FLAGS \""${CMAKE_C_FLAGS} ${CMAKE_ANSI_CFLAGS}\"")\n"");
    fprintf(fout, ""ENDIF (CMAKE_ANSI_CXXFLAGS)\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }
    
    fprintf(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",argv[2].c_str());
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1491.cpp,"[2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 64, 0, 0, 2, 2, 0, 0, 3, 17, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 2, 0, 0, 20, 0, 0, 15, 0, 26, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1491.cpp,118,"[""FILE *"", ""string""]","[""FILE *"", ""!"", ""!""]"
561a3da2043c3fbebd1f90c88842513625076aed,"Several changes: COMPILE_DEFINITIONS is now depricated. If you want to specify some, use CMAKE_FLAGS -DCMAKE_DEFINITIONS:STRING=...; same goes for libraries, include path, ... It now detects wether the file is C or C++ and uses the apropriate project command, it also does the right thing when doing try_compile, so it does not execute configure for every single try_compile",[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_758.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1808.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1808.cpp,133,133,139,165,,"fprintf(fout, ""IF (CMAKE_ANSI_CFLAGS)\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1492.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1492.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return -1;
      }
    fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE)\n"");
    fprintf(fout, ""IF (CMAKE_ANSI_CXXFLAGS)\n"");
    fprintf(fout, ""  SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} ${CMAKE_ANSI_CXXFLAGS}\"")\n"");
    fprintf(fout, ""  SET(CMAKE_C_FLAGS \""${CMAKE_C_FLAGS} ${CMAKE_ANSI_CFLAGS}\"")\n"");
    fprintf(fout, ""ENDIF (CMAKE_ANSI_CXXFLAGS)\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }
    
    fprintf(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",argv[2].c_str());
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1492.cpp,"[2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 64, 0, 0, 2, 2, 0, 0, 3, 17, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 2, 0, 0, 20, 0, 0, 15, 0, 26, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1492.cpp,119,"[""FILE *"", ""string""]","[""FILE *"", ""!"", ""!""]"
561a3da2043c3fbebd1f90c88842513625076aed,"Several changes: COMPILE_DEFINITIONS is now depricated. If you want to specify some, use CMAKE_FLAGS -DCMAKE_DEFINITIONS:STRING=...; same goes for libraries, include path, ... It now detects wether the file is C or C++ and uses the apropriate project command, it also does the right thing when doing try_compile, so it does not execute configure for every single try_compile",[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_758.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1808.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1808.cpp,133,133,139,167,,"fprintf(fout, ""ENDIF (CMAKE_ANSI_CFLAGS)\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1493.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1493.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return -1;
      }
    fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE)\n"");
    fprintf(fout, ""IF (CMAKE_ANSI_CXXFLAGS)\n"");
    fprintf(fout, ""  SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} ${CMAKE_ANSI_CXXFLAGS}\"")\n"");
    fprintf(fout, ""  SET(CMAKE_C_FLAGS \""${CMAKE_C_FLAGS} ${CMAKE_ANSI_CFLAGS}\"")\n"");
    fprintf(fout, ""ENDIF (CMAKE_ANSI_CXXFLAGS)\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }
    
    fprintf(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",argv[2].c_str());
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1493.cpp,"[2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 64, 0, 0, 2, 2, 0, 0, 3, 17, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 2, 0, 0, 20, 0, 0, 15, 0, 26, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1493.cpp,119,"[""FILE *"", ""string""]","[""FILE *"", ""!"", ""!""]"
561a3da2043c3fbebd1f90c88842513625076aed,"Several changes: COMPILE_DEFINITIONS is now depricated. If you want to specify some, use CMAKE_FLAGS -DCMAKE_DEFINITIONS:STRING=...; same goes for libraries, include path, ... It now detects wether the file is C or C++ and uses the apropriate project command, it also does the right thing when doing try_compile, so it does not execute configure for every single try_compile",[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_758.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1808.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1808.cpp,133,133,141,170,,"fprintf(fout, ""INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1495.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1495.cpp,"(compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1495.cpp,"[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 6, 0, 0, 3, 0, 7, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1495.cpp,121,[],"[""FILE *"", ""!"", ""!""]"
561a3da2043c3fbebd1f90c88842513625076aed,"Several changes: COMPILE_DEFINITIONS is now depricated. If you want to specify some, use CMAKE_FLAGS -DCMAKE_DEFINITIONS:STRING=...; same goes for libraries, include path, ... It now detects wether the file is C or C++ and uses the apropriate project command, it also does the right thing when doing try_compile, so it does not execute configure for every single try_compile",[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_758.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1808.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1808.cpp,133,133,141,171,,"fprintf(fout, ""LINK_DIRECTORIES(${LINK_DIRECTORIES})\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1496.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1496.cpp,"(compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1496.cpp,"[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 6, 0, 0, 3, 0, 7, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1496.cpp,121,[],"[""FILE *"", ""!"", ""!""]"
561a3da2043c3fbebd1f90c88842513625076aed,"Several changes: COMPILE_DEFINITIONS is now depricated. If you want to specify some, use CMAKE_FLAGS -DCMAKE_DEFINITIONS:STRING=...; same goes for libraries, include path, ... It now detects wether the file is C or C++ and uses the apropriate project command, it also does the right thing when doing try_compile, so it does not execute configure for every single try_compile",[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_758.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1809.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1809.cpp,149,181,151,183,"f(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",argv[2].c_str());","f(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",source.c_str());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1497.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1497.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return -1;
      }
    fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE)\n"");
    fprintf(fout, ""IF (CMAKE_ANSI_CXXFLAGS)\n"");
    fprintf(fout, ""  SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} ${CMAKE_ANSI_CXXFLAGS}\"")\n"");
    fprintf(fout, ""  SET(CMAKE_C_FLAGS \""${CMAKE_C_FLAGS} ${CMAKE_ANSI_CFLAGS}\"")\n"");
    fprintf(fout, ""ENDIF (CMAKE_ANSI_CXXFLAGS)\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }
    
    fprintf(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",argv[2].c_str());
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1497.cpp,"[2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 64, 0, 0, 2, 2, 0, 0, 3, 17, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 2, 0, 0, 20, 0, 0, 15, 0, 26, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1497.cpp,131,"[""FILE *"", ""string"", ""argv [ 2 ] . c_str_ret""]","[""FILE *"", ""!"", ""!""]"
561a3da2043c3fbebd1f90c88842513625076aed,"Several changes: COMPILE_DEFINITIONS is now depricated. If you want to specify some, use CMAKE_FLAGS -DCMAKE_DEFINITIONS:STRING=...; same goes for libraries, include path, ... It now detects wether the file is C or C++ and uses the apropriate project command, it also does the right thing when doing try_compile, so it does not execute configure for every single try_compile",[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_758.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_758.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1809.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1809.cpp,149,181,152,184,,"fprintf(fout, ""TARGET_LINK_LIBRARIES(cmTryCompileExec ${LINK_LIBRARIES})\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1498.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1498.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return -1;
      }
    fprintf(fout, ""PROJECT(CMAKE_TRY_COMPILE)\n"");
    fprintf(fout, ""IF (CMAKE_ANSI_CXXFLAGS)\n"");
    fprintf(fout, ""  SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} ${CMAKE_ANSI_CXXFLAGS}\"")\n"");
    fprintf(fout, ""  SET(CMAKE_C_FLAGS \""${CMAKE_C_FLAGS} ${CMAKE_ANSI_CFLAGS}\"")\n"");
    fprintf(fout, ""ENDIF (CMAKE_ANSI_CXXFLAGS)\n"");
    // handle any compile flags we need to pass on
    if (compileFlags.size())
      {
      fprintf(fout, ""ADD_DEFINITIONS( "");
      for (i = 0; i < compileFlags.size(); ++i)
        {
        fprintf(fout,""%s "",compileFlags[i].c_str());
        }
      fprintf(fout, "")\n"");
      }
    
    fprintf(fout, ""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",argv[2].c_str());
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1498.cpp,"[2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 64, 0, 0, 2, 2, 0, 0, 3, 17, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 2, 0, 0, 20, 0, 0, 15, 0, 26, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1498.cpp,132,"[""FILE *""]","[""FILE *"", ""!"", ""!""]"
d4f5545007c99259dcb7414d975a5446d5163933,updated to try compile,[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_760.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_760.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_760.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1811.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1811.cpp,89,108,98,119,,"fprintf(fout, ""ADD_DEFINITIONS( "");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1499.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1499.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    std::string outFileName = tmpString + ""/CMakeLists.txt"";
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return false;
      }
    fprintf(fout,""PROJECT(CMAKE_TRY_COMPILE)\n"");
    fprintf(fout, ""IF (CMAKE_ANSI_CXXFLAGS)\n"");
    fprintf(fout, ""  SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} ${CMAKE_ANSI_CXXFLAGS}\"")\n"");
    fprintf(fout, ""ENDIF (CMAKE_ANSI_CXXFLAGS)\n"");
    fprintf(fout,""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",argv[2].c_str());
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1499.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 48, 0, 0, 3, 3, 0, 0, 3, 13, 0, 0, 0, 0, 1, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 1, 1, 0, 0, 13, 0, 0, 11, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1499.cpp,78,"[""FILE *""]","[""FILE *"", ""!"", ""!""]"
d4f5545007c99259dcb7414d975a5446d5163933,updated to try compile,[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_760.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_760.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_760.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1811.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1811.cpp,89,108,98,122,,"fprintf(fout,""%s "",compileFlags[i].c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1500.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1500.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    std::string outFileName = tmpString + ""/CMakeLists.txt"";
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return false;
      }
    fprintf(fout,""PROJECT(CMAKE_TRY_COMPILE)\n"");
    fprintf(fout, ""IF (CMAKE_ANSI_CXXFLAGS)\n"");
    fprintf(fout, ""  SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} ${CMAKE_ANSI_CXXFLAGS}\"")\n"");
    fprintf(fout, ""ENDIF (CMAKE_ANSI_CXXFLAGS)\n"");
    fprintf(fout,""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",argv[2].c_str());
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1500.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 48, 0, 0, 3, 3, 0, 0, 3, 13, 0, 0, 0, 0, 1, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 1, 1, 0, 0, 13, 0, 0, 11, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1500.cpp,78,"[""FILE *""]","[""FILE *"", ""!"", ""!""]"
d4f5545007c99259dcb7414d975a5446d5163933,updated to try compile,[],Source/cmTryCompileCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_760.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_760.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_760.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1811.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1811.cpp,89,108,98,124,,"fprintf(fout, "")\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1501.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1501.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = tmpString + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile.c_str());
    
    // we need to create a directory and CMakeList file etc...
    // first create the directories
    sourceDirectory = binaryDirectory;

    // now create a CMakeList.txt file in that directory
    std::string outFileName = tmpString + ""/CMakeLists.txt"";
    FILE *fout = fopen(outFileName.c_str(),""w"");
    if (!fout)
      {
      cmSystemTools::Error(""Failed to create CMakeList file for "", 
                           outFileName.c_str());
      return false;
      }
    fprintf(fout,""PROJECT(CMAKE_TRY_COMPILE)\n"");
    fprintf(fout, ""IF (CMAKE_ANSI_CXXFLAGS)\n"");
    fprintf(fout, ""  SET(CMAKE_CXX_FLAGS \""${CMAKE_CXX_FLAGS} ${CMAKE_ANSI_CXXFLAGS}\"")\n"");
    fprintf(fout, ""ENDIF (CMAKE_ANSI_CXXFLAGS)\n"");
    fprintf(fout,""ADD_EXECUTABLE(cmTryCompileExec \""%s\"")\n"",argv[2].c_str());
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    targetName = ""cmTryCompileExec"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1501.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 48, 0, 0, 3, 3, 0, 0, 3, 13, 0, 0, 0, 0, 1, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 1, 1, 0, 0, 13, 0, 0, 11, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1501.cpp,78,"[""FILE *""]","[""FILE *"", ""!"", ""!""]"
bea21587cf35f9d373314dd67c24b99fd0e11e49,updated makefile moved commands into cmake and fixed try compile,[],Source/cmMakefile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_763.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_763.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_763.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1814.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1814.cpp,898,867,909,-1,"sprintf(tmp,""Version %d.%d"", cmMakefile::GetMajorVersion(),
          cmMakefile::GetMinorVersion());",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1503.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1503.cpp,"{
  // Open the supplied filename
  
  // Loop over all registered commands and print out documentation
  const char *name;
  const char *terse;
  const char *full;
  char tmp[1024];
  sprintf(tmp,""Version %d.%d"", cmMakefile::GetMajorVersion(),
          cmMakefile::GetMinorVersion());
  f << ""<html>\n"";
  f << ""<h1>Documentation for commands of CMake "" << tmp << ""</h1>\n"";
  f << ""<ul>\n"";
  for(RegisteredCommandsMap::iterator j = m_Commands.begin();
      j != m_Commands.end(); ++j)
    {
    name = (*j).second->GetName();
    terse = (*j).second->GetTerseDocumentation();
    full = (*j).second->GetFullDocumentation();
    f << ""<li><b>"" << name << ""</b> - "" << terse << std::endl
      << ""<br><i>Usage:</i> "" << full << ""</li>"" << std::endl << std::endl;
    }
  f << ""</ul></html>\n"";
  return 1;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1503.cpp,"[0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 65, 0, 0, 4, 5, 0, 0, 2, 12, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 9, 0, 4, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1503.cpp,9,"[""char *"", ""constant"", ""cmMakefile :: GetMajorVersion_ret"", ""cmMakefile :: GetMinorVersion_ret""]",[]
25ff4552b3d17c9c4f601c7f488710c4350323d1,new arch,[],Source/MFCDialog/CMakeSetupDialog.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_765.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_765.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_765.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1817.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1817.cpp,266,265,268,267,"sprintf(tmp,""Version %d.%d - %s"", cmMakefile::GetMajorVersion(),
          cmMakefile::GetMinorVersion(), cmMakefile::GetReleaseVersion());","sprintf(tmp,""Version %d.%d - %s"", cmake::GetMajorVersion(),
          cmake::GetMinorVersion(), cmake::GetReleaseVersion());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1505.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1505.cpp,"{
  CDialog::OnInitDialog();
  this->DragAcceptFiles(true);

  // Add ""Create shortcut"" menu item to system menu.

  // IDM_CREATESHORTCUT must be in the system command range.
  ASSERT((IDM_CREATESHORTCUT & 0xFFF0) == IDM_CREATESHORTCUT);
  ASSERT(IDM_CREATESHORTCUT < 0xF000);

  // Add ""About..."" menu item to system menu.

  // IDM_ABOUTBOX must be in the system command range.
  ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
  ASSERT(IDM_ABOUTBOX < 0xF000);

  CMenu* pSysMenu = GetSystemMenu(FALSE);
  if (pSysMenu != NULL)
    {
    CString strCreateShortcutMenu;
    strCreateShortcutMenu.LoadString(IDS_CREATESHORTCUT);
    if (!strCreateShortcutMenu.IsEmpty())
      {
      pSysMenu->AppendMenu(MF_SEPARATOR);
      pSysMenu->AppendMenu(MF_STRING, 
                           IDM_CREATESHORTCUT, 
                           strCreateShortcutMenu);
      }

    CString strAboutMenu;
    strAboutMenu.LoadString(IDS_ABOUTBOX);
    if (!strAboutMenu.IsEmpty())
      {
      pSysMenu->AppendMenu(MF_SEPARATOR);
      pSysMenu->AppendMenu(MF_STRING, 
                           IDM_ABOUTBOX, 
                           strAboutMenu);
      }
    }

  // Set the icon for this dialog.  The framework does this automatically
  //  when the application's main window is not a dialog
  SetIcon(m_hIcon, TRUE);			// Set big icon
  SetIcon(m_hIcon, FALSE);		// Set small icon
  // Load source and build dirs from registry
  this->LoadFromRegistry();
  this->m_CMakeInstance = new cmake;
  std::vector<std::string> names;
  this->m_CMakeInstance->GetRegisteredGenerators(names);
  for(std::vector<std::string>::iterator i = names.begin();
      i != names.end(); ++i)
    {
    m_GeneratorChoice.AddString(i->c_str());
    }
  if (m_GeneratorChoiceString == _T("""")) 
    {
    m_GeneratorChoiceString = ""Visual Studio 6"";
    }

  // try to load the cmake cache from disk
  this->LoadCacheFromDiskToGUI();
  m_WhereBuildControl.LimitText(2048);
  m_WhereSourceControl.LimitText(2048);
  m_GeneratorChoice.LimitText(2048);
    
  // Set the version number
  char tmp[1024];
  sprintf(tmp,""Version %d.%d - %s"", cmMakefile::GetMajorVersion(),
          cmMakefile::GetMinorVersion(), cmMakefile::GetReleaseVersion());
  SetDlgItemText(IDC_CMAKE_VERSION, tmp);
  this->UpdateData(FALSE);
  return TRUE;  // return TRUE  unless you set the focus to a control
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1505.cpp,"[4, 0, 1, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 146, 0, 0, 5, 6, 0, 0, 3, 12, 0, 0, 0, 0, 1, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 5, 4, 0, 0, 36, 0, 0, 26, 0, 36, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1505.cpp,68,"[""char *"", ""constant"", ""cmMakefile :: GetMajorVersion_ret"", ""cmMakefile :: GetMinorVersion_ret"", ""cmMakefile :: GetReleaseVersion_ret""]",[]
2c7e9b3b59cda840adc2aa4c3bfe1ffa0707be99,new architecture,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_766.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_766.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_766.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1818.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1818.cpp,362,368,376,386,"sprintf(firstLine,  ""Press [c] to configure"");","sprintf(firstLine,  ""Press [c] to configure                                   "");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1506.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1506.cpp,"{
      sprintf(firstLine,  ""Press [c] to configure"");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1506.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1506.cpp,31,"[""char *"", ""string""]","[""unkown"", ""!""]"
2c7e9b3b59cda840adc2aa4c3bfe1ffa0707be99,new architecture,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_766.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_766.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_766.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1819.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1819.cpp,504,514,506,516,"sprintf(vertmp,""CMake Version %d.%d - %s"", cmMakefile::GetMajorVersion(),
	  cmMakefile::GetMinorVersion(),cmMakefile::GetReleaseVersion());","sprintf(vertmp,""CMake Version %d.%d - %s"", cmake::GetMajorVersion(),
	  cmake::GetMinorVersion(),cmake::GetReleaseVersion());",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1507.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1507.cpp,"{
  int x,y;
  getmaxyx(stdscr, y, x);
  // If window size is too small, display error and return
  if ( x < cmCursesMainForm::MIN_WIDTH  || 
       x < m_InitialWidth               ||
       y < cmCursesMainForm::MIN_HEIGHT )
    {
    curses_clear();
    curses_move(0,0);
    char fmt[] = ""Window is too small. A size of at least %dx%d is required."";
    printw(fmt,
	   (cmCursesMainForm::MIN_WIDTH < m_InitialWidth ?
	    m_InitialWidth : cmCursesMainForm::MIN_WIDTH), 
	   cmCursesMainForm::MIN_HEIGHT);
    touchwin(stdscr); 
    wrefresh(stdscr); 
    return;
    }

  // Get the key of the current entry
  FIELD* cur = current_field(m_Form);
  int index = field_index(cur);
  cmCursesWidget* lbl = reinterpret_cast<cmCursesWidget*>(field_userptr(
    m_Fields[index-2]));
  const char* curField = lbl->GetValue();

  // Get the help string of the current entry
  // and add it to the help string
  char help[128];
  const char* helpString;
  cmCacheManager::CacheEntry *entry = 
    this->m_CMakeInstance->GetCacheManager()->GetCacheEntry(curField);
  if (entry)
    {
    helpString = entry->m_HelpString.c_str();
    strncpy(help, helpString, 127);
    help[127] = '\0';
    }
  else
    {
    sprintf(help,"" "");
    }


  // Join the key, help string and pad with spaces
  // (or truncate) as necessary
  char bar[cmCursesMainForm::MAX_WIDTH];
  int i, curFieldLen = strlen(curField);
  int helpLen = strlen(help);

  int width;
  if (x < cmCursesMainForm::MAX_WIDTH )
    {
    width = x;
    }
  else
    {
    width = cmCursesMainForm::MAX_WIDTH;
    }

  if (curFieldLen >= width)
    {
    strncpy(bar, curField, width);
    }
  else
    {
    strcpy(bar, curField);
    bar[curFieldLen] = ':';
    bar[curFieldLen+1] = ' ';
    if (curFieldLen + helpLen + 2 >= width)
      {
      strncpy(bar+curFieldLen+2, help, width
	- curFieldLen - 2);
      }
    else
      {
      strcpy(bar+curFieldLen+2, help);
      for(i=curFieldLen+helpLen+2; i < width; ++i) 
	{ 
	bar[i] = ' '; 
	}
      }
    }

  bar[width] = '\0';

  // Display CMake version info on the next line
  // We want to display this on the right
  char version[cmCursesMainForm::MAX_WIDTH];
  char vertmp[128];
  sprintf(vertmp,""CMake Version %d.%d - %s"", cmMakefile::GetMajorVersion(),
	  cmMakefile::GetMinorVersion(),cmMakefile::GetReleaseVersion());
  int sideSpace = (width-strlen(vertmp));
  for(i=0; i<sideSpace; i++) { version[i] = ' '; }
  sprintf(version+sideSpace, ""%s"", vertmp);
  version[width] = '\0';

  // Now print both lines
  curses_move(y-5,0);
  attron(A_STANDOUT);
  printw(bar);
  attroff(A_STANDOUT);  
  curses_move(y-4,0);
  printw(version);
  pos_form_cursor(m_Form);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1507.cpp,"[5, 0, 2, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 2, 207, 0, 0, 16, 18, 0, 0, 11, 29, 0, 0, 0, 0, 5, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 1, 117, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 13, 0, 8, 6, 5, 0, 36, 0, 0, 31, 0, 51, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1507.cpp,92,"[""char *"", ""constant"", ""cmMakefile :: GetMajorVersion_ret"", ""cmMakefile :: GetMinorVersion_ret"", ""cmMakefile :: GetReleaseVersion_ret""]","[""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""||"", ""||""]"
20b1d940a407c4e8184e0aff73fa76ce0dafcb2b,"BUG: Generated call to Tcl_CreateCommand for vtkCommand should cast pointer to extern ""C"" version.",[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_769.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_769.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_769.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1825.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1825.cpp,229,229,231,231,,"fprintf(fout,
          ""extern \""C\""\n""
          ""{\n""
          ""  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, char *[]);\n""
          ""}\n""
          ""\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1509.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1509.cpp,"(i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());
    fprintf(fout,""ClientData %sNewCommand();\n"",classes[i].c_str());
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1509.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 5, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1509.cpp,22,[],"[""null"", ""classes . size_ret"", ""<""]"
20b1d940a407c4e8184e0aff73fa76ce0dafcb2b,"BUG: Generated call to Tcl_CreateCommand for vtkCommand should cast pointer to extern ""C"" version.",[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_769.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_769.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_769.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1826.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1826.cpp,300,307,302,309,"fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",vtkCommand,\n		    (ClientData *)NULL, NULL);\n\n"");
    };","fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",\n""
                 ""                    reinterpret_cast<vtkTclCommandType>(vtkCommand),\n""
                 ""                    (ClientData *)NULL, NULL);\n\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1510.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1510.cpp,"{
    fprintf(fout,
	    ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");
    fprintf(fout,
            ""  Tcl_CreateExitHandler(vtkCommonDeleteAssocData,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",vtkCommand,\n		    (ClientData *)NULL, NULL);\n\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1510.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 10, 0, 20, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1510.cpp,93,"[""FILE *"", ""string""]","[""strcmp_ret"", ""!""]"
a07cdc75e19f957b8ea3c6d5cd35514372eeb21a,use stream not sprintf,[],Source/cmSystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_770.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_770.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_770.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1827.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1827.cpp,997,997,1000,1000,"sprintf(msg, ""FilesDiffer failed to read files (allocated: %lu, source: %lu, dest: %lu)"", statSource.st_size, finSource.gcount(), finDestination.gcount());","msg << ""FilesDiffer failed to read files (allocated: "" 
        << statSource.st_size << "", read source: "" <<  finSource.gcount() 
        << "", read dest: "" << finDestination.gcount() << std::ends;",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1511.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1511.cpp,"{
    char msg[256];
    sprintf(msg, ""FilesDiffer failed to read files (allocated: %lu, source: %lu, dest: %lu)"", statSource.st_size, finSource.gcount(), finDestination.gcount());
    cmSystemTools::Error(msg);
    delete [] source_buf;
    delete [] dest_buf;
    return false;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1511.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 1, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1511.cpp,49,"[""char *"", ""string"", ""member"", ""finSource . gcount_ret"", ""finDestination . gcount_ret""]","[""member"", ""finSource . gcount_ret"", ""!="", ""member"", ""finDestination . gcount_ret"", ""!="", ""||""]"
a07cdc75e19f957b8ea3c6d5cd35514372eeb21a,use stream not sprintf,[],Source/cmSystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_770.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_770.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_770.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1828.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1828.cpp,1106,1105,1109,1108,"sprintf(msg, ""CopyFile failed to copy files (sizes differ, source: %lu, dest: %lu)"", statSource.st_size, statDestination.st_size);","msg << ""CopyFile failed to copy files (sizes differ, source: "" 
        << statSource.st_size << "" , dest: "" << statDestination.st_size 
        << std::ends;",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1512.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1512.cpp,"{
    char msg[256];
    sprintf(msg, ""CopyFile failed to copy files (sizes differ, source: %lu, dest: %lu)"", statSource.st_size, statDestination.st_size);
    cmSystemTools::Error(msg);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1512.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1512.cpp,85,"[""char *"", ""string"", ""member"", ""member""]","[""member"", ""member"", ""!=""]"
95519ef1b7dcf4193aeccb1a0bc7f3344678ce8e,ENH: add -R (similar to ctest but use substr instead of regexp). indent.,[],Source/cmCreateTestSourceList.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_772.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_772.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_772.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1831.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1831.cpp,80,83,108,-1,"fout << ""    printf(\""Available tests:\\n\"");\n"";",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1515.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1515.cpp,"{
  if (argsIn.size() < 3)
    {
      this->SetError(""called with wrong number of arguments."");
      return false;
    }

  std::vector<std::string> args;
  cmSystemTools::ExpandListArguments(argsIn, args, true);
  
  std::vector<std::string>::iterator i = args.begin();

  // Name of the source list

  const char* sourceList = i->c_str();
  ++i;

  // Name of the test driver

  std::string driver = m_Makefile->GetCurrentOutputDirectory();
  driver += ""/"";
  driver += *i;
  driver += "".cxx"";
  ++i;

  std::ofstream fout(driver.c_str());
  if(!fout)
    {
    std::string err = ""Could not create file "";
    err += driver;
    err += "" for cmCreateTestSourceList command."";
    this->SetError(err.c_str());
    return false;
    }

  // Create the test driver file

  fout << ""#include <stdio.h>\n"";
  fout << ""#include <string.h>\n"";
  fout << ""// forward declare test functions\n"";

  std::vector<std::string>::iterator testsBegin = i;
  std::vector<std::string> tests_filename;

  // The rest of the arguments consist of a list of test source files.
  // Sadly, they can be in directories. Let's modify each arg to get
  // a unique function name for the corresponding test, and push the 
  // real source filename to the tests_filename var (used at the end). 
  // For the moment:
  //   - replace spaces ' ', ':' and '/' with underscores '_'

  for(i = testsBegin; i != args.end(); ++i)
    {
    tests_filename.push_back(*i);
    cmSystemTools::ConvertToUnixSlashes(*i);
    cmSystemTools::ReplaceString(*i, "" "", ""_"");
    cmSystemTools::ReplaceString(*i, ""/"", ""_"");
    cmSystemTools::ReplaceString(*i, "":"", ""_"");
    fout << ""int "" << *i << ""(int, char**);\n"";
    }

  fout << ""// Create map \n"";
  fout << ""typedef int (*MainFuncPointer)(int , char**);\n"";
  fout << ""struct functionMapEntry\n""
       << ""{\n""
       << ""const char* name;\n""
       << ""MainFuncPointer func;\n""
       << ""};\n\n"";
  fout << ""functionMapEntry cmakeGeneratedFunctionMapEntries[] = {\n"";

  int numTests = 0;
  for(i = testsBegin; i != args.end(); ++i)
    {
    fout << ""{\"""" << *i << ""\"", "" << *i << ""},\n"";
    numTests++;
    }

  fout << ""};\n"";
  fout << ""int main(int ac, char** av)\n""
       << ""{\n"";
  fout << ""  int NumTests = "" << numTests << "";\n"";
  fout << ""  int i;\n"";
  fout << ""  if(ac < 2)\n"";
  fout << ""    {\n"";
  fout << ""    // if there is only one test, then run it with the arguments\n"";
  fout << ""    if(NumTests == 1)\n"";
  fout << ""      { return (*cmakeGeneratedFunctionMapEntries[0].func)(ac, av); }\n"";
  fout << ""    printf(\""Available tests:\\n\"");\n"";
  fout << ""    for(i =0; i < NumTests; ++i)\n"";
  fout << ""      {\n"";
  fout << ""      printf(\""%d. %s\\n\"", i, cmakeGeneratedFunctionMapEntries[i].name);\n"";
  fout << ""      }\n"";
  fout << ""    printf(\""To run a test, enter the test number: \"");\n"";
  fout << ""    int testNum = 0;\n"";
  fout << ""    scanf(\""%d\"", &testNum);\n"";
  fout << ""    if(testNum >= NumTests)\n"";
  fout << ""    {\n"";
  fout << ""    printf(\""%d is an invalid test number.\\n\"", testNum);\n"";
  fout << ""    return -1;\n"";
  fout << ""    }\n"";
  fout << ""    return (*cmakeGeneratedFunctionMapEntries[testNum].func)(ac-1, av+1);\n"";
  fout << ""    }\n"";
  fout << ""  for(i =0; i < NumTests; ++i)\n"";
  fout << ""    {\n"";
  fout << ""    if(strcmp(cmakeGeneratedFunctionMapEntries[i].name, av[1]) == 0)\n"";
  fout << ""      {\n"";
  fout << ""      return (*cmakeGeneratedFunctionMapEntries[i].func)(ac-1, av+1);\n"";
  fout << ""      }\n"";
  fout << ""    }\n"";
  fout << ""  // if there is only one test, then run it with the arguments\n"";
  fout << ""  if(NumTests == 1)\n"";
  fout << ""    { return (*cmakeGeneratedFunctionMapEntries[0].func)(ac, av); }\n"";
  fout << ""  printf(\""Available tests:\\n\"");\n"";
  fout << ""  for(i =0; i < NumTests; ++i)\n"";
  fout << ""    {\n"";
  fout << ""    printf(\""%d. %s\\n\"", i, cmakeGeneratedFunctionMapEntries[i].name);\n"";
  fout << ""    }\n"";
  fout << ""  printf(\""Failed: %s is an invalid test name.\\n\"", av[1]);\n"";
  fout << ""  return -1;\n"";
  fout << ""}\n"";
  fout.close();

  // Create the source list

  cmSourceFile cfile;
  cfile.SetIsAnAbstractClass(false);
  cfile.SetName(args[1].c_str(), 
                m_Makefile->GetCurrentOutputDirectory(),
                ""cxx"", 
                false);
  m_Makefile->AddSource(cfile, sourceList);
  
  for(i = tests_filename.begin(); i != tests_filename.end(); ++i)
    {
    cmSourceFile cfile;
    cfile.SetIsAnAbstractClass(false);
    cfile.SetName(i->c_str(), 
                  m_Makefile->GetCurrentDirectory(),
                  ""cxx"", 
                  false);
    m_Makefile->AddSource(cfile, sourceList);
    }

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1515.cpp,"[2, 0, 3, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 1, 230, 0, 0, 11, 11, 0, 0, 9, 84, 0, 0, 0, 0, 1, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 1, 0, 5, 2, 0, 0, 34, 0, 0, 74, 0, 35, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1515.cpp,88,[],"[""std :: ofstream"", ""!"", ""!""]"
95519ef1b7dcf4193aeccb1a0bc7f3344678ce8e,ENH: add -R (similar to ctest but use substr instead of regexp). indent.,[],Source/cmCreateTestSourceList.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_772.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_772.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_772.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1831.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1831.cpp,80,83,111,-1,"fout << ""      printf(\""%d. %s\\n\"", i, cmakeGeneratedFunctionMapEntries[i].name);\n"";",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1516.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1516.cpp,"{
  if (argsIn.size() < 3)
    {
      this->SetError(""called with wrong number of arguments."");
      return false;
    }

  std::vector<std::string> args;
  cmSystemTools::ExpandListArguments(argsIn, args, true);
  
  std::vector<std::string>::iterator i = args.begin();

  // Name of the source list

  const char* sourceList = i->c_str();
  ++i;

  // Name of the test driver

  std::string driver = m_Makefile->GetCurrentOutputDirectory();
  driver += ""/"";
  driver += *i;
  driver += "".cxx"";
  ++i;

  std::ofstream fout(driver.c_str());
  if(!fout)
    {
    std::string err = ""Could not create file "";
    err += driver;
    err += "" for cmCreateTestSourceList command."";
    this->SetError(err.c_str());
    return false;
    }

  // Create the test driver file

  fout << ""#include <stdio.h>\n"";
  fout << ""#include <string.h>\n"";
  fout << ""// forward declare test functions\n"";

  std::vector<std::string>::iterator testsBegin = i;
  std::vector<std::string> tests_filename;

  // The rest of the arguments consist of a list of test source files.
  // Sadly, they can be in directories. Let's modify each arg to get
  // a unique function name for the corresponding test, and push the 
  // real source filename to the tests_filename var (used at the end). 
  // For the moment:
  //   - replace spaces ' ', ':' and '/' with underscores '_'

  for(i = testsBegin; i != args.end(); ++i)
    {
    tests_filename.push_back(*i);
    cmSystemTools::ConvertToUnixSlashes(*i);
    cmSystemTools::ReplaceString(*i, "" "", ""_"");
    cmSystemTools::ReplaceString(*i, ""/"", ""_"");
    cmSystemTools::ReplaceString(*i, "":"", ""_"");
    fout << ""int "" << *i << ""(int, char**);\n"";
    }

  fout << ""// Create map \n"";
  fout << ""typedef int (*MainFuncPointer)(int , char**);\n"";
  fout << ""struct functionMapEntry\n""
       << ""{\n""
       << ""const char* name;\n""
       << ""MainFuncPointer func;\n""
       << ""};\n\n"";
  fout << ""functionMapEntry cmakeGeneratedFunctionMapEntries[] = {\n"";

  int numTests = 0;
  for(i = testsBegin; i != args.end(); ++i)
    {
    fout << ""{\"""" << *i << ""\"", "" << *i << ""},\n"";
    numTests++;
    }

  fout << ""};\n"";
  fout << ""int main(int ac, char** av)\n""
       << ""{\n"";
  fout << ""  int NumTests = "" << numTests << "";\n"";
  fout << ""  int i;\n"";
  fout << ""  if(ac < 2)\n"";
  fout << ""    {\n"";
  fout << ""    // if there is only one test, then run it with the arguments\n"";
  fout << ""    if(NumTests == 1)\n"";
  fout << ""      { return (*cmakeGeneratedFunctionMapEntries[0].func)(ac, av); }\n"";
  fout << ""    printf(\""Available tests:\\n\"");\n"";
  fout << ""    for(i =0; i < NumTests; ++i)\n"";
  fout << ""      {\n"";
  fout << ""      printf(\""%d. %s\\n\"", i, cmakeGeneratedFunctionMapEntries[i].name);\n"";
  fout << ""      }\n"";
  fout << ""    printf(\""To run a test, enter the test number: \"");\n"";
  fout << ""    int testNum = 0;\n"";
  fout << ""    scanf(\""%d\"", &testNum);\n"";
  fout << ""    if(testNum >= NumTests)\n"";
  fout << ""    {\n"";
  fout << ""    printf(\""%d is an invalid test number.\\n\"", testNum);\n"";
  fout << ""    return -1;\n"";
  fout << ""    }\n"";
  fout << ""    return (*cmakeGeneratedFunctionMapEntries[testNum].func)(ac-1, av+1);\n"";
  fout << ""    }\n"";
  fout << ""  for(i =0; i < NumTests; ++i)\n"";
  fout << ""    {\n"";
  fout << ""    if(strcmp(cmakeGeneratedFunctionMapEntries[i].name, av[1]) == 0)\n"";
  fout << ""      {\n"";
  fout << ""      return (*cmakeGeneratedFunctionMapEntries[i].func)(ac-1, av+1);\n"";
  fout << ""      }\n"";
  fout << ""    }\n"";
  fout << ""  // if there is only one test, then run it with the arguments\n"";
  fout << ""  if(NumTests == 1)\n"";
  fout << ""    { return (*cmakeGeneratedFunctionMapEntries[0].func)(ac, av); }\n"";
  fout << ""  printf(\""Available tests:\\n\"");\n"";
  fout << ""  for(i =0; i < NumTests; ++i)\n"";
  fout << ""    {\n"";
  fout << ""    printf(\""%d. %s\\n\"", i, cmakeGeneratedFunctionMapEntries[i].name);\n"";
  fout << ""    }\n"";
  fout << ""  printf(\""Failed: %s is an invalid test name.\\n\"", av[1]);\n"";
  fout << ""  return -1;\n"";
  fout << ""}\n"";
  fout.close();

  // Create the source list

  cmSourceFile cfile;
  cfile.SetIsAnAbstractClass(false);
  cfile.SetName(args[1].c_str(), 
                m_Makefile->GetCurrentOutputDirectory(),
                ""cxx"", 
                false);
  m_Makefile->AddSource(cfile, sourceList);
  
  for(i = tests_filename.begin(); i != tests_filename.end(); ++i)
    {
    cmSourceFile cfile;
    cfile.SetIsAnAbstractClass(false);
    cfile.SetName(i->c_str(), 
                  m_Makefile->GetCurrentDirectory(),
                  ""cxx"", 
                  false);
    m_Makefile->AddSource(cfile, sourceList);
    }

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1516.cpp,"[2, 0, 3, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 1, 230, 0, 0, 11, 11, 0, 0, 9, 84, 0, 0, 0, 0, 1, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 1, 0, 5, 2, 0, 0, 34, 0, 0, 74, 0, 35, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1516.cpp,91,[],"[""std :: ofstream"", ""!"", ""!""]"
95519ef1b7dcf4193aeccb1a0bc7f3344678ce8e,ENH: add -R (similar to ctest but use substr instead of regexp). indent.,[],Source/cmCreateTestSourceList.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_772.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_772.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_772.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1831.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1831.cpp,80,83,113,-1,"fout << ""    printf(\""To run a test, enter the test number: \"");\n"";",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1517.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1517.cpp,"{
  if (argsIn.size() < 3)
    {
      this->SetError(""called with wrong number of arguments."");
      return false;
    }

  std::vector<std::string> args;
  cmSystemTools::ExpandListArguments(argsIn, args, true);
  
  std::vector<std::string>::iterator i = args.begin();

  // Name of the source list

  const char* sourceList = i->c_str();
  ++i;

  // Name of the test driver

  std::string driver = m_Makefile->GetCurrentOutputDirectory();
  driver += ""/"";
  driver += *i;
  driver += "".cxx"";
  ++i;

  std::ofstream fout(driver.c_str());
  if(!fout)
    {
    std::string err = ""Could not create file "";
    err += driver;
    err += "" for cmCreateTestSourceList command."";
    this->SetError(err.c_str());
    return false;
    }

  // Create the test driver file

  fout << ""#include <stdio.h>\n"";
  fout << ""#include <string.h>\n"";
  fout << ""// forward declare test functions\n"";

  std::vector<std::string>::iterator testsBegin = i;
  std::vector<std::string> tests_filename;

  // The rest of the arguments consist of a list of test source files.
  // Sadly, they can be in directories. Let's modify each arg to get
  // a unique function name for the corresponding test, and push the 
  // real source filename to the tests_filename var (used at the end). 
  // For the moment:
  //   - replace spaces ' ', ':' and '/' with underscores '_'

  for(i = testsBegin; i != args.end(); ++i)
    {
    tests_filename.push_back(*i);
    cmSystemTools::ConvertToUnixSlashes(*i);
    cmSystemTools::ReplaceString(*i, "" "", ""_"");
    cmSystemTools::ReplaceString(*i, ""/"", ""_"");
    cmSystemTools::ReplaceString(*i, "":"", ""_"");
    fout << ""int "" << *i << ""(int, char**);\n"";
    }

  fout << ""// Create map \n"";
  fout << ""typedef int (*MainFuncPointer)(int , char**);\n"";
  fout << ""struct functionMapEntry\n""
       << ""{\n""
       << ""const char* name;\n""
       << ""MainFuncPointer func;\n""
       << ""};\n\n"";
  fout << ""functionMapEntry cmakeGeneratedFunctionMapEntries[] = {\n"";

  int numTests = 0;
  for(i = testsBegin; i != args.end(); ++i)
    {
    fout << ""{\"""" << *i << ""\"", "" << *i << ""},\n"";
    numTests++;
    }

  fout << ""};\n"";
  fout << ""int main(int ac, char** av)\n""
       << ""{\n"";
  fout << ""  int NumTests = "" << numTests << "";\n"";
  fout << ""  int i;\n"";
  fout << ""  if(ac < 2)\n"";
  fout << ""    {\n"";
  fout << ""    // if there is only one test, then run it with the arguments\n"";
  fout << ""    if(NumTests == 1)\n"";
  fout << ""      { return (*cmakeGeneratedFunctionMapEntries[0].func)(ac, av); }\n"";
  fout << ""    printf(\""Available tests:\\n\"");\n"";
  fout << ""    for(i =0; i < NumTests; ++i)\n"";
  fout << ""      {\n"";
  fout << ""      printf(\""%d. %s\\n\"", i, cmakeGeneratedFunctionMapEntries[i].name);\n"";
  fout << ""      }\n"";
  fout << ""    printf(\""To run a test, enter the test number: \"");\n"";
  fout << ""    int testNum = 0;\n"";
  fout << ""    scanf(\""%d\"", &testNum);\n"";
  fout << ""    if(testNum >= NumTests)\n"";
  fout << ""    {\n"";
  fout << ""    printf(\""%d is an invalid test number.\\n\"", testNum);\n"";
  fout << ""    return -1;\n"";
  fout << ""    }\n"";
  fout << ""    return (*cmakeGeneratedFunctionMapEntries[testNum].func)(ac-1, av+1);\n"";
  fout << ""    }\n"";
  fout << ""  for(i =0; i < NumTests; ++i)\n"";
  fout << ""    {\n"";
  fout << ""    if(strcmp(cmakeGeneratedFunctionMapEntries[i].name, av[1]) == 0)\n"";
  fout << ""      {\n"";
  fout << ""      return (*cmakeGeneratedFunctionMapEntries[i].func)(ac-1, av+1);\n"";
  fout << ""      }\n"";
  fout << ""    }\n"";
  fout << ""  // if there is only one test, then run it with the arguments\n"";
  fout << ""  if(NumTests == 1)\n"";
  fout << ""    { return (*cmakeGeneratedFunctionMapEntries[0].func)(ac, av); }\n"";
  fout << ""  printf(\""Available tests:\\n\"");\n"";
  fout << ""  for(i =0; i < NumTests; ++i)\n"";
  fout << ""    {\n"";
  fout << ""    printf(\""%d. %s\\n\"", i, cmakeGeneratedFunctionMapEntries[i].name);\n"";
  fout << ""    }\n"";
  fout << ""  printf(\""Failed: %s is an invalid test name.\\n\"", av[1]);\n"";
  fout << ""  return -1;\n"";
  fout << ""}\n"";
  fout.close();

  // Create the source list

  cmSourceFile cfile;
  cfile.SetIsAnAbstractClass(false);
  cfile.SetName(args[1].c_str(), 
                m_Makefile->GetCurrentOutputDirectory(),
                ""cxx"", 
                false);
  m_Makefile->AddSource(cfile, sourceList);
  
  for(i = tests_filename.begin(); i != tests_filename.end(); ++i)
    {
    cmSourceFile cfile;
    cfile.SetIsAnAbstractClass(false);
    cfile.SetName(i->c_str(), 
                  m_Makefile->GetCurrentDirectory(),
                  ""cxx"", 
                  false);
    m_Makefile->AddSource(cfile, sourceList);
    }

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1517.cpp,"[2, 0, 3, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 1, 230, 0, 0, 11, 11, 0, 0, 9, 84, 0, 0, 0, 0, 1, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 1, 0, 5, 2, 0, 0, 34, 0, 0, 74, 0, 35, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1517.cpp,93,[],"[""std :: ofstream"", ""!"", ""!""]"
95519ef1b7dcf4193aeccb1a0bc7f3344678ce8e,ENH: add -R (similar to ctest but use substr instead of regexp). indent.,[],Source/cmCreateTestSourceList.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_772.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_772.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_772.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1831.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1831.cpp,80,83,118,-1,"fout << ""    printf(\""%d is an invalid test number.\\n\"", testNum);\n"";",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1518.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1518.cpp,"{
  if (argsIn.size() < 3)
    {
      this->SetError(""called with wrong number of arguments."");
      return false;
    }

  std::vector<std::string> args;
  cmSystemTools::ExpandListArguments(argsIn, args, true);
  
  std::vector<std::string>::iterator i = args.begin();

  // Name of the source list

  const char* sourceList = i->c_str();
  ++i;

  // Name of the test driver

  std::string driver = m_Makefile->GetCurrentOutputDirectory();
  driver += ""/"";
  driver += *i;
  driver += "".cxx"";
  ++i;

  std::ofstream fout(driver.c_str());
  if(!fout)
    {
    std::string err = ""Could not create file "";
    err += driver;
    err += "" for cmCreateTestSourceList command."";
    this->SetError(err.c_str());
    return false;
    }

  // Create the test driver file

  fout << ""#include <stdio.h>\n"";
  fout << ""#include <string.h>\n"";
  fout << ""// forward declare test functions\n"";

  std::vector<std::string>::iterator testsBegin = i;
  std::vector<std::string> tests_filename;

  // The rest of the arguments consist of a list of test source files.
  // Sadly, they can be in directories. Let's modify each arg to get
  // a unique function name for the corresponding test, and push the 
  // real source filename to the tests_filename var (used at the end). 
  // For the moment:
  //   - replace spaces ' ', ':' and '/' with underscores '_'

  for(i = testsBegin; i != args.end(); ++i)
    {
    tests_filename.push_back(*i);
    cmSystemTools::ConvertToUnixSlashes(*i);
    cmSystemTools::ReplaceString(*i, "" "", ""_"");
    cmSystemTools::ReplaceString(*i, ""/"", ""_"");
    cmSystemTools::ReplaceString(*i, "":"", ""_"");
    fout << ""int "" << *i << ""(int, char**);\n"";
    }

  fout << ""// Create map \n"";
  fout << ""typedef int (*MainFuncPointer)(int , char**);\n"";
  fout << ""struct functionMapEntry\n""
       << ""{\n""
       << ""const char* name;\n""
       << ""MainFuncPointer func;\n""
       << ""};\n\n"";
  fout << ""functionMapEntry cmakeGeneratedFunctionMapEntries[] = {\n"";

  int numTests = 0;
  for(i = testsBegin; i != args.end(); ++i)
    {
    fout << ""{\"""" << *i << ""\"", "" << *i << ""},\n"";
    numTests++;
    }

  fout << ""};\n"";
  fout << ""int main(int ac, char** av)\n""
       << ""{\n"";
  fout << ""  int NumTests = "" << numTests << "";\n"";
  fout << ""  int i;\n"";
  fout << ""  if(ac < 2)\n"";
  fout << ""    {\n"";
  fout << ""    // if there is only one test, then run it with the arguments\n"";
  fout << ""    if(NumTests == 1)\n"";
  fout << ""      { return (*cmakeGeneratedFunctionMapEntries[0].func)(ac, av); }\n"";
  fout << ""    printf(\""Available tests:\\n\"");\n"";
  fout << ""    for(i =0; i < NumTests; ++i)\n"";
  fout << ""      {\n"";
  fout << ""      printf(\""%d. %s\\n\"", i, cmakeGeneratedFunctionMapEntries[i].name);\n"";
  fout << ""      }\n"";
  fout << ""    printf(\""To run a test, enter the test number: \"");\n"";
  fout << ""    int testNum = 0;\n"";
  fout << ""    scanf(\""%d\"", &testNum);\n"";
  fout << ""    if(testNum >= NumTests)\n"";
  fout << ""    {\n"";
  fout << ""    printf(\""%d is an invalid test number.\\n\"", testNum);\n"";
  fout << ""    return -1;\n"";
  fout << ""    }\n"";
  fout << ""    return (*cmakeGeneratedFunctionMapEntries[testNum].func)(ac-1, av+1);\n"";
  fout << ""    }\n"";
  fout << ""  for(i =0; i < NumTests; ++i)\n"";
  fout << ""    {\n"";
  fout << ""    if(strcmp(cmakeGeneratedFunctionMapEntries[i].name, av[1]) == 0)\n"";
  fout << ""      {\n"";
  fout << ""      return (*cmakeGeneratedFunctionMapEntries[i].func)(ac-1, av+1);\n"";
  fout << ""      }\n"";
  fout << ""    }\n"";
  fout << ""  // if there is only one test, then run it with the arguments\n"";
  fout << ""  if(NumTests == 1)\n"";
  fout << ""    { return (*cmakeGeneratedFunctionMapEntries[0].func)(ac, av); }\n"";
  fout << ""  printf(\""Available tests:\\n\"");\n"";
  fout << ""  for(i =0; i < NumTests; ++i)\n"";
  fout << ""    {\n"";
  fout << ""    printf(\""%d. %s\\n\"", i, cmakeGeneratedFunctionMapEntries[i].name);\n"";
  fout << ""    }\n"";
  fout << ""  printf(\""Failed: %s is an invalid test name.\\n\"", av[1]);\n"";
  fout << ""  return -1;\n"";
  fout << ""}\n"";
  fout.close();

  // Create the source list

  cmSourceFile cfile;
  cfile.SetIsAnAbstractClass(false);
  cfile.SetName(args[1].c_str(), 
                m_Makefile->GetCurrentOutputDirectory(),
                ""cxx"", 
                false);
  m_Makefile->AddSource(cfile, sourceList);
  
  for(i = tests_filename.begin(); i != tests_filename.end(); ++i)
    {
    cmSourceFile cfile;
    cfile.SetIsAnAbstractClass(false);
    cfile.SetName(i->c_str(), 
                  m_Makefile->GetCurrentDirectory(),
                  ""cxx"", 
                  false);
    m_Makefile->AddSource(cfile, sourceList);
    }

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1518.cpp,"[2, 0, 3, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 1, 230, 0, 0, 11, 11, 0, 0, 9, 84, 0, 0, 0, 0, 1, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 1, 0, 5, 2, 0, 0, 34, 0, 0, 74, 0, 35, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1518.cpp,98,[],"[""std :: ofstream"", ""!""]"
95519ef1b7dcf4193aeccb1a0bc7f3344678ce8e,ENH: add -R (similar to ctest but use substr instead of regexp). indent.,[],Source/cmCreateTestSourceList.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_772.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_772.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_772.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1831.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1831.cpp,80,83,133,-1,"fout << ""  printf(\""Available tests:\\n\"");\n"";",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1519.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1519.cpp,"{
  if (argsIn.size() < 3)
    {
      this->SetError(""called with wrong number of arguments."");
      return false;
    }

  std::vector<std::string> args;
  cmSystemTools::ExpandListArguments(argsIn, args, true);
  
  std::vector<std::string>::iterator i = args.begin();

  // Name of the source list

  const char* sourceList = i->c_str();
  ++i;

  // Name of the test driver

  std::string driver = m_Makefile->GetCurrentOutputDirectory();
  driver += ""/"";
  driver += *i;
  driver += "".cxx"";
  ++i;

  std::ofstream fout(driver.c_str());
  if(!fout)
    {
    std::string err = ""Could not create file "";
    err += driver;
    err += "" for cmCreateTestSourceList command."";
    this->SetError(err.c_str());
    return false;
    }

  // Create the test driver file

  fout << ""#include <stdio.h>\n"";
  fout << ""#include <string.h>\n"";
  fout << ""// forward declare test functions\n"";

  std::vector<std::string>::iterator testsBegin = i;
  std::vector<std::string> tests_filename;

  // The rest of the arguments consist of a list of test source files.
  // Sadly, they can be in directories. Let's modify each arg to get
  // a unique function name for the corresponding test, and push the 
  // real source filename to the tests_filename var (used at the end). 
  // For the moment:
  //   - replace spaces ' ', ':' and '/' with underscores '_'

  for(i = testsBegin; i != args.end(); ++i)
    {
    tests_filename.push_back(*i);
    cmSystemTools::ConvertToUnixSlashes(*i);
    cmSystemTools::ReplaceString(*i, "" "", ""_"");
    cmSystemTools::ReplaceString(*i, ""/"", ""_"");
    cmSystemTools::ReplaceString(*i, "":"", ""_"");
    fout << ""int "" << *i << ""(int, char**);\n"";
    }

  fout << ""// Create map \n"";
  fout << ""typedef int (*MainFuncPointer)(int , char**);\n"";
  fout << ""struct functionMapEntry\n""
       << ""{\n""
       << ""const char* name;\n""
       << ""MainFuncPointer func;\n""
       << ""};\n\n"";
  fout << ""functionMapEntry cmakeGeneratedFunctionMapEntries[] = {\n"";

  int numTests = 0;
  for(i = testsBegin; i != args.end(); ++i)
    {
    fout << ""{\"""" << *i << ""\"", "" << *i << ""},\n"";
    numTests++;
    }

  fout << ""};\n"";
  fout << ""int main(int ac, char** av)\n""
       << ""{\n"";
  fout << ""  int NumTests = "" << numTests << "";\n"";
  fout << ""  int i;\n"";
  fout << ""  if(ac < 2)\n"";
  fout << ""    {\n"";
  fout << ""    // if there is only one test, then run it with the arguments\n"";
  fout << ""    if(NumTests == 1)\n"";
  fout << ""      { return (*cmakeGeneratedFunctionMapEntries[0].func)(ac, av); }\n"";
  fout << ""    printf(\""Available tests:\\n\"");\n"";
  fout << ""    for(i =0; i < NumTests; ++i)\n"";
  fout << ""      {\n"";
  fout << ""      printf(\""%d. %s\\n\"", i, cmakeGeneratedFunctionMapEntries[i].name);\n"";
  fout << ""      }\n"";
  fout << ""    printf(\""To run a test, enter the test number: \"");\n"";
  fout << ""    int testNum = 0;\n"";
  fout << ""    scanf(\""%d\"", &testNum);\n"";
  fout << ""    if(testNum >= NumTests)\n"";
  fout << ""    {\n"";
  fout << ""    printf(\""%d is an invalid test number.\\n\"", testNum);\n"";
  fout << ""    return -1;\n"";
  fout << ""    }\n"";
  fout << ""    return (*cmakeGeneratedFunctionMapEntries[testNum].func)(ac-1, av+1);\n"";
  fout << ""    }\n"";
  fout << ""  for(i =0; i < NumTests; ++i)\n"";
  fout << ""    {\n"";
  fout << ""    if(strcmp(cmakeGeneratedFunctionMapEntries[i].name, av[1]) == 0)\n"";
  fout << ""      {\n"";
  fout << ""      return (*cmakeGeneratedFunctionMapEntries[i].func)(ac-1, av+1);\n"";
  fout << ""      }\n"";
  fout << ""    }\n"";
  fout << ""  // if there is only one test, then run it with the arguments\n"";
  fout << ""  if(NumTests == 1)\n"";
  fout << ""    { return (*cmakeGeneratedFunctionMapEntries[0].func)(ac, av); }\n"";
  fout << ""  printf(\""Available tests:\\n\"");\n"";
  fout << ""  for(i =0; i < NumTests; ++i)\n"";
  fout << ""    {\n"";
  fout << ""    printf(\""%d. %s\\n\"", i, cmakeGeneratedFunctionMapEntries[i].name);\n"";
  fout << ""    }\n"";
  fout << ""  printf(\""Failed: %s is an invalid test name.\\n\"", av[1]);\n"";
  fout << ""  return -1;\n"";
  fout << ""}\n"";
  fout.close();

  // Create the source list

  cmSourceFile cfile;
  cfile.SetIsAnAbstractClass(false);
  cfile.SetName(args[1].c_str(), 
                m_Makefile->GetCurrentOutputDirectory(),
                ""cxx"", 
                false);
  m_Makefile->AddSource(cfile, sourceList);
  
  for(i = tests_filename.begin(); i != tests_filename.end(); ++i)
    {
    cmSourceFile cfile;
    cfile.SetIsAnAbstractClass(false);
    cfile.SetName(i->c_str(), 
                  m_Makefile->GetCurrentDirectory(),
                  ""cxx"", 
                  false);
    m_Makefile->AddSource(cfile, sourceList);
    }

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1519.cpp,"[2, 0, 3, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 1, 230, 0, 0, 11, 11, 0, 0, 9, 84, 0, 0, 0, 0, 1, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 1, 0, 5, 2, 0, 0, 34, 0, 0, 74, 0, 35, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1519.cpp,113,[],"[""std :: ofstream"", ""!""]"
95519ef1b7dcf4193aeccb1a0bc7f3344678ce8e,ENH: add -R (similar to ctest but use substr instead of regexp). indent.,[],Source/cmCreateTestSourceList.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_772.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_772.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_772.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1831.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1831.cpp,80,83,136,-1,"fout << ""    printf(\""%d. %s\\n\"", i, cmakeGeneratedFunctionMapEntries[i].name);\n"";",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1520.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1520.cpp,"{
  if (argsIn.size() < 3)
    {
      this->SetError(""called with wrong number of arguments."");
      return false;
    }

  std::vector<std::string> args;
  cmSystemTools::ExpandListArguments(argsIn, args, true);
  
  std::vector<std::string>::iterator i = args.begin();

  // Name of the source list

  const char* sourceList = i->c_str();
  ++i;

  // Name of the test driver

  std::string driver = m_Makefile->GetCurrentOutputDirectory();
  driver += ""/"";
  driver += *i;
  driver += "".cxx"";
  ++i;

  std::ofstream fout(driver.c_str());
  if(!fout)
    {
    std::string err = ""Could not create file "";
    err += driver;
    err += "" for cmCreateTestSourceList command."";
    this->SetError(err.c_str());
    return false;
    }

  // Create the test driver file

  fout << ""#include <stdio.h>\n"";
  fout << ""#include <string.h>\n"";
  fout << ""// forward declare test functions\n"";

  std::vector<std::string>::iterator testsBegin = i;
  std::vector<std::string> tests_filename;

  // The rest of the arguments consist of a list of test source files.
  // Sadly, they can be in directories. Let's modify each arg to get
  // a unique function name for the corresponding test, and push the 
  // real source filename to the tests_filename var (used at the end). 
  // For the moment:
  //   - replace spaces ' ', ':' and '/' with underscores '_'

  for(i = testsBegin; i != args.end(); ++i)
    {
    tests_filename.push_back(*i);
    cmSystemTools::ConvertToUnixSlashes(*i);
    cmSystemTools::ReplaceString(*i, "" "", ""_"");
    cmSystemTools::ReplaceString(*i, ""/"", ""_"");
    cmSystemTools::ReplaceString(*i, "":"", ""_"");
    fout << ""int "" << *i << ""(int, char**);\n"";
    }

  fout << ""// Create map \n"";
  fout << ""typedef int (*MainFuncPointer)(int , char**);\n"";
  fout << ""struct functionMapEntry\n""
       << ""{\n""
       << ""const char* name;\n""
       << ""MainFuncPointer func;\n""
       << ""};\n\n"";
  fout << ""functionMapEntry cmakeGeneratedFunctionMapEntries[] = {\n"";

  int numTests = 0;
  for(i = testsBegin; i != args.end(); ++i)
    {
    fout << ""{\"""" << *i << ""\"", "" << *i << ""},\n"";
    numTests++;
    }

  fout << ""};\n"";
  fout << ""int main(int ac, char** av)\n""
       << ""{\n"";
  fout << ""  int NumTests = "" << numTests << "";\n"";
  fout << ""  int i;\n"";
  fout << ""  if(ac < 2)\n"";
  fout << ""    {\n"";
  fout << ""    // if there is only one test, then run it with the arguments\n"";
  fout << ""    if(NumTests == 1)\n"";
  fout << ""      { return (*cmakeGeneratedFunctionMapEntries[0].func)(ac, av); }\n"";
  fout << ""    printf(\""Available tests:\\n\"");\n"";
  fout << ""    for(i =0; i < NumTests; ++i)\n"";
  fout << ""      {\n"";
  fout << ""      printf(\""%d. %s\\n\"", i, cmakeGeneratedFunctionMapEntries[i].name);\n"";
  fout << ""      }\n"";
  fout << ""    printf(\""To run a test, enter the test number: \"");\n"";
  fout << ""    int testNum = 0;\n"";
  fout << ""    scanf(\""%d\"", &testNum);\n"";
  fout << ""    if(testNum >= NumTests)\n"";
  fout << ""    {\n"";
  fout << ""    printf(\""%d is an invalid test number.\\n\"", testNum);\n"";
  fout << ""    return -1;\n"";
  fout << ""    }\n"";
  fout << ""    return (*cmakeGeneratedFunctionMapEntries[testNum].func)(ac-1, av+1);\n"";
  fout << ""    }\n"";
  fout << ""  for(i =0; i < NumTests; ++i)\n"";
  fout << ""    {\n"";
  fout << ""    if(strcmp(cmakeGeneratedFunctionMapEntries[i].name, av[1]) == 0)\n"";
  fout << ""      {\n"";
  fout << ""      return (*cmakeGeneratedFunctionMapEntries[i].func)(ac-1, av+1);\n"";
  fout << ""      }\n"";
  fout << ""    }\n"";
  fout << ""  // if there is only one test, then run it with the arguments\n"";
  fout << ""  if(NumTests == 1)\n"";
  fout << ""    { return (*cmakeGeneratedFunctionMapEntries[0].func)(ac, av); }\n"";
  fout << ""  printf(\""Available tests:\\n\"");\n"";
  fout << ""  for(i =0; i < NumTests; ++i)\n"";
  fout << ""    {\n"";
  fout << ""    printf(\""%d. %s\\n\"", i, cmakeGeneratedFunctionMapEntries[i].name);\n"";
  fout << ""    }\n"";
  fout << ""  printf(\""Failed: %s is an invalid test name.\\n\"", av[1]);\n"";
  fout << ""  return -1;\n"";
  fout << ""}\n"";
  fout.close();

  // Create the source list

  cmSourceFile cfile;
  cfile.SetIsAnAbstractClass(false);
  cfile.SetName(args[1].c_str(), 
                m_Makefile->GetCurrentOutputDirectory(),
                ""cxx"", 
                false);
  m_Makefile->AddSource(cfile, sourceList);
  
  for(i = tests_filename.begin(); i != tests_filename.end(); ++i)
    {
    cmSourceFile cfile;
    cfile.SetIsAnAbstractClass(false);
    cfile.SetName(i->c_str(), 
                  m_Makefile->GetCurrentDirectory(),
                  ""cxx"", 
                  false);
    m_Makefile->AddSource(cfile, sourceList);
    }

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1520.cpp,"[2, 0, 3, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 1, 230, 0, 0, 11, 11, 0, 0, 9, 84, 0, 0, 0, 0, 1, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 1, 0, 5, 2, 0, 0, 34, 0, 0, 74, 0, 35, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1520.cpp,116,[],"[""std :: ofstream"", ""!""]"
95519ef1b7dcf4193aeccb1a0bc7f3344678ce8e,ENH: add -R (similar to ctest but use substr instead of regexp). indent.,[],Source/cmCreateTestSourceList.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_772.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_772.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_772.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1831.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1831.cpp,80,83,138,-1,"fout << ""  printf(\""Failed: %s is an invalid test name.\\n\"", av[1]);\n"";",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1521.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1521.cpp,"{
  if (argsIn.size() < 3)
    {
      this->SetError(""called with wrong number of arguments."");
      return false;
    }

  std::vector<std::string> args;
  cmSystemTools::ExpandListArguments(argsIn, args, true);
  
  std::vector<std::string>::iterator i = args.begin();

  // Name of the source list

  const char* sourceList = i->c_str();
  ++i;

  // Name of the test driver

  std::string driver = m_Makefile->GetCurrentOutputDirectory();
  driver += ""/"";
  driver += *i;
  driver += "".cxx"";
  ++i;

  std::ofstream fout(driver.c_str());
  if(!fout)
    {
    std::string err = ""Could not create file "";
    err += driver;
    err += "" for cmCreateTestSourceList command."";
    this->SetError(err.c_str());
    return false;
    }

  // Create the test driver file

  fout << ""#include <stdio.h>\n"";
  fout << ""#include <string.h>\n"";
  fout << ""// forward declare test functions\n"";

  std::vector<std::string>::iterator testsBegin = i;
  std::vector<std::string> tests_filename;

  // The rest of the arguments consist of a list of test source files.
  // Sadly, they can be in directories. Let's modify each arg to get
  // a unique function name for the corresponding test, and push the 
  // real source filename to the tests_filename var (used at the end). 
  // For the moment:
  //   - replace spaces ' ', ':' and '/' with underscores '_'

  for(i = testsBegin; i != args.end(); ++i)
    {
    tests_filename.push_back(*i);
    cmSystemTools::ConvertToUnixSlashes(*i);
    cmSystemTools::ReplaceString(*i, "" "", ""_"");
    cmSystemTools::ReplaceString(*i, ""/"", ""_"");
    cmSystemTools::ReplaceString(*i, "":"", ""_"");
    fout << ""int "" << *i << ""(int, char**);\n"";
    }

  fout << ""// Create map \n"";
  fout << ""typedef int (*MainFuncPointer)(int , char**);\n"";
  fout << ""struct functionMapEntry\n""
       << ""{\n""
       << ""const char* name;\n""
       << ""MainFuncPointer func;\n""
       << ""};\n\n"";
  fout << ""functionMapEntry cmakeGeneratedFunctionMapEntries[] = {\n"";

  int numTests = 0;
  for(i = testsBegin; i != args.end(); ++i)
    {
    fout << ""{\"""" << *i << ""\"", "" << *i << ""},\n"";
    numTests++;
    }

  fout << ""};\n"";
  fout << ""int main(int ac, char** av)\n""
       << ""{\n"";
  fout << ""  int NumTests = "" << numTests << "";\n"";
  fout << ""  int i;\n"";
  fout << ""  if(ac < 2)\n"";
  fout << ""    {\n"";
  fout << ""    // if there is only one test, then run it with the arguments\n"";
  fout << ""    if(NumTests == 1)\n"";
  fout << ""      { return (*cmakeGeneratedFunctionMapEntries[0].func)(ac, av); }\n"";
  fout << ""    printf(\""Available tests:\\n\"");\n"";
  fout << ""    for(i =0; i < NumTests; ++i)\n"";
  fout << ""      {\n"";
  fout << ""      printf(\""%d. %s\\n\"", i, cmakeGeneratedFunctionMapEntries[i].name);\n"";
  fout << ""      }\n"";
  fout << ""    printf(\""To run a test, enter the test number: \"");\n"";
  fout << ""    int testNum = 0;\n"";
  fout << ""    scanf(\""%d\"", &testNum);\n"";
  fout << ""    if(testNum >= NumTests)\n"";
  fout << ""    {\n"";
  fout << ""    printf(\""%d is an invalid test number.\\n\"", testNum);\n"";
  fout << ""    return -1;\n"";
  fout << ""    }\n"";
  fout << ""    return (*cmakeGeneratedFunctionMapEntries[testNum].func)(ac-1, av+1);\n"";
  fout << ""    }\n"";
  fout << ""  for(i =0; i < NumTests; ++i)\n"";
  fout << ""    {\n"";
  fout << ""    if(strcmp(cmakeGeneratedFunctionMapEntries[i].name, av[1]) == 0)\n"";
  fout << ""      {\n"";
  fout << ""      return (*cmakeGeneratedFunctionMapEntries[i].func)(ac-1, av+1);\n"";
  fout << ""      }\n"";
  fout << ""    }\n"";
  fout << ""  // if there is only one test, then run it with the arguments\n"";
  fout << ""  if(NumTests == 1)\n"";
  fout << ""    { return (*cmakeGeneratedFunctionMapEntries[0].func)(ac, av); }\n"";
  fout << ""  printf(\""Available tests:\\n\"");\n"";
  fout << ""  for(i =0; i < NumTests; ++i)\n"";
  fout << ""    {\n"";
  fout << ""    printf(\""%d. %s\\n\"", i, cmakeGeneratedFunctionMapEntries[i].name);\n"";
  fout << ""    }\n"";
  fout << ""  printf(\""Failed: %s is an invalid test name.\\n\"", av[1]);\n"";
  fout << ""  return -1;\n"";
  fout << ""}\n"";
  fout.close();

  // Create the source list

  cmSourceFile cfile;
  cfile.SetIsAnAbstractClass(false);
  cfile.SetName(args[1].c_str(), 
                m_Makefile->GetCurrentOutputDirectory(),
                ""cxx"", 
                false);
  m_Makefile->AddSource(cfile, sourceList);
  
  for(i = tests_filename.begin(); i != tests_filename.end(); ++i)
    {
    cmSourceFile cfile;
    cfile.SetIsAnAbstractClass(false);
    cfile.SetName(i->c_str(), 
                  m_Makefile->GetCurrentDirectory(),
                  ""cxx"", 
                  false);
    m_Makefile->AddSource(cfile, sourceList);
    }

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1521.cpp,"[2, 0, 3, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 1, 230, 0, 0, 11, 11, 0, 0, 9, 84, 0, 0, 0, 0, 1, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 1, 0, 5, 2, 0, 0, 34, 0, 0, 74, 0, 35, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1521.cpp,118,[],"[""std :: ofstream"", ""!""]"
6fc30804589219d63062fe20cc2cf3ce617a5ce6,"BUG: fix RunCommand again... back to system, but with GetShortPath",[],Source/cmSystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_774.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_774.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_774.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1834.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1834.cpp,974,974,1077,-1,"printf(""%s"",buf);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1522.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1522.cpp,"{
          ReadFile(read_stdout,buf,1023,&bread,NULL); //read the stdout pipe
          printf(""%s"",buf);
          memset(buf, 0, sizeof(buf));
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1522.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 14, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1522.cpp,83,"[""string"", ""char *""]","[""unsigned long"", ""int"", "">=""]"
6fc30804589219d63062fe20cc2cf3ce617a5ce6,"BUG: fix RunCommand again... back to system, but with GetShortPath",[],Source/cmSystemTools.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_774.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_774.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_774.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1835.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1835.cpp,974,974,1077,-1,"printf(""%s"",buf);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1523.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1523.cpp,"{
          ReadFile(read_stdout,buf,1023,&bread,NULL); //read the stdout pipe
          printf(""%s"",buf);
          memset(buf, 0, sizeof(buf));
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1523.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 14, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1523.cpp,83,"[""string"", ""char *""]","[""unsigned long"", ""int"", "">=""]"
d8088655ffdbe947c9e701e49f2b95d6525b6f5d,minor fix,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_776.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_776.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_776.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1837.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1837.cpp,270,273,272,275,"fprintf(fout,""void vtkCommonDeleteAssocData(ClientData cd, Tcl_Interp *)\n"");","fprintf(fout,""void vtkCommonDeleteAssocData(ClientData cd)\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1524.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1524.cpp,"{
    fprintf(fout,""void vtkCommonDeleteAssocData(ClientData cd, Tcl_Interp *)\n"");
    fprintf(fout,""  {\n"");
    fprintf(fout,""  vtkTclInterpStruct *tis = static_cast<vtkTclInterpStruct*>(cd);\n"");
    fprintf(fout,""  delete tis;\n  }\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1524.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1524.cpp,60,"[""FILE *"", ""string""]","[""strcmp_ret"", ""!""]"
d8088655ffdbe947c9e701e49f2b95d6525b6f5d,minor fix,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_776.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_776.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_776.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1838.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1838.cpp,297,300,298,301,"fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",vtkCommonDeleteAssocData,(ClientData *)info);\n"");","fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1525.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1525.cpp,"{
    fprintf(fout,
	    ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",vtkCommonDeleteAssocData,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",vtkCommand,\n		    (ClientData *)NULL, NULL);\n\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1525.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 9, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1525.cpp,86,"[""FILE *"", ""string""]","[""strcmp_ret"", ""!""]"
69cb66f7ffd5541f60026135fa521f0369210bab,Updated toolbar.,[],Source/CursesDialog/cmCursesLongMessageForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_777.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_777.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_777.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1839.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1839.cpp,89,89,91,91,"sprintf(firstLine,  ""O)k"");","sprintf(firstLine,  ""Press [e] to exit help"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1527.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1527.cpp,"{
  int x,y;
  getmaxyx(stdscr, y, x);
  if ( x < cmCursesMainForm::MIN_WIDTH  || 
       y < cmCursesMainForm::MIN_HEIGHT )
    {
    return;
    }
  char firstLine[512];
  sprintf(firstLine,  ""O)k"");

  curses_move(y-2,0);
  printw(firstLine);
  pos_form_cursor(m_Form);
  
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1527.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 26, 0, 0, 2, 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 1, 1, 0, 0, 5, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1527.cpp,10,"[""char *"", ""string""]","[""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""||"", ""!""]"
69cb66f7ffd5541f60026135fa521f0369210bab,Updated toolbar.,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_778.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_778.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_778.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1840.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1840.cpp,299,325,304,348,"sprintf(firstLine,  ""C)onfigure                 G)enerate and Exit            H)elp"");","sprintf(firstLine,  ""Press [c] to configure"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1528.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1528.cpp,"{
    sprintf(firstLine,  ""C)onfigure                 G)enerate and Exit            H)elp"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1528.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1528.cpp,12,"[""char *"", ""string""]","[""unkown""]"
69cb66f7ffd5541f60026135fa521f0369210bab,Updated toolbar.,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_778.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_778.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_778.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1840.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1840.cpp,299,325,308,344,"sprintf(firstLine,  ""C)onfigure                                               H)elp"");","sprintf(firstLine,  ""Press [c] to configure     Press [g] to generate and exit"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1529.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1529.cpp,"{
    sprintf(firstLine,  ""C)onfigure                                               H)elp"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1529.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1529.cpp,16,"[""char *"", ""string""]","[""unkown"", ""!""]"
69cb66f7ffd5541f60026135fa521f0369210bab,Updated toolbar.,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_778.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_778.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_778.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1840.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1840.cpp,299,325,312,352,"sprintf(secondLine, ""Q)uit Without Generating   T)oggle Advanced Mode (On)"");","sprintf(thirdLine,  ""Press [t] to toggle advanced mode (Currently On)"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1530.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1530.cpp,"{
    sprintf(secondLine, ""Q)uit Without Generating   T)oggle Advanced Mode (On)"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1530.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1530.cpp,20,"[""char *"", ""string""]","[""unkown""]"
69cb66f7ffd5541f60026135fa521f0369210bab,Updated toolbar.,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_778.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_778.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_778.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1840.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1840.cpp,299,325,316,359,"sprintf(secondLine, ""Q)uit Without Generating   T)oggle Advanced Mode (Off)"");","sprintf(secondLine, ""Press [h] for help         Press [q] to quit without generating"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1531.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1531.cpp,"{
    sprintf(secondLine, ""Q)uit Without Generating   T)oggle Advanced Mode (Off)"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1531.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1531.cpp,24,"[""char *"", ""string""]","[""unkown"", ""!""]"
69cb66f7ffd5541f60026135fa521f0369210bab,Updated toolbar.,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_778.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_778.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_778.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1840.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1840.cpp,299,325,319,356,,"sprintf(thirdLine,  ""Press [t] to toggle advanced mode (Currently Off)"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1532.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1532.cpp,"{
  int x,y;
  getmaxyx(stdscr, y, x);
  if ( x < cmCursesMainForm::MIN_WIDTH  || 
       y < cmCursesMainForm::MIN_HEIGHT )
    {
    return;
    }
  char firstLine[512], secondLine[512];
  if (m_OkToGenerate)
    {
    sprintf(firstLine,  ""C)onfigure                 G)enerate and Exit            H)elp"");
    }
  else
    {
    sprintf(firstLine,  ""C)onfigure                                               H)elp"");
    }
  if (m_AdvancedMode)
    {
    sprintf(secondLine, ""Q)uit Without Generating   T)oggle Advanced Mode (On)"");
    }
  else
    {
    sprintf(secondLine, ""Q)uit Without Generating   T)oggle Advanced Mode (Off)"");
    }

  curses_move(y-2,0);
  printw(firstLine);
  curses_move(y-1,0);
  printw(secondLine);
  pos_form_cursor(m_Form);
  
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1532.cpp,"[3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 40, 0, 0, 2, 4, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 3, 3, 2, 0, 10, 0, 0, 10, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1532.cpp,27,"[""int"", ""null""]","[""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""||"", ""!""]"
69cb66f7ffd5541f60026135fa521f0369210bab,Updated toolbar.,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_778.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_778.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_778.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1840.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1840.cpp,299,325,319,373,,"sprintf(firstLine, ""Page %d of %d"", cw->GetPage(), m_NumberOfPages);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1533.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1533.cpp,"{
  int x,y;
  getmaxyx(stdscr, y, x);
  if ( x < cmCursesMainForm::MIN_WIDTH  || 
       y < cmCursesMainForm::MIN_HEIGHT )
    {
    return;
    }
  char firstLine[512], secondLine[512];
  if (m_OkToGenerate)
    {
    sprintf(firstLine,  ""C)onfigure                 G)enerate and Exit            H)elp"");
    }
  else
    {
    sprintf(firstLine,  ""C)onfigure                                               H)elp"");
    }
  if (m_AdvancedMode)
    {
    sprintf(secondLine, ""Q)uit Without Generating   T)oggle Advanced Mode (On)"");
    }
  else
    {
    sprintf(secondLine, ""Q)uit Without Generating   T)oggle Advanced Mode (Off)"");
    }

  curses_move(y-2,0);
  printw(firstLine);
  curses_move(y-1,0);
  printw(secondLine);
  pos_form_cursor(m_Form);
  
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1533.cpp,"[3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 40, 0, 0, 2, 4, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 3, 3, 2, 0, 10, 0, 0, 10, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1533.cpp,27,"[""int"", ""null""]","[""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""||"", ""!""]"
521d8d9410c7c7bb5958357933c9759035f51828,Improvements to the curses interface.,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_780.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_780.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_780.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1845.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1845.cpp,205,242,240,306,"sprintf(firstLine,  ""C)onfigure             G)enerate and Exit"");","sprintf(firstLine,  ""C)onfigure                 G)enerate and Exit            H)elp"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1535.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1535.cpp,"{
  int x,y;
  getmaxyx(m_Window, y, x);
  if ( x < cmCursesMainForm::MIN_WIDTH  || 
       y < cmCursesMainForm::MIN_HEIGHT )
    {
    return;
    }
  char firstLine[512], secondLine[512];
  sprintf(firstLine,  ""C)onfigure             G)enerate and Exit"");
  sprintf(secondLine, ""Q)uit                  H)elp"");

  curses_move(y-2,0);
  printw(firstLine);
  curses_move(y-1,0);
  printw(secondLine);
  pos_form_cursor(m_Form);
  
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1535.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 34, 0, 0, 2, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 1, 1, 0, 0, 8, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1535.cpp,10,"[""char *"", ""string""]","[""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""||"", ""!""]"
521d8d9410c7c7bb5958357933c9759035f51828,Improvements to the curses interface.,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_780.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_780.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_780.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1845.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1845.cpp,205,242,241,314,"sprintf(secondLine, ""Q)uit                  H)elp"");","sprintf(secondLine, ""Q)uit Without Generating   T)oggle Advanced Mode (On)"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1536.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1536.cpp,"{
  int x,y;
  getmaxyx(m_Window, y, x);
  if ( x < cmCursesMainForm::MIN_WIDTH  || 
       y < cmCursesMainForm::MIN_HEIGHT )
    {
    return;
    }
  char firstLine[512], secondLine[512];
  sprintf(firstLine,  ""C)onfigure             G)enerate and Exit"");
  sprintf(secondLine, ""Q)uit                  H)elp"");

  curses_move(y-2,0);
  printw(firstLine);
  curses_move(y-1,0);
  printw(secondLine);
  pos_form_cursor(m_Form);
  
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1536.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 34, 0, 0, 2, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 1, 1, 0, 0, 8, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1536.cpp,11,"[""char *"", ""string""]","[""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""||"", ""!""]"
521d8d9410c7c7bb5958357933c9759035f51828,Improvements to the curses interface.,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_780.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_780.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_780.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1845.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1845.cpp,205,242,244,310,,"sprintf(firstLine,  ""C)onfigure                                               H)elp"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1537.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1537.cpp,"{
  int x,y;
  getmaxyx(m_Window, y, x);
  if ( x < cmCursesMainForm::MIN_WIDTH  || 
       y < cmCursesMainForm::MIN_HEIGHT )
    {
    return;
    }
  char firstLine[512], secondLine[512];
  sprintf(firstLine,  ""C)onfigure             G)enerate and Exit"");
  sprintf(secondLine, ""Q)uit                  H)elp"");

  curses_move(y-2,0);
  printw(firstLine);
  curses_move(y-1,0);
  printw(secondLine);
  pos_form_cursor(m_Form);
  
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1537.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 34, 0, 0, 2, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 1, 1, 0, 0, 8, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1537.cpp,14,"[""char *""]","[""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""||"", ""!""]"
521d8d9410c7c7bb5958357933c9759035f51828,Improvements to the curses interface.,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_780.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_780.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_780.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1845.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1845.cpp,205,242,244,318,,"sprintf(secondLine, ""Q)uit Without Generating   T)oggle Advanced Mode (Off)"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1538.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1538.cpp,"{
  int x,y;
  getmaxyx(m_Window, y, x);
  if ( x < cmCursesMainForm::MIN_WIDTH  || 
       y < cmCursesMainForm::MIN_HEIGHT )
    {
    return;
    }
  char firstLine[512], secondLine[512];
  sprintf(firstLine,  ""C)onfigure             G)enerate and Exit"");
  sprintf(secondLine, ""Q)uit                  H)elp"");

  curses_move(y-2,0);
  printw(firstLine);
  curses_move(y-1,0);
  printw(secondLine);
  pos_form_cursor(m_Form);
  
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1538.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 34, 0, 0, 2, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 1, 1, 0, 0, 8, 0, 0, 8, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1538.cpp,14,"[""char *""]","[""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""||"", ""!""]"
521d8d9410c7c7bb5958357933c9759035f51828,Improvements to the curses interface.,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_780.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_780.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_780.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1846.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1846.cpp,254,332,273,419,"sprintf(version,""(CMake Version %d.%d)"", cmMakefile::GetMajorVersion(),
	  cmMakefile::GetMinorVersion());","sprintf(vertmp,""CMake Version %d.%d"", cmMakefile::GetMajorVersion(),
	  cmMakefile::GetMinorVersion());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1539.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1539.cpp,"{
  int x,y;
  getmaxyx(m_Window, y, x);
  if ( x < cmCursesMainForm::MIN_WIDTH  || 
       y < cmCursesMainForm::MIN_HEIGHT )
    {
    curses_move(0,0);
    printw(""Window is too small. A size of at least %dx%d is required."",
	   cmCursesMainForm::MIN_WIDTH, cmCursesMainForm::MIN_HEIGHT);
    touchwin(m_Window); 
    wrefresh(m_Window); 
    return;
    }

  FIELD* cur = current_field(m_Form);
  int index = field_index(cur);
  char* curField = field_buffer(m_Fields[index-2], 0);

  char version[128];
  sprintf(version,""(CMake Version %d.%d)"", cmMakefile::GetMajorVersion(),
	  cmMakefile::GetMinorVersion());

  char bar[cmCursesMainForm::MAX_WIDTH];
  int i, curFieldLen = strlen(curField);
  int versionLen = strlen(version);
  int leftLen = cmCursesMainForm::IDEAL_WIDTH - versionLen;
  if (curFieldLen >= leftLen)
    {
    strncpy(bar, curField, leftLen);
    }
  else
    {
    strcpy(bar, curField);
    for(i=curFieldLen; i < leftLen; ++i) { bar[i] = ' '; }
    }
  strcpy(bar+leftLen, version);

  if ( x < cmCursesMainForm::MAX_WIDTH )
    {
    if (x > cmCursesMainForm::IDEAL_WIDTH )
      {
      for(i=cmCursesMainForm::IDEAL_WIDTH; i < x; i++)
	{
	bar[i] = ' ';
	}
      }
    bar[x] = '\0';
    }
  else
    {
    for(i=cmCursesMainForm::IDEAL_WIDTH; 
	i < cmCursesMainForm::MAX_WIDTH-1; i++)
      {
      bar[i] = ' ';
      }
    bar[cmCursesMainForm::MAX_WIDTH-1] = '\0';
    }

  curses_move(y-3,0);
  attron(A_STANDOUT);
  printw(bar);
  attroff(A_STANDOUT);  
  pos_form_cursor(m_Form);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1539.cpp,"[4, 0, 3, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 0, 142, 0, 0, 9, 11, 0, 0, 9, 16, 0, 0, 0, 0, 2, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 8, 0, 7, 4, 2, 0, 21, 0, 0, 19, 0, 33, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1539.cpp,20,"[""char *"", ""constant"", ""cmMakefile :: GetMajorVersion_ret"", ""cmMakefile :: GetMinorVersion_ret""]","[""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""||"", ""!""]"
521d8d9410c7c7bb5958357933c9759035f51828,Improvements to the curses interface.,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_780.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_780.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_780.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1846.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1846.cpp,254,332,279,363,,"sprintf(help,""%127s"", helpString);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1540.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1540.cpp,"{
  int x,y;
  getmaxyx(m_Window, y, x);
  if ( x < cmCursesMainForm::MIN_WIDTH  || 
       y < cmCursesMainForm::MIN_HEIGHT )
    {
    curses_move(0,0);
    printw(""Window is too small. A size of at least %dx%d is required."",
	   cmCursesMainForm::MIN_WIDTH, cmCursesMainForm::MIN_HEIGHT);
    touchwin(m_Window); 
    wrefresh(m_Window); 
    return;
    }

  FIELD* cur = current_field(m_Form);
  int index = field_index(cur);
  char* curField = field_buffer(m_Fields[index-2], 0);

  char version[128];
  sprintf(version,""(CMake Version %d.%d)"", cmMakefile::GetMajorVersion(),
	  cmMakefile::GetMinorVersion());

  char bar[cmCursesMainForm::MAX_WIDTH];
  int i, curFieldLen = strlen(curField);
  int versionLen = strlen(version);
  int leftLen = cmCursesMainForm::IDEAL_WIDTH - versionLen;
  if (curFieldLen >= leftLen)
    {
    strncpy(bar, curField, leftLen);
    }
  else
    {
    strcpy(bar, curField);
    for(i=curFieldLen; i < leftLen; ++i) { bar[i] = ' '; }
    }
  strcpy(bar+leftLen, version);

  if ( x < cmCursesMainForm::MAX_WIDTH )
    {
    if (x > cmCursesMainForm::IDEAL_WIDTH )
      {
      for(i=cmCursesMainForm::IDEAL_WIDTH; i < x; i++)
	{
	bar[i] = ' ';
	}
      }
    bar[x] = '\0';
    }
  else
    {
    for(i=cmCursesMainForm::IDEAL_WIDTH; 
	i < cmCursesMainForm::MAX_WIDTH-1; i++)
      {
      bar[i] = ' ';
      }
    bar[cmCursesMainForm::MAX_WIDTH-1] = '\0';
    }

  curses_move(y-3,0);
  attron(A_STANDOUT);
  printw(bar);
  attroff(A_STANDOUT);  
  pos_form_cursor(m_Form);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1540.cpp,"[4, 0, 3, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 0, 142, 0, 0, 9, 11, 0, 0, 9, 16, 0, 0, 0, 0, 2, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 8, 0, 7, 4, 2, 0, 21, 0, 0, 19, 0, 33, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1540.cpp,26,[],"[""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""||"", ""!""]"
521d8d9410c7c7bb5958357933c9759035f51828,Improvements to the curses interface.,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_780.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_780.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_780.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1846.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1846.cpp,254,332,279,367,,"sprintf(help,""%s"", helpString);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1541.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1541.cpp,"{
  int x,y;
  getmaxyx(m_Window, y, x);
  if ( x < cmCursesMainForm::MIN_WIDTH  || 
       y < cmCursesMainForm::MIN_HEIGHT )
    {
    curses_move(0,0);
    printw(""Window is too small. A size of at least %dx%d is required."",
	   cmCursesMainForm::MIN_WIDTH, cmCursesMainForm::MIN_HEIGHT);
    touchwin(m_Window); 
    wrefresh(m_Window); 
    return;
    }

  FIELD* cur = current_field(m_Form);
  int index = field_index(cur);
  char* curField = field_buffer(m_Fields[index-2], 0);

  char version[128];
  sprintf(version,""(CMake Version %d.%d)"", cmMakefile::GetMajorVersion(),
	  cmMakefile::GetMinorVersion());

  char bar[cmCursesMainForm::MAX_WIDTH];
  int i, curFieldLen = strlen(curField);
  int versionLen = strlen(version);
  int leftLen = cmCursesMainForm::IDEAL_WIDTH - versionLen;
  if (curFieldLen >= leftLen)
    {
    strncpy(bar, curField, leftLen);
    }
  else
    {
    strcpy(bar, curField);
    for(i=curFieldLen; i < leftLen; ++i) { bar[i] = ' '; }
    }
  strcpy(bar+leftLen, version);

  if ( x < cmCursesMainForm::MAX_WIDTH )
    {
    if (x > cmCursesMainForm::IDEAL_WIDTH )
      {
      for(i=cmCursesMainForm::IDEAL_WIDTH; i < x; i++)
	{
	bar[i] = ' ';
	}
      }
    bar[x] = '\0';
    }
  else
    {
    for(i=cmCursesMainForm::IDEAL_WIDTH; 
	i < cmCursesMainForm::MAX_WIDTH-1; i++)
      {
      bar[i] = ' ';
      }
    bar[cmCursesMainForm::MAX_WIDTH-1] = '\0';
    }

  curses_move(y-3,0);
  attron(A_STANDOUT);
  printw(bar);
  attroff(A_STANDOUT);  
  pos_form_cursor(m_Form);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1541.cpp,"[4, 0, 3, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 0, 142, 0, 0, 9, 11, 0, 0, 9, 16, 0, 0, 0, 0, 2, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 8, 0, 7, 4, 2, 0, 21, 0, 0, 19, 0, 33, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1541.cpp,26,[],"[""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""||"", ""!""]"
521d8d9410c7c7bb5958357933c9759035f51828,Improvements to the curses interface.,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_780.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_780.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_780.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1846.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1846.cpp,254,332,279,372,,"sprintf(help,"" "");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1542.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1542.cpp,"{
  int x,y;
  getmaxyx(m_Window, y, x);
  if ( x < cmCursesMainForm::MIN_WIDTH  || 
       y < cmCursesMainForm::MIN_HEIGHT )
    {
    curses_move(0,0);
    printw(""Window is too small. A size of at least %dx%d is required."",
	   cmCursesMainForm::MIN_WIDTH, cmCursesMainForm::MIN_HEIGHT);
    touchwin(m_Window); 
    wrefresh(m_Window); 
    return;
    }

  FIELD* cur = current_field(m_Form);
  int index = field_index(cur);
  char* curField = field_buffer(m_Fields[index-2], 0);

  char version[128];
  sprintf(version,""(CMake Version %d.%d)"", cmMakefile::GetMajorVersion(),
	  cmMakefile::GetMinorVersion());

  char bar[cmCursesMainForm::MAX_WIDTH];
  int i, curFieldLen = strlen(curField);
  int versionLen = strlen(version);
  int leftLen = cmCursesMainForm::IDEAL_WIDTH - versionLen;
  if (curFieldLen >= leftLen)
    {
    strncpy(bar, curField, leftLen);
    }
  else
    {
    strcpy(bar, curField);
    for(i=curFieldLen; i < leftLen; ++i) { bar[i] = ' '; }
    }
  strcpy(bar+leftLen, version);

  if ( x < cmCursesMainForm::MAX_WIDTH )
    {
    if (x > cmCursesMainForm::IDEAL_WIDTH )
      {
      for(i=cmCursesMainForm::IDEAL_WIDTH; i < x; i++)
	{
	bar[i] = ' ';
	}
      }
    bar[x] = '\0';
    }
  else
    {
    for(i=cmCursesMainForm::IDEAL_WIDTH; 
	i < cmCursesMainForm::MAX_WIDTH-1; i++)
      {
      bar[i] = ' ';
      }
    bar[cmCursesMainForm::MAX_WIDTH-1] = '\0';
    }

  curses_move(y-3,0);
  attron(A_STANDOUT);
  printw(bar);
  attroff(A_STANDOUT);  
  pos_form_cursor(m_Form);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1542.cpp,"[4, 0, 3, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 0, 142, 0, 0, 9, 11, 0, 0, 9, 16, 0, 0, 0, 0, 2, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 8, 0, 7, 4, 2, 0, 21, 0, 0, 19, 0, 33, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1542.cpp,26,[],"[""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""||"", ""!""]"
521d8d9410c7c7bb5958357933c9759035f51828,Improvements to the curses interface.,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_780.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_780.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_780.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1846.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1846.cpp,254,332,316,423,,"sprintf(version+sideSpace, ""%s"", vertmp);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1543.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1543.cpp,"{
  int x,y;
  getmaxyx(m_Window, y, x);
  if ( x < cmCursesMainForm::MIN_WIDTH  || 
       y < cmCursesMainForm::MIN_HEIGHT )
    {
    curses_move(0,0);
    printw(""Window is too small. A size of at least %dx%d is required."",
	   cmCursesMainForm::MIN_WIDTH, cmCursesMainForm::MIN_HEIGHT);
    touchwin(m_Window); 
    wrefresh(m_Window); 
    return;
    }

  FIELD* cur = current_field(m_Form);
  int index = field_index(cur);
  char* curField = field_buffer(m_Fields[index-2], 0);

  char version[128];
  sprintf(version,""(CMake Version %d.%d)"", cmMakefile::GetMajorVersion(),
	  cmMakefile::GetMinorVersion());

  char bar[cmCursesMainForm::MAX_WIDTH];
  int i, curFieldLen = strlen(curField);
  int versionLen = strlen(version);
  int leftLen = cmCursesMainForm::IDEAL_WIDTH - versionLen;
  if (curFieldLen >= leftLen)
    {
    strncpy(bar, curField, leftLen);
    }
  else
    {
    strcpy(bar, curField);
    for(i=curFieldLen; i < leftLen; ++i) { bar[i] = ' '; }
    }
  strcpy(bar+leftLen, version);

  if ( x < cmCursesMainForm::MAX_WIDTH )
    {
    if (x > cmCursesMainForm::IDEAL_WIDTH )
      {
      for(i=cmCursesMainForm::IDEAL_WIDTH; i < x; i++)
	{
	bar[i] = ' ';
	}
      }
    bar[x] = '\0';
    }
  else
    {
    for(i=cmCursesMainForm::IDEAL_WIDTH; 
	i < cmCursesMainForm::MAX_WIDTH-1; i++)
      {
      bar[i] = ' ';
      }
    bar[cmCursesMainForm::MAX_WIDTH-1] = '\0';
    }

  curses_move(y-3,0);
  attron(A_STANDOUT);
  printw(bar);
  attroff(A_STANDOUT);  
  pos_form_cursor(m_Form);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1543.cpp,"[4, 0, 3, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 0, 142, 0, 0, 9, 11, 0, 0, 9, 16, 0, 0, 0, 0, 2, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 8, 0, 7, 4, 2, 0, 21, 0, 0, 19, 0, 33, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1543.cpp,63,"[""unkown""]","[""int"", ""unkown"", ""<"", ""int"", ""unkown"", ""<"", ""||"", ""!""]"
4848c81428b8b8218eb86f23451ff32d78c039cd,Many improvements.,[],Source/CursesDialog/cmCursesMainForm.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_782.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_782.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_782.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1849.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1849.cpp,212,221,231,272,"sprintf(version,""CMake Version %d.%d"", cmMakefile::GetMajorVersion(),
	  cmMakefile::GetMinorVersion());","sprintf(version,""(CMake Version %d.%d)"", cmMakefile::GetMajorVersion(),
	  cmMakefile::GetMinorVersion());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1545.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1545.cpp,"{
  FIELD* cur = current_field(m_Form);
  int index = field_index(cur);
  char* text = field_buffer(m_Fields[index-2], 0);

  int x,y;
  getmaxyx(m_Window, y, x);
  move(y-1,0);
  printw(text);

  char version[128];
  sprintf(version,""CMake Version %d.%d"", cmMakefile::GetMajorVersion(),
	  cmMakefile::GetMinorVersion());
  int len = strlen(version);
  move(y-1, x-len);
  printw(version);

  pos_form_cursor(m_Form);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1545.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 48, 0, 0, 6, 7, 0, 0, 4, 7, 0, 0, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 2, 0, 0, 0, 0, 0, 13, 0, 0, 7, 0, 19, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1545.cpp,12,"[""char *"", ""constant"", ""cmMakefile :: GetMajorVersion_ret"", ""cmMakefile :: GetMinorVersion_ret""]",[]
b502515ad1a41b6487d3883db0c133f6e4fe4fe4,memory leak,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_783.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_783.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_783.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1851.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1851.cpp,290,298,291,299,"fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");","fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",vtkCommonDeleteAssocData,(ClientData *)info);\n"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1552.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1552.cpp,"{
    fprintf(fout,
	    ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",vtkCommand,\n		    (ClientData *)NULL, NULL);\n\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1552.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 9, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1552.cpp,78,"[""FILE *"", ""string""]","[""strcmp_ret"", ""!""]"
08a89bd8dc87fb904d10a0b1718e7c61da725c12,added regexp option,[],Source/ctest.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_786.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_786.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_786.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1855.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1855.cpp,125,128,130,131,"fprintf(stderr,""Testing %-30s "",args[0].c_str());","(name == ""ADD_TEST"")
        {
        if (this->m_UseRegExp && !var.find(args[0].c_str()))
          {
          continue;
          }
        fprintf(stderr,""Testing %-30s "",args[0].c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1553.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1553.cpp,"{
        fprintf(stderr,""Testing %-30s "",args[0].c_str());
        //std::cerr << ""Testing "" << args[0] << "" ... "";
        // find the test executable
        std::string testCommand = this->FindExecutable(args[1].c_str());
        // add the arguments
        std::vector<std::string>::iterator j = args.begin();
        ++j;
        ++j;
        for(;j != args.end(); ++j)
          {   
          testCommand += "" "";
          testCommand += *j;
          }
        /**
         * Run an executable command and put the stdout in output.
         */
        std::string output;
        int retVal;
        
        if (!cmSystemTools::RunCommand(testCommand.c_str(), output, 
                                       retVal, false) || retVal != 0)
          {
          std::cerr << "" Failed\n"";
          if (output != """")
            {
            std::cerr << output.c_str() << ""\n"";
            }
          failed++;
          }
        else
          {
          std::cerr << "" Passed\n"";
          if (output != """")
            {
            std::cerr << output.c_str() << ""\n"";
            }
          passed++;
          }
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1553.cpp,"[3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 74, 0, 0, 4, 4, 0, 0, 3, 12, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 4, 3, 1, 0, 11, 0, 0, 11, 0, 9, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1553.cpp,42,"[""unkown"", ""string"", ""args [ 0 ] . c_str_ret""]","[""std :: string"", ""string"", ""==""]"
a2a40b125918797471919f526edea2990e29bc69,updated to handle Tk commands compiled/linked separately. Useful for VTK Tk widgets for example.,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_788.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_788.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_788.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1860.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1860.cpp,211,241,214,252,"fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_SafeInit(Tcl_Interp *interp);}\n\n"",
	  kitName);","fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
	  kitName);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1554.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1554.cpp,"{
  unsigned int i;
  std::string tempOutputFile = outFileName + "".tmp"";
  FILE *fout = fopen(tempOutputFile.c_str(),""w"");
  if (!fout)
    {
    return false;
    }
  
  fprintf(fout,""#include \""vtkTclUtil.h\""\n"");
  
  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());
    fprintf(fout,""ClientData %sNewCommand();\n"",classes[i].c_str());
    }
  
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""int vtkCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"");
    fprintf(fout,""\nTcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkCommandLookup;\n"");
    }
  else
    {
    fprintf(fout,""\nextern Tcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkCommandLookup;\n"");
    }
  fprintf(fout,""extern void vtkTclDeleteObjectFromHash(void *);\n"");  
  fprintf(fout,""extern void vtkTclListInstances(Tcl_Interp *interp, ClientData arg);\n"");
  
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_SafeInit(Tcl_Interp *interp);}\n\n"",
	  kitName);
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n\n"",
	  kitName);
  
  /* create an extern ref to the generic delete function */
  fprintf(fout,""\n\nextern void vtkTclGenericDeleteObject(ClientData cd);\n\n"");

  /* the main declaration */
  fprintf(fout,""\n\nint VTK_EXPORT %s_SafeInit(Tcl_Interp *interp)\n{\n"",kitName);
  fprintf(fout,""  return %s_Init(interp);\n}\n"",kitName);
  
  fprintf(fout,""\n\nint VTK_EXPORT %s_Init(Tcl_Interp *interp)\n{\n"",
          kitName);
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,
	    ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",vtkCommand,\n		    (ClientData *)NULL, NULL);\n\n"");
    }
  
  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""  vtkTclCreateNew(interp,(char *) \""%s\"", %sNewCommand,\n"",
	    classes[i].c_str(), classes[i].c_str());
    fprintf(fout,""                  %sCommand);\n"",classes[i].c_str());
    }
  
  fprintf(fout,""  return TCL_OK;\n}\n"");
  fclose(fout);

  // copy the file if different
  cmSystemTools::CopyFileIfDifferent(tempOutputFile.c_str(),
                                     outFileName.c_str());
  cmSystemTools::RemoveFile(tempOutputFile.c_str());

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1554.cpp,"[3, 0, 2, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 0, 133, 0, 0, 3, 3, 0, 0, 4, 38, 0, 0, 0, 0, 1, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 5, 3, 1, 0, 47, 0, 0, 33, 0, 80, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1554.cpp,36,"[""FILE *"", ""string"", ""const char *""]","[""FILE *"", ""!"", ""!""]"
a2a40b125918797471919f526edea2990e29bc69,updated to handle Tk commands compiled/linked separately. Useful for VTK Tk widgets for example.,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_788.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_788.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_788.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1860.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1860.cpp,211,241,216,-1,"fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n\n"",
	  kitName);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1555.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1555.cpp,"{
  unsigned int i;
  std::string tempOutputFile = outFileName + "".tmp"";
  FILE *fout = fopen(tempOutputFile.c_str(),""w"");
  if (!fout)
    {
    return false;
    }
  
  fprintf(fout,""#include \""vtkTclUtil.h\""\n"");
  
  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());
    fprintf(fout,""ClientData %sNewCommand();\n"",classes[i].c_str());
    }
  
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""int vtkCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"");
    fprintf(fout,""\nTcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkCommandLookup;\n"");
    }
  else
    {
    fprintf(fout,""\nextern Tcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkCommandLookup;\n"");
    }
  fprintf(fout,""extern void vtkTclDeleteObjectFromHash(void *);\n"");  
  fprintf(fout,""extern void vtkTclListInstances(Tcl_Interp *interp, ClientData arg);\n"");
  
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_SafeInit(Tcl_Interp *interp);}\n\n"",
	  kitName);
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n\n"",
	  kitName);
  
  /* create an extern ref to the generic delete function */
  fprintf(fout,""\n\nextern void vtkTclGenericDeleteObject(ClientData cd);\n\n"");

  /* the main declaration */
  fprintf(fout,""\n\nint VTK_EXPORT %s_SafeInit(Tcl_Interp *interp)\n{\n"",kitName);
  fprintf(fout,""  return %s_Init(interp);\n}\n"",kitName);
  
  fprintf(fout,""\n\nint VTK_EXPORT %s_Init(Tcl_Interp *interp)\n{\n"",
          kitName);
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,
	    ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",vtkCommand,\n		    (ClientData *)NULL, NULL);\n\n"");
    }
  
  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""  vtkTclCreateNew(interp,(char *) \""%s\"", %sNewCommand,\n"",
	    classes[i].c_str(), classes[i].c_str());
    fprintf(fout,""                  %sCommand);\n"",classes[i].c_str());
    }
  
  fprintf(fout,""  return TCL_OK;\n}\n"");
  fclose(fout);

  // copy the file if different
  cmSystemTools::CopyFileIfDifferent(tempOutputFile.c_str(),
                                     outFileName.c_str());
  cmSystemTools::RemoveFile(tempOutputFile.c_str());

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1555.cpp,"[3, 0, 2, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 0, 133, 0, 0, 3, 3, 0, 0, 4, 38, 0, 0, 0, 0, 1, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 5, 3, 1, 0, 47, 0, 0, 33, 0, 80, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1555.cpp,38,"[""FILE *"", ""string"", ""const char *""]","[""FILE *"", ""!"", ""!""]"
a2a40b125918797471919f526edea2990e29bc69,updated to handle Tk commands compiled/linked separately. Useful for VTK Tk widgets for example.,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_788.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_788.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_788.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1860.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1860.cpp,211,241,220,256,"fprintf(fout,""\n\nextern void vtkTclGenericDeleteObject(ClientData cd);\n\n"");","fprintf(fout,""\nextern void vtkTclGenericDeleteObject(ClientData cd);\n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1556.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1556.cpp,"{
  unsigned int i;
  std::string tempOutputFile = outFileName + "".tmp"";
  FILE *fout = fopen(tempOutputFile.c_str(),""w"");
  if (!fout)
    {
    return false;
    }
  
  fprintf(fout,""#include \""vtkTclUtil.h\""\n"");
  
  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());
    fprintf(fout,""ClientData %sNewCommand();\n"",classes[i].c_str());
    }
  
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""int vtkCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"");
    fprintf(fout,""\nTcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkCommandLookup;\n"");
    }
  else
    {
    fprintf(fout,""\nextern Tcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkCommandLookup;\n"");
    }
  fprintf(fout,""extern void vtkTclDeleteObjectFromHash(void *);\n"");  
  fprintf(fout,""extern void vtkTclListInstances(Tcl_Interp *interp, ClientData arg);\n"");
  
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_SafeInit(Tcl_Interp *interp);}\n\n"",
	  kitName);
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n\n"",
	  kitName);
  
  /* create an extern ref to the generic delete function */
  fprintf(fout,""\n\nextern void vtkTclGenericDeleteObject(ClientData cd);\n\n"");

  /* the main declaration */
  fprintf(fout,""\n\nint VTK_EXPORT %s_SafeInit(Tcl_Interp *interp)\n{\n"",kitName);
  fprintf(fout,""  return %s_Init(interp);\n}\n"",kitName);
  
  fprintf(fout,""\n\nint VTK_EXPORT %s_Init(Tcl_Interp *interp)\n{\n"",
          kitName);
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,
	    ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",vtkCommand,\n		    (ClientData *)NULL, NULL);\n\n"");
    }
  
  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""  vtkTclCreateNew(interp,(char *) \""%s\"", %sNewCommand,\n"",
	    classes[i].c_str(), classes[i].c_str());
    fprintf(fout,""                  %sCommand);\n"",classes[i].c_str());
    }
  
  fprintf(fout,""  return TCL_OK;\n}\n"");
  fclose(fout);

  // copy the file if different
  cmSystemTools::CopyFileIfDifferent(tempOutputFile.c_str(),
                                     outFileName.c_str());
  cmSystemTools::RemoveFile(tempOutputFile.c_str());

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1556.cpp,"[3, 0, 2, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 0, 133, 0, 0, 3, 3, 0, 0, 4, 38, 0, 0, 0, 0, 1, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 5, 3, 1, 0, 47, 0, 0, 33, 0, 80, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1556.cpp,42,"[""FILE *"", ""string""]","[""FILE *"", ""!"", ""!""]"
a2a40b125918797471919f526edea2990e29bc69,updated to handle Tk commands compiled/linked separately. Useful for VTK Tk widgets for example.,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_788.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_788.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_788.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1860.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1860.cpp,211,241,214,246,,"fprintf(fout,""\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n"",
            capcommands[i].c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1557.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1557.cpp,"{
  unsigned int i;
  std::string tempOutputFile = outFileName + "".tmp"";
  FILE *fout = fopen(tempOutputFile.c_str(),""w"");
  if (!fout)
    {
    return false;
    }
  
  fprintf(fout,""#include \""vtkTclUtil.h\""\n"");
  
  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());
    fprintf(fout,""ClientData %sNewCommand();\n"",classes[i].c_str());
    }
  
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""int vtkCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"");
    fprintf(fout,""\nTcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkCommandLookup;\n"");
    }
  else
    {
    fprintf(fout,""\nextern Tcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkCommandLookup;\n"");
    }
  fprintf(fout,""extern void vtkTclDeleteObjectFromHash(void *);\n"");  
  fprintf(fout,""extern void vtkTclListInstances(Tcl_Interp *interp, ClientData arg);\n"");
  
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_SafeInit(Tcl_Interp *interp);}\n\n"",
	  kitName);
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n\n"",
	  kitName);
  
  /* create an extern ref to the generic delete function */
  fprintf(fout,""\n\nextern void vtkTclGenericDeleteObject(ClientData cd);\n\n"");

  /* the main declaration */
  fprintf(fout,""\n\nint VTK_EXPORT %s_SafeInit(Tcl_Interp *interp)\n{\n"",kitName);
  fprintf(fout,""  return %s_Init(interp);\n}\n"",kitName);
  
  fprintf(fout,""\n\nint VTK_EXPORT %s_Init(Tcl_Interp *interp)\n{\n"",
          kitName);
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,
	    ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",vtkCommand,\n		    (ClientData *)NULL, NULL);\n\n"");
    }
  
  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""  vtkTclCreateNew(interp,(char *) \""%s\"", %sNewCommand,\n"",
	    classes[i].c_str(), classes[i].c_str());
    fprintf(fout,""                  %sCommand);\n"",classes[i].c_str());
    }
  
  fprintf(fout,""  return TCL_OK;\n}\n"");
  fclose(fout);

  // copy the file if different
  cmSystemTools::CopyFileIfDifferent(tempOutputFile.c_str(),
                                     outFileName.c_str());
  cmSystemTools::RemoveFile(tempOutputFile.c_str());

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1557.cpp,"[3, 0, 2, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 0, 133, 0, 0, 3, 3, 0, 0, 4, 38, 0, 0, 0, 0, 1, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 5, 3, 1, 0, 47, 0, 0, 33, 0, 80, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1557.cpp,36,"[""FILE *"", ""string"", ""const char *""]","[""FILE *"", ""!"", ""!""]"
a2a40b125918797471919f526edea2990e29bc69,updated to handle Tk commands compiled/linked separately. Useful for VTK Tk widgets for example.,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_788.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_788.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_788.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1860.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1860.cpp,211,241,216,250,,"fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_SafeInit(Tcl_Interp *interp);}\n"",
	  kitName);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1558.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1558.cpp,"{
  unsigned int i;
  std::string tempOutputFile = outFileName + "".tmp"";
  FILE *fout = fopen(tempOutputFile.c_str(),""w"");
  if (!fout)
    {
    return false;
    }
  
  fprintf(fout,""#include \""vtkTclUtil.h\""\n"");
  
  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""int %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"",classes[i].c_str());
    fprintf(fout,""ClientData %sNewCommand();\n"",classes[i].c_str());
    }
  
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,""int vtkCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[]);\n"");
    fprintf(fout,""\nTcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""Tcl_HashTable vtkCommandLookup;\n"");
    }
  else
    {
    fprintf(fout,""\nextern Tcl_HashTable vtkInstanceLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkPointerLookup;\n"");
    fprintf(fout,""extern Tcl_HashTable vtkCommandLookup;\n"");
    }
  fprintf(fout,""extern void vtkTclDeleteObjectFromHash(void *);\n"");  
  fprintf(fout,""extern void vtkTclListInstances(Tcl_Interp *interp, ClientData arg);\n"");
  
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_SafeInit(Tcl_Interp *interp);}\n\n"",
	  kitName);
  fprintf(fout,""\n\nextern \""C\"" {int VTK_EXPORT %s_Init(Tcl_Interp *interp);}\n\n"",
	  kitName);
  
  /* create an extern ref to the generic delete function */
  fprintf(fout,""\n\nextern void vtkTclGenericDeleteObject(ClientData cd);\n\n"");

  /* the main declaration */
  fprintf(fout,""\n\nint VTK_EXPORT %s_SafeInit(Tcl_Interp *interp)\n{\n"",kitName);
  fprintf(fout,""  return %s_Init(interp);\n}\n"",kitName);
  
  fprintf(fout,""\n\nint VTK_EXPORT %s_Init(Tcl_Interp *interp)\n{\n"",
          kitName);
  if (!strcmp(kitName,""Vtkcommontcl""))
    {
    fprintf(fout,
	    ""  vtkTclInterpStruct *info = new vtkTclInterpStruct;\n"");
    fprintf(fout,
            ""  info->Number = 0; info->InDelete = 0; info->DebugOn = 0;\n"");
    fprintf(fout,""\n"");
    fprintf(fout,""\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->InstanceLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->PointerLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
	    ""  Tcl_InitHashTable(&info->CommandLookup, TCL_STRING_KEYS);\n"");
    fprintf(fout,
            ""  Tcl_SetAssocData(interp,(char *) \""vtk\"",NULL,(ClientData *)info);\n"");

    /* create special vtkCommand command */
    fprintf(fout,""  Tcl_CreateCommand(interp,(char *) \""vtkCommand\"",vtkCommand,\n		    (ClientData *)NULL, NULL);\n\n"");
    }
  
  for (i = 0; i < classes.size(); i++)
    {
    fprintf(fout,""  vtkTclCreateNew(interp,(char *) \""%s\"", %sNewCommand,\n"",
	    classes[i].c_str(), classes[i].c_str());
    fprintf(fout,""                  %sCommand);\n"",classes[i].c_str());
    }
  
  fprintf(fout,""  return TCL_OK;\n}\n"");
  fclose(fout);

  // copy the file if different
  cmSystemTools::CopyFileIfDifferent(tempOutputFile.c_str(),
                                     outFileName.c_str());
  cmSystemTools::RemoveFile(tempOutputFile.c_str());

  return true;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1558.cpp,"[3, 0, 2, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 0, 133, 0, 0, 3, 3, 0, 0, 4, 38, 0, 0, 0, 0, 1, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 5, 3, 1, 0, 47, 0, 0, 33, 0, 80, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1558.cpp,38,"[""FILE *"", ""string"", ""const char *""]","[""FILE *"", ""!"", ""!""]"
a2a40b125918797471919f526edea2990e29bc69,updated to handle Tk commands compiled/linked separately. Useful for VTK Tk widgets for example.,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_788.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_788.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_788.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1861.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1861.cpp,247,283,251,287,,"fprintf(fout,""  %s_Init(interp);\n"", capcommands[i].c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1559.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1559.cpp,"{
    fprintf(fout,""  vtkTclCreateNew(interp,(char *) \""%s\"", %sNewCommand,\n"",
	    classes[i].c_str(), classes[i].c_str());
    fprintf(fout,""                  %sCommand);\n"",classes[i].c_str());
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1559.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 5, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1559.cpp,73,"[""FILE *"", ""string"", ""classes [ i ] . c_str_ret"", ""classes [ i ] . c_str_ret""]","[""null"", ""classes . size_ret"", ""<""]"
a2a40b125918797471919f526edea2990e29bc69,updated to handle Tk commands compiled/linked separately. Useful for VTK Tk widgets for example.,[],Source/cmVTKWrapTclCommand.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_788.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_788.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_788.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_1861.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_1861.cpp,247,283,251,289,,(fout;,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_1560.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_1560.cpp,"{
    fprintf(fout,""  vtkTclCreateNew(interp,(char *) \""%s\"", %sNewCommand,\n"",
	    classes[i].c_str(), classes[i].c_str());
    fprintf(fout,""                  %sCommand);\n"",classes[i].c_str());
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_1560.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 5, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_1560.cpp,73,"[""FILE *"", ""string"", ""classes [ i ] . c_str_ret"", ""classes [ i ] . c_str_ret""]","[""null"", ""classes . size_ret"", ""<""]"
