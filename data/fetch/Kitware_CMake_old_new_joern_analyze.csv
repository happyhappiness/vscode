sha,message,issue,file_name,old_file,new_file,patch_file,old_hunk_file,new_hunk_file,old_hunk_loc,new_hunk_loc,old_loc,new_loc,old_log,new_log,action_type,old_log_file,new_log_file,old_block,old_block_file,old_block_feature,old_function_file,old_fucntion_loc,old_ddg_feature,old_cdg_feature
6df1bda1c57193b289866389a994ea79a2f5e1d8,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-07-09 (98a69539)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_2.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_21.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_21.cpp,4044,4083,4090,4125,"archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");","archive_strcat(&errlist, name);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_2.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_2.cpp,"{
						warning_done = 1;
						archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_2.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_2.cpp,39,[],"[""int"", ""!""]"
6df1bda1c57193b289866389a994ea79a2f5e1d8,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-07-09 (98a69539)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_2.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_21.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_21.cpp,4044,4083,4097,4168,"archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Cannot restore extended ""
			    ""attributes on this file system."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_3.cpp,"archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"")",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_3.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_3.cpp,46,"[""member"", ""unkown"", ""string""]","[""unkown"", ""macro"", ""=="", ""unkown"", ""macro"", ""=="", ""||"", ""!""]"
6df1bda1c57193b289866389a994ea79a2f5e1d8,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-07-09 (98a69539)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_2.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_21.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_21.cpp,4044,4083,4102,4154,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid extended attribute encountered"");","archive_strappend_char(&errlist, ' ');",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_4.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_4.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid extended attribute encountered"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_4.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_4.cpp,51,"[""member"", ""macro"", ""string""]","[""const char *"", ""null"", ""!="", ""strncmp_ret"", ""null"", ""!="", ""strncmp_ret"", ""null"", ""!="", ""&&"", ""&&"", ""!""]"
6df1bda1c57193b289866389a994ea79a2f5e1d8,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-07-09 (98a69539)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_2.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_21.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_21.cpp,4044,4083,4108,4164,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Cannot restore extended attributes: %s"",
			    errlist.s);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_5.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_5.cpp,"{
	struct archive_entry *entry = a->entry;
	static int warning_done = 0;
	int ret = ARCHIVE_OK;
	int i = archive_entry_xattr_reset(entry);

	while (i--) {
		const char *name;
		const void *value;
		size_t size;
		archive_entry_xattr_next(entry, &name, &value, &size);
		if (name != NULL &&
				strncmp(name, ""xfsroot."", 8) != 0 &&
				strncmp(name, ""system."", 7) != 0) {
			int e;
#if HAVE_FSETXATTR
			if (a->fd >= 0)
				e = fsetxattr(a->fd, name, value, size, 0);
			else
#elif HAVE_FSETEA
			if (a->fd >= 0)
				e = fsetea(a->fd, name, value, size, 0);
			else
#endif
			{
#if HAVE_LSETXATTR
				e = lsetxattr(archive_entry_pathname(entry),
				    name, value, size, 0);
#elif HAVE_LSETEA
				e = lsetea(archive_entry_pathname(entry),
				    name, value, size, 0);
#endif
			}
			if (e == -1) {
				if (errno == ENOTSUP || errno == ENOSYS) {
					if (!warning_done) {
						warning_done = 1;
						archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");
					}
				} else
					archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");
				ret = ARCHIVE_WARN;
			}
		} else {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid extended attribute encountered"");
			ret = ARCHIVE_WARN;
		}
	}
	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_5.cpp,"[8, 1, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 3, 103, 0, 0, 8, 8, 0, 0, 4, 20, 0, 0, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 7, 6, 3, 0, 13, 0, 0, 11, 1, 42, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_5.cpp,57,[],[]
6df1bda1c57193b289866389a994ea79a2f5e1d8,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-07-09 (98a69539)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_2.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_22.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_22.cpp,4134,4203,4137,4207,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Can't restore extended attribute ``%s''"",
				    name);","archive_strappend_char(&errlist, ' ');",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_6.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_6.cpp,"{
				/* Warn about other extended attributes. */
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Can't restore extended attribute ``%s''"",
				    name);
				ret = ARCHIVE_WARN;
				continue;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_6.cpp,"[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_6.cpp,23,"[""member"", ""macro"", ""string"", ""const char *""]","[""strncmp_ret"", ""null"", ""=="", ""!""]"
6df1bda1c57193b289866389a994ea79a2f5e1d8,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-07-09 (98a69539)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_2.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_22.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_22.cpp,4134,4203,4161,4240,"archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Cannot restore extended ""
			    ""attributes on this file system."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_7.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_7.cpp,"{
						warning_done = 1;
						archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_7.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_7.cpp,47,[],"[""int"", ""!""]"
6df1bda1c57193b289866389a994ea79a2f5e1d8,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-07-09 (98a69539)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_2.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_2.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_22.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_22.cpp,4134,4203,4168,4236,"archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Cannot restore extended attributes: %s"",
			    errlist.s);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_8.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_8.cpp,"{
					archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_8.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_8.cpp,54,"[""member"", ""null"", ""string""]","[""null"", ""macro"", ""=="", ""null"", ""macro"", ""=="", ""||"", ""!""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_24.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_24.cpp,328,334,334,-1,"archive_set_error(&a->archive, errno,
			    ""Can't change dir to read extended attributes"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_10.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_10.cpp,"{
		archive_set_error(&a->archive, errno,
			    ""Can't change dir to read extended attributes"");
			return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_10.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_10.cpp,18,"[""member"", ""unkown"", ""string""]","[""member"", ""null"", ""!="", ""a -> tree_enter_working_dir_ret"", ""null"", ""!="", ""&&""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_24.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_24.cpp,328,334,339,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't open file to read extended attributes: No name"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_11.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_11.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't open file to read extended attributes: No name"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_11.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_11.cpp,23,"[""member"", ""macro"", ""string""]","[""archive_entry_pathname_ret"", ""null"", ""==""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,476,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ACLs"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_12.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_12.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ACLs"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_12.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_12.cpp,26,"[""member"", ""macro"", ""string""]","[""archive_entry_sourcepath_ret"", ""null"", ""==""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,549,-1,"archive_set_error(&a->archive, errno,
			    ""Couldn't translate ""
#if !HAVE_SUN_ACL
			    ""NFSv4 ""
#endif
			    ""ACLs"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_13.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_13.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Couldn't translate ""
#if !HAVE_SUN_ACL
			    ""NFSv4 ""
#endif
			    ""ACLs"");
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_13.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_13.cpp,99,[],"[""translate_acl_ret"", ""macro"", ""!=""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,605,-1,"archive_set_error(&a->archive, errno,
			    ""Couldn't translate access ACLs"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_14.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_14.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Couldn't translate access ACLs"");
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_14.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_14.cpp,155,"[""member"", ""unkown"", ""string""]","[""translate_acl_ret"", ""macro"", ""!=""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,624,-1,"archive_set_error(&a->archive, errno,
				    ""Couldn't translate default ACLs"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_15.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_15.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Couldn't translate default ACLs"");
				return (r);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_15.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_15.cpp,174,"[""member"", ""unkown"", ""string""]","[""translate_acl_ret"", ""macro"", ""!=""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1188,-1,"archive_set_error(&a->archive, errno,
		    ""Failed to read ACL brand"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_16.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_16.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to read ACL brand"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_16.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_16.cpp,26,"[""member"", ""unkown"", ""string""]","[""acl_get_brand_np_ret"", ""null"", ""!=""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1199,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for POSIX.1e ACL"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_17.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_17.cpp,"{
		case ARCHIVE_ENTRY_ACL_TYPE_ACCESS:
		case ARCHIVE_ENTRY_ACL_TYPE_DEFAULT:
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for POSIX.1e ACL"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_17.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_17.cpp,37,"[""member"", ""macro"", ""constant""]","[""int""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1206,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for NFSv4 ACL"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_18.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_18.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for NFSv4 ACL"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_18.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_18.cpp,44,"[""member"", ""macro"", ""string""]","[""bool""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1212,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown ACL brand"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_19.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_19.cpp,"{
	case ACL_BRAND_POSIX:
		switch (default_entry_acl_type) {
		case ARCHIVE_ENTRY_ACL_TYPE_ACCESS:
		case ARCHIVE_ENTRY_ACL_TYPE_DEFAULT:
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for POSIX.1e ACL"");
			return (ARCHIVE_WARN);
		}
		break;
	case ACL_BRAND_NFS4:
		if (default_entry_acl_type & ~ARCHIVE_ENTRY_ACL_TYPE_NFS4) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for NFSv4 ACL"");
			return (ARCHIVE_WARN);
		}
		break;
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown ACL brand"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_19.cpp,"[1, 0, 0, 0, 3, 0, 3, 1, 4, 2, 3, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_19.cpp,50,"[""member"", ""macro"", ""string""]","[""int""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1220,-1,"archive_set_error(&a->archive, errno,
		    ""Failed to get first ACL entry"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_20.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_20.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to get first ACL entry"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_20.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_20.cpp,58,"[""member"", ""unkown"", ""string""]","[""acl_get_entry_ret"", ""int"", ""==""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1236,-1,"archive_set_error(&a->archive, errno,
			    ""Failed to get ACL tag type"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_21.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_21.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to get ACL tag type"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_21.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_21.cpp,74,"[""member"", ""unkown"", ""string""]","[""acl_get_tag_type_ret"", ""null"", ""!=""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1316,-1,"archive_set_error(&a->archive, errno, ""Failed ""
				    ""to get ACL type from a NFSv4 ACL entry"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_22.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_22.cpp,"{
				archive_set_error(&a->archive, errno, ""Failed ""
				    ""to get ACL type from a NFSv4 ACL entry"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_22.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_22.cpp,154,[],"[""acl_get_entry_type_np_ret"", ""null"", ""!=""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1334,-1,"archive_set_error(&a->archive, errno,
				    ""Invalid NFSv4 ACL entry type"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_23.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_23.cpp,"{
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			default:
				archive_set_error(&a->archive, errno,
				    ""Invalid NFSv4 ACL entry type"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_23.cpp,"[0, 0, 0, 0, 4, 0, 1, 0, 4, 1, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 5, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_23.cpp,172,"[""member"", ""unkown"", ""string""]","[""acl_entry_type_t""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1347,-1,"archive_set_error(&a->archive, errno,
				    ""Failed to get flagset from a NFSv4 ACL entry"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_24.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_24.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Failed to get flagset from a NFSv4 ACL entry"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_24.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_24.cpp,185,"[""member"", ""unkown"", ""string""]","[""acl_get_flagset_np_ret"", ""null"", ""!=""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1355,-1,"archive_set_error(&a->archive, errno,
					    ""Failed to check flag in a NFSv4 ""
					    ""ACL flagset"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_25.cpp,"{
					archive_set_error(&a->archive, errno,
					    ""Failed to check flag in a NFSv4 ""
					    ""ACL flagset"");
					return (ARCHIVE_WARN);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_25.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_25.cpp,193,[],"[""acl_get_flag_np_ret"", ""int"", ""==""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1366,-1,"archive_set_error(&a->archive, errno,
			    ""Failed to get ACL permission set"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_26.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_26.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to get ACL permission set"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_26.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_26.cpp,204,"[""member"", ""unkown"", ""string""]","[""acl_get_permset_ret"", ""null"", ""!=""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1377,-1,"archive_set_error(&a->archive, errno,
				    ""Failed to check permission in an ACL permission set"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_27.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_27.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Failed to check permission in an ACL permission set"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_27.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_27.cpp,215,"[""member"", ""unkown"", ""string""]","[""ACL_GET_PERM_ret"", ""int"", ""==""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_25.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_25.cpp,426,423,1391,-1,"archive_set_error(&a->archive, errno,
			    ""Failed to get next ACL entry"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_28.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_28.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to get next ACL entry"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_28.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_28.cpp,229,"[""member"", ""unkown"", ""string""]","[""acl_get_entry_ret"", ""int"", ""==""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_28.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_28.cpp,1499,532,1506,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_29.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_29.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_29.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_29.cpp,16,[],"[""archive_entry_sourcepath_ret"", ""null"", ""==""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_30.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_30.cpp,1658,710,1665,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_30.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_30.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_30.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_30.cpp,18,[],"[""archive_entry_pathname_ret"", ""null"", ""==""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_3.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_3.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_31.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_31.cpp,1880,920,1898,-1,"archive_set_error(&a->archive, errno,
			    ""Can't open `%s'"", path);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_31.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_31.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't open `%s'"", path);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_31.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_31.cpp,25,"[""member"", ""unkown"", ""string"", ""archive_entry_sourcepath_ret""]","[""int *"", ""null"", ""<""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_read_support_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_4.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_4.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_4.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_33.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_33.cpp,1535,1533,1542,1540,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symbolic mode \""%s\"" unsupported"", val);","archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symbolic or non-octal mode \""%s\"" unsupported"", val);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_32.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_32.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symbolic mode \""%s\"" unsupported"", val);
				return ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_32.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_32.cpp,97,"[""member"", ""macro"", ""string"", ""strchr_ret""]","[""member"", ""char"", "">="", ""member"", ""char"", ""<="", ""&&"", ""!""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_5.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_34.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_34.cpp,2467,2506,2469,2508,"archive_string_sprintf(a_estr, errstr, path);","archive_string_sprintf(a_estr, ""%s%s"", errstr, path);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_33.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_33.cpp,"archive_string_sprintf(a_estr, errstr, path)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_33.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_33.cpp,7,"[""struct archive_string *"", ""const char *"", ""const char *""]","[""struct archive_string *""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_5.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_43.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_43.cpp,4044,4083,4090,4125,"archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");","archive_strcat(&errlist, name);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_41.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_41.cpp,"{
						warning_done = 1;
						archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_41.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_41.cpp,39,[],"[""int"", ""!""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_5.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_43.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_43.cpp,4044,4083,4097,4168,"archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Cannot restore extended ""
			    ""attributes on this file system."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_42.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_42.cpp,"archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"")",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_42.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_42.cpp,46,"[""member"", ""unkown"", ""string""]","[""unkown"", ""macro"", ""=="", ""unkown"", ""macro"", ""=="", ""||"", ""!""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_5.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_43.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_43.cpp,4044,4083,4102,4154,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid extended attribute encountered"");","archive_strappend_char(&errlist, ' ');",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_43.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_43.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid extended attribute encountered"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_43.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_43.cpp,51,"[""member"", ""macro"", ""string""]","[""const char *"", ""null"", ""!="", ""strncmp_ret"", ""null"", ""!="", ""strncmp_ret"", ""null"", ""!="", ""&&"", ""&&"", ""!""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_5.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_43.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_43.cpp,4044,4083,4108,4164,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Cannot restore extended attributes: %s"",
			    errlist.s);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_44.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_44.cpp,"{
	struct archive_entry *entry = a->entry;
	static int warning_done = 0;
	int ret = ARCHIVE_OK;
	int i = archive_entry_xattr_reset(entry);

	while (i--) {
		const char *name;
		const void *value;
		size_t size;
		archive_entry_xattr_next(entry, &name, &value, &size);
		if (name != NULL &&
				strncmp(name, ""xfsroot."", 8) != 0 &&
				strncmp(name, ""system."", 7) != 0) {
			int e;
#if HAVE_FSETXATTR
			if (a->fd >= 0)
				e = fsetxattr(a->fd, name, value, size, 0);
			else
#elif HAVE_FSETEA
			if (a->fd >= 0)
				e = fsetea(a->fd, name, value, size, 0);
			else
#endif
			{
#if HAVE_LSETXATTR
				e = lsetxattr(archive_entry_pathname(entry),
				    name, value, size, 0);
#elif HAVE_LSETEA
				e = lsetea(archive_entry_pathname(entry),
				    name, value, size, 0);
#endif
			}
			if (e == -1) {
				if (errno == ENOTSUP || errno == ENOSYS) {
					if (!warning_done) {
						warning_done = 1;
						archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");
					}
				} else
					archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");
				ret = ARCHIVE_WARN;
			}
		} else {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid extended attribute encountered"");
			ret = ARCHIVE_WARN;
		}
	}
	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_44.cpp,"[8, 1, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 3, 103, 0, 0, 8, 8, 0, 0, 4, 20, 0, 0, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 7, 6, 3, 0, 13, 0, 0, 11, 1, 42, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_44.cpp,57,[],[]
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_5.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_44.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_44.cpp,4134,4203,4137,4207,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Can't restore extended attribute ``%s''"",
				    name);","archive_strappend_char(&errlist, ' ');",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_45.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_45.cpp,"{
				/* Warn about other extended attributes. */
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Can't restore extended attribute ``%s''"",
				    name);
				ret = ARCHIVE_WARN;
				continue;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_45.cpp,"[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_45.cpp,23,"[""member"", ""macro"", ""string"", ""const char *""]","[""strncmp_ret"", ""null"", ""=="", ""!""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_5.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_44.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_44.cpp,4134,4203,4161,4240,"archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Cannot restore extended ""
			    ""attributes on this file system."");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_46.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_46.cpp,"{
						warning_done = 1;
						archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_46.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_46.cpp,47,[],"[""int"", ""!""]"
11f3dcb04887fccf38a8eda19d498bf7a5060486,"LibArchive 2017-07-09 (98a69539)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 98a695399e8e7420635a5448aecde8b0a82fb83a (v3.3.2).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_5.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_5.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_44.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_44.cpp,4134,4203,4168,4236,"archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Cannot restore extended attributes: %s"",
			    errlist.s);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_47.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_47.cpp,"{
					archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_47.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_47.cpp,54,"[""member"", ""null"", ""string""]","[""null"", ""macro"", ""=="", ""null"", ""macro"", ""=="", ""||"", ""!""]"
47b3a57c9bc5c7db608bc3b59b139a902535255f,"Display subproject timing summary

Use the '--no-subproject-summary' option to disable timing summary.",[],Source/CTest/cmCTestTestHandler.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_6.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_6.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_6.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_46.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_46.cpp,688,693,689,749,,"sprintf(buf, ""%6.2f sec"", labelTimes[*i]);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_48.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_48.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_48.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_48.cpp,0,[],[]
df1c187f2fdfa48bd36d770bac23f6503fd9b071,Merge branch 'update-curl' into release-3.9,[],Utilities/cmcurl/lib/file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_7.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_7.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_7.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_47.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_47.cpp,475,473,477,476,"snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);","snprintf(header, sizeof(header),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_49.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_49.cpp,"{
    time_t filetime;
    struct tm buffer;
    const struct tm *tm = &buffer;
    snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(result)
      return result;

    result = Curl_client_write(conn, CLIENTWRITE_BOTH,
                               (char *)""Accept-ranges: bytes\r\n"", 0);
    if(result)
      return result;

    filetime = (time_t)statbuf.st_mtime;
    result = Curl_gmtime(filetime, &buffer);
    if(result)
      return result;

    /* format: ""Tue, 15 Nov 1994 12:45:26 GMT"" */
    snprintf(buf, BUFSIZE-1,
             ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
             Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
             tm->tm_mday,
             Curl_month[tm->tm_mon],
             tm->tm_year + 1900,
             tm->tm_hour,
             tm->tm_min,
             tm->tm_sec);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(!result)
      /* set the file size to make it available post transfer */
      Curl_pgrsSetDownloadSize(data, expected_size);
    return result;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_49.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 1, 86, 0, 0, 3, 3, 0, 0, 1, 11, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 1, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 5, 5, 1, 0, 8, 0, 0, 8, 0, 31, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_49.cpp,58,[],"[""member"", ""member"", ""macro"", ""&&"", ""&&""]"
df1c187f2fdfa48bd36d770bac23f6503fd9b071,Merge branch 'update-curl' into release-3.9,[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_8.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_8.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_8.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_49.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_49.cpp,2101,2100,2109,2108,"snprintf(buf, CURL_BUFSIZE(conn->data->set.buffer_size),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);","snprintf(timebuf, sizeof(timebuf),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_50.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_50.cpp,"{
        /* we have a time, reformat it */
        time_t secs=time(NULL);
        /* using the good old yacc/bison yuck */
        snprintf(buf, CURL_BUFSIZE(conn->data->set.buffer_size),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);
        /* now, convert this into a time() value: */
        data->info.filetime = (long)curl_getdate(buf, &secs);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_50.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 26, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_50.cpp,20,"[""char *"", ""CURL_BUFSIZE_ret"", ""string"", ""int"", ""int"", ""int"", ""int"", ""int"", ""int""]","[""int"", ""sscanf_ret"", ""==""]"
df1c187f2fdfa48bd36d770bac23f6503fd9b071,Merge branch 'update-curl' into release-3.9,[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_8.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_8.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_8.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_51.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_51.cpp,2318,2318,2320,2321,"snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);","snprintf(clbuf, sizeof(clbuf),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_51.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_51.cpp,"{
      snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);
      result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
      if(result)
        return result;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_51.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_51.cpp,15,[],"[""int"", ""curlx_strtoofft_ret"", ""!=""]"
df1c187f2fdfa48bd36d770bac23f6503fd9b071,Merge branch 'update-curl' into release-3.9,[],Utilities/cmcurl/lib/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_9.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_9.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_9.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_52.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_52.cpp,297,298,299,300,"f(data->state.buffer, CURL_BUFSIZE(data->set.buffer_size),
           ""%s:%s"", user, pwd);","= aprintf(""%s:%s"", user, pwd);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_52.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_52.cpp,"{
  size_t size = 0;
  char *authorization = NULL;
  struct Curl_easy *data = conn->data;
  char **userp;
  const char *user;
  const char *pwd;
  CURLcode result;

  if(proxy) {
    userp = &conn->allocptr.proxyuserpwd;
    user = conn->http_proxy.user;
    pwd = conn->http_proxy.passwd;
  }
  else {
    userp = &conn->allocptr.userpwd;
    user = conn->user;
    pwd = conn->passwd;
  }

  snprintf(data->state.buffer, CURL_BUFSIZE(data->set.buffer_size),
           ""%s:%s"", user, pwd);

  result = Curl_base64_encode(data,
                              data->state.buffer, strlen(data->state.buffer),
                              &authorization, &size);
  if(result)
    return result;

  if(!authorization)
    return CURLE_REMOTE_ACCESS_DENIED;

  free(*userp);
  *userp = aprintf(""%sAuthorization: Basic %s\r\n"",
                   proxy ? ""Proxy-"" : """",
                   authorization);
  free(authorization);
  if(!*userp)
    return CURLE_OUT_OF_MEMORY;

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_52.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 2, 90, 0, 0, 7, 7, 0, 0, 3, 5, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 1, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 5, 5, 2, 0, 7, 0, 0, 11, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_52.cpp,21,"[""member"", ""CURL_BUFSIZE_ret"", ""string"", ""member"", ""member""]",[]
df1c187f2fdfa48bd36d770bac23f6503fd9b071,Merge branch 'update-curl' into release-3.9,[],Utilities/cmcurl/lib/sendf.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_10.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_10.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_10.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_54.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_54.cpp,243,243,247,248,"vsnprintf(data->state.buffer, BUFSIZE, fmt, ap);","vsnprintf(error, CURL_ERROR_SIZE, fmt, ap);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_53.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_53.cpp,"{
  va_list ap;
  size_t len;
  va_start(ap, fmt);

  vsnprintf(data->state.buffer, BUFSIZE, fmt, ap);

  if(data->set.errorbuffer && !data->state.errorbuf) {
    snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, ""%s"", data->state.buffer);
    data->state.errorbuf = TRUE; /* wrote error string */
  }
  if(data->set.verbose) {
    len = strlen(data->state.buffer);
    if(len < BUFSIZE - 1) {
      data->state.buffer[len] = '\n';
      data->state.buffer[++len] = '\0';
    }
    Curl_debug(data, CURLINFO_TEXT, data->state.buffer, len, NULL);
  }

  va_end(ap);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_53.cpp,"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 71, 0, 0, 2, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 3, 0, 0, 6, 0, 0, 9, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_53.cpp,6,"[""member"", ""macro"", ""const char *"", ""va_list""]",[]
df1c187f2fdfa48bd36d770bac23f6503fd9b071,Merge branch 'update-curl' into release-3.9,[],Utilities/cmcurl/lib/sendf.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_10.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_10.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_10.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_54.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_54.cpp,243,243,250,252,"snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, ""%s"", data->state.buffer);","strcpy(data->set.errorbuffer, error);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_54.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_54.cpp,"{
    snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, ""%s"", data->state.buffer);
    data->state.errorbuf = TRUE; /* wrote error string */
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_54.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_54.cpp,9,"[""member"", ""macro"", ""string"", ""member""]","[""member"", ""member"", ""&&""]"
df1c187f2fdfa48bd36d770bac23f6503fd9b071,Merge branch 'update-curl' into release-3.9,[],Utilities/cmcurl/lib/vauth/digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_12.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_12.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_12.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_57.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_57.cpp,387,386,395,-1,"snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_55.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_55.cpp,"{
  CURLcode result = CURLE_OK;
  size_t i;
  MD5_context *ctxt;
  char *response = NULL;
  unsigned char digest[MD5_DIGEST_LEN];
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  char nonce[64];
  char realm[128];
  char algorithm[64];
  char qop_options[64];
  int qop_values;
  char cnonce[33];
  unsigned int entropy[4];
  char nonceCount[] = ""00000001"";
  char method[]     = ""AUTHENTICATE"";
  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  char *spn         = NULL;

  /* Decode the challenge message */
  result = auth_decode_digest_md5_message(chlg64, nonce, sizeof(nonce),
                                          realm, sizeof(realm),
                                          algorithm, sizeof(algorithm),
                                          qop_options, sizeof(qop_options));
  if(result)
    return result;

  /* We only support md5 sessions */
  if(strcmp(algorithm, ""md5-sess"") != 0)
    return CURLE_BAD_CONTENT_ENCODING;

  /* Get the qop-values from the qop-options */
  result = auth_digest_get_qop_values(qop_options, &qop_values);
  if(result)
    return result;

  /* We only support auth quality-of-protection */
  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
    return CURLE_BAD_CONTENT_ENCODING;

  /* Generate 16 bytes of random data */
  result = Curl_rand(data, &entropy[0], 4);
  if(result)
    return result;

  /* Convert the random data into a 32 byte hex string */
  snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);

  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) userp,
                  curlx_uztoui(strlen(userp)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) realm,
                  curlx_uztoui(strlen(realm)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
                  curlx_uztoui(strlen(passwdp)));
  Curl_MD5_final(ctxt, digest);

  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_final(ctxt, digest);

  /* Convert calculated 16 octet hex into 32 bytes string */
  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate our SPN */
  spn = Curl_auth_build_spn(service, realm, NULL);
  if(!spn)
    return CURLE_OUT_OF_MEMORY;

  /* Calculate H(A2) */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) method,
                  curlx_uztoui(strlen(method)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) spn,
                  curlx_uztoui(strlen(spn)));
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Now calculate the response hash */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
                  curlx_uztoui(strlen(nonceCount)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) qop,
                  curlx_uztoui(strlen(qop)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate the response */
  response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  free(spn);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_55.cpp,"[11, 0, 3, 0, 0, 0, 12, 0, 0, 0, 15, 0, 0, 0, 24, 349, 0, 0, 19, 19, 0, 0, 9, 61, 0, 0, 0, 0, 3, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 0, 272, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 24, 0, 14, 11, 0, 0, 74, 0, 0, 46, 0, 167, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_55.cpp,54,"[""char *"", ""unkown"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""Curl_rand_ret"", ""!""]"
df1c187f2fdfa48bd36d770bac23f6503fd9b071,Merge branch 'update-curl' into release-3.9,[],Utilities/cmcurl/lib/vauth/digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_12.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_12.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_12.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_58.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_58.cpp,684,679,690,-1,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             rnd[0], rnd[1], rnd[2], rnd[3]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_56.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_56.cpp,"{
    unsigned int rnd[4];
    result = Curl_rand(data, &rnd[0], 4);
    if(result)
      return result;
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             rnd[0], rnd[1], rnd[2], rnd[3]);

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_56.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 36, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 31, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 2, 2, 0, 0, 5, 0, 0, 4, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_56.cpp,29,"[""char *"", ""unkown"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""Curl_rand_ret"", ""!""]"
a3ef36f153f51c33ea2154cff17bbf9abb7ee073,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-06-14 (54b636f1)

Resolve a logical conflict in `Utilities/cmcurl/CMakeLists.txt`
by disabling CA bundle/path detection for build within CMake.
CMake already handles locating a CA bundle/path at runtime.",[],Utilities/cmcurl/lib/file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_14.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_14.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_14.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_60.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_60.cpp,475,473,477,476,"snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);","snprintf(header, sizeof(header),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_57.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_57.cpp,"{
    time_t filetime;
    struct tm buffer;
    const struct tm *tm = &buffer;
    snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(result)
      return result;

    result = Curl_client_write(conn, CLIENTWRITE_BOTH,
                               (char *)""Accept-ranges: bytes\r\n"", 0);
    if(result)
      return result;

    filetime = (time_t)statbuf.st_mtime;
    result = Curl_gmtime(filetime, &buffer);
    if(result)
      return result;

    /* format: ""Tue, 15 Nov 1994 12:45:26 GMT"" */
    snprintf(buf, BUFSIZE-1,
             ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
             Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
             tm->tm_mday,
             Curl_month[tm->tm_mon],
             tm->tm_year + 1900,
             tm->tm_hour,
             tm->tm_min,
             tm->tm_sec);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(!result)
      /* set the file size to make it available post transfer */
      Curl_pgrsSetDownloadSize(data, expected_size);
    return result;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_57.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 1, 86, 0, 0, 3, 3, 0, 0, 1, 11, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 1, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 5, 5, 1, 0, 8, 0, 0, 8, 0, 31, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_57.cpp,58,[],"[""member"", ""member"", ""bool"", ""&&"", ""&&""]"
a3ef36f153f51c33ea2154cff17bbf9abb7ee073,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-06-14 (54b636f1)

Resolve a logical conflict in `Utilities/cmcurl/CMakeLists.txt`
by disabling CA bundle/path detection for build within CMake.
CMake already handles locating a CA bundle/path at runtime.",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_15.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_15.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_15.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_62.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_62.cpp,2101,2100,2109,2108,"snprintf(buf, CURL_BUFSIZE(conn->data->set.buffer_size),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);","snprintf(timebuf, sizeof(timebuf),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_58.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_58.cpp,"{
        /* we have a time, reformat it */
        time_t secs=time(NULL);
        /* using the good old yacc/bison yuck */
        snprintf(buf, CURL_BUFSIZE(conn->data->set.buffer_size),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);
        /* now, convert this into a time() value: */
        data->info.filetime = (long)curl_getdate(buf, &secs);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_58.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 26, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_58.cpp,20,"[""char *"", ""CURL_BUFSIZE_ret"", ""string"", ""int"", ""int"", ""int"", ""int"", ""int"", ""int""]","[""int"", ""sscanf_ret"", ""==""]"
a3ef36f153f51c33ea2154cff17bbf9abb7ee073,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-06-14 (54b636f1)

Resolve a logical conflict in `Utilities/cmcurl/CMakeLists.txt`
by disabling CA bundle/path detection for build within CMake.
CMake already handles locating a CA bundle/path at runtime.",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_15.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_15.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_15.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_64.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_64.cpp,2318,2318,2320,2321,"snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);","snprintf(clbuf, sizeof(clbuf),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_59.cpp,"{
      snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);
      result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
      if(result)
        return result;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_59.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_59.cpp,15,[],"[""int"", ""curlx_strtoofft_ret"", ""!=""]"
a3ef36f153f51c33ea2154cff17bbf9abb7ee073,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-06-14 (54b636f1)

Resolve a logical conflict in `Utilities/cmcurl/CMakeLists.txt`
by disabling CA bundle/path detection for build within CMake.
CMake already handles locating a CA bundle/path at runtime.",[],Utilities/cmcurl/lib/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_16.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_16.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_16.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_65.cpp,297,298,299,300,"f(data->state.buffer, CURL_BUFSIZE(data->set.buffer_size),
           ""%s:%s"", user, pwd);","= aprintf(""%s:%s"", user, pwd);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_60.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_60.cpp,"{
  size_t size = 0;
  char *authorization = NULL;
  struct Curl_easy *data = conn->data;
  char **userp;
  const char *user;
  const char *pwd;
  CURLcode result;

  if(proxy) {
    userp = &conn->allocptr.proxyuserpwd;
    user = conn->http_proxy.user;
    pwd = conn->http_proxy.passwd;
  }
  else {
    userp = &conn->allocptr.userpwd;
    user = conn->user;
    pwd = conn->passwd;
  }

  snprintf(data->state.buffer, CURL_BUFSIZE(data->set.buffer_size),
           ""%s:%s"", user, pwd);

  result = Curl_base64_encode(data,
                              data->state.buffer, strlen(data->state.buffer),
                              &authorization, &size);
  if(result)
    return result;

  if(!authorization)
    return CURLE_REMOTE_ACCESS_DENIED;

  free(*userp);
  *userp = aprintf(""%sAuthorization: Basic %s\r\n"",
                   proxy ? ""Proxy-"" : """",
                   authorization);
  free(authorization);
  if(!*userp)
    return CURLE_OUT_OF_MEMORY;

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_60.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 2, 90, 0, 0, 7, 7, 0, 0, 3, 5, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 1, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 5, 5, 2, 0, 7, 0, 0, 11, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_60.cpp,21,"[""member"", ""CURL_BUFSIZE_ret"", ""string"", ""member"", ""member""]",[]
a3ef36f153f51c33ea2154cff17bbf9abb7ee073,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-06-14 (54b636f1)

Resolve a logical conflict in `Utilities/cmcurl/CMakeLists.txt`
by disabling CA bundle/path detection for build within CMake.
CMake already handles locating a CA bundle/path at runtime.",[],Utilities/cmcurl/lib/sendf.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_17.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_17.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_17.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_67.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_67.cpp,243,243,247,248,"vsnprintf(data->state.buffer, BUFSIZE, fmt, ap);","vsnprintf(error, CURL_ERROR_SIZE, fmt, ap);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_61.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_61.cpp,"{
  va_list ap;
  size_t len;
  va_start(ap, fmt);

  vsnprintf(data->state.buffer, BUFSIZE, fmt, ap);

  if(data->set.errorbuffer && !data->state.errorbuf) {
    snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, ""%s"", data->state.buffer);
    data->state.errorbuf = TRUE; /* wrote error string */
  }
  if(data->set.verbose) {
    len = strlen(data->state.buffer);
    if(len < BUFSIZE - 1) {
      data->state.buffer[len] = '\n';
      data->state.buffer[++len] = '\0';
    }
    Curl_debug(data, CURLINFO_TEXT, data->state.buffer, len, NULL);
  }

  va_end(ap);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_61.cpp,"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 71, 0, 0, 2, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 3, 0, 0, 6, 0, 0, 9, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_61.cpp,6,"[""member"", ""macro"", ""const char *"", ""va_list""]",[]
a3ef36f153f51c33ea2154cff17bbf9abb7ee073,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-06-14 (54b636f1)

Resolve a logical conflict in `Utilities/cmcurl/CMakeLists.txt`
by disabling CA bundle/path detection for build within CMake.
CMake already handles locating a CA bundle/path at runtime.",[],Utilities/cmcurl/lib/sendf.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_17.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_17.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_17.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_67.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_67.cpp,243,243,250,252,"snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, ""%s"", data->state.buffer);","strcpy(data->set.errorbuffer, error);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_62.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_62.cpp,"{
    snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, ""%s"", data->state.buffer);
    data->state.errorbuf = TRUE; /* wrote error string */
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_62.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_62.cpp,9,"[""member"", ""macro"", ""string"", ""member""]","[""member"", ""member"", ""&&""]"
a3ef36f153f51c33ea2154cff17bbf9abb7ee073,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-06-14 (54b636f1)

Resolve a logical conflict in `Utilities/cmcurl/CMakeLists.txt`
by disabling CA bundle/path detection for build within CMake.
CMake already handles locating a CA bundle/path at runtime.",[],Utilities/cmcurl/lib/vauth/digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_19.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_19.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_19.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_70.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_70.cpp,387,386,395,-1,"snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_63.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_63.cpp,"{
  CURLcode result = CURLE_OK;
  size_t i;
  MD5_context *ctxt;
  char *response = NULL;
  unsigned char digest[MD5_DIGEST_LEN];
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  char nonce[64];
  char realm[128];
  char algorithm[64];
  char qop_options[64];
  int qop_values;
  char cnonce[33];
  unsigned int entropy[4];
  char nonceCount[] = ""00000001"";
  char method[]     = ""AUTHENTICATE"";
  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  char *spn         = NULL;

  /* Decode the challenge message */
  result = auth_decode_digest_md5_message(chlg64, nonce, sizeof(nonce),
                                          realm, sizeof(realm),
                                          algorithm, sizeof(algorithm),
                                          qop_options, sizeof(qop_options));
  if(result)
    return result;

  /* We only support md5 sessions */
  if(strcmp(algorithm, ""md5-sess"") != 0)
    return CURLE_BAD_CONTENT_ENCODING;

  /* Get the qop-values from the qop-options */
  result = auth_digest_get_qop_values(qop_options, &qop_values);
  if(result)
    return result;

  /* We only support auth quality-of-protection */
  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
    return CURLE_BAD_CONTENT_ENCODING;

  /* Generate 16 bytes of random data */
  result = Curl_rand(data, &entropy[0], 4);
  if(result)
    return result;

  /* Convert the random data into a 32 byte hex string */
  snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);

  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) userp,
                  curlx_uztoui(strlen(userp)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) realm,
                  curlx_uztoui(strlen(realm)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
                  curlx_uztoui(strlen(passwdp)));
  Curl_MD5_final(ctxt, digest);

  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_final(ctxt, digest);

  /* Convert calculated 16 octet hex into 32 bytes string */
  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate our SPN */
  spn = Curl_auth_build_spn(service, realm, NULL);
  if(!spn)
    return CURLE_OUT_OF_MEMORY;

  /* Calculate H(A2) */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) method,
                  curlx_uztoui(strlen(method)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) spn,
                  curlx_uztoui(strlen(spn)));
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Now calculate the response hash */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
                  curlx_uztoui(strlen(nonceCount)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) qop,
                  curlx_uztoui(strlen(qop)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate the response */
  response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  free(spn);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_63.cpp,"[11, 0, 3, 0, 0, 0, 12, 0, 0, 0, 15, 0, 0, 0, 24, 349, 0, 0, 19, 19, 0, 0, 9, 61, 0, 0, 0, 0, 3, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 0, 272, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 24, 0, 14, 11, 0, 0, 74, 0, 0, 46, 0, 167, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_63.cpp,54,"[""char *"", ""unkown"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""Curl_rand_ret"", ""!""]"
a3ef36f153f51c33ea2154cff17bbf9abb7ee073,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-06-14 (54b636f1)

Resolve a logical conflict in `Utilities/cmcurl/CMakeLists.txt`
by disabling CA bundle/path detection for build within CMake.
CMake already handles locating a CA bundle/path at runtime.",[],Utilities/cmcurl/lib/vauth/digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_19.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_19.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_19.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_71.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_71.cpp,684,679,690,-1,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             rnd[0], rnd[1], rnd[2], rnd[3]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_64.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_64.cpp,"{
    unsigned int rnd[4];
    result = Curl_rand(data, &rnd[0], 4);
    if(result)
      return result;
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             rnd[0], rnd[1], rnd[2], rnd[3]);

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_64.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 36, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 31, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 2, 2, 0, 0, 5, 0, 0, 4, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_64.cpp,29,"[""char *"", ""unkown"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""Curl_rand_ret"", ""!""]"
06d6d6c4aee149cd6560b919ef6935ef0867d921,"curl 2017-06-14 (54b636f1)

Code extracted from:

    https://github.com/curl/curl.git

at commit 54b636f14546d3fde9f9c67c3b32701d78563161 (curl-7_54_1).",[],lib/file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_21.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_21.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_21.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_73.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_73.cpp,475,473,477,476,"snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);","snprintf(header, sizeof(header),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_65.cpp,"{
    time_t filetime;
    struct tm buffer;
    const struct tm *tm = &buffer;
    snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(result)
      return result;

    result = Curl_client_write(conn, CLIENTWRITE_BOTH,
                               (char *)""Accept-ranges: bytes\r\n"", 0);
    if(result)
      return result;

    filetime = (time_t)statbuf.st_mtime;
    result = Curl_gmtime(filetime, &buffer);
    if(result)
      return result;

    /* format: ""Tue, 15 Nov 1994 12:45:26 GMT"" */
    snprintf(buf, BUFSIZE-1,
             ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
             Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
             tm->tm_mday,
             Curl_month[tm->tm_mon],
             tm->tm_year + 1900,
             tm->tm_hour,
             tm->tm_min,
             tm->tm_sec);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(!result)
      /* set the file size to make it available post transfer */
      Curl_pgrsSetDownloadSize(data, expected_size);
    return result;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_65.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 1, 86, 0, 0, 3, 3, 0, 0, 1, 11, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 1, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 5, 5, 1, 0, 8, 0, 0, 8, 0, 31, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_65.cpp,58,[],"[""member"", ""member"", ""bool"", ""&&"", ""&&""]"
06d6d6c4aee149cd6560b919ef6935ef0867d921,"curl 2017-06-14 (54b636f1)

Code extracted from:

    https://github.com/curl/curl.git

at commit 54b636f14546d3fde9f9c67c3b32701d78563161 (curl-7_54_1).",[],lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_22.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_22.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_22.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_75.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_75.cpp,2101,2100,2109,2108,"snprintf(buf, CURL_BUFSIZE(conn->data->set.buffer_size),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);","snprintf(timebuf, sizeof(timebuf),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_66.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_66.cpp,"{
        /* we have a time, reformat it */
        time_t secs=time(NULL);
        /* using the good old yacc/bison yuck */
        snprintf(buf, CURL_BUFSIZE(conn->data->set.buffer_size),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);
        /* now, convert this into a time() value: */
        data->info.filetime = (long)curl_getdate(buf, &secs);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_66.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 26, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_66.cpp,20,"[""char *"", ""CURL_BUFSIZE_ret"", ""string"", ""int"", ""int"", ""int"", ""int"", ""int"", ""int""]","[""int"", ""sscanf_ret"", ""==""]"
06d6d6c4aee149cd6560b919ef6935ef0867d921,"curl 2017-06-14 (54b636f1)

Code extracted from:

    https://github.com/curl/curl.git

at commit 54b636f14546d3fde9f9c67c3b32701d78563161 (curl-7_54_1).",[],lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_22.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_22.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_22.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_77.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_77.cpp,2318,2318,2320,2321,"snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);","snprintf(clbuf, sizeof(clbuf),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_67.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_67.cpp,"{
      snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);
      result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
      if(result)
        return result;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_67.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_67.cpp,15,[],"[""int"", ""curlx_strtoofft_ret"", ""!=""]"
06d6d6c4aee149cd6560b919ef6935ef0867d921,"curl 2017-06-14 (54b636f1)

Code extracted from:

    https://github.com/curl/curl.git

at commit 54b636f14546d3fde9f9c67c3b32701d78563161 (curl-7_54_1).",[],lib/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_23.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_23.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_23.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_78.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_78.cpp,297,298,299,300,"f(data->state.buffer, CURL_BUFSIZE(data->set.buffer_size),
           ""%s:%s"", user, pwd);","= aprintf(""%s:%s"", user, pwd);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_68.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_68.cpp,"{
  size_t size = 0;
  char *authorization = NULL;
  struct Curl_easy *data = conn->data;
  char **userp;
  const char *user;
  const char *pwd;
  CURLcode result;

  if(proxy) {
    userp = &conn->allocptr.proxyuserpwd;
    user = conn->http_proxy.user;
    pwd = conn->http_proxy.passwd;
  }
  else {
    userp = &conn->allocptr.userpwd;
    user = conn->user;
    pwd = conn->passwd;
  }

  snprintf(data->state.buffer, CURL_BUFSIZE(data->set.buffer_size),
           ""%s:%s"", user, pwd);

  result = Curl_base64_encode(data,
                              data->state.buffer, strlen(data->state.buffer),
                              &authorization, &size);
  if(result)
    return result;

  if(!authorization)
    return CURLE_REMOTE_ACCESS_DENIED;

  free(*userp);
  *userp = aprintf(""%sAuthorization: Basic %s\r\n"",
                   proxy ? ""Proxy-"" : """",
                   authorization);
  free(authorization);
  if(!*userp)
    return CURLE_OUT_OF_MEMORY;

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_68.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 2, 90, 0, 0, 7, 7, 0, 0, 3, 5, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 1, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 5, 5, 2, 0, 7, 0, 0, 11, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_68.cpp,21,"[""member"", ""CURL_BUFSIZE_ret"", ""string"", ""member"", ""member""]",[]
06d6d6c4aee149cd6560b919ef6935ef0867d921,"curl 2017-06-14 (54b636f1)

Code extracted from:

    https://github.com/curl/curl.git

at commit 54b636f14546d3fde9f9c67c3b32701d78563161 (curl-7_54_1).",[],lib/sendf.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_24.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_24.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_24.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_80.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_80.cpp,243,243,247,248,"vsnprintf(data->state.buffer, BUFSIZE, fmt, ap);","vsnprintf(error, CURL_ERROR_SIZE, fmt, ap);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_69.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_69.cpp,"{
  va_list ap;
  size_t len;
  va_start(ap, fmt);

  vsnprintf(data->state.buffer, BUFSIZE, fmt, ap);

  if(data->set.errorbuffer && !data->state.errorbuf) {
    snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, ""%s"", data->state.buffer);
    data->state.errorbuf = TRUE; /* wrote error string */
  }
  if(data->set.verbose) {
    len = strlen(data->state.buffer);
    if(len < BUFSIZE - 1) {
      data->state.buffer[len] = '\n';
      data->state.buffer[++len] = '\0';
    }
    Curl_debug(data, CURLINFO_TEXT, data->state.buffer, len, NULL);
  }

  va_end(ap);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_69.cpp,"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 71, 0, 0, 2, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 3, 0, 0, 6, 0, 0, 9, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_69.cpp,6,"[""member"", ""macro"", ""const char *"", ""va_list""]",[]
06d6d6c4aee149cd6560b919ef6935ef0867d921,"curl 2017-06-14 (54b636f1)

Code extracted from:

    https://github.com/curl/curl.git

at commit 54b636f14546d3fde9f9c67c3b32701d78563161 (curl-7_54_1).",[],lib/sendf.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_24.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_24.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_24.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_80.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_80.cpp,243,243,250,252,"snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, ""%s"", data->state.buffer);","strcpy(data->set.errorbuffer, error);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_70.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_70.cpp,"{
    snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, ""%s"", data->state.buffer);
    data->state.errorbuf = TRUE; /* wrote error string */
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_70.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_70.cpp,9,"[""member"", ""macro"", ""string"", ""member""]","[""member"", ""member"", ""&&""]"
06d6d6c4aee149cd6560b919ef6935ef0867d921,"curl 2017-06-14 (54b636f1)

Code extracted from:

    https://github.com/curl/curl.git

at commit 54b636f14546d3fde9f9c67c3b32701d78563161 (curl-7_54_1).",[],lib/vauth/digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_26.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_26.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_26.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_83.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_83.cpp,387,386,395,-1,"snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_71.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_71.cpp,"{
  CURLcode result = CURLE_OK;
  size_t i;
  MD5_context *ctxt;
  char *response = NULL;
  unsigned char digest[MD5_DIGEST_LEN];
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  char nonce[64];
  char realm[128];
  char algorithm[64];
  char qop_options[64];
  int qop_values;
  char cnonce[33];
  unsigned int entropy[4];
  char nonceCount[] = ""00000001"";
  char method[]     = ""AUTHENTICATE"";
  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  char *spn         = NULL;

  /* Decode the challenge message */
  result = auth_decode_digest_md5_message(chlg64, nonce, sizeof(nonce),
                                          realm, sizeof(realm),
                                          algorithm, sizeof(algorithm),
                                          qop_options, sizeof(qop_options));
  if(result)
    return result;

  /* We only support md5 sessions */
  if(strcmp(algorithm, ""md5-sess"") != 0)
    return CURLE_BAD_CONTENT_ENCODING;

  /* Get the qop-values from the qop-options */
  result = auth_digest_get_qop_values(qop_options, &qop_values);
  if(result)
    return result;

  /* We only support auth quality-of-protection */
  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
    return CURLE_BAD_CONTENT_ENCODING;

  /* Generate 16 bytes of random data */
  result = Curl_rand(data, &entropy[0], 4);
  if(result)
    return result;

  /* Convert the random data into a 32 byte hex string */
  snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);

  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) userp,
                  curlx_uztoui(strlen(userp)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) realm,
                  curlx_uztoui(strlen(realm)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
                  curlx_uztoui(strlen(passwdp)));
  Curl_MD5_final(ctxt, digest);

  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_final(ctxt, digest);

  /* Convert calculated 16 octet hex into 32 bytes string */
  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate our SPN */
  spn = Curl_auth_build_spn(service, realm, NULL);
  if(!spn)
    return CURLE_OUT_OF_MEMORY;

  /* Calculate H(A2) */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) method,
                  curlx_uztoui(strlen(method)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) spn,
                  curlx_uztoui(strlen(spn)));
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Now calculate the response hash */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
                  curlx_uztoui(strlen(nonceCount)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) qop,
                  curlx_uztoui(strlen(qop)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate the response */
  response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  free(spn);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_71.cpp,"[11, 0, 3, 0, 0, 0, 12, 0, 0, 0, 15, 0, 0, 0, 24, 349, 0, 0, 19, 19, 0, 0, 9, 61, 0, 0, 0, 0, 3, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 0, 272, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 24, 0, 14, 11, 0, 0, 74, 0, 0, 46, 0, 167, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_71.cpp,54,"[""char *"", ""unkown"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""Curl_rand_ret"", ""!""]"
06d6d6c4aee149cd6560b919ef6935ef0867d921,"curl 2017-06-14 (54b636f1)

Code extracted from:

    https://github.com/curl/curl.git

at commit 54b636f14546d3fde9f9c67c3b32701d78563161 (curl-7_54_1).",[],lib/vauth/digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_26.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_26.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_26.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_84.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_84.cpp,684,679,690,-1,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             rnd[0], rnd[1], rnd[2], rnd[3]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_72.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_72.cpp,"{
    unsigned int rnd[4];
    result = Curl_rand(data, &rnd[0], 4);
    if(result)
      return result;
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             rnd[0], rnd[1], rnd[2], rnd[3]);

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_72.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 36, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 31, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 2, 2, 0, 0, 5, 0, 0, 4, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_72.cpp,29,"[""char *"", ""unkown"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""Curl_rand_ret"", ""!""]"
16ebd9f6152fedd1804f13c91ed14e8963e53d3f,"Merge branch 'upstream-KWSys' into update-kwsys

* upstream-KWSys:
  KWSys 2017-05-16 (fe1f22ce)",[],Source/kwsys/ProcessUNIX.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_29.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_29.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_29.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_88.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_88.cpp,2243,2273,2246,2276,"sprintf(cp->ExitExceptionString, ""Signal %d"", sig);","sprintf(cp->ProcessResults[idx].ExitExceptionString, ""Signal %d"", sig);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_74.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_74.cpp,"{
#ifdef SIGSEGV
    case SIGSEGV:
      KWSYSPE_CASE(Fault, ""Segmentation fault"");
      break;
#endif
#ifdef SIGBUS
#if !defined(SIGSEGV) || SIGBUS != SIGSEGV
    case SIGBUS:
      KWSYSPE_CASE(Fault, ""Bus error"");
      break;
#endif
#endif
#ifdef SIGFPE
    case SIGFPE:
      KWSYSPE_CASE(Numerical, ""Floating-point exception"");
      break;
#endif
#ifdef SIGILL
    case SIGILL:
      KWSYSPE_CASE(Illegal, ""Illegal instruction"");
      break;
#endif
#ifdef SIGINT
    case SIGINT:
      KWSYSPE_CASE(Interrupt, ""User interrupt"");
      break;
#endif
#ifdef SIGABRT
    case SIGABRT:
      KWSYSPE_CASE(Other, ""Child aborted"");
      break;
#endif
#ifdef SIGKILL
    case SIGKILL:
      KWSYSPE_CASE(Other, ""Child killed"");
      break;
#endif
#ifdef SIGTERM
    case SIGTERM:
      KWSYSPE_CASE(Other, ""Child terminated"");
      break;
#endif
#ifdef SIGHUP
    case SIGHUP:
      KWSYSPE_CASE(Other, ""SIGHUP"");
      break;
#endif
#ifdef SIGQUIT
    case SIGQUIT:
      KWSYSPE_CASE(Other, ""SIGQUIT"");
      break;
#endif
#ifdef SIGTRAP
    case SIGTRAP:
      KWSYSPE_CASE(Other, ""SIGTRAP"");
      break;
#endif
#ifdef SIGIOT
#if !defined(SIGABRT) || SIGIOT != SIGABRT
    case SIGIOT:
      KWSYSPE_CASE(Other, ""SIGIOT"");
      break;
#endif
#endif
#ifdef SIGUSR1
    case SIGUSR1:
      KWSYSPE_CASE(Other, ""SIGUSR1"");
      break;
#endif
#ifdef SIGUSR2
    case SIGUSR2:
      KWSYSPE_CASE(Other, ""SIGUSR2"");
      break;
#endif
#ifdef SIGPIPE
    case SIGPIPE:
      KWSYSPE_CASE(Other, ""SIGPIPE"");
      break;
#endif
#ifdef SIGALRM
    case SIGALRM:
      KWSYSPE_CASE(Other, ""SIGALRM"");
      break;
#endif
#ifdef SIGSTKFLT
    case SIGSTKFLT:
      KWSYSPE_CASE(Other, ""SIGSTKFLT"");
      break;
#endif
#ifdef SIGCHLD
    case SIGCHLD:
      KWSYSPE_CASE(Other, ""SIGCHLD"");
      break;
#elif defined(SIGCLD)
    case SIGCLD:
      KWSYSPE_CASE(Other, ""SIGCLD"");
      break;
#endif
#ifdef SIGCONT
    case SIGCONT:
      KWSYSPE_CASE(Other, ""SIGCONT"");
      break;
#endif
#ifdef SIGSTOP
    case SIGSTOP:
      KWSYSPE_CASE(Other, ""SIGSTOP"");
      break;
#endif
#ifdef SIGTSTP
    case SIGTSTP:
      KWSYSPE_CASE(Other, ""SIGTSTP"");
      break;
#endif
#ifdef SIGTTIN
    case SIGTTIN:
      KWSYSPE_CASE(Other, ""SIGTTIN"");
      break;
#endif
#ifdef SIGTTOU
    case SIGTTOU:
      KWSYSPE_CASE(Other, ""SIGTTOU"");
      break;
#endif
#ifdef SIGURG
    case SIGURG:
      KWSYSPE_CASE(Other, ""SIGURG"");
      break;
#endif
#ifdef SIGXCPU
    case SIGXCPU:
      KWSYSPE_CASE(Other, ""SIGXCPU"");
      break;
#endif
#ifdef SIGXFSZ
    case SIGXFSZ:
      KWSYSPE_CASE(Other, ""SIGXFSZ"");
      break;
#endif
#ifdef SIGVTALRM
    case SIGVTALRM:
      KWSYSPE_CASE(Other, ""SIGVTALRM"");
      break;
#endif
#ifdef SIGPROF
    case SIGPROF:
      KWSYSPE_CASE(Other, ""SIGPROF"");
      break;
#endif
#ifdef SIGWINCH
    case SIGWINCH:
      KWSYSPE_CASE(Other, ""SIGWINCH"");
      break;
#endif
#ifdef SIGPOLL
    case SIGPOLL:
      KWSYSPE_CASE(Other, ""SIGPOLL"");
      break;
#endif
#ifdef SIGIO
#if !defined(SIGPOLL) || SIGIO != SIGPOLL
    case SIGIO:
      KWSYSPE_CASE(Other, ""SIGIO"");
      break;
#endif
#endif
#ifdef SIGPWR
    case SIGPWR:
      KWSYSPE_CASE(Other, ""SIGPWR"");
      break;
#endif
#ifdef SIGSYS
    case SIGSYS:
      KWSYSPE_CASE(Other, ""SIGSYS"");
      break;
#endif
#ifdef SIGUNUSED
#if !defined(SIGSYS) || SIGUNUSED != SIGSYS
    case SIGUNUSED:
      KWSYSPE_CASE(Other, ""SIGUNUSED"");
      break;
#endif
#endif
    default:
      cp->ExitException = kwsysProcess_Exception_Other;
      sprintf(cp->ExitExceptionString, ""Signal %d"", sig);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_74.cpp,"[4, 0, 0, 0, 36, 0, 0, 0, 35, 1, 1, 0, 0, 0, 0, 166, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 37, 0, 78, 77, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_74.cpp,187,"[""member"", ""string"", ""int""]","[""int""]"
16ebd9f6152fedd1804f13c91ed14e8963e53d3f,"Merge branch 'upstream-KWSys' into update-kwsys

* upstream-KWSys:
  KWSys 2017-05-16 (fe1f22ce)",[],Source/kwsys/ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_30.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_30.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_30.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_89.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_89.cpp,2120,2142,2123,2145,"_snprintf(cp->ExitExceptionString, KWSYSPE_PIPE_BUFFER_SIZE,
                ""Exit code 0x%x\n"", code);","_snprintf(cp->ProcessResults[idx].ExitExceptionString,
                KWSYSPE_PIPE_BUFFER_SIZE, ""Exit code 0x%x\n"", code);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_75.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_75.cpp,"{
    case STATUS_CONTROL_C_EXIT:
      KWSYSPE_CASE(Interrupt, ""User interrupt"");
      break;

    case STATUS_FLOAT_DENORMAL_OPERAND:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (denormal operand)"");
      break;
    case STATUS_FLOAT_DIVIDE_BY_ZERO:
      KWSYSPE_CASE(Numerical, ""Divide-by-zero"");
      break;
    case STATUS_FLOAT_INEXACT_RESULT:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (inexact result)"");
      break;
    case STATUS_FLOAT_INVALID_OPERATION:
      KWSYSPE_CASE(Numerical, ""Invalid floating-point operation"");
      break;
    case STATUS_FLOAT_OVERFLOW:
      KWSYSPE_CASE(Numerical, ""Floating-point overflow"");
      break;
    case STATUS_FLOAT_STACK_CHECK:
      KWSYSPE_CASE(Numerical, ""Floating-point stack check failed"");
      break;
    case STATUS_FLOAT_UNDERFLOW:
      KWSYSPE_CASE(Numerical, ""Floating-point underflow"");
      break;
#ifdef STATUS_FLOAT_MULTIPLE_FAULTS
    case STATUS_FLOAT_MULTIPLE_FAULTS:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (multiple faults)"");
      break;
#endif
#ifdef STATUS_FLOAT_MULTIPLE_TRAPS
    case STATUS_FLOAT_MULTIPLE_TRAPS:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (multiple traps)"");
      break;
#endif
    case STATUS_INTEGER_DIVIDE_BY_ZERO:
      KWSYSPE_CASE(Numerical, ""Integer divide-by-zero"");
      break;
    case STATUS_INTEGER_OVERFLOW:
      KWSYSPE_CASE(Numerical, ""Integer overflow"");
      break;

    case STATUS_DATATYPE_MISALIGNMENT:
      KWSYSPE_CASE(Fault, ""Datatype misalignment"");
      break;
    case STATUS_ACCESS_VIOLATION:
      KWSYSPE_CASE(Fault, ""Access violation"");
      break;
    case STATUS_IN_PAGE_ERROR:
      KWSYSPE_CASE(Fault, ""In-page error"");
      break;
    case STATUS_INVALID_HANDLE:
      KWSYSPE_CASE(Fault, ""Invalid hanlde"");
      break;
    case STATUS_NONCONTINUABLE_EXCEPTION:
      KWSYSPE_CASE(Fault, ""Noncontinuable exception"");
      break;
    case STATUS_INVALID_DISPOSITION:
      KWSYSPE_CASE(Fault, ""Invalid disposition"");
      break;
    case STATUS_ARRAY_BOUNDS_EXCEEDED:
      KWSYSPE_CASE(Fault, ""Array bounds exceeded"");
      break;
    case STATUS_STACK_OVERFLOW:
      KWSYSPE_CASE(Fault, ""Stack overflow"");
      break;

    case STATUS_ILLEGAL_INSTRUCTION:
      KWSYSPE_CASE(Illegal, ""Illegal instruction"");
      break;
    case STATUS_PRIVILEGED_INSTRUCTION:
      KWSYSPE_CASE(Illegal, ""Privileged instruction"");
      break;

    case STATUS_NO_MEMORY:
    default:
      cp->ExitException = kwsysProcess_Exception_Other;
      _snprintf(cp->ExitExceptionString, KWSYSPE_PIPE_BUFFER_SIZE,
                ""Exit code 0x%x\n"", code);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_75.cpp,"[0, 0, 0, 0, 23, 0, 0, 0, 23, 1, 1, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 24, 0, 48, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_75.cpp,80,"[""member"", ""macro"", ""string"", ""int""]","[""int""]"
7be70ca6cc888df532d2f1560e74d13642730ee5,"KWSys 2017-05-16 (fe1f22ce)

Code extracted from:

    https://gitlab.kitware.com/utils/kwsys.git

at commit fe1f22ceefdae18df33e5bab8483fec7a82d4cee (master).

Upstream Shortlog
-----------------

Adam Weisi (3):
      8a799e36 Process: Improve definition ordering in header file
      7d56ef24 Process: Save results from all children internally
      b7eba998 Process: Add APIs to get results of individual processes

Ben Boeckel (2):
      cea71543 style: remove separator comments
      874dc559 style: help clang-format near macros",[],ProcessUNIX.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_32.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_32.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_32.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_91.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_91.cpp,2243,2273,2246,2276,"sprintf(cp->ExitExceptionString, ""Signal %d"", sig);","sprintf(cp->ProcessResults[idx].ExitExceptionString, ""Signal %d"", sig);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_76.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_76.cpp,"{
#ifdef SIGSEGV
    case SIGSEGV:
      KWSYSPE_CASE(Fault, ""Segmentation fault"");
      break;
#endif
#ifdef SIGBUS
#if !defined(SIGSEGV) || SIGBUS != SIGSEGV
    case SIGBUS:
      KWSYSPE_CASE(Fault, ""Bus error"");
      break;
#endif
#endif
#ifdef SIGFPE
    case SIGFPE:
      KWSYSPE_CASE(Numerical, ""Floating-point exception"");
      break;
#endif
#ifdef SIGILL
    case SIGILL:
      KWSYSPE_CASE(Illegal, ""Illegal instruction"");
      break;
#endif
#ifdef SIGINT
    case SIGINT:
      KWSYSPE_CASE(Interrupt, ""User interrupt"");
      break;
#endif
#ifdef SIGABRT
    case SIGABRT:
      KWSYSPE_CASE(Other, ""Child aborted"");
      break;
#endif
#ifdef SIGKILL
    case SIGKILL:
      KWSYSPE_CASE(Other, ""Child killed"");
      break;
#endif
#ifdef SIGTERM
    case SIGTERM:
      KWSYSPE_CASE(Other, ""Child terminated"");
      break;
#endif
#ifdef SIGHUP
    case SIGHUP:
      KWSYSPE_CASE(Other, ""SIGHUP"");
      break;
#endif
#ifdef SIGQUIT
    case SIGQUIT:
      KWSYSPE_CASE(Other, ""SIGQUIT"");
      break;
#endif
#ifdef SIGTRAP
    case SIGTRAP:
      KWSYSPE_CASE(Other, ""SIGTRAP"");
      break;
#endif
#ifdef SIGIOT
#if !defined(SIGABRT) || SIGIOT != SIGABRT
    case SIGIOT:
      KWSYSPE_CASE(Other, ""SIGIOT"");
      break;
#endif
#endif
#ifdef SIGUSR1
    case SIGUSR1:
      KWSYSPE_CASE(Other, ""SIGUSR1"");
      break;
#endif
#ifdef SIGUSR2
    case SIGUSR2:
      KWSYSPE_CASE(Other, ""SIGUSR2"");
      break;
#endif
#ifdef SIGPIPE
    case SIGPIPE:
      KWSYSPE_CASE(Other, ""SIGPIPE"");
      break;
#endif
#ifdef SIGALRM
    case SIGALRM:
      KWSYSPE_CASE(Other, ""SIGALRM"");
      break;
#endif
#ifdef SIGSTKFLT
    case SIGSTKFLT:
      KWSYSPE_CASE(Other, ""SIGSTKFLT"");
      break;
#endif
#ifdef SIGCHLD
    case SIGCHLD:
      KWSYSPE_CASE(Other, ""SIGCHLD"");
      break;
#elif defined(SIGCLD)
    case SIGCLD:
      KWSYSPE_CASE(Other, ""SIGCLD"");
      break;
#endif
#ifdef SIGCONT
    case SIGCONT:
      KWSYSPE_CASE(Other, ""SIGCONT"");
      break;
#endif
#ifdef SIGSTOP
    case SIGSTOP:
      KWSYSPE_CASE(Other, ""SIGSTOP"");
      break;
#endif
#ifdef SIGTSTP
    case SIGTSTP:
      KWSYSPE_CASE(Other, ""SIGTSTP"");
      break;
#endif
#ifdef SIGTTIN
    case SIGTTIN:
      KWSYSPE_CASE(Other, ""SIGTTIN"");
      break;
#endif
#ifdef SIGTTOU
    case SIGTTOU:
      KWSYSPE_CASE(Other, ""SIGTTOU"");
      break;
#endif
#ifdef SIGURG
    case SIGURG:
      KWSYSPE_CASE(Other, ""SIGURG"");
      break;
#endif
#ifdef SIGXCPU
    case SIGXCPU:
      KWSYSPE_CASE(Other, ""SIGXCPU"");
      break;
#endif
#ifdef SIGXFSZ
    case SIGXFSZ:
      KWSYSPE_CASE(Other, ""SIGXFSZ"");
      break;
#endif
#ifdef SIGVTALRM
    case SIGVTALRM:
      KWSYSPE_CASE(Other, ""SIGVTALRM"");
      break;
#endif
#ifdef SIGPROF
    case SIGPROF:
      KWSYSPE_CASE(Other, ""SIGPROF"");
      break;
#endif
#ifdef SIGWINCH
    case SIGWINCH:
      KWSYSPE_CASE(Other, ""SIGWINCH"");
      break;
#endif
#ifdef SIGPOLL
    case SIGPOLL:
      KWSYSPE_CASE(Other, ""SIGPOLL"");
      break;
#endif
#ifdef SIGIO
#if !defined(SIGPOLL) || SIGIO != SIGPOLL
    case SIGIO:
      KWSYSPE_CASE(Other, ""SIGIO"");
      break;
#endif
#endif
#ifdef SIGPWR
    case SIGPWR:
      KWSYSPE_CASE(Other, ""SIGPWR"");
      break;
#endif
#ifdef SIGSYS
    case SIGSYS:
      KWSYSPE_CASE(Other, ""SIGSYS"");
      break;
#endif
#ifdef SIGUNUSED
#if !defined(SIGSYS) || SIGUNUSED != SIGSYS
    case SIGUNUSED:
      KWSYSPE_CASE(Other, ""SIGUNUSED"");
      break;
#endif
#endif
    default:
      cp->ExitException = kwsysProcess_Exception_Other;
      sprintf(cp->ExitExceptionString, ""Signal %d"", sig);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_76.cpp,"[4, 0, 0, 0, 36, 0, 0, 0, 35, 1, 1, 0, 0, 0, 0, 166, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 37, 0, 78, 77, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_76.cpp,187,"[""member"", ""string"", ""int""]","[""int""]"
7be70ca6cc888df532d2f1560e74d13642730ee5,"KWSys 2017-05-16 (fe1f22ce)

Code extracted from:

    https://gitlab.kitware.com/utils/kwsys.git

at commit fe1f22ceefdae18df33e5bab8483fec7a82d4cee (master).

Upstream Shortlog
-----------------

Adam Weisi (3):
      8a799e36 Process: Improve definition ordering in header file
      7d56ef24 Process: Save results from all children internally
      b7eba998 Process: Add APIs to get results of individual processes

Ben Boeckel (2):
      cea71543 style: remove separator comments
      874dc559 style: help clang-format near macros",[],ProcessWin32.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_33.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_33.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_33.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_92.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_92.cpp,2120,2142,2123,2145,"_snprintf(cp->ExitExceptionString, KWSYSPE_PIPE_BUFFER_SIZE,
                ""Exit code 0x%x\n"", code);","_snprintf(cp->ProcessResults[idx].ExitExceptionString,
                KWSYSPE_PIPE_BUFFER_SIZE, ""Exit code 0x%x\n"", code);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_77.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_77.cpp,"{
    case STATUS_CONTROL_C_EXIT:
      KWSYSPE_CASE(Interrupt, ""User interrupt"");
      break;

    case STATUS_FLOAT_DENORMAL_OPERAND:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (denormal operand)"");
      break;
    case STATUS_FLOAT_DIVIDE_BY_ZERO:
      KWSYSPE_CASE(Numerical, ""Divide-by-zero"");
      break;
    case STATUS_FLOAT_INEXACT_RESULT:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (inexact result)"");
      break;
    case STATUS_FLOAT_INVALID_OPERATION:
      KWSYSPE_CASE(Numerical, ""Invalid floating-point operation"");
      break;
    case STATUS_FLOAT_OVERFLOW:
      KWSYSPE_CASE(Numerical, ""Floating-point overflow"");
      break;
    case STATUS_FLOAT_STACK_CHECK:
      KWSYSPE_CASE(Numerical, ""Floating-point stack check failed"");
      break;
    case STATUS_FLOAT_UNDERFLOW:
      KWSYSPE_CASE(Numerical, ""Floating-point underflow"");
      break;
#ifdef STATUS_FLOAT_MULTIPLE_FAULTS
    case STATUS_FLOAT_MULTIPLE_FAULTS:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (multiple faults)"");
      break;
#endif
#ifdef STATUS_FLOAT_MULTIPLE_TRAPS
    case STATUS_FLOAT_MULTIPLE_TRAPS:
      KWSYSPE_CASE(Numerical, ""Floating-point exception (multiple traps)"");
      break;
#endif
    case STATUS_INTEGER_DIVIDE_BY_ZERO:
      KWSYSPE_CASE(Numerical, ""Integer divide-by-zero"");
      break;
    case STATUS_INTEGER_OVERFLOW:
      KWSYSPE_CASE(Numerical, ""Integer overflow"");
      break;

    case STATUS_DATATYPE_MISALIGNMENT:
      KWSYSPE_CASE(Fault, ""Datatype misalignment"");
      break;
    case STATUS_ACCESS_VIOLATION:
      KWSYSPE_CASE(Fault, ""Access violation"");
      break;
    case STATUS_IN_PAGE_ERROR:
      KWSYSPE_CASE(Fault, ""In-page error"");
      break;
    case STATUS_INVALID_HANDLE:
      KWSYSPE_CASE(Fault, ""Invalid hanlde"");
      break;
    case STATUS_NONCONTINUABLE_EXCEPTION:
      KWSYSPE_CASE(Fault, ""Noncontinuable exception"");
      break;
    case STATUS_INVALID_DISPOSITION:
      KWSYSPE_CASE(Fault, ""Invalid disposition"");
      break;
    case STATUS_ARRAY_BOUNDS_EXCEEDED:
      KWSYSPE_CASE(Fault, ""Array bounds exceeded"");
      break;
    case STATUS_STACK_OVERFLOW:
      KWSYSPE_CASE(Fault, ""Stack overflow"");
      break;

    case STATUS_ILLEGAL_INSTRUCTION:
      KWSYSPE_CASE(Illegal, ""Illegal instruction"");
      break;
    case STATUS_PRIVILEGED_INSTRUCTION:
      KWSYSPE_CASE(Illegal, ""Privileged instruction"");
      break;

    case STATUS_NO_MEMORY:
    default:
      cp->ExitException = kwsysProcess_Exception_Other;
      _snprintf(cp->ExitExceptionString, KWSYSPE_PIPE_BUFFER_SIZE,
                ""Exit code 0x%x\n"", code);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_77.cpp,"[0, 0, 0, 0, 23, 0, 0, 0, 23, 1, 1, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 24, 0, 48, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_77.cpp,80,"[""member"", ""macro"", ""string"", ""int""]","[""int""]"
299975908ada992800791fac7f3739050e0ae2a9,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-04-19 (d957e218)

Resolve conflicts in `CMakeLists.txt` in favor of the upstream version.
We will re-apply our logic as needed in following commits.",[],Utilities/cmcurl/lib/conncache.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_35.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_35.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_35.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_94.cpp,141,136,143,141,"aprintf(""%s:%d"", hostname, conn->port);","snprintf(buf, len, ""%ld%s"", conn->port, hostname);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_78.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_78.cpp,"{
  const char *hostname;

  if(conn->bits.socksproxy)
    hostname = conn->socks_proxy.host.name;
  else if(conn->bits.httpproxy)
    hostname = conn->http_proxy.host.name;
  else if(conn->bits.conn_to_host)
    hostname = conn->conn_to_host.name;
  else
    hostname = conn->host.name;

  return aprintf(""%s:%d"", hostname, conn->port);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_78.cpp,"[3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 1, 41, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 3, 1, 0, 1, 0, 0, 4, 2, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_78.cpp,13,"[""string"", ""member"", ""member""]",[]
299975908ada992800791fac7f3739050e0ae2a9,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-04-19 (d957e218)

Resolve conflicts in `CMakeLists.txt` in favor of the upstream version.
We will re-apply our logic as needed in following commits.",[],Utilities/cmcurl/lib/file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_36.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_36.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_36.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_95.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_95.cpp,476,475,478,477,"snprintf(buf, sizeof(data->state.buffer),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);","snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_79.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_79.cpp,"{
    time_t filetime;
    struct tm buffer;
    const struct tm *tm = &buffer;
    snprintf(buf, sizeof(data->state.buffer),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(result)
      return result;

    result = Curl_client_write(conn, CLIENTWRITE_BOTH,
                               (char *)""Accept-ranges: bytes\r\n"", 0);
    if(result)
      return result;

    filetime = (time_t)statbuf.st_mtime;
    result = Curl_gmtime(filetime, &buffer);
    if(result)
      return result;

    /* format: ""Tue, 15 Nov 1994 12:45:26 GMT"" */
    snprintf(buf, BUFSIZE-1,
             ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
             Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
             tm->tm_mday,
             Curl_month[tm->tm_mon],
             tm->tm_year + 1900,
             tm->tm_hour,
             tm->tm_min,
             tm->tm_sec);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(!result)
      /* set the file size to make it available post transfer */
      Curl_pgrsSetDownloadSize(data, expected_size);
    return result;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_79.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 1, 85, 0, 0, 3, 3, 0, 0, 1, 11, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 1, 53, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 5, 5, 1, 0, 8, 0, 0, 8, 0, 31, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_79.cpp,58,[],"[""member"", ""member"", ""bool"", ""&&"", ""&&""]"
299975908ada992800791fac7f3739050e0ae2a9,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-04-19 (d957e218)

Resolve conflicts in `CMakeLists.txt` in favor of the upstream version.
We will re-apply our logic as needed in following commits.",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_37.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_37.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_37.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_96.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_96.cpp,2107,2107,2109,2109,"snprintf(buf, sizeof(conn->data->state.buffer),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);","snprintf(buf, CURL_BUFSIZE(conn->data->set.buffer_size),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_80.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_80.cpp,"{
        /* we have a time, reformat it */
        time_t secs=time(NULL);
        /* using the good old yacc/bison yuck */
        snprintf(buf, sizeof(conn->data->state.buffer),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);
        /* now, convert this into a time() value: */
        data->info.filetime = (long)curl_getdate(buf, &secs);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_80.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 25, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 16, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_80.cpp,20,"[""char *"", ""member"", ""string"", ""int"", ""int"", ""int"", ""int"", ""int"", ""int""]","[""int"", ""sscanf_ret"", ""==""]"
299975908ada992800791fac7f3739050e0ae2a9,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-04-19 (d957e218)

Resolve conflicts in `CMakeLists.txt` in favor of the upstream version.
We will re-apply our logic as needed in following commits.",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_37.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_37.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_37.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_97.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_97.cpp,2318,2318,2320,2320,"snprintf(buf, sizeof(data->state.buffer),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);","snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_81.cpp,"{
      snprintf(buf, sizeof(data->state.buffer),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);
      result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
      if(result)
        return result;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_81.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 13, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_81.cpp,15,[],"[""int"", ""curlx_strtoofft_ret"", ""!=""]"
299975908ada992800791fac7f3739050e0ae2a9,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-04-19 (d957e218)

Resolve conflicts in `CMakeLists.txt` in favor of the upstream version.
We will re-apply our logic as needed in following commits.",[],Utilities/cmcurl/lib/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_38.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_38.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_38.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_99.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_99.cpp,297,297,299,299,"f(data->state.buffer, sizeof(data->state.buffer), ""%s:%s"", user, pwd);","f(data->state.buffer, CURL_BUFSIZE(data->set.buffer_size),
           ""%s:%s"", user, pwd);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_82.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_82.cpp,"{
  size_t size = 0;
  char *authorization = NULL;
  struct Curl_easy *data = conn->data;
  char **userp;
  const char *user;
  const char *pwd;
  CURLcode result;

  if(proxy) {
    userp = &conn->allocptr.proxyuserpwd;
    user = conn->http_proxy.user;
    pwd = conn->http_proxy.passwd;
  }
  else {
    userp = &conn->allocptr.userpwd;
    user = conn->user;
    pwd = conn->passwd;
  }

  snprintf(data->state.buffer, sizeof(data->state.buffer), ""%s:%s"", user, pwd);

  result = Curl_base64_encode(data,
                              data->state.buffer, strlen(data->state.buffer),
                              &authorization, &size);
  if(result)
    return result;

  if(!authorization)
    return CURLE_REMOTE_ACCESS_DENIED;

  free(*userp);
  *userp = aprintf(""%sAuthorization: Basic %s\r\n"",
                   proxy ? ""Proxy-"" : """",
                   authorization);
  free(authorization);
  if(!*userp)
    return CURLE_OUT_OF_MEMORY;

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_82.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 2, 89, 0, 0, 7, 7, 0, 0, 3, 5, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 1, 42, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 5, 5, 2, 0, 7, 0, 0, 11, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_82.cpp,21,"[""member"", ""member"", ""string"", ""member"", ""member""]",[]
299975908ada992800791fac7f3739050e0ae2a9,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-04-19 (d957e218)

Resolve conflicts in `CMakeLists.txt` in favor of the upstream version.
We will re-apply our logic as needed in following commits.",[],Utilities/cmcurl/lib/url.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_40.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_40.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_40.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_101.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_101.cpp,641,644,644,648,,"DEBUGF(fprintf(stderr, ""Error: malloc of buffer failed\n""));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_83.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_83.cpp,"f(!data->state.headerbuff) {
    DEBUGF(fprintf(stderr, ""Error: malloc of headerbuff failed\n""));
    result = CURLE_OUT_OF_MEMORY;
  }
  else {
    result = Curl_init_userdefined(&data->set);

    data->state.headersize=HEADERSIZE;

    Curl_convert_init(data);

    Curl_initinfo(data);

    /* most recent connection is not yet defined */
    data->state.lastconnect = NULL;

    data->progress.flags |= PGRS_HIDE;
    data->state.current_speed = -1; /* init to negative == impossible */

    data->wildcard.state = CURLWC_INIT;
    data->wildcard.filelist = NULL;
    data->set.fnmatch = ZERO_NULL;
    data->set.maxconnects = DEFAULT_CONNCACHE_SIZE; /* for easy handles */

    Curl_http2_init_state(&data->state);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_83.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 14, 0, 8, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_83.cpp,25,[],"[""Curl_resolver_init_ret"", ""!""]"
299975908ada992800791fac7f3739050e0ae2a9,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2017-04-19 (d957e218)

Resolve conflicts in `CMakeLists.txt` in favor of the upstream version.
We will re-apply our logic as needed in following commits.",[],Utilities/cmcurl/lib/vtls/cyassl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_42.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_42.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_42.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_104.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_104.cpp,720,741,723,744,,"snprintf(buffer, size, ""wolfSSL/%s"", wolfSSL_lib_version());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_85.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_85.cpp,"{
#ifdef WOLFSSL_VERSION
  return snprintf(buffer, size, ""wolfSSL/%s"", WOLFSSL_VERSION);
#elif defined(CYASSL_VERSION)
  return snprintf(buffer, size, ""CyaSSL/%s"", CYASSL_VERSION);
#else
  return snprintf(buffer, size, ""CyaSSL/%s"", ""<1.8.8"");
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_85.cpp,"[0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 13, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_85.cpp,3,"[""char *"", ""size_t"", ""string"", ""macro""]",[]
fd7d521c9d70655618db8232d45e5aaf81700f91,"curl 2017-04-19 (d957e218)

Code extracted from:

    https://github.com/curl/curl.git

at commit d957e2189fdc73cef0ff3d1fb58043d354754449 (curl-7_54_0).",[],lib/conncache.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_44.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_44.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_44.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_106.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_106.cpp,141,136,143,141,"aprintf(""%s:%d"", hostname, conn->port);","snprintf(buf, len, ""%ld%s"", conn->port, hostname);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_86.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_86.cpp,"{
  const char *hostname;

  if(conn->bits.socksproxy)
    hostname = conn->socks_proxy.host.name;
  else if(conn->bits.httpproxy)
    hostname = conn->http_proxy.host.name;
  else if(conn->bits.conn_to_host)
    hostname = conn->conn_to_host.name;
  else
    hostname = conn->host.name;

  return aprintf(""%s:%d"", hostname, conn->port);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_86.cpp,"[3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 1, 41, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 3, 1, 0, 1, 0, 0, 4, 2, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_86.cpp,13,"[""string"", ""member"", ""member""]",[]
fd7d521c9d70655618db8232d45e5aaf81700f91,"curl 2017-04-19 (d957e218)

Code extracted from:

    https://github.com/curl/curl.git

at commit d957e2189fdc73cef0ff3d1fb58043d354754449 (curl-7_54_0).",[],lib/file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_45.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_45.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_45.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_107.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_107.cpp,476,475,478,477,"snprintf(buf, sizeof(data->state.buffer),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);","snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_87.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_87.cpp,"{
    time_t filetime;
    struct tm buffer;
    const struct tm *tm = &buffer;
    snprintf(buf, sizeof(data->state.buffer),
             ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", expected_size);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(result)
      return result;

    result = Curl_client_write(conn, CLIENTWRITE_BOTH,
                               (char *)""Accept-ranges: bytes\r\n"", 0);
    if(result)
      return result;

    filetime = (time_t)statbuf.st_mtime;
    result = Curl_gmtime(filetime, &buffer);
    if(result)
      return result;

    /* format: ""Tue, 15 Nov 1994 12:45:26 GMT"" */
    snprintf(buf, BUFSIZE-1,
             ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
             Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
             tm->tm_mday,
             Curl_month[tm->tm_mon],
             tm->tm_year + 1900,
             tm->tm_hour,
             tm->tm_min,
             tm->tm_sec);
    result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    if(!result)
      /* set the file size to make it available post transfer */
      Curl_pgrsSetDownloadSize(data, expected_size);
    return result;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_87.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 1, 85, 0, 0, 3, 3, 0, 0, 1, 11, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 1, 53, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 5, 5, 1, 0, 8, 0, 0, 8, 0, 31, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_87.cpp,58,[],"[""member"", ""member"", ""macro"", ""&&"", ""&&""]"
fd7d521c9d70655618db8232d45e5aaf81700f91,"curl 2017-04-19 (d957e218)

Code extracted from:

    https://github.com/curl/curl.git

at commit d957e2189fdc73cef0ff3d1fb58043d354754449 (curl-7_54_0).",[],lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_46.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_46.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_46.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_108.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_108.cpp,2107,2107,2109,2109,"snprintf(buf, sizeof(conn->data->state.buffer),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);","snprintf(buf, CURL_BUFSIZE(conn->data->set.buffer_size),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_88.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_88.cpp,"{
        /* we have a time, reformat it */
        time_t secs=time(NULL);
        /* using the good old yacc/bison yuck */
        snprintf(buf, sizeof(conn->data->state.buffer),
                 ""%04d%02d%02d %02d:%02d:%02d GMT"",
                 year, month, day, hour, minute, second);
        /* now, convert this into a time() value: */
        data->info.filetime = (long)curl_getdate(buf, &secs);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_88.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 25, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 16, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_88.cpp,20,"[""char *"", ""member"", ""string"", ""int"", ""int"", ""int"", ""int"", ""int"", ""int""]","[""int"", ""sscanf_ret"", ""==""]"
fd7d521c9d70655618db8232d45e5aaf81700f91,"curl 2017-04-19 (d957e218)

Code extracted from:

    https://github.com/curl/curl.git

at commit d957e2189fdc73cef0ff3d1fb58043d354754449 (curl-7_54_0).",[],lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_46.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_46.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_46.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_109.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_109.cpp,2318,2318,2320,2320,"snprintf(buf, sizeof(data->state.buffer),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);","snprintf(buf, CURL_BUFSIZE(data->set.buffer_size),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_89.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_89.cpp,"{
      snprintf(buf, sizeof(data->state.buffer),
               ""Content-Length: %"" CURL_FORMAT_CURL_OFF_T ""\r\n"", filesize);
      result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
      if(result)
        return result;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_89.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 13, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_89.cpp,15,[],"[""int"", ""curlx_strtoofft_ret"", ""!=""]"
fd7d521c9d70655618db8232d45e5aaf81700f91,"curl 2017-04-19 (d957e218)

Code extracted from:

    https://github.com/curl/curl.git

at commit d957e2189fdc73cef0ff3d1fb58043d354754449 (curl-7_54_0).",[],lib/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_47.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_47.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_47.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_111.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_111.cpp,297,297,299,299,"f(data->state.buffer, sizeof(data->state.buffer), ""%s:%s"", user, pwd);","f(data->state.buffer, CURL_BUFSIZE(data->set.buffer_size),
           ""%s:%s"", user, pwd);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_90.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_90.cpp,"{
  size_t size = 0;
  char *authorization = NULL;
  struct Curl_easy *data = conn->data;
  char **userp;
  const char *user;
  const char *pwd;
  CURLcode result;

  if(proxy) {
    userp = &conn->allocptr.proxyuserpwd;
    user = conn->http_proxy.user;
    pwd = conn->http_proxy.passwd;
  }
  else {
    userp = &conn->allocptr.userpwd;
    user = conn->user;
    pwd = conn->passwd;
  }

  snprintf(data->state.buffer, sizeof(data->state.buffer), ""%s:%s"", user, pwd);

  result = Curl_base64_encode(data,
                              data->state.buffer, strlen(data->state.buffer),
                              &authorization, &size);
  if(result)
    return result;

  if(!authorization)
    return CURLE_REMOTE_ACCESS_DENIED;

  free(*userp);
  *userp = aprintf(""%sAuthorization: Basic %s\r\n"",
                   proxy ? ""Proxy-"" : """",
                   authorization);
  free(authorization);
  if(!*userp)
    return CURLE_OUT_OF_MEMORY;

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_90.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 2, 89, 0, 0, 7, 7, 0, 0, 3, 5, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 1, 42, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 5, 5, 2, 0, 7, 0, 0, 11, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_90.cpp,21,"[""member"", ""member"", ""string"", ""member"", ""member""]",[]
fd7d521c9d70655618db8232d45e5aaf81700f91,"curl 2017-04-19 (d957e218)

Code extracted from:

    https://github.com/curl/curl.git

at commit d957e2189fdc73cef0ff3d1fb58043d354754449 (curl-7_54_0).",[],lib/url.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_49.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_49.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_49.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_113.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_113.cpp,641,644,644,648,,"DEBUGF(fprintf(stderr, ""Error: malloc of buffer failed\n""));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_91.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_91.cpp,"f(!data->state.headerbuff) {
    DEBUGF(fprintf(stderr, ""Error: malloc of headerbuff failed\n""));
    result = CURLE_OUT_OF_MEMORY;
  }
  else {
    result = Curl_init_userdefined(&data->set);

    data->state.headersize=HEADERSIZE;

    Curl_convert_init(data);

    Curl_initinfo(data);

    /* most recent connection is not yet defined */
    data->state.lastconnect = NULL;

    data->progress.flags |= PGRS_HIDE;
    data->state.current_speed = -1; /* init to negative == impossible */

    data->wildcard.state = CURLWC_INIT;
    data->wildcard.filelist = NULL;
    data->set.fnmatch = ZERO_NULL;
    data->set.maxconnects = DEFAULT_CONNCACHE_SIZE; /* for easy handles */

    Curl_http2_init_state(&data->state);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_91.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 14, 0, 8, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_91.cpp,25,[],"[""Curl_resolver_init_ret"", ""!""]"
fd7d521c9d70655618db8232d45e5aaf81700f91,"curl 2017-04-19 (d957e218)

Code extracted from:

    https://github.com/curl/curl.git

at commit d957e2189fdc73cef0ff3d1fb58043d354754449 (curl-7_54_0).",[],lib/vtls/cyassl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_51.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_51.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_51.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_116.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_116.cpp,720,741,723,744,,"snprintf(buffer, size, ""wolfSSL/%s"", wolfSSL_lib_version());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_93.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_93.cpp,"{
#ifdef WOLFSSL_VERSION
  return snprintf(buffer, size, ""wolfSSL/%s"", WOLFSSL_VERSION);
#elif defined(CYASSL_VERSION)
  return snprintf(buffer, size, ""CyaSSL/%s"", CYASSL_VERSION);
#else
  return snprintf(buffer, size, ""CyaSSL/%s"", ""<1.8.8"");
#endif
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_93.cpp,"[0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 13, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_93.cpp,3,"[""char *"", ""size_t"", ""string"", ""macro""]",[]
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_129.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_129.cpp,302,321,312,324,"archive_set_error(&a->archive, errno,
				    ""Couldn't change dir"");","archive_set_error(&a->archive, errno,
			    ""Can't change dir to read extended attributes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_94.cpp,"{
			archive_set_error(&a->archive, errno,
				    ""Couldn't change dir"");
				return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_94.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_94.cpp,25,"[""member"", ""unkown"", ""string""]","[""a -> tree_enter_working_dir_ret"", ""null"", ""!=""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_131.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_131.cpp,436,505,450,539,,"archive_set_error(&a->archive, errno,
			    ""Couldn't translate ""
#if !HAVE_SUN_ACL
			    ""NFSv4 ""
#endif
			    ""ACLs"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_96.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_96.cpp,"{
		translate_acl(a, entry, acl, ARCHIVE_ENTRY_ACL_TYPE_NFS4);
		acl_free(acl);
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_96.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_96.cpp,43,[],"[""acl_get_fd_ret"", ""null"", ""!=""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_132.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_132.cpp,467,577,472,595,,"archive_set_error(&a->archive, errno,
			    ""Couldn't translate access ACLs"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_97.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_97.cpp,"{
		translate_acl(a, entry, acl,
		    ARCHIVE_ENTRY_ACL_TYPE_ACCESS);
		acl_free(acl);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_97.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_97.cpp,65,"[""acl_get_link_np_ret""]","[""acl_get_fd_ret"", ""null"", ""!=""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_132.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_132.cpp,467,577,481,614,,"archive_set_error(&a->archive, errno,
				    ""Couldn't translate default ACLs"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_98.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_98.cpp,"{
			translate_acl(a, entry, acl,
			    ARCHIVE_ENTRY_ACL_TYPE_DEFAULT);
			acl_free(acl);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_98.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_98.cpp,74,"[""acl_get_file_ret""]","[""acl_get_file_ret"", ""null"", ""!=""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_132.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_132.cpp,467,577,577,1178,,"archive_set_error(&a->archive, errno,
		    ""Failed to read ACL brand"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_99.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_99.cpp,"(s == 1) {
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_99.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 25, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_99.cpp,48,[],"[""int""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_132.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_132.cpp,467,577,577,1210,,"archive_set_error(&a->archive, errno,
		    ""Failed to get first ACL entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_103.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_103.cpp,"(s == 1) {
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_103.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 25, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_103.cpp,48,[],"[""int""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_132.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_132.cpp,467,577,577,1226,,"archive_set_error(&a->archive, errno,
			    ""Failed to get ACL tag type"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_104.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_104.cpp,"(s == 1) {
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_104.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 25, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_104.cpp,48,[],"[""bool"", ""!""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_133.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_133.cpp,604,1262,624,1306,,"archive_set_error(&a->archive, errno, ""Failed ""
				    ""to get ACL type from a NFSv4 ACL entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_105.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_105.cpp,"(acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_105.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_105.cpp,95,[],"[""acl_get_entry_type_np_ret"", ""null"", ""==""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_134.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_134.cpp,635,1321,644,1324,,"archive_set_error(&a->archive, errno,
				    ""Invalid NFSv4 ACL entry type"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_106.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_106.cpp,"{
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_106.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 28, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_106.cpp,115,"[""acl_entry_t"", ""unkown""]","[""acl_tag_t""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_134.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_134.cpp,635,1321,644,1337,,"archive_set_error(&a->archive, errno,
				    ""Failed to get flagset from a NFSv4 ACL entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_107.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_107.cpp,"{
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_107.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 28, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_107.cpp,115,"[""acl_entry_t"", ""unkown""]","[""acl_tag_t""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_134.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_134.cpp,635,1321,646,1345,,"archive_set_error(&a->archive, errno,
					    ""Failed to check flag in a NFSv4 ""
					    ""ACL flagset"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_108.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_108.cpp,"(acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_108.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_108.cpp,117,"[""acl_flagset_t"", ""member""]","[""null"", ""unkown"", ""<""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_134.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_134.cpp,635,1321,653,1356,,"archive_set_error(&a->archive, errno,
			    ""Failed to get ACL permission set"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_109.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_109.cpp,"{
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_109.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 28, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_109.cpp,124,"[""acl_entry_t"", ""unkown""]","[""acl_tag_t""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_134.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_134.cpp,635,1321,659,1367,,"archive_set_error(&a->archive, errno,
				    ""Failed to check permission in an ACL permission set"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_110.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_110.cpp,"(ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_110.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_110.cpp,130,"[""acl_permset_t"", ""member""]","[""null"", ""unkown"", ""<""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_136.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_136.cpp,772,1486,785,1496,"archive_set_error(&a->archive, errno,
				    ""Couldn't access %s"", path);","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_112.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_112.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Couldn't access %s"", path);
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_112.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_112.cpp,19,"[""member"", ""unkown"", ""string"", ""archive_entry_pathname_ret""]","[""a -> tree_enter_working_dir_ret"", ""null"", ""!=""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_59.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_59.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_137.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_137.cpp,932,1645,945,1655,"archive_set_error(&a->archive, errno,
				    ""Couldn't access %s"", path);","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_113.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_113.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Couldn't access %s"", path);
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_113.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_113.cpp,21,"[""member"", ""unkown"", ""string"", ""archive_entry_pathname_ret""]","[""a -> tree_enter_working_dir_ret"", ""null"", ""!=""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_60.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_60.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_60.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_139.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_139.cpp,938,938,939,939,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_114.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_114.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_114.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_114.cpp,66,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_path_excluded_ret"", ""null"", ""<""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_60.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_60.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_60.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_140.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_140.cpp,1041,1041,1042,1042,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_115.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_115.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_115.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_115.cpp,169,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_time_excluded_ret"", ""null"", ""<""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_60.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_60.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_60.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_141.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_141.cpp,1067,1067,1068,1068,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_116.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_116.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_116.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_116.cpp,195,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_owner_excluded_ret"", ""null"", ""<""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_61.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_61.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_61.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_143.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_143.cpp,803,802,804,803,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_117.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_117.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_117.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_117.cpp,50,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_path_excluded_ret"", ""null"", ""<""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_61.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_61.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_61.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_144.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_144.cpp,875,874,876,875,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_118.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_118.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_118.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_118.cpp,122,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_time_excluded_ret"", ""null"", ""<""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_61.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_61.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_61.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_145.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_145.cpp,901,900,902,901,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_119.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_119.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_119.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_119.cpp,148,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_owner_excluded_ret"", ""null"", ""<""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_63.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_63.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_63.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_150.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_150.cpp,706,706,708,709,,"archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""truncated lz4 input"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_120.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_120.cpp,"{
	struct private_data *state = (struct private_data *)self->data;
	int compressed;
	const char *read_buf;
	ssize_t ret;

	*p = NULL;
	ret = lz4_allocate_out_block_for_legacy(self);
	if (ret != ARCHIVE_OK)
		return ret;

	/* Make sure we have 4 bytes for a block size. */
	read_buf = __archive_read_filter_ahead(self->upstream, 4, NULL);
	if (read_buf == NULL) {
		if (state->stage == SELECT_STREAM) {
			state->stage = READ_LEGACY_STREAM;
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated lz4 input"");
			return (ARCHIVE_FATAL);
		}
		state->stage = SELECT_STREAM;
		return 0;
	}
	state->stage = READ_LEGACY_BLOCK;
	compressed = archive_le32dec(read_buf);
	if (compressed > LZ4_COMPRESSBOUND(LEGACY_BLOCK_SIZE)) {
		state->stage = SELECT_STREAM;
		return 0;
	}

	/* Make sure we have a whole block. */
	read_buf = __archive_read_filter_ahead(self->upstream,
	    4 + compressed, NULL);
	ret = LZ4_decompress_safe(read_buf + 4, state->out_block,
	    compressed, (int)state->out_block_size);
	if (ret < 0) {
		archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""lz4 decompression failed"");
		return (ARCHIVE_FATAL);
	}
	*p = state->out_block;
	state->unconsumed = 4 + compressed;
	return ret;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_120.cpp,"[5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 1, 98, 0, 0, 4, 4, 0, 0, 1, 9, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 5, 0, 0, 8, 0, 0, 14, 0, 19, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_120.cpp,36,"[""__archive_read_filter_ahead_ret"", ""member"", ""archive_le32dec_ret"", ""member""]","[""archive_le32dec_ret"", ""LZ4_COMPRESSBOUND_ret"", "">"", ""!""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_154.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_154.cpp,763,744,789,-1,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for lzma decompression"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_121.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_121.cpp,"{
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for lzma decompression"");
		free(out_block);
		free(state);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_121.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_121.cpp,14,"[""member"", ""macro"", ""string""]","[""calloc_ret"", ""null"", ""=="", ""malloc_ret"", ""null"", ""=="", ""||""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_154.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_154.cpp,763,744,820,-1,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""Internal error initializing lzma library"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_122.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_122.cpp,"{
	static const size_t out_block_size = 64 * 1024;
	void *out_block;
	struct private_data *state;
	ssize_t ret, avail_in;

	self->code = ARCHIVE_FILTER_LZMA;
	self->name = ""lzma"";

	state = (struct private_data *)calloc(sizeof(*state), 1);
	out_block = (unsigned char *)malloc(out_block_size);
	if (state == NULL || out_block == NULL) {
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for lzma decompression"");
		free(out_block);
		free(state);
		return (ARCHIVE_FATAL);
	}

	self->data = state;
	state->out_block_size = out_block_size;
	state->out_block = out_block;
	self->read = lzma_filter_read;
	self->skip = NULL; /* not supported */
	self->close = lzma_filter_close;

	/* Prime the lzma library with 18 bytes of input. */
	state->stream.next_in = (unsigned char *)(uintptr_t)
	    __archive_read_filter_ahead(self->upstream, 18, &avail_in);
	if (state->stream.next_in == NULL)
		return (ARCHIVE_FATAL);
	state->stream.avail_in = avail_in;
	state->stream.next_out = state->out_block;
	state->stream.avail_out = state->out_block_size;

	/* Initialize compression library. */
	ret = lzmadec_init(&(state->stream));
	__archive_read_filter_consume(self->upstream,
	    avail_in - state->stream.avail_in);
	if (ret == LZMADEC_OK)
		return (ARCHIVE_OK);

	/* Library setup failed: Clean up. */
	archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""Internal error initializing lzma library"");

	/* Override the error message if we know what really went wrong. */
	switch (ret) {
	case LZMADEC_HEADER_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid header"");
		break;
	case LZMADEC_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	}

	free(state->out_block);
	free(state);
	self->data = NULL;
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_122.cpp,"[3, 0, 0, 0, 2, 0, 4, 1, 2, 0, 5, 0, 0, 0, 2, 152, 0, 0, 4, 5, 0, 0, 1, 11, 0, 0, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 62, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 4, 3, 0, 0, 14, 0, 0, 25, 0, 26, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_122.cpp,45,"[""member"", ""macro"", ""string""]","[""lzmadec_init_ret"", ""macro"", ""=="", ""!""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_154.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_154.cpp,763,744,826,-1,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid header"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_123.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_123.cpp,"{
	case LZMADEC_HEADER_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid header"");
		break;
	case LZMADEC_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_123.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_123.cpp,51,[],"[""lzmadec_init_ret""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_154.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_154.cpp,763,744,832,-1,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_124.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_124.cpp,"{
	case LZMADEC_HEADER_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid header"");
		break;
	case LZMADEC_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_124.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_124.cpp,57,[],"[""lzmadec_init_ret""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_154.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_154.cpp,763,744,865,-1,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated lzma input"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_125.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_125.cpp,"{
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated lzma input"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_125.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_125.cpp,18,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""=="", ""ssize_t"", ""null"", ""<"", ""&&""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_154.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_154.cpp,763,744,883,-1,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_126.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_126.cpp,"{
		case LZMADEC_STREAM_END: /* Found end of stream. */
			state->eof = 1;
			/* FALL THROUGH */
		case LZMADEC_OK: /* Decompressor made some progress. */
			__archive_read_filter_consume(self->upstream,
			    avail_in - state->stream.avail_in);
			break;
		case LZMADEC_BUF_ERROR: /* Insufficient input data? */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");
			return (ARCHIVE_FATAL);
		default:
			/* Return an error. */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Lzma decompression failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_126.cpp,"[0, 0, 0, 0, 1, 0, 2, 0, 3, 1, 1, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_126.cpp,36,"[""member"", ""macro"", ""string""]","[""lzmadec_decode_ret""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_154.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_154.cpp,763,744,889,-1,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Lzma decompression failed"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_127.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_127.cpp,"{
		case LZMADEC_STREAM_END: /* Found end of stream. */
			state->eof = 1;
			/* FALL THROUGH */
		case LZMADEC_OK: /* Decompressor made some progress. */
			__archive_read_filter_consume(self->upstream,
			    avail_in - state->stream.avail_in);
			break;
		case LZMADEC_BUF_ERROR: /* Insufficient input data? */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");
			return (ARCHIVE_FATAL);
		default:
			/* Return an error. */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Lzma decompression failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_127.cpp,"[0, 0, 0, 0, 1, 0, 2, 0, 3, 1, 1, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_127.cpp,42,"[""member"", ""macro"", ""string""]","[""lzmadec_decode_ret""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_65.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_65.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_154.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_154.cpp,763,744,920,-1,"archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up %s compressor"",
		    self->archive->archive.compression_name);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_128.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_128.cpp,"{
	case LZMADEC_OK:
		break;
	default:
		archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up %s compressor"",
		    self->archive->archive.compression_name);
		ret = ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_128.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_128.cpp,12,"[""member"", ""macro"", ""string"", ""member""]","[""lzmadec_end_ret""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_72.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_172.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_172.cpp,935,989,939,991,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Solaris NFSv4 ACLs not supported"");",acl_type = ARCHIVE_ENTRY_ACL_TYPE_ACCESS;,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_129.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_129.cpp,"{
	case 01000000:
		/* POSIX.1e ACL */
		break;
	case 03000000:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Solaris NFSv4 ACLs not supported"");
		return (ARCHIVE_WARN);
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Malformed Solaris ACL attribute (unsupported type %o)"",
		    (int)type);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_129.cpp,"[0, 0, 0, 0, 1, 0, 2, 0, 2, 1, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_129.cpp,53,"[""member"", ""macro"", ""string""]","[""bool""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_72.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_174.cpp,1128,1183,1129,1184,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry has negative size?"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry has negative size"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_130.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_130.cpp,"{
		tar->entry_bytes_remaining = 0;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry has negative size?"");
		err = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_130.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_130.cpp,23,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""<""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_72.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_174.cpp,1128,1183,1133,1191,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry size overflow"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_131.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_131.cpp,"{
	const struct archive_entry_header_ustar	*header;
	char	tartype;
	int     err = ARCHIVE_OK;

	header = (const struct archive_entry_header_ustar *)h;
	if (header->linkname[0])
		archive_strncpy(&(tar->entry_linkpath),
		    header->linkname, sizeof(header->linkname));
	else
		archive_string_empty(&(tar->entry_linkpath));

	/* Parse out the numeric fields (all are octal) */
	archive_entry_set_mode(entry,
		(mode_t)tar_atol(header->mode, sizeof(header->mode)));
	archive_entry_set_uid(entry, tar_atol(header->uid, sizeof(header->uid)));
	archive_entry_set_gid(entry, tar_atol(header->gid, sizeof(header->gid)));
	tar->entry_bytes_remaining = tar_atol(header->size, sizeof(header->size));
	if (tar->entry_bytes_remaining < 0) {
		tar->entry_bytes_remaining = 0;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry has negative size?"");
		err = ARCHIVE_WARN;
	}
	tar->realsize = tar->entry_bytes_remaining;
	archive_entry_set_size(entry, tar->entry_bytes_remaining);
	archive_entry_set_mtime(entry, tar_atol(header->mtime, sizeof(header->mtime)), 0);

	/* Handle the tar type flag appropriately. */
	tartype = header->typeflag[0];

	switch (tartype) {
	case '1': /* Hard link */
		if (archive_entry_copy_hardlink_l(entry, tar->entry_linkpath.s,
		    archive_strlen(&(tar->entry_linkpath)), tar->sconv) != 0) {
			err = set_conversion_failed_error(a, tar->sconv,
			    ""Linkname"");
			if (err == ARCHIVE_FATAL)
				return (err);
		}
		/*
		 * The following may seem odd, but: Technically, tar
		 * does not store the file type for a ""hard link""
		 * entry, only the fact that it is a hard link.  So, I
		 * leave the type zero normally.  But, pax interchange
		 * format allows hard links to have data, which
		 * implies that the underlying entry is a regular
		 * file.
		 */
		if (archive_entry_size(entry) > 0)
			archive_entry_set_filetype(entry, AE_IFREG);

		/*
		 * A tricky point: Traditionally, tar readers have
		 * ignored the size field when reading hardlink
		 * entries, and some writers put non-zero sizes even
		 * though the body is empty.  POSIX blessed this
		 * convention in the 1988 standard, but broke with
		 * this tradition in 2001 by permitting hardlink
		 * entries to store valid bodies in pax interchange
		 * format, but not in ustar format.  Since there is no
		 * hard and fast way to distinguish pax interchange
		 * from earlier archives (the 'x' and 'g' entries are
		 * optional, after all), we need a heuristic.
		 */
		if (archive_entry_size(entry) == 0) {
			/* If the size is already zero, we're done. */
		}  else if (a->archive.archive_format
		    == ARCHIVE_FORMAT_TAR_PAX_INTERCHANGE) {
			/* Definitely pax extended; must obey hardlink size. */
		} else if (a->archive.archive_format == ARCHIVE_FORMAT_TAR
		    || a->archive.archive_format == ARCHIVE_FORMAT_TAR_GNUTAR)
		{
			/* Old-style or GNU tar: we must ignore the size. */
			archive_entry_set_size(entry, 0);
			tar->entry_bytes_remaining = 0;
		} else if (archive_read_format_tar_bid(a, 50) > 50) {
			/*
			 * We don't know if it's pax: If the bid
			 * function sees a valid ustar header
			 * immediately following, then let's ignore
			 * the hardlink size.
			 */
			archive_entry_set_size(entry, 0);
			tar->entry_bytes_remaining = 0;
		}
		/*
		 * TODO: There are still two cases I'd like to handle:
		 *   = a ustar non-pax archive with a hardlink entry at
		 *     end-of-archive.  (Look for block of nulls following?)
		 *   = a pax archive that has not seen any pax headers
		 *     and has an entry which is a hardlink entry storing
		 *     a body containing an uncompressed tar archive.
		 * The first is worth addressing; I don't see any reliable
		 * way to deal with the second possibility.
		 */
		break;
	case '2': /* Symlink */
		archive_entry_set_filetype(entry, AE_IFLNK);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		if (archive_entry_copy_symlink_l(entry, tar->entry_linkpath.s,
		    archive_strlen(&(tar->entry_linkpath)), tar->sconv) != 0) {
			err = set_conversion_failed_error(a, tar->sconv,
			    ""Linkname"");
			if (err == ARCHIVE_FATAL)
				return (err);
		}
		break;
	case '3': /* Character device */
		archive_entry_set_filetype(entry, AE_IFCHR);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		break;
	case '4': /* Block device */
		archive_entry_set_filetype(entry, AE_IFBLK);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		break;
	case '5': /* Dir */
		archive_entry_set_filetype(entry, AE_IFDIR);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		break;
	case '6': /* FIFO device */
		archive_entry_set_filetype(entry, AE_IFIFO);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		break;
	case 'D': /* GNU incremental directory type */
		/*
		 * No special handling is actually required here.
		 * It might be nice someday to preprocess the file list and
		 * provide it to the client, though.
		 */
		archive_entry_set_filetype(entry, AE_IFDIR);
		break;
	case 'M': /* GNU ""Multi-volume"" (remainder of file from last archive)*/
		/*
		 * As far as I can tell, this is just like a regular file
		 * entry, except that the contents should be _appended_ to
		 * the indicated file at the indicated offset.  This may
		 * require some API work to fully support.
		 */
		break;
	case 'N': /* Old GNU ""long filename"" entry. */
		/* The body of this entry is a script for renaming
		 * previously-extracted entries.  Ugh.  It will never
		 * be supported by libarchive. */
		archive_entry_set_filetype(entry, AE_IFREG);
		break;
	case 'S': /* GNU sparse files */
		/*
		 * Sparse files are really just regular files with
		 * sparse information in the extended area.
		 */
		/* FALLTHROUGH */
	default: /* Regular file  and non-standard types */
		/*
		 * Per POSIX: non-recognized types should always be
		 * treated as regular files.
		 */
		archive_entry_set_filetype(entry, AE_IFREG);
		break;
	}
	return (err);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_131.cpp,"[11, 0, 0, 0, 10, 0, 3, 1, 10, 1, 14, 0, 0, 0, 2, 233, 0, 0, 3, 3, 0, 0, 1, 38, 0, 0, 0, 0, 1, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 153, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 12, 11, 1, 0, 44, 0, 0, 39, 3, 86, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_131.cpp,27,[],[]
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_72.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_176.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_176.cpp,1721,1854,1724,1859,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Non-regular file cannot be sparse"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_135.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_135.cpp,"(strcmp(key, ""GNU.sparse.numblocks"") == 0) {
			tar->sparse_offset = -1;
			tar->sparse_numbytes = -1;
			tar->sparse_gnu_major = 0;
			tar->sparse_gnu_minor = 0;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_135.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_135.cpp,14,"[""const char *"", ""constant""]","[""member""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_72.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_177.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_177.cpp,1803,1944,1819,-1,"archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.access"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_136.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_136.cpp,"{
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.access"");
					return (err);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_136.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_136.cpp,109,[],"[""archive_acl_parse_l_ret"", ""macro"", ""==""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_72.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_177.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_177.cpp,1803,1944,1824,-1,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SCHILY.acl.access"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_137.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_137.cpp,"{
				err = r;
				if (err == ARCHIVE_FATAL) {
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.access"");
					return (err);
				}
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SCHILY.acl.access"");
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_137.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_137.cpp,114,"[""member"", ""macro"", ""constant""]","[""archive_acl_parse_l_ret"", ""macro"", ""=="", ""!""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_72.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_177.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_177.cpp,1803,1944,1843,-1,"archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.default"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_138.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_138.cpp,"{
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.default"");
					return (err);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_138.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_138.cpp,133,[],"[""archive_acl_parse_l_ret"", ""macro"", ""==""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_72.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_72.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_177.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_177.cpp,1803,1944,1848,-1,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SCHILY.acl.default"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_139.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_139.cpp,"{
				err = r;
				if (err == ARCHIVE_FATAL) {
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.default"");
					return (err);
				}
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SCHILY.acl.default"");
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_139.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_139.cpp,138,"[""member"", ""macro"", ""constant""]","[""archive_acl_parse_l_ret"", ""macro"", ""=="", ""!""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_73.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_73.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_73.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_180.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_180.cpp,255,254,262,260,"archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Unsupported record version"");","archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Invalid record version"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_140.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_140.cpp,"{
		/* nawww, I wish they promised backward compatibility
		 * anyhoo, in their infinite wisdom the 28500 guys might
		 * come up with something we can't possibly handle so
		 * best end things here */
		archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Unsupported record version"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_140.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_140.cpp,52,"[""member"", ""macro"", ""string""]","[""_warc_rdver_ret"", ""constant"", "">""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_73.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_73.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_73.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_181.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_181.cpp,285,293,286,294,"archive_string_sprintf(&w->sver,
			""WARC/%u.%u"", ver / 10000, ver % 10000);","archive_string_sprintf(&w->sver,
			""WARC/%u.%u"", ver / 10000, (ver % 10000) / 100);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_142.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_142.cpp,"{
		/* stringify this entry's version */
		archive_string_sprintf(&w->sver,
			""WARC/%u.%u"", ver / 10000, ver % 10000);
		/* remember the version */
		w->pver = ver;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_142.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_142.cpp,76,"[""member"", ""constant"", ""_warc_rdver_ret"", ""_warc_rdver_ret""]","[""_warc_rdver_ret"", ""member"", ""!=""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_75.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_75.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_75.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_187.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_187.cpp,715,739,720,742,"fprintf(stderr,
		    ""Extra data field contents do not match reported size!\n"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Malformed extra data: Consumed %d bytes of %d bytes"",
		    (int)offset, (int)extra_length);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_151.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_151.cpp,"{
		fprintf(stderr,
		    ""Extra data field contents do not match reported size!\n"");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_151.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_151.cpp,300,"[""unkown"", ""string""]","[""int"", ""size_t"", ""!=""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_75.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_75.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_75.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_188.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_188.cpp,1136,1168,1143,1175,,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Overflow of 64-bit file sizes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_152.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_152.cpp,"{
				zip->entry->crc32 = archive_le32dec(p + 4);
				zip->entry->compressed_size =
					archive_le64dec(p + 8);
				zip->entry->uncompressed_size =
					archive_le64dec(p + 16);
				zip->unconsumed = 24;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_152.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_152.cpp,48,[],"[""bool""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_75.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_75.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_75.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_190.cpp,1417,1456,1422,1463,,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Overflow of 64-bit file sizes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_153.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_153.cpp,"{
			zip->entry->crc32 = archive_le32dec(p);
			zip->entry->compressed_size = archive_le64dec(p + 4);
			zip->entry->uncompressed_size = archive_le64dec(p + 12);
			zip->unconsumed += 20;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_153.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_153.cpp,167,[],"[""bool""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_76.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_76.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_76.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_200.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_200.cpp,2534,2807,2543,2817,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty pathname"");","fsobj_error(a_eno, a_estr, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty "", ""pathname"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_167.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_167.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty pathname"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_167.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_167.cpp,8,"[""member"", ""macro"", ""string""]","[""member"", ""char"", ""==""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_76.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_76.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_76.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_200.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_200.cpp,2534,2807,2554,2828,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			                  ""Path is absolute"");","fsobj_error(a_eno, a_estr, ARCHIVE_ERRNO_MISC,
			    ""Path is "", ""absolute"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_168.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_168.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			                  ""Path is absolute"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_168.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_168.cpp,19,"[""member"", ""macro"", ""string""]","[""bool""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_76.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_76.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_76.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_201.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_201.cpp,2580,2854,2583,2858,"archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Path contains '..'"");","fsobj_error(a_eno, a_estr,
						    ARCHIVE_ERRNO_MISC,
						    ""Path contains "", ""'..'"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_169.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_169.cpp,"{
						archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Path contains '..'"");
						return (ARCHIVE_FAILED);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_169.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_169.cpp,48,"[""member"", ""macro"", ""constant""]","[""bool""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_78.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_78.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_78.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_210.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_210.cpp,1086,1163,1094,-1,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.access"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_173.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_173.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.access"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_173.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_173.cpp,634,[],"[""unkown"", ""macro"", ""==""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_78.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_78.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_78.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_210.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_210.cpp,1086,1163,1099,-1,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate ACL.access to UTF-8"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_174.cpp,"{
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.access"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate ACL.access to UTF-8"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_174.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_174.cpp,639,"[""member"", ""macro"", ""constant""]","[""unkown"", ""macro"", ""=="", ""!""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_78.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_78.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_78.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_210.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_210.cpp,1086,1163,1113,-1,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.default"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_175.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_175.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.default"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_175.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_175.cpp,653,[],"[""unkown"", ""macro"", ""==""]"
a59a7ee95601f3496ec9ba9ae1283a8d980460bf,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2017-02-19 (100ee75a)",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_78.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_78.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_78.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_210.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_210.cpp,1086,1163,1118,-1,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate ACL.default to UTF-8"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_176.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_176.cpp,"{
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.default"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate ACL.default to UTF-8"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_176.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_176.cpp,658,"[""member"", ""macro"", ""constant""]","[""unkown"", ""macro"", ""=="", ""!""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_213.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_213.cpp,302,321,312,324,"archive_set_error(&a->archive, errno,
				    ""Couldn't change dir"");","archive_set_error(&a->archive, errno,
			    ""Can't change dir to read extended attributes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_177.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_177.cpp,"{
			archive_set_error(&a->archive, errno,
				    ""Couldn't change dir"");
				return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_177.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_177.cpp,25,"[""member"", ""unkown"", ""string""]","[""a -> tree_enter_working_dir_ret"", ""null"", ""!=""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_214.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_214.cpp,400,416,424,466,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ACLs"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_178.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_178.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_178.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_178.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_215.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_215.cpp,436,505,450,539,,"archive_set_error(&a->archive, errno,
			    ""Couldn't translate ""
#if !HAVE_SUN_ACL
			    ""NFSv4 ""
#endif
			    ""ACLs"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_179.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_179.cpp,"{
		translate_acl(a, entry, acl, ARCHIVE_ENTRY_ACL_TYPE_NFS4);
		acl_free(acl);
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_179.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_179.cpp,43,[],"[""acl_get_file_ret"", ""null"", ""!=""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_216.cpp,467,577,472,595,,"archive_set_error(&a->archive, errno,
			    ""Couldn't translate access ACLs"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_180.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_180.cpp,"{
		translate_acl(a, entry, acl,
		    ARCHIVE_ENTRY_ACL_TYPE_ACCESS);
		acl_free(acl);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_180.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_180.cpp,65,"[""acl_get_link_np_ret""]","[""acl_get_file_ret"", ""null"", ""!=""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_216.cpp,467,577,481,614,,"archive_set_error(&a->archive, errno,
				    ""Couldn't translate default ACLs"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_181.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_181.cpp,"{
			translate_acl(a, entry, acl,
			    ARCHIVE_ENTRY_ACL_TYPE_DEFAULT);
			acl_free(acl);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_181.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_181.cpp,74,"[""acl_get_file_ret""]","[""acl_get_file_ret"", ""null"", ""!=""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_216.cpp,467,577,577,1178,,"archive_set_error(&a->archive, errno,
		    ""Failed to read ACL brand"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_182.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_182.cpp,"(s == 1) {
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_182.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 25, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_182.cpp,48,[],"[""int""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_216.cpp,467,577,558,1189,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for POSIX.1e ACL"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_183.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_183.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_183.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_183.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_216.cpp,467,577,564,1196,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Invalid ACL entry type for NFSv4 ACL"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_184.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_184.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_184.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_184.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_216.cpp,467,577,569,1202,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown ACL brand"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_185.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_185.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_185.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_185.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_216.cpp,467,577,577,1210,,"archive_set_error(&a->archive, errno,
		    ""Failed to get first ACL entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_186.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_186.cpp,"(s == 1) {
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_186.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 25, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_186.cpp,48,[],"[""int""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_216.cpp,467,577,577,1226,,"archive_set_error(&a->archive, errno,
			    ""Failed to get ACL tag type"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_187.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_187.cpp,"(s == 1) {
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_187.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 25, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_187.cpp,48,[],"[""int""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_217.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_217.cpp,604,1262,624,1306,,"archive_set_error(&a->archive, errno, ""Failed ""
				    ""to get ACL type from a NFSv4 ACL entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_188.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_188.cpp,"(acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_188.cpp,"[0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_188.cpp,95,[],"[""acl_get_entry_type_np_ret"", ""null"", ""==""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_218.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_218.cpp,635,1321,644,1324,,"archive_set_error(&a->archive, errno,
				    ""Invalid NFSv4 ACL entry type"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_189.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_189.cpp,"{
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_189.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 28, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_189.cpp,115,"[""acl_entry_t"", ""unkown""]","[""acl_tag_t""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_218.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_218.cpp,635,1321,644,1337,,"archive_set_error(&a->archive, errno,
				    ""Failed to get flagset from a NFSv4 ACL entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_190.cpp,"{
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_190.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 28, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_190.cpp,115,"[""acl_entry_t"", ""unkown""]","[""acl_tag_t""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_218.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_218.cpp,635,1321,646,1345,,"archive_set_error(&a->archive, errno,
					    ""Failed to check flag in a NFSv4 ""
					    ""ACL flagset"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_191.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_191.cpp,"(acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_191.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_191.cpp,117,"[""acl_flagset_t"", ""member""]","[""null"", ""unkown"", ""<""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_218.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_218.cpp,635,1321,653,1356,,"archive_set_error(&a->archive, errno,
			    ""Failed to get ACL permission set"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_192.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_192.cpp,"{
		ae_id = -1;
		ae_name = NULL;
		ae_perm = 0;

		acl_get_tag_type(acl_entry, &acl_tag);
		switch (acl_tag) {
		case ACL_USER:
			ae_id = (int)*(uid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_uname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_USER;
			break;
		case ACL_GROUP:
			ae_id = (int)*(gid_t *)acl_get_qualifier(acl_entry);
			ae_name = archive_read_disk_gname(&a->archive, ae_id);
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP;
			break;
		case ACL_MASK:
			ae_tag = ARCHIVE_ENTRY_ACL_MASK;
			break;
		case ACL_USER_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_USER_OBJ;
			break;
		case ACL_GROUP_OBJ:
			ae_tag = ARCHIVE_ENTRY_ACL_GROUP_OBJ;
			break;
		case ACL_OTHER:
			ae_tag = ARCHIVE_ENTRY_ACL_OTHER;
			break;
#ifdef ACL_TYPE_NFS4
		case ACL_EVERYONE:
			ae_tag = ARCHIVE_ENTRY_ACL_EVERYONE;
			break;
#endif
		default:
			/* Skip types that libarchive can't support. */
			s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
			continue;
		}

		// XXX acl type maps to allow/deny/audit/YYYY bits
		// XXX acl_get_entry_type_np on FreeBSD returns EINVAL for
		// non-NFSv4 ACLs
		entry_acl_type = default_entry_acl_type;
#ifdef ACL_TYPE_NFS4
		r = acl_get_entry_type_np(acl_entry, &acl_type);
		if (r == 0) {
			switch (acl_type) {
			case ACL_ENTRY_TYPE_ALLOW:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALLOW;
				break;
			case ACL_ENTRY_TYPE_DENY:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_DENY;
				break;
			case ACL_ENTRY_TYPE_AUDIT:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_AUDIT;
				break;
			case ACL_ENTRY_TYPE_ALARM:
				entry_acl_type = ARCHIVE_ENTRY_ACL_TYPE_ALARM;
				break;
			}
		}

		/*
		 * Libarchive stores ""flag"" (NFSv4 inheritance bits)
		 * in the ae_perm bitmap.
		 */
		acl_get_flagset_np(acl_entry, &acl_flagset);
                for (i = 0; i < (int)(sizeof(acl_inherit_map) / sizeof(acl_inherit_map[0])); ++i) {
			if (acl_get_flag_np(acl_flagset,
					    acl_inherit_map[i].platform_inherit))
				ae_perm |= acl_inherit_map[i].archive_inherit;

                }
#endif

		acl_get_permset(acl_entry, &acl_permset);
		for (i = 0; i < (int)(sizeof(acl_perm_map) / sizeof(acl_perm_map[0])); ++i) {
			/*
			 * acl_get_perm() is spelled differently on different
			 * platforms; see above.
			 */
			if (ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm;
		}

		archive_entry_acl_add_entry(entry, entry_acl_type,
					    ae_perm, ae_tag,
					    ae_id, ae_name);

		s = acl_get_entry(acl, ACL_NEXT_ENTRY, &acl_entry);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_192.cpp,"[3, 0, 2, 0, 11, 1, 0, 2, 11, 1, 8, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 92, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 3, 0, 0, 19, 0, 0, 28, 0, 36, 4, 2, 0, 0, 2, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_192.cpp,124,"[""acl_entry_t"", ""unkown""]","[""acl_tag_t""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_218.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_218.cpp,635,1321,659,1367,,"archive_set_error(&a->archive, errno,
				    ""Failed to check permission in an ACL permission set"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_193.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_193.cpp,"(ACL_GET_PERM(acl_permset, acl_perm_map[i].platform_perm))
				ae_perm |= acl_perm_map[i].archive_perm",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_193.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_193.cpp,130,"[""acl_permset_t"", ""member""]","[""null"", ""unkown"", ""<""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_219.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_219.cpp,666,1377,671,1381,,"archive_set_error(&a->archive, errno,
			    ""Failed to get next ACL entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_194.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_194.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_194.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_194.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_220.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_220.cpp,772,1486,785,1496,"archive_set_error(&a->archive, errno,
				    ""Couldn't access %s"", path);","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_195.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_195.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Couldn't access %s"", path);
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_195.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_195.cpp,19,"[""member"", ""unkown"", ""string"", ""archive_entry_pathname_ret""]","[""a -> tree_enter_working_dir_ret"", ""null"", ""!=""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_entry_from_file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_81.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_81.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_221.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_221.cpp,932,1645,945,1655,"archive_set_error(&a->archive, errno,
				    ""Couldn't access %s"", path);","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't determine file path to read ""
			    ""extended attributes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_196.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_196.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Couldn't access %s"", path);
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_196.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_196.cpp,21,"[""member"", ""unkown"", ""string"", ""archive_entry_pathname_ret""]","[""a -> tree_enter_working_dir_ret"", ""null"", ""!=""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_82.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_82.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_82.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_223.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_223.cpp,938,938,939,939,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_197.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_197.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_197.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_197.cpp,66,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_path_excluded_ret"", ""null"", ""<""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_82.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_82.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_82.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_224.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_224.cpp,1041,1041,1042,1042,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_198.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_198.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_198.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_198.cpp,169,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_time_excluded_ret"", ""null"", ""<""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_82.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_82.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_82.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_225.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_225.cpp,1067,1067,1068,1068,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_199.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_199.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_199.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_199.cpp,195,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_owner_excluded_ret"", ""null"", ""<""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_83.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_83.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_83.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_227.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_227.cpp,803,802,804,803,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_200.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_200.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_200.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_200.cpp,50,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_path_excluded_ret"", ""null"", ""<""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_83.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_83.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_83.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_228.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_228.cpp,875,874,876,875,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_201.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_201.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_201.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_201.cpp,122,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_time_excluded_ret"", ""null"", ""<""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_disk_windows.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_83.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_83.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_83.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_229.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_229.cpp,901,900,902,901,"archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));","archive_set_error(&(a->archive), errno,
			    ""Failed : %s"", archive_error_string(a->matching));",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_202.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_202.cpp,"{
			archive_set_error(&(a->archive), errno,
			    ""Faild : %s"", archive_error_string(a->matching));
			return (r);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_202.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_202.cpp,148,"[""member"", ""unkown"", ""string"", ""archive_error_string_ret""]","[""archive_match_owner_excluded_ret"", ""null"", ""<""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_filter_lz4.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_85.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_85.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_85.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_234.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_234.cpp,706,706,708,709,,"archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""truncated lz4 input"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_203.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_203.cpp,"{
	struct private_data *state = (struct private_data *)self->data;
	int compressed;
	const char *read_buf;
	ssize_t ret;

	*p = NULL;
	ret = lz4_allocate_out_block_for_legacy(self);
	if (ret != ARCHIVE_OK)
		return ret;

	/* Make sure we have 4 bytes for a block size. */
	read_buf = __archive_read_filter_ahead(self->upstream, 4, NULL);
	if (read_buf == NULL) {
		if (state->stage == SELECT_STREAM) {
			state->stage = READ_LEGACY_STREAM;
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated lz4 input"");
			return (ARCHIVE_FATAL);
		}
		state->stage = SELECT_STREAM;
		return 0;
	}
	state->stage = READ_LEGACY_BLOCK;
	compressed = archive_le32dec(read_buf);
	if (compressed > LZ4_COMPRESSBOUND(LEGACY_BLOCK_SIZE)) {
		state->stage = SELECT_STREAM;
		return 0;
	}

	/* Make sure we have a whole block. */
	read_buf = __archive_read_filter_ahead(self->upstream,
	    4 + compressed, NULL);
	ret = LZ4_decompress_safe(read_buf + 4, state->out_block,
	    compressed, (int)state->out_block_size);
	if (ret < 0) {
		archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC, ""lz4 decompression failed"");
		return (ARCHIVE_FATAL);
	}
	*p = state->out_block;
	state->unconsumed = 4 + compressed;
	return ret;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_203.cpp,"[5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 1, 98, 0, 0, 4, 4, 0, 0, 1, 9, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 5, 0, 0, 8, 0, 0, 14, 0, 19, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_203.cpp,36,"[""__archive_read_filter_ahead_ret"", ""member"", ""archive_le32dec_ret"", ""member""]","[""archive_le32dec_ret"", ""LZ4_COMPRESSBOUND_ret"", "">"", ""!""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_87.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_238.cpp,763,744,789,-1,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for lzma decompression"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_204.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_204.cpp,"{
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for lzma decompression"");
		free(out_block);
		free(state);
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_204.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_204.cpp,14,"[""member"", ""macro"", ""string""]","[""calloc_ret"", ""null"", ""=="", ""malloc_ret"", ""null"", ""=="", ""||""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_87.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_238.cpp,763,744,820,-1,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""Internal error initializing lzma library"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_205.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_205.cpp,"{
	static const size_t out_block_size = 64 * 1024;
	void *out_block;
	struct private_data *state;
	ssize_t ret, avail_in;

	self->code = ARCHIVE_FILTER_LZMA;
	self->name = ""lzma"";

	state = (struct private_data *)calloc(sizeof(*state), 1);
	out_block = (unsigned char *)malloc(out_block_size);
	if (state == NULL || out_block == NULL) {
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Can't allocate data for lzma decompression"");
		free(out_block);
		free(state);
		return (ARCHIVE_FATAL);
	}

	self->data = state;
	state->out_block_size = out_block_size;
	state->out_block = out_block;
	self->read = lzma_filter_read;
	self->skip = NULL; /* not supported */
	self->close = lzma_filter_close;

	/* Prime the lzma library with 18 bytes of input. */
	state->stream.next_in = (unsigned char *)(uintptr_t)
	    __archive_read_filter_ahead(self->upstream, 18, &avail_in);
	if (state->stream.next_in == NULL)
		return (ARCHIVE_FATAL);
	state->stream.avail_in = avail_in;
	state->stream.next_out = state->out_block;
	state->stream.avail_out = state->out_block_size;

	/* Initialize compression library. */
	ret = lzmadec_init(&(state->stream));
	__archive_read_filter_consume(self->upstream,
	    avail_in - state->stream.avail_in);
	if (ret == LZMADEC_OK)
		return (ARCHIVE_OK);

	/* Library setup failed: Clean up. */
	archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
	    ""Internal error initializing lzma library"");

	/* Override the error message if we know what really went wrong. */
	switch (ret) {
	case LZMADEC_HEADER_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid header"");
		break;
	case LZMADEC_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	}

	free(state->out_block);
	free(state);
	self->data = NULL;
	return (ARCHIVE_FATAL);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_205.cpp,"[3, 0, 0, 0, 2, 0, 4, 1, 2, 0, 5, 0, 0, 0, 2, 152, 0, 0, 4, 5, 0, 0, 1, 11, 0, 0, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 62, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 4, 3, 0, 0, 14, 0, 0, 25, 0, 26, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_205.cpp,45,"[""member"", ""macro"", ""string""]","[""lzmadec_init_ret"", ""macro"", ""=="", ""!""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_87.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_238.cpp,763,744,826,-1,"archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid header"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_206.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_206.cpp,"{
	case LZMADEC_HEADER_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid header"");
		break;
	case LZMADEC_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_206.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_206.cpp,51,[],"[""lzmadec_init_ret""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_87.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_238.cpp,763,744,832,-1,"archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_207.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_207.cpp,"{
	case LZMADEC_HEADER_ERROR:
		archive_set_error(&self->archive->archive,
		    ARCHIVE_ERRNO_MISC,
		    ""Internal error initializing compression library: ""
		    ""invalid header"");
		break;
	case LZMADEC_MEM_ERROR:
		archive_set_error(&self->archive->archive, ENOMEM,
		    ""Internal error initializing compression library: ""
		    ""out of memory"");
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_207.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_207.cpp,57,[],"[""lzmadec_init_ret""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_87.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_238.cpp,763,744,865,-1,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated lzma input"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_208.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_208.cpp,"{
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""truncated lzma input"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_208.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_208.cpp,18,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""=="", ""ssize_t"", ""null"", ""<"", ""&&""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_87.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_238.cpp,763,744,883,-1,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_209.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_209.cpp,"{
		case LZMADEC_STREAM_END: /* Found end of stream. */
			state->eof = 1;
			/* FALL THROUGH */
		case LZMADEC_OK: /* Decompressor made some progress. */
			__archive_read_filter_consume(self->upstream,
			    avail_in - state->stream.avail_in);
			break;
		case LZMADEC_BUF_ERROR: /* Insufficient input data? */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");
			return (ARCHIVE_FATAL);
		default:
			/* Return an error. */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Lzma decompression failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_209.cpp,"[0, 0, 0, 0, 1, 0, 2, 0, 3, 1, 1, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_209.cpp,36,"[""member"", ""macro"", ""string""]","[""lzmadec_decode_ret""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_87.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_238.cpp,763,744,889,-1,"archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Lzma decompression failed"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_210.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_210.cpp,"{
		case LZMADEC_STREAM_END: /* Found end of stream. */
			state->eof = 1;
			/* FALL THROUGH */
		case LZMADEC_OK: /* Decompressor made some progress. */
			__archive_read_filter_consume(self->upstream,
			    avail_in - state->stream.avail_in);
			break;
		case LZMADEC_BUF_ERROR: /* Insufficient input data? */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Insufficient compressed data"");
			return (ARCHIVE_FATAL);
		default:
			/* Return an error. */
			archive_set_error(&self->archive->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Lzma decompression failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_210.cpp,"[0, 0, 0, 0, 1, 0, 2, 0, 3, 1, 1, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_210.cpp,42,"[""member"", ""macro"", ""string""]","[""lzmadec_decode_ret""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_87.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_87.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_238.cpp,763,744,920,-1,"archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up %s compressor"",
		    self->archive->archive.compression_name);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_211.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_211.cpp,"{
	case LZMADEC_OK:
		break;
	default:
		archive_set_error(&(self->archive->archive),
		    ARCHIVE_ERRNO_MISC,
		    ""Failed to clean up %s compressor"",
		    self->archive->archive.compression_name);
		ret = ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_211.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_211.cpp,12,"[""member"", ""macro"", ""string"", ""member""]","[""lzmadec_end_ret""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_256.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_256.cpp,935,989,939,991,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Solaris NFSv4 ACLs not supported"");",acl_type = ARCHIVE_ENTRY_ACL_TYPE_ACCESS;,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_212.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_212.cpp,"{
	case 01000000:
		/* POSIX.1e ACL */
		break;
	case 03000000:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Solaris NFSv4 ACLs not supported"");
		return (ARCHIVE_WARN);
	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Malformed Solaris ACL attribute (unsupported type %o)"",
		    (int)type);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_212.cpp,"[0, 0, 0, 0, 1, 0, 2, 0, 2, 1, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_212.cpp,53,"[""member"", ""macro"", ""string""]","[""bool""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_258.cpp,1128,1183,1129,1184,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry has negative size?"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry has negative size"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_213.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_213.cpp,"{
		tar->entry_bytes_remaining = 0;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry has negative size?"");
		err = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_213.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_213.cpp,23,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""<""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_258.cpp,1128,1183,1133,1191,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry size overflow"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_214.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_214.cpp,"{
	const struct archive_entry_header_ustar	*header;
	char	tartype;
	int     err = ARCHIVE_OK;

	header = (const struct archive_entry_header_ustar *)h;
	if (header->linkname[0])
		archive_strncpy(&(tar->entry_linkpath),
		    header->linkname, sizeof(header->linkname));
	else
		archive_string_empty(&(tar->entry_linkpath));

	/* Parse out the numeric fields (all are octal) */
	archive_entry_set_mode(entry,
		(mode_t)tar_atol(header->mode, sizeof(header->mode)));
	archive_entry_set_uid(entry, tar_atol(header->uid, sizeof(header->uid)));
	archive_entry_set_gid(entry, tar_atol(header->gid, sizeof(header->gid)));
	tar->entry_bytes_remaining = tar_atol(header->size, sizeof(header->size));
	if (tar->entry_bytes_remaining < 0) {
		tar->entry_bytes_remaining = 0;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Tar entry has negative size?"");
		err = ARCHIVE_WARN;
	}
	tar->realsize = tar->entry_bytes_remaining;
	archive_entry_set_size(entry, tar->entry_bytes_remaining);
	archive_entry_set_mtime(entry, tar_atol(header->mtime, sizeof(header->mtime)), 0);

	/* Handle the tar type flag appropriately. */
	tartype = header->typeflag[0];

	switch (tartype) {
	case '1': /* Hard link */
		if (archive_entry_copy_hardlink_l(entry, tar->entry_linkpath.s,
		    archive_strlen(&(tar->entry_linkpath)), tar->sconv) != 0) {
			err = set_conversion_failed_error(a, tar->sconv,
			    ""Linkname"");
			if (err == ARCHIVE_FATAL)
				return (err);
		}
		/*
		 * The following may seem odd, but: Technically, tar
		 * does not store the file type for a ""hard link""
		 * entry, only the fact that it is a hard link.  So, I
		 * leave the type zero normally.  But, pax interchange
		 * format allows hard links to have data, which
		 * implies that the underlying entry is a regular
		 * file.
		 */
		if (archive_entry_size(entry) > 0)
			archive_entry_set_filetype(entry, AE_IFREG);

		/*
		 * A tricky point: Traditionally, tar readers have
		 * ignored the size field when reading hardlink
		 * entries, and some writers put non-zero sizes even
		 * though the body is empty.  POSIX blessed this
		 * convention in the 1988 standard, but broke with
		 * this tradition in 2001 by permitting hardlink
		 * entries to store valid bodies in pax interchange
		 * format, but not in ustar format.  Since there is no
		 * hard and fast way to distinguish pax interchange
		 * from earlier archives (the 'x' and 'g' entries are
		 * optional, after all), we need a heuristic.
		 */
		if (archive_entry_size(entry) == 0) {
			/* If the size is already zero, we're done. */
		}  else if (a->archive.archive_format
		    == ARCHIVE_FORMAT_TAR_PAX_INTERCHANGE) {
			/* Definitely pax extended; must obey hardlink size. */
		} else if (a->archive.archive_format == ARCHIVE_FORMAT_TAR
		    || a->archive.archive_format == ARCHIVE_FORMAT_TAR_GNUTAR)
		{
			/* Old-style or GNU tar: we must ignore the size. */
			archive_entry_set_size(entry, 0);
			tar->entry_bytes_remaining = 0;
		} else if (archive_read_format_tar_bid(a, 50) > 50) {
			/*
			 * We don't know if it's pax: If the bid
			 * function sees a valid ustar header
			 * immediately following, then let's ignore
			 * the hardlink size.
			 */
			archive_entry_set_size(entry, 0);
			tar->entry_bytes_remaining = 0;
		}
		/*
		 * TODO: There are still two cases I'd like to handle:
		 *   = a ustar non-pax archive with a hardlink entry at
		 *     end-of-archive.  (Look for block of nulls following?)
		 *   = a pax archive that has not seen any pax headers
		 *     and has an entry which is a hardlink entry storing
		 *     a body containing an uncompressed tar archive.
		 * The first is worth addressing; I don't see any reliable
		 * way to deal with the second possibility.
		 */
		break;
	case '2': /* Symlink */
		archive_entry_set_filetype(entry, AE_IFLNK);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		if (archive_entry_copy_symlink_l(entry, tar->entry_linkpath.s,
		    archive_strlen(&(tar->entry_linkpath)), tar->sconv) != 0) {
			err = set_conversion_failed_error(a, tar->sconv,
			    ""Linkname"");
			if (err == ARCHIVE_FATAL)
				return (err);
		}
		break;
	case '3': /* Character device */
		archive_entry_set_filetype(entry, AE_IFCHR);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		break;
	case '4': /* Block device */
		archive_entry_set_filetype(entry, AE_IFBLK);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		break;
	case '5': /* Dir */
		archive_entry_set_filetype(entry, AE_IFDIR);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		break;
	case '6': /* FIFO device */
		archive_entry_set_filetype(entry, AE_IFIFO);
		archive_entry_set_size(entry, 0);
		tar->entry_bytes_remaining = 0;
		break;
	case 'D': /* GNU incremental directory type */
		/*
		 * No special handling is actually required here.
		 * It might be nice someday to preprocess the file list and
		 * provide it to the client, though.
		 */
		archive_entry_set_filetype(entry, AE_IFDIR);
		break;
	case 'M': /* GNU ""Multi-volume"" (remainder of file from last archive)*/
		/*
		 * As far as I can tell, this is just like a regular file
		 * entry, except that the contents should be _appended_ to
		 * the indicated file at the indicated offset.  This may
		 * require some API work to fully support.
		 */
		break;
	case 'N': /* Old GNU ""long filename"" entry. */
		/* The body of this entry is a script for renaming
		 * previously-extracted entries.  Ugh.  It will never
		 * be supported by libarchive. */
		archive_entry_set_filetype(entry, AE_IFREG);
		break;
	case 'S': /* GNU sparse files */
		/*
		 * Sparse files are really just regular files with
		 * sparse information in the extended area.
		 */
		/* FALLTHROUGH */
	default: /* Regular file  and non-standard types */
		/*
		 * Per POSIX: non-recognized types should always be
		 * treated as regular files.
		 */
		archive_entry_set_filetype(entry, AE_IFREG);
		break;
	}
	return (err);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_214.cpp,"[11, 0, 0, 0, 10, 0, 3, 1, 10, 1, 14, 0, 0, 0, 2, 233, 0, 0, 3, 3, 0, 0, 1, 38, 0, 0, 0, 0, 1, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 153, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 12, 11, 1, 0, 44, 0, 0, 39, 3, 86, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_214.cpp,27,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_259.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_259.cpp,1695,1768,1696,1802,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Unknown ACL type: %d"", type);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_215.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_215.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_215.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_215.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_259.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_259.cpp,1695,1768,1696,1819,,"archive_set_error(&a->archive, ENOMEM,
			    ""%s %s"", ""Can't allocate memory for "",
			    errstr);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_216.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_216.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_216.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_216.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_259.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_259.cpp,1695,1768,1696,1824,,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_MISC, ""%s %s"", ""Parse error: "", errstr);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_217.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_217.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_217.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_217.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_260.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_260.cpp,1721,1854,1724,1859,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Non-regular file cannot be sparse"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_218.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_218.cpp,"(strcmp(key, ""GNU.sparse.numblocks"") == 0) {
			tar->sparse_offset = -1;
			tar->sparse_numbytes = -1;
			tar->sparse_gnu_major = 0;
			tar->sparse_gnu_minor = 0;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_218.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_218.cpp,14,"[""const char *"", ""constant""]","[""member""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_261.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_261.cpp,1803,1944,1819,-1,"archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.access"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_219.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_219.cpp,"{
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.access"");
					return (err);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_219.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_219.cpp,109,[],"[""archive_acl_parse_l_ret"", ""macro"", ""==""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_261.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_261.cpp,1803,1944,1824,-1,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SCHILY.acl.access"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_220.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_220.cpp,"{
				err = r;
				if (err == ARCHIVE_FATAL) {
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.access"");
					return (err);
				}
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SCHILY.acl.access"");
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_220.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_220.cpp,114,"[""member"", ""macro"", ""constant""]","[""archive_acl_parse_l_ret"", ""macro"", ""=="", ""!""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_261.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_261.cpp,1803,1944,1843,-1,"archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.default"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_221.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_221.cpp,"{
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.default"");
					return (err);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_221.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_221.cpp,133,[],"[""archive_acl_parse_l_ret"", ""macro"", ""==""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_tar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_94.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_94.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_261.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_261.cpp,1803,1944,1848,-1,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SCHILY.acl.default"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_222.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_222.cpp,"{
				err = r;
				if (err == ARCHIVE_FATAL) {
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory for ""
					    ""SCHILY.acl.default"");
					return (err);
				}
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Parse error: SCHILY.acl.default"");
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_222.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_222.cpp,138,"[""member"", ""macro"", ""constant""]","[""archive_acl_parse_l_ret"", ""macro"", ""=="", ""!""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_warc.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_95.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_95.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_95.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_264.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_264.cpp,255,254,262,260,"archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Unsupported record version"");","archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Invalid record version"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_223.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_223.cpp,"{
		/* nawww, I wish they promised backward compatibility
		 * anyhoo, in their infinite wisdom the 28500 guys might
		 * come up with something we can't possibly handle so
		 * best end things here */
		archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Unsupported record version"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_223.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_223.cpp,52,"[""member"", ""macro"", ""string""]","[""_warc_rdver_ret"", ""constant"", "">""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_warc.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_95.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_95.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_95.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_264.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_264.cpp,255,254,274,265,,"archive_set_error(
			&a->archive, ARCHIVE_ERRNO_MISC,
			""Unsupported record version: %u.%u"",
			ver / 10000, (ver % 10000) / 100);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_224.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_224.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_224.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_224.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_warc.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_95.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_95.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_95.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_265.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_265.cpp,285,293,286,294,"archive_string_sprintf(&w->sver,
			""WARC/%u.%u"", ver / 10000, ver % 10000);","archive_string_sprintf(&w->sver,
			""WARC/%u.%u"", ver / 10000, (ver % 10000) / 100);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_225.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_225.cpp,"{
		/* stringify this entry's version */
		archive_string_sprintf(&w->sver,
			""WARC/%u.%u"", ver / 10000, ver % 10000);
		/* remember the version */
		w->pver = ver;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_225.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_225.cpp,76,"[""member"", ""constant"", ""_warc_rdver_ret"", ""_warc_rdver_ret""]","[""_warc_rdver_ret"", ""member"", ""!=""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_97.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_269.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_269.cpp,418,418,417,430,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Too-small extra data: Need at least 4 bytes, but only found %d bytes"", (int)extra_length);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_230.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_230.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_230.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_230.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_97.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_270.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_270.cpp,440,452,443,457,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit uncompressed size"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_231.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_231.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_231.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_231.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_97.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_270.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_270.cpp,440,452,451,469,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit compressed size"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_232.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_232.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_232.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_232.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_97.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_270.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_270.cpp,440,452,459,481,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Malformed 64-bit local header offset"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_233.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_233.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_233.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_233.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_97.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_271.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_271.cpp,715,739,720,742,"fprintf(stderr,
		    ""Extra data field contents do not match reported size!\n"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Malformed extra data: Consumed %d bytes of %d bytes"",
		    (int)offset, (int)extra_length);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_234.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_234.cpp,"{
		fprintf(stderr,
		    ""Extra data field contents do not match reported size!\n"");
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_234.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_234.cpp,300,"[""unkown"", ""string""]","[""int"", ""size_t"", ""!=""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_97.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_272.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_272.cpp,1136,1168,1143,1175,,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_FILE_FORMAT,
					    ""Overflow of 64-bit file sizes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_235.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_235.cpp,"{
				zip->entry->crc32 = archive_le32dec(p + 4);
				zip->entry->compressed_size =
					archive_le64dec(p + 8);
				zip->entry->uncompressed_size =
					archive_le64dec(p + 16);
				zip->unconsumed = 24;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_235.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_235.cpp,48,[],"[""bool""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_97.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_97.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_274.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_274.cpp,1417,1456,1422,1463,,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Overflow of 64-bit file sizes"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_236.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_236.cpp,"{
			zip->entry->crc32 = archive_le32dec(p);
			zip->entry->compressed_size = archive_le64dec(p + 4);
			zip->entry->uncompressed_size = archive_le64dec(p + 12);
			zip->unconsumed += 20;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_236.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_236.cpp,167,[],"[""bool""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_98.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_282.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_282.cpp,2022,2078,2025,2092,,"archive_set_error(&a->archive, error_number, ""%s"",
			    error_string.s);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_237.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_237.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_237.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_237.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_98.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_282.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_282.cpp,2022,2078,2025,2105,,"archive_set_error(&a->archive, error_number, ""%s"",
			    error_string.s);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_238.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_238.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_238.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_98.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_283.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_283.cpp,2351,2457,2353,2467,,"archive_string_sprintf(a_estr, errstr, path);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_243.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_243.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_243.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_98.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_283.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_283.cpp,2351,2457,2460,2698,,"fsobj_error(a_eno, a_estr, errno,
			    ""chdir() failure"", """");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_248.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_248.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_248.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_248.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_98.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_284.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_284.cpp,2534,2807,2543,2817,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty pathname"");","fsobj_error(a_eno, a_estr, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty "", ""pathname"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_250.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_250.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty pathname"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_250.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_250.cpp,8,"[""member"", ""macro"", ""string""]","[""member"", ""char"", ""==""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_98.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_284.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_284.cpp,2534,2807,2554,2828,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			                  ""Path is absolute"");","fsobj_error(a_eno, a_estr, ARCHIVE_ERRNO_MISC,
			    ""Path is "", ""absolute"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_251.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_251.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			                  ""Path is absolute"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_251.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_251.cpp,19,"[""member"", ""macro"", ""string""]","[""bool""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_98.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_285.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_285.cpp,2580,2854,2583,2858,"archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Path contains '..'"");","fsobj_error(a_eno, a_estr,
						    ARCHIVE_ERRNO_MISC,
						    ""Path contains "", ""'..'"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_252.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_252.cpp,"{
						archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Path contains '..'"");
						return (ARCHIVE_FAILED);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_252.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_252.cpp,48,"[""member"", ""macro"", ""constant""]","[""bool""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_98.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_98.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_286.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_286.cpp,2629,2904,2630,2916,,"archive_set_error(&a->archive, error_number, ""%s"",
		    error_string.s);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_253.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_253.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_253.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_253.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_100.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_293.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_293.cpp,450,491,451,516,,"archive_set_error(&a->archive, ENOMEM, ""%s %s"",
			    ""Can't allocate memory for "", attr);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_254.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_254.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_254.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_100.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_293.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_293.cpp,450,491,451,520,,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT, ""%s %s %s"",
		    ""Can't translate "", attr, "" to UTF-8"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_255.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_255.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_255.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_255.cpp,0,[],[]
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_100.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_294.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_294.cpp,1086,1163,1094,-1,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.access"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_256.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_256.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.access"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_256.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_256.cpp,634,[],"[""unkown"", ""macro"", ""==""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_100.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_294.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_294.cpp,1086,1163,1099,-1,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate ACL.access to UTF-8"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_257.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_257.cpp,"{
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.access"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate ACL.access to UTF-8"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_257.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_257.cpp,639,"[""member"", ""macro"", ""constant""]","[""unkown"", ""macro"", ""=="", ""!""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_100.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_294.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_294.cpp,1086,1163,1113,-1,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.default"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_258.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.default"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_258.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_258.cpp,653,[],"[""unkown"", ""macro"", ""==""]"
c206211af647dd1f7039da91c34c9c72e50aefdf,"LibArchive 2017-02-19 (100ee75a)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 100ee75a01f1f785fc681f616db49a33405f8bf3 (v3.3.0).",[],libarchive/archive_write_set_format_pax.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_100.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_100.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_294.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_294.cpp,1086,1163,1118,-1,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate ACL.default to UTF-8"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_259.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_259.cpp,"{
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ""
				    ""ACL.default"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Can't translate ACL.default to UTF-8"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_259.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_259.cpp,658,"[""member"", ""macro"", ""constant""]","[""unkown"", ""macro"", ""=="", ""!""]"
1df9d5f91944e0b5ba00815d55bb7dc545053b4c,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-12-22 (44b9b4d4)",[],Utilities/cmcurl/lib/socks_gssapi.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_104.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_104.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_104.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_298.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_298.cpp,134,135,150,152,"snprintf(service.value, service.length+1, ""%s@%s"",
             serviceptr, conn->proxy.name);","snprintf(service.value, service.length+1, ""%s@%s"",
             serviceptr, conn->socks_proxy.host.name);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_260.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_260.cpp,"{
    service.value = malloc(strlen(serviceptr) +strlen(conn->proxy.name)+2);
    if(!service.value)
      return CURLE_OUT_OF_MEMORY;
    service.length = strlen(serviceptr) +strlen(conn->proxy.name)+1;
    snprintf(service.value, service.length+1, ""%s@%s"",
             serviceptr, conn->proxy.name);

    gss_major_status = gss_import_name(&gss_minor_status, &service,
                                       GSS_C_NT_HOSTBASED_SERVICE, &server);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_260.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 7, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_260.cpp,49,"[""member"", ""member"", ""string"", ""const char *"", ""member""]","[""member"", ""!""]"
1df9d5f91944e0b5ba00815d55bb7dc545053b4c,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-12-22 (44b9b4d4)",[],Utilities/cmcurl/lib/vauth/digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_106.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_106.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_106.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_301.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_301.cpp,684,684,686,690,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));","snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             rnd[0], rnd[1], rnd[2], rnd[3]);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_261.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_261.cpp,"{
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_261.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 23, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 8, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_261.cpp,25,"[""char *"", ""unkown"", ""string"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret""]","[""member""]"
4cc2908fdaaf1ab8afe5c2ae5dbb3401859a9aab,"curl 2016-12-22 (44b9b4d4)

Code extracted from:

    https://github.com/curl/curl.git

at commit 44b9b4d4f56d6f6de92c89636994c03984e9cd01 (curl-7_52_1).",[],lib/socks_gssapi.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_111.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_111.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_111.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_307.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_307.cpp,134,135,150,152,"snprintf(service.value, service.length+1, ""%s@%s"",
             serviceptr, conn->proxy.name);","snprintf(service.value, service.length+1, ""%s@%s"",
             serviceptr, conn->socks_proxy.host.name);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_262.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_262.cpp,"{
    service.value = malloc(strlen(serviceptr) +strlen(conn->proxy.name)+2);
    if(!service.value)
      return CURLE_OUT_OF_MEMORY;
    service.length = strlen(serviceptr) +strlen(conn->proxy.name)+1;
    snprintf(service.value, service.length+1, ""%s@%s"",
             serviceptr, conn->proxy.name);

    gss_major_status = gss_import_name(&gss_minor_status, &service,
                                       GSS_C_NT_HOSTBASED_SERVICE, &server);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_262.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 7, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_262.cpp,49,"[""member"", ""member"", ""string"", ""const char *"", ""member""]","[""member"", ""!""]"
4cc2908fdaaf1ab8afe5c2ae5dbb3401859a9aab,"curl 2016-12-22 (44b9b4d4)

Code extracted from:

    https://github.com/curl/curl.git

at commit 44b9b4d4f56d6f6de92c89636994c03984e9cd01 (curl-7_52_1).",[],lib/vauth/digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_113.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_113.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_113.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_310.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_310.cpp,684,684,686,690,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));","snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             rnd[0], rnd[1], rnd[2], rnd[3]);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_263.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_263.cpp,"{
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_263.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 23, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 8, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_263.cpp,25,"[""char *"", ""unkown"", ""string"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret""]","[""member""]"
c5df1f165c7f8f1e31e3144d326c6836af2e678d,"Regenerate lexer source code

Revise the manual procedure in the `*Lexer.in.l` files.  Some of our
post-processing steps are no longer necessary with the current set of
supported compilers.  Some steps changed with newer versions of flex.

Then regenerate all lexers with flex version 2.6.1.",[],Source/cmCommandArgumentLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_117.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_117.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_117.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_321.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_321.cpp,1802,1809,1813,1820,"yy_fatal_error( ""cmCommandArgument_yyset_lineno called with no buffer"" , yyscanner);","YY_FATAL_ERROR( ""cmCommandArgument_yyset_lineno called with no buffer"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_264.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_264.cpp,"yy_fatal_error( ""cmCommandArgument_yyset_lineno called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_264.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_264.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
c5df1f165c7f8f1e31e3144d326c6836af2e678d,"Regenerate lexer source code

Revise the manual procedure in the `*Lexer.in.l` files.  Some of our
post-processing steps are no longer necessary with the current set of
supported compilers.  Some steps changed with newer versions of flex.

Then regenerate all lexers with flex version 2.6.1.",[],Source/cmCommandArgumentLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_117.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_117.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_117.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_321.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_321.cpp,1802,1809,1828,1835,"yy_fatal_error( ""cmCommandArgument_yyset_column called with no buffer"" , yyscanner);","YY_FATAL_ERROR( ""cmCommandArgument_yyset_column called with no buffer"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_265.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_265.cpp,"yy_fatal_error( ""cmCommandArgument_yyset_column called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_265.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_265.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
c5df1f165c7f8f1e31e3144d326c6836af2e678d,"Regenerate lexer source code

Revise the manual procedure in the `*Lexer.in.l` files.  Some of our
post-processing steps are no longer necessary with the current set of
supported compilers.  Some steps changed with newer versions of flex.

Then regenerate all lexers with flex version 2.6.1.",[],Source/cmExprLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_118.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_323.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_323.cpp,676,684,1097,1125,,"YY_FATAL_ERROR( ""out of dynamic memory in yy_get_next_buffer()"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_266.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_266.cpp,"{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
  char *source = yyg->yytext_ptr;
  int number_to_move, i;
  int ret_val;

  if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
    YY_FATAL_ERROR(
    ""fatal flex scanner internal error--end of buffer missed"" );

  if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
    { /* Don't try to fill the buffer, so this is an EOF. */
    if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
      {
      /* We matched a single character, the EOB, so
       * treat this as a final EOF.
       */
      return EOB_ACT_END_OF_FILE;
      }

    else
      {
      /* We matched some text prior to the EOB, first
       * process it.
       */
      return EOB_ACT_LAST_MATCH;
      }
    }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

  for ( i = 0; i < number_to_move; ++i )
    *(dest++) = *(source++);

  if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

  else
    {
      size_t nuto_read =
      YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while ( nuto_read <= 0 )
      { /* Not enough room in the buffer - grow it. */

      /* just a shorter name for the current buffer */
      YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

      int yy_c_buf_p_offset =
        (int) (yyg->yy_c_buf_p - b->yy_ch_buf);

      if ( b->yy_is_our_buffer )
        {
        int new_size = b->yy_buf_size * 2;

        if ( new_size <= 0 )
          b->yy_buf_size += b->yy_buf_size / 8;
        else
          b->yy_buf_size *= 2;

        b->yy_ch_buf = (char *)
          /* Include room in for 2 EOB chars. */
          cmExpr_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
        }
      else
        /* Can't grow it, we don't own it. */
        b->yy_ch_buf = 0;

      if ( ! b->yy_ch_buf )
        YY_FATAL_ERROR(
        ""fatal error - scanner input buffer overflow"" );

      yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

      nuto_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
            number_to_move - 1;

      }

    if ( nuto_read > YY_READ_BUF_SIZE )
      nuto_read = YY_READ_BUF_SIZE;

    /* Read in more data. */
    YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
      yyg->yy_n_chars, nuto_read );

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
    }

  if ( yyg->yy_n_chars == 0 )
    {
    if ( number_to_move == YY_MORE_ADJ )
      {
      ret_val = EOB_ACT_END_OF_FILE;
      cmExpr_yyrestart(yyin  ,yyscanner);
      }

    else
      {
      ret_val = EOB_ACT_LAST_MATCH;
      YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
        YY_BUFFER_EOF_PENDING;
      }
    }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  yyg->yy_n_chars += number_to_move;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

  yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

  return ret_val;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_266.cpp,"[10, 1, 1, 0, 0, 0, 3, 0, 0, 0, 19, 0, 0, 0, 0, 198, 0, 0, 9, 10, 0, 0, 8, 20, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 6, 0, 12, 10, 6, 0, 7, 0, 0, 23, 0, 12, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_266.cpp,116,[],"[""member"", ""null"", ""=="", ""!""]"
c5df1f165c7f8f1e31e3144d326c6836af2e678d,"Regenerate lexer source code

Revise the manual procedure in the `*Lexer.in.l` files.  Some of our
post-processing steps are no longer necessary with the current set of
supported compilers.  Some steps changed with newer versions of flex.

Then regenerate all lexers with flex version 2.6.1.",[],Source/cmExprLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_118.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_323.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_323.cpp,676,684,1167,1227,,"YY_FATAL_ERROR( ""flex scanner push-back overflow"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_267.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_267.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_267.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_267.cpp,0,[],[]
c5df1f165c7f8f1e31e3144d326c6836af2e678d,"Regenerate lexer source code

Revise the manual procedure in the `*Lexer.in.l` files.  Some of our
post-processing steps are no longer necessary with the current set of
supported compilers.  Some steps changed with newer versions of flex.

Then regenerate all lexers with flex version 2.6.1.",[],Source/cmExprLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_118.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_325.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_325.cpp,1454,1523,1491,1558,,"YY_FATAL_ERROR( ""out of dynamic memory in cmExpr_yyensure_buffer_stack()"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_268.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_268.cpp,"{

    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
         */
    nuto_alloc = 1;
    yyg->yy_buffer_stack = (struct yy_buffer_state**)cmExpr_yyalloc
                (nuto_alloc * sizeof(struct yy_buffer_state*)
                , yyscanner);

    memset(yyg->yy_buffer_stack, 0, nuto_alloc * sizeof(struct yy_buffer_state*));

    yyg->yy_buffer_stack_max = nuto_alloc;
    yyg->yy_buffer_stack_top = 0;
    return;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_268.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 12, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_268.cpp,18,[],"[""member""]"
c5df1f165c7f8f1e31e3144d326c6836af2e678d,"Regenerate lexer source code

Revise the manual procedure in the `*Lexer.in.l` files.  Some of our
post-processing steps are no longer necessary with the current set of
supported compilers.  Some steps changed with newer versions of flex.

Then regenerate all lexers with flex version 2.6.1.",[],Source/cmExprLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_118.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_325.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_325.cpp,1454,1523,1507,1578,,"YY_FATAL_ERROR( ""out of dynamic memory in cmExpr_yyensure_buffer_stack()"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_269.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_269.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_269.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_269.cpp,0,[],[]
c5df1f165c7f8f1e31e3144d326c6836af2e678d,"Regenerate lexer source code

Revise the manual procedure in the `*Lexer.in.l` files.  Some of our
post-processing steps are no longer necessary with the current set of
supported compilers.  Some steps changed with newer versions of flex.

Then regenerate all lexers with flex version 2.6.1.",[],Source/cmExprLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_118.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_327.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_327.cpp,1709,1784,1720,1795,"yy_fatal_error( ""cmExpr_yyset_lineno called with no buffer"" , yyscanner);","YY_FATAL_ERROR( ""cmExpr_yyset_lineno called with no buffer"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_270.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_270.cpp,"yy_fatal_error( ""cmExpr_yyset_lineno called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_270.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_270.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
c5df1f165c7f8f1e31e3144d326c6836af2e678d,"Regenerate lexer source code

Revise the manual procedure in the `*Lexer.in.l` files.  Some of our
post-processing steps are no longer necessary with the current set of
supported compilers.  Some steps changed with newer versions of flex.

Then regenerate all lexers with flex version 2.6.1.",[],Source/cmExprLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_118.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_118.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_327.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_327.cpp,1709,1784,1735,1810,"yy_fatal_error( ""cmExpr_yyset_column called with no buffer"" , yyscanner);","YY_FATAL_ERROR( ""cmExpr_yyset_column called with no buffer"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_271.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_271.cpp,"yy_fatal_error( ""cmExpr_yyset_column called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_271.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_271.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
f8a1ba202f51e70510f12f46fe0633ea908d5144,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-11-02 (3c561c65)",[],Utilities/cmcurl/lib/easy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_120.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_120.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_120.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_331.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_331.cpp,144,143,159,-1,"snprintf(buf, sizeof(buf), ""CHARSET=cp%u"", cp);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_272.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_272.cpp,"{
    snprintf(buf, sizeof(buf), ""CHARSET=cp%u"", cp);
    putenv(buf);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_272.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_272.cpp,7,"[""char *"", ""unkown"", ""string"", ""UINT""]","[""getenv_ret"", ""!"", ""UINT"", ""null"", "">"", ""&&""]"
f8a1ba202f51e70510f12f46fe0633ea908d5144,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-11-02 (3c561c65)",[],Utilities/cmcurl/lib/easy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_120.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_120.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_120.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_332.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_332.cpp,262,239,269,241,"DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));","f(Curl_resolver_global_init()) {
    DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));
    return CURLE_FAILED_INIT;;",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_273.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_273.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_273.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_273.cpp,47,"[""fprintf_ret""]","[""Curl_resolver_global_init_ret""]"
f8a1ba202f51e70510f12f46fe0633ea908d5144,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-11-02 (3c561c65)",[],Utilities/cmcurl/lib/easy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_120.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_120.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_120.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_332.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_332.cpp,262,239,269,242,,"DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_274.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_274.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_274.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_274.cpp,47,"[""fprintf_ret""]","[""Curl_resolver_global_init_ret""]"
f8a1ba202f51e70510f12f46fe0633ea908d5144,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-11-02 (3c561c65)",[],Utilities/cmcurl/lib/formdata.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_121.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_121.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_121.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_333.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_333.cpp,906,914,911,920,"vsnprintf(s, sizeof(s), fmt, ap);","s = curl_mvaprintf(fmt, ap);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_275.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_275.cpp,"{
  char s[4096];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(s, sizeof(s), fmt, ap);
  va_end(ap);

  return AddFormData(formp, FORM_DATA, s, 0, size);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_275.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 5, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_275.cpp,7,"[""char *"", ""unkown"", ""const char *"", ""va_list""]",[]
f8a1ba202f51e70510f12f46fe0633ea908d5144,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-11-02 (3c561c65)",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_122.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_122.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_122.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_334.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_334.cpp,4107,4103,4111,-1,"write_len = vsnprintf(s, SBUF_SIZE-3, fmt, ap);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_276.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_276.cpp,"{
  ssize_t bytes_written;
#define SBUF_SIZE 1024
  char s[SBUF_SIZE];
  size_t write_len;
  char *sptr=s;
  CURLcode result = CURLE_OK;
#ifdef HAVE_GSSAPI
  enum protection_level data_sec = conn->data_prot;
#endif

  va_list ap;
  va_start(ap, fmt);
  write_len = vsnprintf(s, SBUF_SIZE-3, fmt, ap);
  va_end(ap);

  strcpy(&s[write_len], ""\r\n""); /* append a trailing CRLF */
  write_len +=2;

  bytes_written=0;

  result = Curl_convert_to_network(conn->data, s, write_len);
  /* Curl_convert_to_network calls failf if unsuccessful */
  if(result)
    return result;

  for(;;) {
#ifdef HAVE_GSSAPI
    conn->data_prot = PROT_CMD;
#endif
    result = Curl_write(conn, conn->sock[FIRSTSOCKET], sptr, write_len,
                        &bytes_written);
#ifdef HAVE_GSSAPI
    DEBUGASSERT(data_sec > PROT_NONE && data_sec < PROT_LAST);
    conn->data_prot = data_sec;
#endif

    if(result)
      break;

    if(conn->data->set.verbose)
      Curl_debug(conn->data, CURLINFO_HEADER_OUT,
                 sptr, (size_t)bytes_written, conn);

    if(bytes_written != (ssize_t)write_len) {
      write_len -= bytes_written;
      sptr += bytes_written;
    }
    else
      break;
  }

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_276.cpp,"[4, 0, 1, 0, 2, 0, 2, 0, 0, 0, 7, 0, 0, 0, 0, 99, 0, 0, 7, 7, 0, 0, 4, 4, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 0, 5, 4, 1, 0, 8, 0, 0, 14, 0, 23, 7, 1, 1, 1, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_276.cpp,15,"[""char *"", ""macro"", ""const char *"", ""va_list""]",[]
f8a1ba202f51e70510f12f46fe0633ea908d5144,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-11-02 (3c561c65)",[],Utilities/cmcurl/lib/version.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_127.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_127.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_127.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_339.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_339.cpp,111,111,115,115,"len = snprintf(ptr, left, "" libidn/%s"", stringprep_check_version(NULL));","len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_277.cpp,"{
    len = snprintf(ptr, left, "" libidn/%s"", stringprep_check_version(NULL));
    left -= len;
    ptr += len;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_277.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_277.cpp,39,"[""snprintf_ret"", ""snprintf_ret"", ""string"", ""stringprep_check_version_ret""]","[""stringprep_check_version_ret""]"
93cc249f3dd7ecd621cd063e4c08bbdb54d971e8,"curl 2016-11-02 (3c561c65)

Code extracted from:

    https://github.com/curl/curl.git

at commit 3c561c657c2f0e553b19115a506592a8bbd744bc (curl-7_51_0).",[],lib/easy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_129.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_129.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_129.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_341.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_341.cpp,144,143,159,-1,"snprintf(buf, sizeof(buf), ""CHARSET=cp%u"", cp);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_278.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_278.cpp,"{
    snprintf(buf, sizeof(buf), ""CHARSET=cp%u"", cp);
    putenv(buf);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_278.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_278.cpp,7,"[""char *"", ""unkown"", ""string"", ""UINT""]","[""getenv_ret"", ""!"", ""UINT"", ""null"", "">"", ""&&""]"
93cc249f3dd7ecd621cd063e4c08bbdb54d971e8,"curl 2016-11-02 (3c561c65)

Code extracted from:

    https://github.com/curl/curl.git

at commit 3c561c657c2f0e553b19115a506592a8bbd744bc (curl-7_51_0).",[],lib/easy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_129.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_129.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_129.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_342.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_342.cpp,262,239,269,241,"DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));","f(Curl_resolver_global_init()) {
    DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));
    return CURLE_FAILED_INIT;;",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_279.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_279.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_279.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_279.cpp,47,"[""fprintf_ret""]","[""Curl_resolver_global_init_ret""]"
93cc249f3dd7ecd621cd063e4c08bbdb54d971e8,"curl 2016-11-02 (3c561c65)

Code extracted from:

    https://github.com/curl/curl.git

at commit 3c561c657c2f0e553b19115a506592a8bbd744bc (curl-7_51_0).",[],lib/easy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_129.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_129.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_129.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_342.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_342.cpp,262,239,269,242,,"DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_280.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_280.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_280.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_280.cpp,47,"[""fprintf_ret""]","[""Curl_resolver_global_init_ret""]"
93cc249f3dd7ecd621cd063e4c08bbdb54d971e8,"curl 2016-11-02 (3c561c65)

Code extracted from:

    https://github.com/curl/curl.git

at commit 3c561c657c2f0e553b19115a506592a8bbd744bc (curl-7_51_0).",[],lib/formdata.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_130.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_130.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_130.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_343.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_343.cpp,906,914,911,920,"vsnprintf(s, sizeof(s), fmt, ap);","s = curl_mvaprintf(fmt, ap);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_281.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_281.cpp,"{
  char s[4096];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(s, sizeof(s), fmt, ap);
  va_end(ap);

  return AddFormData(formp, FORM_DATA, s, 0, size);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_281.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 5, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_281.cpp,7,"[""char *"", ""unkown"", ""const char *"", ""va_list""]",[]
93cc249f3dd7ecd621cd063e4c08bbdb54d971e8,"curl 2016-11-02 (3c561c65)

Code extracted from:

    https://github.com/curl/curl.git

at commit 3c561c657c2f0e553b19115a506592a8bbd744bc (curl-7_51_0).",[],lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_131.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_131.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_131.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_344.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_344.cpp,4106,4102,4110,-1,"write_len = vsnprintf(s, SBUF_SIZE-3, fmt, ap);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_282.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_282.cpp,"{
  ssize_t bytes_written;
#define SBUF_SIZE 1024
  char s[SBUF_SIZE];
  size_t write_len;
  char *sptr=s;
  CURLcode result = CURLE_OK;
#ifdef HAVE_GSSAPI
  enum protection_level data_sec = conn->data_prot;
#endif

  va_list ap;
  va_start(ap, fmt);
  write_len = vsnprintf(s, SBUF_SIZE-3, fmt, ap);
  va_end(ap);

  strcpy(&s[write_len], ""\r\n""); /* append a trailing CRLF */
  write_len +=2;

  bytes_written=0;

  result = Curl_convert_to_network(conn->data, s, write_len);
  /* Curl_convert_to_network calls failf if unsuccessful */
  if(result)
    return result;

  for(;;) {
#ifdef HAVE_GSSAPI
    conn->data_prot = PROT_CMD;
#endif
    result = Curl_write(conn, conn->sock[FIRSTSOCKET], sptr, write_len,
                        &bytes_written);
#ifdef HAVE_GSSAPI
    DEBUGASSERT(data_sec > PROT_NONE && data_sec < PROT_LAST);
    conn->data_prot = data_sec;
#endif

    if(result)
      break;

    if(conn->data->set.verbose)
      Curl_debug(conn->data, CURLINFO_HEADER_OUT,
                 sptr, (size_t)bytes_written, conn);

    if(bytes_written != (ssize_t)write_len) {
      write_len -= bytes_written;
      sptr += bytes_written;
    }
    else
      break;
  }

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_282.cpp,"[4, 0, 1, 0, 2, 0, 2, 0, 0, 0, 7, 0, 0, 0, 0, 99, 0, 0, 7, 7, 0, 0, 4, 4, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 0, 5, 4, 1, 0, 8, 0, 0, 14, 0, 23, 7, 1, 1, 1, 1, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_282.cpp,15,"[""char *"", ""macro"", ""const char *"", ""va_list""]",[]
93cc249f3dd7ecd621cd063e4c08bbdb54d971e8,"curl 2016-11-02 (3c561c65)

Code extracted from:

    https://github.com/curl/curl.git

at commit 3c561c657c2f0e553b19115a506592a8bbd744bc (curl-7_51_0).",[],lib/version.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_136.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_136.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_136.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_349.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_349.cpp,111,111,115,115,"len = snprintf(ptr, left, "" libidn/%s"", stringprep_check_version(NULL));","len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_283.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_283.cpp,"{
    len = snprintf(ptr, left, "" libidn/%s"", stringprep_check_version(NULL));
    left -= len;
    ptr += len;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_283.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_283.cpp,39,"[""snprintf_ret"", ""snprintf_ret"", ""string"", ""stringprep_check_version_ret""]","[""stringprep_check_version_ret""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/conncache.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_157.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_157.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_157.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_410.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_410.cpp,132,131,134,-1,"aprintf(""%s:%d"",
                 conn->bits.proxy?conn->proxy.name:conn->host.name,
                 conn->localport);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_284.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_284.cpp,"{
  return aprintf(""%s:%d"",
                 conn->bits.proxy?conn->proxy.name:conn->host.name,
                 conn->localport);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_284.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_284.cpp,2,"[""string"", ""member"", ""member""]",[]
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/conncache.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_157.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_157.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_157.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_410.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_410.cpp,132,131,134,142,,"aprintf(""%s:%d"", hostname, conn->port);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_285.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_285.cpp,"{
  return aprintf(""%s:%d"",
                 conn->bits.proxy?conn->proxy.name:conn->host.name,
                 conn->localport);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_285.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_285.cpp,2,"[""string"", ""member"", ""member""]",[]
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,168,-1,"snprintf((char *)&dest[i*2], 3, ""%02x"", source[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_286.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_286.cpp,"snprintf((char *)&dest[i*2], 3, ""%02x"", source[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_286.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_286.cpp,5,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""int"", ""<""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,277,-1,"aprintf(""%s/%s"", service, host);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_287.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_287.cpp,"{
  /* Generate and return our SPN */
  return aprintf(""%s/%s"", service, host);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_287.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_287.cpp,3,"[""string"", ""const char *"", ""const char *""]",[]
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,474,-1,"response = aprintf(
      ""%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"",
           userp, digest[0], digest[1], digest[2], digest[3], digest[4],
           digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
           digest[11], digest[12], digest[13], digest[14], digest[15]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_288.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_288.cpp,"{
  CURLcode result = CURLE_OK;
  size_t chlglen = 0;
  HMAC_context *ctxt;
  unsigned char digest[MD5_DIGEST_LEN];
  char *response;

  if(chlg)
    chlglen = strlen(chlg);

  /* Compute the digest using the password as the key */
  ctxt = Curl_HMAC_init(Curl_HMAC_MD5,
                        (const unsigned char *) passwdp,
                        curlx_uztoui(strlen(passwdp)));
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  /* Update the digest with the given challenge */
  if(chlglen > 0)
    Curl_HMAC_update(ctxt, (const unsigned char *) chlg,
                     curlx_uztoui(chlglen));

  /* Finalise the digest */
  Curl_HMAC_final(ctxt, digest);

  /* Generate the response */
  response = aprintf(
      ""%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"",
           userp, digest[0], digest[1], digest[2], digest[3], digest[4],
           digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
           digest[11], digest[12], digest[13], digest[14], digest[15]);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_288.cpp,"[4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 2, 86, 0, 0, 5, 5, 0, 0, 2, 20, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 17, 0, 4, 4, 0, 0, 10, 0, 0, 7, 0, 36, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_288.cpp,31,"[""string"", ""const char *"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""Curl_HMAC_init_ret"", ""!"", ""!""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,636,-1,"snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_289.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_289.cpp,"{
  CURLcode result = CURLE_OK;
  size_t i;
  MD5_context *ctxt;
  char *response = NULL;
  unsigned char digest[MD5_DIGEST_LEN];
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  char nonce[64];
  char realm[128];
  char algorithm[64];
  char qop_options[64];
  int qop_values;
  char cnonce[33];
  unsigned int entropy[4];
  char nonceCount[] = ""00000001"";
  char method[]     = ""AUTHENTICATE"";
  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  char *spn         = NULL;

  /* Decode the challange message */
  result = sasl_decode_digest_md5_message(chlg64, nonce, sizeof(nonce),
                                          realm, sizeof(realm),
                                          algorithm, sizeof(algorithm),
                                          qop_options, sizeof(qop_options));
  if(result)
    return result;

  /* We only support md5 sessions */
  if(strcmp(algorithm, ""md5-sess"") != 0)
    return CURLE_BAD_CONTENT_ENCODING;

  /* Get the qop-values from the qop-options */
  result = sasl_digest_get_qop_values(qop_options, &qop_values);
  if(result)
    return result;

  /* We only support auth quality-of-protection */
  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
    return CURLE_BAD_CONTENT_ENCODING;

  /* Generate 16 bytes of random data */
  entropy[0] = Curl_rand(data);
  entropy[1] = Curl_rand(data);
  entropy[2] = Curl_rand(data);
  entropy[3] = Curl_rand(data);

  /* Convert the random data into a 32 byte hex string */
  snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);

  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) userp,
                  curlx_uztoui(strlen(userp)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) realm,
                  curlx_uztoui(strlen(realm)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
                  curlx_uztoui(strlen(passwdp)));
  Curl_MD5_final(ctxt, digest);

  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_final(ctxt, digest);

  /* Convert calculated 16 octet hex into 32 bytes string */
  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate our SPN */
  spn = Curl_sasl_build_spn(service, realm);
  if(!spn)
    return CURLE_OUT_OF_MEMORY;

  /* Calculate H(A2) */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) method,
                  curlx_uztoui(strlen(method)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) spn,
                  curlx_uztoui(strlen(spn)));
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Now calculate the response hash */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
                  curlx_uztoui(strlen(nonceCount)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) qop,
                  curlx_uztoui(strlen(qop)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate the response */
  response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  free(spn);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_289.cpp,"[10, 0, 3, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 24, 357, 0, 0, 19, 19, 0, 0, 9, 63, 0, 0, 0, 0, 3, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 276, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 27, 0, 13, 10, 0, 0, 77, 0, 0, 49, 0, 167, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_289.cpp,55,"[""char *"", ""unkown"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""bool"", ""!"", ""!""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,669,-1,"snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_290.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_290.cpp,"snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_290.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_290.cpp,88,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""macro"", ""<""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,692,-1,"snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_291.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_291.cpp,"snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_291.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_291.cpp,111,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""macro"", ""<""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,722,-1,"snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_292.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_292.cpp,"snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_292.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_292.cpp,141,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""macro"", ""<""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,725,-1,"response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_293.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_293.cpp,"{
  CURLcode result = CURLE_OK;
  size_t i;
  MD5_context *ctxt;
  char *response = NULL;
  unsigned char digest[MD5_DIGEST_LEN];
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  char nonce[64];
  char realm[128];
  char algorithm[64];
  char qop_options[64];
  int qop_values;
  char cnonce[33];
  unsigned int entropy[4];
  char nonceCount[] = ""00000001"";
  char method[]     = ""AUTHENTICATE"";
  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  char *spn         = NULL;

  /* Decode the challange message */
  result = sasl_decode_digest_md5_message(chlg64, nonce, sizeof(nonce),
                                          realm, sizeof(realm),
                                          algorithm, sizeof(algorithm),
                                          qop_options, sizeof(qop_options));
  if(result)
    return result;

  /* We only support md5 sessions */
  if(strcmp(algorithm, ""md5-sess"") != 0)
    return CURLE_BAD_CONTENT_ENCODING;

  /* Get the qop-values from the qop-options */
  result = sasl_digest_get_qop_values(qop_options, &qop_values);
  if(result)
    return result;

  /* We only support auth quality-of-protection */
  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
    return CURLE_BAD_CONTENT_ENCODING;

  /* Generate 16 bytes of random data */
  entropy[0] = Curl_rand(data);
  entropy[1] = Curl_rand(data);
  entropy[2] = Curl_rand(data);
  entropy[3] = Curl_rand(data);

  /* Convert the random data into a 32 byte hex string */
  snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);

  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) userp,
                  curlx_uztoui(strlen(userp)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) realm,
                  curlx_uztoui(strlen(realm)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
                  curlx_uztoui(strlen(passwdp)));
  Curl_MD5_final(ctxt, digest);

  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_final(ctxt, digest);

  /* Convert calculated 16 octet hex into 32 bytes string */
  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate our SPN */
  spn = Curl_sasl_build_spn(service, realm);
  if(!spn)
    return CURLE_OUT_OF_MEMORY;

  /* Calculate H(A2) */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) method,
                  curlx_uztoui(strlen(method)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) spn,
                  curlx_uztoui(strlen(spn)));
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Now calculate the response hash */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
                  curlx_uztoui(strlen(nonceCount)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) qop,
                  curlx_uztoui(strlen(qop)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate the response */
  response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  free(spn);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_293.cpp,"[10, 0, 3, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 24, 357, 0, 0, 19, 19, 0, 0, 9, 63, 0, 0, 0, 0, 3, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 276, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 27, 0, 13, 10, 0, 0, 77, 0, 0, 49, 0, 167, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_293.cpp,144,[],"[""Curl_MD5_init_ret"", ""!"", ""!""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,921,-1,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_294.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_294.cpp,"{
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_294.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 23, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 8, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_294.cpp,25,"[""char *"", ""unkown"", ""string"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret""]","[""member""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,956,-1,"tmp = aprintf(""%s:%s:%s"", ha1, digest->nonce, digest->cnonce);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_296.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_296.cpp,"{
    /* nonce and cnonce are OUTSIDE the hash */
    tmp = aprintf(""%s:%s:%s"", ha1, digest->nonce, digest->cnonce);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* convert on non-ASCII machines */
    Curl_md5it(md5buf, (unsigned char *)tmp);
    free(tmp);
    sasl_digest_md5_to_ascii(md5buf, ha1);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_296.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 5, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_296.cpp,60,"[""string"", ""unsigned char *"", ""member"", ""member""]","[""member"", ""macro"", ""==""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,979,-1,"md5this = (unsigned char *)aprintf(""%s:%s"", request, uripath);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_297.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_297.cpp,"{
  CURLcode result;
  unsigned char md5buf[16]; /* 16 bytes/128 bits */
  unsigned char request_digest[33];
  unsigned char *md5this;
  unsigned char ha1[33];/* 32 digits and 1 zero byte */
  unsigned char ha2[33];/* 32 digits and 1 zero byte */
  char cnoncebuf[33];
  char *cnonce = NULL;
  size_t cnonce_sz = 0;
  char *userp_quoted;
  char *response = NULL;
  char *tmp = NULL;

  if(!digest->nc)
    digest->nc = 1;

  if(!digest->cnonce) {
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }

  /*
    if the algorithm is ""MD5"" or unspecified (which then defaults to MD5):

    A1 = unq(username-value) "":"" unq(realm-value) "":"" passwd

    if the algorithm is ""MD5-sess"" then:

    A1 = H( unq(username-value) "":"" unq(realm-value) "":"" passwd )
         "":"" unq(nonce-value) "":"" unq(cnonce-value)
  */

  md5this = (unsigned char *)
    aprintf(""%s:%s:%s"", userp, digest->realm, passwdp);
  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  free(md5this);
  sasl_digest_md5_to_ascii(md5buf, ha1);

  if(digest->algo == CURLDIGESTALGO_MD5SESS) {
    /* nonce and cnonce are OUTSIDE the hash */
    tmp = aprintf(""%s:%s:%s"", ha1, digest->nonce, digest->cnonce);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* convert on non-ASCII machines */
    Curl_md5it(md5buf, (unsigned char *)tmp);
    free(tmp);
    sasl_digest_md5_to_ascii(md5buf, ha1);
  }

  /*
    If the ""qop"" directive's value is ""auth"" or is unspecified, then A2 is:

      A2       = Method "":"" digest-uri-value

          If the ""qop"" value is ""auth-int"", then A2 is:

      A2       = Method "":"" digest-uri-value "":"" H(entity-body)

    (The ""Method"" value is the HTTP request method as specified in section
    5.1.1 of RFC 2616)
  */

  md5this = (unsigned char *)aprintf(""%s:%s"", request, uripath);

  if(digest->qop && Curl_raw_equal(digest->qop, ""auth-int"")) {
    /* We don't support auth-int for PUT or POST at the moment.
       TODO: replace md5 of empty string with entity-body for PUT/POST */
    unsigned char *md5this2 = (unsigned char *)
      aprintf(""%s:%s"", md5this, ""d41d8cd98f00b204e9800998ecf8427e"");
    free(md5this);
    md5this = md5this2;
  }

  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  free(md5this);
  sasl_digest_md5_to_ascii(md5buf, ha2);

  if(digest->qop) {
    md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       digest->nc,
                                       digest->cnonce,
                                       digest->qop,
                                       ha2);
  }
  else {
    md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       ha2);
  }

  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  free(md5this);
  sasl_digest_md5_to_ascii(md5buf, request_digest);

  /* for test case 64 (snooped from a Mozilla 1.3a request)

    Authorization: Digest username=""testuser"", realm=""testrealm"", \
    nonce=""1053604145"", uri=""/64"", response=""c55f7f30d83d774a3d2dcacf725abaca""

    Digest parameters are all quoted strings.  Username which is provided by
    the user will need double quotes and backslashes within it escaped.  For
    the other fields, this shouldn't be an issue.  realm, nonce, and opaque
    are copied as is from the server, escapes and all.  cnonce is generated
    with web-safe characters.  uri is already percent encoded.  nc is 8 hex
    characters.  algorithm and qop with standard values only contain web-safe
    chracters.
  */
  userp_quoted = sasl_digest_string_quoted(userp);
  if(!userp_quoted)
    return CURLE_OUT_OF_MEMORY;

  if(digest->qop) {
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""cnonce=\""%s\"", ""
                       ""nc=%08x, ""
                       ""qop=%s, ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       digest->cnonce,
                       digest->nc,
                       digest->qop,
                       request_digest);

    if(Curl_raw_equal(digest->qop, ""auth""))
      digest->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0
                       padded which tells to the server how many times you are
                       using the same nonce in the qop=auth mode */
  }
  else {
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       request_digest);
  }
  free(userp_quoted);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Add the optional fields */
  if(digest->opaque) {
    /* Append the opaque */
    tmp = aprintf(""%s, opaque=\""%s\"""", response, digest->opaque);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }

  if(digest->algorithm) {
    /* Append the algorithm */
    tmp = aprintf(""%s, algorithm=\""%s\"""", response, digest->algorithm);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }

  /* Return the output */
  *outptr = response;
  *outlen = strlen(response);

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_297.cpp,"[18, 0, 0, 0, 0, 0, 10, 0, 0, 0, 21, 0, 0, 0, 0, 287, 0, 0, 13, 13, 0, 0, 5, 32, 0, 0, 0, 0, 6, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 180, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 5, 0, 18, 18, 2, 0, 42, 0, 0, 40, 0, 102, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_297.cpp,83,"[""string"", ""const unsigned char *"", ""const unsigned char *""]","[""aprintf_ret"", ""!"", ""!""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,999,-1,"md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       digest->nc,
                                       digest->cnonce,
                                       digest->qop,
                                       ha2);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_299.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_299.cpp,"{
    md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       digest->nc,
                                       digest->cnonce,
                                       digest->qop,
                                       ha2);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_299.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_299.cpp,103,"[""string"", ""unsigned char *"", ""member"", ""member"", ""member"", ""member"", ""unsigned char *""]","[""member""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,1008,-1,"md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       ha2);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_300.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_300.cpp,"{
    md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       ha2);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_300.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_300.cpp,112,"[""string"", ""unsigned char *"", ""member"", ""unsigned char *""]","[""member"", ""!""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,1040,-1,"response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""cnonce=\""%s\"", ""
                       ""nc=%08x, ""
                       ""qop=%s, ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       digest->cnonce,
                       digest->nc,
                       digest->qop,
                       request_digest);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_301.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_301.cpp,"{
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""cnonce=\""%s\"", ""
                       ""nc=%08x, ""
                       ""qop=%s, ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       digest->cnonce,
                       digest->nc,
                       digest->qop,
                       request_digest);

    if(Curl_raw_equal(digest->qop, ""auth""))
      digest->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0
                       padded which tells to the server how many times you are
                       using the same nonce in the qop=auth mode */
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_301.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_301.cpp,144,[],"[""member""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,1063,-1,"response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       request_digest);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_302.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_302.cpp,"{
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       request_digest);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_302.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_302.cpp,167,[],"[""member"", ""!""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,1081,-1,"tmp = aprintf(""%s, opaque=\""%s\"""", response, digest->opaque);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_303.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_303.cpp,"{
    /* Append the opaque */
    tmp = aprintf(""%s, opaque=\""%s\"""", response, digest->opaque);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_303.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_303.cpp,185,"[""string"", ""char *"", ""member""]","[""member""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,1091,-1,"tmp = aprintf(""%s, algorithm=\""%s\"""", response, digest->algorithm);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_304.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_304.cpp,"{
    /* Append the algorithm */
    tmp = aprintf(""%s, algorithm=\""%s\"""", response, digest->algorithm);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_304.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_304.cpp,195,"[""string"", ""aprintf_ret"", ""member""]","[""member""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_159.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_159.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_412.cpp,56,57,1180,-1,"xoauth = aprintf(""user=%s\1auth=Bearer %s\1\1"", user, bearer);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_305.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_305.cpp,"{
  CURLcode result = CURLE_OK;
  char *xoauth = NULL;

  /* Generate the message */
  xoauth = aprintf(""user=%s\1auth=Bearer %s\1\1"", user, bearer);
  if(!xoauth)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the reply */
  result = Curl_base64_encode(data, xoauth, strlen(xoauth), outptr, outlen);

  free(xoauth);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_305.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 23, 0, 0, 2, 2, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_305.cpp,9,"[""string"", ""const char *"", ""const char *""]",[]
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/easy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_160.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_160.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_160.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_413.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_413.cpp,269,271,273,277,"DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));","DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_306.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_306.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_306.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_306.cpp,51,"[""fprintf_ret""]","[""libssh2_init_ret""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_161.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_161.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_161.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_416.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_416.cpp,479,486,490,494,"snprintf(buf, BUFSIZE-1,
               ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
               Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
               tm->tm_mday,
               Curl_month[tm->tm_mon],
               tm->tm_year + 1900,
               tm->tm_hour,
               tm->tm_min,
               tm->tm_sec);","snprintf(buf, BUFSIZE-1,
             ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
             Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
             tm->tm_mday,
             Curl_month[tm->tm_mon],
             tm->tm_year + 1900,
             tm->tm_hour,
             tm->tm_min,
             tm->tm_sec);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_307.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_307.cpp,"{
      time_t filetime = (time_t)statbuf.st_mtime;
      struct tm buffer;
      const struct tm *tm = &buffer;
      result = Curl_gmtime(filetime, &buffer);
      if(result)
        return result;

      /* format: ""Tue, 15 Nov 1994 12:45:26 GMT"" */
      snprintf(buf, BUFSIZE-1,
               ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
               Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
               tm->tm_mday,
               Curl_month[tm->tm_mon],
               tm->tm_year + 1900,
               tm->tm_hour,
               tm->tm_min,
               tm->tm_sec);
      result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_307.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 57, 0, 0, 3, 3, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 1, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 2, 2, 1, 0, 3, 0, 0, 3, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_307.cpp,74,"[""char *"", ""macro"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""Curl_gmtime_ret"", ""!""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/http_negotiate.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_165.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_165.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_165.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_420.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_420.cpp,22,22,172,109,"userp = aprintf(""%sAuthorization: Negotiate %s\r\n"", proxy ? ""Proxy-"" : """",
                  encoded);","userp = aprintf(""%sAuthorization: Negotiate %s\r\n"", proxy ? ""Proxy-"" : """",
                  base64);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_308.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_308.cpp,"struct negotiatedata *neg_ctx = proxy?&conn->data->state.proxyneg:
    &conn->data->state.negotiate;
  char *encoded = NULL;
  size_t len = 0;
  char *userp;
  CURLcode result;
  OM_uint32 discard_st;

  result = Curl_base64_encode(conn->data,
                              neg_ctx->output_token.value,
                              neg_ctx->output_token.length,
                              &encoded, &len);
  if(result) {
    gss_release_buffer(&discard_st, &neg_ctx->output_token);
    neg_ctx->output_token.value = NULL;
    neg_ctx->output_token.length = 0;
    return result;
  }

  if(!encoded || !len) {
    gss_release_buffer(&discard_st, &neg_ctx->output_token);
    neg_ctx->output_token.value = NULL;
    neg_ctx->output_token.length = 0;
    return CURLE_REMOTE_ACCESS_DENIED;
  }

  userp = aprintf(""%sAuthorization: Negotiate %s\r\n"", proxy ? ""Proxy-"" : """",
                  encoded)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_308.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 76, 0, 0, 6, 6, 0, 0, 3, 6, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 1, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 3, 3, 1, 0, 4, 0, 0, 8, 0, 12, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_308.cpp,28,[],"[""char *"", ""!"", ""size_t"", ""!"", ""||"", ""!""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/http_proxy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_166.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_166.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_166.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_421.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_421.cpp,150,160,160,172,,"(""%s%s%s:%hu"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_310.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_310.cpp,"f(!hostheader) {
          Curl_add_buffer_free(req_buffer);
          return CURLE_OUT_OF_MEMORY;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_310.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_310.cpp,68,[],"[""Curl_http_output_auth_ret"", ""!""]"
5bcbc3857fd9976389d8eee3bb54e352ea950aec,Merge branch 'update-curl' into release,[],Utilities/cmcurl/lib/mprintf.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_167.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_167.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_167.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_422.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_422.cpp,32,32,32,32,"the project that
 * took on from here is named 'Trio' and you find more details on the trio web
 * page at http://daniel.haxx.se/trio/
 */;","the project that
 * took on from here is named 'Trio' and you find more details on the trio web
 * page at https://daniel.haxx.se/projects/trio/
 */;",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_311.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_311.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_311.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_311.cpp,0,[],[]
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/conncache.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_172.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_172.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_172.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_428.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_428.cpp,132,131,134,-1,"aprintf(""%s:%d"",
                 conn->bits.proxy?conn->proxy.name:conn->host.name,
                 conn->localport);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_312.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_312.cpp,"{
  return aprintf(""%s:%d"",
                 conn->bits.proxy?conn->proxy.name:conn->host.name,
                 conn->localport);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_312.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_312.cpp,2,"[""string"", ""member"", ""member""]",[]
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/conncache.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_172.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_172.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_172.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_428.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_428.cpp,132,131,134,142,,"aprintf(""%s:%d"", hostname, conn->port);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_313.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_313.cpp,"{
  return aprintf(""%s:%d"",
                 conn->bits.proxy?conn->proxy.name:conn->host.name,
                 conn->localport);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_313.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_313.cpp,2,"[""string"", ""member"", ""member""]",[]
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,168,-1,"snprintf((char *)&dest[i*2], 3, ""%02x"", source[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_314.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_314.cpp,"snprintf((char *)&dest[i*2], 3, ""%02x"", source[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_314.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_314.cpp,5,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""int"", ""<""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,277,-1,"aprintf(""%s/%s"", service, host);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_315.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_315.cpp,"{
  /* Generate and return our SPN */
  return aprintf(""%s/%s"", service, host);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_315.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_315.cpp,3,"[""string"", ""const char *"", ""const char *""]",[]
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,474,-1,"response = aprintf(
      ""%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"",
           userp, digest[0], digest[1], digest[2], digest[3], digest[4],
           digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
           digest[11], digest[12], digest[13], digest[14], digest[15]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_316.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_316.cpp,"{
  CURLcode result = CURLE_OK;
  size_t chlglen = 0;
  HMAC_context *ctxt;
  unsigned char digest[MD5_DIGEST_LEN];
  char *response;

  if(chlg)
    chlglen = strlen(chlg);

  /* Compute the digest using the password as the key */
  ctxt = Curl_HMAC_init(Curl_HMAC_MD5,
                        (const unsigned char *) passwdp,
                        curlx_uztoui(strlen(passwdp)));
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  /* Update the digest with the given challenge */
  if(chlglen > 0)
    Curl_HMAC_update(ctxt, (const unsigned char *) chlg,
                     curlx_uztoui(chlglen));

  /* Finalise the digest */
  Curl_HMAC_final(ctxt, digest);

  /* Generate the response */
  response = aprintf(
      ""%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"",
           userp, digest[0], digest[1], digest[2], digest[3], digest[4],
           digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
           digest[11], digest[12], digest[13], digest[14], digest[15]);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_316.cpp,"[4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 2, 86, 0, 0, 5, 5, 0, 0, 2, 20, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 17, 0, 4, 4, 0, 0, 10, 0, 0, 7, 0, 36, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_316.cpp,31,"[""string"", ""const char *"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""Curl_HMAC_init_ret"", ""!"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,636,-1,"snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_317.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_317.cpp,"{
  CURLcode result = CURLE_OK;
  size_t i;
  MD5_context *ctxt;
  char *response = NULL;
  unsigned char digest[MD5_DIGEST_LEN];
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  char nonce[64];
  char realm[128];
  char algorithm[64];
  char qop_options[64];
  int qop_values;
  char cnonce[33];
  unsigned int entropy[4];
  char nonceCount[] = ""00000001"";
  char method[]     = ""AUTHENTICATE"";
  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  char *spn         = NULL;

  /* Decode the challange message */
  result = sasl_decode_digest_md5_message(chlg64, nonce, sizeof(nonce),
                                          realm, sizeof(realm),
                                          algorithm, sizeof(algorithm),
                                          qop_options, sizeof(qop_options));
  if(result)
    return result;

  /* We only support md5 sessions */
  if(strcmp(algorithm, ""md5-sess"") != 0)
    return CURLE_BAD_CONTENT_ENCODING;

  /* Get the qop-values from the qop-options */
  result = sasl_digest_get_qop_values(qop_options, &qop_values);
  if(result)
    return result;

  /* We only support auth quality-of-protection */
  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
    return CURLE_BAD_CONTENT_ENCODING;

  /* Generate 16 bytes of random data */
  entropy[0] = Curl_rand(data);
  entropy[1] = Curl_rand(data);
  entropy[2] = Curl_rand(data);
  entropy[3] = Curl_rand(data);

  /* Convert the random data into a 32 byte hex string */
  snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);

  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) userp,
                  curlx_uztoui(strlen(userp)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) realm,
                  curlx_uztoui(strlen(realm)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
                  curlx_uztoui(strlen(passwdp)));
  Curl_MD5_final(ctxt, digest);

  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_final(ctxt, digest);

  /* Convert calculated 16 octet hex into 32 bytes string */
  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate our SPN */
  spn = Curl_sasl_build_spn(service, realm);
  if(!spn)
    return CURLE_OUT_OF_MEMORY;

  /* Calculate H(A2) */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) method,
                  curlx_uztoui(strlen(method)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) spn,
                  curlx_uztoui(strlen(spn)));
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Now calculate the response hash */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
                  curlx_uztoui(strlen(nonceCount)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) qop,
                  curlx_uztoui(strlen(qop)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate the response */
  response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  free(spn);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_317.cpp,"[10, 0, 3, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 24, 357, 0, 0, 19, 19, 0, 0, 9, 63, 0, 0, 0, 0, 3, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 276, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 27, 0, 13, 10, 0, 0, 77, 0, 0, 49, 0, 167, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_317.cpp,55,"[""char *"", ""unkown"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""bool"", ""!"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,669,-1,"snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_318.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_318.cpp,"snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_318.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_318.cpp,88,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""macro"", ""<""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,692,-1,"snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_319.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_319.cpp,"snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_319.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_319.cpp,111,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""macro"", ""<""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,722,-1,"snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_320.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_320.cpp,"snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_320.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_320.cpp,141,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""macro"", ""<""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,725,-1,"response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_321.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_321.cpp,"{
  CURLcode result = CURLE_OK;
  size_t i;
  MD5_context *ctxt;
  char *response = NULL;
  unsigned char digest[MD5_DIGEST_LEN];
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  char nonce[64];
  char realm[128];
  char algorithm[64];
  char qop_options[64];
  int qop_values;
  char cnonce[33];
  unsigned int entropy[4];
  char nonceCount[] = ""00000001"";
  char method[]     = ""AUTHENTICATE"";
  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  char *spn         = NULL;

  /* Decode the challange message */
  result = sasl_decode_digest_md5_message(chlg64, nonce, sizeof(nonce),
                                          realm, sizeof(realm),
                                          algorithm, sizeof(algorithm),
                                          qop_options, sizeof(qop_options));
  if(result)
    return result;

  /* We only support md5 sessions */
  if(strcmp(algorithm, ""md5-sess"") != 0)
    return CURLE_BAD_CONTENT_ENCODING;

  /* Get the qop-values from the qop-options */
  result = sasl_digest_get_qop_values(qop_options, &qop_values);
  if(result)
    return result;

  /* We only support auth quality-of-protection */
  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
    return CURLE_BAD_CONTENT_ENCODING;

  /* Generate 16 bytes of random data */
  entropy[0] = Curl_rand(data);
  entropy[1] = Curl_rand(data);
  entropy[2] = Curl_rand(data);
  entropy[3] = Curl_rand(data);

  /* Convert the random data into a 32 byte hex string */
  snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);

  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) userp,
                  curlx_uztoui(strlen(userp)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) realm,
                  curlx_uztoui(strlen(realm)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
                  curlx_uztoui(strlen(passwdp)));
  Curl_MD5_final(ctxt, digest);

  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_final(ctxt, digest);

  /* Convert calculated 16 octet hex into 32 bytes string */
  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate our SPN */
  spn = Curl_sasl_build_spn(service, realm);
  if(!spn)
    return CURLE_OUT_OF_MEMORY;

  /* Calculate H(A2) */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) method,
                  curlx_uztoui(strlen(method)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) spn,
                  curlx_uztoui(strlen(spn)));
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Now calculate the response hash */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
                  curlx_uztoui(strlen(nonceCount)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) qop,
                  curlx_uztoui(strlen(qop)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate the response */
  response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  free(spn);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_321.cpp,"[10, 0, 3, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 24, 357, 0, 0, 19, 19, 0, 0, 9, 63, 0, 0, 0, 0, 3, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 276, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 27, 0, 13, 10, 0, 0, 77, 0, 0, 49, 0, 167, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_321.cpp,144,[],"[""Curl_MD5_init_ret"", ""!"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,921,-1,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_322.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_322.cpp,"{
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_322.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 23, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 8, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_322.cpp,25,"[""char *"", ""unkown"", ""string"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret""]","[""member""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,956,-1,"tmp = aprintf(""%s:%s:%s"", ha1, digest->nonce, digest->cnonce);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_324.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_324.cpp,"{
    /* nonce and cnonce are OUTSIDE the hash */
    tmp = aprintf(""%s:%s:%s"", ha1, digest->nonce, digest->cnonce);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* convert on non-ASCII machines */
    Curl_md5it(md5buf, (unsigned char *)tmp);
    free(tmp);
    sasl_digest_md5_to_ascii(md5buf, ha1);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_324.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 5, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_324.cpp,60,"[""string"", ""unsigned char *"", ""member"", ""member""]","[""member"", ""macro"", ""==""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,979,-1,"md5this = (unsigned char *)aprintf(""%s:%s"", request, uripath);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_325.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_325.cpp,"{
  CURLcode result;
  unsigned char md5buf[16]; /* 16 bytes/128 bits */
  unsigned char request_digest[33];
  unsigned char *md5this;
  unsigned char ha1[33];/* 32 digits and 1 zero byte */
  unsigned char ha2[33];/* 32 digits and 1 zero byte */
  char cnoncebuf[33];
  char *cnonce = NULL;
  size_t cnonce_sz = 0;
  char *userp_quoted;
  char *response = NULL;
  char *tmp = NULL;

  if(!digest->nc)
    digest->nc = 1;

  if(!digest->cnonce) {
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }

  /*
    if the algorithm is ""MD5"" or unspecified (which then defaults to MD5):

    A1 = unq(username-value) "":"" unq(realm-value) "":"" passwd

    if the algorithm is ""MD5-sess"" then:

    A1 = H( unq(username-value) "":"" unq(realm-value) "":"" passwd )
         "":"" unq(nonce-value) "":"" unq(cnonce-value)
  */

  md5this = (unsigned char *)
    aprintf(""%s:%s:%s"", userp, digest->realm, passwdp);
  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  free(md5this);
  sasl_digest_md5_to_ascii(md5buf, ha1);

  if(digest->algo == CURLDIGESTALGO_MD5SESS) {
    /* nonce and cnonce are OUTSIDE the hash */
    tmp = aprintf(""%s:%s:%s"", ha1, digest->nonce, digest->cnonce);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* convert on non-ASCII machines */
    Curl_md5it(md5buf, (unsigned char *)tmp);
    free(tmp);
    sasl_digest_md5_to_ascii(md5buf, ha1);
  }

  /*
    If the ""qop"" directive's value is ""auth"" or is unspecified, then A2 is:

      A2       = Method "":"" digest-uri-value

          If the ""qop"" value is ""auth-int"", then A2 is:

      A2       = Method "":"" digest-uri-value "":"" H(entity-body)

    (The ""Method"" value is the HTTP request method as specified in section
    5.1.1 of RFC 2616)
  */

  md5this = (unsigned char *)aprintf(""%s:%s"", request, uripath);

  if(digest->qop && Curl_raw_equal(digest->qop, ""auth-int"")) {
    /* We don't support auth-int for PUT or POST at the moment.
       TODO: replace md5 of empty string with entity-body for PUT/POST */
    unsigned char *md5this2 = (unsigned char *)
      aprintf(""%s:%s"", md5this, ""d41d8cd98f00b204e9800998ecf8427e"");
    free(md5this);
    md5this = md5this2;
  }

  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  free(md5this);
  sasl_digest_md5_to_ascii(md5buf, ha2);

  if(digest->qop) {
    md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       digest->nc,
                                       digest->cnonce,
                                       digest->qop,
                                       ha2);
  }
  else {
    md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       ha2);
  }

  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  free(md5this);
  sasl_digest_md5_to_ascii(md5buf, request_digest);

  /* for test case 64 (snooped from a Mozilla 1.3a request)

    Authorization: Digest username=""testuser"", realm=""testrealm"", \
    nonce=""1053604145"", uri=""/64"", response=""c55f7f30d83d774a3d2dcacf725abaca""

    Digest parameters are all quoted strings.  Username which is provided by
    the user will need double quotes and backslashes within it escaped.  For
    the other fields, this shouldn't be an issue.  realm, nonce, and opaque
    are copied as is from the server, escapes and all.  cnonce is generated
    with web-safe characters.  uri is already percent encoded.  nc is 8 hex
    characters.  algorithm and qop with standard values only contain web-safe
    chracters.
  */
  userp_quoted = sasl_digest_string_quoted(userp);
  if(!userp_quoted)
    return CURLE_OUT_OF_MEMORY;

  if(digest->qop) {
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""cnonce=\""%s\"", ""
                       ""nc=%08x, ""
                       ""qop=%s, ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       digest->cnonce,
                       digest->nc,
                       digest->qop,
                       request_digest);

    if(Curl_raw_equal(digest->qop, ""auth""))
      digest->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0
                       padded which tells to the server how many times you are
                       using the same nonce in the qop=auth mode */
  }
  else {
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       request_digest);
  }
  free(userp_quoted);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Add the optional fields */
  if(digest->opaque) {
    /* Append the opaque */
    tmp = aprintf(""%s, opaque=\""%s\"""", response, digest->opaque);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }

  if(digest->algorithm) {
    /* Append the algorithm */
    tmp = aprintf(""%s, algorithm=\""%s\"""", response, digest->algorithm);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }

  /* Return the output */
  *outptr = response;
  *outlen = strlen(response);

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_325.cpp,"[18, 0, 0, 0, 0, 0, 10, 0, 0, 0, 21, 0, 0, 0, 0, 287, 0, 0, 13, 13, 0, 0, 5, 32, 0, 0, 0, 0, 6, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 180, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 5, 0, 18, 18, 2, 0, 42, 0, 0, 40, 0, 102, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_325.cpp,83,"[""string"", ""const unsigned char *"", ""const unsigned char *""]","[""aprintf_ret"", ""!"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,999,-1,"md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       digest->nc,
                                       digest->cnonce,
                                       digest->qop,
                                       ha2);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_327.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_327.cpp,"{
    md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       digest->nc,
                                       digest->cnonce,
                                       digest->qop,
                                       ha2);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_327.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_327.cpp,103,"[""string"", ""unsigned char *"", ""member"", ""member"", ""member"", ""member"", ""unsigned char *""]","[""member""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,1008,-1,"md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       ha2);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_328.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_328.cpp,"{
    md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       ha2);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_328.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_328.cpp,112,"[""string"", ""unsigned char *"", ""member"", ""unsigned char *""]","[""member"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,1040,-1,"response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""cnonce=\""%s\"", ""
                       ""nc=%08x, ""
                       ""qop=%s, ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       digest->cnonce,
                       digest->nc,
                       digest->qop,
                       request_digest);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_329.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_329.cpp,"{
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""cnonce=\""%s\"", ""
                       ""nc=%08x, ""
                       ""qop=%s, ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       digest->cnonce,
                       digest->nc,
                       digest->qop,
                       request_digest);

    if(Curl_raw_equal(digest->qop, ""auth""))
      digest->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0
                       padded which tells to the server how many times you are
                       using the same nonce in the qop=auth mode */
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_329.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_329.cpp,144,[],"[""member""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,1063,-1,"response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       request_digest);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_330.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_330.cpp,"{
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       request_digest);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_330.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_330.cpp,167,[],"[""member"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,1081,-1,"tmp = aprintf(""%s, opaque=\""%s\"""", response, digest->opaque);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_331.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_331.cpp,"{
    /* Append the opaque */
    tmp = aprintf(""%s, opaque=\""%s\"""", response, digest->opaque);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_331.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_331.cpp,185,"[""string"", ""char *"", ""member""]","[""member""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,1091,-1,"tmp = aprintf(""%s, algorithm=\""%s\"""", response, digest->algorithm);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_332.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_332.cpp,"{
    /* Append the algorithm */
    tmp = aprintf(""%s, algorithm=\""%s\"""", response, digest->algorithm);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_332.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_332.cpp,195,"[""string"", ""aprintf_ret"", ""member""]","[""member""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_174.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_174.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_430.cpp,56,57,1180,-1,"xoauth = aprintf(""user=%s\1auth=Bearer %s\1\1"", user, bearer);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_333.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_333.cpp,"{
  CURLcode result = CURLE_OK;
  char *xoauth = NULL;

  /* Generate the message */
  xoauth = aprintf(""user=%s\1auth=Bearer %s\1\1"", user, bearer);
  if(!xoauth)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the reply */
  result = Curl_base64_encode(data, xoauth, strlen(xoauth), outptr, outlen);

  free(xoauth);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_333.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 23, 0, 0, 2, 2, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_333.cpp,9,"[""string"", ""const char *"", ""const char *""]",[]
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/easy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_175.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_175.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_175.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_431.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_431.cpp,269,271,273,277,"DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));","DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_334.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_334.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_334.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_334.cpp,51,"[""fprintf_ret""]","[""libssh2_init_ret""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_176.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_176.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_176.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_434.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_434.cpp,479,486,490,494,"snprintf(buf, BUFSIZE-1,
               ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
               Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
               tm->tm_mday,
               Curl_month[tm->tm_mon],
               tm->tm_year + 1900,
               tm->tm_hour,
               tm->tm_min,
               tm->tm_sec);","snprintf(buf, BUFSIZE-1,
             ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
             Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
             tm->tm_mday,
             Curl_month[tm->tm_mon],
             tm->tm_year + 1900,
             tm->tm_hour,
             tm->tm_min,
             tm->tm_sec);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_335.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_335.cpp,"{
      time_t filetime = (time_t)statbuf.st_mtime;
      struct tm buffer;
      const struct tm *tm = &buffer;
      result = Curl_gmtime(filetime, &buffer);
      if(result)
        return result;

      /* format: ""Tue, 15 Nov 1994 12:45:26 GMT"" */
      snprintf(buf, BUFSIZE-1,
               ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
               Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
               tm->tm_mday,
               Curl_month[tm->tm_mon],
               tm->tm_year + 1900,
               tm->tm_hour,
               tm->tm_min,
               tm->tm_sec);
      result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_335.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 57, 0, 0, 3, 3, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 1, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 2, 2, 1, 0, 3, 0, 0, 3, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_335.cpp,74,"[""char *"", ""macro"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""Curl_gmtime_ret"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/http_negotiate.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_180.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_180.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_180.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_438.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_438.cpp,22,22,172,109,"userp = aprintf(""%sAuthorization: Negotiate %s\r\n"", proxy ? ""Proxy-"" : """",
                  encoded);","userp = aprintf(""%sAuthorization: Negotiate %s\r\n"", proxy ? ""Proxy-"" : """",
                  base64);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_336.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_336.cpp,"struct negotiatedata *neg_ctx = proxy?&conn->data->state.proxyneg:
    &conn->data->state.negotiate;
  char *encoded = NULL;
  size_t len = 0;
  char *userp;
  CURLcode result;
  OM_uint32 discard_st;

  result = Curl_base64_encode(conn->data,
                              neg_ctx->output_token.value,
                              neg_ctx->output_token.length,
                              &encoded, &len);
  if(result) {
    gss_release_buffer(&discard_st, &neg_ctx->output_token);
    neg_ctx->output_token.value = NULL;
    neg_ctx->output_token.length = 0;
    return result;
  }

  if(!encoded || !len) {
    gss_release_buffer(&discard_st, &neg_ctx->output_token);
    neg_ctx->output_token.value = NULL;
    neg_ctx->output_token.length = 0;
    return CURLE_REMOTE_ACCESS_DENIED;
  }

  userp = aprintf(""%sAuthorization: Negotiate %s\r\n"", proxy ? ""Proxy-"" : """",
                  encoded)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_336.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 76, 0, 0, 6, 6, 0, 0, 3, 6, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 1, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 3, 3, 1, 0, 4, 0, 0, 8, 0, 12, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_336.cpp,28,[],"[""char *"", ""!"", ""size_t"", ""!"", ""||"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/http_proxy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_181.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_181.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_181.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_439.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_439.cpp,150,160,160,172,,"(""%s%s%s:%hu"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_338.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_338.cpp,"f(!hostheader) {
          Curl_add_buffer_free(req_buffer);
          return CURLE_OUT_OF_MEMORY;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_338.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_338.cpp,68,[],"[""Curl_http_output_auth_ret"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/tftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_186.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_186.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_186.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_445.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_445.cpp,494,494,509,511,"snprintf( buf, sizeof(buf), ""%d"", state->requested_blksize );","snprintf(buf, sizeof(buf), ""%d"", state->requested_blksize);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_340.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_340.cpp,"{

  case TFTP_EVENT_INIT:    /* Send the first packet out */
  case TFTP_EVENT_TIMEOUT: /* Resend the first packet out */
    /* Increment the retry counter, quit if over the limit */
    state->retries++;
    if(state->retries>state->retry_max) {
      state->error = TFTP_ERR_NORESPONSE;
      state->state = TFTP_STATE_FIN;
      return result;
    }

    if(data->set.upload) {
      /* If we are uploading, send an WRQ */
      setpacketevent(&state->spacket, TFTP_EVENT_WRQ);
      state->conn->data->req.upload_fromhere =
        (char *)state->spacket.data+4;
      if(data->state.infilesize != -1)
        Curl_pgrsSetUploadSize(data, data->state.infilesize);
    }
    else {
      /* If we are downloading, send an RRQ */
      setpacketevent(&state->spacket, TFTP_EVENT_RRQ);
    }
    /* As RFC3617 describes the separator slash is not actually part of the
       file name so we skip the always-present first letter of the path
       string. */
    filename = curl_easy_unescape(data, &state->conn->data->state.path[1], 0,
                                  NULL);
    if(!filename)
      return CURLE_OUT_OF_MEMORY;

    snprintf((char *)state->spacket.data+2,
             state->blksize,
             ""%s%c%s%c"", filename, '\0',  mode, '\0');
    sbytes = 4 + strlen(filename) + strlen(mode);

    /* add tsize option */
    if(data->set.upload && (data->state.infilesize != -1))
      snprintf(buf, sizeof(buf), ""%"" CURL_FORMAT_CURL_OFF_T,
               data->state.infilesize);
    else
      strcpy(buf, ""0""); /* the destination is large enough */

    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_TSIZE);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf);
    /* add blksize option */
    snprintf( buf, sizeof(buf), ""%d"", state->requested_blksize );
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_BLKSIZE);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf );

    /* add timeout option */
    snprintf( buf, sizeof(buf), ""%d"", state->retry_time);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_INTERVAL);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf );

    /* the typecase for the 3rd argument is mostly for systems that do
       not have a size_t argument, like older unixes that want an 'int' */
    senddata = sendto(state->sockfd, (void *)state->spacket.data,
                      (SEND_TYPE_ARG3)sbytes, 0,
                      state->conn->ip_addr->ai_addr,
                      state->conn->ip_addr->ai_addrlen);
    if(senddata != (ssize_t)sbytes) {
      failf(data, ""%s"", Curl_strerror(state->conn, SOCKERRNO));
    }
    free(filename);
    break;

  case TFTP_EVENT_OACK:
    if(data->set.upload) {
      result = tftp_connect_for_tx(state, event);
    }
    else {
      result = tftp_connect_for_rx(state, event);
    }
    break;

  case TFTP_EVENT_ACK: /* Connected for transmit */
    result = tftp_connect_for_tx(state, event);
    break;

  case TFTP_EVENT_DATA: /* Connected for receive */
    result = tftp_connect_for_rx(state, event);
    break;

  case TFTP_EVENT_ERROR:
    state->state = TFTP_STATE_FIN;
    break;

  default:
    failf(state->conn->data, ""tftp_send_first: internal error"");
    break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_340.cpp,"[7, 0, 0, 0, 6, 0, 2, 0, 6, 1, 11, 0, 0, 0, 0, 246, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 127, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 7, 3, 0, 29, 0, 0, 29, 0, 82, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_340.cpp,64,"[""char *"", ""unkown"", ""string"", ""member""]","[""curl_easy_unescape_ret"", ""!"", ""!""]"
f53f4a8a2d215dac634effea575a27e000dfcb29,"Merge branch 'upstream-curl' into update-curl

* upstream-curl:
  curl 2016-08-03 (f2cb3a01)",[],Utilities/cmcurl/lib/tftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_186.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_186.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_186.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_445.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_445.cpp,494,494,517,519,"snprintf( buf, sizeof(buf), ""%d"", state->retry_time);","snprintf(buf, sizeof(buf), ""%d"", state->retry_time);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_341.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_341.cpp,"{

  case TFTP_EVENT_INIT:    /* Send the first packet out */
  case TFTP_EVENT_TIMEOUT: /* Resend the first packet out */
    /* Increment the retry counter, quit if over the limit */
    state->retries++;
    if(state->retries>state->retry_max) {
      state->error = TFTP_ERR_NORESPONSE;
      state->state = TFTP_STATE_FIN;
      return result;
    }

    if(data->set.upload) {
      /* If we are uploading, send an WRQ */
      setpacketevent(&state->spacket, TFTP_EVENT_WRQ);
      state->conn->data->req.upload_fromhere =
        (char *)state->spacket.data+4;
      if(data->state.infilesize != -1)
        Curl_pgrsSetUploadSize(data, data->state.infilesize);
    }
    else {
      /* If we are downloading, send an RRQ */
      setpacketevent(&state->spacket, TFTP_EVENT_RRQ);
    }
    /* As RFC3617 describes the separator slash is not actually part of the
       file name so we skip the always-present first letter of the path
       string. */
    filename = curl_easy_unescape(data, &state->conn->data->state.path[1], 0,
                                  NULL);
    if(!filename)
      return CURLE_OUT_OF_MEMORY;

    snprintf((char *)state->spacket.data+2,
             state->blksize,
             ""%s%c%s%c"", filename, '\0',  mode, '\0');
    sbytes = 4 + strlen(filename) + strlen(mode);

    /* add tsize option */
    if(data->set.upload && (data->state.infilesize != -1))
      snprintf(buf, sizeof(buf), ""%"" CURL_FORMAT_CURL_OFF_T,
               data->state.infilesize);
    else
      strcpy(buf, ""0""); /* the destination is large enough */

    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_TSIZE);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf);
    /* add blksize option */
    snprintf( buf, sizeof(buf), ""%d"", state->requested_blksize );
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_BLKSIZE);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf );

    /* add timeout option */
    snprintf( buf, sizeof(buf), ""%d"", state->retry_time);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_INTERVAL);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf );

    /* the typecase for the 3rd argument is mostly for systems that do
       not have a size_t argument, like older unixes that want an 'int' */
    senddata = sendto(state->sockfd, (void *)state->spacket.data,
                      (SEND_TYPE_ARG3)sbytes, 0,
                      state->conn->ip_addr->ai_addr,
                      state->conn->ip_addr->ai_addrlen);
    if(senddata != (ssize_t)sbytes) {
      failf(data, ""%s"", Curl_strerror(state->conn, SOCKERRNO));
    }
    free(filename);
    break;

  case TFTP_EVENT_OACK:
    if(data->set.upload) {
      result = tftp_connect_for_tx(state, event);
    }
    else {
      result = tftp_connect_for_rx(state, event);
    }
    break;

  case TFTP_EVENT_ACK: /* Connected for transmit */
    result = tftp_connect_for_tx(state, event);
    break;

  case TFTP_EVENT_DATA: /* Connected for receive */
    result = tftp_connect_for_rx(state, event);
    break;

  case TFTP_EVENT_ERROR:
    state->state = TFTP_STATE_FIN;
    break;

  default:
    failf(state->conn->data, ""tftp_send_first: internal error"");
    break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_341.cpp,"[7, 0, 0, 0, 6, 0, 2, 0, 6, 1, 11, 0, 0, 0, 0, 246, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 127, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 7, 3, 0, 29, 0, 0, 29, 0, 82, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_341.cpp,72,"[""char *"", ""unkown"", ""string"", ""member""]","[""curl_easy_unescape_ret"", ""!"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/conncache.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_188.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_188.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_188.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_447.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_447.cpp,132,131,134,-1,"aprintf(""%s:%d"",
                 conn->bits.proxy?conn->proxy.name:conn->host.name,
                 conn->localport);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_342.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_342.cpp,"{
  return aprintf(""%s:%d"",
                 conn->bits.proxy?conn->proxy.name:conn->host.name,
                 conn->localport);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_342.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_342.cpp,2,"[""string"", ""member"", ""member""]",[]
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/conncache.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_188.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_188.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_188.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_447.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_447.cpp,132,131,134,142,,"aprintf(""%s:%d"", hostname, conn->port);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_343.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_343.cpp,"{
  return aprintf(""%s:%d"",
                 conn->bits.proxy?conn->proxy.name:conn->host.name,
                 conn->localport);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_343.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_343.cpp,2,"[""string"", ""member"", ""member""]",[]
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,168,-1,"snprintf((char *)&dest[i*2], 3, ""%02x"", source[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_344.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_344.cpp,"snprintf((char *)&dest[i*2], 3, ""%02x"", source[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_344.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_344.cpp,5,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""int"", ""<""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,277,-1,"aprintf(""%s/%s"", service, host);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_345.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_345.cpp,"{
  /* Generate and return our SPN */
  return aprintf(""%s/%s"", service, host);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_345.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_345.cpp,3,"[""string"", ""const char *"", ""const char *""]",[]
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,474,-1,"response = aprintf(
      ""%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"",
           userp, digest[0], digest[1], digest[2], digest[3], digest[4],
           digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
           digest[11], digest[12], digest[13], digest[14], digest[15]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_346.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_346.cpp,"{
  CURLcode result = CURLE_OK;
  size_t chlglen = 0;
  HMAC_context *ctxt;
  unsigned char digest[MD5_DIGEST_LEN];
  char *response;

  if(chlg)
    chlglen = strlen(chlg);

  /* Compute the digest using the password as the key */
  ctxt = Curl_HMAC_init(Curl_HMAC_MD5,
                        (const unsigned char *) passwdp,
                        curlx_uztoui(strlen(passwdp)));
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  /* Update the digest with the given challenge */
  if(chlglen > 0)
    Curl_HMAC_update(ctxt, (const unsigned char *) chlg,
                     curlx_uztoui(chlglen));

  /* Finalise the digest */
  Curl_HMAC_final(ctxt, digest);

  /* Generate the response */
  response = aprintf(
      ""%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"",
           userp, digest[0], digest[1], digest[2], digest[3], digest[4],
           digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
           digest[11], digest[12], digest[13], digest[14], digest[15]);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_346.cpp,"[4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 2, 86, 0, 0, 5, 5, 0, 0, 2, 20, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 17, 0, 4, 4, 0, 0, 10, 0, 0, 7, 0, 36, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_346.cpp,31,"[""string"", ""const char *"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""Curl_HMAC_init_ret"", ""!"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,636,-1,"snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_347.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_347.cpp,"{
  CURLcode result = CURLE_OK;
  size_t i;
  MD5_context *ctxt;
  char *response = NULL;
  unsigned char digest[MD5_DIGEST_LEN];
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  char nonce[64];
  char realm[128];
  char algorithm[64];
  char qop_options[64];
  int qop_values;
  char cnonce[33];
  unsigned int entropy[4];
  char nonceCount[] = ""00000001"";
  char method[]     = ""AUTHENTICATE"";
  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  char *spn         = NULL;

  /* Decode the challange message */
  result = sasl_decode_digest_md5_message(chlg64, nonce, sizeof(nonce),
                                          realm, sizeof(realm),
                                          algorithm, sizeof(algorithm),
                                          qop_options, sizeof(qop_options));
  if(result)
    return result;

  /* We only support md5 sessions */
  if(strcmp(algorithm, ""md5-sess"") != 0)
    return CURLE_BAD_CONTENT_ENCODING;

  /* Get the qop-values from the qop-options */
  result = sasl_digest_get_qop_values(qop_options, &qop_values);
  if(result)
    return result;

  /* We only support auth quality-of-protection */
  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
    return CURLE_BAD_CONTENT_ENCODING;

  /* Generate 16 bytes of random data */
  entropy[0] = Curl_rand(data);
  entropy[1] = Curl_rand(data);
  entropy[2] = Curl_rand(data);
  entropy[3] = Curl_rand(data);

  /* Convert the random data into a 32 byte hex string */
  snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);

  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) userp,
                  curlx_uztoui(strlen(userp)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) realm,
                  curlx_uztoui(strlen(realm)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
                  curlx_uztoui(strlen(passwdp)));
  Curl_MD5_final(ctxt, digest);

  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_final(ctxt, digest);

  /* Convert calculated 16 octet hex into 32 bytes string */
  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate our SPN */
  spn = Curl_sasl_build_spn(service, realm);
  if(!spn)
    return CURLE_OUT_OF_MEMORY;

  /* Calculate H(A2) */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) method,
                  curlx_uztoui(strlen(method)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) spn,
                  curlx_uztoui(strlen(spn)));
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Now calculate the response hash */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
                  curlx_uztoui(strlen(nonceCount)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) qop,
                  curlx_uztoui(strlen(qop)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate the response */
  response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  free(spn);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_347.cpp,"[10, 0, 3, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 24, 357, 0, 0, 19, 19, 0, 0, 9, 63, 0, 0, 0, 0, 3, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 276, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 27, 0, 13, 10, 0, 0, 77, 0, 0, 49, 0, 167, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_347.cpp,55,"[""char *"", ""unkown"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""bool"", ""!"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,669,-1,"snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_348.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_348.cpp,"snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_348.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_348.cpp,88,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""macro"", ""<""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,692,-1,"snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_349.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_349.cpp,"snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_349.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_349.cpp,111,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""macro"", ""<""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,722,-1,"snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_350.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_350.cpp,"snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_350.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_350.cpp,141,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""macro"", ""<""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,725,-1,"response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_351.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_351.cpp,"{
  CURLcode result = CURLE_OK;
  size_t i;
  MD5_context *ctxt;
  char *response = NULL;
  unsigned char digest[MD5_DIGEST_LEN];
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
  char nonce[64];
  char realm[128];
  char algorithm[64];
  char qop_options[64];
  int qop_values;
  char cnonce[33];
  unsigned int entropy[4];
  char nonceCount[] = ""00000001"";
  char method[]     = ""AUTHENTICATE"";
  char qop[]        = DIGEST_QOP_VALUE_STRING_AUTH;
  char *spn         = NULL;

  /* Decode the challange message */
  result = sasl_decode_digest_md5_message(chlg64, nonce, sizeof(nonce),
                                          realm, sizeof(realm),
                                          algorithm, sizeof(algorithm),
                                          qop_options, sizeof(qop_options));
  if(result)
    return result;

  /* We only support md5 sessions */
  if(strcmp(algorithm, ""md5-sess"") != 0)
    return CURLE_BAD_CONTENT_ENCODING;

  /* Get the qop-values from the qop-options */
  result = sasl_digest_get_qop_values(qop_options, &qop_values);
  if(result)
    return result;

  /* We only support auth quality-of-protection */
  if(!(qop_values & DIGEST_QOP_VALUE_AUTH))
    return CURLE_BAD_CONTENT_ENCODING;

  /* Generate 16 bytes of random data */
  entropy[0] = Curl_rand(data);
  entropy[1] = Curl_rand(data);
  entropy[2] = Curl_rand(data);
  entropy[3] = Curl_rand(data);

  /* Convert the random data into a 32 byte hex string */
  snprintf(cnonce, sizeof(cnonce), ""%08x%08x%08x%08x"",
           entropy[0], entropy[1], entropy[2], entropy[3]);

  /* So far so good, now calculate A1 and H(A1) according to RFC 2831 */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) userp,
                  curlx_uztoui(strlen(userp)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) realm,
                  curlx_uztoui(strlen(realm)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) passwdp,
                  curlx_uztoui(strlen(passwdp)));
  Curl_MD5_final(ctxt, digest);

  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  Curl_MD5_update(ctxt, (const unsigned char *) digest, MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_final(ctxt, digest);

  /* Convert calculated 16 octet hex into 32 bytes string */
  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA1_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate our SPN */
  spn = Curl_sasl_build_spn(service, realm);
  if(!spn)
    return CURLE_OUT_OF_MEMORY;

  /* Calculate H(A2) */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) method,
                  curlx_uztoui(strlen(method)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) spn,
                  curlx_uztoui(strlen(spn)));
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&HA2_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Now calculate the response hash */
  ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
  if(!ctxt) {
    free(spn);

    return CURLE_OUT_OF_MEMORY;
  }

  Curl_MD5_update(ctxt, (const unsigned char *) HA1_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) nonce,
                  curlx_uztoui(strlen(nonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) nonceCount,
                  curlx_uztoui(strlen(nonceCount)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) cnonce,
                  curlx_uztoui(strlen(cnonce)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);
  Curl_MD5_update(ctxt, (const unsigned char *) qop,
                  curlx_uztoui(strlen(qop)));
  Curl_MD5_update(ctxt, (const unsigned char *) "":"", 1);

  Curl_MD5_update(ctxt, (const unsigned char *) HA2_hex, 2 * MD5_DIGEST_LEN);
  Curl_MD5_final(ctxt, digest);

  for(i = 0; i < MD5_DIGEST_LEN; i++)
    snprintf(&resp_hash_hex[2 * i], 3, ""%02x"", digest[i]);

  /* Generate the response */
  response = aprintf(""username=\""%s\"",realm=\""%s\"",nonce=\""%s\"",""
                     ""cnonce=\""%s\"",nc=\""%s\"",digest-uri=\""%s\"",response=%s,""
                     ""qop=%s"",
                     userp, realm, nonce,
                     cnonce, nonceCount, spn, resp_hash_hex, qop);
  free(spn);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_351.cpp,"[10, 0, 3, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 24, 357, 0, 0, 19, 19, 0, 0, 9, 63, 0, 0, 0, 0, 3, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 276, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 27, 0, 13, 10, 0, 0, 77, 0, 0, 49, 0, 167, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_351.cpp,144,[],"[""Curl_MD5_init_ret"", ""!"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,921,-1,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_352.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_352.cpp,"{
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_352.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 23, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 8, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_352.cpp,25,"[""char *"", ""unkown"", ""string"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret""]","[""member""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,956,-1,"tmp = aprintf(""%s:%s:%s"", ha1, digest->nonce, digest->cnonce);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_354.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_354.cpp,"{
    /* nonce and cnonce are OUTSIDE the hash */
    tmp = aprintf(""%s:%s:%s"", ha1, digest->nonce, digest->cnonce);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* convert on non-ASCII machines */
    Curl_md5it(md5buf, (unsigned char *)tmp);
    free(tmp);
    sasl_digest_md5_to_ascii(md5buf, ha1);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_354.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 5, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_354.cpp,60,"[""string"", ""unsigned char *"", ""member"", ""member""]","[""member"", ""macro"", ""==""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,979,-1,"md5this = (unsigned char *)aprintf(""%s:%s"", request, uripath);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_355.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_355.cpp,"{
  CURLcode result;
  unsigned char md5buf[16]; /* 16 bytes/128 bits */
  unsigned char request_digest[33];
  unsigned char *md5this;
  unsigned char ha1[33];/* 32 digits and 1 zero byte */
  unsigned char ha2[33];/* 32 digits and 1 zero byte */
  char cnoncebuf[33];
  char *cnonce = NULL;
  size_t cnonce_sz = 0;
  char *userp_quoted;
  char *response = NULL;
  char *tmp = NULL;

  if(!digest->nc)
    digest->nc = 1;

  if(!digest->cnonce) {
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));

    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                                &cnonce, &cnonce_sz);
    if(result)
      return result;

    digest->cnonce = cnonce;
  }

  /*
    if the algorithm is ""MD5"" or unspecified (which then defaults to MD5):

    A1 = unq(username-value) "":"" unq(realm-value) "":"" passwd

    if the algorithm is ""MD5-sess"" then:

    A1 = H( unq(username-value) "":"" unq(realm-value) "":"" passwd )
         "":"" unq(nonce-value) "":"" unq(cnonce-value)
  */

  md5this = (unsigned char *)
    aprintf(""%s:%s:%s"", userp, digest->realm, passwdp);
  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  free(md5this);
  sasl_digest_md5_to_ascii(md5buf, ha1);

  if(digest->algo == CURLDIGESTALGO_MD5SESS) {
    /* nonce and cnonce are OUTSIDE the hash */
    tmp = aprintf(""%s:%s:%s"", ha1, digest->nonce, digest->cnonce);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* convert on non-ASCII machines */
    Curl_md5it(md5buf, (unsigned char *)tmp);
    free(tmp);
    sasl_digest_md5_to_ascii(md5buf, ha1);
  }

  /*
    If the ""qop"" directive's value is ""auth"" or is unspecified, then A2 is:

      A2       = Method "":"" digest-uri-value

          If the ""qop"" value is ""auth-int"", then A2 is:

      A2       = Method "":"" digest-uri-value "":"" H(entity-body)

    (The ""Method"" value is the HTTP request method as specified in section
    5.1.1 of RFC 2616)
  */

  md5this = (unsigned char *)aprintf(""%s:%s"", request, uripath);

  if(digest->qop && Curl_raw_equal(digest->qop, ""auth-int"")) {
    /* We don't support auth-int for PUT or POST at the moment.
       TODO: replace md5 of empty string with entity-body for PUT/POST */
    unsigned char *md5this2 = (unsigned char *)
      aprintf(""%s:%s"", md5this, ""d41d8cd98f00b204e9800998ecf8427e"");
    free(md5this);
    md5this = md5this2;
  }

  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  free(md5this);
  sasl_digest_md5_to_ascii(md5buf, ha2);

  if(digest->qop) {
    md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       digest->nc,
                                       digest->cnonce,
                                       digest->qop,
                                       ha2);
  }
  else {
    md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       ha2);
  }

  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  free(md5this);
  sasl_digest_md5_to_ascii(md5buf, request_digest);

  /* for test case 64 (snooped from a Mozilla 1.3a request)

    Authorization: Digest username=""testuser"", realm=""testrealm"", \
    nonce=""1053604145"", uri=""/64"", response=""c55f7f30d83d774a3d2dcacf725abaca""

    Digest parameters are all quoted strings.  Username which is provided by
    the user will need double quotes and backslashes within it escaped.  For
    the other fields, this shouldn't be an issue.  realm, nonce, and opaque
    are copied as is from the server, escapes and all.  cnonce is generated
    with web-safe characters.  uri is already percent encoded.  nc is 8 hex
    characters.  algorithm and qop with standard values only contain web-safe
    chracters.
  */
  userp_quoted = sasl_digest_string_quoted(userp);
  if(!userp_quoted)
    return CURLE_OUT_OF_MEMORY;

  if(digest->qop) {
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""cnonce=\""%s\"", ""
                       ""nc=%08x, ""
                       ""qop=%s, ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       digest->cnonce,
                       digest->nc,
                       digest->qop,
                       request_digest);

    if(Curl_raw_equal(digest->qop, ""auth""))
      digest->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0
                       padded which tells to the server how many times you are
                       using the same nonce in the qop=auth mode */
  }
  else {
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       request_digest);
  }
  free(userp_quoted);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Add the optional fields */
  if(digest->opaque) {
    /* Append the opaque */
    tmp = aprintf(""%s, opaque=\""%s\"""", response, digest->opaque);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }

  if(digest->algorithm) {
    /* Append the algorithm */
    tmp = aprintf(""%s, algorithm=\""%s\"""", response, digest->algorithm);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }

  /* Return the output */
  *outptr = response;
  *outlen = strlen(response);

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_355.cpp,"[18, 0, 0, 0, 0, 0, 10, 0, 0, 0, 21, 0, 0, 0, 0, 287, 0, 0, 13, 13, 0, 0, 5, 32, 0, 0, 0, 0, 6, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 180, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 5, 0, 18, 18, 2, 0, 42, 0, 0, 40, 0, 102, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_355.cpp,83,"[""string"", ""const unsigned char *"", ""const unsigned char *""]","[""aprintf_ret"", ""!"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,999,-1,"md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       digest->nc,
                                       digest->cnonce,
                                       digest->qop,
                                       ha2);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_357.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_357.cpp,"{
    md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       digest->nc,
                                       digest->cnonce,
                                       digest->qop,
                                       ha2);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_357.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_357.cpp,103,"[""string"", ""unsigned char *"", ""member"", ""member"", ""member"", ""member"", ""unsigned char *""]","[""member""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,1008,-1,"md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       ha2);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_358.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_358.cpp,"{
    md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       digest->nonce,
                                       ha2);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_358.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_358.cpp,112,"[""string"", ""unsigned char *"", ""member"", ""unsigned char *""]","[""member"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,1040,-1,"response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""cnonce=\""%s\"", ""
                       ""nc=%08x, ""
                       ""qop=%s, ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       digest->cnonce,
                       digest->nc,
                       digest->qop,
                       request_digest);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_359.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_359.cpp,"{
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""cnonce=\""%s\"", ""
                       ""nc=%08x, ""
                       ""qop=%s, ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       digest->cnonce,
                       digest->nc,
                       digest->qop,
                       request_digest);

    if(Curl_raw_equal(digest->qop, ""auth""))
      digest->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0
                       padded which tells to the server how many times you are
                       using the same nonce in the qop=auth mode */
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_359.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_359.cpp,144,[],"[""member""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,1063,-1,"response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       request_digest);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_360.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_360.cpp,"{
    response = aprintf(""username=\""%s\"", ""
                       ""realm=\""%s\"", ""
                       ""nonce=\""%s\"", ""
                       ""uri=\""%s\"", ""
                       ""response=\""%s\"""",
                       userp_quoted,
                       digest->realm,
                       digest->nonce,
                       uripath,
                       request_digest);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_360.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_360.cpp,167,[],"[""member"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,1081,-1,"tmp = aprintf(""%s, opaque=\""%s\"""", response, digest->opaque);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_361.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_361.cpp,"{
    /* Append the opaque */
    tmp = aprintf(""%s, opaque=\""%s\"""", response, digest->opaque);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_361.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_361.cpp,185,"[""string"", ""char *"", ""member""]","[""member""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,1091,-1,"tmp = aprintf(""%s, algorithm=\""%s\"""", response, digest->algorithm);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_362.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_362.cpp,"{
    /* Append the algorithm */
    tmp = aprintf(""%s, algorithm=\""%s\"""", response, digest->algorithm);
    free(response);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;

    response = tmp;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_362.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_362.cpp,195,"[""string"", ""aprintf_ret"", ""member""]","[""member""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/curl_sasl.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_190.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_190.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_449.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_449.cpp,56,57,1180,-1,"xoauth = aprintf(""user=%s\1auth=Bearer %s\1\1"", user, bearer);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_363.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_363.cpp,"{
  CURLcode result = CURLE_OK;
  char *xoauth = NULL;

  /* Generate the message */
  xoauth = aprintf(""user=%s\1auth=Bearer %s\1\1"", user, bearer);
  if(!xoauth)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the reply */
  result = Curl_base64_encode(data, xoauth, strlen(xoauth), outptr, outlen);

  free(xoauth);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_363.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 23, 0, 0, 2, 2, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 3, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_363.cpp,9,"[""string"", ""const char *"", ""const char *""]",[]
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/easy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_191.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_191.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_191.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_450.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_450.cpp,269,271,273,277,"DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));","DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_364.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_364.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_364.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_364.cpp,51,"[""fprintf_ret""]","[""libssh2_init_ret""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/file.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_192.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_192.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_192.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_453.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_453.cpp,479,486,490,494,"snprintf(buf, BUFSIZE-1,
               ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
               Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
               tm->tm_mday,
               Curl_month[tm->tm_mon],
               tm->tm_year + 1900,
               tm->tm_hour,
               tm->tm_min,
               tm->tm_sec);","snprintf(buf, BUFSIZE-1,
             ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
             Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
             tm->tm_mday,
             Curl_month[tm->tm_mon],
             tm->tm_year + 1900,
             tm->tm_hour,
             tm->tm_min,
             tm->tm_sec);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_365.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_365.cpp,"{
      time_t filetime = (time_t)statbuf.st_mtime;
      struct tm buffer;
      const struct tm *tm = &buffer;
      result = Curl_gmtime(filetime, &buffer);
      if(result)
        return result;

      /* format: ""Tue, 15 Nov 1994 12:45:26 GMT"" */
      snprintf(buf, BUFSIZE-1,
               ""Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"",
               Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
               tm->tm_mday,
               Curl_month[tm->tm_mon],
               tm->tm_year + 1900,
               tm->tm_hour,
               tm->tm_min,
               tm->tm_sec);
      result = Curl_client_write(conn, CLIENTWRITE_BOTH, buf, 0);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_365.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 57, 0, 0, 3, 3, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 1, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 2, 2, 1, 0, 3, 0, 0, 3, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_365.cpp,74,"[""char *"", ""macro"", ""string"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""Curl_gmtime_ret"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/http_negotiate.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_196.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_196.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_196.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_457.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_457.cpp,22,22,172,109,"userp = aprintf(""%sAuthorization: Negotiate %s\r\n"", proxy ? ""Proxy-"" : """",
                  encoded);","userp = aprintf(""%sAuthorization: Negotiate %s\r\n"", proxy ? ""Proxy-"" : """",
                  base64);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_366.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_366.cpp,"struct negotiatedata *neg_ctx = proxy?&conn->data->state.proxyneg:
    &conn->data->state.negotiate;
  char *encoded = NULL;
  size_t len = 0;
  char *userp;
  CURLcode result;
  OM_uint32 discard_st;

  result = Curl_base64_encode(conn->data,
                              neg_ctx->output_token.value,
                              neg_ctx->output_token.length,
                              &encoded, &len);
  if(result) {
    gss_release_buffer(&discard_st, &neg_ctx->output_token);
    neg_ctx->output_token.value = NULL;
    neg_ctx->output_token.length = 0;
    return result;
  }

  if(!encoded || !len) {
    gss_release_buffer(&discard_st, &neg_ctx->output_token);
    neg_ctx->output_token.value = NULL;
    neg_ctx->output_token.length = 0;
    return CURLE_REMOTE_ACCESS_DENIED;
  }

  userp = aprintf(""%sAuthorization: Negotiate %s\r\n"", proxy ? ""Proxy-"" : """",
                  encoded)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_366.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 76, 0, 0, 6, 6, 0, 0, 3, 6, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 1, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 3, 3, 1, 0, 4, 0, 0, 8, 0, 12, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_366.cpp,28,[],"[""char *"", ""!"", ""size_t"", ""!"", ""||"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/http_proxy.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_197.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_197.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_197.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_458.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_458.cpp,150,160,160,172,,"(""%s%s%s:%hu"";",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_368.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_368.cpp,"f(!hostheader) {
          Curl_add_buffer_free(req_buffer);
          return CURLE_OUT_OF_MEMORY;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_368.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_368.cpp,68,[],"[""Curl_http_output_auth_ret"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/mprintf.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_198.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_198.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_198.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_459.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_459.cpp,32,32,32,32,"the project that
 * took on from here is named 'Trio' and you find more details on the trio web
 * page at http://daniel.haxx.se/trio/
 */;","the project that
 * took on from here is named 'Trio' and you find more details on the trio web
 * page at https://daniel.haxx.se/projects/trio/
 */;",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_369.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_369.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_369.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_369.cpp,0,[],[]
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/tftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_202.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_202.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_202.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_464.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_464.cpp,494,494,509,511,"snprintf( buf, sizeof(buf), ""%d"", state->requested_blksize );","snprintf(buf, sizeof(buf), ""%d"", state->requested_blksize);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_370.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_370.cpp,"{

  case TFTP_EVENT_INIT:    /* Send the first packet out */
  case TFTP_EVENT_TIMEOUT: /* Resend the first packet out */
    /* Increment the retry counter, quit if over the limit */
    state->retries++;
    if(state->retries>state->retry_max) {
      state->error = TFTP_ERR_NORESPONSE;
      state->state = TFTP_STATE_FIN;
      return result;
    }

    if(data->set.upload) {
      /* If we are uploading, send an WRQ */
      setpacketevent(&state->spacket, TFTP_EVENT_WRQ);
      state->conn->data->req.upload_fromhere =
        (char *)state->spacket.data+4;
      if(data->state.infilesize != -1)
        Curl_pgrsSetUploadSize(data, data->state.infilesize);
    }
    else {
      /* If we are downloading, send an RRQ */
      setpacketevent(&state->spacket, TFTP_EVENT_RRQ);
    }
    /* As RFC3617 describes the separator slash is not actually part of the
       file name so we skip the always-present first letter of the path
       string. */
    filename = curl_easy_unescape(data, &state->conn->data->state.path[1], 0,
                                  NULL);
    if(!filename)
      return CURLE_OUT_OF_MEMORY;

    snprintf((char *)state->spacket.data+2,
             state->blksize,
             ""%s%c%s%c"", filename, '\0',  mode, '\0');
    sbytes = 4 + strlen(filename) + strlen(mode);

    /* add tsize option */
    if(data->set.upload && (data->state.infilesize != -1))
      snprintf(buf, sizeof(buf), ""%"" CURL_FORMAT_CURL_OFF_T,
               data->state.infilesize);
    else
      strcpy(buf, ""0""); /* the destination is large enough */

    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_TSIZE);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf);
    /* add blksize option */
    snprintf( buf, sizeof(buf), ""%d"", state->requested_blksize );
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_BLKSIZE);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf );

    /* add timeout option */
    snprintf( buf, sizeof(buf), ""%d"", state->retry_time);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_INTERVAL);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf );

    /* the typecase for the 3rd argument is mostly for systems that do
       not have a size_t argument, like older unixes that want an 'int' */
    senddata = sendto(state->sockfd, (void *)state->spacket.data,
                      (SEND_TYPE_ARG3)sbytes, 0,
                      state->conn->ip_addr->ai_addr,
                      state->conn->ip_addr->ai_addrlen);
    if(senddata != (ssize_t)sbytes) {
      failf(data, ""%s"", Curl_strerror(state->conn, SOCKERRNO));
    }
    free(filename);
    break;

  case TFTP_EVENT_OACK:
    if(data->set.upload) {
      result = tftp_connect_for_tx(state, event);
    }
    else {
      result = tftp_connect_for_rx(state, event);
    }
    break;

  case TFTP_EVENT_ACK: /* Connected for transmit */
    result = tftp_connect_for_tx(state, event);
    break;

  case TFTP_EVENT_DATA: /* Connected for receive */
    result = tftp_connect_for_rx(state, event);
    break;

  case TFTP_EVENT_ERROR:
    state->state = TFTP_STATE_FIN;
    break;

  default:
    failf(state->conn->data, ""tftp_send_first: internal error"");
    break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_370.cpp,"[7, 0, 0, 0, 6, 0, 2, 0, 6, 1, 11, 0, 0, 0, 0, 246, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 127, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 7, 3, 0, 29, 0, 0, 29, 0, 82, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_370.cpp,64,"[""char *"", ""unkown"", ""string"", ""member""]","[""curl_easy_unescape_ret"", ""!"", ""!""]"
202adcfe056681109fe61569ecdb3bd69f0b4f97,"curl 2016-08-03 (f2cb3a01)

Code extracted from:

    https://github.com/bagder/curl.git

at commit f2cb3a01192d36395d16acec6cdb93446ca6fd45 (curl-7_50_1).",[],lib/tftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_202.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_202.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_202.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_464.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_464.cpp,494,494,517,519,"snprintf( buf, sizeof(buf), ""%d"", state->retry_time);","snprintf(buf, sizeof(buf), ""%d"", state->retry_time);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_371.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_371.cpp,"{

  case TFTP_EVENT_INIT:    /* Send the first packet out */
  case TFTP_EVENT_TIMEOUT: /* Resend the first packet out */
    /* Increment the retry counter, quit if over the limit */
    state->retries++;
    if(state->retries>state->retry_max) {
      state->error = TFTP_ERR_NORESPONSE;
      state->state = TFTP_STATE_FIN;
      return result;
    }

    if(data->set.upload) {
      /* If we are uploading, send an WRQ */
      setpacketevent(&state->spacket, TFTP_EVENT_WRQ);
      state->conn->data->req.upload_fromhere =
        (char *)state->spacket.data+4;
      if(data->state.infilesize != -1)
        Curl_pgrsSetUploadSize(data, data->state.infilesize);
    }
    else {
      /* If we are downloading, send an RRQ */
      setpacketevent(&state->spacket, TFTP_EVENT_RRQ);
    }
    /* As RFC3617 describes the separator slash is not actually part of the
       file name so we skip the always-present first letter of the path
       string. */
    filename = curl_easy_unescape(data, &state->conn->data->state.path[1], 0,
                                  NULL);
    if(!filename)
      return CURLE_OUT_OF_MEMORY;

    snprintf((char *)state->spacket.data+2,
             state->blksize,
             ""%s%c%s%c"", filename, '\0',  mode, '\0');
    sbytes = 4 + strlen(filename) + strlen(mode);

    /* add tsize option */
    if(data->set.upload && (data->state.infilesize != -1))
      snprintf(buf, sizeof(buf), ""%"" CURL_FORMAT_CURL_OFF_T,
               data->state.infilesize);
    else
      strcpy(buf, ""0""); /* the destination is large enough */

    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_TSIZE);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf);
    /* add blksize option */
    snprintf( buf, sizeof(buf), ""%d"", state->requested_blksize );
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_BLKSIZE);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf );

    /* add timeout option */
    snprintf( buf, sizeof(buf), ""%d"", state->retry_time);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes,
                              TFTP_OPTION_INTERVAL);
    sbytes += tftp_option_add(state, sbytes,
                              (char *)state->spacket.data+sbytes, buf );

    /* the typecase for the 3rd argument is mostly for systems that do
       not have a size_t argument, like older unixes that want an 'int' */
    senddata = sendto(state->sockfd, (void *)state->spacket.data,
                      (SEND_TYPE_ARG3)sbytes, 0,
                      state->conn->ip_addr->ai_addr,
                      state->conn->ip_addr->ai_addrlen);
    if(senddata != (ssize_t)sbytes) {
      failf(data, ""%s"", Curl_strerror(state->conn, SOCKERRNO));
    }
    free(filename);
    break;

  case TFTP_EVENT_OACK:
    if(data->set.upload) {
      result = tftp_connect_for_tx(state, event);
    }
    else {
      result = tftp_connect_for_rx(state, event);
    }
    break;

  case TFTP_EVENT_ACK: /* Connected for transmit */
    result = tftp_connect_for_tx(state, event);
    break;

  case TFTP_EVENT_DATA: /* Connected for receive */
    result = tftp_connect_for_rx(state, event);
    break;

  case TFTP_EVENT_ERROR:
    state->state = TFTP_STATE_FIN;
    break;

  default:
    failf(state->conn->data, ""tftp_send_first: internal error"");
    break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_371.cpp,"[7, 0, 0, 0, 6, 0, 2, 0, 6, 1, 11, 0, 0, 0, 0, 246, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 127, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 7, 3, 0, 29, 0, 0, 29, 0, 82, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_371.cpp,72,"[""char *"", ""unkown"", ""string"", ""member""]","[""curl_easy_unescape_ret"", ""!"", ""!""]"
d38fc22132db1b82fad1ef5b8a7f5e030c71a90f,Merge branch 'update-libarchive' into release,[],Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_205.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_205.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_205.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_468.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_468.cpp,2127,2127,2129,2130,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Invalid zero dictionary size"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_372.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_372.cpp,"(!__archive_ppmd7_functions.Ppmd7_Alloc(&rar->ppmd7_context,
        rar->dictionary_size, &g_szalloc))
      {
        archive_set_error(&a->archive, ENOMEM,
                          ""Out of memory"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_372.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_372.cpp,68,"[""member"", ""member"", ""unkown""]","[""bool"", ""int"", ""=="", ""!""]"
d38fc22132db1b82fad1ef5b8a7f5e030c71a90f,Merge branch 'update-libarchive' into release,[],Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_205.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_205.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_205.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_470.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_470.cpp,2900,2905,2906,2912,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_373.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_373.cpp,"{
  int windowoffs, firstpart;
  struct rar *rar = (struct rar *)(a->format->data);

  if (!rar->unp_buffer)
  {
    if ((rar->unp_buffer = malloc(rar->unp_buffer_size)) == NULL)
    {
      archive_set_error(&a->archive, ENOMEM,
                        ""Unable to allocate memory for uncompressed data."");
      return (ARCHIVE_FATAL);
    }
  }

  windowoffs = lzss_offset_for_position(&rar->lzss, startpos);
  if(windowoffs + length <= lzss_size(&rar->lzss))
    memcpy(&rar->unp_buffer[rar->unp_offset], &rar->lzss.window[windowoffs],
           length);
  else
  {
    firstpart = lzss_size(&rar->lzss) - windowoffs;
    if (firstpart < 0) {
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");
      return (ARCHIVE_FATAL);
    }
    if (firstpart < length) {
      memcpy(&rar->unp_buffer[rar->unp_offset],
             &rar->lzss.window[windowoffs], firstpart);
      memcpy(&rar->unp_buffer[rar->unp_offset + firstpart],
             &rar->lzss.window[0], length - firstpart);
    } else
      memcpy(&rar->unp_buffer[rar->unp_offset],
             &rar->lzss.window[windowoffs], length);
  }
  rar->unp_offset += length;
  if (rar->unp_offset >= rar->unp_buffer_size)
    *buffer = rar->unp_buffer;
  else
    *buffer = NULL;
  return (ARCHIVE_OK);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_373.cpp,"[6, 0, 0, 0, 0, 0, 3, 0, 0, 0, 10, 0, 0, 0, 0, 126, 0, 0, 2, 3, 0, 0, 1, 4, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 6, 6, 3, 0, 10, 0, 0, 11, 0, 23, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_373.cpp,38,[],"[""lzss_offset_for_position_ret"", ""lzss_size_ret"", ""<=""]"
52f58267c311550db83f4a9430f378e730bd3d6b,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2016-06-19 (139d0576)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_207.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_207.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_207.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_472.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_472.cpp,2127,2127,2129,2130,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Invalid zero dictionary size"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_374.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_374.cpp,"(!__archive_ppmd7_functions.Ppmd7_Alloc(&rar->ppmd7_context,
        rar->dictionary_size, &g_szalloc))
      {
        archive_set_error(&a->archive, ENOMEM,
                          ""Out of memory"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_374.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_374.cpp,68,"[""member"", ""member"", ""unkown""]","[""int"", ""int"", ""=="", ""!""]"
52f58267c311550db83f4a9430f378e730bd3d6b,"Merge branch 'upstream-LibArchive' into update-libarchive

* upstream-LibArchive:
  LibArchive 2016-06-19 (139d0576)",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_207.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_207.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_207.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_474.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_474.cpp,2900,2905,2906,2912,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_375.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_375.cpp,"{
  int windowoffs, firstpart;
  struct rar *rar = (struct rar *)(a->format->data);

  if (!rar->unp_buffer)
  {
    if ((rar->unp_buffer = malloc(rar->unp_buffer_size)) == NULL)
    {
      archive_set_error(&a->archive, ENOMEM,
                        ""Unable to allocate memory for uncompressed data."");
      return (ARCHIVE_FATAL);
    }
  }

  windowoffs = lzss_offset_for_position(&rar->lzss, startpos);
  if(windowoffs + length <= lzss_size(&rar->lzss))
    memcpy(&rar->unp_buffer[rar->unp_offset], &rar->lzss.window[windowoffs],
           length);
  else
  {
    firstpart = lzss_size(&rar->lzss) - windowoffs;
    if (firstpart < 0) {
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");
      return (ARCHIVE_FATAL);
    }
    if (firstpart < length) {
      memcpy(&rar->unp_buffer[rar->unp_offset],
             &rar->lzss.window[windowoffs], firstpart);
      memcpy(&rar->unp_buffer[rar->unp_offset + firstpart],
             &rar->lzss.window[0], length - firstpart);
    } else
      memcpy(&rar->unp_buffer[rar->unp_offset],
             &rar->lzss.window[windowoffs], length);
  }
  rar->unp_offset += length;
  if (rar->unp_offset >= rar->unp_buffer_size)
    *buffer = rar->unp_buffer;
  else
    *buffer = NULL;
  return (ARCHIVE_OK);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_375.cpp,"[6, 0, 0, 0, 0, 0, 3, 0, 0, 0, 10, 0, 0, 0, 0, 126, 0, 0, 2, 3, 0, 0, 1, 4, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 6, 6, 3, 0, 10, 0, 0, 11, 0, 23, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_375.cpp,38,[],"[""lzss_size_ret"", ""null"", ""<"", ""!""]"
2b94d71d8850d68b677d5653c698371528344a10,"LibArchive 2016-06-19 (139d0576)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 139d0576b51a253732a5ab1f66805dffbf8b00af (master).",[],libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_209.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_209.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_209.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_476.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_476.cpp,2127,2127,2129,2130,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                          ""Invalid zero dictionary size"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_376.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_376.cpp,"(!__archive_ppmd7_functions.Ppmd7_Alloc(&rar->ppmd7_context,
        rar->dictionary_size, &g_szalloc))
      {
        archive_set_error(&a->archive, ENOMEM,
                          ""Out of memory"");
        return (ARCHIVE_FATAL);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_376.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_376.cpp,68,"[""member"", ""member"", ""unkown""]","[""bool"", ""int"", ""=="", ""!""]"
2b94d71d8850d68b677d5653c698371528344a10,"LibArchive 2016-06-19 (139d0576)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 139d0576b51a253732a5ab1f66805dffbf8b00af (master).",[],libarchive/archive_read_support_format_rar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_209.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_209.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_209.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_478.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_478.cpp,2900,2905,2906,2912,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_377.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_377.cpp,"{
  int windowoffs, firstpart;
  struct rar *rar = (struct rar *)(a->format->data);

  if (!rar->unp_buffer)
  {
    if ((rar->unp_buffer = malloc(rar->unp_buffer_size)) == NULL)
    {
      archive_set_error(&a->archive, ENOMEM,
                        ""Unable to allocate memory for uncompressed data."");
      return (ARCHIVE_FATAL);
    }
  }

  windowoffs = lzss_offset_for_position(&rar->lzss, startpos);
  if(windowoffs + length <= lzss_size(&rar->lzss))
    memcpy(&rar->unp_buffer[rar->unp_offset], &rar->lzss.window[windowoffs],
           length);
  else
  {
    firstpart = lzss_size(&rar->lzss) - windowoffs;
    if (firstpart < 0) {
      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                        ""Bad RAR file data"");
      return (ARCHIVE_FATAL);
    }
    if (firstpart < length) {
      memcpy(&rar->unp_buffer[rar->unp_offset],
             &rar->lzss.window[windowoffs], firstpart);
      memcpy(&rar->unp_buffer[rar->unp_offset + firstpart],
             &rar->lzss.window[0], length - firstpart);
    } else
      memcpy(&rar->unp_buffer[rar->unp_offset],
             &rar->lzss.window[windowoffs], length);
  }
  rar->unp_offset += length;
  if (rar->unp_offset >= rar->unp_buffer_size)
    *buffer = rar->unp_buffer;
  else
    *buffer = NULL;
  return (ARCHIVE_OK);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_377.cpp,"[6, 0, 0, 0, 0, 0, 3, 0, 0, 0, 10, 0, 0, 0, 0, 126, 0, 0, 2, 3, 0, 0, 1, 4, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 6, 6, 3, 0, 10, 0, 0, 11, 0, 23, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_377.cpp,38,[],"[""lzss_size_ret"", ""null"", ""<"", ""!""]"
fb4791b37ccea1f38b8625b31df952408ab942f3,"cmCoreTryCompile: Refactor forwarding of variables to test project

De-duplicate the logic that constructs the cmake `-D` flag used to pass
variables into the test project cache.  Also subsume variables that were
propagated by generating `set()` commands in the project and pass them
as cache entries instead.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_211.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_211.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_211.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_480.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_480.cpp,383,405,446,-1,"fprintf(fout, ""set(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_378.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_378.cpp,"{
      fprintf(fout, ""set(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_378.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_378.cpp,424,"[""FILE *"", ""string""]","[""this -> Makefile -> GetDefinition_ret"", ""null"", ""!=""]"
fb4791b37ccea1f38b8625b31df952408ab942f3,"cmCoreTryCompile: Refactor forwarding of variables to test project

De-duplicate the logic that constructs the cmake `-D` flag used to pass
variables into the test project cache.  Also subsume variables that were
propagated by generating `set()` commands in the project and pass them
as cache entries instead.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_211.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_211.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_211.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_480.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_480.cpp,383,405,450,-1,"fprintf(fout, ""set(CMAKE_LINK_SEARCH_START_STATIC \""%s\"")\n"", lssDef);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_379.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_379.cpp,"{
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_START_STATIC \""%s\"")\n"", lssDef);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_379.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_379.cpp,428,"[""FILE *"", ""string"", ""unkown""]","[""unkown"", ""this -> Makefile -> GetDefinition_ret""]"
fb4791b37ccea1f38b8625b31df952408ab942f3,"cmCoreTryCompile: Refactor forwarding of variables to test project

De-duplicate the logic that constructs the cmake `-D` flag used to pass
variables into the test project cache.  Also subsume variables that were
propagated by generating `set()` commands in the project and pass them
as cache entries instead.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_211.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_211.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_211.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_480.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_480.cpp,383,405,454,-1,"fprintf(fout, ""set(CMAKE_LINK_SEARCH_END_STATIC \""%s\"")\n"", lssDef);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_380.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_380.cpp,"{
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_END_STATIC \""%s\"")\n"", lssDef);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_380.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_380.cpp,432,"[""FILE *"", ""string"", ""unkown""]","[""unkown"", ""this -> Makefile -> GetDefinition_ret""]"
fb4791b37ccea1f38b8625b31df952408ab942f3,"cmCoreTryCompile: Refactor forwarding of variables to test project

De-duplicate the logic that constructs the cmake `-D` flag used to pass
variables into the test project cache.  Also subsume variables that were
propagated by generating `set()` commands in the project and pass them
as cache entries instead.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_211.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_211.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_211.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_481.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_481.cpp,461,451,465,-1,"fprintf(fout, ""set(CMAKE_ENABLE_EXPORTS %s)\n"", ee);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_381.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_381.cpp,"{
      fprintf(fout, ""set(CMAKE_ENABLE_EXPORTS %s)\n"", ee);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_381.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_381.cpp,443,"[""FILE *"", ""string"", ""unkown""]","[""unkown"", ""this -> Makefile -> GetDefinition_ret""]"
e4a92dab3fa81a893a52dd1a774db79c4363fda6,"cmListFileLexer: Update to flex 2.6

Revise the documented modifications we need to make to the
flex-generated source file according to the needs of the new version.
Update our own implementation to avoid warnings with flex types.",[],Source/cmListFileLexer.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_212.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_212.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_212.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_489.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_489.cpp,2091,2156,2102,2167,"yy_fatal_error( ""cmListFileLexer_yyset_lineno called with no buffer"" , yyscanner);","YY_FATAL_ERROR( ""cmListFileLexer_yyset_lineno called with no buffer"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_383.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_383.cpp,"yy_fatal_error( ""cmListFileLexer_yyset_lineno called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_383.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_383.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
e4a92dab3fa81a893a52dd1a774db79c4363fda6,"cmListFileLexer: Update to flex 2.6

Revise the documented modifications we need to make to the
flex-generated source file according to the needs of the new version.
Update our own implementation to avoid warnings with flex types.",[],Source/cmListFileLexer.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_212.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_212.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_212.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_489.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_489.cpp,2091,2156,2117,2182,"yy_fatal_error( ""cmListFileLexer_yyset_column called with no buffer"" , yyscanner);","YY_FATAL_ERROR( ""cmListFileLexer_yyset_column called with no buffer"" );",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_384.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_384.cpp,"yy_fatal_error( ""cmListFileLexer_yyset_column called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_384.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_384.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_219.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_219.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_219.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_502.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_502.cpp,1939,1939,1942,-1,"fprintf(stderr, ""unknowntag_start:%s\n"", name);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_385.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_385.cpp,"{
	struct unknown_tag *tag;

#if DEBUG
	fprintf(stderr, ""unknowntag_start:%s\n"", name);
#endif
	tag = malloc(sizeof(*tag));
	if (tag == NULL) {
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}
	tag->next = xar->unknowntags;
	archive_string_init(&(tag->name));
	archive_strcpy(&(tag->name), name);
	if (xar->unknowntags == NULL) {
		xar->xmlsts_unknown = xar->xmlsts;
		xar->xmlsts = UNKNOWN;
	}
	xar->unknowntags = tag;
	return (ARCHIVE_OK);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_385.cpp,"[3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 53, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 25, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 0, 6, 0, 0, 9, 0, 11, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_385.cpp,6,"[""unkown"", ""string"", ""const char *""]",[]
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_219.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_219.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_219.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_503.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_503.cpp,1951,1948,1954,1951,,"fprintf(stderr, ""UNKNOWNTAG_START:%s\n"", name);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_386.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_386.cpp,"{
		xar->xmlsts_unknown = xar->xmlsts;
		xar->xmlsts = UNKNOWN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_386.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_386.cpp,18,[],"[""member"", ""null"", ""==""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_219.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_219.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_219.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_504.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_504.cpp,1963,1963,1966,1974,"fprintf(stderr, ""unknowntag_end:%s\n"", name);","fprintf(stderr, ""UNKNOWNTAG_END:%s\n"", name);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_387.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_387.cpp,"{
	struct unknown_tag *tag;

#if DEBUG
	fprintf(stderr, ""unknowntag_end:%s\n"", name);
#endif
	tag = xar->unknowntags;
	if (tag == NULL || name == NULL)
		return;
	if (strcmp(tag->name.s, name) == 0) {
		xar->unknowntags = tag->next;
		archive_string_free(&(tag->name));
		free(tag);
		if (xar->unknowntags == NULL)
			xar->xmlsts = xar->xmlsts_unknown;
	}
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_387.cpp,"[4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 44, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 3, 0, 0, 4, 0, 0, 6, 0, 7, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_387.cpp,6,"[""unkown"", ""string"", ""const char *""]",[]
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_220.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_220.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_220.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_507.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_507.cpp,810,825,814,829,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_388.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_388.cpp,"((zip_entry->mode & AE_IFMT) == AE_IFIFO) {
		zip_entry->mode &= ~ AE_IFMT;
		zip_entry->mode |= AE_IFREG;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_388.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_388.cpp,108,[],"[""unkown"", ""macro"", ""=="", ""!""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_220.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_220.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_220.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_508.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_508.cpp,843,868,847,878,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");","archive_wstrcat(&s, wp);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_389.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_389.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_389.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_389.cpp,141,"[""member"", ""macro"", ""string""]","[""__archive_read_ahead_ret"", ""null"", ""==""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_220.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_220.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_220.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_510.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_510.cpp,2746,2803,2749,2806,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Mac metadata is too large: %jd > 4M bytes"",
		    (intmax_t)rsrc->compressed_size);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_391.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_391.cpp,"{
	struct zip *zip = (struct zip *)a->format->data;
	unsigned char *metadata, *mp;
	int64_t offset = archive_filter_bytes(&a->archive, 0);
	size_t remaining_bytes, metadata_bytes;
	ssize_t hsize;
	int ret = ARCHIVE_OK, eof;

	switch(rsrc->compression) {
	case 0:  /* No compression. */
#ifdef HAVE_ZLIB_H
	case 8: /* Deflate compression. */
#endif
		break;
	default: /* Unsupported compression. */
		/* Return a warning. */
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported ZIP compression method (%s)"",
		    compression_name(rsrc->compression));
		/* We can't decompress this entry, but we will
		 * be able to skip() it and try the next entry. */
		return (ARCHIVE_WARN);
	}

	if (rsrc->uncompressed_size > (4 * 1024 * 1024)) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Mac metadata is too large: %jd > 4M bytes"",
		    (intmax_t)rsrc->uncompressed_size);
		return (ARCHIVE_WARN);
	}

	metadata = malloc((size_t)rsrc->uncompressed_size);
	if (metadata == NULL) {
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for Mac metadata"");
		return (ARCHIVE_FATAL);
	}

	if (offset < rsrc->local_header_offset)
		__archive_read_consume(a, rsrc->local_header_offset - offset);
	else if (offset != rsrc->local_header_offset) {
		__archive_read_seek(a, rsrc->local_header_offset, SEEK_SET);
	}

	hsize = zip_get_local_file_header_size(a, 0);
	__archive_read_consume(a, hsize);

	remaining_bytes = (size_t)rsrc->compressed_size;
	metadata_bytes = (size_t)rsrc->uncompressed_size;
	mp = metadata;
	eof = 0;
	while (!eof && remaining_bytes) {
		const unsigned char *p;
		ssize_t bytes_avail;
		size_t bytes_used;

		p = __archive_read_ahead(a, 1, &bytes_avail);
		if (p == NULL) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated ZIP file header"");
			ret = ARCHIVE_WARN;
			goto exit_mac_metadata;
		}
		if ((size_t)bytes_avail > remaining_bytes)
			bytes_avail = remaining_bytes;
		switch(rsrc->compression) {
		case 0:  /* No compression. */
			memcpy(mp, p, bytes_avail);
			bytes_used = (size_t)bytes_avail;
			metadata_bytes -= bytes_used;
			mp += bytes_used;
			if (metadata_bytes == 0)
				eof = 1;
			break;
#ifdef HAVE_ZLIB_H
		case 8: /* Deflate compression. */
		{
			int r;

			ret = zip_deflate_init(a, zip);
			if (ret != ARCHIVE_OK)
				goto exit_mac_metadata;
			zip->stream.next_in =
			    (Bytef *)(uintptr_t)(const void *)p;
			zip->stream.avail_in = (uInt)bytes_avail;
			zip->stream.total_in = 0;
			zip->stream.next_out = mp;
			zip->stream.avail_out = (uInt)metadata_bytes;
			zip->stream.total_out = 0;

			r = inflate(&zip->stream, 0);
			switch (r) {
			case Z_OK:
				break;
			case Z_STREAM_END:
				eof = 1;
				break;
			case Z_MEM_ERROR:
				archive_set_error(&a->archive, ENOMEM,
				    ""Out of memory for ZIP decompression"");
				ret = ARCHIVE_FATAL;
				goto exit_mac_metadata;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""ZIP decompression failed (%d)"", r);
				ret = ARCHIVE_FATAL;
				goto exit_mac_metadata;
			}
			bytes_used = zip->stream.total_in;
			metadata_bytes -= zip->stream.total_out;
			mp += zip->stream.total_out;
			break;
		}
#endif
		default:
			bytes_used = 0;
			break;
		}
		__archive_read_consume(a, bytes_used);
		remaining_bytes -= bytes_used;
	}
	archive_entry_copy_mac_metadata(entry, metadata,
	    (size_t)rsrc->uncompressed_size - metadata_bytes);

exit_mac_metadata:
	__archive_read_seek(a, offset, SEEK_SET);
	zip->decompress_init = 0;
	free(metadata);
	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_391.cpp,"[8, 1, 0, 0, 6, 0, 4, 3, 7, 3, 14, 1, 4, 0, 2, 262, 0, 0, 10, 13, 0, 0, 3, 25, 0, 0, 0, 0, 4, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 12, 8, 0, 0, 21, 0, 0, 44, 1, 53, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_391.cpp,34,"[""member""]","[""member"", ""int"", "">"", ""!""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_write_add_filter_lz4.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_221.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_221.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_221.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_512.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_512.cpp,160,160,166,170,,"archive_set_error(f->archive, ARCHIVE_ERRNO_PROGRAMMER,
				""High compression not included in this build"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_392.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_392.cpp,"{
		if (value == NULL || !(value[0] >= '1' && value[0] <= '9') ||
		    value[1] != '\0')
			return (ARCHIVE_WARN);
		data->compression_level = value[0] - '0';
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_392.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_392.cpp,11,[],"[""const char *"", ""null"", ""=="", ""member"", ""char"", "">="", ""member"", ""char"", ""<="", ""&&"", ""!"", ""member"", ""char"", ""!="", ""||"", ""||"", ""!""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_222.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_514.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_514.cpp,231,233,232,234,"archive_set_error(f->archive, EINVAL,
		    ""Can't initialise filter"");","archive_set_error(f->archive, EINVAL,
		    ""Can't launch external program: %s"", cmd);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_393.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_393.cpp,"{
		archive_set_error(f->archive, EINVAL,
		    ""Can't initialise filter"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_393.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_393.cpp,26,"[""member"", ""macro"", ""string""]","[""__archive_create_child_ret"", ""int"", ""==""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_222.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_515.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_515.cpp,242,244,243,245,"archive_set_error(f->archive, EINVAL,
		    ""Can't initialise filter"");","archive_set_error(f->archive, EINVAL,
		    ""Can't launch external program: %s"", cmd);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_394.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_394.cpp,"{
		close(data->child_stdin);
		data->child_stdin = -1;
		close(data->child_stdout);
		data->child_stdout = -1;
		archive_set_error(f->archive, EINVAL,
		    ""Can't initialise filter"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_394.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_394.cpp,37,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_222.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_516.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_516.cpp,334,336,335,337,"archive_set_error(f->archive, EIO,
			    ""Can't write to filter"");","archive_set_error(f->archive, EIO,
			    ""Can't write to program: %s"", data->program_name);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_395.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_395.cpp,"{
			archive_set_error(f->archive, EIO,
			    ""Can't write to filter"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_395.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_395.cpp,14,"[""member"", ""macro"", ""string""]","[""child_write_ret"", ""int"", ""=="", ""child_write_ret"", ""null"", ""=="", ""||""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_222.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_517.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_517.cpp,373,375,374,376,"archive_set_error(f->archive, errno,
			    ""Read from filter failed unexpectedly."");","archive_set_error(f->archive, errno,
			    ""Error reading from program: %s"", data->program_name);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_396.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_396.cpp,"{
			archive_set_error(f->archive, errno,
			    ""Read from filter failed unexpectedly."");
			ret = ARCHIVE_FATAL;
			goto cleanup;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_396.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_396.cpp,26,"[""member"", ""unkown"", ""constant""]","[""read_ret"", ""int"", ""==""]"
e9bc469b2abcd0ad4cb3ad4bfefbc5ef1f559c1b,"Merge branch 'upstream-LibArchive' into update-libarchive

Resolve conflicts in C code by taking their side.  Resolve conflicts in
CMake code by integrating the changes.",[],Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_222.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_222.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_518.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_518.cpp,403,405,404,406,"archive_set_error(f->archive, EIO,
		    ""Filter exited with failure."");","archive_set_error(f->archive, EIO,
		    ""Error closing program: %s"", data->program_name);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_397.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_397.cpp,"{
		archive_set_error(f->archive, EIO,
		    ""Filter exited with failure."");
		ret = ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_397.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_397.cpp,56,"[""member"", ""macro"", ""constant""]","[""int"", ""null"", ""!=""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_read_support_format_xar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_228.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_228.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_228.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_527.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_527.cpp,1939,1939,1942,-1,"fprintf(stderr, ""unknowntag_start:%s\n"", name);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_398.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_398.cpp,"{
	struct unknown_tag *tag;

#if DEBUG
	fprintf(stderr, ""unknowntag_start:%s\n"", name);
#endif
	tag = malloc(sizeof(*tag));
	if (tag == NULL) {
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}
	tag->next = xar->unknowntags;
	archive_string_init(&(tag->name));
	archive_strcpy(&(tag->name), name);
	if (xar->unknowntags == NULL) {
		xar->xmlsts_unknown = xar->xmlsts;
		xar->xmlsts = UNKNOWN;
	}
	xar->unknowntags = tag;
	return (ARCHIVE_OK);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_398.cpp,"[3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 53, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 25, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 0, 6, 0, 0, 9, 0, 11, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_398.cpp,6,"[""unkown"", ""string"", ""const char *""]",[]
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_read_support_format_xar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_228.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_228.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_228.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_528.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_528.cpp,1951,1948,1954,1951,,"fprintf(stderr, ""UNKNOWNTAG_START:%s\n"", name);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_399.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_399.cpp,"{
		xar->xmlsts_unknown = xar->xmlsts;
		xar->xmlsts = UNKNOWN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_399.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_399.cpp,18,[],"[""member"", ""null"", ""==""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_read_support_format_xar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_228.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_228.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_228.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_529.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_529.cpp,1963,1963,1966,1974,"fprintf(stderr, ""unknowntag_end:%s\n"", name);","fprintf(stderr, ""UNKNOWNTAG_END:%s\n"", name);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_400.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_400.cpp,"{
	struct unknown_tag *tag;

#if DEBUG
	fprintf(stderr, ""unknowntag_end:%s\n"", name);
#endif
	tag = xar->unknowntags;
	if (tag == NULL || name == NULL)
		return;
	if (strcmp(tag->name.s, name) == 0) {
		xar->unknowntags = tag->next;
		archive_string_free(&(tag->name));
		free(tag);
		if (xar->unknowntags == NULL)
			xar->xmlsts = xar->xmlsts_unknown;
	}
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_400.cpp,"[4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 44, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 3, 0, 0, 4, 0, 0, 6, 0, 7, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_400.cpp,6,"[""unkown"", ""string"", ""const char *""]",[]
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_229.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_229.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_229.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_532.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_532.cpp,810,825,814,829,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_401.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_401.cpp,"((zip_entry->mode & AE_IFMT) == AE_IFIFO) {
		zip_entry->mode &= ~ AE_IFMT;
		zip_entry->mode |= AE_IFREG;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_401.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_401.cpp,108,[],"[""archive_entry_copy_pathname_l_ret"", ""null"", ""!="", ""!""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_229.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_229.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_229.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_533.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_533.cpp,843,868,847,878,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");","archive_wstrcat(&s, wp);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_402.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_402.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_402.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_402.cpp,141,"[""member"", ""macro"", ""string""]","[""__archive_read_ahead_ret"", ""null"", ""==""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_229.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_229.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_229.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_534.cpp,2726,2778,2728,2781,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Malformed OS X metadata entry: inconsistent size"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_403.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_403.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_403.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_403.cpp,0,[],[]
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_229.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_229.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_229.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_535.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_535.cpp,2746,2803,2749,2806,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Mac metadata is too large: %jd > 4M bytes"",
		    (intmax_t)rsrc->compressed_size);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_404.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_404.cpp,"{
	struct zip *zip = (struct zip *)a->format->data;
	unsigned char *metadata, *mp;
	int64_t offset = archive_filter_bytes(&a->archive, 0);
	size_t remaining_bytes, metadata_bytes;
	ssize_t hsize;
	int ret = ARCHIVE_OK, eof;

	switch(rsrc->compression) {
	case 0:  /* No compression. */
#ifdef HAVE_ZLIB_H
	case 8: /* Deflate compression. */
#endif
		break;
	default: /* Unsupported compression. */
		/* Return a warning. */
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported ZIP compression method (%s)"",
		    compression_name(rsrc->compression));
		/* We can't decompress this entry, but we will
		 * be able to skip() it and try the next entry. */
		return (ARCHIVE_WARN);
	}

	if (rsrc->uncompressed_size > (4 * 1024 * 1024)) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Mac metadata is too large: %jd > 4M bytes"",
		    (intmax_t)rsrc->uncompressed_size);
		return (ARCHIVE_WARN);
	}

	metadata = malloc((size_t)rsrc->uncompressed_size);
	if (metadata == NULL) {
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for Mac metadata"");
		return (ARCHIVE_FATAL);
	}

	if (offset < rsrc->local_header_offset)
		__archive_read_consume(a, rsrc->local_header_offset - offset);
	else if (offset != rsrc->local_header_offset) {
		__archive_read_seek(a, rsrc->local_header_offset, SEEK_SET);
	}

	hsize = zip_get_local_file_header_size(a, 0);
	__archive_read_consume(a, hsize);

	remaining_bytes = (size_t)rsrc->compressed_size;
	metadata_bytes = (size_t)rsrc->uncompressed_size;
	mp = metadata;
	eof = 0;
	while (!eof && remaining_bytes) {
		const unsigned char *p;
		ssize_t bytes_avail;
		size_t bytes_used;

		p = __archive_read_ahead(a, 1, &bytes_avail);
		if (p == NULL) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated ZIP file header"");
			ret = ARCHIVE_WARN;
			goto exit_mac_metadata;
		}
		if ((size_t)bytes_avail > remaining_bytes)
			bytes_avail = remaining_bytes;
		switch(rsrc->compression) {
		case 0:  /* No compression. */
			memcpy(mp, p, bytes_avail);
			bytes_used = (size_t)bytes_avail;
			metadata_bytes -= bytes_used;
			mp += bytes_used;
			if (metadata_bytes == 0)
				eof = 1;
			break;
#ifdef HAVE_ZLIB_H
		case 8: /* Deflate compression. */
		{
			int r;

			ret = zip_deflate_init(a, zip);
			if (ret != ARCHIVE_OK)
				goto exit_mac_metadata;
			zip->stream.next_in =
			    (Bytef *)(uintptr_t)(const void *)p;
			zip->stream.avail_in = (uInt)bytes_avail;
			zip->stream.total_in = 0;
			zip->stream.next_out = mp;
			zip->stream.avail_out = (uInt)metadata_bytes;
			zip->stream.total_out = 0;

			r = inflate(&zip->stream, 0);
			switch (r) {
			case Z_OK:
				break;
			case Z_STREAM_END:
				eof = 1;
				break;
			case Z_MEM_ERROR:
				archive_set_error(&a->archive, ENOMEM,
				    ""Out of memory for ZIP decompression"");
				ret = ARCHIVE_FATAL;
				goto exit_mac_metadata;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""ZIP decompression failed (%d)"", r);
				ret = ARCHIVE_FATAL;
				goto exit_mac_metadata;
			}
			bytes_used = zip->stream.total_in;
			metadata_bytes -= zip->stream.total_out;
			mp += zip->stream.total_out;
			break;
		}
#endif
		default:
			bytes_used = 0;
			break;
		}
		__archive_read_consume(a, bytes_used);
		remaining_bytes -= bytes_used;
	}
	archive_entry_copy_mac_metadata(entry, metadata,
	    (size_t)rsrc->uncompressed_size - metadata_bytes);

exit_mac_metadata:
	__archive_read_seek(a, offset, SEEK_SET);
	zip->decompress_init = 0;
	free(metadata);
	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_404.cpp,"[8, 1, 0, 0, 6, 0, 4, 3, 7, 3, 14, 1, 4, 0, 2, 262, 0, 0, 10, 13, 0, 0, 3, 25, 0, 0, 0, 0, 4, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 12, 8, 0, 0, 21, 0, 0, 44, 1, 53, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_404.cpp,34,"[""member""]","[""member"", ""int"", "">"", ""!""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_write_add_filter_lz4.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_230.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_230.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_230.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_537.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_537.cpp,160,160,166,170,,"archive_set_error(f->archive, ARCHIVE_ERRNO_PROGRAMMER,
				""High compression not included in this build"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_405.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_405.cpp,"{
		if (value == NULL || !(value[0] >= '1' && value[0] <= '9') ||
		    value[1] != '\0')
			return (ARCHIVE_WARN);
		data->compression_level = value[0] - '0';
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_405.cpp,"[1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_405.cpp,11,[],"[""const char *"", ""null"", ""=="", ""member"", ""char"", "">="", ""member"", ""char"", ""<="", ""&&"", ""!"", ""member"", ""char"", ""!="", ""||"", ""||"", ""!""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_231.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_539.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_539.cpp,231,233,232,234,"archive_set_error(f->archive, EINVAL,
		    ""Can't initialise filter"");","archive_set_error(f->archive, EINVAL,
		    ""Can't launch external program: %s"", cmd);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_406.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_406.cpp,"{
		archive_set_error(f->archive, EINVAL,
		    ""Can't initialise filter"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_406.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_406.cpp,26,"[""member"", ""macro"", ""string""]","[""__archive_create_child_ret"", ""int"", ""==""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_231.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_540.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_540.cpp,242,244,243,245,"archive_set_error(f->archive, EINVAL,
		    ""Can't initialise filter"");","archive_set_error(f->archive, EINVAL,
		    ""Can't launch external program: %s"", cmd);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_407.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_407.cpp,"{
		close(data->child_stdin);
		data->child_stdin = -1;
		close(data->child_stdout);
		data->child_stdout = -1;
		archive_set_error(f->archive, EINVAL,
		    ""Can't initialise filter"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_407.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_407.cpp,37,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_231.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_541.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_541.cpp,334,336,335,337,"archive_set_error(f->archive, EIO,
			    ""Can't write to filter"");","archive_set_error(f->archive, EIO,
			    ""Can't write to program: %s"", data->program_name);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_408.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_408.cpp,"{
			archive_set_error(f->archive, EIO,
			    ""Can't write to filter"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_408.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_408.cpp,14,"[""member"", ""macro"", ""string""]","[""child_write_ret"", ""int"", ""=="", ""child_write_ret"", ""null"", ""=="", ""||""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_231.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_542.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_542.cpp,373,375,374,376,"archive_set_error(f->archive, errno,
			    ""Read from filter failed unexpectedly."");","archive_set_error(f->archive, errno,
			    ""Error reading from program: %s"", data->program_name);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_409.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_409.cpp,"{
			archive_set_error(f->archive, errno,
			    ""Read from filter failed unexpectedly."");
			ret = ARCHIVE_FATAL;
			goto cleanup;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_409.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_409.cpp,26,"[""member"", ""unkown"", ""constant""]","[""read_ret"", ""int"", ""==""]"
501345e470bb9c5b0cb61aff84bd50ffdd95b92d,"LibArchive 2016-04-30 (167e97be)

Code extracted from:

    https://github.com/libarchive/libarchive.git

at commit 167e97be1d35c1e0947d768adbf94712244aad6b (master).",[],libarchive/archive_write_add_filter_program.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_231.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_231.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_543.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_543.cpp,403,405,404,406,"archive_set_error(f->archive, EIO,
		    ""Filter exited with failure."");","archive_set_error(f->archive, EIO,
		    ""Error closing program: %s"", data->program_name);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_410.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_410.cpp,"{
		archive_set_error(f->archive, EIO,
		    ""Filter exited with failure."");
		ret = ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_410.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_410.cpp,56,"[""member"", ""macro"", ""constant""]","[""int"", ""null"", ""!=""]"
7f1bd9fe6910f7633d98dec018cc01331a46b87e,"try_compile: Add option to control type of target

Create a `CMAKE_TRY_COMPILE_TARGET_TYPE` option to specify use
of `add_library(... STATIC ...)` for the generated test project.
This will be useful for cross-compiling toolchains that cannot
link a binary without custom flags or scripts.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_233.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_545.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_545.cpp,486,515,489,-1,"f(fout, ""set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_411.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_411.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile);

    // Choose sources.
    if(!useSources)
      {
      sources.push_back(argv[2]);
      }

    // Detect languages to enable.
    cmGlobalGenerator* gg = this->Makefile->GetGlobalGenerator();
    std::set<std::string> testLangs;
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      std::string ext = cmSystemTools::GetFilenameLastExtension(*si);
      std::string lang = gg->GetLanguageFromExtension(ext.c_str());
      if(!lang.empty())
        {
        testLangs.insert(lang);
        }
      else
        {
        std::ostringstream err;
        err << ""Unknown extension \"""" << ext << ""\"" for file\n""
            << ""  "" << *si << ""\n""
            << ""try_compile() works only for enabled languages.  ""
            << ""Currently these are:\n  "";
        std::vector<std::string> langs;
        gg->GetEnabledLanguages(langs);
        err << cmJoin(langs, "" "");
        err << ""\nSee project() command to enable other languages."";
        this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
        return -1;
        }
      }

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = cmsys::SystemTools::Fopen(outFileName,""w"");
    if (!fout)
      {
      std::ostringstream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""set(CMAKE_MODULE_PATH \""%s\"")\n"", def);
      }

    std::string projectLangs;
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      projectLangs += "" "" + *li;
      std::string rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
      std::string rulesOverrideLang = rulesOverrideBase + ""_"" + *li;
      if(const char* rulesOverridePath =
         this->Makefile->GetDefinition(rulesOverrideLang))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }
      else if(const char* rulesOverridePath2 =
              this->Makefile->GetDefinition(rulesOverrideBase))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }
      }
    fprintf(fout, ""project(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());
    fprintf(fout, ""set(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags);
      fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              cmOutputConverter::EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""set(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }
    switch(this->Makefile->GetPolicyStatus(cmPolicies::CMP0056))
      {
      case cmPolicies::WARN:
        if(this->Makefile->PolicyOptionalWarningEnabled(
             ""CMAKE_POLICY_WARNING_CMP0056""))
          {
          std::ostringstream w;
          w << cmPolicies::GetPolicyWarning(cmPolicies::CMP0056) << ""\n""
            ""For compatibility with older versions of CMake, try_compile ""
            ""is not honoring caller link flags (e.g. CMAKE_EXE_LINKER_FLAGS) ""
            ""in the test project.""
            ;
          this->Makefile->IssueMessage(cmake::AUTHOR_WARNING, w.str());
          }
      case cmPolicies::OLD:
        // OLD behavior is to do nothing.
        break;
      case cmPolicies::REQUIRED_IF_USED:
      case cmPolicies::REQUIRED_ALWAYS:
        this->Makefile->IssueMessage(
          cmake::FATAL_ERROR,
          cmPolicies::GetRequiredPolicyError(cmPolicies::CMP0056)
          );
      case cmPolicies::NEW:
        // NEW behavior is to pass linker flags.
        {
        const char* exeLinkFlags =
          this->Makefile->GetDefinition(""CMAKE_EXE_LINKER_FLAGS"");
        fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS %s)\n"",
                cmOutputConverter::EscapeForCMake(
                    exeLinkFlags ? exeLinkFlags : """").c_str());
        } break;
      }
    fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS \""${CMAKE_EXE_LINKER_FLAGS}""
            "" ${EXE_LINKER_FLAGS}\"")\n"");
    fprintf(fout, ""include_directories(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""set(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""link_directories(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (!compileDefs.empty())
      {
      fprintf(fout, ""add_definitions(%s)\n"", cmJoin(compileDefs, "" "").c_str());
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTC_%05x"",
            cmSystemTools::RandomSeed() & 0xFFFFF);
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg(gg, targets, this->Makefile);
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetConfig(this->Makefile->GetSafeDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURES to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURES first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if (const char *cxxDef
              = this->Makefile->GetDefinition(""CMAKE_CXX_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_TARGET="";
      flag += cxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *cDef
                = this->Makefile->GetDefinition(""CMAKE_C_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_TARGET="";
      flag += cDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcxxDef = this->Makefile->GetDefinition(
                                  ""CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcDef = this->Makefile->GetDefinition(
                                    ""CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *rootDef
              = this->Makefile->GetDefinition(""CMAKE_SYSROOT""))
      {
      std::string flag=""-DCMAKE_SYSROOT="";
      flag += rootDef;
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""set(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }
    if (const char *lssDef = this->Makefile->GetDefinition(
        ""CMAKE_LINK_SEARCH_START_STATIC""))
      {
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_START_STATIC \""%s\"")\n"", lssDef);
      }
    if (const char *lssDef = this->Makefile->GetDefinition(
        ""CMAKE_LINK_SEARCH_END_STATIC""))
      {
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_END_STATIC \""%s\"")\n"", lssDef);
      }

    /* Set the appropriate policy information for ENABLE_EXPORTS */
    fprintf(fout, ""cmake_policy(SET CMP0065 %s)\n"",
       this->Makefile->GetPolicyStatus(cmPolicies::CMP0065) ==
         cmPolicies::NEW ? ""NEW"" : ""OLD"");
    if(const char *ee = this->Makefile->GetDefinition(
        ""CMAKE_ENABLE_EXPORTS""))
      {
      fprintf(fout, ""set(CMAKE_ENABLE_EXPORTS %s)\n"", ee);
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""add_executable(%s"", targetName.c_str());
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }
    fprintf(fout, "")\n"");
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",
              targetName.c_str());
      }
    else
      {
      fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName.c_str(),
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_411.cpp,"[25, 0, 4, 0, 2, 0, 3, 1, 5, 0, 34, 0, 0, 0, 13, 679, 0, 0, 27, 44, 1, 0, 39, 101, 0, 0, 0, 0, 15, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260, 3, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 45, 0, 1, 0, 33, 28, 5, 0, 134, 3, 0, 68, 2, 156, 0, 4, 0, 0, 4, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_411.cpp,468,"[""FILE *"", ""string"", ""this -> BinaryDirectory . c_str_ret""]","[""tcfg . GenerateImportFile_ret"", ""!""]"
7f1bd9fe6910f7633d98dec018cc01331a46b87e,"try_compile: Add option to control type of target

Create a `CMAKE_TRY_COMPILE_TARGET_TYPE` option to specify use
of `add_library(... STATIC ...)` for the generated test project.
This will be useful for cross-compiling toolchains that cannot
link a binary without custom flags or scripts.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_233.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_545.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_545.cpp,486,515,492,517,"fprintf(fout, ""add_executable(%s"", targetName.c_str());","(targetType == cmState::EXECUTABLE)
      {
      /* Put the executable at a known location (for COPY_FILE).  */
      fprintf(fout, ""set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
              this->BinaryDirectory.c_str());
      /* Create the actual executable.  */
      fprintf(fout, ""add_executable(%s"", targetName.c_str());
      };",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_412.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_412.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile);

    // Choose sources.
    if(!useSources)
      {
      sources.push_back(argv[2]);
      }

    // Detect languages to enable.
    cmGlobalGenerator* gg = this->Makefile->GetGlobalGenerator();
    std::set<std::string> testLangs;
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      std::string ext = cmSystemTools::GetFilenameLastExtension(*si);
      std::string lang = gg->GetLanguageFromExtension(ext.c_str());
      if(!lang.empty())
        {
        testLangs.insert(lang);
        }
      else
        {
        std::ostringstream err;
        err << ""Unknown extension \"""" << ext << ""\"" for file\n""
            << ""  "" << *si << ""\n""
            << ""try_compile() works only for enabled languages.  ""
            << ""Currently these are:\n  "";
        std::vector<std::string> langs;
        gg->GetEnabledLanguages(langs);
        err << cmJoin(langs, "" "");
        err << ""\nSee project() command to enable other languages."";
        this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
        return -1;
        }
      }

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = cmsys::SystemTools::Fopen(outFileName,""w"");
    if (!fout)
      {
      std::ostringstream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""set(CMAKE_MODULE_PATH \""%s\"")\n"", def);
      }

    std::string projectLangs;
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      projectLangs += "" "" + *li;
      std::string rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
      std::string rulesOverrideLang = rulesOverrideBase + ""_"" + *li;
      if(const char* rulesOverridePath =
         this->Makefile->GetDefinition(rulesOverrideLang))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }
      else if(const char* rulesOverridePath2 =
              this->Makefile->GetDefinition(rulesOverrideBase))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }
      }
    fprintf(fout, ""project(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());
    fprintf(fout, ""set(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags);
      fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              cmOutputConverter::EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""set(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }
    switch(this->Makefile->GetPolicyStatus(cmPolicies::CMP0056))
      {
      case cmPolicies::WARN:
        if(this->Makefile->PolicyOptionalWarningEnabled(
             ""CMAKE_POLICY_WARNING_CMP0056""))
          {
          std::ostringstream w;
          w << cmPolicies::GetPolicyWarning(cmPolicies::CMP0056) << ""\n""
            ""For compatibility with older versions of CMake, try_compile ""
            ""is not honoring caller link flags (e.g. CMAKE_EXE_LINKER_FLAGS) ""
            ""in the test project.""
            ;
          this->Makefile->IssueMessage(cmake::AUTHOR_WARNING, w.str());
          }
      case cmPolicies::OLD:
        // OLD behavior is to do nothing.
        break;
      case cmPolicies::REQUIRED_IF_USED:
      case cmPolicies::REQUIRED_ALWAYS:
        this->Makefile->IssueMessage(
          cmake::FATAL_ERROR,
          cmPolicies::GetRequiredPolicyError(cmPolicies::CMP0056)
          );
      case cmPolicies::NEW:
        // NEW behavior is to pass linker flags.
        {
        const char* exeLinkFlags =
          this->Makefile->GetDefinition(""CMAKE_EXE_LINKER_FLAGS"");
        fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS %s)\n"",
                cmOutputConverter::EscapeForCMake(
                    exeLinkFlags ? exeLinkFlags : """").c_str());
        } break;
      }
    fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS \""${CMAKE_EXE_LINKER_FLAGS}""
            "" ${EXE_LINKER_FLAGS}\"")\n"");
    fprintf(fout, ""include_directories(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""set(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""link_directories(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (!compileDefs.empty())
      {
      fprintf(fout, ""add_definitions(%s)\n"", cmJoin(compileDefs, "" "").c_str());
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTC_%05x"",
            cmSystemTools::RandomSeed() & 0xFFFFF);
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg(gg, targets, this->Makefile);
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetConfig(this->Makefile->GetSafeDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURES to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURES first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if (const char *cxxDef
              = this->Makefile->GetDefinition(""CMAKE_CXX_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_TARGET="";
      flag += cxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *cDef
                = this->Makefile->GetDefinition(""CMAKE_C_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_TARGET="";
      flag += cDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcxxDef = this->Makefile->GetDefinition(
                                  ""CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcDef = this->Makefile->GetDefinition(
                                    ""CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *rootDef
              = this->Makefile->GetDefinition(""CMAKE_SYSROOT""))
      {
      std::string flag=""-DCMAKE_SYSROOT="";
      flag += rootDef;
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""set(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }
    if (const char *lssDef = this->Makefile->GetDefinition(
        ""CMAKE_LINK_SEARCH_START_STATIC""))
      {
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_START_STATIC \""%s\"")\n"", lssDef);
      }
    if (const char *lssDef = this->Makefile->GetDefinition(
        ""CMAKE_LINK_SEARCH_END_STATIC""))
      {
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_END_STATIC \""%s\"")\n"", lssDef);
      }

    /* Set the appropriate policy information for ENABLE_EXPORTS */
    fprintf(fout, ""cmake_policy(SET CMP0065 %s)\n"",
       this->Makefile->GetPolicyStatus(cmPolicies::CMP0065) ==
         cmPolicies::NEW ? ""NEW"" : ""OLD"");
    if(const char *ee = this->Makefile->GetDefinition(
        ""CMAKE_ENABLE_EXPORTS""))
      {
      fprintf(fout, ""set(CMAKE_ENABLE_EXPORTS %s)\n"", ee);
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""add_executable(%s"", targetName.c_str());
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }
    fprintf(fout, "")\n"");
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",
              targetName.c_str());
      }
    else
      {
      fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName.c_str(),
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_412.cpp,"[25, 0, 4, 0, 2, 0, 3, 1, 5, 0, 34, 0, 0, 0, 13, 679, 0, 0, 27, 44, 1, 0, 39, 101, 0, 0, 0, 0, 15, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260, 3, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 45, 0, 1, 0, 33, 28, 5, 0, 134, 3, 0, 68, 2, 156, 0, 4, 0, 0, 4, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_412.cpp,471,"[""FILE *"", ""string"", ""targetName . c_str_ret""]","[""tcfg . GenerateImportFile_ret"", ""!""]"
7f1bd9fe6910f7633d98dec018cc01331a46b87e,"try_compile: Add option to control type of target

Create a `CMAKE_TRY_COMPILE_TARGET_TYPE` option to specify use
of `add_library(... STATIC ...)` for the generated test project.
This will be useful for cross-compiling toolchains that cannot
link a binary without custom flags or scripts.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_233.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_545.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_545.cpp,486,515,492,520,,"fprintf(fout, ""set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
              this->BinaryDirectory.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_413.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_413.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile);

    // Choose sources.
    if(!useSources)
      {
      sources.push_back(argv[2]);
      }

    // Detect languages to enable.
    cmGlobalGenerator* gg = this->Makefile->GetGlobalGenerator();
    std::set<std::string> testLangs;
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      std::string ext = cmSystemTools::GetFilenameLastExtension(*si);
      std::string lang = gg->GetLanguageFromExtension(ext.c_str());
      if(!lang.empty())
        {
        testLangs.insert(lang);
        }
      else
        {
        std::ostringstream err;
        err << ""Unknown extension \"""" << ext << ""\"" for file\n""
            << ""  "" << *si << ""\n""
            << ""try_compile() works only for enabled languages.  ""
            << ""Currently these are:\n  "";
        std::vector<std::string> langs;
        gg->GetEnabledLanguages(langs);
        err << cmJoin(langs, "" "");
        err << ""\nSee project() command to enable other languages."";
        this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
        return -1;
        }
      }

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = cmsys::SystemTools::Fopen(outFileName,""w"");
    if (!fout)
      {
      std::ostringstream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""set(CMAKE_MODULE_PATH \""%s\"")\n"", def);
      }

    std::string projectLangs;
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      projectLangs += "" "" + *li;
      std::string rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
      std::string rulesOverrideLang = rulesOverrideBase + ""_"" + *li;
      if(const char* rulesOverridePath =
         this->Makefile->GetDefinition(rulesOverrideLang))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }
      else if(const char* rulesOverridePath2 =
              this->Makefile->GetDefinition(rulesOverrideBase))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }
      }
    fprintf(fout, ""project(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());
    fprintf(fout, ""set(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags);
      fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              cmOutputConverter::EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""set(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }
    switch(this->Makefile->GetPolicyStatus(cmPolicies::CMP0056))
      {
      case cmPolicies::WARN:
        if(this->Makefile->PolicyOptionalWarningEnabled(
             ""CMAKE_POLICY_WARNING_CMP0056""))
          {
          std::ostringstream w;
          w << cmPolicies::GetPolicyWarning(cmPolicies::CMP0056) << ""\n""
            ""For compatibility with older versions of CMake, try_compile ""
            ""is not honoring caller link flags (e.g. CMAKE_EXE_LINKER_FLAGS) ""
            ""in the test project.""
            ;
          this->Makefile->IssueMessage(cmake::AUTHOR_WARNING, w.str());
          }
      case cmPolicies::OLD:
        // OLD behavior is to do nothing.
        break;
      case cmPolicies::REQUIRED_IF_USED:
      case cmPolicies::REQUIRED_ALWAYS:
        this->Makefile->IssueMessage(
          cmake::FATAL_ERROR,
          cmPolicies::GetRequiredPolicyError(cmPolicies::CMP0056)
          );
      case cmPolicies::NEW:
        // NEW behavior is to pass linker flags.
        {
        const char* exeLinkFlags =
          this->Makefile->GetDefinition(""CMAKE_EXE_LINKER_FLAGS"");
        fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS %s)\n"",
                cmOutputConverter::EscapeForCMake(
                    exeLinkFlags ? exeLinkFlags : """").c_str());
        } break;
      }
    fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS \""${CMAKE_EXE_LINKER_FLAGS}""
            "" ${EXE_LINKER_FLAGS}\"")\n"");
    fprintf(fout, ""include_directories(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""set(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""link_directories(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (!compileDefs.empty())
      {
      fprintf(fout, ""add_definitions(%s)\n"", cmJoin(compileDefs, "" "").c_str());
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTC_%05x"",
            cmSystemTools::RandomSeed() & 0xFFFFF);
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg(gg, targets, this->Makefile);
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetConfig(this->Makefile->GetSafeDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURES to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURES first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if (const char *cxxDef
              = this->Makefile->GetDefinition(""CMAKE_CXX_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_TARGET="";
      flag += cxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *cDef
                = this->Makefile->GetDefinition(""CMAKE_C_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_TARGET="";
      flag += cDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcxxDef = this->Makefile->GetDefinition(
                                  ""CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcDef = this->Makefile->GetDefinition(
                                    ""CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *rootDef
              = this->Makefile->GetDefinition(""CMAKE_SYSROOT""))
      {
      std::string flag=""-DCMAKE_SYSROOT="";
      flag += rootDef;
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""set(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }
    if (const char *lssDef = this->Makefile->GetDefinition(
        ""CMAKE_LINK_SEARCH_START_STATIC""))
      {
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_START_STATIC \""%s\"")\n"", lssDef);
      }
    if (const char *lssDef = this->Makefile->GetDefinition(
        ""CMAKE_LINK_SEARCH_END_STATIC""))
      {
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_END_STATIC \""%s\"")\n"", lssDef);
      }

    /* Set the appropriate policy information for ENABLE_EXPORTS */
    fprintf(fout, ""cmake_policy(SET CMP0065 %s)\n"",
       this->Makefile->GetPolicyStatus(cmPolicies::CMP0065) ==
         cmPolicies::NEW ? ""NEW"" : ""OLD"");
    if(const char *ee = this->Makefile->GetDefinition(
        ""CMAKE_ENABLE_EXPORTS""))
      {
      fprintf(fout, ""set(CMAKE_ENABLE_EXPORTS %s)\n"", ee);
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""add_executable(%s"", targetName.c_str());
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }
    fprintf(fout, "")\n"");
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",
              targetName.c_str());
      }
    else
      {
      fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName.c_str(),
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_413.cpp,"[25, 0, 4, 0, 2, 0, 3, 1, 5, 0, 34, 0, 0, 0, 13, 679, 0, 0, 27, 44, 1, 0, 39, 101, 0, 0, 0, 0, 15, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260, 3, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 45, 0, 1, 0, 33, 28, 5, 0, 134, 3, 0, 68, 2, 156, 0, 4, 0, 0, 4, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_413.cpp,471,"[""FILE *"", ""string"", ""targetName . c_str_ret""]","[""targets . empty_ret"", ""!""]"
7f1bd9fe6910f7633d98dec018cc01331a46b87e,"try_compile: Add option to control type of target

Create a `CMAKE_TRY_COMPILE_TARGET_TYPE` option to specify use
of `add_library(... STATIC ...)` for the generated test project.
This will be useful for cross-compiling toolchains that cannot
link a binary without custom flags or scripts.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_233.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_545.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_545.cpp,486,515,492,523,,"fprintf(fout, ""add_executable(%s"", targetName.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_414.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_414.cpp,"{
    // remove any CMakeCache.txt files so we will have a clean test
    std::string ccFile = this->BinaryDirectory + ""/CMakeCache.txt"";
    cmSystemTools::RemoveFile(ccFile);

    // Choose sources.
    if(!useSources)
      {
      sources.push_back(argv[2]);
      }

    // Detect languages to enable.
    cmGlobalGenerator* gg = this->Makefile->GetGlobalGenerator();
    std::set<std::string> testLangs;
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      std::string ext = cmSystemTools::GetFilenameLastExtension(*si);
      std::string lang = gg->GetLanguageFromExtension(ext.c_str());
      if(!lang.empty())
        {
        testLangs.insert(lang);
        }
      else
        {
        std::ostringstream err;
        err << ""Unknown extension \"""" << ext << ""\"" for file\n""
            << ""  "" << *si << ""\n""
            << ""try_compile() works only for enabled languages.  ""
            << ""Currently these are:\n  "";
        std::vector<std::string> langs;
        gg->GetEnabledLanguages(langs);
        err << cmJoin(langs, "" "");
        err << ""\nSee project() command to enable other languages."";
        this->Makefile->IssueMessage(cmake::FATAL_ERROR, err.str());
        return -1;
        }
      }

    // we need to create a directory and CMakeLists file etc...
    // first create the directories
    sourceDirectory = this->BinaryDirectory.c_str();

    // now create a CMakeLists.txt file in that directory
    FILE *fout = cmsys::SystemTools::Fopen(outFileName,""w"");
    if (!fout)
      {
      std::ostringstream e;
      e << ""Failed to open\n""
        << ""  "" << outFileName << ""\n""
        << cmSystemTools::GetLastSystemError();
      this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
      return -1;
      }

    const char* def = this->Makefile->GetDefinition(""CMAKE_MODULE_PATH"");
    fprintf(fout, ""cmake_minimum_required(VERSION %u.%u.%u.%u)\n"",
            cmVersion::GetMajorVersion(), cmVersion::GetMinorVersion(),
            cmVersion::GetPatchVersion(), cmVersion::GetTweakVersion());
    if(def)
      {
      fprintf(fout, ""set(CMAKE_MODULE_PATH \""%s\"")\n"", def);
      }

    std::string projectLangs;
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      projectLangs += "" "" + *li;
      std::string rulesOverrideBase = ""CMAKE_USER_MAKE_RULES_OVERRIDE"";
      std::string rulesOverrideLang = rulesOverrideBase + ""_"" + *li;
      if(const char* rulesOverridePath =
         this->Makefile->GetDefinition(rulesOverrideLang))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideLang.c_str(), rulesOverridePath);
        }
      else if(const char* rulesOverridePath2 =
              this->Makefile->GetDefinition(rulesOverrideBase))
        {
        fprintf(fout, ""set(%s \""%s\"")\n"",
                rulesOverrideBase.c_str(), rulesOverridePath2);
        }
      }
    fprintf(fout, ""project(CMAKE_TRY_COMPILE%s)\n"", projectLangs.c_str());
    fprintf(fout, ""set(CMAKE_VERBOSE_MAKEFILE 1)\n"");
    for(std::set<std::string>::iterator li = testLangs.begin();
        li != testLangs.end(); ++li)
      {
      std::string langFlags = ""CMAKE_"" + *li + ""_FLAGS"";
      const char* flags = this->Makefile->GetDefinition(langFlags);
      fprintf(fout, ""set(CMAKE_%s_FLAGS %s)\n"", li->c_str(),
              cmOutputConverter::EscapeForCMake(flags?flags:"""").c_str());
      fprintf(fout, ""set(CMAKE_%s_FLAGS \""${CMAKE_%s_FLAGS}""
              "" ${COMPILE_DEFINITIONS}\"")\n"", li->c_str(), li->c_str());
      }
    switch(this->Makefile->GetPolicyStatus(cmPolicies::CMP0056))
      {
      case cmPolicies::WARN:
        if(this->Makefile->PolicyOptionalWarningEnabled(
             ""CMAKE_POLICY_WARNING_CMP0056""))
          {
          std::ostringstream w;
          w << cmPolicies::GetPolicyWarning(cmPolicies::CMP0056) << ""\n""
            ""For compatibility with older versions of CMake, try_compile ""
            ""is not honoring caller link flags (e.g. CMAKE_EXE_LINKER_FLAGS) ""
            ""in the test project.""
            ;
          this->Makefile->IssueMessage(cmake::AUTHOR_WARNING, w.str());
          }
      case cmPolicies::OLD:
        // OLD behavior is to do nothing.
        break;
      case cmPolicies::REQUIRED_IF_USED:
      case cmPolicies::REQUIRED_ALWAYS:
        this->Makefile->IssueMessage(
          cmake::FATAL_ERROR,
          cmPolicies::GetRequiredPolicyError(cmPolicies::CMP0056)
          );
      case cmPolicies::NEW:
        // NEW behavior is to pass linker flags.
        {
        const char* exeLinkFlags =
          this->Makefile->GetDefinition(""CMAKE_EXE_LINKER_FLAGS"");
        fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS %s)\n"",
                cmOutputConverter::EscapeForCMake(
                    exeLinkFlags ? exeLinkFlags : """").c_str());
        } break;
      }
    fprintf(fout, ""set(CMAKE_EXE_LINKER_FLAGS \""${CMAKE_EXE_LINKER_FLAGS}""
            "" ${EXE_LINKER_FLAGS}\"")\n"");
    fprintf(fout, ""include_directories(${INCLUDE_DIRECTORIES})\n"");
    fprintf(fout, ""set(CMAKE_SUPPRESS_REGENERATION 1)\n"");
    fprintf(fout, ""link_directories(${LINK_DIRECTORIES})\n"");
    // handle any compile flags we need to pass on
    if (!compileDefs.empty())
      {
      fprintf(fout, ""add_definitions(%s)\n"", cmJoin(compileDefs, "" "").c_str());
      }

    /* Use a random file name to avoid rapid creation and deletion
       of the same executable name (some filesystems fail on that).  */
    sprintf(targetNameBuf, ""cmTC_%05x"",
            cmSystemTools::RandomSeed() & 0xFFFFF);
    targetName = targetNameBuf;

    if (!targets.empty())
      {
      std::string fname = ""/"" + std::string(targetName) + ""Targets.cmake"";
      cmExportTryCompileFileGenerator tcfg(gg, targets, this->Makefile);
      tcfg.SetExportFile((this->BinaryDirectory + fname).c_str());
      tcfg.SetConfig(this->Makefile->GetSafeDefinition(
                                          ""CMAKE_TRY_COMPILE_CONFIGURATION""));

      if(!tcfg.GenerateImportFile())
        {
        this->Makefile->IssueMessage(cmake::FATAL_ERROR,
                                     ""could not write export file."");
        fclose(fout);
        return -1;
        }
      fprintf(fout,
              ""\ninclude(\""${CMAKE_CURRENT_LIST_DIR}/%s\"")\n\n"",
              fname.c_str());
      }

    /* for the TRY_COMPILEs we want to be able to specify the architecture.
      So the user can set CMAKE_OSX_ARCHITECTURES to i386;ppc and then set
      CMAKE_TRY_COMPILE_OSX_ARCHITECTURES first to i386 and then to ppc to
      have the tests run for each specific architecture. Since
      cmLocalGenerator doesn't allow building for ""the other""
      architecture only via CMAKE_OSX_ARCHITECTURES.
      */
    if(this->Makefile->GetDefinition(""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(
                                        ""CMAKE_TRY_COMPILE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    else if (this->Makefile->GetDefinition(""CMAKE_OSX_ARCHITECTURES"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_ARCHITECTURES="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_ARCHITECTURES"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_SYSROOT to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_SYSROOT"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_SYSROOT="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_SYSROOT"");
      cmakeFlags.push_back(flag);
      }
    /* on APPLE also pass CMAKE_OSX_DEPLOYMENT_TARGET to the try_compile */
    if(this->Makefile->GetDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"")!=0)
      {
      std::string flag=""-DCMAKE_OSX_DEPLOYMENT_TARGET="";
      flag += this->Makefile->GetSafeDefinition(""CMAKE_OSX_DEPLOYMENT_TARGET"");
      cmakeFlags.push_back(flag);
      }
    if (const char *cxxDef
              = this->Makefile->GetDefinition(""CMAKE_CXX_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_TARGET="";
      flag += cxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *cDef
                = this->Makefile->GetDefinition(""CMAKE_C_COMPILER_TARGET""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_TARGET="";
      flag += cDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcxxDef = this->Makefile->GetDefinition(
                                  ""CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcxxDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *tcDef = this->Makefile->GetDefinition(
                                    ""CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN""))
      {
      std::string flag=""-DCMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN="";
      flag += tcDef;
      cmakeFlags.push_back(flag);
      }
    if (const char *rootDef
              = this->Makefile->GetDefinition(""CMAKE_SYSROOT""))
      {
      std::string flag=""-DCMAKE_SYSROOT="";
      flag += rootDef;
      cmakeFlags.push_back(flag);
      }
    if(this->Makefile->GetDefinition(""CMAKE_POSITION_INDEPENDENT_CODE"")!=0)
      {
      fprintf(fout, ""set(CMAKE_POSITION_INDEPENDENT_CODE \""ON\"")\n"");
      }
    if (const char *lssDef = this->Makefile->GetDefinition(
        ""CMAKE_LINK_SEARCH_START_STATIC""))
      {
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_START_STATIC \""%s\"")\n"", lssDef);
      }
    if (const char *lssDef = this->Makefile->GetDefinition(
        ""CMAKE_LINK_SEARCH_END_STATIC""))
      {
      fprintf(fout, ""set(CMAKE_LINK_SEARCH_END_STATIC \""%s\"")\n"", lssDef);
      }

    /* Set the appropriate policy information for ENABLE_EXPORTS */
    fprintf(fout, ""cmake_policy(SET CMP0065 %s)\n"",
       this->Makefile->GetPolicyStatus(cmPolicies::CMP0065) ==
         cmPolicies::NEW ? ""NEW"" : ""OLD"");
    if(const char *ee = this->Makefile->GetDefinition(
        ""CMAKE_ENABLE_EXPORTS""))
      {
      fprintf(fout, ""set(CMAKE_ENABLE_EXPORTS %s)\n"", ee);
      }

    /* Put the executable at a known location (for COPY_FILE).  */
    fprintf(fout, ""set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \""%s\"")\n"",
            this->BinaryDirectory.c_str());
    /* Create the actual executable.  */
    fprintf(fout, ""add_executable(%s"", targetName.c_str());
    for(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }
    fprintf(fout, "")\n"");
    if (useOldLinkLibs)
      {
      fprintf(fout,
              ""target_link_libraries(%s ${LINK_LIBRARIES})\n"",
              targetName.c_str());
      }
    else
      {
      fprintf(fout, ""target_link_libraries(%s %s)\n"",
              targetName.c_str(),
              libsToLink.c_str());
      }
    fclose(fout);
    projectName = ""CMAKE_TRY_COMPILE"";
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_414.cpp,"[25, 0, 4, 0, 2, 0, 3, 1, 5, 0, 34, 0, 0, 0, 13, 679, 0, 0, 27, 44, 1, 0, 39, 101, 0, 0, 0, 0, 15, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260, 3, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 45, 0, 1, 0, 33, 28, 5, 0, 134, 3, 0, 68, 2, 156, 0, 4, 0, 0, 4, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_414.cpp,471,"[""FILE *"", ""string"", ""targetName . c_str_ret""]","[""tcfg . GenerateImportFile_ret"", ""!""]"
7f1bd9fe6910f7633d98dec018cc01331a46b87e,"try_compile: Add option to control type of target

Create a `CMAKE_TRY_COMPILE_TARGET_TYPE` option to specify use
of `add_library(... STATIC ...)` for the generated test project.
This will be useful for cross-compiling toolchains that cannot
link a binary without custom flags or scripts.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_233.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_545.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_545.cpp,486,515,493,528,,"fprintf(fout, ""set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \""%s\"")\n"",
              this->BinaryDirectory.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_415.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_415.cpp,"r(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_415.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 2, 0, 6, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_415.cpp,472,[],"[""tcfg . GenerateImportFile_ret"", ""!""]"
7f1bd9fe6910f7633d98dec018cc01331a46b87e,"try_compile: Add option to control type of target

Create a `CMAKE_TRY_COMPILE_TARGET_TYPE` option to specify use
of `add_library(... STATIC ...)` for the generated test project.
This will be useful for cross-compiling toolchains that cannot
link a binary without custom flags or scripts.",[],Source/cmCoreTryCompile.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_233.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_233.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_545.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_545.cpp,486,515,493,531,,"fprintf(fout, ""add_library(%s STATIC"", targetName.c_str());",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_416.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_416.cpp,"r(std::vector<std::string>::iterator si = sources.begin();
        si != sources.end(); ++si)
      {
      fprintf(fout, "" \""%s\"""", si->c_str());

      // Add dependencies on any non-temporary sources.
      if(si->find(""CMakeTmp"") == si->npos)
        {
        this->Makefile->AddCMakeDependFile(*si);
        }
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_416.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 2, 0, 6, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_416.cpp,472,[],"[""tcfg . GenerateImportFile_ret"", ""!""]"
1c1ace2db012919f23b6de5400ab192b9277dfc6,"De-duplicate symbols listed in generated module definition files

MS tools have a limit on the number of symbols that can be listed
in a `.def` file.  If multiple `.obj` files provide a symbol then
avoid listing it more than once in the generated `.def` file to
avoid counting toward the limit.",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_234.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_546.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_546.cpp,296,298,300,-1,"fprintf(this->FileOut,""EXPORTS \n"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_417.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_417.cpp,"{
               this->ImportFlag = false;
               fprintf(this->FileOut,""EXPORTS \n"");
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_417.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_417.cpp,44,"[""member"", ""string""]","[""member""]"
1c1ace2db012919f23b6de5400ab192b9277dfc6,"De-duplicate symbols listed in generated module definition files

MS tools have a limit on the number of symbols that can be listed
in a `.def` file.  If multiple `.obj` files provide a symbol then
avoid listing it more than once in the generated `.def` file to
avoid counting toward the limit.",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_234.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_547.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_547.cpp,319,317,321,319,"fprintf(this->FileOut, ""\t%s \t DATA\n"", symbol.c_str());",this->DataSymbols.insert(symbol);,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_418.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_418.cpp,"{
                  // Read only (i.e. constants) must be excluded
                  fprintf(this->FileOut, ""\t%s \t DATA\n"", symbol.c_str());
               }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_418.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_418.cpp,65,"[""member"", ""string"", ""symbol . c_str_ret""]","[""member"", ""bool"", ""&&""]"
1c1ace2db012919f23b6de5400ab192b9277dfc6,"De-duplicate symbols listed in generated module definition files

MS tools have a limit on the number of symbols that can be listed
in a `.def` file.  If multiple `.obj` files provide a symbol then
avoid listing it more than once in the generated `.def` file to
avoid counting toward the limit.",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_234.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_547.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_547.cpp,319,317,325,323,"fprintf(this->FileOut, ""\t%s\n"", symbol.c_str());",this->Symbols.insert(symbol);,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_419.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_419.cpp,"{
                     fprintf(this->FileOut, ""\t%s\n"", symbol.c_str());
                  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_419.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_419.cpp,69,"[""member"", ""string"", ""symbol . c_str_ret""]","[""member"", ""bool"", ""!"", ""||""]"
1c1ace2db012919f23b6de5400ab192b9277dfc6,"De-duplicate symbols listed in generated module definition files

MS tools have a limit on the number of symbols that can be listed
in a `.def` file.  If multiple `.obj` files provide a symbol then
avoid listing it more than once in the generated `.def` file to
avoid counting toward the limit.",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_234.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_548.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_548.cpp,340,338,344,-1,"fprintf(this->FileOut,""IMPORTS \n"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_420.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_420.cpp,"{
               this->ImportFlag = true;
               fprintf(this->FileOut,""IMPORTS \n"");
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_420.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_420.cpp,88,"[""member"", ""string""]","[""member""]"
1c1ace2db012919f23b6de5400ab192b9277dfc6,"De-duplicate symbols listed in generated module definition files

MS tools have a limit on the number of symbols that can be listed
in a `.def` file.  If multiple `.obj` files provide a symbol then
avoid listing it more than once in the generated `.def` file to
avoid counting toward the limit.",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_234.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_548.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_548.cpp,340,338,346,340,"fprintf(this->FileOut, ""\t%s DATA \n"", symbol.c_str()+1);",this->DataSymbols.insert(symbol);,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_421.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_421.cpp,"{
            symbol = stringTable + pSymbolTable->N.Name.Long;
            while (isspace(symbol[0]))  symbol.erase(0,1);
            if (symbol[0] == '_') symbol.erase(0,1);
            if (!this->ImportFlag) {
               this->ImportFlag = true;
               fprintf(this->FileOut,""IMPORTS \n"");
            }
            fprintf(this->FileOut, ""\t%s DATA \n"", symbol.c_str()+1);
         }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_421.cpp,"[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 2, 0, 0, 6, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_421.cpp,90,"[""member"", ""string"", ""symbol . c_str_ret""]","[""member"", ""macro"", ""==""]"
1c1ace2db012919f23b6de5400ab192b9277dfc6,"De-duplicate symbols listed in generated module definition files

MS tools have a limit on the number of symbols that can be listed
in a `.def` file.  If multiple `.obj` files provide a symbol then
avoid listing it more than once in the generated `.def` file to
avoid counting toward the limit.",[],Source/bindexplib.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_234.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_234.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_549.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_549.cpp,437,434,437,448,,"fprintf(file,""EXPORTS \n"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_422.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_422.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_422.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_422.cpp,0,[],[]
ba819f49df33b546072a5928de3253770c4716b9,"cmFortranParser: Parse #line directives

Teach the lexer to extract the #line directive prefix and line number as
a new token type.  Teach the parser to recognize this token followed by
a string as the file name (plus possibly other content).  Report the
named file as included by the source file.",[],Source/cmFortranLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_235.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_235.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_235.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_550.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_550.cpp,2174,2192,2176,2194,"yy_fatal_error( ""cmFortran_yyset_lineno called with no buffer"" , yyscanner);","YY_FATAL_ERROR( ""cmFortran_yyset_lineno called with no buffer"" );",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_425.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_425.cpp,"yy_fatal_error( ""cmFortran_yyset_lineno called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_425.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_425.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
ba819f49df33b546072a5928de3253770c4716b9,"cmFortranParser: Parse #line directives

Teach the lexer to extract the #line directive prefix and line number as
a new token type.  Teach the parser to recognize this token followed by
a string as the file name (plus possibly other content).  Report the
named file as included by the source file.",[],Source/cmFortranLexer.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_235.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_235.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_235.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_551.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_551.cpp,2189,2207,2191,2209,"yy_fatal_error( ""cmFortran_yyset_column called with no buffer"" , yyscanner);","YY_FATAL_ERROR( ""cmFortran_yyset_column called with no buffer"" );",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_426.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_426.cpp,"yy_fatal_error( ""cmFortran_yyset_column called with no buffer"" , yyscanner)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_426.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_426.cpp,6,"[""string"", ""yyscan_t""]","[""macro"", ""!""]"
7f8bb857b8ab714b80acfa6a6e2c34195fabff6f,VS6: Port to cmGeneratorTarget.,[],Source/cmLocalVisualStudio6Generator.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_236.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_236.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_236.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_552.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_552.cpp,575,570,584,579,"sprintf(output,""%s/%s_force_%i"", this->GetCurrentBinaryDirectory(),
          target.GetName().c_str(), count);","sprintf(output,""%s/%s_force_%i"", this->GetCurrentBinaryDirectory(),
          target->GetName().c_str(), count);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_427.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_427.cpp,"{
  // Create a fake output that forces the rule to run.
  char* output = new char[(strlen(this->GetCurrentBinaryDirectory())
                           + target.GetName().size() + 30)];
  sprintf(output,""%s/%s_force_%i"", this->GetCurrentBinaryDirectory(),
          target.GetName().c_str(), count);
  const char* comment = origCommand.GetComment();
  if(!comment && origCommand.GetOutputs().empty())
    {
    comment = ""<hack>"";
    }

  // Add the rule with the given dependencies and commands.
  std::string no_main_dependency = """";
  if(cmSourceFile* outsf =
     this->Makefile->AddCustomCommandToOutput(
       output, depends, no_main_dependency,
       origCommand.GetCommandLines(), comment,
       origCommand.GetWorkingDirectory().c_str()))
    {
    cmGeneratorTarget* gt = this->GlobalGenerator->GetGeneratorTarget(&target);
    gt->AddSource(outsf->GetFullPath());
    }

  // Replace the dependencies with the output of this rule so that the
  // next rule added will run after this one.
  depends.clear();
  depends.push_back(output);

  // Free the fake output name.
  delete [] output;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_427.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 75, 0, 0, 4, 5, 0, 0, 5, 4, 0, 0, 0, 0, 4, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 2, 2, 0, 0, 20, 0, 0, 6, 0, 15, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_427.cpp,9,"[""char *"", ""string"", ""this -> GetCurrentBinaryDirectory_ret"", ""target . GetName ( ) . c_str_ret"", ""int""]",[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_237.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_237.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_237.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_553.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_553.cpp,230,233,233,236,,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Current client reader does not support seeking a device"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_428.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_428.cpp,return (ARCHIVE_FAILED);,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_428.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_428.cpp,9,[],"[""member"", ""null"", ""==""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_237.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_237.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_237.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_555.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_555.cpp,843,850,845,852,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Encountered out-of-order sparse blocks"");","archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Encountered out-of-order sparse blocks"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_430.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_430.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Encountered out-of-order sparse blocks"");
			return (ARCHIVE_RETRY);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_430.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_430.cpp,33,"[""member"", ""macro"", ""string""]","[""member"", ""member"", ""<""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_237.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_237.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_237.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_556.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_556.cpp,953,975,953,975,"archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Internal error: ""
		    ""No format_read_data_block function registered"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Internal error: ""
		    ""No format->read_data function registered"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_431.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_431.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Internal error: ""
		    ""No format_read_data_block function registered"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_431.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_431.cpp,9,[],"[""member"", ""null"", ""==""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_238.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_238.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_238.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_560.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_560.cpp,311,318,312,319,"archive_set_error(&a->archive, EINVAL,
			    ""Can't find long filename for entry"");","archive_set_error(&a->archive, EINVAL,
			    ""Can't find long filename for GNU/SVR4 archive entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_432.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_432.cpp,"{
			archive_set_error(&a->archive, EINVAL,
			    ""Can't find long filename for entry"");
			archive_entry_copy_pathname(entry, filename);
			/* Parse the time, owner, mode, size fields. */
			ar_parse_common_header(ar, entry, h);
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_432.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_432.cpp,145,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""=="", ""ar_atol10_ret"", ""member"", "">"", ""||""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_239.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_239.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_239.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_563.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_563.cpp,1793,1801,1797,1807,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Directory structure contains loop"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_434.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_434.cpp,"(file == NULL) {
		archive_set_error(&a->archive, ENOMEM,
		    ""No memory for file entry"");
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_434.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_434.cpp,56,[],"[""toi_ret"", ""null"", ""!="", ""archive_le32dec_ret"", ""null"", ""<"", ""&&"", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_240.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_240.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_240.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_565.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_565.cpp,1390,1374,1395,-1,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""LHa data CRC error"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_436.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_436.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""LHa data CRC error"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_436.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_436.cpp,16,"[""member"", ""macro"", ""string""]","[""bool"", ""member"", ""member"", ""!="", ""&&""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_240.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_240.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_240.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_566.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_566.cpp,1477,1449,1485,-1,"archive_set_error(&a->archive, ENOMEM,
			    ""No memory for lzh decompression"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_437.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_437.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""No memory for lzh decompression"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_437.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_437.cpp,14,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_241.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_241.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_241.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_568.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_568.cpp,1175,1177,1218,1219,"archive_set_error(&a->archive,
									ARCHIVE_ERRNO_MISC,
									""mtree specification has different type for %s"",
									archive_entry_pathname(entry));","archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""mtree specification has different""
					    "" type for %s"",
					    archive_entry_pathname(entry));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_438.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_438.cpp,"{
							archive_set_error(&a->archive,
									ARCHIVE_ERRNO_MISC,
									""mtree specification has different type for %s"",
									archive_entry_pathname(entry));
							r = ARCHIVE_WARN;
						}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_438.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_438.cpp,147,"[""member"", ""macro"", ""string"", ""archive_entry_pathname_ret""]","[""parse_line_ret"", ""macro"", ""==""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_241.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_241.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_241.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_570.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_570.cpp,1583,1589,1608,1619,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Unrecognized file type \""%s\""; assuming \""file\"""", val);","archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Unrecognized file type \""%s\""; ""
				    ""assuming \""file\"""", val);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_439.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_439.cpp,"{
			case 'b':
				if (strcmp(val, ""block"") == 0) {
					archive_entry_set_filetype(entry, AE_IFBLK);
					break;
				}
			case 'c':
				if (strcmp(val, ""char"") == 0) {
					archive_entry_set_filetype(entry, AE_IFCHR);
					break;
				}
			case 'd':
				if (strcmp(val, ""dir"") == 0) {
					archive_entry_set_filetype(entry, AE_IFDIR);
					break;
				}
			case 'f':
				if (strcmp(val, ""fifo"") == 0) {
					archive_entry_set_filetype(entry, AE_IFIFO);
					break;
				}
				if (strcmp(val, ""file"") == 0) {
					archive_entry_set_filetype(entry, AE_IFREG);
					break;
				}
			case 'l':
				if (strcmp(val, ""link"") == 0) {
					archive_entry_set_filetype(entry, AE_IFLNK);
					break;
				}
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Unrecognized file type \""%s\""; assuming \""file\"""", val);
				archive_entry_set_filetype(entry, AE_IFREG);
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_439.cpp,"[6, 0, 0, 0, 6, 0, 1, 0, 5, 1, 7, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 14, 0, 0, 8, 0, 30, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_439.cpp,206,"[""member"", ""macro"", ""string"", ""strchr_ret""]","[""member""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_573.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_573.cpp,248,418,258,428,"fprintf(stderr, ""Header id 0x%x, length %d\n"",
		    headerid, datasize);","fprintf(stderr, ""Header id 0x%04x, length %d\n"",
		    headerid, datasize);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_440.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_440.cpp,"{
		unsigned short headerid = archive_le16dec(p + offset);
		unsigned short datasize = archive_le16dec(p + offset + 2);
		offset += 4;
		if (offset + datasize > extra_length)
			break;
#ifdef DEBUG
		fprintf(stderr, ""Header id 0x%x, length %d\n"",
		    headerid, datasize);
#endif
		switch (headerid) {
		case 0x0001:
			/* Zip64 extended information extra field. */
			zip_entry->flags |= LA_USED_ZIP64;
			if (zip_entry->uncompressed_size == 0xffffffff) {
				if (datasize < 8)
					break;
				zip_entry->uncompressed_size =
				    archive_le64dec(p + offset);
				offset += 8;
				datasize -= 8;
			}
			if (zip_entry->compressed_size == 0xffffffff) {
				if (datasize < 8)
					break;
				zip_entry->compressed_size =
				    archive_le64dec(p + offset);
				offset += 8;
				datasize -= 8;
			}
			if (zip_entry->local_header_offset == 0xffffffff) {
				if (datasize < 8)
					break;
				zip_entry->local_header_offset =
				    archive_le64dec(p + offset);
				offset += 8;
				datasize -= 8;
			}
			/* archive_le32dec(p + offset) gives disk
			 * on which file starts, but we don't handle
			 * multi-volume Zip files. */
			break;
		case 0x5455:
		{
			/* Extended time field ""UT"". */
			int flags = p[offset];
			offset++;
			datasize--;
			/* Flag bits indicate which dates are present. */
			if (flags & 0x01)
			{
#ifdef DEBUG
				fprintf(stderr, ""mtime: %lld -> %d\n"",
				    (long long)zip_entry->mtime,
				    archive_le32dec(p + offset));
#endif
				if (datasize < 4)
					break;
				zip_entry->mtime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			if (flags & 0x02)
			{
				if (datasize < 4)
					break;
				zip_entry->atime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			if (flags & 0x04)
			{
				if (datasize < 4)
					break;
				zip_entry->ctime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			break;
		}
		case 0x5855:
		{
			/* Info-ZIP Unix Extra Field (old version) ""UX"". */
			if (datasize >= 8) {
				zip_entry->atime = archive_le32dec(p + offset);
				zip_entry->mtime =
				    archive_le32dec(p + offset + 4);
			}
			if (datasize >= 12) {
				zip_entry->uid =
				    archive_le16dec(p + offset + 8);
				zip_entry->gid =
				    archive_le16dec(p + offset + 10);
			}
			break;
		}
		case 0x6c65:
		{
			/* Experimental 'el' field */
			/*
			 * Introduced Dec 2013 to provide a way to
			 * include external file attributes in local file
			 * header.  This provides file type and permission
			 * information necessary to support full streaming
			 * extraction.  Currently being discussed with
			 * other Zip developers... subject to change.
			 */
			int bitmap, bitmap_last;

			if (datasize < 1)
				break;
			bitmap_last = bitmap = 0xff & p[offset];
			offset += 1;
			datasize -= 1;

			/* We only support first 7 bits of bitmap; skip rest. */
			while ((bitmap_last & 0x80) != 0
			    && datasize >= 1) {
				bitmap_last = p[offset];
				offset += 1;
				datasize -= 1;
			}

			if (bitmap & 1) {
				// 2 byte ""version made by""
				if (datasize < 2)
					break;
				zip_entry->system
				    = archive_le16dec(p + offset) >> 8;
				offset += 2;
				datasize -= 2;
			}
			if (bitmap & 2) {
				// 2 byte ""internal file attributes""
				uint32_t internal_attributes;
				if (datasize < 2)
					break;
				internal_attributes
				    = archive_le16dec(p + offset);
				// Not used by libarchive at present.
				(void)internal_attributes; /* UNUSED */
				offset += 2;
				datasize -= 2;
			}
			if (bitmap & 4) {
				// 4 byte ""external file attributes""
				uint32_t external_attributes;
				if (datasize < 4)
					break;
				external_attributes
				    = archive_le32dec(p + offset);
				if (zip_entry->system == 3) {
					zip_entry->mode
					    = external_attributes >> 16;
				}
				offset += 4;
				datasize -= 4;
			}
			if (bitmap & 8) {
				// 2 byte comment length + comment
				uint32_t comment_length;
				if (datasize < 2)
					break;
				comment_length
				    = archive_le16dec(p + offset);
				offset += 2;
				datasize -= 2;

				if (datasize < comment_length)
					break;
				// Comment is not supported by libarchive
				offset += comment_length;
				datasize -= comment_length;
			}
			break;
		}
		case 0x7855:
			/* Info-ZIP Unix Extra Field (type 2) ""Ux"". */
#ifdef DEBUG
			fprintf(stderr, ""uid %d gid %d\n"",
			    archive_le16dec(p + offset),
			    archive_le16dec(p + offset + 2));
#endif
			if (datasize >= 2)
				zip_entry->uid = archive_le16dec(p + offset);
			if (datasize >= 4)
				zip_entry->gid =
				    archive_le16dec(p + offset + 2);
			break;
		case 0x7875:
		{
			/* Info-Zip Unix Extra Field (type 3) ""ux"". */
			int uidsize = 0, gidsize = 0;

			/* TODO: support arbitrary uidsize/gidsize. */
			if (datasize >= 1 && p[offset] == 1) {/* version=1 */
				if (datasize >= 4) {
					/* get a uid size. */
					uidsize = p[offset+1];
					if (uidsize == 2)
						zip_entry->uid =
						    archive_le16dec(
						        p + offset + 2);
					else if (uidsize == 4 && datasize >= 6)
						zip_entry->uid =
						    archive_le32dec(
						        p + offset + 2);
				}
				if (datasize >= (2 + uidsize + 3)) {
					/* get a gid size. */
					gidsize = p[offset+2+uidsize];
					if (gidsize == 2)
						zip_entry->gid =
						    archive_le16dec(
						        p+offset+2+uidsize+1);
					else if (gidsize == 4 &&
					    datasize >= (2 + uidsize + 5))
						zip_entry->gid =
						    archive_le32dec(
						        p+offset+2+uidsize+1);
				}
			}
			break;
		}
		default:
			break;
		}
		offset += datasize;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_440.cpp,"[35, 1, 0, 0, 20, 0, 0, 1, 6, 1, 42, 0, 0, 0, 0, 287, 0, 0, 8, 10, 0, 0, 5, 94, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 0, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 6, 0, 37, 35, 0, 0, 28, 0, 0, 60, 2, 37, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_440.cpp,13,"[""unkown"", ""string"", ""unsigned short"", ""unsigned short""]","[""int"", ""size_t"", "">"", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_575.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_575.cpp,687,910,691,915,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Zip file with oversized link entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_441.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_441.cpp,"{
		size_t linkname_length = zip_entry->compressed_size;

		archive_entry_set_size(entry, 0);
		p = __archive_read_ahead(a, linkname_length, NULL);
		if (p == NULL) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated Zip file"");
			return ARCHIVE_FATAL;
		}
		if (__archive_read_consume(a, linkname_length) < 0) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");
			return ARCHIVE_FATAL;
		}

		sconv = zip->sconv;
		if (sconv == NULL && (zip->entry->zip_flags & ZIP_UTF8_NAME))
			sconv = zip->sconv_utf8;
		if (sconv == NULL)
			sconv = zip->sconv_default;
		if (archive_entry_copy_symlink_l(entry, p, linkname_length,
		    sconv) != 0) {
			if (errno != ENOMEM && sconv == zip->sconv_utf8 &&
			    (zip->entry->zip_flags & ZIP_UTF8_NAME))
			    archive_entry_copy_symlink_l(entry, p,
				linkname_length, NULL);
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Symlink"");
				return (ARCHIVE_FATAL);
			}
			/*
			 * Since there is no character-set regulation for
			 * symlink name, do not report the conversion error
			 * in an automatic conversion.
			 */
			if (sconv != zip->sconv_utf8 ||
			    (zip->entry->zip_flags & ZIP_UTF8_NAME) == 0) {
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symlink cannot be converted ""
				    ""from %s to current locale."",
				    archive_string_conversion_charset_name(
					sconv));
				ret = ARCHIVE_WARN;
			}
		}
		zip_entry->uncompressed_size = zip_entry->compressed_size = 0;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_441.cpp,"[8, 0, 0, 0, 0, 0, 3, 0, 0, 0, 9, 0, 0, 0, 0, 103, 0, 0, 1, 1, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 8, 0, 0, 10, 0, 0, 12, 0, 29, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_441.cpp,199,"[""struct archive_entry *"", ""null""]","[""bool"", ""macro"", ""==""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_576.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_576.cpp,696,927,699,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_442.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_442.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");
			return ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_442.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_442.cpp,207,"[""member"", ""macro"", ""string""]","[""__archive_read_consume_ret"", ""null"", ""<""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_577.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_577.cpp,735,961,737,965,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_443.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_443.cpp,"(0 == (zip_entry->zip_flags & ZIP_LENGTH_AT_END)
	    || zip_entry->uncompressed_size > 0) {
		/* Set the size only if it's meaningful. */
		archive_entry_set_size(entry, zip_entry->uncompressed_size);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_443.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_443.cpp,245,[],"[""bool"", ""macro"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_578.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_578.cpp,748,980,750,982,"snprintf(zip->format_name, sizeof(zip->format_name), ""ZIP %d.%d (%s)"",
	    version / 10, version % 10,
	    compression_name(zip->entry->compression));","archive_string_sprintf(&zip->format_name, ""ZIP %d.%d (%s)"",
	    version / 10, version % 10,
	    compression_name(zip->entry->compression));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_444.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_444.cpp,"{
	const char *p;
	const void *h;
	const wchar_t *wp;
	const char *cp;
	size_t len, filename_length, extra_length;
	struct archive_string_conv *sconv;
	struct zip_entry *zip_entry = zip->entry;
	struct zip_entry zip_entry_central_dir;
	int ret = ARCHIVE_OK;
	char version;

	/* Save a copy of the original for consistency checks. */
	zip_entry_central_dir = *zip_entry;

	zip->decompress_init = 0;
	zip->end_of_entry = 0;
	zip->entry_uncompressed_bytes_read = 0;
	zip->entry_compressed_bytes_read = 0;
	zip->entry_crc32 = zip->crc32func(0, NULL, 0);

	/* Setup default conversion. */
	if (zip->sconv == NULL && !zip->init_default_conversion) {
		zip->sconv_default =
		    archive_string_default_conversion_for_read(&(a->archive));
		zip->init_default_conversion = 1;
	}

	if ((p = __archive_read_ahead(a, 30, NULL)) == NULL) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}

	if (memcmp(p, ""PK\003\004"", 4) != 0) {
		archive_set_error(&a->archive, -1, ""Damaged Zip archive"");
		return ARCHIVE_FATAL;
	}
	version = p[4];
	zip_entry->system = p[5];
	zip_entry->zip_flags = archive_le16dec(p + 6);
	if (zip_entry->zip_flags & (ZIP_ENCRYPTED | ZIP_STRONG_ENCRYPTED)) {
		zip->has_encrypted_entries = 1;
		archive_entry_set_is_data_encrypted(entry, 1);
		if (zip_entry->zip_flags & ZIP_CENTRAL_DIRECTORY_ENCRYPTED &&
			zip_entry->zip_flags & ZIP_ENCRYPTED &&
			zip_entry->zip_flags & ZIP_STRONG_ENCRYPTED) {
			archive_entry_set_is_metadata_encrypted(entry, 1);
			return ARCHIVE_FATAL;
		}
	}
	zip_entry->compression = (char)archive_le16dec(p + 8);
	zip_entry->mtime = zip_time(p + 10);
	zip_entry->crc32 = archive_le32dec(p + 14);
	zip_entry->compressed_size = archive_le32dec(p + 18);
	zip_entry->uncompressed_size = archive_le32dec(p + 22);
	filename_length = archive_le16dec(p + 26);
	extra_length = archive_le16dec(p + 28);

	__archive_read_consume(a, 30);

	/* Read the filename. */
	if ((h = __archive_read_ahead(a, filename_length, NULL)) == NULL) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}
	if (zip_entry->zip_flags & ZIP_UTF8_NAME) {
		/* The filename is stored to be UTF-8. */
		if (zip->sconv_utf8 == NULL) {
			zip->sconv_utf8 =
			    archive_string_conversion_from_charset(
				&a->archive, ""UTF-8"", 1);
			if (zip->sconv_utf8 == NULL)
				return (ARCHIVE_FATAL);
		}
		sconv = zip->sconv_utf8;
	} else if (zip->sconv != NULL)
		sconv = zip->sconv;
	else
		sconv = zip->sconv_default;

	if (archive_entry_copy_pathname_l(entry,
	    h, filename_length, sconv) != 0) {
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
	}
	__archive_read_consume(a, filename_length);

	/* Work around a bug in Info-Zip: When reading from a pipe, it
	 * stats the pipe instead of synthesizing a file entry. */
	if ((zip_entry->mode & AE_IFMT) == AE_IFIFO) {
		zip_entry->mode &= ~ AE_IFMT;
		zip_entry->mode |= AE_IFREG;
	}

	if ((zip_entry->mode & AE_IFMT) == 0) {
		/* Especially in streaming mode, we can end up
		   here without having seen proper mode information.
		   Guess from the filename. */
		wp = archive_entry_pathname_w(entry);
		if (wp != NULL) {
			len = wcslen(wp);
			if (len > 0 && wp[len - 1] == L'/')
				zip_entry->mode |= AE_IFDIR;
			else
				zip_entry->mode |= AE_IFREG;
		} else {
			cp = archive_entry_pathname(entry);
			len = (cp != NULL)?strlen(cp):0;
			if (len > 0 && cp[len - 1] == '/')
				zip_entry->mode |= AE_IFDIR;
			else
				zip_entry->mode |= AE_IFREG;
		}
		if (zip_entry->mode == AE_IFDIR) {
			zip_entry->mode |= 0775;
		} else if (zip_entry->mode == AE_IFREG) {
			zip_entry->mode |= 0664;
		}
	}

	/* Read the extra data. */
	if ((h = __archive_read_ahead(a, extra_length, NULL)) == NULL) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}

	process_extra(h, extra_length, zip_entry);
	__archive_read_consume(a, extra_length);

	if (zip_entry->flags & LA_FROM_CENTRAL_DIRECTORY) {
		/* If this came from the central dir, it's size info
		 * is definitive, so ignore the length-at-end flag. */
		zip_entry->zip_flags &= ~ZIP_LENGTH_AT_END;
		/* If local header is missing a value, use the one from
		   the central directory.  If both have it, warn about
		   mismatches. */
		if (zip_entry->crc32 == 0) {
			zip_entry->crc32 = zip_entry_central_dir.crc32;
		} else if (!zip->ignore_crc32
		    && zip_entry->crc32 != zip_entry_central_dir.crc32) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent CRC32 values"");
			ret = ARCHIVE_WARN;
		}
		if (zip_entry->compressed_size == 0) {
			zip_entry->compressed_size
			    = zip_entry_central_dir.compressed_size;
		} else if (zip_entry->compressed_size
		    != zip_entry_central_dir.compressed_size) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent compressed size: ""
			    ""%jd in central directory, %jd in local header"",
			    (intmax_t)zip_entry_central_dir.compressed_size,
			    (intmax_t)zip_entry->compressed_size);
			ret = ARCHIVE_WARN;
		}
		if (zip_entry->uncompressed_size == 0) {
			zip_entry->uncompressed_size
			    = zip_entry_central_dir.uncompressed_size;
		} else if (zip_entry->uncompressed_size
		    != zip_entry_central_dir.uncompressed_size) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent uncompressed size: ""
			    ""%jd in central directory, %jd in local header"",
			    (intmax_t)zip_entry_central_dir.uncompressed_size,
			    (intmax_t)zip_entry->uncompressed_size);
			ret = ARCHIVE_WARN;
		}
	}

	/* Populate some additional entry fields: */
	archive_entry_set_mode(entry, zip_entry->mode);
	archive_entry_set_uid(entry, zip_entry->uid);
	archive_entry_set_gid(entry, zip_entry->gid);
	archive_entry_set_mtime(entry, zip_entry->mtime, 0);
	archive_entry_set_ctime(entry, zip_entry->ctime, 0);
	archive_entry_set_atime(entry, zip_entry->atime, 0);

	if ((zip->entry->mode & AE_IFMT) == AE_IFLNK) {
		size_t linkname_length = zip_entry->compressed_size;

		archive_entry_set_size(entry, 0);
		p = __archive_read_ahead(a, linkname_length, NULL);
		if (p == NULL) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated Zip file"");
			return ARCHIVE_FATAL;
		}
		if (__archive_read_consume(a, linkname_length) < 0) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");
			return ARCHIVE_FATAL;
		}

		sconv = zip->sconv;
		if (sconv == NULL && (zip->entry->zip_flags & ZIP_UTF8_NAME))
			sconv = zip->sconv_utf8;
		if (sconv == NULL)
			sconv = zip->sconv_default;
		if (archive_entry_copy_symlink_l(entry, p, linkname_length,
		    sconv) != 0) {
			if (errno != ENOMEM && sconv == zip->sconv_utf8 &&
			    (zip->entry->zip_flags & ZIP_UTF8_NAME))
			    archive_entry_copy_symlink_l(entry, p,
				linkname_length, NULL);
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Symlink"");
				return (ARCHIVE_FATAL);
			}
			/*
			 * Since there is no character-set regulation for
			 * symlink name, do not report the conversion error
			 * in an automatic conversion.
			 */
			if (sconv != zip->sconv_utf8 ||
			    (zip->entry->zip_flags & ZIP_UTF8_NAME) == 0) {
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symlink cannot be converted ""
				    ""from %s to current locale."",
				    archive_string_conversion_charset_name(
					sconv));
				ret = ARCHIVE_WARN;
			}
		}
		zip_entry->uncompressed_size = zip_entry->compressed_size = 0;
	} else if (0 == (zip_entry->zip_flags & ZIP_LENGTH_AT_END)
	    || zip_entry->uncompressed_size > 0) {
		/* Set the size only if it's meaningful. */
		archive_entry_set_size(entry, zip_entry->uncompressed_size);
	}
	zip->entry_bytes_remaining = zip_entry->compressed_size;

	/* If there's no body, force read_data() to return EOF immediately. */
	if (0 == (zip_entry->zip_flags & ZIP_LENGTH_AT_END)
	    && zip->entry_bytes_remaining < 1)
		zip->end_of_entry = 1;

	/* Set up a more descriptive format name. */
	snprintf(zip->format_name, sizeof(zip->format_name), ""ZIP %d.%d (%s)"",
	    version / 10, version % 10,
	    compression_name(zip->entry->compression));
	a->archive.archive_format_name = zip->format_name;

	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_444.cpp,"[38, 0, 0, 0, 0, 0, 11, 0, 0, 0, 43, 0, 0, 0, 4, 605, 0, 0, 11, 13, 0, 0, 3, 75, 0, 0, 0, 0, 6, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 326, 1, 275, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 0, 39, 39, 5, 0, 56, 0, 0, 81, 6, 135, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_444.cpp,258,"[""member"", ""member"", ""constant"", ""member"", ""member"", ""compression_name_ret""]","[""bool"", ""macro"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_579.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_579.cpp,1015,1389,1015,1575,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Corrupted ZIP file data"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_453.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_453.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_453.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_453.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_579.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_579.cpp,1015,1389,1015,1579,,"archive_set_error(&a->archive, ENOMEM,
	    ""No memory for ZIP decryption"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_454.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_454.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_454.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_454.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_579.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_579.cpp,1015,1389,1015,1594,,"archive_set_error(&a->archive, ENOMEM,
			    ""No memory for ZIP decryption"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_455.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_455.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_455.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_455.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_579.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_579.cpp,1015,1389,1015,1727,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Too many incorrect passphrases"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_462.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_462.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_462.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_462.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_579.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_579.cpp,1015,1389,1015,1735,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Decryption is unsupported due to lack of crypto library"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_463.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_463.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_463.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_463.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_579.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_579.cpp,1015,1389,1015,1742,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize HMAC-SHA1"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_464.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_464.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_464.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_464.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_243.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_243.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_580.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_580.cpp,1037,1790,1041,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Encrypted file is unsupported"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_467.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_467.cpp,"{
		zip->has_encrypted_entries = 1;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Encrypted file is unsupported"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_467.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_467.cpp,25,"[""member"", ""macro"", ""string""]","[""bool""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_add_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_244.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_244.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_244.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_585.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_585.cpp,221,223,238,254,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""Unacceptable dictionary dize for lzip: %d"",
			    dict_size);","archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""Unacceptable dictionary size for lzip: %d"",
			    dict_size);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_468.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_468.cpp,"{
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""Unacceptable dictionary dize for lzip: %d"",
			    dict_size);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_468.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_468.cpp,21,"[""member"", ""macro"", ""string"", ""int""]","[""int"", ""int"", ""<"", ""int"", ""int"", "">"", ""||""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_245.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_245.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_245.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_586.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_586.cpp,1467,1468,1468,1469,"archive_set_error(&a->archive, 0,
		    ""Write request too large"");","archive_set_error(&a->archive, 0,
		    ""Too much data: Truncating file at %ju bytes"", (uintmax_t)a->filesize);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_469.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_469.cpp,"{
		archive_set_error(&a->archive, 0,
		    ""Write request too large"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_469.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_469.cpp,18,"[""member"", ""null"", ""string""]","[""write_data_block_ret"", ""size_t"", ""<""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_245.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_245.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_245.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_587.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_587.cpp,1869,1876,1871,1879,,"archive_set_error(&a->archive, en,
		    ""Hard-link target '%s' does not exist."",
		    archive_entry_hardlink(a->entry));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_470.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_470.cpp,"((en == EISDIR || en == EEXIST)
	    && (a->flags & ARCHIVE_EXTRACT_NO_OVERWRITE)) {
		/* If we're not overwriting, we're done. */
		archive_entry_unset_size(a->entry);
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_470.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_470.cpp,41,[],"[""bool"", ""S_ISDIR_ret"", ""&&"", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_245.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_245.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_245.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_590.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_590.cpp,2525,2544,2527,2548,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			                  ""Path is absolute"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_471.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_471.cpp,"(*src == '/')
		separator = *src++",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_471.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_471.cpp,17,[],"[""member"", ""char"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_595.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_595.cpp,227,274,229,290,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""deflate compression not supported"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_473.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_473.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_473.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_473.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_595.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_595.cpp,227,274,229,305,,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_474.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_474.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_474.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_474.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_595.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_595.cpp,227,274,229,315,,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_475.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_475.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_475.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_475.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_595.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_595.cpp,227,274,229,325,,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_476.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_476.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_476.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_476.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_595.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_595.cpp,227,274,229,330,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: unknown encryption '%s'"",
			    a->format_name, val);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_477.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_477.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_477.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_477.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_598.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_598.cpp,782,1010,784,1056,,"archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Failed to encrypt file"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_478.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_478.cpp,"(zip->entry_compression) {
	case COMPRESSION_STORE:
		ret = __archive_write_output(a, buff, s);
		if (ret != ARCHIVE_OK)
			return (ret);
		zip->written_bytes += s;
		zip->entry_compressed_written += s;
		break;
#if HAVE_ZLIB_H
	case COMPRESSION_DEFLATE:
		zip->stream.next_in = (unsigned char*)(uintptr_t)buff;
		zip->stream.avail_in = (uInt)s;
		do {
			ret = deflate(&zip->stream, Z_NO_FLUSH);
			if (ret == Z_STREAM_ERROR)
				return (ARCHIVE_FATAL);
			if (zip->stream.avail_out == 0) {
				ret = __archive_write_output(a, zip->buf,
					zip->len_buf);
				if (ret != ARCHIVE_OK)
					return (ret);
				zip->entry_compressed_written += zip->len_buf;
				zip->written_bytes += zip->len_buf;
				zip->stream.next_out = zip->buf;
				zip->stream.avail_out = (uInt)zip->len_buf;
			}
		} while (zip->stream.avail_in != 0);
		break;
#endif

	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid ZIP compression type"");
		return ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_478.cpp,"[5, 0, 0, 1, 2, 0, 4, 0, 2, 1, 6, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 0, 0, 4, 0, 0, 11, 0, 11, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_478.cpp,12,[],"[""size_t"", ""null"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_599.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_599.cpp,799,1086,800,1099,,"archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Failed to encrypt file"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_479.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_479.cpp,"(zip->stream.avail_out == 0) {
				ret = __archive_write_output(a, zip->buf,
					zip->len_buf);
				if (ret != ARCHIVE_OK)
					return (ret);
				zip->entry_compressed_written += zip->len_buf;
				zip->written_bytes += zip->len_buf;
				zip->stream.next_out = zip->buf;
				zip->stream.avail_out = (uInt)zip->len_buf;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_479.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_479.cpp,28,[],"[""deflate_ret"", ""macro"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_600.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_600.cpp,834,1142,840,1158,,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Failed to encrypt file"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_480.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_480.cpp,"{
			size_t remainder;
			ret = deflate(&zip->stream, Z_FINISH);
			if (ret == Z_STREAM_ERROR)
				return (ARCHIVE_FATAL);
			remainder = zip->len_buf - zip->stream.avail_out;
			ret = __archive_write_output(a, zip->buf, remainder);
			if (ret != ARCHIVE_OK)
				return (ret);
			zip->entry_compressed_written += remainder;
			zip->written_bytes += remainder;
			zip->stream.next_out = zip->buf;
			if (zip->stream.avail_out != 0)
				break;
			zip->stream.avail_out = (uInt)zip->len_buf;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_480.cpp,"[3, 0, 0, 0, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 56, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 7, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_480.cpp,14,"[""struct archive_write *"", ""member"", ""member""]","[""deflate_ret"", ""macro"", ""=="", ""!""]"
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_602.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_602.cpp,1124,1482,1124,1559,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Encryption needs passphrase"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_481.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_481.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_481.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_481.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_602.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_602.cpp,1124,1482,1124,1564,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't generate random number for encryption"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_482.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_482.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_482.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_482.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_602.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_602.cpp,1124,1482,1124,1595,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Encryption needs passphrase"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_483.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_483.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_483.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_483.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_602.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_602.cpp,1124,1482,1124,1608,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Can't generate random number for encryption"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_484.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_484.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_484.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_484.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_602.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_602.cpp,1124,1482,1124,1617,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Decryption is unsupported due to lack of crypto library"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_485.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_485.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_485.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_485.cpp,0,[],[]
932848f420a738ee07997198fead5b2c2fbf4787,"Merge branch 'libarchive-upstream' into update-libarchive

Resolve conflicts by integrating changes from both sides.",[],Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_247.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_247.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_602.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_602.cpp,1124,1482,1124,1625,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize HMAC-SHA1"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_486.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_486.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_486.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_486.cpp,0,[],[]
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_248.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_248.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_248.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_603.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_603.cpp,230,233,233,236,,"archive_set_error(&self->archive->archive, ARCHIVE_ERRNO_MISC,
		    ""Current client reader does not support seeking a device"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_487.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_487.cpp,return (ARCHIVE_FAILED);,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_487.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_487.cpp,9,[],"[""member"", ""null"", ""==""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_248.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_248.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_248.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_604.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_604.cpp,596,602,599,604,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
	    ""Input requires too many filters for decoding"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_488.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_488.cpp,,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_488.cpp,[],second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_488.cpp,0,[],[]
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_248.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_248.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_248.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_605.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_605.cpp,843,850,845,852,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Encountered out-of-order sparse blocks"");","archive_set_error(a, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Encountered out-of-order sparse blocks"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_489.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_489.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Encountered out-of-order sparse blocks"");
			return (ARCHIVE_RETRY);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_489.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_489.cpp,33,"[""member"", ""macro"", ""string""]","[""member"", ""member"", ""<""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_248.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_248.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_248.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_606.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_606.cpp,953,975,953,975,"archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Internal error: ""
		    ""No format_read_data_block function registered"");","archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Internal error: ""
		    ""No format->read_data function registered"");",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_490.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_490.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
		    ""Internal error: ""
		    ""No format_read_data_block function registered"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_490.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_490.cpp,9,[],"[""member"", ""null"", ""==""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_ar.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_249.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_249.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_249.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_610.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_610.cpp,311,318,312,319,"archive_set_error(&a->archive, EINVAL,
			    ""Can't find long filename for entry"");","archive_set_error(&a->archive, EINVAL,
			    ""Can't find long filename for GNU/SVR4 archive entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_491.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_491.cpp,"{
			archive_set_error(&a->archive, EINVAL,
			    ""Can't find long filename for entry"");
			archive_entry_copy_pathname(entry, filename);
			/* Parse the time, owner, mode, size fields. */
			ar_parse_common_header(ar, entry, h);
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_491.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_491.cpp,145,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""=="", ""ar_atol10_ret"", ""member"", "">"", ""||""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_iso9660.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_250.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_250.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_250.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_613.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_613.cpp,1793,1801,1797,1807,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Directory structure contains loop"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_493.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_493.cpp,"(file == NULL) {
		archive_set_error(&a->archive, ENOMEM,
		    ""No memory for file entry"");
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_493.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_493.cpp,56,[],"[""toi_ret"", ""null"", ""!="", ""archive_le32dec_ret"", ""null"", ""<"", ""&&"", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_lha.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_251.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_251.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_251.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_615.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_615.cpp,1390,1374,1395,-1,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""LHa data CRC error"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_495.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_495.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""LHa data CRC error"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_495.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_495.cpp,16,"[""member"", ""macro"", ""string""]","[""bool"", ""member"", ""member"", ""!="", ""&&""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_lha.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_251.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_251.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_251.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_616.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_616.cpp,1477,1449,1485,-1,"archive_set_error(&a->archive, ENOMEM,
			    ""No memory for lzh decompression"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_496.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_496.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""No memory for lzh decompression"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_496.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_496.cpp,14,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_252.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_252.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_252.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_618.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_618.cpp,1175,1177,1218,1219,"archive_set_error(&a->archive,
									ARCHIVE_ERRNO_MISC,
									""mtree specification has different type for %s"",
									archive_entry_pathname(entry));","archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""mtree specification has different""
					    "" type for %s"",
					    archive_entry_pathname(entry));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_497.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_497.cpp,"{
							archive_set_error(&a->archive,
									ARCHIVE_ERRNO_MISC,
									""mtree specification has different type for %s"",
									archive_entry_pathname(entry));
							r = ARCHIVE_WARN;
						}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_497.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_497.cpp,147,"[""member"", ""macro"", ""string"", ""archive_entry_pathname_ret""]","[""parse_line_ret"", ""macro"", ""==""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_mtree.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_252.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_252.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_252.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_620.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_620.cpp,1583,1589,1608,1619,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Unrecognized file type \""%s\""; assuming \""file\"""", val);","archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Unrecognized file type \""%s\""; ""
				    ""assuming \""file\"""", val);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_498.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_498.cpp,"{
			case 'b':
				if (strcmp(val, ""block"") == 0) {
					archive_entry_set_filetype(entry, AE_IFBLK);
					break;
				}
			case 'c':
				if (strcmp(val, ""char"") == 0) {
					archive_entry_set_filetype(entry, AE_IFCHR);
					break;
				}
			case 'd':
				if (strcmp(val, ""dir"") == 0) {
					archive_entry_set_filetype(entry, AE_IFDIR);
					break;
				}
			case 'f':
				if (strcmp(val, ""fifo"") == 0) {
					archive_entry_set_filetype(entry, AE_IFIFO);
					break;
				}
				if (strcmp(val, ""file"") == 0) {
					archive_entry_set_filetype(entry, AE_IFREG);
					break;
				}
			case 'l':
				if (strcmp(val, ""link"") == 0) {
					archive_entry_set_filetype(entry, AE_IFLNK);
					break;
				}
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Unrecognized file type \""%s\""; assuming \""file\"""", val);
				archive_entry_set_filetype(entry, AE_IFREG);
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_498.cpp,"[6, 0, 0, 0, 6, 0, 1, 0, 5, 1, 7, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 14, 0, 0, 8, 0, 30, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_498.cpp,206,"[""member"", ""macro"", ""string"", ""strchr_ret""]","[""member""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_623.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_623.cpp,244,414,254,424,"fprintf(stderr, ""Header id 0x%x, length %d\n"",
		    headerid, datasize);","fprintf(stderr, ""Header id 0x%04x, length %d\n"",
		    headerid, datasize);",3,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_499.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_499.cpp,"{
		unsigned short headerid = archive_le16dec(p + offset);
		unsigned short datasize = archive_le16dec(p + offset + 2);
		offset += 4;
		if (offset + datasize > extra_length)
			break;
#ifdef DEBUG
		fprintf(stderr, ""Header id 0x%x, length %d\n"",
		    headerid, datasize);
#endif
		switch (headerid) {
		case 0x0001:
			/* Zip64 extended information extra field. */
			zip_entry->flags |= LA_USED_ZIP64;
			if (zip_entry->uncompressed_size == 0xffffffff) {
				if (datasize < 8)
					break;
				zip_entry->uncompressed_size =
				    archive_le64dec(p + offset);
				offset += 8;
				datasize -= 8;
			}
			if (zip_entry->compressed_size == 0xffffffff) {
				if (datasize < 8)
					break;
				zip_entry->compressed_size =
				    archive_le64dec(p + offset);
				offset += 8;
				datasize -= 8;
			}
			if (zip_entry->local_header_offset == 0xffffffff) {
				if (datasize < 8)
					break;
				zip_entry->local_header_offset =
				    archive_le64dec(p + offset);
				offset += 8;
				datasize -= 8;
			}
			/* archive_le32dec(p + offset) gives disk
			 * on which file starts, but we don't handle
			 * multi-volume Zip files. */
			break;
		case 0x5455:
		{
			/* Extended time field ""UT"". */
			int flags = p[offset];
			offset++;
			datasize--;
			/* Flag bits indicate which dates are present. */
			if (flags & 0x01)
			{
#ifdef DEBUG
				fprintf(stderr, ""mtime: %lld -> %d\n"",
				    (long long)zip_entry->mtime,
				    archive_le32dec(p + offset));
#endif
				if (datasize < 4)
					break;
				zip_entry->mtime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			if (flags & 0x02)
			{
				if (datasize < 4)
					break;
				zip_entry->atime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			if (flags & 0x04)
			{
				if (datasize < 4)
					break;
				zip_entry->ctime = archive_le32dec(p + offset);
				offset += 4;
				datasize -= 4;
			}
			break;
		}
		case 0x5855:
		{
			/* Info-ZIP Unix Extra Field (old version) ""UX"". */
			if (datasize >= 8) {
				zip_entry->atime = archive_le32dec(p + offset);
				zip_entry->mtime =
				    archive_le32dec(p + offset + 4);
			}
			if (datasize >= 12) {
				zip_entry->uid =
				    archive_le16dec(p + offset + 8);
				zip_entry->gid =
				    archive_le16dec(p + offset + 10);
			}
			break;
		}
		case 0x6c65:
		{
			/* Experimental 'el' field */
			/*
			 * Introduced Dec 2013 to provide a way to
			 * include external file attributes in local file
			 * header.  This provides file type and permission
			 * information necessary to support full streaming
			 * extraction.  Currently being discussed with
			 * other Zip developers... subject to change.
			 */
			int bitmap, bitmap_last;

			if (datasize < 1)
				break;
			bitmap_last = bitmap = 0xff & p[offset];
			offset += 1;
			datasize -= 1;

			/* We only support first 7 bits of bitmap; skip rest. */
			while ((bitmap_last & 0x80) != 0
			    && datasize >= 1) {
				bitmap_last = p[offset];
				offset += 1;
				datasize -= 1;
			}

			if (bitmap & 1) {
				// 2 byte ""version made by""
				if (datasize < 2)
					break;
				zip_entry->system
				    = archive_le16dec(p + offset) >> 8;
				offset += 2;
				datasize -= 2;
			}
			if (bitmap & 2) {
				// 2 byte ""internal file attributes""
				uint32_t internal_attributes;
				if (datasize < 2)
					break;
				internal_attributes
				    = archive_le16dec(p + offset);
				// Not used by libarchive at present.
				(void)internal_attributes; /* UNUSED */
				offset += 2;
				datasize -= 2;
			}
			if (bitmap & 4) {
				// 4 byte ""external file attributes""
				uint32_t external_attributes;
				if (datasize < 4)
					break;
				external_attributes
				    = archive_le32dec(p + offset);
				if (zip_entry->system == 3) {
					zip_entry->mode
					    = external_attributes >> 16;
				}
				offset += 4;
				datasize -= 4;
			}
			if (bitmap & 8) {
				// 2 byte comment length + comment
				uint32_t comment_length;
				if (datasize < 2)
					break;
				comment_length
				    = archive_le16dec(p + offset);
				offset += 2;
				datasize -= 2;

				if (datasize < comment_length)
					break;
				// Comment is not supported by libarchive
				offset += comment_length;
				datasize -= comment_length;
			}
			break;
		}
		case 0x7855:
			/* Info-ZIP Unix Extra Field (type 2) ""Ux"". */
#ifdef DEBUG
			fprintf(stderr, ""uid %d gid %d\n"",
			    archive_le16dec(p + offset),
			    archive_le16dec(p + offset + 2));
#endif
			if (datasize >= 2)
				zip_entry->uid = archive_le16dec(p + offset);
			if (datasize >= 4)
				zip_entry->gid =
				    archive_le16dec(p + offset + 2);
			break;
		case 0x7875:
		{
			/* Info-Zip Unix Extra Field (type 3) ""ux"". */
			int uidsize = 0, gidsize = 0;

			/* TODO: support arbitrary uidsize/gidsize. */
			if (datasize >= 1 && p[offset] == 1) {/* version=1 */
				if (datasize >= 4) {
					/* get a uid size. */
					uidsize = p[offset+1];
					if (uidsize == 2)
						zip_entry->uid =
						    archive_le16dec(
						        p + offset + 2);
					else if (uidsize == 4 && datasize >= 6)
						zip_entry->uid =
						    archive_le32dec(
						        p + offset + 2);
				}
				if (datasize >= (2 + uidsize + 3)) {
					/* get a gid size. */
					gidsize = p[offset+2+uidsize];
					if (gidsize == 2)
						zip_entry->gid =
						    archive_le16dec(
						        p+offset+2+uidsize+1);
					else if (gidsize == 4 &&
					    datasize >= (2 + uidsize + 5))
						zip_entry->gid =
						    archive_le32dec(
						        p+offset+2+uidsize+1);
				}
			}
			break;
		}
		default:
			break;
		}
		offset += datasize;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_499.cpp,"[35, 1, 0, 0, 20, 0, 0, 1, 6, 1, 42, 0, 0, 0, 0, 287, 0, 0, 8, 10, 0, 0, 5, 94, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 0, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 6, 0, 37, 35, 0, 0, 28, 0, 0, 60, 2, 37, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_499.cpp,13,"[""unkown"", ""string"", ""unsigned short"", ""unsigned short""]","[""int"", ""size_t"", "">"", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_625.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_625.cpp,683,906,687,911,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Zip file with oversized link entry"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_500.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_500.cpp,"{
		size_t linkname_length = zip_entry->compressed_size;

		archive_entry_set_size(entry, 0);
		p = __archive_read_ahead(a, linkname_length, NULL);
		if (p == NULL) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated Zip file"");
			return ARCHIVE_FATAL;
		}
		if (__archive_read_consume(a, linkname_length) < 0) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");
			return ARCHIVE_FATAL;
		}

		sconv = zip->sconv;
		if (sconv == NULL && (zip->entry->zip_flags & ZIP_UTF8_NAME))
			sconv = zip->sconv_utf8;
		if (sconv == NULL)
			sconv = zip->sconv_default;
		if (archive_entry_copy_symlink_l(entry, p, linkname_length,
		    sconv) != 0) {
			if (errno != ENOMEM && sconv == zip->sconv_utf8 &&
			    (zip->entry->zip_flags & ZIP_UTF8_NAME))
			    archive_entry_copy_symlink_l(entry, p,
				linkname_length, NULL);
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Symlink"");
				return (ARCHIVE_FATAL);
			}
			/*
			 * Since there is no character-set regulation for
			 * symlink name, do not report the conversion error
			 * in an automatic conversion.
			 */
			if (sconv != zip->sconv_utf8 ||
			    (zip->entry->zip_flags & ZIP_UTF8_NAME) == 0) {
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symlink cannot be converted ""
				    ""from %s to current locale."",
				    archive_string_conversion_charset_name(
					sconv));
				ret = ARCHIVE_WARN;
			}
		}
		zip_entry->uncompressed_size = zip_entry->compressed_size = 0;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_500.cpp,"[8, 0, 0, 0, 0, 0, 3, 0, 0, 0, 9, 0, 0, 0, 0, 103, 0, 0, 1, 1, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 8, 0, 0, 10, 0, 0, 12, 0, 29, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_500.cpp,199,"[""struct archive_entry *"", ""null""]","[""bool"", ""macro"", ""==""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_626.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_626.cpp,692,923,695,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_501.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_501.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");
			return ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_501.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_501.cpp,207,"[""member"", ""macro"", ""string""]","[""__archive_read_consume_ret"", ""null"", ""<""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_627.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_627.cpp,731,957,733,961,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_502.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_502.cpp,"(0 == (zip_entry->zip_flags & ZIP_LENGTH_AT_END)
	    || zip_entry->uncompressed_size > 0) {
		/* Set the size only if it's meaningful. */
		archive_entry_set_size(entry, zip_entry->uncompressed_size);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_502.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_502.cpp,245,[],"[""bool"", ""macro"", ""=="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_628.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_628.cpp,744,976,746,978,"snprintf(zip->format_name, sizeof(zip->format_name), ""ZIP %d.%d (%s)"",
	    version / 10, version % 10,
	    compression_name(zip->entry->compression));","archive_string_sprintf(&zip->format_name, ""ZIP %d.%d (%s)"",
	    version / 10, version % 10,
	    compression_name(zip->entry->compression));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_503.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_503.cpp,"{
	const char *p;
	const void *h;
	const wchar_t *wp;
	const char *cp;
	size_t len, filename_length, extra_length;
	struct archive_string_conv *sconv;
	struct zip_entry *zip_entry = zip->entry;
	struct zip_entry zip_entry_central_dir;
	int ret = ARCHIVE_OK;
	char version;

	/* Save a copy of the original for consistency checks. */
	zip_entry_central_dir = *zip_entry;

	zip->decompress_init = 0;
	zip->end_of_entry = 0;
	zip->entry_uncompressed_bytes_read = 0;
	zip->entry_compressed_bytes_read = 0;
	zip->entry_crc32 = zip->crc32func(0, NULL, 0);

	/* Setup default conversion. */
	if (zip->sconv == NULL && !zip->init_default_conversion) {
		zip->sconv_default =
		    archive_string_default_conversion_for_read(&(a->archive));
		zip->init_default_conversion = 1;
	}

	if ((p = __archive_read_ahead(a, 30, NULL)) == NULL) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}

	if (memcmp(p, ""PK\003\004"", 4) != 0) {
		archive_set_error(&a->archive, -1, ""Damaged Zip archive"");
		return ARCHIVE_FATAL;
	}
	version = p[4];
	zip_entry->system = p[5];
	zip_entry->zip_flags = archive_le16dec(p + 6);
	if (zip_entry->zip_flags & (ZIP_ENCRYPTED | ZIP_STRONG_ENCRYPTED)) {
		zip->has_encrypted_entries = 1;
		archive_entry_set_is_data_encrypted(entry, 1);
		if (zip_entry->zip_flags & ZIP_CENTRAL_DIRECTORY_ENCRYPTED &&
			zip_entry->zip_flags & ZIP_ENCRYPTED &&
			zip_entry->zip_flags & ZIP_STRONG_ENCRYPTED) {
			archive_entry_set_is_metadata_encrypted(entry, 1);
			return ARCHIVE_FATAL;
		}
	}
	zip_entry->compression = (char)archive_le16dec(p + 8);
	zip_entry->mtime = zip_time(p + 10);
	zip_entry->crc32 = archive_le32dec(p + 14);
	zip_entry->compressed_size = archive_le32dec(p + 18);
	zip_entry->uncompressed_size = archive_le32dec(p + 22);
	filename_length = archive_le16dec(p + 26);
	extra_length = archive_le16dec(p + 28);

	__archive_read_consume(a, 30);

	/* Read the filename. */
	if ((h = __archive_read_ahead(a, filename_length, NULL)) == NULL) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}
	if (zip_entry->zip_flags & ZIP_UTF8_NAME) {
		/* The filename is stored to be UTF-8. */
		if (zip->sconv_utf8 == NULL) {
			zip->sconv_utf8 =
			    archive_string_conversion_from_charset(
				&a->archive, ""UTF-8"", 1);
			if (zip->sconv_utf8 == NULL)
				return (ARCHIVE_FATAL);
		}
		sconv = zip->sconv_utf8;
	} else if (zip->sconv != NULL)
		sconv = zip->sconv;
	else
		sconv = zip->sconv_default;

	if (archive_entry_copy_pathname_l(entry,
	    h, filename_length, sconv) != 0) {
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted ""
		    ""from %s to current locale."",
		    archive_string_conversion_charset_name(sconv));
		ret = ARCHIVE_WARN;
	}
	__archive_read_consume(a, filename_length);

	/* Work around a bug in Info-Zip: When reading from a pipe, it
	 * stats the pipe instead of synthesizing a file entry. */
	if ((zip_entry->mode & AE_IFMT) == AE_IFIFO) {
		zip_entry->mode &= ~ AE_IFMT;
		zip_entry->mode |= AE_IFREG;
	}

	if ((zip_entry->mode & AE_IFMT) == 0) {
		/* Especially in streaming mode, we can end up
		   here without having seen proper mode information.
		   Guess from the filename. */
		wp = archive_entry_pathname_w(entry);
		if (wp != NULL) {
			len = wcslen(wp);
			if (len > 0 && wp[len - 1] == L'/')
				zip_entry->mode |= AE_IFDIR;
			else
				zip_entry->mode |= AE_IFREG;
		} else {
			cp = archive_entry_pathname(entry);
			len = (cp != NULL)?strlen(cp):0;
			if (len > 0 && cp[len - 1] == '/')
				zip_entry->mode |= AE_IFDIR;
			else
				zip_entry->mode |= AE_IFREG;
		}
		if (zip_entry->mode == AE_IFDIR) {
			zip_entry->mode |= 0775;
		} else if (zip_entry->mode == AE_IFREG) {
			zip_entry->mode |= 0664;
		}
	}

	/* Read the extra data. */
	if ((h = __archive_read_ahead(a, extra_length, NULL)) == NULL) {
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated ZIP file header"");
		return (ARCHIVE_FATAL);
	}

	process_extra(h, extra_length, zip_entry);
	__archive_read_consume(a, extra_length);

	if (zip_entry->flags & LA_FROM_CENTRAL_DIRECTORY) {
		/* If this came from the central dir, it's size info
		 * is definitive, so ignore the length-at-end flag. */
		zip_entry->zip_flags &= ~ZIP_LENGTH_AT_END;
		/* If local header is missing a value, use the one from
		   the central directory.  If both have it, warn about
		   mismatches. */
		if (zip_entry->crc32 == 0) {
			zip_entry->crc32 = zip_entry_central_dir.crc32;
		} else if (!zip->ignore_crc32
		    && zip_entry->crc32 != zip_entry_central_dir.crc32) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent CRC32 values"");
			ret = ARCHIVE_WARN;
		}
		if (zip_entry->compressed_size == 0) {
			zip_entry->compressed_size
			    = zip_entry_central_dir.compressed_size;
		} else if (zip_entry->compressed_size
		    != zip_entry_central_dir.compressed_size) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent compressed size: ""
			    ""%jd in central directory, %jd in local header"",
			    (intmax_t)zip_entry_central_dir.compressed_size,
			    (intmax_t)zip_entry->compressed_size);
			ret = ARCHIVE_WARN;
		}
		if (zip_entry->uncompressed_size == 0) {
			zip_entry->uncompressed_size
			    = zip_entry_central_dir.uncompressed_size;
		} else if (zip_entry->uncompressed_size
		    != zip_entry_central_dir.uncompressed_size) {
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Inconsistent uncompressed size: ""
			    ""%jd in central directory, %jd in local header"",
			    (intmax_t)zip_entry_central_dir.uncompressed_size,
			    (intmax_t)zip_entry->uncompressed_size);
			ret = ARCHIVE_WARN;
		}
	}

	/* Populate some additional entry fields: */
	archive_entry_set_mode(entry, zip_entry->mode);
	archive_entry_set_uid(entry, zip_entry->uid);
	archive_entry_set_gid(entry, zip_entry->gid);
	archive_entry_set_mtime(entry, zip_entry->mtime, 0);
	archive_entry_set_ctime(entry, zip_entry->ctime, 0);
	archive_entry_set_atime(entry, zip_entry->atime, 0);

	if ((zip->entry->mode & AE_IFMT) == AE_IFLNK) {
		size_t linkname_length = zip_entry->compressed_size;

		archive_entry_set_size(entry, 0);
		p = __archive_read_ahead(a, linkname_length, NULL);
		if (p == NULL) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Truncated Zip file"");
			return ARCHIVE_FATAL;
		}
		if (__archive_read_consume(a, linkname_length) < 0) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Read error skipping symlink target name"");
			return ARCHIVE_FATAL;
		}

		sconv = zip->sconv;
		if (sconv == NULL && (zip->entry->zip_flags & ZIP_UTF8_NAME))
			sconv = zip->sconv_utf8;
		if (sconv == NULL)
			sconv = zip->sconv_default;
		if (archive_entry_copy_symlink_l(entry, p, linkname_length,
		    sconv) != 0) {
			if (errno != ENOMEM && sconv == zip->sconv_utf8 &&
			    (zip->entry->zip_flags & ZIP_UTF8_NAME))
			    archive_entry_copy_symlink_l(entry, p,
				linkname_length, NULL);
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Symlink"");
				return (ARCHIVE_FATAL);
			}
			/*
			 * Since there is no character-set regulation for
			 * symlink name, do not report the conversion error
			 * in an automatic conversion.
			 */
			if (sconv != zip->sconv_utf8 ||
			    (zip->entry->zip_flags & ZIP_UTF8_NAME) == 0) {
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Symlink cannot be converted ""
				    ""from %s to current locale."",
				    archive_string_conversion_charset_name(
					sconv));
				ret = ARCHIVE_WARN;
			}
		}
		zip_entry->uncompressed_size = zip_entry->compressed_size = 0;
	} else if (0 == (zip_entry->zip_flags & ZIP_LENGTH_AT_END)
	    || zip_entry->uncompressed_size > 0) {
		/* Set the size only if it's meaningful. */
		archive_entry_set_size(entry, zip_entry->uncompressed_size);
	}
	zip->entry_bytes_remaining = zip_entry->compressed_size;

	/* If there's no body, force read_data() to return EOF immediately. */
	if (0 == (zip_entry->zip_flags & ZIP_LENGTH_AT_END)
	    && zip->entry_bytes_remaining < 1)
		zip->end_of_entry = 1;

	/* Set up a more descriptive format name. */
	snprintf(zip->format_name, sizeof(zip->format_name), ""ZIP %d.%d (%s)"",
	    version / 10, version % 10,
	    compression_name(zip->entry->compression));
	a->archive.archive_format_name = zip->format_name;

	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_503.cpp,"[38, 0, 0, 0, 0, 0, 11, 0, 0, 0, 43, 0, 0, 0, 4, 605, 0, 0, 11, 13, 0, 0, 3, 75, 0, 0, 0, 0, 6, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 326, 1, 275, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 0, 39, 39, 5, 0, 56, 0, 0, 81, 6, 135, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_503.cpp,258,"[""member"", ""member"", ""constant"", ""member"", ""member"", ""compression_name_ret""]","[""archive_entry_copy_symlink_l_ret"", ""null"", ""!="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_read_support_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_254.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_254.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_630.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_630.cpp,1033,1786,1037,-1,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Encrypted file is unsupported"");",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_526.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_526.cpp,"{
		zip->has_encrypted_entries = 1;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Encrypted file is unsupported"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_526.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_526.cpp,25,"[""member"", ""macro"", ""string""]","[""bool""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_add_filter_xz.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_255.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_255.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_255.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_635.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_635.cpp,221,223,238,254,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""Unacceptable dictionary dize for lzip: %d"",
			    dict_size);","archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""Unacceptable dictionary size for lzip: %d"",
			    dict_size);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_527.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_527.cpp,"{
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""Unacceptable dictionary dize for lzip: %d"",
			    dict_size);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_527.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_527.cpp,21,"[""member"", ""macro"", ""string"", ""int""]","[""int"", ""int"", ""<"", ""int"", ""int"", "">"", ""||""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_256.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_256.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_256.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_636.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_636.cpp,1467,1468,1468,1469,"archive_set_error(&a->archive, 0,
		    ""Write request too large"");","archive_set_error(&a->archive, 0,
		    ""Too much data: Truncating file at %ju bytes"", (uintmax_t)a->filesize);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_528.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_528.cpp,"{
		archive_set_error(&a->archive, 0,
		    ""Write request too large"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_528.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_528.cpp,18,"[""member"", ""null"", ""string""]","[""write_data_block_ret"", ""size_t"", ""<""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_256.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_256.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_256.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_637.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_637.cpp,1869,1876,1871,1879,,"archive_set_error(&a->archive, en,
		    ""Hard-link target '%s' does not exist."",
		    archive_entry_hardlink(a->entry));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_529.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_529.cpp,"((en == EISDIR || en == EEXIST)
	    && (a->flags & ARCHIVE_EXTRACT_NO_OVERWRITE)) {
		/* If we're not overwriting, we're done. */
		archive_entry_unset_size(a->entry);
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_529.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_529.cpp,41,[],"[""rmdir_ret"", ""null"", ""==""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_disk_posix.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_256.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_256.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_256.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_640.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_640.cpp,2525,2544,2527,2548,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			                  ""Path is absolute"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_530.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_530.cpp,"(*src == '/')
		separator = *src++",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_530.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_530.cpp,17,[],"[""member"", ""char"", ""=="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_645.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_645.cpp,227,274,229,290,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""deflate compression not supported"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_532.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_532.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_532.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_532.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_645.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_645.cpp,227,274,229,305,,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_533.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_533.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_533.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_533.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_645.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_645.cpp,227,274,229,315,,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_534.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_534.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_534.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_534.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_645.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_645.cpp,227,274,229,325,,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""encryption not supported"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_535.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_535.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_535.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_535.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_645.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_645.cpp,227,274,229,330,,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""%s: unknown encryption '%s'"",
			    a->format_name, val);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_536.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_536.cpp,"(strcmp(key, ""experimental"") == 0) {
		if (val == NULL || val[0] == 0) {
			zip->flags &= ~ ZIP_FLAG_EXPERIMENT_EL;
		} else {
			zip->flags |= ZIP_FLAG_EXPERIMENT_EL;
		}
		return (ARCHIVE_OK);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_536.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_536.cpp,29,"[""const char *"", ""string""]","[""strcmp_ret"", ""null"", ""=="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_647.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_647.cpp,782,1007,784,1053,,"archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Failed to encrypt file"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_537.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_537.cpp,"(zip->entry_compression) {
	case COMPRESSION_STORE:
		ret = __archive_write_output(a, buff, s);
		if (ret != ARCHIVE_OK)
			return (ret);
		zip->written_bytes += s;
		zip->entry_compressed_written += s;
		break;
#if HAVE_ZLIB_H
	case COMPRESSION_DEFLATE:
		zip->stream.next_in = (unsigned char*)(uintptr_t)buff;
		zip->stream.avail_in = (uInt)s;
		do {
			ret = deflate(&zip->stream, Z_NO_FLUSH);
			if (ret == Z_STREAM_ERROR)
				return (ARCHIVE_FATAL);
			if (zip->stream.avail_out == 0) {
				ret = __archive_write_output(a, zip->buf,
					zip->len_buf);
				if (ret != ARCHIVE_OK)
					return (ret);
				zip->entry_compressed_written += zip->len_buf;
				zip->written_bytes += zip->len_buf;
				zip->stream.next_out = zip->buf;
				zip->stream.avail_out = (uInt)zip->len_buf;
			}
		} while (zip->stream.avail_in != 0);
		break;
#endif

	default:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Invalid ZIP compression type"");
		return ARCHIVE_FATAL;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_537.cpp,"[5, 0, 0, 1, 2, 0, 4, 0, 2, 1, 6, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 0, 0, 4, 0, 0, 11, 0, 11, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_537.cpp,12,[],"[""size_t"", ""null"", ""=="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_648.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_648.cpp,799,1083,800,1096,,"archive_set_error(&a->archive,
						    ARCHIVE_ERRNO_MISC,
						    ""Failed to encrypt file"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_538.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_538.cpp,"(zip->stream.avail_out == 0) {
				ret = __archive_write_output(a, zip->buf,
					zip->len_buf);
				if (ret != ARCHIVE_OK)
					return (ret);
				zip->entry_compressed_written += zip->len_buf;
				zip->written_bytes += zip->len_buf;
				zip->stream.next_out = zip->buf;
				zip->stream.avail_out = (uInt)zip->len_buf;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_538.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_538.cpp,28,[],"[""deflate_ret"", ""macro"", ""=="", ""!""]"
1a8c7bc2c649781d1163c1966245a45e0fb829ba,"libarchive 3.1.2-601-g3bfe5f1 (reduced)

Extract upstream libarchive using the following shell code.

url=git://github.com/libarchive/libarchive.git &&
v=3.1.2-601-g3bfe5f1 &&
r=3bfe5f1 &&
paths=""
  CMakeLists.txt
  COPYING
  CTestConfig.cmake
  build/cmake
  build/pkgconfig
  build/utils
  build/version
  libarchive/*.*
"" &&
mkdir libarchive-$v-g$r-reduced &&
git clone $url libarchive-git &&
date=$(cd libarchive-git && git log -n 1 --format='%cd' $r) &&
(cd libarchive-git && git archive --format=tar $r -- $paths) |
(cd libarchive-$v-g$r-reduced && tar xv) &&
fromdos libarchive-$v-g$r-reduced/build/cmake/Find*.cmake &&
echo ""g$r date: $date""",[],libarchive/archive_write_set_format_zip.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_258.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_258.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_649.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_649.cpp,834,1139,840,1155,,"archive_set_error(&a->archive,
					    ARCHIVE_ERRNO_MISC,
					    ""Failed to encrypt file"");",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_539.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_539.cpp,"{
			size_t remainder;
			ret = deflate(&zip->stream, Z_FINISH);
			if (ret == Z_STREAM_ERROR)
				return (ARCHIVE_FATAL);
			remainder = zip->len_buf - zip->stream.avail_out;
			ret = __archive_write_output(a, zip->buf, remainder);
			if (ret != ARCHIVE_OK)
				return (ret);
			zip->entry_compressed_written += remainder;
			zip->written_bytes += remainder;
			zip->stream.next_out = zip->buf;
			if (zip->stream.avail_out != 0)
				break;
			zip->stream.avail_out = (uInt)zip->len_buf;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_539.cpp,"[3, 0, 0, 0, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 56, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 7, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_539.cpp,14,"[""struct archive_write *"", ""member"", ""member""]","[""deflate_ret"", ""macro"", ""=="", ""!""]"
bbef3c2da83b7a69d1f99b21dc92d5506d98fb35,cmLocalGenerator: Add current binary directory accessor.,[],Source/cmLocalVisualStudio6Generator.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_259.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_259.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_259.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_652.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_652.cpp,578,578,582,582,"sprintf(output,""%s/%s_force_%i"", this->Makefile->GetCurrentBinaryDirectory(),
          target.GetName().c_str(), count);","sprintf(output,""%s/%s_force_%i"", this->GetCurrentBinaryDirectory(),
          target.GetName().c_str(), count);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_546.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_546.cpp,"{
  // Create a fake output that forces the rule to run.
  char* output = new char[(strlen(this->Makefile->GetCurrentBinaryDirectory())
                           + target.GetName().size() + 30)];
  sprintf(output,""%s/%s_force_%i"", this->Makefile->GetCurrentBinaryDirectory(),
          target.GetName().c_str(), count);
  const char* comment = origCommand.GetComment();
  if(!comment && origCommand.GetOutputs().empty())
    {
    comment = ""<hack>"";
    }

  // Add the rule with the given dependencies and commands.
  std::string no_main_dependency = """";
  if(cmSourceFile* outsf =
     this->Makefile->AddCustomCommandToOutput(
       output, depends, no_main_dependency,
       origCommand.GetCommandLines(), comment,
       origCommand.GetWorkingDirectory().c_str()))
    {
    cmGeneratorTarget* gt = this->GlobalGenerator->GetGeneratorTarget(&target);
    gt->AddSource(outsf->GetFullPath());
    }

  // Replace the dependencies with the output of this rule so that the
  // next rule added will run after this one.
  depends.clear();
  depends.push_back(output);

  // Free the fake output name.
  delete [] output;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_546.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 77, 0, 0, 4, 5, 0, 0, 5, 4, 0, 0, 0, 0, 4, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 2, 2, 0, 0, 20, 0, 0, 6, 0, 15, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_546.cpp,9,"[""char *"", ""string"", ""this -> Makefile -> GetCurrentBinaryDirectory_ret"", ""target . GetName ( ) . c_str_ret"", ""int""]",[]
2e6063068c94d4045e699fed51e6d1e9af344bbf,"Merge branch 'improve-variable-help-formatting' into revert-cmake-W-options

Resolve conflicts in

 Help/variable/CMAKE_ERROR_DEPRECATED.rst
 Help/variable/CMAKE_WARN_DEPRECATED.rst

by integrating changes from both sides.",[],Source/cmGlobalGenerator.cxx,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_261.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_261.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_261.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_654.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_654.cpp,1111,1148,1113,1150,"sprintf(num,""%d"",static_cast<int>(this->LocalGenerators.size()));","sprintf(num,""%d"",static_cast<int>(this->Makefiles.size()));",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_547.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_547.cpp,"{
  this->FirstTimeProgress = 0.0f;
  this->ClearGeneratorMembers();

  // start with this directory
  cmLocalGenerator *lg = this->MakeLocalGenerator();
  this->LocalGenerators.push_back(lg);

  // set the Start directories
  lg->GetMakefile()->SetCurrentSourceDirectory
    (this->CMakeInstance->GetHomeDirectory());
  lg->GetMakefile()->SetCurrentBinaryDirectory
    (this->CMakeInstance->GetHomeOutputDirectory());

  this->BinaryDirectories.insert(
      this->CMakeInstance->GetHomeOutputDirectory());

  // now do it
  lg->GetMakefile()->Configure();
  lg->GetMakefile()->EnforceDirectoryLevelRules();

  // update the cache entry for the number of local generators, this is used
  // for progress
  char num[100];
  sprintf(num,""%d"",static_cast<int>(this->LocalGenerators.size()));
  this->GetCMakeInstance()->AddCacheEntry
    (""CMAKE_NUMBER_OF_LOCAL_GENERATORS"", num,
     ""number of local generators"", cmState::INTERNAL);

  // check for link libraries and include directories containing ""NOTFOUND""
  // and for infinite loops
  this->CheckLocalGenerators();

  // at this point this->LocalGenerators has been filled,
  // so create the map from project name to vector of local generators
  this->FillProjectMap();

  if ( this->CMakeInstance->GetWorkingMode() == cmake::NORMAL_MODE)
    {
    std::ostringstream msg;
    if(cmSystemTools::GetErrorOccuredFlag())
      {
      msg << ""Configuring incomplete, errors occurred!"";
      const char* logs[] = {""CMakeOutput.log"", ""CMakeError.log"", 0};
      for(const char** log = logs; *log; ++log)
        {
        std::string f = this->CMakeInstance->GetHomeOutputDirectory();
        f += this->CMakeInstance->GetCMakeFilesDirectory();
        f += ""/"";
        f += *log;
        if(cmSystemTools::FileExists(f.c_str()))
          {
          msg << ""\nSee also \"""" << f << ""\""."";
          }
        }
      }
    else
      {
      msg << ""Configuring done"";
      }
    this->CMakeInstance->UpdateProgress(msg.str().c_str(), -1);
    }

  unsigned int i;

  // Put a copy of each global target in every directory.
  cmTargets globalTargets;
  this->CreateDefaultGlobalTargets(&globalTargets);

  for (i = 0; i < this->LocalGenerators.size(); ++i)
    {
    cmMakefile* mf = this->LocalGenerators[i]->GetMakefile();
    cmTargets* targets = &(mf->GetTargets());
    cmTargets::iterator tit;
    for ( tit = globalTargets.begin(); tit != globalTargets.end(); ++ tit )
      {
      (*targets)[tit->first] = tit->second;
      (*targets)[tit->first].SetMakefile(mf);
      }
    }

}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_547.cpp,"[3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 182, 0, 0, 10, 11, 0, 0, 9, 15, 0, 0, 0, 0, 6, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 64, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 5, 0, 6, 3, 1, 0, 39, 0, 0, 22, 0, 18, 0, 3, 0, 0, 3, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_547.cpp,25,"[""char *"", ""string"", ""bool""]",[]
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_275.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_675.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_675.cpp,1933,1967,1943,-1,"snprintf(ftpc->newhost, sizeof(ftpc->newhost), ""%s"",
                     conn->host.name);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_548.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_548.cpp,"snprintf(ftpc->newhost, sizeof(ftpc->newhost), ""%s"",
                     conn->host.name)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_548.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_548.cpp,50,"[""member"", ""member"", ""string"", ""member""]","[""member"", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""||"", ""||"", ""||"", ""||""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_275.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_675.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_675.cpp,1933,1967,1947,-1,"snprintf(ftpc->newhost, NEWHOST_BUFSIZE, ""%s"", conn->ip_addr_str);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_549.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_549.cpp,"snprintf(ftpc->newhost, NEWHOST_BUFSIZE, ""%s"", conn->ip_addr_str)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_549.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_549.cpp,54,"[""member"", ""macro"", ""string"", ""member""]","[""member"", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""||"", ""||"", ""||"", ""||"", ""!""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_275.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_676.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_676.cpp,1986,2010,2000,-1,"snprintf(ftpc->newhost, sizeof(ftpc->newhost), ""%s"", conn->host.name);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_550.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_550.cpp,"snprintf(ftpc->newhost, sizeof(ftpc->newhost), ""%s"", conn->host.name)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_550.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_550.cpp,107,"[""member"", ""member"", ""string"", ""member""]","[""member"", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""||"", ""||"", ""||"", ""||""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_275.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_676.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_676.cpp,1986,2010,2002,-1,"snprintf(ftpc->newhost, sizeof(ftpc->newhost), ""%s"",
                 conn->ip_addr_str);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_551.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_551.cpp,"snprintf(ftpc->newhost, sizeof(ftpc->newhost), ""%s"",
                 conn->ip_addr_str)",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_551.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_551.cpp,109,"[""member"", ""member"", ""string"", ""member""]","[""member"", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""member"", ""macro"", ""=="", ""||"", ""||"", ""||"", ""||"", ""!""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/ftp.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_275.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_275.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_676.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_676.cpp,1986,2010,2006,2020,"snprintf(ftpc->newhost, sizeof(ftpc->newhost),
               ""%d.%d.%d.%d"", ip[0], ip[1], ip[2], ip[3]);","ftpc->newhost = aprintf(""%d.%d.%d.%d"", ip[0], ip[1], ip[2], ip[3]);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_552.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_552.cpp,"snprintf(ftpc->newhost, sizeof(ftpc->newhost),
               ""%d.%d.%d.%d"", ip[0], ip[1], ip[2], ip[3])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_552.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_552.cpp,113,"[""member"", ""member"", ""constant"", ""member"", ""member"", ""member"", ""member""]","[""member"", ""!""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_276.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_276.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_276.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_678.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_678.cpp,1958,1996,1960,1999,,"conn->allocptr.host = aprintf(""%s\r\n"", ptr);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_553.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_553.cpp,"{
#if !defined(CURL_DISABLE_COOKIES)
    /* If we have a given custom Host: header, we extract the host name in
       order to possibly use it for cookie reasons later on. We only allow the
       custom Host: header if this is NOT a redirect, as setting Host: in the
       redirected request is being out on thin ice. Except if the host name
       is the same as the first one! */
    char *cookiehost = Curl_copy_header_value(ptr);
    if(!cookiehost)
      return CURLE_OUT_OF_MEMORY;
    if(!*cookiehost)
      /* ignore empty data */
      free(cookiehost);
    else {
      /* If the host begins with '[', we start searching for the port after
         the bracket has been closed */
      int startsearch = 0;
      if(*cookiehost == '[') {
        char *closingbracket;
        /* since the 'cookiehost' is an allocated memory area that will be
           freed later we cannot simply increment the pointer */
        memmove(cookiehost, cookiehost + 1, strlen(cookiehost) - 1);
        closingbracket = strchr(cookiehost, ']');
        if(closingbracket)
          *closingbracket = 0;
      }
      else {
        char *colon = strchr(cookiehost + startsearch, ':');
        if(colon)
          *colon = 0; /* The host must not include an embedded port number */
      }
      Curl_safefree(conn->allocptr.cookiehost);
      conn->allocptr.cookiehost = cookiehost;
    }
#endif

    conn->allocptr.host = NULL;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_553.cpp,"[6, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 48, 0, 0, 4, 4, 0, 0, 3, 8, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 5, 2, 0, 8, 0, 0, 8, 0, 12, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_553.cpp,247,[],"[""char *"", ""!"", ""!""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_276.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_276.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_276.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_679.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_679.cpp,2153,2198,2157,2201,"conn->allocptr.rangeline = aprintf(""Range: bytes=%s\r\n"",
                                         data->state.range);","conn->allocptr.rangeline = aprintf(""Range: bytes=%s\r\n"",
                                         data->state.range);",7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_554.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_554.cpp,"{
      /* if a line like this was already allocated, free the previous one */
      if(conn->allocptr.rangeline)
        free(conn->allocptr.rangeline);
      conn->allocptr.rangeline = aprintf(""Range: bytes=%s\r\n"",
                                         data->state.range);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_554.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_554.cpp,444,"[""string"", ""member""]","[""Curl_HttpReq"", ""macro"", ""=="", ""Curl_HttpReq"", ""macro"", ""=="", ""||"", ""Curl_checkheaders_ret"", ""!"", ""&&""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_680.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_680.cpp,26,26,261,-1,"snprintf((char *)&dest[i*2], 3, ""%02x"", source[i]);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_555.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_555.cpp,"snprintf((char *)&dest[i*2], 3, ""%02x"", source[i])",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_555.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_555.cpp,5,"[""member"", ""int"", ""string"", ""member""]","[""null"", ""int"", ""<""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_681.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_681.cpp,352,112,369,-1,"snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_556.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_556.cpp,"{
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));
    rc = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                            &cnonce, &cnonce_sz);
    if(rc)
      return rc;
    d->cnonce = cnonce;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_556.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 23, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 8, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_556.cpp,73,"[""char *"", ""unkown"", ""string"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret"", ""Curl_rand_ret""]","[""member""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_681.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_681.cpp,352,112,402,-1,"tmp = aprintf(""%s:%s:%s"", ha1, d->nonce, d->cnonce);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_558.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_558.cpp,"{
    /* nonce and cnonce are OUTSIDE the hash */
    tmp = aprintf(""%s:%s:%s"", ha1, d->nonce, d->cnonce);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;
    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* convert on non-ASCII machines */
    Curl_md5it(md5buf, (unsigned char *)tmp);
    Curl_safefree(tmp);
    md5_to_ascii(md5buf, ha1);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_558.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 5, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_558.cpp,106,"[""string"", ""unsigned char *"", ""member"", ""member""]","[""member"", ""macro"", ""==""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_682.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_682.cpp,435,141,442,-1,"md5this = (unsigned char *)aprintf(""%s:%.*s"", request, urilen, uripath);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_559.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_559.cpp,"{
  /* We have a Digest setup for this, use it!  Now, to get all the details for
     this sorted out, I must urge you dear friend to read up on the RFC2617
     section 3.2.2, */
  size_t urilen;
  unsigned char md5buf[16]; /* 16 bytes/128 bits */
  unsigned char request_digest[33];
  unsigned char *md5this;
  unsigned char ha1[33];/* 32 digits and 1 zero byte */
  unsigned char ha2[33];/* 32 digits and 1 zero byte */
  char cnoncebuf[33];
  char *cnonce = NULL;
  size_t cnonce_sz = 0;
  char *tmp = NULL;
  char **allocuserpwd;
  size_t userlen;
  const char *userp;
  char *userp_quoted;
  const char *passwdp;
  struct auth *authp;

  struct SessionHandle *data = conn->data;
  struct digestdata *d;
  CURLcode rc;
/* The CURL_OUTPUT_DIGEST_CONV macro below is for non-ASCII machines.
   It converts digest text to ASCII so the MD5 will be correct for
   what ultimately goes over the network.
*/
#define CURL_OUTPUT_DIGEST_CONV(a, b) \
  rc = Curl_convert_to_network(a, (char *)b, strlen((const char*)b)); \
  if(rc != CURLE_OK) { \
    free(b); \
    return rc; \
  }

  if(proxy) {
    d = &data->state.proxydigest;
    allocuserpwd = &conn->allocptr.proxyuserpwd;
    userp = conn->proxyuser;
    passwdp = conn->proxypasswd;
    authp = &data->state.authproxy;
  }
  else {
    d = &data->state.digest;
    allocuserpwd = &conn->allocptr.userpwd;
    userp = conn->user;
    passwdp = conn->passwd;
    authp = &data->state.authhost;
  }

  Curl_safefree(*allocuserpwd);

  /* not set means empty */
  if(!userp)
    userp="""";

  if(!passwdp)
    passwdp="""";

  if(!d->nonce) {
    authp->done = FALSE;
    return CURLE_OK;
  }
  authp->done = TRUE;

  if(!d->nc)
    d->nc = 1;

  if(!d->cnonce) {
    snprintf(cnoncebuf, sizeof(cnoncebuf), ""%08x%08x%08x%08x"",
             Curl_rand(data), Curl_rand(data),
             Curl_rand(data), Curl_rand(data));
    rc = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
                            &cnonce, &cnonce_sz);
    if(rc)
      return rc;
    d->cnonce = cnonce;
  }

  /*
    if the algorithm is ""MD5"" or unspecified (which then defaults to MD5):

    A1 = unq(username-value) "":"" unq(realm-value) "":"" passwd

    if the algorithm is ""MD5-sess"" then:

    A1 = H( unq(username-value) "":"" unq(realm-value) "":"" passwd )
         "":"" unq(nonce-value) "":"" unq(cnonce-value)
  */

  md5this = (unsigned char *)
    aprintf(""%s:%s:%s"", userp, d->realm, passwdp);
  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  Curl_safefree(md5this);
  md5_to_ascii(md5buf, ha1);

  if(d->algo == CURLDIGESTALGO_MD5SESS) {
    /* nonce and cnonce are OUTSIDE the hash */
    tmp = aprintf(""%s:%s:%s"", ha1, d->nonce, d->cnonce);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;
    CURL_OUTPUT_DIGEST_CONV(data, tmp); /* convert on non-ASCII machines */
    Curl_md5it(md5buf, (unsigned char *)tmp);
    Curl_safefree(tmp);
    md5_to_ascii(md5buf, ha1);
  }

  /*
    If the ""qop"" directive's value is ""auth"" or is unspecified, then A2 is:

      A2       = Method "":"" digest-uri-value

          If the ""qop"" value is ""auth-int"", then A2 is:

      A2       = Method "":"" digest-uri-value "":"" H(entity-body)

    (The ""Method"" value is the HTTP request method as specified in section
    5.1.1 of RFC 2616)
  */

  /* So IE browsers < v7 cut off the URI part at the query part when they
     evaluate the MD5 and some (IIS?) servers work with them so we may need to
     do the Digest IE-style. Note that the different ways cause different MD5
     sums to get sent.

     Apache servers can be set to do the Digest IE-style automatically using
     the BrowserMatch feature:
     http://httpd.apache.org/docs/2.2/mod/mod_auth_digest.html#msie

     Further details on Digest implementation differences:
     http://www.fngtps.com/2006/09/http-authentication
  */

  if(authp->iestyle && ((tmp = strchr((char *)uripath, '?')) != NULL))
    urilen = tmp - (char *)uripath;
  else
    urilen = strlen((char *)uripath);

  md5this = (unsigned char *)aprintf(""%s:%.*s"", request, urilen, uripath);

  if(d->qop && Curl_raw_equal(d->qop, ""auth-int"")) {
    /* We don't support auth-int for PUT or POST at the moment.
       TODO: replace md5 of empty string with entity-body for PUT/POST */
    unsigned char *md5this2 = (unsigned char *)
      aprintf(""%s:%s"", md5this, ""d41d8cd98f00b204e9800998ecf8427e"");
    Curl_safefree(md5this);
    md5this = md5this2;
  }

  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  Curl_safefree(md5this);
  md5_to_ascii(md5buf, ha2);

  if(d->qop) {
    md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       d->nonce,
                                       d->nc,
                                       d->cnonce,
                                       d->qop,
                                       ha2);
  }
  else {
    md5this = (unsigned char *)aprintf(""%s:%s:%s"",
                                       ha1,
                                       d->nonce,
                                       ha2);
  }
  if(!md5this)
    return CURLE_OUT_OF_MEMORY;

  CURL_OUTPUT_DIGEST_CONV(data, md5this); /* convert on non-ASCII machines */
  Curl_md5it(md5buf, md5this);
  Curl_safefree(md5this);
  md5_to_ascii(md5buf, request_digest);

  /* for test case 64 (snooped from a Mozilla 1.3a request)

    Authorization: Digest username=""testuser"", realm=""testrealm"", \
    nonce=""1053604145"", uri=""/64"", response=""c55f7f30d83d774a3d2dcacf725abaca""

    Digest parameters are all quoted strings.  Username which is provided by
    the user will need double quotes and backslashes within it escaped.  For
    the other fields, this shouldn't be an issue.  realm, nonce, and opaque
    are copied as is from the server, escapes and all.  cnonce is generated
    with web-safe characters.  uri is already percent encoded.  nc is 8 hex
    characters.  algorithm and qop with standard values only contain web-safe
    chracters.
  */
  userp_quoted = string_quoted(userp);
  if(!userp_quoted)
    return CURLE_OUT_OF_MEMORY;

  if(d->qop) {
    *allocuserpwd =
      aprintf( ""%sAuthorization: Digest ""
               ""username=\""%s\"", ""
               ""realm=\""%s\"", ""
               ""nonce=\""%s\"", ""
               ""uri=\""%.*s\"", ""
               ""cnonce=\""%s\"", ""
               ""nc=%08x, ""
               ""qop=%s, ""
               ""response=\""%s\"""",
               proxy?""Proxy-"":"""",
               userp_quoted,
               d->realm,
               d->nonce,
               urilen, uripath, /* this is the PATH part of the URL */
               d->cnonce,
               d->nc,
               d->qop,
               request_digest);

    if(Curl_raw_equal(d->qop, ""auth""))
      d->nc++; /* The nc (from RFC) has to be a 8 hex digit number 0 padded
                  which tells to the server how many times you are using the
                  same nonce in the qop=auth mode. */
  }
  else {
    *allocuserpwd =
      aprintf( ""%sAuthorization: Digest ""
               ""username=\""%s\"", ""
               ""realm=\""%s\"", ""
               ""nonce=\""%s\"", ""
               ""uri=\""%.*s\"", ""
               ""response=\""%s\"""",
               proxy?""Proxy-"":"""",
               userp_quoted,
               d->realm,
               d->nonce,
               urilen, uripath, /* this is the PATH part of the URL */
               request_digest);
  }
  Curl_safefree(userp_quoted);
  if(!*allocuserpwd)
    return CURLE_OUT_OF_MEMORY;

  /* Add optional fields */
  if(d->opaque) {
    /* append opaque */
    tmp = aprintf(""%s, opaque=\""%s\"""", *allocuserpwd, d->opaque);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;
    free(*allocuserpwd);
    *allocuserpwd = tmp;
  }

  if(d->algorithm) {
    /* append algorithm */
    tmp = aprintf(""%s, algorithm=\""%s\"""", *allocuserpwd, d->algorithm);
    if(!tmp)
      return CURLE_OUT_OF_MEMORY;
    free(*allocuserpwd);
    *allocuserpwd = tmp;
  }

  /* append CRLF + zero (3 bytes) to the userpwd header */
  userlen = strlen(*allocuserpwd);
  tmp = realloc(*allocuserpwd, userlen + 3);
  if(!tmp)
    return CURLE_OUT_OF_MEMORY;
  strcpy(&tmp[userlen], ""\r\n""); /* append the data */
  *allocuserpwd = tmp;

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_block_559.cpp,"[24, 0, 0, 0, 0, 0, 12, 0, 0, 0, 29, 0, 0, 0, 2, 408, 0, 0, 20, 20, 0, 0, 5, 43, 0, 0, 0, 0, 12, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 2, 227, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 22, 0, 6, 0, 26, 26, 6, 0, 47, 2, 0, 59, 0, 115, 1, 0, 1, 1, 0, 0]",second/download/CMake/CMake-old-new/CMake-old-new-joern/Kitware_CMake_old_new_function_559.cpp,146,"[""constant"", ""const unsigned char *"", ""strchr_ret"", ""const unsigned char *""]","[""aprintf_ret"", ""!"", ""!""]"
91e8d35ab8ec2d62478a42eff10af88713497fad,"Merge branch 'curl-upstream' into update-curl

Resolve conflicts by taking upstream side when possible and otherwise
integrating the changes from both sides.  Be carful in CMakeLists.txt
where the OPENSSL code block that we modified previously has moved, and
preserve our previous modifications in the new location.",[],Utilities/cmcurl/lib/http_digest.c,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_old_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_new_file_277.cpp,second/download/CMake/CMake-old-new/CMake-old-new/Kitware_CMake_patch_277.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_hunk_682.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_new_hunk_682.cpp,435,141,462,-1,"md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       d->nonce,
                                       d->nc,
                                       d->cnonce,
                                       d->qop,
                                       ha2);",,7,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_old_log_561.cpp,second/download/CMake/CMake-gumtree/Kitware_CMake_old_new_new_log_561.cpp,"{
    md5this = (unsigned char *)aprintf(""%s:%s:%08x:%s:%s:%s"",
                                       ha1,
                                       d->nonce,
                                       d->nc,
                                       d->cnonce,
                                       d->qop,
                                       ha2);
  }",seco