file,loc,log,log_file,block,block_file,block_feature,function_file,function_loc,ddg_feature,cdg_feature
second/download/CMake/CMake/CMake/Utilities/cmzlib/gzio.cpp,612,"(void)vsprintf(buf, format, va);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2.cpp,"{
    char buf[Z_PRINTF_BUFSIZE];
    va_list va;
    int len;

    buf[sizeof(buf) - 1] = 0;
    va_start(va, format);
#ifdef NO_vsnprintf
#  ifdef HAS_vsprintf_void
    (void)vsprintf(buf, format, va);
    va_end(va);
    for (len = 0; len < sizeof(buf); len++)
        if (buf[len] == 0) break;
#  else
    len = vsprintf(buf, format, va);
    va_end(va);
#  endif
#else
#  ifdef HAS_vsnprintf_void
    (void)vsnprintf(buf, sizeof(buf), format, va);
    va_end(va);
    len = strlen(buf);
#  else
    len = vsnprintf(buf, sizeof(buf), format, va);
    va_end(va);
#  endif
#endif
    if (len <= 0 || len >= (int)sizeof(buf) || buf[sizeof(buf) - 1] != 0)
        return 0;
    return gzwrite(file, buf, (unsigned)len);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2.cpp,"[2, 0, 1, 0, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 69, 0, 0, 3, 3, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 52, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 3, 2, 3, 0, 17, 0, 0, 11, 0, 30, 9, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2.cpp,10,"[""char *"", ""const char *"", ""va_list""]",[]
second/download/CMake/CMake/CMake/Utilities/cmzlib/gzio.cpp,617,"len = vsprintf(buf, format, va);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_3.cpp,"{
    char buf[Z_PRINTF_BUFSIZE];
    va_list va;
    int len;

    buf[sizeof(buf) - 1] = 0;
    va_start(va, format);
#ifdef NO_vsnprintf
#  ifdef HAS_vsprintf_void
    (void)vsprintf(buf, format, va);
    va_end(va);
    for (len = 0; len < sizeof(buf); len++)
        if (buf[len] == 0) break;
#  else
    len = vsprintf(buf, format, va);
    va_end(va);
#  endif
#else
#  ifdef HAS_vsnprintf_void
    (void)vsnprintf(buf, sizeof(buf), format, va);
    va_end(va);
    len = strlen(buf);
#  else
    len = vsnprintf(buf, sizeof(buf), format, va);
    va_end(va);
#  endif
#endif
    if (len <= 0 || len >= (int)sizeof(buf) || buf[sizeof(buf) - 1] != 0)
        return 0;
    return gzwrite(file, buf, (unsigned)len);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_3.cpp,"[2, 0, 1, 0, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 69, 0, 0, 3, 3, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 52, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 3, 2, 3, 0, 17, 0, 0, 11, 0, 30, 9, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_3.cpp,15,"[""char *"", ""const char *"", ""va_list""]","[""member"", ""null"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmzlib/inflate.cpp,284,"printf(""    static const code lenfix[%u] = {"", size);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_11.cpp,"{
    unsigned low, size;
    struct inflate_state state;

    fixedtables(&state);
    puts(""    /* inffixed.h -- table for decoding fixed codes"");
    puts(""     * Generated automatically by makefixed()."");
    puts(""     */"");
    puts("""");
    puts(""    /* WARNING: this file should *not* be used by applications."");
    puts(""       It is part of the implementation of this library and is"");
    puts(""       subject to change. Applications should only use zlib.h."");
    puts(""     */"");
    puts("""");
    size = 1U << 9;
    printf(""    static const code lenfix[%u] = {"", size);
    low = 0;
    for (;;) {
        if ((low % 7) == 0) printf(""\n        "");
        printf(""{%u,%u,%d}"", state.lencode[low].op, state.lencode[low].bits,
               state.lencode[low].val);
        if (++low == size) break;
        putchar(',');
    }
    puts(""\n    };"");
    size = 1U << 5;
    printf(""\n    static const code distfix[%u] = {"", size);
    low = 0;
    for (;;) {
        if ((low % 6) == 0) printf(""\n        "");
        printf(""{%u,%u,%d}"", state.distcode[low].op, state.distcode[low].bits,
               state.distcode[low].val);
        if (++low == size) break;
        putchar(',');
    }
    puts(""\n    };"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_11.cpp,"[4, 0, 2, 0, 2, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 70, 0, 0, 2, 3, 0, 0, 2, 29, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 6, 4, 0, 0, 20, 0, 0, 24, 0, 28, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_11.cpp,16,"[""string"", ""constant""]",[]
second/download/CMake/CMake/CMake/Utilities/cmzlib/inflate.cpp,287,((low % 7) == 0;,second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_12.cpp,"((low % 7) == 0) printf(""\n        "")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_12.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_12.cpp,19,"[""string""]","[""null"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmzlib/inflate.cpp,288,"printf(""{%u,%u,%d}"", state.lencode[low].op, state.lencode[low].bits,
               state.lencode[low].val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_13.cpp,"{
        if ((low % 7) == 0) printf(""\n        "");
        printf(""{%u,%u,%d}"", state.lencode[low].op, state.lencode[low].bits,
               state.lencode[low].val);
        if (++low == size) break;
        putchar(',');
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_13.cpp,"[2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 2, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_13.cpp,20,"[""string"", ""member"", ""member"", ""member""]",[]
second/download/CMake/CMake/CMake/Utilities/cmzlib/inflate.cpp,295,"printf(""\n    static const code distfix[%u] = {"", size);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_14.cpp,"{
    unsigned low, size;
    struct inflate_state state;

    fixedtables(&state);
    puts(""    /* inffixed.h -- table for decoding fixed codes"");
    puts(""     * Generated automatically by makefixed()."");
    puts(""     */"");
    puts("""");
    puts(""    /* WARNING: this file should *not* be used by applications."");
    puts(""       It is part of the implementation of this library and is"");
    puts(""       subject to change. Applications should only use zlib.h."");
    puts(""     */"");
    puts("""");
    size = 1U << 9;
    printf(""    static const code lenfix[%u] = {"", size);
    low = 0;
    for (;;) {
        if ((low % 7) == 0) printf(""\n        "");
        printf(""{%u,%u,%d}"", state.lencode[low].op, state.lencode[low].bits,
               state.lencode[low].val);
        if (++low == size) break;
        putchar(',');
    }
    puts(""\n    };"");
    size = 1U << 5;
    printf(""\n    static const code distfix[%u] = {"", size);
    low = 0;
    for (;;) {
        if ((low % 6) == 0) printf(""\n        "");
        printf(""{%u,%u,%d}"", state.distcode[low].op, state.distcode[low].bits,
               state.distcode[low].val);
        if (++low == size) break;
        putchar(',');
    }
    puts(""\n    };"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_14.cpp,"[4, 0, 2, 0, 2, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 70, 0, 0, 2, 3, 0, 0, 2, 29, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 6, 4, 0, 0, 20, 0, 0, 24, 0, 28, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_14.cpp,27,"[""string"", ""constant""]",[]
second/download/CMake/CMake/CMake/Utilities/cmzlib/inflate.cpp,298,((low % 6) == 0;,second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_15.cpp,"((low % 6) == 0) printf(""\n        "")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_15.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_15.cpp,30,"[""string""]","[""null"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmzlib/inflate.cpp,299,"printf(""{%u,%u,%d}"", state.distcode[low].op, state.distcode[low].bits,
               state.distcode[low].val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_16.cpp,"{
        if ((low % 6) == 0) printf(""\n        "");
        printf(""{%u,%u,%d}"", state.distcode[low].op, state.distcode[low].bits,
               state.distcode[low].val);
        if (++low == size) break;
        putchar(',');
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_16.cpp,"[2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 2, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_16.cpp,31,"[""string"", ""member"", ""member"", ""member""]",[]
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2recover.cpp,322,"fprintf(stderr, 
                    ""\trestrictions on size of recovered file: None\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_20.cpp,"{
         case 8:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: None\n"");
            break;
         case 4:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: 512 MB\n"");
            fprintf(stderr, 
                    ""\tto circumvent, recompile with MaybeUInt64 as an\n""
                    ""\tunsigned 64-bit int.\n"");
            break;
         default:
            fprintf(stderr, 
                    ""\tsizeof(MaybeUInt64) is not 4 or 8 -- ""
                    ""configuration error.\n"");
            break;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_20.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_20.cpp,22,"[""unkown"", ""string""]","[""unkown""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2recover.cpp,326,"fprintf(stderr, 
                    ""\trestrictions on size of recovered file: 512 MB\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_21.cpp,"{
         case 8:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: None\n"");
            break;
         case 4:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: 512 MB\n"");
            fprintf(stderr, 
                    ""\tto circumvent, recompile with MaybeUInt64 as an\n""
                    ""\tunsigned 64-bit int.\n"");
            break;
         default:
            fprintf(stderr, 
                    ""\tsizeof(MaybeUInt64) is not 4 or 8 -- ""
                    ""configuration error.\n"");
            break;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_21.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_21.cpp,26,"[""unkown"", ""string""]","[""unkown""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2recover.cpp,328,"fprintf(stderr, 
                    ""\tto circumvent, recompile with MaybeUInt64 as an\n""
                    ""\tunsigned 64-bit int.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_22.cpp,"{
         case 8:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: None\n"");
            break;
         case 4:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: 512 MB\n"");
            fprintf(stderr, 
                    ""\tto circumvent, recompile with MaybeUInt64 as an\n""
                    ""\tunsigned 64-bit int.\n"");
            break;
         default:
            fprintf(stderr, 
                    ""\tsizeof(MaybeUInt64) is not 4 or 8 -- ""
                    ""configuration error.\n"");
            break;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_22.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_22.cpp,28,[],"[""unkown""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2recover.cpp,333,"fprintf(stderr, 
                    ""\tsizeof(MaybeUInt64) is not 4 or 8 -- ""
                    ""configuration error.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_23.cpp,"{
         case 8:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: None\n"");
            break;
         case 4:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: 512 MB\n"");
            fprintf(stderr, 
                    ""\tto circumvent, recompile with MaybeUInt64 as an\n""
                    ""\tunsigned 64-bit int.\n"");
            break;
         default:
            fprintf(stderr, 
                    ""\tsizeof(MaybeUInt64) is not 4 or 8 -- ""
                    ""configuration error.\n"");
            break;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_23.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_23.cpp,33,[],"[""unkown""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,32,"fprintf(stderr,""Can't load %s\n"",BZ2_LIBNAME);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_24.cpp,"){
      fprintf(stderr,""Can't load %s\n"",BZ2_LIBNAME);
      return -1;
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_24.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_24.cpp,7,"[""unkown"", ""string"", ""macro""]","[""LoadLibrary_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,47,"fprintf(stderr,""GetProcAddress failed.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_25.cpp,"{
      fprintf(stderr,""GetProcAddress failed.\n"");
      return -1;
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_25.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 