file,loc,log,log_file,block,block_file,block_feature,function_file,function_loc,ddg_feature,cdg_feature
second/download/CMake/CMake/CMake/Utilities/cmzlib/gzio.cpp,612,"(void)vsprintf(buf, format, va);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_2.cpp,"{
    char buf[Z_PRINTF_BUFSIZE];
    va_list va;
    int len;

    buf[sizeof(buf) - 1] = 0;
    va_start(va, format);
#ifdef NO_vsnprintf
#  ifdef HAS_vsprintf_void
    (void)vsprintf(buf, format, va);
    va_end(va);
    for (len = 0; len < sizeof(buf); len++)
        if (buf[len] == 0) break;
#  else
    len = vsprintf(buf, format, va);
    va_end(va);
#  endif
#else
#  ifdef HAS_vsnprintf_void
    (void)vsnprintf(buf, sizeof(buf), format, va);
    va_end(va);
    len = strlen(buf);
#  else
    len = vsnprintf(buf, sizeof(buf), format, va);
    va_end(va);
#  endif
#endif
    if (len <= 0 || len >= (int)sizeof(buf) || buf[sizeof(buf) - 1] != 0)
        return 0;
    return gzwrite(file, buf, (unsigned)len);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_2.cpp,"[2, 0, 1, 0, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 69, 0, 0, 3, 3, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 52, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 3, 2, 3, 0, 17, 0, 0, 11, 0, 30, 9, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_2.cpp,10,"[""char *"", ""const char *"", ""va_list""]",[]
second/download/CMake/CMake/CMake/Utilities/cmzlib/gzio.cpp,617,"len = vsprintf(buf, format, va);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_3.cpp,"{
    char buf[Z_PRINTF_BUFSIZE];
    va_list va;
    int len;

    buf[sizeof(buf) - 1] = 0;
    va_start(va, format);
#ifdef NO_vsnprintf
#  ifdef HAS_vsprintf_void
    (void)vsprintf(buf, format, va);
    va_end(va);
    for (len = 0; len < sizeof(buf); len++)
        if (buf[len] == 0) break;
#  else
    len = vsprintf(buf, format, va);
    va_end(va);
#  endif
#else
#  ifdef HAS_vsnprintf_void
    (void)vsnprintf(buf, sizeof(buf), format, va);
    va_end(va);
    len = strlen(buf);
#  else
    len = vsnprintf(buf, sizeof(buf), format, va);
    va_end(va);
#  endif
#endif
    if (len <= 0 || len >= (int)sizeof(buf) || buf[sizeof(buf) - 1] != 0)
        return 0;
    return gzwrite(file, buf, (unsigned)len);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_3.cpp,"[2, 0, 1, 0, 1, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 69, 0, 0, 3, 3, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 52, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 3, 2, 3, 0, 17, 0, 0, 11, 0, 30, 9, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_3.cpp,15,"[""char *"", ""const char *"", ""va_list""]","[""member"", ""null"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmzlib/inflate.cpp,284,"printf(""    static const code lenfix[%u] = {"", size);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_11.cpp,"{
    unsigned low, size;
    struct inflate_state state;

    fixedtables(&state);
    puts(""    /* inffixed.h -- table for decoding fixed codes"");
    puts(""     * Generated automatically by makefixed()."");
    puts(""     */"");
    puts("""");
    puts(""    /* WARNING: this file should *not* be used by applications."");
    puts(""       It is part of the implementation of this library and is"");
    puts(""       subject to change. Applications should only use zlib.h."");
    puts(""     */"");
    puts("""");
    size = 1U << 9;
    printf(""    static const code lenfix[%u] = {"", size);
    low = 0;
    for (;;) {
        if ((low % 7) == 0) printf(""\n        "");
        printf(""{%u,%u,%d}"", state.lencode[low].op, state.lencode[low].bits,
               state.lencode[low].val);
        if (++low == size) break;
        putchar(',');
    }
    puts(""\n    };"");
    size = 1U << 5;
    printf(""\n    static const code distfix[%u] = {"", size);
    low = 0;
    for (;;) {
        if ((low % 6) == 0) printf(""\n        "");
        printf(""{%u,%u,%d}"", state.distcode[low].op, state.distcode[low].bits,
               state.distcode[low].val);
        if (++low == size) break;
        putchar(',');
    }
    puts(""\n    };"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_11.cpp,"[4, 0, 2, 0, 2, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 70, 0, 0, 2, 3, 0, 0, 2, 29, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 6, 4, 0, 0, 20, 0, 0, 24, 0, 28, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_11.cpp,16,"[""string"", ""int""]",[]
second/download/CMake/CMake/CMake/Utilities/cmzlib/inflate.cpp,287,((low % 7) == 0;,second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_12.cpp,"((low % 7) == 0) printf(""\n        "")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_12.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_12.cpp,19,"[""string""]","[""null"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmzlib/inflate.cpp,288,"printf(""{%u,%u,%d}"", state.lencode[low].op, state.lencode[low].bits,
               state.lencode[low].val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_13.cpp,"{
        if ((low % 7) == 0) printf(""\n        "");
        printf(""{%u,%u,%d}"", state.lencode[low].op, state.lencode[low].bits,
               state.lencode[low].val);
        if (++low == size) break;
        putchar(',');
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_13.cpp,"[2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 2, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_13.cpp,20,"[""string"", ""member"", ""member"", ""member""]",[]
second/download/CMake/CMake/CMake/Utilities/cmzlib/inflate.cpp,295,"printf(""\n    static const code distfix[%u] = {"", size);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_14.cpp,"{
    unsigned low, size;
    struct inflate_state state;

    fixedtables(&state);
    puts(""    /* inffixed.h -- table for decoding fixed codes"");
    puts(""     * Generated automatically by makefixed()."");
    puts(""     */"");
    puts("""");
    puts(""    /* WARNING: this file should *not* be used by applications."");
    puts(""       It is part of the implementation of this library and is"");
    puts(""       subject to change. Applications should only use zlib.h."");
    puts(""     */"");
    puts("""");
    size = 1U << 9;
    printf(""    static const code lenfix[%u] = {"", size);
    low = 0;
    for (;;) {
        if ((low % 7) == 0) printf(""\n        "");
        printf(""{%u,%u,%d}"", state.lencode[low].op, state.lencode[low].bits,
               state.lencode[low].val);
        if (++low == size) break;
        putchar(',');
    }
    puts(""\n    };"");
    size = 1U << 5;
    printf(""\n    static const code distfix[%u] = {"", size);
    low = 0;
    for (;;) {
        if ((low % 6) == 0) printf(""\n        "");
        printf(""{%u,%u,%d}"", state.distcode[low].op, state.distcode[low].bits,
               state.distcode[low].val);
        if (++low == size) break;
        putchar(',');
    }
    puts(""\n    };"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_14.cpp,"[4, 0, 2, 0, 2, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 70, 0, 0, 2, 3, 0, 0, 2, 29, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 6, 4, 0, 0, 20, 0, 0, 24, 0, 28, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_14.cpp,27,"[""string"", ""int""]",[]
second/download/CMake/CMake/CMake/Utilities/cmzlib/inflate.cpp,298,((low % 6) == 0;,second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_15.cpp,"((low % 6) == 0) printf(""\n        "")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_15.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_15.cpp,30,"[""string""]","[""null"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmzlib/inflate.cpp,299,"printf(""{%u,%u,%d}"", state.distcode[low].op, state.distcode[low].bits,
               state.distcode[low].val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_16.cpp,"{
        if ((low % 6) == 0) printf(""\n        "");
        printf(""{%u,%u,%d}"", state.distcode[low].op, state.distcode[low].bits,
               state.distcode[low].val);
        if (++low == size) break;
        putchar(',');
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_16.cpp,"[2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 2, 0, 0, 3, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_16.cpp,31,"[""string"", ""member"", ""member"", ""member""]",[]
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2recover.cpp,322,"fprintf(stderr, 
                    ""\trestrictions on size of recovered file: None\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_20.cpp,"{
         case 8:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: None\n"");
            break;
         case 4:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: 512 MB\n"");
            fprintf(stderr, 
                    ""\tto circumvent, recompile with MaybeUInt64 as an\n""
                    ""\tunsigned 64-bit int.\n"");
            break;
         default:
            fprintf(stderr, 
                    ""\tsizeof(MaybeUInt64) is not 4 or 8 -- ""
                    ""configuration error.\n"");
            break;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_20.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_20.cpp,22,"[""unkown"", ""string""]","[""unkown""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2recover.cpp,326,"fprintf(stderr, 
                    ""\trestrictions on size of recovered file: 512 MB\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_21.cpp,"{
         case 8:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: None\n"");
            break;
         case 4:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: 512 MB\n"");
            fprintf(stderr, 
                    ""\tto circumvent, recompile with MaybeUInt64 as an\n""
                    ""\tunsigned 64-bit int.\n"");
            break;
         default:
            fprintf(stderr, 
                    ""\tsizeof(MaybeUInt64) is not 4 or 8 -- ""
                    ""configuration error.\n"");
            break;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_21.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_21.cpp,26,"[""unkown"", ""string""]","[""unkown""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2recover.cpp,328,"fprintf(stderr, 
                    ""\tto circumvent, recompile with MaybeUInt64 as an\n""
                    ""\tunsigned 64-bit int.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_22.cpp,"{
         case 8:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: None\n"");
            break;
         case 4:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: 512 MB\n"");
            fprintf(stderr, 
                    ""\tto circumvent, recompile with MaybeUInt64 as an\n""
                    ""\tunsigned 64-bit int.\n"");
            break;
         default:
            fprintf(stderr, 
                    ""\tsizeof(MaybeUInt64) is not 4 or 8 -- ""
                    ""configuration error.\n"");
            break;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_22.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_22.cpp,28,[],"[""unkown""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2recover.cpp,333,"fprintf(stderr, 
                    ""\tsizeof(MaybeUInt64) is not 4 or 8 -- ""
                    ""configuration error.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_23.cpp,"{
         case 8:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: None\n"");
            break;
         case 4:
            fprintf(stderr, 
                    ""\trestrictions on size of recovered file: 512 MB\n"");
            fprintf(stderr, 
                    ""\tto circumvent, recompile with MaybeUInt64 as an\n""
                    ""\tunsigned 64-bit int.\n"");
            break;
         default:
            fprintf(stderr, 
                    ""\tsizeof(MaybeUInt64) is not 4 or 8 -- ""
                    ""configuration error.\n"");
            break;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_23.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_23.cpp,33,[],"[""unkown""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,32,"fprintf(stderr,""Can't load %s\n"",BZ2_LIBNAME);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_24.cpp,"){
      fprintf(stderr,""Can't load %s\n"",BZ2_LIBNAME);
      return -1;
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_24.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_24.cpp,7,"[""unkown"", ""string"", ""macro""]","[""LoadLibrary_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,47,"fprintf(stderr,""GetProcAddress failed.\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_25.cpp,"{
      fprintf(stderr,""GetProcAddress failed.\n"");
      return -1;
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_25.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_25.cpp,22,"[""unkown"", ""string""]","[""macro"", ""!"", ""macro"", ""!"", ""macro"", ""!"", ""macro"", ""!"", ""macro"", ""!"", ""macro"", ""!"", ""macro"", ""!"", ""macro"", ""!"", ""||"", ""||"", ""||"", ""||"", ""||"", ""||"", ""||""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,77,"fprintf(stderr,""Loading of %s failed.  Giving up.\n"", BZ2_LIBNAME);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_26.cpp,"){
      fprintf(stderr,""Loading of %s failed.  Giving up.\n"", BZ2_LIBNAME);
      exit(1);
   }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_26.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_26.cpp,9,"[""unkown"", ""string"", ""macro""]","[""BZ2DLLLoadLibrary_ret"", ""null"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,80,"printf(""Loading of %s succeeded.  Library version is %s.\n"",
          BZ2_LIBNAME, BZ2_bzlibVersion() );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_27.cpp,"{
   int decompress = 0;
   int level = 9;
   char *fn_r = NULL;
   char *fn_w = NULL;

#ifdef _WIN32
   if(BZ2DLLLoadLibrary()<0){
      fprintf(stderr,""Loading of %s failed.  Giving up.\n"", BZ2_LIBNAME);
      exit(1);
   }
   printf(""Loading of %s succeeded.  Library version is %s.\n"",
          BZ2_LIBNAME, BZ2_bzlibVersion() );
#endif
   while(++argv,--argc){
      if(**argv =='-' || **argv=='/'){
         char *p;

         for(p=*argv+1;*p;p++){
            if(*p=='d'){
               decompress = 1;
            }else if('1'<=*p && *p<='9'){
               level = *p - '0';
            }else{
               usage();
               exit(1);
            }
         }
      }else{
         break;
      }
   }
   if(argc>=1){
      fn_r = *argv;
      argc--;argv++;
   }else{
      fn_r = NULL;
   }
   if(argc>=1){
      fn_w = *argv;
      argc--;argv++;
   }else{
      fn_w = NULL;
   }
   {
      int len;
      char buff[0x1000];
      char mode[10];

      if(decompress){
         BZFILE *BZ2fp_r = NULL;
         FILE *fp_w = NULL;

         if(fn_w){
            if((fp_w = fopen(fn_w,""wb""))==NULL){
               printf(""can't open [%s]\n"",fn_w);
               perror(""reason:"");
               exit(1);
            }
         }else{
            fp_w = stdout;
         }
         if((fn_r == NULL && (BZ2fp_r = BZ2_bzdopen(fileno(stdin),""rb""))==NULL)
            || (fn_r != NULL && (BZ2fp_r = BZ2_bzopen(fn_r,""rb""))==NULL)){
            printf(""can't bz2openstream\n"");
            exit(1);
         }
         while((len=BZ2_bzread(BZ2fp_r,buff,0x1000))>0){
            fwrite(buff,1,len,fp_w);
         }
         BZ2_bzclose(BZ2fp_r);
         if(fp_w != stdout) fclose(fp_w);
      }else{
         BZFILE *BZ2fp_w = NULL;
         FILE *fp_r = NULL;

         if(fn_r){
            if((fp_r = fopen(fn_r,""rb""))==NULL){
               printf(""can't open [%s]\n"",fn_r);
               perror(""reason:"");
               exit(1);
            }
         }else{
            fp_r = stdin;
         }
         mode[0]='w';
         mode[1] = '0' + level;
         mode[2] = '\0';

         if((fn_w == NULL && (BZ2fp_w = BZ2_bzdopen(fileno(stdout),mode))==NULL)
            || (fn_w !=NULL && (BZ2fp_w = BZ2_bzopen(fn_w,mode))==NULL)){
            printf(""can't bz2openstream\n"");
            exit(1);
         }
         while((len=fread(buff,1,0x1000,fp_r))>0){
            BZ2_bzwrite(BZ2fp_w,buff,len);
         }
         BZ2_bzclose(BZ2fp_w);
         if(fp_r!=stdin)fclose(fp_r);
      }
   }
#ifdef _WIN32
   BZ2DLLFreeLibrary();
#endif
   return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_27.cpp,"[15, 3, 1, 0, 1, 0, 1, 0, 0, 0, 28, 0, 0, 0, 0, 163, 0, 0, 12, 12, 0, 0, 9, 46, 0, 0, 0, 0, 7, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 5, 0, 19, 15, 7, 0, 34, 0, 0, 37, 1, 52, 4, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_27.cpp,12,"[""string"", ""macro"", ""BZ2_bzlibVersion_ret""]",[]
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,124,"printf(""can't open [%s]\n"",fn_w);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_28.cpp,"){
               printf(""can't open [%s]\n"",fn_w);
               perror(""reason:"");
               exit(1);
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_28.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_28.cpp,56,"[""string"", ""char * *""]","[""fopen_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,133,"printf(""can't bz2openstream\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_29.cpp,"){
            printf(""can't bz2openstream\n"");
            exit(1);
         }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_29.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_29.cpp,65,"[""string""]","[""char * *"", ""null"", ""=="", ""BZ2_bzdopen_ret"", ""null"", ""=="", ""&&"", ""char * *"", ""null"", ""!="", ""BZ2_bzopen_ret"", ""null"", ""=="", ""&&"", ""||""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,147,"printf(""can't open [%s]\n"",fn_r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_30.cpp,"){
               printf(""can't open [%s]\n"",fn_r);
               perror(""reason:"");
               exit(1);
            }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_30.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_30.cpp,79,"[""string"", ""char * *""]","[""fopen_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/dlltest.cpp,160,"printf(""can't bz2openstream\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_31.cpp,"){
            printf(""can't bz2openstream\n"");
            exit(1);
         }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_31.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_31.cpp,92,"[""string""]","[""char * *"", ""null"", ""=="", ""BZ2_bzdopen_ret"", ""null"", ""=="", ""&&"", ""char * *"", ""null"", ""!="", ""BZ2_bzopen_ret"", ""null"", ""=="", ""&&"", ""||""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/unzcrash.cpp,113,"fprintf(stderr, ""nIn/nOut mismatch %d %d\n"", nIn, nOut );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_32.cpp,"{
           fprintf(stderr, ""nIn/nOut mismatch %d %d\n"", nIn, nOut );
           return 1;
         }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_32.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_32.cpp,40,"[""unkown"", ""string"", ""fread_ret"", ""macro""]","[""macro"", ""fread_ret"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/unzcrash.cpp,118,"fprintf(stderr, ""mismatch at %d\n"", i );",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_33.cpp,"{ 
                fprintf(stderr, ""mismatch at %d\n"", i ); 
                return 1; 
           }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_33.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_33.cpp,45,"[""unkown"", ""string"", ""null""]","[""member"", ""member"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/unzcrash.cpp,121,(i == nOut;,second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_34.cpp,"(i == nOut) fprintf(stderr, ""really ok!\n"" )",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_34.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_34.cpp,48,"[""unkown"", ""string""]","[""null"", ""macro"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2.cpp,1186,"fprintf( stderr,
                  ""%s: Input file %s is a directory.\n"",
                  progName,inName);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_35.cpp,"{
         fprintf( stderr,
                  ""%s: Input file %s is a directory.\n"",
                  progName,inName);
         setExit(1);
         return;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_35.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_35.cpp,55,"[""unkown"", ""string"", ""unkown"", ""unkown""]","[""MY_S_ISDIR_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2.cpp,1365,"fprintf( stderr,
                  ""%s: Input file %s is a directory.\n"",
                  progName,inName);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_36.cpp,"{
         fprintf( stderr,
                  ""%s: Input file %s is a directory.\n"",
                  progName,inName);
         setExit(1);
         return;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_36.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_36.cpp,53,"[""unkown"", ""string"", ""unkown"", ""unkown""]","[""MY_S_ISDIR_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmbzip2/bzip2.cpp,1545,"fprintf( stderr,
                  ""%s: Input file %s is a directory.\n"",
                  progName,inName);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_37.cpp,"{
         fprintf( stderr,
                  ""%s: Input file %s is a directory.\n"",
                  progName,inName);
         setExit(1);
         return;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_37.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_37.cpp,35,"[""unkown"", ""string"", ""unkown"", ""unkown""]","[""MY_S_ISDIR_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/curltest.cpp,23,"printf(""Error fetching: ftp://public.kitware.com/pub/cmake/cygwin/setup.hint\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_38.cpp,"{
      printf(""Error fetching: ftp://public.kitware.com/pub/cmake/cygwin/setup.hint\n"");
      retVal = 1;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_38.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_38.cpp,16,"[""string""]","[""curl_easy_perform_ret"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/curltest.cpp,32,"printf(""Cannot create curl object\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_39.cpp,"{
    printf(""Cannot create curl object\n"");
    retVal = 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_39.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_39.cpp,25,"[""string""]","[""curl_easy_init_ret"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/curltest.cpp,52,"sprintf(proxy, ""%s:%s"", getenv(""HTTP_PROXY""), getenv(""HTTP_PROXY_PORT""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_40.cpp,"{
      sprintf(proxy, ""%s:%s"", getenv(""HTTP_PROXY""), getenv(""HTTP_PROXY_PORT""));
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_40.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_40.cpp,14,"[""char *"", ""string"", ""getenv_ret"", ""getenv_ret""]","[""getenv_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/curltest.cpp,56,"sprintf(proxy, ""%s"", getenv(""HTTP_PROXY""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_41.cpp,"{
      sprintf(proxy, ""%s"", getenv(""HTTP_PROXY""));
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_41.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_41.cpp,18,"[""char *"", ""string"", ""getenv_ret""]","[""getenv_ret"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/curltest.cpp,104,"printf(""Error fetching: %s\n"", url1);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_42.cpp,"{
      printf(""Error fetching: %s\n"", url1);
      retVal = 1;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_42.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_42.cpp,66,"[""string"", ""char *""]","[""curl_easy_perform_ret"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/curltest.cpp,127,"printf(""Cannot create curl object\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_43.cpp,"{
    printf(""Cannot create curl object\n"");
    retVal = 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_43.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_43.cpp,89,"[""string""]","[""curl_easy_init_ret"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/curltest.cpp,147,"printf(""error: first argument should be a url to download\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_44.cpp,"{
    printf(""error: first argument should be a url to download\n"");
    retVal = 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_44.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_44.cpp,12,"[""string""]","[""int"", ""int"", "">"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/http_digest.cpp,146,"path = (unsigned char *) aprintf(""%.*s"", urilen, uripath);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_45.cpp,"{
      size_t urilen = tmp - (char *)uripath;
      path = (unsigned char *) aprintf(""%.*s"", urilen, uripath);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_45.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_45.cpp,77,"[""string"", ""size_t"", ""const unsigned char *""]","[""strchr_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/http_digest.cpp,161,"*allocuserpwd = aprintf(""%sAuthorization: Digest %s\r\n"",
                          proxy ? ""Proxy-"" : """",
                          response);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_46.cpp,"{
  CURLcode result;
  struct Curl_easy *data = conn->data;
  unsigned char *path = NULL;
  char *tmp = NULL;
  char *response;
  size_t len;
  bool have_chlg;

  /* Point to the address of the pointer that holds the string to send to the
     server, which is for a plain host or for a HTTP proxy */
  char **allocuserpwd;

  /* Point to the name and password for this */
  const char *userp;
  const char *passwdp;

  /* Point to the correct struct with this */
  struct digestdata *digest;
  struct auth *authp;

  if(proxy) {
    digest = &data->state.proxydigest;
    allocuserpwd = &conn->allocptr.proxyuserpwd;
    userp = conn->http_proxy.user;
    passwdp = conn->http_proxy.passwd;
    authp = &data->state.authproxy;
  }
  else {
    digest = &data->state.digest;
    allocuserpwd = &conn->allocptr.userpwd;
    userp = conn->user;
    passwdp = conn->passwd;
    authp = &data->state.authhost;
  }

  Curl_safefree(*allocuserpwd);

  /* not set means empty */
  if(!userp)
    userp = """";

  if(!passwdp)
    passwdp = """";

#if defined(USE_WINDOWS_SSPI)
  have_chlg = digest->input_token ? TRUE : FALSE;
#else
  have_chlg = digest->nonce ? TRUE : FALSE;
#endif

  if(!have_chlg) {
    authp->done = FALSE;
    return CURLE_OK;
  }

  /* So IE browsers < v7 cut off the URI part at the query part when they
     evaluate the MD5 and some (IIS?) servers work with them so we may need to
     do the Digest IE-style. Note that the different ways cause different MD5
     sums to get sent.

     Apache servers can be set to do the Digest IE-style automatically using
     the BrowserMatch feature:
     https://httpd.apache.org/docs/2.2/mod/mod_auth_digest.html#msie

     Further details on Digest implementation differences:
     http://www.fngtps.com/2006/09/http-authentication
  */

  if(authp->iestyle) {
    tmp = strchr((char *)uripath, '?');
    if(tmp) {
      size_t urilen = tmp - (char *)uripath;
      path = (unsigned char *) aprintf(""%.*s"", urilen, uripath);
    }
  }
  if(!tmp)
    path = (unsigned char *) strdup((char *) uripath);

  if(!path)
    return CURLE_OUT_OF_MEMORY;

  result = Curl_auth_create_digest_http_message(data, userp, passwdp, request,
                                                path, digest, &response, &len);
  free(path);
  if(result)
    return result;

  *allocuserpwd = aprintf(""%sAuthorization: Digest %s\r\n"",
                          proxy ? ""Proxy-"" : """",
                          response);
  free(response);
  if(!*allocuserpwd)
    return CURLE_OUT_OF_MEMORY;

  authp->done = TRUE;

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_46.cpp,"[11, 0, 0, 0, 0, 0, 5, 0, 0, 0, 12, 0, 0, 0, 2, 166, 0, 0, 13, 13, 0, 0, 4, 7, 0, 0, 0, 0, 10, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 3, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 13, 13, 5, 0, 9, 0, 0, 24, 0, 21, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_46.cpp,92,"[""string"", ""string"", ""char *""]","[""Curl_auth_create_digest_http_message_ret"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/krb5.cpp,196,"stringp = aprintf(""%s@%s"", service, host);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_47.cpp,"{
    /* this really shouldn't be repeated here, but can't help it */
    if(service == srv_host) {
      result = Curl_ftpsend(conn, ""AUTH GSSAPI"");
      if(result)
        return -2;

      if(Curl_GetFTPResponse(&nread, conn, NULL))
        return -1;

      if(data->state.buffer[0] != '3')
        return -1;
    }

    stringp = aprintf(""%s@%s"", service, host);
    if(!stringp)
      return -2;

    input_buffer.value = stringp;
    input_buffer.length = strlen(stringp);
    maj = gss_import_name(&min, &input_buffer, GSS_C_NT_HOSTBASED_SERVICE,
                          &gssname);
    free(stringp);
    if(maj != GSS_S_COMPLETE) {
      gss_release_name(&min, &gssname);
      if(service == srv_host) {
        Curl_failf(data, ""Error importing service name %s@%s"", service, host);
        return AUTH_ERROR;
      }
      service = srv_host;
      continue;
    }
    /* We pass NULL as |output_name_type| to avoid a leak. */
    gss_display_name(&min, gssname, &output_buffer, NULL);
    Curl_infof(data, ""Trying against %s\n"", output_buffer.value);
    gssresp = GSS_C_NO_BUFFER;
    *context = GSS_C_NO_CONTEXT;

    do {
      /* Release the buffer at each iteration to avoid leaking: the first time
         we are releasing the memory from gss_display_name. The last item is
         taken care by a final gss_release_buffer. */
      gss_release_buffer(&min, &output_buffer);
      ret = AUTH_OK;
      maj = Curl_gss_init_sec_context(data,
                                      &min,
                                      context,
                                      gssname,
                                      &Curl_krb5_mech_oid,
                                      &chan,
                                      gssresp,
                                      &output_buffer,
                                      TRUE,
                                      NULL);

      if(gssresp) {
        free(_gssresp.value);
        gssresp = NULL;
      }

      if(GSS_ERROR(maj)) {
        Curl_infof(data, ""Error creating security context\n"");
        ret = AUTH_ERROR;
        break;
      }

      if(output_buffer.length != 0) {
        char *cmd;

        result = Curl_base64_encode(data, (char *)output_buffer.value,
                                    output_buffer.length, &p, &base64_sz);
        if(result) {
          Curl_infof(data, ""base64-encoding: %s\n"",
                     curl_easy_strerror(result));
          ret = AUTH_ERROR;
          break;
        }

        cmd = aprintf(""ADAT %s"", p);
        if(cmd)
          result = Curl_ftpsend(conn, cmd);
        else
          result = CURLE_OUT_OF_MEMORY;

        free(p);

        if(result) {
          ret = -2;
          break;
        }

        if(Curl_GetFTPResponse(&nread, conn, NULL)) {
          ret = -1;
          break;
        }

        if(data->state.buffer[0] != '2' && data->state.buffer[0] != '3') {
          Curl_infof(data, ""Server didn't accept auth data\n"");
          ret = AUTH_ERROR;
          break;
        }

        p = data->state.buffer + 4;
        p = strstr(p, ""ADAT="");
        if(p) {
          result = Curl_base64_decode(p + 5,
                                      (unsigned char **)&_gssresp.value,
                                      &_gssresp.length);
          if(result) {
            Curl_failf(data, ""base64-decoding: %s"",
                       curl_easy_strerror(result));
            ret = AUTH_CONTINUE;
            break;
          }
        }

        gssresp = &_gssresp;
      }
    } while(maj == GSS_S_CONTINUE_NEEDED);

    gss_release_name(&min, &gssname);
    gss_release_buffer(&min, &output_buffer);

    if(gssresp)
      free(_gssresp.value);

    if(ret == AUTH_OK || service == srv_host)
      return ret;

    service = srv_host;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_47.cpp,"[19, 0, 0, 1, 6, 1, 6, 0, 0, 0, 22, 0, 0, 0, 0, 198, 0, 0, 1, 1, 0, 0, 0, 25, 0, 0, 0, 0, 1, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 20, 19, 1, 0, 30, 0, 0, 41, 0, 76, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_47.cpp,52,"[""string"", ""const char *"", ""const char *""]","[""const char *"", ""const char *"", ""=="", ""!"", ""member"", ""char"", ""!="", ""!"", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/krb5.cpp,208,"Curl_failf(data, ""Error importing service name %s@%s"", service, host);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_48.cpp,"{
        Curl_failf(data, ""Error importing service name %s@%s"", service, host);
        return AUTH_ERROR;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_48.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_48.cpp,64,"[""struct Curl_easy *"", ""string"", ""const char *"", ""const char *""]","[""const char *"", ""const char *"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/krb5.cpp,260,"cmd = aprintf(""ADAT %s"", p);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_49.cpp,"{
        char *cmd;

        result = Curl_base64_encode(data, (char *)output_buffer.value,
                                    output_buffer.length, &p, &base64_sz);
        if(result) {
          Curl_infof(data, ""base64-encoding: %s\n"",
                     curl_easy_strerror(result));
          ret = AUTH_ERROR;
          break;
        }

        cmd = aprintf(""ADAT %s"", p);
        if(cmd)
          result = Curl_ftpsend(conn, cmd);
        else
          result = CURLE_OUT_OF_MEMORY;

        free(p);

        if(result) {
          ret = -2;
          break;
        }

        if(Curl_GetFTPResponse(&nread, conn, NULL)) {
          ret = -1;
          break;
        }

        if(data->state.buffer[0] != '2' && data->state.buffer[0] != '3') {
          Curl_infof(data, ""Server didn't accept auth data\n"");
          ret = AUTH_ERROR;
          break;
        }

        p = data->state.buffer + 4;
        p = strstr(p, ""ADAT="");
        if(p) {
          result = Curl_base64_decode(p + 5,
                                      (unsigned char **)&_gssresp.value,
                                      &_gssresp.length);
          if(result) {
            Curl_failf(data, ""base64-decoding: %s"",
                       curl_easy_strerror(result));
            ret = AUTH_CONTINUE;
            break;
          }
        }

        gssresp = &_gssresp;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_49.cpp,"[7, 0, 0, 0, 5, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 81, 0, 0, 1, 1, 0, 0, 0, 13, 0, 0, 0, 0, 1, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 7, 7, 1, 0, 12, 0, 0, 17, 0, 28, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_49.cpp,116,"[""string"", ""strstr_ret""]","[""Curl_base64_encode_ret"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/krb5.cpp,291,"Curl_failf(data, ""base64-decoding: %s"",
                       curl_easy_strerror(result));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_50.cpp,"{
            Curl_failf(data, ""base64-decoding: %s"",
                       curl_easy_strerror(result));
            ret = AUTH_CONTINUE;
            break;
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_50.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_50.cpp,147,"[""struct Curl_easy *"", ""string"", ""curl_easy_strerror_ret""]","[""Curl_base64_decode_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/http2.cpp,230,"snprintf(p, len, "" nghttp2/%s"", h2->version_str);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_51.cpp,"{
  nghttp2_info *h2 = nghttp2_version(0);
  return snprintf(p, len, "" nghttp2/%s"", h2->version_str);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_51.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_51.cpp,3,"[""char *"", ""size_t"", ""string"", ""member""]",[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/http2.cpp,874,"h = aprintf(""%s:%s"", name, value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_52.cpp,"{
    char *h;

    if(!stream->push_headers) {
      stream->push_headers_alloc = 10;
      stream->push_headers = malloc(stream->push_headers_alloc *
                                    sizeof(char *));
      stream->push_headers_used = 0;
    }
    else if(stream->push_headers_used ==
            stream->push_headers_alloc) {
      char **headp;
      stream->push_headers_alloc *= 2;
      headp = Curl_saferealloc(stream->push_headers,
                               stream->push_headers_alloc * sizeof(char *));
      if(!headp) {
        stream->push_headers = NULL;
        return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;
      }
      stream->push_headers = headp;
    }
    h = aprintf(""%s:%s"", name, value);
    if(h)
      stream->push_headers[stream->push_headers_used++] = h;
    return 0;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_52.cpp,"[4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 0, 61, 0, 0, 2, 2, 0, 0, 0, 5, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 24, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 4, 4, 0, 0, 5, 0, 0, 9, 1, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_52.cpp,50,"[""string"", ""const uint8_t *"", ""const uint8_t *""]","[""member"", ""!"", ""!"", ""member"", ""member"", ""=="", ""!"", ""Curl_saferealloc_ret"", ""!"", ""!"", ""&&"", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/if2ip.cpp,169,"snprintf(scope, sizeof(scope), ""%%%u"", scopeid);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_53.cpp,"snprintf(scope, sizeof(scope), ""%%%u"", scopeid)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_53.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_53.cpp,55,"[""char *"", ""unkown"", ""string"", ""member""]","[""member""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/if2ip.cpp,177,"snprintf(buf, buf_size, ""%s%s"", ip, scope);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_54.cpp,"{
            void *addr;
            char *ip;
            char scope[12] = """";
            char ipstr[64];
#ifdef ENABLE_IPV6
            if(af == AF_INET6) {
              unsigned int scopeid = 0;
              unsigned int ifscope = Curl_ipv6_scope(iface->ifa_addr);

              if(ifscope != remote_scope) {
                /* We are interested only in interface addresses whose
                   scope matches the remote address we want to
                   connect to: global for global, link-local for
                   link-local, etc... */
                if(res == IF2IP_NOT_FOUND) res = IF2IP_AF_NOT_SUPPORTED;
                continue;
              }

              addr =
                &((struct sockaddr_in6 *)(void *)iface->ifa_addr)->sin6_addr;
#ifdef HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID
              /* Include the scope of this interface as part of the address */
              scopeid = ((struct sockaddr_in6 *)(void *)iface->ifa_addr)
                            ->sin6_scope_id;

              /* If given, scope id should match. */
              if(remote_scope_id && scopeid != remote_scope_id) {
                if(res == IF2IP_NOT_FOUND)
                  res = IF2IP_AF_NOT_SUPPORTED;

                continue;
              }
#endif
              if(scopeid)
                snprintf(scope, sizeof(scope), ""%%%u"", scopeid);
            }
            else
#endif
              addr =
                  &((struct sockaddr_in *)(void *)iface->ifa_addr)->sin_addr;
            res = IF2IP_FOUND;
            ip = (char *) Curl_inet_ntop(af, addr, ipstr, sizeof(ipstr));
            snprintf(buf, buf_size, ""%s%s"", ip, scope);
            break;
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_54.cpp,"[6, 0, 0, 0, 1, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0, 77, 0, 0, 6, 6, 0, 0, 3, 6, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 36, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 2, 0, 6, 6, 1, 0, 6, 0, 0, 9, 0, 16, 4, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_54.cpp,63,"[""char *"", ""int"", ""string"", ""Curl_inet_ntop_ret"", ""char *""]","[""int"", ""macro"", ""=="", ""!"", ""unsigned int"", ""member"", ""unsigned int"", ""!="", ""&&"", ""!"", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/asyn-thread.cpp,272,"snprintf(service, sizeof(service), ""%d"", tsd->port);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_55.cpp,"{
  struct thread_sync_data *tsd = (struct thread_sync_data*)arg;
  struct thread_data *td = tsd->td;
  char service[12];
  int rc;

  snprintf(service, sizeof(service), ""%d"", tsd->port);

  rc = Curl_getaddrinfo_ex(tsd->hostname, service, &tsd->hints, &tsd->res);

  if(rc != 0) {
    tsd->sock_error = SOCKERRNO?SOCKERRNO:rc;
    if(tsd->sock_error == 0)
      tsd->sock_error = RESOLVER_ENOMEM;
  }
  else {
    Curl_addrinfo_set_port(tsd->res, tsd->port);
  }

  Curl_mutex_acquire(tsd->mtx);
  if(tsd->done) {
    /* too late, gotta clean up the mess */
    Curl_mutex_release(tsd->mtx);
    destroy_thread_sync_data(tsd);
    free(td);
  }
  else {
    tsd->done = 1;
    Curl_mutex_release(tsd->mtx);
  }

  return 0;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_55.cpp,"[3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 79, 0, 0, 4, 4, 0, 0, 2, 6, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 1, 37, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 4, 4, 3, 0, 9, 0, 0, 11, 0, 16, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_55.cpp,7,"[""char *"", ""unkown"", ""string"", ""member""]",[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/asyn-thread.cpp,646,"snprintf(sbuf, sizeof(sbuf), ""%d"", port);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_56.cpp,"{
  struct addrinfo hints;
  struct in_addr in;
  Curl_addrinfo *res;
  int error;
  char sbuf[12];
  int pf = PF_INET;
#ifdef CURLRES_IPV6
  struct in6_addr in6;
#endif /* CURLRES_IPV6 */

  *waitp = 0; /* default to synchronous response */

#ifndef USE_RESOLVE_ON_IPS
  /* First check if this is an IPv4 address string */
  if(Curl_inet_pton(AF_INET, hostname, &in) > 0)
    /* This is a dotted IP address 123.123.123.123-style */
    return Curl_ip2addr(AF_INET, &in, hostname, port);

#ifdef CURLRES_IPV6
  /* check if this is an IPv6 address string */
  if(Curl_inet_pton(AF_INET6, hostname, &in6) > 0)
    /* This is an IPv6 address literal */
    return Curl_ip2addr(AF_INET6, &in6, hostname, port);
#endif /* CURLRES_IPV6 */
#endif /* !USE_RESOLVE_ON_IPS */

#ifdef CURLRES_IPV6
  /*
   * Check if a limited name resolve has been requested.
   */
  switch(conn->ip_version) {
  case CURL_IPRESOLVE_V4:
    pf = PF_INET;
    break;
  case CURL_IPRESOLVE_V6:
    pf = PF_INET6;
    break;
  default:
    pf = PF_UNSPEC;
    break;
  }

  if((pf != PF_INET) && !Curl_ipv6works())
    /* The stack seems to be a non-IPv6 one */
    pf = PF_INET;
#endif /* CURLRES_IPV6 */

  memset(&hints, 0, sizeof(hints));
  hints.ai_family = pf;
  hints.ai_socktype = conn->socktype;

  snprintf(sbuf, sizeof(sbuf), ""%d"", port);

  /* fire up a new resolver thread! */
  if(init_resolve_thread(conn, hostname, port, &hints)) {
    *waitp = 1; /* expect asynchronous response */
    return NULL;
  }

  /* fall-back to blocking version */
  infof(conn->data, ""init_resolve_thread() failed for %s; %s\n"",
        hostname, Curl_strerror(conn, ERRNO));

  error = Curl_getaddrinfo_ex(hostname, sbuf, &hints, &res);
  if(error) {
    infof(conn->data, ""getaddrinfo() failed for %s:%d; %s\n"",
          hostname, port, Curl_strerror(conn, SOCKERRNO));
    return NULL;
  }
  else {
    Curl_addrinfo_set_port(res, port);
  }

  return res;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_56.cpp,"[5, 0, 0, 0, 3, 0, 5, 1, 2, 1, 8, 0, 0, 0, 0, 114, 0, 0, 7, 7, 0, 0, 1, 9, 0, 0, 0, 0, 1, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 75, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 1, 0, 6, 5, 1, 0, 16, 0, 0, 14, 0, 46, 8, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_56.cpp,56,"[""char *"", ""unkown"", ""string"", ""int""]","[""Curl_inet_pton_ret"", ""null"", "">"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/smtp.cpp,560,"from = aprintf(""%s"", data->set.str[STRING_MAIL_FROM]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_57.cpp,"from = aprintf(""%s"", data->set.str[STRING_MAIL_FROM])",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_57.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_57.cpp,13,"[""string"", ""member""]","[""member"", ""char"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/smtp.cpp,562,"from = aprintf(""<%s>"", data->set.str[STRING_MAIL_FROM]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_58.cpp,"from = aprintf(""<%s>"", data->set.str[STRING_MAIL_FROM])",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_58.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_58.cpp,15,"[""string"", ""member""]","[""member"", ""char"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/smtp.cpp,570,"auth = aprintf(""%s"", data->set.str[STRING_MAIL_AUTH]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_59.cpp,"auth = aprintf(""%s"", data->set.str[STRING_MAIL_AUTH])",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_59.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_59.cpp,23,"[""string"", ""member""]","[""member"", ""char"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/smtp.cpp,584,"size = aprintf(""%"" CURL_FORMAT_CURL_OFF_T, data->state.infilesize);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_60.cpp,"{
    size = aprintf(""%"" CURL_FORMAT_CURL_OFF_T, data->state.infilesize);

    if(!size) {
      free(from);
      free(auth);

      return CURLE_OUT_OF_MEMORY;
    }
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_60.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_60.cpp,37,[],"[""member"", ""member"", ""null"", "">"", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/hostip4.cpp,146,"snprintf(sbuf, sizeof(sbuf), ""%d"", port);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_61.cpp,"{
      snprintf(sbuf, sizeof(sbuf), ""%d"", port);
      sbufptr = sbuf;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_61.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_61.cpp,25,"[""char *"", ""unkown"", ""string"", ""int""]","[""int""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/multi.cpp,3104,"fprintf(stderr, ""* Multi status: %d handles, %d alive\n"",
          multi->num_easy, multi->num_alive);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_62.cpp,"{
  struct Curl_easy *data;
  int i;
  fprintf(stderr, ""* Multi status: %d handles, %d alive\n"",
          multi->num_easy, multi->num_alive);
  for(data=multi->easyp; data; data = data->next) {
    if(data->mstate < CURLM_STATE_COMPLETED) {
      /* only display handles that are not completed */
      fprintf(stderr, ""handle %p, state %s, %d sockets\n"",
              (void *)data,
              statename[data->mstate], data->numsocks);
      for(i=0; i < data->numsocks; i++) {
        curl_socket_t s = data->sockets[i];
        struct Curl_sh_entry *entry = sh_getentry(&multi->sockhash, s);

        fprintf(stderr, ""%d "", (int)s);
        if(!entry) {
          fprintf(stderr, ""INTERNAL CONFUSION\n"");
          continue;
        }
        fprintf(stderr, ""[%s %s] "",
                entry->action&CURL_POLL_IN?""RECVING"":"""",
                entry->action&CURL_POLL_OUT?""SENDING"":"""");
      }
      if(data->numsocks)
        fprintf(stderr, ""\n"");
    }
  }
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_62.cpp,"[3, 0, 2, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 82, 0, 0, 4, 4, 0, 0, 4, 11, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 2, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 7, 5, 2, 0, 7, 0, 0, 6, 0, 22, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_62.cpp,4,"[""unkown"", ""string"", ""member"", ""member""]",[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/multi.cpp,3109,"fprintf(stderr, ""handle %p, state %s, %d sockets\n"",
              (void *)data,
              statename[data->mstate], data->numsocks);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_63.cpp,"{
      /* only display handles that are not completed */
      fprintf(stderr, ""handle %p, state %s, %d sockets\n"",
              (void *)data,
              statename[data->mstate], data->numsocks);
      for(i=0; i < data->numsocks; i++) {
        curl_socket_t s = data->sockets[i];
        struct Curl_sh_entry *entry = sh_getentry(&multi->sockhash, s);

        fprintf(stderr, ""%d "", (int)s);
        if(!entry) {
          fprintf(stderr, ""INTERNAL CONFUSION\n"");
          continue;
        }
        fprintf(stderr, ""[%s %s] "",
                entry->action&CURL_POLL_IN?""RECVING"":"""",
                entry->action&CURL_POLL_OUT?""SENDING"":"""");
      }
      if(data->numsocks)
        fprintf(stderr, ""\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_63.cpp,"[2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 55, 0, 0, 2, 2, 0, 0, 3, 10, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 5, 4, 2, 0, 6, 0, 0, 5, 0, 18, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_63.cpp,9,"[""unkown"", ""string"", ""member"", ""member"", ""member""]","[""member"", ""macro"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/multi.cpp,3116,"fprintf(stderr, ""%d "", (int)s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_64.cpp,"{
        curl_socket_t s = data->sockets[i];
        struct Curl_sh_entry *entry = sh_getentry(&multi->sockhash, s);

        fprintf(stderr, ""%d "", (int)s);
        if(!entry) {
          fprintf(stderr, ""INTERNAL CONFUSION\n"");
          continue;
        }
        fprintf(stderr, ""[%s %s] "",
                entry->action&CURL_POLL_IN?""RECVING"":"""",
                entry->action&CURL_POLL_OUT?""SENDING"":"""");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_64.cpp,"[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 32, 0, 0, 2, 2, 0, 0, 2, 7, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 2, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 3, 3, 2, 0, 4, 0, 0, 3, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_64.cpp,16,"[""unkown"", ""string"", ""curl_socket_t""]","[""null"", ""member"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/multi.cpp,3118,"fprintf(stderr, ""INTERNAL CONFUSION\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_65.cpp,"{
          fprintf(stderr, ""INTERNAL CONFUSION\n"");
          continue;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_65.cpp,"[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_65.cpp,18,"[""unkown"", ""string""]","[""struct Curl_sh_entry *"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/multi.cpp,3121,"fprintf(stderr, ""[%s %s] "",
                entry->action&CURL_POLL_IN?""RECVING"":"""",
                entry->action&CURL_POLL_OUT?""SENDING"":"""");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_66.cpp,"{
        curl_socket_t s = data->sockets[i];
        struct Curl_sh_entry *entry = sh_getentry(&multi->sockhash, s);

        fprintf(stderr, ""%d "", (int)s);
        if(!entry) {
          fprintf(stderr, ""INTERNAL CONFUSION\n"");
          continue;
        }
        fprintf(stderr, ""[%s %s] "",
                entry->action&CURL_POLL_IN?""RECVING"":"""",
                entry->action&CURL_POLL_OUT?""SENDING"":"""");
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_66.cpp,"[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 32, 0, 0, 2, 2, 0, 0, 2, 7, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 2, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 3, 3, 2, 0, 4, 0, 0, 3, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_66.cpp,21,"[""unkown"", ""string"", ""string"", ""string""]","[""struct Curl_sh_entry *"", ""!"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/multi.cpp,3126,"fprintf(stderr, ""\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_67.cpp,"fprintf(stderr, ""\n"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_67.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_67.cpp,26,"[""unkown"", ""string""]","[""member""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/hostip.cpp,201,"char *id = aprintf(""%s:%d"", name, port);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_68.cpp,"{
  /* create and return the new allocated entry */
  char *id = aprintf(""%s:%d"", name, port);
  char *ptr = id;
  if(ptr) {
    /* lower case the name part */
    while(*ptr && (*ptr != ':')) {
      *ptr = (char)TOLOWER(*ptr);
      ptr++;
    }
  }
  return id;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_68.cpp,"[1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 17, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_68.cpp,4,"[""string"", ""const char *"", ""int""]",[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/base64.cpp,236,"snprintf(output, 5, ""%c%c=="",
               table64[obuf[0]],
               table64[obuf[1]]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_69.cpp,"{
    case 1: /* only one byte read */
      snprintf(output, 5, ""%c%c=="",
               table64[obuf[0]],
               table64[obuf[1]]);
      break;

    case 2: /* two bytes read */
      snprintf(output, 5, ""%c%c%c="",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]]);
      break;

    default:
      snprintf(output, 5, ""%c%c%c%c"",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]],
               table64[obuf[3]]);
      break;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_69.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_69.cpp,66,"[""malloc_ret"", ""int"", ""string"", ""member"", ""member""]","[""null""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/base64.cpp,242,"snprintf(output, 5, ""%c%c%c="",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_70.cpp,"{
    case 1: /* only one byte read */
      snprintf(output, 5, ""%c%c=="",
               table64[obuf[0]],
               table64[obuf[1]]);
      break;

    case 2: /* two bytes read */
      snprintf(output, 5, ""%c%c%c="",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]]);
      break;

    default:
      snprintf(output, 5, ""%c%c%c%c"",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]],
               table64[obuf[3]]);
      break;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_70.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_70.cpp,72,"[""malloc_ret"", ""int"", ""string"", ""member"", ""member"", ""member""]","[""null""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/base64.cpp,249,"snprintf(output, 5, ""%c%c%c%c"",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]],
               table64[obuf[3]]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_71.cpp,"{
    case 1: /* only one byte read */
      snprintf(output, 5, ""%c%c=="",
               table64[obuf[0]],
               table64[obuf[1]]);
      break;

    case 2: /* two bytes read */
      snprintf(output, 5, ""%c%c%c="",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]]);
      break;

    default:
      snprintf(output, 5, ""%c%c%c%c"",
               table64[obuf[0]],
               table64[obuf[1]],
               table64[obuf[2]],
               table64[obuf[3]]);
      break;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_71.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_71.cpp,79,"[""malloc_ret"", ""int"", ""string"", ""member"", ""member"", ""member"", ""member""]","[""null""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,645,"DEBUGF(fprintf(stderr, ""Error: calloc of Curl_easy failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_72.cpp,"{
    /* this is a very serious error */
    DEBUGF(fprintf(stderr, ""Error: calloc of Curl_easy failed\n""));
    return CURLE_OUT_OF_MEMORY;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_72.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_72.cpp,9,"[""fprintf_ret""]","[""calloc_ret"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,653,"DEBUGF(fprintf(stderr, ""Error: resolver_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_73.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: resolver_init failed\n""));
    free(data);
    return result;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_73.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_73.cpp,17,"[""fprintf_ret""]","[""Curl_resolver_init_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,662,"DEBUGF(fprintf(stderr, ""Error: malloc of buffer failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_74.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: malloc of buffer failed\n""));
    result = CURLE_OUT_OF_MEMORY;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_74.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_74.cpp,26,"[""fprintf_ret""]","[""member"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,668,"DEBUGF(fprintf(stderr, ""Error: malloc of headerbuff failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_75.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: malloc of headerbuff failed\n""));
    result = CURLE_OUT_OF_MEMORY;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_75.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_75.cpp,32,"[""fprintf_ret""]","[""member"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,3061,"DEBUGF(fprintf(stderr, ""DISCONNECT without easy handle, ignoring\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_77.cpp,"{
    DEBUGF(fprintf(stderr, ""DISCONNECT without easy handle, ignoring\n""));
    return CURLE_OK;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_77.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_77.cpp,8,"[""fprintf_ret""]","[""member"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,4543,"data->change.url = aprintf(""%s://%s%s"",
                                   protobuf, conn->host.name, path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_78.cpp,"{
        infof(data, ""Unwillingly accepted illegal URL using %d slash%s!\n"",
              s, s>1?""es"":"""");

        if(data->change.url_alloc)
          free(data->change.url);
        /* repair the URL to use two slashes */
        data->change.url = aprintf(""%s://%s%s"",
                                   protobuf, conn->host.name, path);
        if(!data->change.url)
          return CURLE_OUT_OF_MEMORY;
        data->change.url_alloc = TRUE;
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_78.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 1, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 3, 0, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_78.cpp,218,"[""string"", ""char *"", ""member"", ""char *""]","[""size_t"", ""int"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,4783,"s->range = aprintf(""%"" CURL_FORMAT_CURL_OFF_TU ""-"", s->resume_from);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_79.cpp,"s->range = aprintf(""%"" CURL_FORMAT_CURL_OFF_TU ""-"", s->resume_from)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_79.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_79.cpp,9,[],"[""member"", ""member"", ""||""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,5710,"snprintf(type, sizeof(type), "";type=%c"",
                 data->set.prefer_ascii?'A':
                 (data->set.ftp_list_only?'D':'I'));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_80.cpp,"snprintf(type, sizeof(type), "";type=%c"",
                 data->set.prefer_ascii?'A':
                 (data->set.ftp_list_only?'D':'I'))",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_80.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_80.cpp,49,"[""char *"", ""unkown"", ""string"", ""char""]","[""member""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,5719,"url = aprintf(""%s://%s%s%s:%hu%s%s%s"", conn->given->scheme,
                    conn->bits.ipv6_ip?""["":"""", conn->host.name,
                    conn->bits.ipv6_ip?""]"":"""", conn->remote_port,
                    data->state.slash_removed?""/"":"""", data->state.path,
                    type);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_81.cpp,"{
      /* we need to create new URL with the new port number */
      char *url;
      char type[12]="""";

      if(conn->bits.type_set)
        snprintf(type, sizeof(type), "";type=%c"",
                 data->set.prefer_ascii?'A':
                 (data->set.ftp_list_only?'D':'I'));

      /*
       * This synthesized URL isn't always right--suffixes like ;type=A are
       * stripped off. It would be better to work directly from the original
       * URL and simply replace the port part of it.
       */
      url = aprintf(""%s://%s%s%s:%hu%s%s%s"", conn->given->scheme,
                    conn->bits.ipv6_ip?""["":"""", conn->host.name,
                    conn->bits.ipv6_ip?""]"":"""", conn->remote_port,
                    data->state.slash_removed?""/"":"""", data->state.path,
                    type);
      if(!url)
        return CURLE_OUT_OF_MEMORY;

      if(data->change.url_alloc) {
        Curl_safefree(data->change.url);
        data->change.url_alloc = FALSE;
      }

      data->change.url = url;
      data->change.url_alloc = TRUE;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_81.cpp,"[3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 76, 0, 0, 2, 2, 0, 0, 1, 13, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 5, 42, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 8, 8, 5, 0, 4, 0, 0, 6, 0, 15, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_81.cpp,58,"[""string"", ""member"", ""string"", ""member"", ""string"", ""member"", ""string"", ""member"", ""char *""]","[""member""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,5999,"char *hostname_to_match = aprintf(""%s%s%s"",
                                      conn->bits.ipv6_ip ? ""["" : """",
                                      conn->host.name,
                                      conn->bits.ipv6_ip ? ""]"" : """");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_82.cpp,"{
    /* check whether the URL's hostname matches */
    size_t hostname_to_match_len;
    char *hostname_to_match = aprintf(""%s%s%s"",
                                      conn->bits.ipv6_ip ? ""["" : """",
                                      conn->host.name,
                                      conn->bits.ipv6_ip ? ""]"" : """");
    if(!hostname_to_match)
      return CURLE_OUT_OF_MEMORY;
    hostname_to_match_len = strlen(hostname_to_match);
    host_match = strncasecompare(ptr, hostname_to_match,
                                 hostname_to_match_len);
    free(hostname_to_match);
    ptr += hostname_to_match_len;

    host_match = host_match && *ptr == ':';
    ptr++;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_82.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 35, 0, 0, 2, 2, 0, 0, 1, 6, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 2, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 3, 2, 0, 4, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_82.cpp,22,"[""string"", ""string"", ""member"", ""string""]","[""const char *"", ""const char *"", ""char"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/url.cpp,6418,"reurl = aprintf(""%s://%s"", conn->handler->scheme, data->change.url);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_83.cpp,"{
    /* We're guessing prefixes here and if we're told to use a proxy or if
       we're gonna follow a Location: later or... then we need the protocol
       part added so that we have a valid URL. */
    char *reurl;
    char *ch_lower;

    reurl = aprintf(""%s://%s"", conn->handler->scheme, data->change.url);

    if(!reurl) {
      result = CURLE_OUT_OF_MEMORY;
      goto out;
    }

    /* Change protocol prefix to lower-case */
    for(ch_lower = reurl; *ch_lower != ':'; ch_lower++)
      *ch_lower = (char)TOLOWER(*ch_lower);

    if(data->change.url_alloc) {
      Curl_safefree(data->change.url);
      data->change.url_alloc = FALSE;
    }

    data->change.url = reurl;
    data->change.url_alloc = TRUE; /* free this later */
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_83.cpp,"[2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 50, 0, 0, 2, 2, 0, 0, 1, 2, 0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 2, 0, 0, 3, 0, 0, 7, 0, 5, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_83.cpp,109,"[""string"", ""member"", ""member""]","[""bool""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/socks_sspi.cpp,109,"snprintf(service_name, service_length +
             strlen(conn->socks_proxy.host.name)+2, ""%s/%s"",
             service, conn->socks_proxy.host.name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_85.cpp,"{
    service_name = malloc(service_length +
                          strlen(conn->socks_proxy.host.name) + 2);
    if(!service_name)
      return CURLE_OUT_OF_MEMORY;
    snprintf(service_name, service_length +
             strlen(conn->socks_proxy.host.name)+2, ""%s/%s"",
             service, conn->socks_proxy.host.name);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_85.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_85.cpp,48,"[""malloc_ret"", ""const size_t"", ""string"", ""const char *"", ""member""]","[""malloc_ret"", ""!"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/security.cpp,122,"vsnprintf(print_buffer, sizeof(print_buffer), message, args);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_86.cpp,"{
  int ftp_code;
  ssize_t nread=0;
  va_list args;
  char print_buffer[50];

  va_start(args, message);
  vsnprintf(print_buffer, sizeof(print_buffer), message, args);
  va_end(args);

  if(Curl_ftpsend(conn, print_buffer)) {
    ftp_code = -1;
  }
  else {
    if(Curl_GetFTPResponse(&nread, conn, &ftp_code))
      ftp_code = -1;
  }

  (void)nread; /* Unused */
  return ftp_code;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_86.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 31, 0, 0, 4, 4, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 24, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 2, 2, 1, 0, 6, 0, 0, 6, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_86.cpp,8,"[""char *"", ""unkown"", ""const char *"", ""va_list""]",[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/hostip6.cpp,134,"printf(""dump_addrinfo:\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_87.cpp,"{
  printf(""dump_addrinfo:\n"");
  for(; ai; ai = ai->ai_next) {
    char  buf[INET6_ADDRSTRLEN];

    printf(""    fam %2d, CNAME %s, "",
           ai->ai_family, ai->ai_canonname ? ai->ai_canonname : ""<none>"");
    if(Curl_printable_address(ai, buf, sizeof(buf)))
      printf(""%s\n"", buf);
    else
      printf(""failed; %s\n"", Curl_strerror(conn, SOCKERRNO));
  }
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_87.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 30, 0, 0, 1, 1, 0, 0, 1, 5, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 25, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 3, 2, 2, 0, 7, 0, 0, 4, 0, 14, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_87.cpp,2,"[""string""]",[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/hostip6.cpp,138,"printf(""    fam %2d, CNAME %s, "",
           ai->ai_family, ai->ai_canonname ? ai->ai_canonname : ""<none>"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_88.cpp,"{
    char  buf[INET6_ADDRSTRLEN];

    printf(""    fam %2d, CNAME %s, "",
           ai->ai_family, ai->ai_canonname ? ai->ai_canonname : ""<none>"");
    if(Curl_printable_address(ai, buf, sizeof(buf)))
      printf(""%s\n"", buf);
    else
      printf(""failed; %s\n"", Curl_strerror(conn, SOCKERRNO));
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_88.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 24, 0, 0, 1, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 21, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 2, 2, 0, 6, 0, 0, 3, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_88.cpp,6,"[""string"", ""member"", ""member""]","[""const Curl_addrinfo *""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/hostip6.cpp,141,"printf(""%s\n"", buf);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_89.cpp,"printf(""%s\n"", buf)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_89.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_89.cpp,9,"[""string"", ""char *""]","[""Curl_printable_address_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/hostip6.cpp,143,"printf(""failed; %s\n"", Curl_strerror(conn, SOCKERRNO));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_90.cpp,"printf(""failed; %s\n"", Curl_strerror(conn, SOCKERRNO))",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_90.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_90.cpp,11,"[""string"", ""Curl_strerror_ret""]","[""Curl_printable_address_ret"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/hostip6.cpp,213,"snprintf(sbuf, sizeof(sbuf), ""%d"", port);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_91.cpp,"{
    snprintf(sbuf, sizeof(sbuf), ""%d"", port);
    sbufptr=sbuf;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_91.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_91.cpp,54,"[""char *"", ""unkown"", ""string"", ""int""]","[""int""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/ldap.cpp,766,"vfprintf(stderr, fmt, args);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_92.cpp,"{
  static int do_trace = -1;
  va_list args;

  if(do_trace == -1) {
    const char *env = getenv(""CURL_TRACE"");
    do_trace = (env && strtol(env, NULL, 10) > 0);
  }
  if(!do_trace)
    return;

  va_start(args, fmt);
  vfprintf(stderr, fmt, args);
  va_end(args);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_92.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 2, 23, 0, 0, 3, 3, 0, 0, 2, 5, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 2, 0, 0, 5, 0, 0, 4, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_92.cpp,13,"[""unkown"", ""const char *"", ""va_list""]","[""bool"", ""!"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/socks_gssapi.cpp,152,"snprintf(service.value, service.length+1, ""%s@%s"",
             serviceptr, conn->socks_proxy.host.name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_93.cpp,"{
    service.value = malloc(serviceptr_length +
                           strlen(conn->socks_proxy.host.name)+2);
    if(!service.value)
      return CURLE_OUT_OF_MEMORY;
    service.length = serviceptr_length + strlen(conn->socks_proxy.host.name)+1;
    snprintf(service.value, service.length+1, ""%s@%s"",
             serviceptr, conn->socks_proxy.host.name);

    gss_major_status = gss_import_name(&gss_minor_status, &service,
                                       GSS_C_NT_HOSTBASED_SERVICE, &server);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_93.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 4, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_93.cpp,51,"[""member"", ""member"", ""string"", ""const char *"", ""member""]","[""member"", ""!"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,103,"len = snprintf(ptr, left, "" zlib/%s"", zlibVersion());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_94.cpp,"{
  static bool initialized;
  static char version[200];
  char *ptr = version;
  size_t len;
  size_t left = sizeof(version);

  if(initialized)
    return version;

  strcpy(ptr, LIBCURL_NAME ""/"" LIBCURL_VERSION);
  len = strlen(ptr);
  left -= len;
  ptr += len;

  if(left > 1) {
    len = Curl_ssl_version(ptr + 1, left - 1);

    if(len > 0) {
      *ptr = ' ';
      left -= ++len;
      ptr += len;
    }
  }

#ifdef HAVE_LIBZ
  len = snprintf(ptr, left, "" zlib/%s"", zlibVersion());
  left -= len;
  ptr += len;
#endif
#ifdef USE_ARES
  /* this function is only present in c-ares, not in the original ares */
  len = snprintf(ptr, left, "" c-ares/%s"", ares_version(NULL));
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBIDN2
  if(idn2_check_version(IDN2_VERSION)) {
    len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));
    left -= len;
    ptr += len;
  }
#endif
#ifdef USE_LIBPSL
  len = snprintf(ptr, left, "" libpsl/%s"", psl_get_version());
  left -= len;
  ptr += len;
#endif
#ifdef USE_WIN32_IDN
  len = snprintf(ptr, left, "" WinIDN"");
  left -= len;
  ptr += len;
#endif
#if defined(HAVE_ICONV) && defined(CURL_DOES_CONVERSIONS)
#ifdef _LIBICONV_VERSION
  len = snprintf(ptr, left, "" iconv/%d.%d"",
                 _LIBICONV_VERSION >> 8, _LIBICONV_VERSION & 255);
#else
  /* version unknown */
  len = snprintf(ptr, left, "" iconv"");
#endif /* _LIBICONV_VERSION */
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBSSH2
  len = snprintf(ptr, left, "" libssh2/%s"", CURL_LIBSSH2_VERSION);
  left -= len;
  ptr += len;
#endif
#ifdef USE_NGHTTP2
  len = Curl_http2_ver(ptr, left);
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBRTMP
  {
    char suff[2];
    if(RTMP_LIB_VERSION & 0xff) {
      suff[0] = (RTMP_LIB_VERSION & 0xff) + 'a' - 1;
      suff[1] = '\0';
    }
    else
      suff[0] = '\0';

    snprintf(ptr, left, "" librtmp/%d.%d%s"",
             RTMP_LIB_VERSION >> 16, (RTMP_LIB_VERSION >> 8) & 0xff,
             suff);
/*
  If another lib version is added below this one, this code would
  also have to do:

    len = what snprintf() returned

    left -= len;
    ptr += len;
*/
  }
#endif

  initialized = true;
  return version;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_94.cpp,"[6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 2, 148, 0, 0, 6, 6, 0, 0, 2, 32, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 103, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 5, 5, 2, 0, 21, 0, 0, 38, 0, 50, 21, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_94.cpp,27,"[""char *"", ""size_t"", ""string"", ""zlibVersion_ret""]","[""bool"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,109,"len = snprintf(ptr, left, "" c-ares/%s"", ares_version(NULL));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_95.cpp,"{
  static bool initialized;
  static char version[200];
  char *ptr = version;
  size_t len;
  size_t left = sizeof(version);

  if(initialized)
    return version;

  strcpy(ptr, LIBCURL_NAME ""/"" LIBCURL_VERSION);
  len = strlen(ptr);
  left -= len;
  ptr += len;

  if(left > 1) {
    len = Curl_ssl_version(ptr + 1, left - 1);

    if(len > 0) {
      *ptr = ' ';
      left -= ++len;
      ptr += len;
    }
  }

#ifdef HAVE_LIBZ
  len = snprintf(ptr, left, "" zlib/%s"", zlibVersion());
  left -= len;
  ptr += len;
#endif
#ifdef USE_ARES
  /* this function is only present in c-ares, not in the original ares */
  len = snprintf(ptr, left, "" c-ares/%s"", ares_version(NULL));
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBIDN2
  if(idn2_check_version(IDN2_VERSION)) {
    len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));
    left -= len;
    ptr += len;
  }
#endif
#ifdef USE_LIBPSL
  len = snprintf(ptr, left, "" libpsl/%s"", psl_get_version());
  left -= len;
  ptr += len;
#endif
#ifdef USE_WIN32_IDN
  len = snprintf(ptr, left, "" WinIDN"");
  left -= len;
  ptr += len;
#endif
#if defined(HAVE_ICONV) && defined(CURL_DOES_CONVERSIONS)
#ifdef _LIBICONV_VERSION
  len = snprintf(ptr, left, "" iconv/%d.%d"",
                 _LIBICONV_VERSION >> 8, _LIBICONV_VERSION & 255);
#else
  /* version unknown */
  len = snprintf(ptr, left, "" iconv"");
#endif /* _LIBICONV_VERSION */
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBSSH2
  len = snprintf(ptr, left, "" libssh2/%s"", CURL_LIBSSH2_VERSION);
  left -= len;
  ptr += len;
#endif
#ifdef USE_NGHTTP2
  len = Curl_http2_ver(ptr, left);
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBRTMP
  {
    char suff[2];
    if(RTMP_LIB_VERSION & 0xff) {
      suff[0] = (RTMP_LIB_VERSION & 0xff) + 'a' - 1;
      suff[1] = '\0';
    }
    else
      suff[0] = '\0';

    snprintf(ptr, left, "" librtmp/%d.%d%s"",
             RTMP_LIB_VERSION >> 16, (RTMP_LIB_VERSION >> 8) & 0xff,
             suff);
/*
  If another lib version is added below this one, this code would
  also have to do:

    len = what snprintf() returned

    left -= len;
    ptr += len;
*/
  }
#endif

  initialized = true;
  return version;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_95.cpp,"[6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 2, 148, 0, 0, 6, 6, 0, 0, 2, 32, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 103, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 5, 5, 2, 0, 21, 0, 0, 38, 0, 50, 21, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_95.cpp,33,"[""char *"", ""Curl_ssl_version_ret"", ""string"", ""ares_version_ret""]","[""bool"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,115,"len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_96.cpp,"{
    len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));
    left -= len;
    ptr += len;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_96.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_96.cpp,39,"[""snprintf_ret"", ""snprintf_ret"", ""string"", ""idn2_check_version_ret""]","[""idn2_check_version_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,121,"len = snprintf(ptr, left, "" libpsl/%s"", psl_get_version());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_97.cpp,"{
  static bool initialized;
  static char version[200];
  char *ptr = version;
  size_t len;
  size_t left = sizeof(version);

  if(initialized)
    return version;

  strcpy(ptr, LIBCURL_NAME ""/"" LIBCURL_VERSION);
  len = strlen(ptr);
  left -= len;
  ptr += len;

  if(left > 1) {
    len = Curl_ssl_version(ptr + 1, left - 1);

    if(len > 0) {
      *ptr = ' ';
      left -= ++len;
      ptr += len;
    }
  }

#ifdef HAVE_LIBZ
  len = snprintf(ptr, left, "" zlib/%s"", zlibVersion());
  left -= len;
  ptr += len;
#endif
#ifdef USE_ARES
  /* this function is only present in c-ares, not in the original ares */
  len = snprintf(ptr, left, "" c-ares/%s"", ares_version(NULL));
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBIDN2
  if(idn2_check_version(IDN2_VERSION)) {
    len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));
    left -= len;
    ptr += len;
  }
#endif
#ifdef USE_LIBPSL
  len = snprintf(ptr, left, "" libpsl/%s"", psl_get_version());
  left -= len;
  ptr += len;
#endif
#ifdef USE_WIN32_IDN
  len = snprintf(ptr, left, "" WinIDN"");
  left -= len;
  ptr += len;
#endif
#if defined(HAVE_ICONV) && defined(CURL_DOES_CONVERSIONS)
#ifdef _LIBICONV_VERSION
  len = snprintf(ptr, left, "" iconv/%d.%d"",
                 _LIBICONV_VERSION >> 8, _LIBICONV_VERSION & 255);
#else
  /* version unknown */
  len = snprintf(ptr, left, "" iconv"");
#endif /* _LIBICONV_VERSION */
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBSSH2
  len = snprintf(ptr, left, "" libssh2/%s"", CURL_LIBSSH2_VERSION);
  left -= len;
  ptr += len;
#endif
#ifdef USE_NGHTTP2
  len = Curl_http2_ver(ptr, left);
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBRTMP
  {
    char suff[2];
    if(RTMP_LIB_VERSION & 0xff) {
      suff[0] = (RTMP_LIB_VERSION & 0xff) + 'a' - 1;
      suff[1] = '\0';
    }
    else
      suff[0] = '\0';

    snprintf(ptr, left, "" librtmp/%d.%d%s"",
             RTMP_LIB_VERSION >> 16, (RTMP_LIB_VERSION >> 8) & 0xff,
             suff);
/*
  If another lib version is added below this one, this code would
  also have to do:

    len = what snprintf() returned

    left -= len;
    ptr += len;
*/
  }
#endif

  initialized = true;
  return version;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_97.cpp,"[6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 2, 148, 0, 0, 6, 6, 0, 0, 2, 32, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 103, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 5, 5, 2, 0, 21, 0, 0, 38, 0, 50, 21, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_97.cpp,45,"[""snprintf_ret"", ""snprintf_ret"", ""string"", ""psl_get_version_ret""]","[""bool"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,126,"len = snprintf(ptr, left, "" WinIDN"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_98.cpp,"{
  static bool initialized;
  static char version[200];
  char *ptr = version;
  size_t len;
  size_t left = sizeof(version);

  if(initialized)
    return version;

  strcpy(ptr, LIBCURL_NAME ""/"" LIBCURL_VERSION);
  len = strlen(ptr);
  left -= len;
  ptr += len;

  if(left > 1) {
    len = Curl_ssl_version(ptr + 1, left - 1);

    if(len > 0) {
      *ptr = ' ';
      left -= ++len;
      ptr += len;
    }
  }

#ifdef HAVE_LIBZ
  len = snprintf(ptr, left, "" zlib/%s"", zlibVersion());
  left -= len;
  ptr += len;
#endif
#ifdef USE_ARES
  /* this function is only present in c-ares, not in the original ares */
  len = snprintf(ptr, left, "" c-ares/%s"", ares_version(NULL));
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBIDN2
  if(idn2_check_version(IDN2_VERSION)) {
    len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));
    left -= len;
    ptr += len;
  }
#endif
#ifdef USE_LIBPSL
  len = snprintf(ptr, left, "" libpsl/%s"", psl_get_version());
  left -= len;
  ptr += len;
#endif
#ifdef USE_WIN32_IDN
  len = snprintf(ptr, left, "" WinIDN"");
  left -= len;
  ptr += len;
#endif
#if defined(HAVE_ICONV) && defined(CURL_DOES_CONVERSIONS)
#ifdef _LIBICONV_VERSION
  len = snprintf(ptr, left, "" iconv/%d.%d"",
                 _LIBICONV_VERSION >> 8, _LIBICONV_VERSION & 255);
#else
  /* version unknown */
  len = snprintf(ptr, left, "" iconv"");
#endif /* _LIBICONV_VERSION */
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBSSH2
  len = snprintf(ptr, left, "" libssh2/%s"", CURL_LIBSSH2_VERSION);
  left -= len;
  ptr += len;
#endif
#ifdef USE_NGHTTP2
  len = Curl_http2_ver(ptr, left);
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBRTMP
  {
    char suff[2];
    if(RTMP_LIB_VERSION & 0xff) {
      suff[0] = (RTMP_LIB_VERSION & 0xff) + 'a' - 1;
      suff[1] = '\0';
    }
    else
      suff[0] = '\0';

    snprintf(ptr, left, "" librtmp/%d.%d%s"",
             RTMP_LIB_VERSION >> 16, (RTMP_LIB_VERSION >> 8) & 0xff,
             suff);
/*
  If another lib version is added below this one, this code would
  also have to do:

    len = what snprintf() returned

    left -= len;
    ptr += len;
*/
  }
#endif

  initialized = true;
  return version;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_98.cpp,"[6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 2, 148, 0, 0, 6, 6, 0, 0, 2, 32, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 103, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 5, 5, 2, 0, 21, 0, 0, 38, 0, 50, 21, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_98.cpp,50,"[""snprintf_ret"", ""snprintf_ret"", ""string""]","[""bool"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,132,"len = snprintf(ptr, left, "" iconv/%d.%d"",
                 _LIBICONV_VERSION >> 8, _LIBICONV_VERSION & 255);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_99.cpp,"{
  static bool initialized;
  static char version[200];
  char *ptr = version;
  size_t len;
  size_t left = sizeof(version);

  if(initialized)
    return version;

  strcpy(ptr, LIBCURL_NAME ""/"" LIBCURL_VERSION);
  len = strlen(ptr);
  left -= len;
  ptr += len;

  if(left > 1) {
    len = Curl_ssl_version(ptr + 1, left - 1);

    if(len > 0) {
      *ptr = ' ';
      left -= ++len;
      ptr += len;
    }
  }

#ifdef HAVE_LIBZ
  len = snprintf(ptr, left, "" zlib/%s"", zlibVersion());
  left -= len;
  ptr += len;
#endif
#ifdef USE_ARES
  /* this function is only present in c-ares, not in the original ares */
  len = snprintf(ptr, left, "" c-ares/%s"", ares_version(NULL));
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBIDN2
  if(idn2_check_version(IDN2_VERSION)) {
    len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));
    left -= len;
    ptr += len;
  }
#endif
#ifdef USE_LIBPSL
  len = snprintf(ptr, left, "" libpsl/%s"", psl_get_version());
  left -= len;
  ptr += len;
#endif
#ifdef USE_WIN32_IDN
  len = snprintf(ptr, left, "" WinIDN"");
  left -= len;
  ptr += len;
#endif
#if defined(HAVE_ICONV) && defined(CURL_DOES_CONVERSIONS)
#ifdef _LIBICONV_VERSION
  len = snprintf(ptr, left, "" iconv/%d.%d"",
                 _LIBICONV_VERSION >> 8, _LIBICONV_VERSION & 255);
#else
  /* version unknown */
  len = snprintf(ptr, left, "" iconv"");
#endif /* _LIBICONV_VERSION */
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBSSH2
  len = snprintf(ptr, left, "" libssh2/%s"", CURL_LIBSSH2_VERSION);
  left -= len;
  ptr += len;
#endif
#ifdef USE_NGHTTP2
  len = Curl_http2_ver(ptr, left);
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBRTMP
  {
    char suff[2];
    if(RTMP_LIB_VERSION & 0xff) {
      suff[0] = (RTMP_LIB_VERSION & 0xff) + 'a' - 1;
      suff[1] = '\0';
    }
    else
      suff[0] = '\0';

    snprintf(ptr, left, "" librtmp/%d.%d%s"",
             RTMP_LIB_VERSION >> 16, (RTMP_LIB_VERSION >> 8) & 0xff,
             suff);
/*
  If another lib version is added below this one, this code would
  also have to do:

    len = what snprintf() returned

    left -= len;
    ptr += len;
*/
  }
#endif

  initialized = true;
  return version;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_99.cpp,"[6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 2, 148, 0, 0, 6, 6, 0, 0, 2, 32, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 103, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 5, 5, 2, 0, 21, 0, 0, 38, 0, 50, 21, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_99.cpp,56,"[""snprintf_ret"", ""snprintf_ret"", ""string"", ""macro"", ""bool""]","[""bool"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,142,"len = snprintf(ptr, left, "" libssh2/%s"", CURL_LIBSSH2_VERSION);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_101.cpp,"{
  static bool initialized;
  static char version[200];
  char *ptr = version;
  size_t len;
  size_t left = sizeof(version);

  if(initialized)
    return version;

  strcpy(ptr, LIBCURL_NAME ""/"" LIBCURL_VERSION);
  len = strlen(ptr);
  left -= len;
  ptr += len;

  if(left > 1) {
    len = Curl_ssl_version(ptr + 1, left - 1);

    if(len > 0) {
      *ptr = ' ';
      left -= ++len;
      ptr += len;
    }
  }

#ifdef HAVE_LIBZ
  len = snprintf(ptr, left, "" zlib/%s"", zlibVersion());
  left -= len;
  ptr += len;
#endif
#ifdef USE_ARES
  /* this function is only present in c-ares, not in the original ares */
  len = snprintf(ptr, left, "" c-ares/%s"", ares_version(NULL));
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBIDN2
  if(idn2_check_version(IDN2_VERSION)) {
    len = snprintf(ptr, left, "" libidn2/%s"", idn2_check_version(NULL));
    left -= len;
    ptr += len;
  }
#endif
#ifdef USE_LIBPSL
  len = snprintf(ptr, left, "" libpsl/%s"", psl_get_version());
  left -= len;
  ptr += len;
#endif
#ifdef USE_WIN32_IDN
  len = snprintf(ptr, left, "" WinIDN"");
  left -= len;
  ptr += len;
#endif
#if defined(HAVE_ICONV) && defined(CURL_DOES_CONVERSIONS)
#ifdef _LIBICONV_VERSION
  len = snprintf(ptr, left, "" iconv/%d.%d"",
                 _LIBICONV_VERSION >> 8, _LIBICONV_VERSION & 255);
#else
  /* version unknown */
  len = snprintf(ptr, left, "" iconv"");
#endif /* _LIBICONV_VERSION */
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBSSH2
  len = snprintf(ptr, left, "" libssh2/%s"", CURL_LIBSSH2_VERSION);
  left -= len;
  ptr += len;
#endif
#ifdef USE_NGHTTP2
  len = Curl_http2_ver(ptr, left);
  left -= len;
  ptr += len;
#endif
#ifdef USE_LIBRTMP
  {
    char suff[2];
    if(RTMP_LIB_VERSION & 0xff) {
      suff[0] = (RTMP_LIB_VERSION & 0xff) + 'a' - 1;
      suff[1] = '\0';
    }
    else
      suff[0] = '\0';

    snprintf(ptr, left, "" librtmp/%d.%d%s"",
             RTMP_LIB_VERSION >> 16, (RTMP_LIB_VERSION >> 8) & 0xff,
             suff);
/*
  If another lib version is added below this one, this code would
  also have to do:

    len = what snprintf() returned

    left -= len;
    ptr += len;
*/
  }
#endif

  initialized = true;
  return version;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_101.cpp,"[6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 2, 148, 0, 0, 6, 6, 0, 0, 2, 32, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 103, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 5, 5, 2, 0, 21, 0, 0, 38, 0, 50, 21, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_101.cpp,66,"[""snprintf_ret"", ""snprintf_ret"", ""string"", ""macro""]","[""bool""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,161,"snprintf(ptr, left, "" librtmp/%d.%d%s"",
             RTMP_LIB_VERSION >> 16, (RTMP_LIB_VERSION >> 8) & 0xff,
             suff);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_102.cpp,"{
    char suff[2];
    if(RTMP_LIB_VERSION & 0xff) {
      suff[0] = (RTMP_LIB_VERSION & 0xff) + 'a' - 1;
      suff[1] = '\0';
    }
    else
      suff[0] = '\0';

    snprintf(ptr, left, "" librtmp/%d.%d%s"",
             RTMP_LIB_VERSION >> 16, (RTMP_LIB_VERSION >> 8) & 0xff,
             suff);
/*
  If another lib version is added below this one, this code would
  also have to do:

    len = what snprintf() returned

    left -= len;
    ptr += len;
*/
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_102.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 17, 0, 0, 1, 1, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 1, 1, 1, 0, 1, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_102.cpp,85,"[""snprintf_ret"", ""snprintf_ret"", ""string"", ""macro"", ""bool"", ""char *""]","[""bool""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/version.cpp,390,"snprintf(ssh_buffer, sizeof(ssh_buffer), ""libssh2/%s"", LIBSSH2_VERSION);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_103.cpp,"{
  static bool initialized;
#ifdef USE_LIBSSH2
  static char ssh_buffer[80];
#endif
#ifdef USE_SSL
  static char ssl_buffer[80];
#endif

  if(initialized)
    return &version_info;

#ifdef USE_SSL
  Curl_ssl_version(ssl_buffer, sizeof(ssl_buffer));
  version_info.ssl_version = ssl_buffer;
#endif

#ifdef HAVE_LIBZ
  version_info.libz_version = zlibVersion();
  /* libz left NULL if non-existing */
#endif
#ifdef USE_ARES
  {
    int aresnum;
    version_info.ares = ares_version(&aresnum);
    version_info.ares_num = aresnum;
  }
#endif
#ifdef USE_LIBIDN2
  /* This returns a version string if we use the given version or later,
     otherwise it returns NULL */
  version_info.libidn = idn2_check_version(IDN2_VERSION);
  if(version_info.libidn)
    version_info.features |= CURL_VERSION_IDN;
#elif defined(USE_WIN32_IDN)
  version_info.features |= CURL_VERSION_IDN;
#endif

#if defined(HAVE_ICONV) && defined(CURL_DOES_CONVERSIONS)
#ifdef _LIBICONV_VERSION
  version_info.iconv_ver_num = _LIBICONV_VERSION;
#else
  /* version unknown */
  version_info.iconv_ver_num = -1;
#endif /* _LIBICONV_VERSION */
#endif

#ifdef USE_LIBSSH2
  snprintf(ssh_buffer, sizeof(ssh_buffer), ""libssh2/%s"", LIBSSH2_VERSION);
  version_info.libssh_version = ssh_buffer;
#endif

  (void)stamp; /* avoid compiler warnings, we don't use this */

  initialized = true;
  return &version_info;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_103.cpp,"[3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 3, 81, 0, 0, 4, 4, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 35, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 2, 2, 1, 0, 10, 0, 0, 14, 0, 13, 20, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_103.cpp,49,"[""char *"", ""unkown"", ""string"", ""macro""]","[""bool"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/telnet.cpp,833,"snprintf(option_arg, sizeof(option_arg), ""USER,%s"", conn->user);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_104.cpp,"{
    snprintf(option_arg, sizeof(option_arg), ""USER,%s"", conn->user);
    beg = curl_slist_append(tn->telnet_vars, option_arg);
    if(!beg) {
      curl_slist_free_all(tn->telnet_vars);
      tn->telnet_vars = NULL;
      return CURLE_OUT_OF_MEMORY;
    }
    tn->telnet_vars = beg;
    tn->us_preferred[CURL_TELOPT_NEW_ENVIRON] = CURL_YES;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_104.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 17, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 4, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_104.cpp,14,"[""char *"", ""unkown"", ""string"", ""member""]","[""member""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/telnet.cpp,940,"snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_TTYPE,
               CURL_TELQUAL_IS, tn->subopt_ttype, CURL_IAC, CURL_SE);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_105.cpp,"{
    case CURL_TELOPT_TTYPE:
      len = strlen(tn->subopt_ttype) + 4 + 2;
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_TTYPE,
               CURL_TELQUAL_IS, tn->subopt_ttype, CURL_IAC, CURL_SE);
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
    case CURL_TELOPT_XDISPLOC:
      len = strlen(tn->subopt_xdisploc) + 4 + 2;
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_XDISPLOC,
               CURL_TELQUAL_IS, tn->subopt_xdisploc, CURL_IAC, CURL_SE);
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
    case CURL_TELOPT_NEW_ENVIRON:
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_NEW_ENVIRON,
               CURL_TELQUAL_IS);
      len = 4;

      for(v = tn->telnet_vars;v;v = v->next) {
        tmplen = (strlen(v->data) + 1);
        /* Add the variable only if it fits */
        if(len + tmplen < (int)sizeof(temp)-6) {
          if(sscanf(v->data, ""%127[^,],%127s"", varname, varval)) {
            snprintf((char *)&temp[len], sizeof(temp) - len,
                     ""%c%s%c%s"", CURL_NEW_ENV_VAR, varname,
                     CURL_NEW_ENV_VALUE, varval);
            len += tmplen;
          }
        }
      }
      snprintf((char *)&temp[len], sizeof(temp) - len,
               ""%c%c"", CURL_IAC, CURL_SE);
      len += 2;
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_105.cpp,"[5, 0, 1, 0, 3, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 1, 29, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 124, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 6, 5, 0, 0, 24, 0, 0, 23, 0, 82, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_105.cpp,17,"[""unsigned char *"", ""unkown"", ""string"", ""macro"", ""macro"", ""macro"", ""macro"", ""member"", ""macro"", ""macro""]","[""CURL_SB_GET_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/telnet.cpp,952,"snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_XDISPLOC,
               CURL_TELQUAL_IS, tn->subopt_xdisploc, CURL_IAC, CURL_SE);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_106.cpp,"{
    case CURL_TELOPT_TTYPE:
      len = strlen(tn->subopt_ttype) + 4 + 2;
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_TTYPE,
               CURL_TELQUAL_IS, tn->subopt_ttype, CURL_IAC, CURL_SE);
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
    case CURL_TELOPT_XDISPLOC:
      len = strlen(tn->subopt_xdisploc) + 4 + 2;
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_XDISPLOC,
               CURL_TELQUAL_IS, tn->subopt_xdisploc, CURL_IAC, CURL_SE);
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
    case CURL_TELOPT_NEW_ENVIRON:
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_NEW_ENVIRON,
               CURL_TELQUAL_IS);
      len = 4;

      for(v = tn->telnet_vars;v;v = v->next) {
        tmplen = (strlen(v->data) + 1);
        /* Add the variable only if it fits */
        if(len + tmplen < (int)sizeof(temp)-6) {
          if(sscanf(v->data, ""%127[^,],%127s"", varname, varval)) {
            snprintf((char *)&temp[len], sizeof(temp) - len,
                     ""%c%s%c%s"", CURL_NEW_ENV_VAR, varname,
                     CURL_NEW_ENV_VALUE, varval);
            len += tmplen;
          }
        }
      }
      snprintf((char *)&temp[len], sizeof(temp) - len,
               ""%c%c"", CURL_IAC, CURL_SE);
      len += 2;
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_106.cpp,"[5, 0, 1, 0, 3, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 1, 29, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 124, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 6, 5, 0, 0, 24, 0, 0, 23, 0, 82, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_106.cpp,29,"[""unsigned char *"", ""unkown"", ""string"", ""macro"", ""macro"", ""macro"", ""macro"", ""member"", ""macro"", ""macro""]","[""CURL_SB_GET_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/telnet.cpp,963,"snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_NEW_ENVIRON,
               CURL_TELQUAL_IS);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_107.cpp,"{
    case CURL_TELOPT_TTYPE:
      len = strlen(tn->subopt_ttype) + 4 + 2;
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_TTYPE,
               CURL_TELQUAL_IS, tn->subopt_ttype, CURL_IAC, CURL_SE);
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
    case CURL_TELOPT_XDISPLOC:
      len = strlen(tn->subopt_xdisploc) + 4 + 2;
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_XDISPLOC,
               CURL_TELQUAL_IS, tn->subopt_xdisploc, CURL_IAC, CURL_SE);
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
    case CURL_TELOPT_NEW_ENVIRON:
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_NEW_ENVIRON,
               CURL_TELQUAL_IS);
      len = 4;

      for(v = tn->telnet_vars;v;v = v->next) {
        tmplen = (strlen(v->data) + 1);
        /* Add the variable only if it fits */
        if(len + tmplen < (int)sizeof(temp)-6) {
          if(sscanf(v->data, ""%127[^,],%127s"", varname, varval)) {
            snprintf((char *)&temp[len], sizeof(temp) - len,
                     ""%c%s%c%s"", CURL_NEW_ENV_VAR, varname,
                     CURL_NEW_ENV_VALUE, varval);
            len += tmplen;
          }
        }
      }
      snprintf((char *)&temp[len], sizeof(temp) - len,
               ""%c%c"", CURL_IAC, CURL_SE);
      len += 2;
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_107.cpp,"[5, 0, 1, 0, 3, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 1, 29, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 124, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 6, 5, 0, 0, 24, 0, 0, 23, 0, 82, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_107.cpp,40,"[""unsigned char *"", ""unkown"", ""string"", ""macro"", ""macro"", ""macro"", ""macro""]","[""CURL_SB_GET_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/telnet.cpp,973,"snprintf((char *)&temp[len], sizeof(temp) - len,
                     ""%c%s%c%s"", CURL_NEW_ENV_VAR, varname,
                     CURL_NEW_ENV_VALUE, varval);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_108.cpp,"{
            snprintf((char *)&temp[len], sizeof(temp) - len,
                     ""%c%s%c%s"", CURL_NEW_ENV_VAR, varname,
                     CURL_NEW_ENV_VALUE, varval);
            len += tmplen;
          }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_108.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 11, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_108.cpp,50,"[""unkown"", ""int"", ""string"", ""macro"", ""char *"", ""macro"", ""char *""]","[""sscanf_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/telnet.cpp,980,"snprintf((char *)&temp[len], sizeof(temp) - len,
               ""%c%c"", CURL_IAC, CURL_SE);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_109.cpp,"{
    case CURL_TELOPT_TTYPE:
      len = strlen(tn->subopt_ttype) + 4 + 2;
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_TTYPE,
               CURL_TELQUAL_IS, tn->subopt_ttype, CURL_IAC, CURL_SE);
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
    case CURL_TELOPT_XDISPLOC:
      len = strlen(tn->subopt_xdisploc) + 4 + 2;
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c%s%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_XDISPLOC,
               CURL_TELQUAL_IS, tn->subopt_xdisploc, CURL_IAC, CURL_SE);
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
    case CURL_TELOPT_NEW_ENVIRON:
      snprintf((char *)temp, sizeof(temp),
               ""%c%c%c%c"", CURL_IAC, CURL_SB, CURL_TELOPT_NEW_ENVIRON,
               CURL_TELQUAL_IS);
      len = 4;

      for(v = tn->telnet_vars;v;v = v->next) {
        tmplen = (strlen(v->data) + 1);
        /* Add the variable only if it fits */
        if(len + tmplen < (int)sizeof(temp)-6) {
          if(sscanf(v->data, ""%127[^,],%127s"", varname, varval)) {
            snprintf((char *)&temp[len], sizeof(temp) - len,
                     ""%c%s%c%s"", CURL_NEW_ENV_VAR, varname,
                     CURL_NEW_ENV_VALUE, varval);
            len += tmplen;
          }
        }
      }
      snprintf((char *)&temp[len], sizeof(temp) - len,
               ""%c%c"", CURL_IAC, CURL_SE);
      len += 2;
      bytes_written = swrite(conn->sock[FIRSTSOCKET], temp, len);
      if(bytes_written < 0) {
        err = SOCKERRNO;
        failf(data,""Sending data failed (%d)"",err);
      }
      printsub(data, '>', &temp[2], len-2);
      break;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_109.cpp,"[5, 0, 1, 0, 3, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 1, 29, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 124, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 6, 5, 0, 0, 24, 0, 0, 23, 0, 82, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_109.cpp,57,"[""unkown"", ""int"", ""string"", ""macro"", ""macro""]","[""CURL_SB_GET_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,218,"DEBUGF(fprintf(stderr, ""Error: Curl_ssl_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_110.cpp,"{
      DEBUGF(fprintf(stderr, ""Error: Curl_ssl_init failed\n""));
      return CURLE_FAILED_INIT;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_110.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_110.cpp,19,"[""fprintf_ret""]","[""Curl_ssl_init_ret"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,224,"DEBUGF(fprintf(stderr, ""Error: win32_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_111.cpp,"{
      DEBUGF(fprintf(stderr, ""Error: win32_init failed\n""));
      return CURLE_FAILED_INIT;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_111.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_111.cpp,25,"[""fprintf_ret""]","[""win32_init_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,230,"DEBUGF(fprintf(stderr, ""Error: Curl_amiga_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_112.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: Curl_amiga_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_112.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_112.cpp,31,"[""fprintf_ret""]","[""Curl_amiga_init_ret"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,237,"DEBUGF(fprintf(stderr, ""Warning: LONG namespace not available\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_113.cpp,"{
    DEBUGF(fprintf(stderr, ""Warning: LONG namespace not available\n""));
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_113.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_113.cpp,38,"[""fprintf_ret""]","[""netware_init_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,242,"DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_114.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: resolver_global_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_114.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_114.cpp,43,"[""fprintf_ret""]","[""Curl_resolver_global_init_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,250,"DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_115.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: libssh2_init failed\n""));
    return CURLE_FAILED_INIT;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_115.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_115.cpp,51,"[""fprintf_ret""]","[""libssh2_init_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,352,"DEBUGF(fprintf(stderr, ""Error: curl_global_init failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_116.cpp,"{
      /* something in the global init failed, return nothing */
      DEBUGF(fprintf(stderr, ""Error: curl_global_init failed\n""));
      return NULL;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_116.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_116.cpp,10,"[""fprintf_ret""]","[""curl_global_init_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/easy.cpp,360,"DEBUGF(fprintf(stderr, ""Error: Curl_open failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_117.cpp,"{
    DEBUGF(fprintf(stderr, ""Error: Curl_open failed\n""));
    return NULL;
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_117.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_117.cpp,18,"[""fprintf_ret""]","[""Curl_open_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/pingpong.cpp,180,"fmt_crlf = aprintf(""%s\r\n"", fmt);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_118.cpp,"{
  ssize_t bytes_written;
  size_t write_len;
  char *fmt_crlf;
  char *s;
  CURLcode result;
  struct connectdata *conn = pp->conn;
  struct Curl_easy *data = conn->data;

#ifdef HAVE_GSSAPI
  enum protection_level data_sec = conn->data_prot;
#endif

  DEBUGASSERT(pp->sendleft == 0);
  DEBUGASSERT(pp->sendsize == 0);
  DEBUGASSERT(pp->sendthis == NULL);

  fmt_crlf = aprintf(""%s\r\n"", fmt); /* append a trailing CRLF */
  if(!fmt_crlf)
    return CURLE_OUT_OF_MEMORY;

  s = vaprintf(fmt_crlf, args); /* trailing CRLF appended */
  free(fmt_crlf);
  if(!s)
    return CURLE_OUT_OF_MEMORY;

  bytes_written = 0;
  write_len = strlen(s);

  Curl_pp_init(pp);

  result = Curl_convert_to_network(data, s, write_len);
  /* Curl_convert_to_network calls failf if unsuccessful */
  if(result) {
    free(s);
    return result;
  }

#ifdef HAVE_GSSAPI
  conn->data_prot = PROT_CMD;
#endif
  result = Curl_write(conn, conn->sock[FIRSTSOCKET], s, write_len,
                     &bytes_written);
#ifdef HAVE_GSSAPI
  DEBUGASSERT(data_sec > PROT_NONE && data_sec < PROT_LAST);
  conn->data_prot = data_sec;
#endif

  if(result) {
    free(s);
    return result;
  }

  if(conn->data->set.verbose)
    Curl_debug(conn->data, CURLINFO_HEADER_OUT,
               s, (size_t)bytes_written, conn);

  if(bytes_written != (ssize_t)write_len) {
    /* the whole chunk was not sent, keep it around and adjust sizes */
    pp->sendthis = s;
    pp->sendsize = write_len;
    pp->sendleft = write_len - bytes_written;
  }
  else {
    free(s);
    pp->sendthis = NULL;
    pp->sendleft = pp->sendsize = 0;
    pp->response = Curl_tvnow();
  }

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_118.cpp,"[6, 0, 0, 0, 0, 0, 5, 0, 0, 0, 8, 0, 0, 0, 0, 149, 0, 0, 8, 8, 0, 0, 3, 5, 0, 0, 0, 0, 4, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 1, 0, 6, 6, 1, 0, 16, 0, 0, 24, 0, 27, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_118.cpp,20,"[""string"", ""const char *""]",[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/pingpong.cpp,184,"s = vaprintf(fmt_crlf, args);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_119.cpp,"{
  ssize_t bytes_written;
  size_t write_len;
  char *fmt_crlf;
  char *s;
  CURLcode result;
  struct connectdata *conn = pp->conn;
  struct Curl_easy *data = conn->data;

#ifdef HAVE_GSSAPI
  enum protection_level data_sec = conn->data_prot;
#endif

  DEBUGASSERT(pp->sendleft == 0);
  DEBUGASSERT(pp->sendsize == 0);
  DEBUGASSERT(pp->sendthis == NULL);

  fmt_crlf = aprintf(""%s\r\n"", fmt); /* append a trailing CRLF */
  if(!fmt_crlf)
    return CURLE_OUT_OF_MEMORY;

  s = vaprintf(fmt_crlf, args); /* trailing CRLF appended */
  free(fmt_crlf);
  if(!s)
    return CURLE_OUT_OF_MEMORY;

  bytes_written = 0;
  write_len = strlen(s);

  Curl_pp_init(pp);

  result = Curl_convert_to_network(data, s, write_len);
  /* Curl_convert_to_network calls failf if unsuccessful */
  if(result) {
    free(s);
    return result;
  }

#ifdef HAVE_GSSAPI
  conn->data_prot = PROT_CMD;
#endif
  result = Curl_write(conn, conn->sock[FIRSTSOCKET], s, write_len,
                     &bytes_written);
#ifdef HAVE_GSSAPI
  DEBUGASSERT(data_sec > PROT_NONE && data_sec < PROT_LAST);
  conn->data_prot = data_sec;
#endif

  if(result) {
    free(s);
    return result;
  }

  if(conn->data->set.verbose)
    Curl_debug(conn->data, CURLINFO_HEADER_OUT,
               s, (size_t)bytes_written, conn);

  if(bytes_written != (ssize_t)write_len) {
    /* the whole chunk was not sent, keep it around and adjust sizes */
    pp->sendthis = s;
    pp->sendsize = write_len;
    pp->sendleft = write_len - bytes_written;
  }
  else {
    free(s);
    pp->sendthis = NULL;
    pp->sendleft = pp->sendsize = 0;
    pp->response = Curl_tvnow();
  }

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_119.cpp,"[6, 0, 0, 0, 0, 0, 5, 0, 0, 0, 8, 0, 0, 0, 0, 149, 0, 0, 8, 8, 0, 0, 3, 5, 0, 0, 0, 0, 4, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 1, 0, 6, 6, 1, 0, 16, 0, 0, 24, 0, 27, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_119.cpp,24,"[""aprintf_ret"", ""va_list""]","[""aprintf_ret"", ""!"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/x509asn1.cpp,212,"snprintf(buf + n, 4, ""%02x:"", *(const unsigned char *) beg++);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_120.cpp,"snprintf(buf + n, 4, ""%02x:"", *(const unsigned char *) beg++)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_120.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_120.cpp,12,"[""null"", ""int"", ""string"", ""unkown""]","[""malloc_ret"", ""const char *"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/x509asn1.cpp,249,"curl_maprintf(""%s%lx"", (val < 0 || val >= 10)? ""0x"": """", val);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_121.cpp,"{
  long val = 0;
  size_t n = end - beg;

  /* Convert an ASN.1 integer value into its string representation.
     Return the dynamically allocated string, or NULL if source is not an
     ASN.1 integer value. */

  if(!n)
    return (const char *) NULL;

  if(n > 4)
    return octet2str(beg, end);

  /* Represent integers <= 32-bit as a single value. */
  if(*beg & 0x80)
    val = ~val;

  do
    val = (val << 8) | *(const unsigned char *) beg++;
  while(beg < end);
  return curl_maprintf(""%s%lx"", (val < 0 || val >= 10)? ""0x"": """", val);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_121.cpp,"[3, 0, 0, 1, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 2, 27, 0, 0, 2, 2, 0, 0, 2, 9, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 1, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 4, 1, 0, 2, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_121.cpp,22,"[""string"", ""string"", ""const char *""]","[""size_t"", ""int"", "">"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/x509asn1.cpp,502,"curl_maprintf(""%.4s-%.2s-%.2s %.2s:%.2s:%c%c%s%.*s%s%.*s"",
                       beg, beg + 4, beg + 6,
                       beg + 8, beg + 10, sec1, sec2,
                       fracl? ""."": """", fracl, fracp,
                       sep, tzl, tzp);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_122.cpp,"{
  const char *tzp;
  const char *fracp;
  char sec1, sec2;
  size_t fracl;
  size_t tzl;
  const char *sep = """";

  /* Convert an ASN.1 Generalized time to a printable string.
     Return the dynamically allocated string, or NULL if an error occurs. */

  for(fracp = beg; fracp < end && *fracp >= '0' && *fracp <= '9'; fracp++)
    ;

  /* Get seconds digits. */
  sec1 = '0';
  switch(fracp - beg - 12) {
  case 0:
    sec2 = '0';
    break;
  case 2:
    sec1 = fracp[-2];
    /* FALLTHROUGH */
  case 1:
    sec2 = fracp[-1];
    break;
  default:
    return (const char *) NULL;
  }

  /* Scan for timezone, measure fractional seconds. */
  tzp = fracp;
  fracl = 0;
  if(fracp < end && (*fracp == '.' || *fracp == ',')) {
    fracp++;
    do
      tzp++;
    while(tzp < end && *tzp >= '0' && *tzp <= '9');
    /* Strip leading zeroes in fractional seconds. */
    for(fracl = tzp - fracp - 1; fracl && fracp[fracl - 1] == '0'; fracl--)
      ;
  }

  /* Process timezone. */
  if(tzp >= end)
    ;           /* Nothing to do. */
  else if(*tzp == 'Z') {
    tzp = "" GMT"";
    end = tzp + 4;
  }
  else {
    sep = "" "";
    tzp++;
  }

  tzl = end - tzp;
  return curl_maprintf(""%.4s-%.2s-%.2s %.2s:%.2s:%c%c%s%.*s%s%.*s"",
                       beg, beg + 4, beg + 6,
                       beg + 8, beg + 10, sec1, sec2,
                       fracl? ""."": """", fracl, fracp,
                       sep, tzl, tzp);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_122.cpp,"[3, 0, 2, 1, 2, 0, 2, 1, 3, 1, 9, 0, 0, 3, 4, 78, 0, 0, 6, 7, 0, 0, 3, 30, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 0, 8, 4, 2, 0, 1, 0, 0, 13, 1, 14, 0, 2, 0, 0, 2, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_122.cpp,57,"[""string"", ""const char *"", ""const char *"", ""const char *"", ""const char *"", ""const char *"", ""char"", ""char"", ""string"", ""int"", ""const char *"", ""const char *"", ""int"", ""const char *""]","[""const char *""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/x509asn1.cpp,542,"curl_maprintf(""%u%.2s-%.2s-%.2s %.2s:%.2s:%.2s %.*s"",
                       20 - (*beg >= '5'), beg, beg + 2, beg + 4,
                       beg + 6, beg + 8, sec,
                       tzl, tzp);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_123.cpp,"{
  const char *tzp;
  size_t tzl;
  const char *sec;

  /* Convert an ASN.1 UTC time to a printable string.
     Return the dynamically allocated string, or NULL if an error occurs. */

  for(tzp = beg; tzp < end && *tzp >= '0' && *tzp <= '9'; tzp++)
    ;
  /* Get the seconds. */
  sec = beg + 10;
  switch(tzp - sec) {
  case 0:
    sec = ""00"";
  case 2:
    break;
  default:
    return (const char *) NULL;
  }

  /* Process timezone. */
  if(tzp >= end)
    return (const char *) NULL;
  if(*tzp == 'Z') {
    tzp = ""GMT"";
    end = tzp + 3;
  }
  else
    tzp++;

  tzl = end - tzp;
  return curl_maprintf(""%u%.2s-%.2s-%.2s %.2s:%.2s:%.2s %.*s"",
                       20 - (*beg >= '5'), beg, beg + 2, beg + 4,
                       beg + 6, beg + 8, sec,
                       tzl, tzp);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_123.cpp,"[2, 0, 1, 0, 1, 0, 3, 1, 2, 1, 6, 0, 0, 1, 4, 42, 0, 0, 3, 3, 0, 0, 1, 16, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 2, 1, 0, 1, 0, 0, 6, 0, 10, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_123.cpp,33,"[""string"", ""int"", ""const char *"", ""const char *"", ""const char *"", ""const char *"", ""const char *"", ""string"", ""string"", ""const char *""]","[""const char *"", ""const char *"", "">="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/x509asn1.cpp,843,"q = curl_maprintf(""%lu"", len);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_124.cpp,"{
      q = curl_maprintf(""%lu"", len);
      if(q) {
        Curl_ssl_push_certinfo(data, certnum, ""RSA Public Key"", q);
        free((char *) q);
      }
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_124.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_124.cpp,30,"[""string"", ""int""]","[""member""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/x509asn1.cpp,929,"ccp = curl_maprintf(""%lx"", version);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_125.cpp,"{
    ccp = curl_maprintf(""%lx"", version);
    if(!ccp)
      return CURLE_OUT_OF_MEMORY;
    Curl_ssl_push_certinfo(data, certnum, ""Version"", ccp);
    free((char *) ccp);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_125.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_125.cpp,52,"[""string"", ""null""]","[""member""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/cookie.cpp,1303,"aprintf(
    ""%s""     /* httponly preamble */
    ""%s%s\t"" /* domain */
    ""%s\t""   /* tailmatch */
    ""%s\t""   /* path */
    ""%s\t""   /* secure */
    ""%"" CURL_FORMAT_CURL_OFF_T ""\t""   /* expires */
    ""%s\t""   /* name */
    ""%s"",    /* value */
    co->httponly?""#HttpOnly_"":"""",
    /* Make sure all domains are prefixed with a dot if they allow
       tailmatching. This is Mozilla-style. */
    (co->tailmatch && co->domain && co->domain[0] != '.')? ""."":"""",
    co->domain?co->domain:""unknown"",
    co->tailmatch?""TRUE"":""FALSE"",
    co->path?co->path:""/"",
    co->secure?""TRUE"":""FALSE"",
    co->expires,
    co->name,
    co->value?co->value:"""");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_126.cpp,"{
  return aprintf(
    ""%s""     /* httponly preamble */
    ""%s%s\t"" /* domain */
    ""%s\t""   /* tailmatch */
    ""%s\t""   /* path */
    ""%s\t""   /* secure */
    ""%"" CURL_FORMAT_CURL_OFF_T ""\t""   /* expires */
    ""%s\t""   /* name */
    ""%s"",    /* value */
    co->httponly?""#HttpOnly_"":"""",
    /* Make sure all domains are prefixed with a dot if they allow
       tailmatching. This is Mozilla-style. */
    (co->tailmatch && co->domain && co->domain[0] != '.')? ""."":"""",
    co->domain?co->domain:""unknown"",
    co->tailmatch?""TRUE"":""FALSE"",
    co->path?co->path:""/"",
    co->secure?""TRUE"":""FALSE"",
    co->expires,
    co->name,
    co->value?co->value:"""");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_126.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 7, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 7, 7, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_126.cpp,2,[],[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/cookie.cpp,1369,"fprintf(out, ""#\n# Fatal libcurl error\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_127.cpp,"{
      fprintf(out, ""#\n# Fatal libcurl error\n"");
      if(!use_stdout)
        fclose(out);
      return 1;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_127.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_127.cpp,36,"[""fopen_ret"", ""string""]","[""get_netscape_format_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/cookie.cpp,1374,"fprintf(out, ""%s\n"", format_ptr);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_128.cpp,"{
    if(!co->domain)
      continue;
    format_ptr = get_netscape_format(co);
    if(format_ptr == NULL) {
      fprintf(out, ""#\n# Fatal libcurl error\n"");
      if(!use_stdout)
        fclose(out);
      return 1;
    }
    fprintf(out, ""%s\n"", format_ptr);
    free(format_ptr);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_128.cpp,"[3, 0, 0, 0, 0, 1, 1, 0, 0, 0, 4, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 5, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_128.cpp,41,"[""fopen_ret"", ""string"", ""get_netscape_format_ret""]","[""get_netscape_format_ret"", ""null"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/mprintf.cpp,918,"len = curl_msnprintf(fptr, left, ""%ld"", width);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_129.cpp,"{
          if(width >= (long)sizeof(work))
            width = sizeof(work)-1;
          /* RECURSIVE USAGE */
          len = curl_msnprintf(fptr, left, ""%ld"", width);
          fptr += len;
          left -= len;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_129.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 11, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_129.cpp,361,"[""constant"", ""size_t"", ""string"", ""int""]","[""int"", ""null"", "">=""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/mprintf.cpp,935,"len = curl_msnprintf(fptr, left, "".%ld"", prec);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_130.cpp,"{
          /* for each digit in the integer part, we can have one less
             precision */
          size_t maxprec = sizeof(work) - 2;
          double val = p->data.dnum;
          while(val >= 10.0) {
            val /= 10;
            maxprec--;
          }

          if(prec > (long)maxprec)
            prec = (long)maxprec-1;
          /* RECURSIVE USAGE */
          len = curl_msnprintf(fptr, left, "".%ld"", prec);
          fptr += len;
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_130.cpp,"[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 25, 0, 0, 2, 2, 0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 14, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_130.cpp,378,"[""curl_msnprintf_ret"", ""curl_msnprintf_ret"", ""string"", ""int""]","[""int"", ""null"", "">=""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/mprintf.cpp,1026,"retcode = curl_mvsnprintf(buffer, maxlength, format, ap_save);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_131.cpp,"{
  int retcode;
  va_list ap_save; /* argument pointer */
  va_start(ap_save, format);
  retcode = curl_mvsnprintf(buffer, maxlength, format, ap_save);
  va_end(ap_save);
  return retcode;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_131.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_131.cpp,5,"[""char *"", ""size_t"", ""const char *"", ""va_list""]",[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/strerror.cpp,1005,"snprintf(outbuf, outmax,
             ""SEC_E_ILLEGAL_MESSAGE (0x%08X) - This error usually occurs ""
             ""when a fatal SSL/TLS alert is received (e.g. handshake failed). ""
             ""More detail may be available in the Windows System event log."",
             err);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_137.cpp,"snprintf(outbuf, outmax,
             ""SEC_E_ILLEGAL_MESSAGE (0x%08X) - This error usually occurs ""
             ""when a fatal SSL/TLS alert is received (e.g. handshake failed). ""
             ""More detail may be available in the Windows System event log."",
             err)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_137.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_137.cpp,274,[],[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/strerror.cpp,1012,"snprintf(txtbuf, sizeof(txtbuf), ""%s (0x%08X)"", txt, err);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_138.cpp,"{
    str = txtbuf;
    snprintf(txtbuf, sizeof(txtbuf), ""%s (0x%08X)"", txt, err);
    txtbuf[sizeof(txtbuf)-1] = '\0';

#ifdef _WIN32_WCE
    {
      wchar_t wbuf[256];
      wbuf[0] = L'\0';

      if(FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM |
                       FORMAT_MESSAGE_IGNORE_INSERTS,
                       NULL, err, LANG_NEUTRAL,
                       wbuf, sizeof(wbuf)/sizeof(wchar_t), NULL)) {
        wcstombs(msgbuf, wbuf, sizeof(msgbuf)-1);
        msg_formatted = TRUE;
      }
    }
#else
    if(FormatMessageA(FORMAT_MESSAGE_FROM_SYSTEM |
                      FORMAT_MESSAGE_IGNORE_INSERTS,
                      NULL, err, LANG_NEUTRAL,
                      msgbuf, sizeof(msgbuf)-1, NULL)) {
      msg_formatted = TRUE;
    }
#endif
    if(msg_formatted) {
      msgbuf[sizeof(msgbuf)-1] = '\0';
      /* strip trailing '\r\n' or '\n' */
      p = strrchr(msgbuf, '\n');
      if(p && (p - msgbuf) >= 2)
        *p = '\0';
      p = strrchr(msgbuf, '\r');
      if(p && (p - msgbuf) >= 1)
        *p = '\0';
      msg = msgbuf;
    }
    if(msg)
      snprintf(outbuf, outmax, ""%s - %s"", str, msg);
    else
      strncpy(outbuf, str, outmax);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_138.cpp,"[6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 73, 0, 0, 1, 1, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 66, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 6, 6, 2, 0, 15, 0, 0, 15, 0, 41, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_138.cpp,281,"[""char *"", ""unkown"", ""string"", ""string"", ""int""]","[""int"", ""macro"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/strerror.cpp,1048,"snprintf(outbuf, outmax, ""%s - %s"", str, msg);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_139.cpp,"snprintf(outbuf, outmax, ""%s - %s"", str, msg)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_139.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_139.cpp,317,"[""member"", ""int"", ""string"", ""char *"", ""char *""]","[""char *""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/curl_ntlm_core.cpp,720,"snprintf((char *)ptr + NTLM_HMAC_MD5_LEN, NTLMv2_BLOB_LEN,
           ""%c%c%c%c""   /* NTLMv2_BLOB_SIGNATURE */
           ""%c%c%c%c"",  /* Reserved = 0 */
           NTLMv2_BLOB_SIGNATURE[0], NTLMv2_BLOB_SIGNATURE[1],
           NTLMv2_BLOB_SIGNATURE[2], NTLMv2_BLOB_SIGNATURE[3],
           0, 0, 0, 0);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_140.cpp,"{
/* NTLMv2 response structure :
------------------------------------------------------------------------------
0     HMAC MD5         16 bytes
------BLOB--------------------------------------------------------------------
16    Signature        0x01010000
20    Reserved         long (0x00000000)
24    Timestamp        LE, 64-bit signed value representing the number of
                       tenths of a microsecond since January 1, 1601.
32    Client Nonce     8 bytes
40    Unknown          4 bytes
44    Target Info      N bytes (from the type-2 message)
44+N  Unknown          4 bytes
------------------------------------------------------------------------------
*/

  unsigned int len = 0;
  unsigned char *ptr = NULL;
  unsigned char hmac_output[NTLM_HMAC_MD5_LEN];
  curl_off_t tw;

  CURLcode result = CURLE_OK;

#if CURL_SIZEOF_CURL_OFF_T < 8
#error ""this section needs 64bit support to work""
#endif

  /* Calculate the timestamp */
#ifdef DEBUGBUILD
  char *force_timestamp = getenv(""CURL_FORCETIME"");
  if(force_timestamp)
    tw = CURL_OFF_T_C(11644473600) * 10000000;
  else
#endif
    tw = ((curl_off_t)time(NULL) + CURL_OFF_T_C(11644473600)) * 10000000;

  /* Calculate the response len */
  len = NTLM_HMAC_MD5_LEN + NTLMv2_BLOB_LEN;

  /* Allocate the response */
  ptr = malloc(len);
  if(!ptr)
    return CURLE_OUT_OF_MEMORY;

  memset(ptr, 0, len);

  /* Create the BLOB structure */
  snprintf((char *)ptr + NTLM_HMAC_MD5_LEN, NTLMv2_BLOB_LEN,
           ""%c%c%c%c""   /* NTLMv2_BLOB_SIGNATURE */
           ""%c%c%c%c"",  /* Reserved = 0 */
           NTLMv2_BLOB_SIGNATURE[0], NTLMv2_BLOB_SIGNATURE[1],
           NTLMv2_BLOB_SIGNATURE[2], NTLMv2_BLOB_SIGNATURE[3],
           0, 0, 0, 0);

  Curl_write64_le(tw, ptr + 24);
  memcpy(ptr + 32, challenge_client, 8);
  memcpy(ptr + 44, ntlm->target_info, ntlm->target_info_len);

  /* Concatenate the Type 2 challenge with the BLOB and do HMAC MD5 */
  memcpy(ptr + 8, &ntlm->nonce[0], 8);
  result = Curl_hmac_md5(ntlmv2hash, NTLM_HMAC_MD5_LEN, ptr + 8,
                         NTLMv2_BLOB_LEN + 8, hmac_output);
  if(result) {
    free(ptr);
    return result;
  }

  /* Concatenate the HMAC MD5 output  with the BLOB */
  memcpy(ptr, hmac_output, NTLM_HMAC_MD5_LEN);

  /* Return the response */
  *ntresp = ptr;
  *ntresp_len = len;

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_140.cpp,"[4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 0, 93, 0, 0, 6, 6, 0, 0, 4, 28, 0, 0, 0, 0, 2, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 3, 3, 1, 0, 14, 0, 0, 15, 0, 39, 5, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_140.cpp,52,[],"[""malloc_ret"", ""!"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/http_proxy.cpp,185,"host_port = aprintf(""%s:%hu"", hostname, remote_port);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_141.cpp,"{
      /* BEGIN CONNECT PHASE */
      char *host_port;
      Curl_send_buffer *req_buffer;

      infof(data, ""Establish HTTP proxy tunnel to %s:%hu\n"",
            hostname, remote_port);

        /* This only happens if we've looped here due to authentication
           reasons, and we don't really use the newly cloned URL here
           then. Just free() it. */
      free(data->req.newurl);
      data->req.newurl = NULL;

      /* initialize a dynamic send-buffer */
      req_buffer = Curl_add_buffer_init();

      if(!req_buffer)
        return CURLE_OUT_OF_MEMORY;

      host_port = aprintf(""%s:%hu"", hostname, remote_port);
      if(!host_port) {
        Curl_add_buffer_free(req_buffer);
        return CURLE_OUT_OF_MEMORY;
      }

      /* Setup the proxy-authorization header, if any */
      result = Curl_http_output_auth(conn, ""CONNECT"", host_port, TRUE);

      free(host_port);

      if(!result) {
        char *host = NULL;
        const char *proxyconn="""";
        const char *useragent="""";
        const char *http = (conn->http_proxy.proxytype == CURLPROXY_HTTP_1_0) ?
          ""1.0"" : ""1.1"";
        bool ipv6_ip = conn->bits.ipv6_ip;
        char *hostheader;

        /* the hostname may be different */
        if(hostname != conn->host.name)
          ipv6_ip = (strchr(hostname, ':') != NULL);
        hostheader= /* host:port with IPv6 support */
          aprintf(""%s%s%s:%hu"", ipv6_ip?""["":"""", hostname, ipv6_ip?""]"":"""",
                  remote_port);
        if(!hostheader) {
          Curl_add_buffer_free(req_buffer);
          return CURLE_OUT_OF_MEMORY;
        }

        if(!Curl_checkProxyheaders(conn, ""Host:"")) {
          host = aprintf(""Host: %s\r\n"", hostheader);
          if(!host) {
            free(hostheader);
            Curl_add_buffer_free(req_buffer);
            return CURLE_OUT_OF_MEMORY;
          }
        }
        if(!Curl_checkProxyheaders(conn, ""Proxy-Connection:""))
          proxyconn = ""Proxy-Connection: Keep-Alive\r\n"";

        if(!Curl_checkProxyheaders(conn, ""User-Agent:"") &&
           data->set.str[STRING_USERAGENT])
          useragent = conn->allocptr.uagent;

        result =
          Curl_add_bufferf(req_buffer,
                           ""CONNECT %s HTTP/%s\r\n""
                           ""%s""  /* Host: */
                           ""%s""  /* Proxy-Authorization */
                           ""%s""  /* User-Agent */
                           ""%s"", /* Proxy-Connection */
                           hostheader,
                           http,
                           host?host:"""",
                           conn->allocptr.proxyuserpwd?
                           conn->allocptr.proxyuserpwd:"""",
                           useragent,
                           proxyconn);

        if(host)
          free(host);
        free(hostheader);

        if(!result)
          result = Curl_add_custom_headers(conn, TRUE, req_buffer);

        if(!result)
          /* CRLF terminate the request */
          result = Curl_add_bufferf(req_buffer, ""\r\n"");

        if(!result) {
          /* Send the connect request to the proxy */
          /* BLOCKING */
          result =
            Curl_add_buffer_send(req_buffer, conn,
                                 &data->info.request_size, 0, sockindex);
        }
        req_buffer = NULL;
        if(result)
          failf(data, ""Failed sending CONNECT to proxy"");
      }

      Curl_add_buffer_free(req_buffer);
      if(result)
        return result;

      conn->tunnel_state[sockindex] = TUNNEL_CONNECT;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_141.cpp,"[15, 0, 0, 0, 0, 0, 5, 0, 0, 0, 16, 0, 0, 0, 3, 161, 0, 0, 8, 8, 0, 0, 5, 28, 0, 0, 0, 0, 7, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 5, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 2, 0, 20, 20, 5, 0, 24, 0, 0, 26, 0, 55, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_141.cpp,46,"[""string"", ""const char *"", ""int""]","[""Curl_add_buffer_init_ret"", ""!"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/http_proxy.cpp,217,"host = aprintf(""Host: %s\r\n"", hostheader);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_143.cpp,"{
          host = aprintf(""Host: %s\r\n"", hostheader);
          if(!host) {
            free(hostheader);
            Curl_add_buffer_free(req_buffer);
            return CURLE_OUT_OF_MEMORY;
          }
        }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_143.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_143.cpp,78,"[""string"", ""aprintf_ret""]","[""Curl_checkProxyheaders_ret"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/openldap.cpp,201,"snprintf(ptr, sizeof(hosturl)-(ptr-hosturl), ""://%s:%d"",
    conn->host.name, conn->remote_port);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_144.cpp,"{
  ldapconninfo *li = conn->proto.generic;
  struct Curl_easy *data = conn->data;
  int rc, proto = LDAP_VERSION3;
  char hosturl[1024];
  char *ptr;

  (void)done;

  strcpy(hosturl, ""ldap"");
  ptr = hosturl+4;
  if(conn->handler->flags & PROTOPT_SSL)
    *ptr++ = 's';
  snprintf(ptr, sizeof(hosturl)-(ptr-hosturl), ""://%s:%d"",
    conn->host.name, conn->remote_port);

  rc = ldap_init_fd(conn->sock[FIRSTSOCKET], li->proto, hosturl, &li->ld);
  if(rc) {
    failf(data, ""LDAP local: Cannot connect to %s, %s"",
          hosturl, ldap_err2string(rc));
    return CURLE_COULDNT_CONNECT;
  }

  ldap_set_option(li->ld, LDAP_OPT_PROTOCOL_VERSION, &proto);

#ifdef USE_SSL
  if(conn->handler->flags & PROTOPT_SSL) {
    CURLcode result;
    result = Curl_ssl_connect_nonblocking(conn, FIRSTSOCKET, &li->ssldone);
    if(result)
      return result;
  }
#endif

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_144.cpp,"[4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 0, 90, 0, 0, 6, 7, 0, 0, 3, 6, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 44, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 2, 0, 4, 4, 0, 0, 8, 0, 0, 9, 0, 23, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_144.cpp,14,"[""char"", ""char"", ""string"", ""member"", ""member""]",[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/vauth.cpp,59,"spn = aprintf(""%s/%s@%s"", service, host, realm);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_145.cpp,"spn = aprintf(""%s/%s@%s"", service, host, realm)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_145.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_145.cpp,7,"[""string"", ""const char *"", ""const char *"", ""const char *""]","[""const char *"", ""const char *"", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/vauth.cpp,61,"spn = aprintf(""%s/%s"", service, host);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_146.cpp,"spn = aprintf(""%s/%s"", service, host)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_146.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_146.cpp,9,"[""string"", ""const char *"", ""const char *""]","[""const char *""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/vauth.cpp,63,"spn = aprintf(""%s@%s"", service, realm);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_147.cpp,"spn = aprintf(""%s@%s"", service, realm)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_147.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_147.cpp,11,"[""string"", ""const char *"", ""const char *""]","[""const char *""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/vauth.cpp,85,"utf8_spn = aprintf(""%s/%s"", service, host);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_148.cpp,"{
  char *utf8_spn = NULL;
  TCHAR *tchar_spn = NULL;

  (void) realm;

  /* Note: We could use DsMakeSPN() or DsClientMakeSpnForTargetServer() rather
     than doing this ourselves but the first is only available in Windows XP
     and Windows Server 2003 and the latter is only available in Windows 2000
     but not Windows95/98/ME or Windows NT4.0 unless the Active Directory
     Client Extensions are installed. As such it is far simpler for us to
     formulate the SPN instead. */

  /* Generate our UTF8 based SPN */
  utf8_spn = aprintf(""%s/%s"", service, host);
  if(!utf8_spn) {
    return NULL;
  }

  /* Allocate our TCHAR based SPN */
  tchar_spn = Curl_convert_UTF8_to_tchar(utf8_spn);
  if(!tchar_spn) {
    free(utf8_spn);

    return NULL;
  }

  /* Release the UTF8 variant when operating with Unicode */
  Curl_unicodefree(utf8_spn);

  /* Return our newly allocated SPN */
  return tchar_spn;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_148.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 24, 0, 0, 2, 2, 0, 0, 2, 1, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 4, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_148.cpp,16,"[""string"", ""const char *"", ""const char *""]",[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/cram.cpp,121,"response = aprintf(
    ""%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"",
    userp, digest[0], digest[1], digest[2], digest[3], digest[4],
    digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
    digest[11], digest[12], digest[13], digest[14], digest[15]);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_149.cpp,"{
  CURLcode result = CURLE_OK;
  size_t chlglen = 0;
  HMAC_context *ctxt;
  unsigned char digest[MD5_DIGEST_LEN];
  char *response;

  if(chlg)
    chlglen = strlen(chlg);

  /* Compute the digest using the password as the key */
  ctxt = Curl_HMAC_init(Curl_HMAC_MD5,
                        (const unsigned char *) passwdp,
                        curlx_uztoui(strlen(passwdp)));
  if(!ctxt)
    return CURLE_OUT_OF_MEMORY;

  /* Update the digest with the given challenge */
  if(chlglen > 0)
    Curl_HMAC_update(ctxt, (const unsigned char *) chlg,
                     curlx_uztoui(chlglen));

  /* Finalise the digest */
  Curl_HMAC_final(ctxt, digest);

  /* Generate the response */
  response = aprintf(
    ""%s %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"",
    userp, digest[0], digest[1], digest[2], digest[3], digest[4],
    digest[5], digest[6], digest[7], digest[8], digest[9], digest[10],
    digest[11], digest[12], digest[13], digest[14], digest[15]);
  if(!response)
    return CURLE_OUT_OF_MEMORY;

  /* Base64 encode the response */
  result = Curl_base64_encode(data, response, 0, outptr, outlen);

  free(response);

  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_149.cpp,"[4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 2, 86, 0, 0, 5, 5, 0, 0, 2, 20, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 17, 0, 4, 4, 0, 0, 10, 0, 0, 7, 0, 36, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_149.cpp,31,"[""string"", ""const char *"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""Curl_HMAC_init_ret"", ""!"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/oauth2.cpp,69,"oauth = aprintf(""user=%s\1auth=Bearer %s\1\1"", user, bearer);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_150.cpp,"oauth = aprintf(""user=%s\1auth=Bearer %s\1\1"", user, bearer)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_150.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_150.cpp,12,"[""string"", ""const char *"", ""const char *""]","[""const char *"", ""null"", ""=="", ""const long"", ""null"", ""=="", ""const long"", ""int"", ""=="", ""||"", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/oauth2.cpp,71,"oauth = aprintf(""user=%s\1host=%s\1auth=Bearer %s\1\1"", user, host,
                    bearer);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_151.cpp,"oauth = aprintf(""user=%s\1host=%s\1auth=Bearer %s\1\1"", user, host,
                    bearer)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_151.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_151.cpp,14,"[""string"", ""const char *"", ""const char *"", ""const char *""]","[""const long"", ""null"", ""=="", ""const long"", ""int"", ""=="", ""||""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vauth/oauth2.cpp,74,"oauth = aprintf(""user=%s\1host=%s\1port=%ld\1auth=Bearer %s\1\1"", user,
                    host, port, bearer);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_152.cpp,"oauth = aprintf(""user=%s\1host=%s\1port=%ld\1auth=Bearer %s\1\1"", user,
                    host, port, bearer)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_152.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_152.cpp,17,"[""string"", ""const char *"", ""const char *"", ""const long"", ""const char *""]","[""const long"", ""null"", ""=="", ""const long"", ""int"", ""=="", ""||"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/schannel.cpp,1565,"size = snprintf(buffer, size, ""WinSSL"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_153.cpp,"{
  size = snprintf(buffer, size, ""WinSSL"");

  return size;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_153.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_153.cpp,2,"[""char *"", ""size_t"", ""string""]",[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/darwinssl.cpp,2652,"snprintf(buffer, size, ""SecureTransport"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_155.cpp,"{
  return snprintf(buffer, size, ""SecureTransport"");
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_155.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_155.cpp,2,"[""char *"", ""size_t"", ""string""]",[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/vtls.cpp,686,"snprintf(output, outlen, ""%s:"", label);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_156.cpp,"{
  struct curl_certinfo *ci = &data->info.certs;
  char *output;
  struct curl_slist *nl;
  CURLcode result = CURLE_OK;
  size_t labellen = strlen(label);
  size_t outlen = labellen + 1 + valuelen + 1; /* label:value\0 */

  output = malloc(outlen);
  if(!output)
    return CURLE_OUT_OF_MEMORY;

  /* sprintf the label and colon */
  snprintf(output, outlen, ""%s:"", label);

  /* memcpy the value (it might not be zero terminated) */
  memcpy(&output[labellen+1], value, valuelen);

  /* zero terminate the output */
  output[labellen + 1 + valuelen] = 0;

  nl = Curl_slist_append_nodup(ci->certinfo[certnum], output);
  if(!nl) {
    free(output);
    curl_slist_free_all(ci->certinfo[certnum]);
    result = CURLE_OUT_OF_MEMORY;
  }

  ci->certinfo[certnum] = nl;
  return result;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_156.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 67, 0, 0, 6, 6, 0, 0, 4, 6, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 2, 2, 0, 0, 7, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_156.cpp,18,"[""malloc_ret"", ""size_t"", ""string"", ""const char *""]","[""malloc_ret"", ""!"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/polarssl.cpp,708,"snprintf(buffer, size, ""%s/%d.%d.%d"",
                  version >= 0x01030A00?""mbedTLS"":""PolarSSL"",
                  version>>24, (version>>16)&0xff, (version>>8)&0xff);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_157.cpp,"{
  unsigned int version = version_get_number();
  return snprintf(buffer, size, ""%s/%d.%d.%d"",
                  version >= 0x01030A00?""mbedTLS"":""PolarSSL"",
                  version>>24, (version>>16)&0xff, (version>>8)&0xff);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_157.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 1, 1, 0, 0, 1, 9, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_157.cpp,3,"[""char *"", ""size_t"", ""string"", ""string"", ""unsigned int"", ""bool"", ""bool""]",[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/nss.cpp,413,"char *slot_name = aprintf(""PEM Token #%d"", slot_id);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_158.cpp,"{
  PK11SlotInfo *slot;
  PK11GenericObject *obj;
  CK_BBOOL cktrue = CK_TRUE;
  CK_BBOOL ckfalse = CK_FALSE;
  CK_ATTRIBUTE attrs[/* max count of attributes */ 4];
  int attr_cnt = 0;
  CURLcode result = (cacert)
    ? CURLE_SSL_CACERT_BADFILE
    : CURLE_SSL_CERTPROBLEM;

  const int slot_id = (cacert) ? 0 : 1;
  char *slot_name = aprintf(""PEM Token #%d"", slot_id);
  if(!slot_name)
    return CURLE_OUT_OF_MEMORY;

  slot = nss_find_slot_by_name(slot_name);
  free(slot_name);
  if(!slot)
    return result;

  PK11_SETATTRS(attrs, attr_cnt, CKA_CLASS, &obj_class, sizeof(obj_class));
  PK11_SETATTRS(attrs, attr_cnt, CKA_TOKEN, &cktrue, sizeof(CK_BBOOL));
  PK11_SETATTRS(attrs, attr_cnt, CKA_LABEL, (unsigned char *)filename,
                (CK_ULONG)strlen(filename) + 1);

  if(CKO_CERTIFICATE == obj_class) {
    CK_BBOOL *pval = (cacert) ? (&cktrue) : (&ckfalse);
    PK11_SETATTRS(attrs, attr_cnt, CKA_TRUST, pval, sizeof(*pval));
  }

  obj = PK11_CreateGenericObject(slot, attrs, attr_cnt, PR_FALSE);
  PK11_FreeSlot(slot);
  if(!obj)
    return result;

  if(insert_wrapped_ptr(&ssl->obj_list, obj) != CURLE_OK) {
    PK11_DestroyGenericObject(obj);
    return CURLE_OUT_OF_MEMORY;
  }

  if(!cacert && CKO_CERTIFICATE == obj_class)
    /* store reference to a client certificate */
    ssl->obj_clicert = obj;

  return CURLE_OK;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_158.cpp,"[6, 0, 0, 0, 0, 0, 5, 0, 0, 0, 7, 0, 0, 0, 1, 98, 0, 0, 10, 10, 0, 0, 7, 6, 0, 0, 0, 0, 4, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 3, 74, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 1, 0, 9, 9, 3, 0, 15, 0, 0, 10, 0, 36, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_158.cpp,15,"[""string"", ""const int""]",[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/nss.cpp,495,"nickname = aprintf(""PEM Token #1:%s"", n);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_159.cpp,"{
    /* we have successfully loaded a client certificate */
    CERTCertificate *cert;
    char *nickname = NULL;
    char *n = strrchr(filename, '/');
    if(n)
      n++;

    /* The following undocumented magic helps to avoid a SIGSEGV on call
     * of PK11_ReadRawAttribute() from SelectClientCert() when using an
     * immature version of libnsspem.so.  For more details, go to
     * <https://bugzilla.redhat.com/733685>. */
    nickname = aprintf(""PEM Token #1:%s"", n);
    if(nickname) {
      cert = PK11_FindCertFromNickname(nickname, NULL);
      if(cert)
        CERT_DestroyCertificate(cert);

      free(nickname);
    }
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_159.cpp,"[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 24, 0, 0, 3, 3, 0, 0, 2, 2, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 3, 0, 0, 5, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_159.cpp,24,"[""string"", ""char *""]","[""nss_create_object_ret"", ""!"", ""PRBool"", ""!"", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/nss.cpp,1218,"config_string = aprintf(""library=%s name=%s"", library, name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_160.cpp,"{
  char *config_string;
  SECMODModule *module = *pmod;
  if(module)
    /* already loaded */
    return CURLE_OK;

  config_string = aprintf(""library=%s name=%s"", library, name);
  if(!config_string)
    return CURLE_OUT_OF_MEMORY;

  module = SECMOD_LoadUserModule(config_string, NULL, PR_FALSE);
  free(config_string);

  if(module && module->loaded) {
    /* loaded successfully */
    *pmod = module;
    return CURLE_OK;
  }

  if(module)
    SECMOD_DestroyModule(module);
  return CURLE_FAILED_INIT;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_160.cpp,"[4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 0, 31, 0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_160.cpp,9,"[""string"", ""const char *"", ""const char *""]","[""SECMODModule *"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/nss.cpp,1264,"char *certpath = aprintf(""sql:%s"", cert_dir);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_161.cpp,"{
    char *certpath = aprintf(""sql:%s"", cert_dir);
    if(!certpath)
      return CURLE_OUT_OF_MEMORY;

    infof(data, ""Initializing NSS with certpath: %s\n"", certpath);
    nss_context = NSS_InitContext(certpath, """", """", """", &initparams,
            NSS_INIT_READONLY | NSS_INIT_PK11RELOAD);
    free(certpath);

    if(nss_context != NULL)
      return CURLE_OK;

    infof(data, ""Unable to initialize NSS database\n"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_161.cpp,"[2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 22, 0, 0, 1, 1, 0, 0, 1, 6, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 0, 5, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_161.cpp,11,"[""string"", ""const char *""]","[""const char *""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/nss.cpp,1587,"char *fullpath = aprintf(""%s/%s"", capath, entry->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_162.cpp,"{
        char *fullpath = aprintf(""%s/%s"", capath, entry->name);
        if(!fullpath) {
          PR_CloseDir(dir);
          return CURLE_OUT_OF_MEMORY;
        }

        if(CURLE_OK != nss_load_cert(&conn->ssl[sockindex], fullpath, PR_TRUE))
          /* This is purposefully tolerant of errors so non-PEM files can
           * be in the same directory */
          infof(data, ""failed to load '%s' from CURLOPT_CAPATH\n"", fullpath);

        free(fullpath);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_162.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 24, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 2, 0, 0, 5, 0, 0, 3, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_162.cpp,57,"[""string"", ""const char *"", ""member""]","[""PR_ReadDir_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/nss.cpp,2242,"snprintf(buffer, size, ""NSS/%s"", NSS_VERSION);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_163.cpp,"{
  return snprintf(buffer, size, ""NSS/%s"", NSS_VERSION);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_163.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_163.cpp,2,"[""char *"", ""size_t"", ""string"", ""macro""]",[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/gtls.cpp,79,"fprintf(stderr, ""|<%d>| %s"", level, str);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_164.cpp,"{
    fprintf(stderr, ""|<%d>| %s"", level, str);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_164.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_164.cpp,2,"[""unkown"", ""string"", ""int"", ""const char *""]",[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/gtls.cpp,225,"snprintf(str,
           sizeof(str),
           ""\t %s: %s, %02d %s %4d %02d:%02d:%02d GMT"",
           text,
           Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
           tm->tm_mday,
           Curl_month[tm->tm_mon],
           tm->tm_year + 1900,
           tm->tm_hour,
           tm->tm_min,
           tm->tm_sec);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_165.cpp,"{
  struct tm buffer;
  const struct tm *tm = &buffer;
  char str[96];
  CURLcode result = Curl_gmtime(stamp, &buffer);
  if(result)
    return;

  snprintf(str,
           sizeof(str),
           ""\t %s: %s, %02d %s %4d %02d:%02d:%02d GMT"",
           text,
           Curl_wkday[tm->tm_wday?tm->tm_wday-1:6],
           tm->tm_mday,
           Curl_month[tm->tm_mon],
           tm->tm_year + 1900,
           tm->tm_hour,
           tm->tm_min,
           tm->tm_sec);
  infof(data, ""%s\n"", str);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_165.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 53, 0, 0, 4, 4, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 1, 28, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 0, 2, 2, 1, 0, 4, 0, 0, 2, 0, 17, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_165.cpp,11,"[""char *"", ""unkown"", ""string"", ""const char *"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member"", ""member""]","[""CURLcode"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/gtls.cpp,1697,"snprintf(buffer, size, ""GnuTLS/%s"", gnutls_check_version(NULL));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_166.cpp,"{
  return snprintf(buffer, size, ""GnuTLS/%s"", gnutls_check_version(NULL));
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_166.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_166.cpp,2,"[""char *"", ""size_t"", ""string"", ""gnutls_check_version_ret""]",[]
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/polarssl_threadlock.cpp,109,"DEBUGF(fprintf(stderr,
                     ""Error: polarsslthreadlock_lock_function failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_167.cpp,"{
      DEBUGF(fprintf(stderr,
                     ""Error: polarsslthreadlock_lock_function failed\n""));
      return 0; /* pthread_mutex_lock failed */
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_167.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_167.cpp,7,"[""fprintf_ret""]","[""pthread_mutex_lock_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmcurl/lib/vtls/polarssl_threadlock.cpp,134,"DEBUGF(fprintf(stderr,
                     ""Error: polarsslthreadlock_unlock_function failed\n""));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_169.cpp,"{
      DEBUGF(fprintf(stderr,
                     ""Error: polarsslthreadlock_unlock_function failed\n""));
      return 0; /* pthread_mutex_unlock failed */
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_169.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_169.cpp,7,"[""fprintf_ret""]","[""pthread_mutex_unlock_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmexpat/lib/xmlparse.cpp,797,"fprintf(stderr, ""Entropy: %s --> 0x%0*lx (%lu bytes)\n"",
        label,
        (int)sizeof(entropy) * 2, entropy,
        (unsigned long)sizeof(entropy));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_171.cpp,"{
    fprintf(stderr, ""Entropy: %s --> 0x%0*lx (%lu bytes)\n"",
        label,
        (int)sizeof(entropy) * 2, entropy,
        (unsigned long)sizeof(entropy));
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_171.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_171.cpp,4,"[""unkown"", ""string"", ""const char *"", ""int"", ""unsigned long"", ""unkown""]","[""macro"", ""strcmp_ret"", ""!"", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,139,"addError(
          ""A valid JSON document must be either an array or an object value."",
          token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_172.cpp,"{
      // Set error location to start of doc, ideally should be first token found
      // in doc
      token.type_ = tokenError;
      token.start_ = beginDoc;
      token.end_ = endDoc;
      addError(
          ""A valid JSON document must be either an array or an object value."",
          token);
      return false;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_172.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_172.cpp,32,"[""string"", ""const char *""]","[""root . isArray_ret"", ""!"", ""root . isObject_ret"", ""!"", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,210,"addError(""Syntax error: value, object or array expected."", token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_173.cpp,"{
  case tokenObjectBegin:
    successful = readObject(token);
    currentValue().setOffsetLimit(current_ - begin_);
    break;
  case tokenArrayBegin:
    successful = readArray(token);
    currentValue().setOffsetLimit(current_ - begin_);
    break;
  case tokenNumber:
    successful = decodeNumber(token);
    break;
  case tokenString:
    successful = decodeString(token);
    break;
  case tokenTrue:
    currentValue() = true;
    currentValue().setOffsetStart(token.start_ - begin_);
    currentValue().setOffsetLimit(token.end_ - begin_);
    break;
  case tokenFalse:
    currentValue() = false;
    currentValue().setOffsetStart(token.start_ - begin_);
    currentValue().setOffsetLimit(token.end_ - begin_);
    break;
  case tokenNull:
    currentValue() = Value();
    currentValue().setOffsetStart(token.start_ - begin_);
    currentValue().setOffsetLimit(token.end_ - begin_);
    break;
  case tokenArraySeparator:
    if (features_.allowDroppedNullPlaceholders_) {
      // ""Un-read"" the current token and mark the current value as a null
      // token.
      current_--;
      currentValue() = Value();
      currentValue().setOffsetStart(current_ - begin_ - 1);
      currentValue().setOffsetLimit(current_ - begin_);
      break;
    }
  // Else, fall through...
  default:
    currentValue().setOffsetStart(token.start_ - begin_);
    currentValue().setOffsetLimit(token.end_ - begin_);
    return addError(""Syntax error: value, object or array expected."", token);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_173.cpp,"[1, 0, 0, 0, 8, 0, 1, 0, 8, 1, 2, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 35, 0, 0, 21, 0, 18, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_173.cpp,62,"[""string"", ""Token""]","[""member"", ""member"", ""!"", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,234,"addError(message, token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_174.cpp,"return addError(message, token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_174.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_174.cpp,3,"[""const char *"", ""Token &""]","[""member"", ""TokenType"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,431,"addErrorAndRecover(
          ""Missing ':' after object member name"", colon, tokenObjectEnd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_175.cpp,"{
      return addErrorAndRecover(
          ""Missing ':' after object member name"", colon, tokenObjectEnd);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_175.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_175.cpp,28,"[""string"", ""Token"", ""unkown""]","[""readToken_ret"", ""!"", ""member"", ""unkown"", ""!="", ""||""]"
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,445,"addErrorAndRecover(
          ""Missing ',' or '}' in object declaration"", comma, tokenObjectEnd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_176.cpp,"{
      return addErrorAndRecover(
          ""Missing ',' or '}' in object declaration"", comma, tokenObjectEnd);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_176.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_176.cpp,42,"[""string"", ""Token"", ""unkown""]","[""readToken_ret"", ""!"", ""member"", ""unkown"", ""!="", ""member"", ""unkown"", ""!="", ""member"", ""unkown"", ""!="", ""&&"", ""&&"", ""||""]"
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,454,"addErrorAndRecover(
      ""Missing '}' or object member name"", tokenName, tokenObjectEnd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_177.cpp,"{
  Token tokenName;
  std::string name;
  currentValue() = Value(objectValue);
  currentValue().setOffsetStart(tokenStart.start_ - begin_);
  while (readToken(tokenName)) {
    bool initialTokenOk = true;
    while (tokenName.type_ == tokenComment && initialTokenOk)
      initialTokenOk = readToken(tokenName);
    if (!initialTokenOk)
      break;
    if (tokenName.type_ == tokenObjectEnd && name.empty()) // empty object
      return true;
    name = """";
    if (tokenName.type_ == tokenString) {
      if (!decodeString(tokenName, name))
        return recoverFromError(tokenObjectEnd);
    } else if (tokenName.type_ == tokenNumber && features_.allowNumericKeys_) {
      Value numberName;
      if (!decodeNumber(tokenName, numberName))
        return recoverFromError(tokenObjectEnd);
      name = numberName.asString();
    } else {
      break;
    }

    Token colon;
    if (!readToken(colon) || colon.type_ != tokenMemberSeparator) {
      return addErrorAndRecover(
          ""Missing ':' after object member name"", colon, tokenObjectEnd);
    }
    Value& value = currentValue()[name];
    nodes_.push(&value);
    bool ok = readValue();
    nodes_.pop();
    if (!ok) // error already set
      return recoverFromError(tokenObjectEnd);

    Token comma;
    if (!readToken(comma) ||
        (comma.type_ != tokenObjectEnd && comma.type_ != tokenArraySeparator &&
         comma.type_ != tokenComment)) {
      return addErrorAndRecover(
          ""Missing ',' or '}' in object declaration"", comma, tokenObjectEnd);
    }
    bool finalizeTokenOk = true;
    while (comma.type_ == tokenComment && finalizeTokenOk)
      finalizeTokenOk = readToken(comma);
    if (comma.type_ == tokenObjectEnd)
      return true;
  }
  return addErrorAndRecover(
      ""Missing '}' or object member name"", tokenName, tokenObjectEnd);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_177.cpp,"[10, 3, 0, 0, 2, 0, 8, 0, 0, 0, 15, 0, 0, 0, 0, 127, 0, 0, 9, 9, 0, 0, 4, 8, 0, 0, 0, 0, 1, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 1, 0, 13, 10, 1, 0, 23, 0, 0, 8, 1, 24, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_177.cpp,51,"[""string"", ""Token"", ""unkown""]","[""readToken_ret"", ""!"", ""member"", ""unkown"", ""=="", ""member"", ""&&"", ""!"", ""readToken_ret"", ""!"", ""&&"", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,486,"addErrorAndRecover(
          ""Missing ',' or ']' in array declaration"", token, tokenArrayEnd);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_178.cpp,"{
      return addErrorAndRecover(
          ""Missing ',' or ']' in array declaration"", token, tokenArrayEnd);
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_178.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_178.cpp,28,"[""string"", ""Token"", ""unkown""]","[""readToken_ret"", ""!"", ""bool"", ""||""]"
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,528,"addError(""'"" + std::string(token.start_, token.end_) +
                          ""' is not a number."",
                      token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_179.cpp,"return addError(""'"" + std::string(token.start_, token.end_) +
                          ""' is not a number."",
                      token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_179.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_179.cpp,23,"[""string"", ""Token &""]","[""Char"", ""char"", ""<"", ""Char"", ""char"", "">"", ""||""]"
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,571,"addError(""Unable to parse token length"", token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_180.cpp,"{
    return addError(""Unable to parse token length"", token);
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_180.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_180.cpp,8,"[""string"", ""Token &""]","[""int"", ""null"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,592,"addError(""'"" + std::string(token.start_, token.end_) +
                        ""' is not a number."",
                    token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_181.cpp,"return addError(""'"" + std::string(token.start_, token.end_) +
                        ""' is not a number."",
                    token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_181.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_181.cpp,29,"[""string"", ""Token &""]","[""sscanf_ret"", ""int"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,619,"addError(""Empty escape sequence in string"", token, current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_182.cpp,"return addError(""Empty escape sequence in string"", token, current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_182.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_182.cpp,10,"[""string"", ""Token &"", ""Char""]","[""Char"", ""Location"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,653,"addError(""Bad escape sequence in string"", token, current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_183.cpp,"{
      case '""':
        decoded += '""';
        break;
      case '/':
        decoded += '/';
        break;
      case '\\':
        decoded += '\\';
        break;
      case 'b':
        decoded += '\b';
        break;
      case 'f':
        decoded += '\f';
        break;
      case 'n':
        decoded += '\n';
        break;
      case 'r':
        decoded += '\r';
        break;
      case 't':
        decoded += '\t';
        break;
      case 'u': {
        unsigned int unicode;
        if (!decodeUnicodeCodePoint(token, current, end, unicode))
          return false;
        decoded += codePointToUTF8(unicode);
      } break;
      default:
        return addError(""Bad escape sequence in string"", token, current);
      }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_183.cpp,"[1, 0, 0, 0, 9, 0, 2, 0, 9, 1, 3, 0, 0, 0, 0, 22, 0, 0, 1, 1, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 9, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_183.cpp,44,"[""string"", ""Token &"", ""Char""]","[""Char""]"
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,672,"addError(
          ""additional six characters expected to parse unicode surrogate pair."",
          token,
          current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_184.cpp,"return addError(
          ""additional six characters expected to parse unicode surrogate pair."",
          token,
          current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_184.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_184.cpp,10,"[""string"", ""Token &"", ""Location &""]","[""Location"", ""int"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,683,"addError(""expecting another \\u token to begin the second half of ""
                      ""a unicode surrogate pair"",
                      token,
                      current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_185.cpp,"return addError(""expecting another \\u token to begin the second half of ""
                      ""a unicode surrogate pair"",
                      token,
                      current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_185.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_185.cpp,21,[],"[""decodeUnicodeEscapeSequence_ret"", ""Location &"", ""unkown"", ""char"", ""=="", ""Location &"", ""unkown"", ""char"", ""=="", ""&&"", ""!"", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,696,"addError(
        ""Bad unicode escape sequence in string: four digits expected."",
        token,
        current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_186.cpp,"return addError(
        ""Bad unicode escape sequence in string: four digits expected."",
        token,
        current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_186.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_186.cpp,5,"[""string"", ""Token &"", ""Location &""]","[""Location"", ""int"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,711,"addError(
          ""Bad unicode escape sequence in string: hexadecimal digit expected."",
          token,
          current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_187.cpp,"return addError(
          ""Bad unicode escape sequence in string: hexadecimal digit expected."",
          token,
          current);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_187.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_187.cpp,20,"[""string"", ""Token &"", ""Char""]","[""Char"", ""char"", "">="", ""Char"", ""char"", ""<="", ""&&"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,745,"addError(message, token);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_188.cpp,"{
  addError(message, token);
  return recoverFromError(skipUntilToken);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_188.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_188.cpp,3,"[""const std :: string &"", ""Token &""]",[]
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,786,"_snprintf(buffer, sizeof(buffer), ""Line %d, Column %d"", line, column);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_189.cpp,"{
  int line, column;
  getLocationLineAndColumn(location, line, column);
  char buffer[18 + 16 + 16 + 1];
#if defined(_MSC_VER) && defined(__STDC_SECURE_LIB__)
#if defined(WINCE)
  _snprintf(buffer, sizeof(buffer), ""Line %d, Column %d"", line, column);
#else
  sprintf_s(buffer, sizeof(buffer), ""Line %d, Column %d"", line, column);
#endif
#else
  snprintf(buffer, sizeof(buffer), ""Line %d, Column %d"", line, column);
#endif
  return buffer;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_189.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 32, 0, 0, 2, 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 32, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 2, 0, 10, 0, 0, 4, 0, 24, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_189.cpp,6,"[""char *"", ""unkown"", ""string"", ""int"", ""int""]",[]
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp,875,"fprintf(stderr,
            ""Error from reader: %s"",
            reader.getFormattedErrorMessages().c_str());",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_191.cpp,"{
    fprintf(stderr,
            ""Error from reader: %s"",
            reader.getFormattedErrorMessages().c_str());

    JSON_FAIL_MESSAGE(""reader error"");
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_191.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_191.cpp,4,"[""unkown"", ""string"", ""reader . getFormattedErrorMessages ( ) . c_str_ret""]","[""bool"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp,118,"len = _snprintf(buffer, sizeof(buffer), ""%.16g"", value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_192.cpp,"{
  // Allocate a buffer that is more than large enough to store the 16 digits of
  // precision requested below.
  char buffer[32];
  int len = -1;

// Print into the buffer. We need not request the alternative representation
// that always has a decimal point because JSON doesn't distingish the
// concepts of reals and integers.
#if defined(_MSC_VER) && defined(__STDC_SECURE_LIB__) // Use secure version with
                                                      // visual studio 2005 to
                                                      // avoid warning.
#if defined(WINCE)
  len = _snprintf(buffer, sizeof(buffer), ""%.16g"", value);
#else
  len = sprintf_s(buffer, sizeof(buffer), ""%.16g"", value);
#endif
#else
  if (isfinite(value)) {
    len = snprintf(buffer, sizeof(buffer), ""%.16g"", value);
  } else {
    // IEEE standard states that NaN values will not compare to themselves
    if (value != value) {
      len = snprintf(buffer, sizeof(buffer), ""null"");
    } else if (value < 0) {
      len = snprintf(buffer, sizeof(buffer), ""-1e+9999"");
    } else {
      len = snprintf(buffer, sizeof(buffer), ""1e+9999"");
    }
    // For those, we do not need to call fixNumLoc, but it is fast.
  }
#endif
  assert(len >= 0);
  fixNumericLocale(buffer, buffer + len);
  return buffer;
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_192.cpp,"[5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 50, 0, 0, 2, 2, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 50, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 3, 3, 4, 0, 18, 0, 0, 8, 1, 34, 6, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_192.cpp,13,"[""char *"", ""unkown"", ""string"", ""double""]",[]
second/download/CMake/CMake/CMake/Utilities/KWIML/test/test_abi_endian.cpp,23,"printf(LANG ""KWIML_ABI_ENDIAN_ID: expected [%d], got [%d]"",
         expect, KWIML_ABI_ENDIAN_ID);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_198.cpp,"{
#if defined(KWIML_ABI_ENDIAN_ID)
  int expect;
  union { short s; unsigned char c[sizeof(short)]; } x;
  x.s = 1;
  expect = (x.c[0] == 1 ?
            KWIML_ABI_ENDIAN_ID_LITTLE : KWIML_ABI_ENDIAN_ID_BIG);
  printf(LANG ""KWIML_ABI_ENDIAN_ID: expected [%d], got [%d]"",
         expect, KWIML_ABI_ENDIAN_ID);
  if(KWIML_ABI_ENDIAN_ID == expect)
    {
    printf("", PASSED\n"");
    }
  else
    {
    printf("", FAILED\n"");
    result = 0;
    }
#else
  printf(LANG ""KWIML_ABI_ENDIAN_ID: unknown, FAILED\n"");
  result = 0;
#endif
  }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_198.cpp,"[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 33, 0, 0, 3, 4, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 1, 23, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 2, 2, 3, 0, 6, 0, 0, 8, 0, 8, 3, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_198.cpp,10,[],[]
second/download/CMake/CMake/CMake/Utilities/KWIML/test/test_abi_endian.cpp,27,"printf("", PASSED\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_199.cpp,"{
    printf("", PASSED\n"");
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_199.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_199.cpp,14,"[""string""]","[""macro"", ""macro"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/KWIML/test/test_abi_endian.cpp,31,"printf("", FAILED\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_200.cpp,"{
    printf("", FAILED\n"");
    result = 0;
    }",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_200.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_200.cpp,18,"[""string""]","[""macro"", ""macro"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,532,"archive_string_sprintf(&setstr, "" uid=%jd"",
		    (intmax_t)mtree->set.uid);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_202.cpp,"{
		mtree->set.uid = acs->uid_list->m_entry->uid;
		archive_string_sprintf(&setstr, "" uid=%jd"",
		    (intmax_t)mtree->set.uid);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_202.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_202.cpp,81,"[""unkown"", ""string"", ""member""]","[""bool"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,547,"archive_string_sprintf(&setstr, "" gid=%jd"",
		    (intmax_t)mtree->set.gid);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_203.cpp,"{
		mtree->set.gid = acs->gid_list->m_entry->gid;
		archive_string_sprintf(&setstr, "" gid=%jd"",
		    (intmax_t)mtree->set.gid);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_203.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_203.cpp,96,"[""unkown"", ""string"", ""member""]","[""bool"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,552,"archive_string_sprintf(&setstr, "" mode=%o"",
		    (unsigned int)mtree->set.mode);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_204.cpp,"{
		mtree->set.mode = acs->mode_list->m_entry->mode;
		archive_string_sprintf(&setstr, "" mode=%o"",
		    (unsigned int)mtree->set.mode);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_204.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_204.cpp,101,"[""unkown"", ""string"", ""member""]","[""bool"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,572,"archive_string_sprintf(&mtree->buf, ""/unset%s\n"", unsetstr.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_205.cpp,"archive_string_sprintf(&mtree->buf, ""/unset%s\n"", unsetstr.s)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_205.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_205.cpp,121,"[""member"", ""string"", ""member""]","[""member"", ""null"", "">""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,575,"archive_string_sprintf(&mtree->buf, ""/set%s\n"", setstr.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_206.cpp,"archive_string_sprintf(&mtree->buf, ""/set%s\n"", setstr.s)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_206.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_206.cpp,124,"[""member"", ""string"", ""member""]","[""member"", ""null"", "">""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,802,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for a mtree entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_207.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for a mtree entry"");
		*m_entry = NULL;
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_207.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_207.cpp,13,"[""member"", ""macro"", ""string""]","[""calloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,841,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for a mtree entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_208.cpp,"{
			mtree_entry_free(me);
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for a mtree entry"");
			*m_entry = NULL;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_208.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_208.cpp,52,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,854,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for a mtree entry"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_209.cpp,"{
			mtree_entry_free(me);
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for a mtree entry"");
			*m_entry = NULL;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_209.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_209.cpp,65,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,938,"archive_string_sprintf(&mtree->buf,
				    ""# %s/%s\n"",
				    me->parentdir.s, me->basename.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_210.cpp,"archive_string_sprintf(&mtree->buf,
				    ""# %s/%s\n"",
				    me->parentdir.s, me->basename.s)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_210.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_210.cpp,17,"[""member"", ""string"", ""member"", ""member""]","[""member""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,942,"archive_string_sprintf(&mtree->buf,
				    ""# %s\n"",
				    me->basename.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_211.cpp,"archive_string_sprintf(&mtree->buf,
				    ""# %s\n"",
				    me->basename.s)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_211.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_211.cpp,21,"[""member"", ""string"", ""member""]","[""member"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,965,"archive_string_sprintf(str, "" nlink=%u"", me->nlink);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_212.cpp,"archive_string_sprintf(str, "" nlink=%u"", me->nlink)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_212.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_212.cpp,44,"[""struct mtree_writer *"", ""string"", ""member""]","[""bool"", ""null"", ""!="", ""member"", ""int"", ""!="", ""member"", ""macro"", ""!="", ""&&"", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,985,"archive_string_sprintf(str, "" time=%jd.%jd"",
		    (intmax_t)me->mtime, (intmax_t)me->mtime_nsec);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_213.cpp,"archive_string_sprintf(str, "" time=%jd.%jd"",
		    (intmax_t)me->mtime, (intmax_t)me->mtime_nsec)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_213.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_213.cpp,64,"[""struct mtree_writer *"", ""string"", ""member"", ""member""]","[""bool"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,988,"archive_string_sprintf(str, "" mode=%o"", (unsigned int)me->mode);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_214.cpp,"archive_string_sprintf(str, "" mode=%o"", (unsigned int)me->mode)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_214.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_214.cpp,67,"[""struct mtree_writer *"", ""string"", ""member""]","[""bool"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,990,"archive_string_sprintf(str, "" gid=%jd"", (intmax_t)me->gid);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_215.cpp,"archive_string_sprintf(str, "" gid=%jd"", (intmax_t)me->gid)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_215.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_215.cpp,69,"[""struct mtree_writer *"", ""string"", ""member""]","[""bool"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,992,"archive_string_sprintf(str, "" uid=%jd"", (intmax_t)me->uid);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_216.cpp,"archive_string_sprintf(str, "" uid=%jd"", (intmax_t)me->uid)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_216.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_216.cpp,71,"[""struct mtree_writer *"", ""string"", ""member""]","[""bool"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,995,"archive_string_sprintf(str, "" inode=%jd"", (intmax_t)me->ino);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_217.cpp,"archive_string_sprintf(str, "" inode=%jd"", (intmax_t)me->ino)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_217.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_217.cpp,74,"[""struct mtree_writer *"", ""string"", ""member""]","[""bool"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,997,"archive_string_sprintf(str,
		    "" resdevice=native,%ju,%ju"",
		    (uintmax_t)me->devmajor,
		    (uintmax_t)me->devminor);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_218.cpp,"{
		archive_string_sprintf(str,
		    "" resdevice=native,%ju,%ju"",
		    (uintmax_t)me->devmajor,
		    (uintmax_t)me->devminor);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_218.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_218.cpp,76,"[""struct mtree_writer *"", ""string"", ""member"", ""member""]","[""bool"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1020,"archive_string_sprintf(str,
			    "" device=native,%ju,%ju"",
			    (uintmax_t)me->rdevmajor,
			    (uintmax_t)me->rdevminor);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_219.cpp,"{
			archive_string_sprintf(str,
			    "" device=native,%ju,%ju"",
			    (uintmax_t)me->rdevmajor,
			    (uintmax_t)me->rdevminor);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_219.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_219.cpp,99,"[""struct mtree_writer *"", ""string"", ""member"", ""member""]","[""bool"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1030,"archive_string_sprintf(str,
			    "" device=native,%ju,%ju"",
			    (uintmax_t)me->rdevmajor,
			    (uintmax_t)me->rdevminor);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_220.cpp,"{
			archive_string_sprintf(str,
			    "" device=native,%ju,%ju"",
			    (uintmax_t)me->rdevmajor,
			    (uintmax_t)me->rdevminor);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_220.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_220.cpp,109,"[""struct mtree_writer *"", ""string"", ""member"", ""member""]","[""bool"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1049,"archive_string_sprintf(str, "" size=%jd"",
			    (intmax_t)me->size);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_221.cpp,"archive_string_sprintf(str, "" size=%jd"",
			    (intmax_t)me->size)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_221.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_221.cpp,128,"[""struct mtree_writer *"", ""string"", ""member""]","[""bool"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1083,"archive_string_sprintf(&mtree->buf, ""# %s/%s\n"",
			n->parentdir.s, n->basename.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_222.cpp,"{
		if (mtree->indent) {
			int i, pd = mtree->depth * 4;
			for (i = 0; i < pd; i++)
				archive_strappend_char(&mtree->buf, ' ');
		}
		archive_string_sprintf(&mtree->buf, ""# %s/%s\n"",
			n->parentdir.s, n->basename.s);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_222.cpp,"[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 29, 0, 0, 1, 2, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 0, 0, 2, 0, 6, 0, 1, 0, 0, 1, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_222.cpp,12,"[""member"", ""string"", ""member"", ""member""]","[""member""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1124,"archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_223.cpp,"{
					archive_set_error(&a->archive, ENOMEM,
					    ""Can't allocate memory"");
					return (ARCHIVE_FATAL);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_223.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_223.cpp,18,"[""member"", ""macro"", ""string""]","[""attr_counter_set_collect_ret"", ""null"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1402,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate mtree data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_224.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate mtree data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_224.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_224.cpp,12,"[""member"", ""macro"", ""string""]","[""calloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1620,"archive_string_sprintf(str, "" cksum=%ju"",
		    (uintmax_t)reg->crc);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_225.cpp,"{
		archive_string_sprintf(str, "" cksum=%ju"",
		    (uintmax_t)reg->crc);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_225.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_225.cpp,5,"[""struct archive_string *"", ""string"", ""member""]","[""bool""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1747,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_226.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_226.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_226.cpp,28,"[""member"", ""macro"", ""string""]","[""archive_string_append_from_wcs_ret"", ""null"", ""<"", ""unkown"", ""macro"", ""=="", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1897,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_227.cpp,"{
		*m_entry = NULL;
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_227.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_227.cpp,11,"[""member"", ""macro"", ""string""]","[""archive_entry_new_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,1909,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_228.cpp,"{
		*m_entry = NULL;
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_228.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_228.cpp,23,"[""member"", ""macro"", ""string""]","[""mtree_entry_new_ret"", ""macro"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,2025,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal programing error ""
		    ""in generating canonical name for %s"",
		    file->pathname.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_229.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Internal programing error ""
		    ""in generating canonical name for %s"",
		    file->pathname.s);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_229.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_229.cpp,29,[],"[""member"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,2064,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""A name buffer is too small"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_230.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""A name buffer is too small"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_230.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_230.cpp,68,"[""member"", ""macro"", ""string""]","[""get_path_component_ret"", ""null"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,2084,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""`%s' is not directory, we cannot insert `%s' "",
			    np->pathname.s, file->pathname.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_231.cpp,"{
			/* NOT Directory! */
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""`%s' is not directory, we cannot insert `%s' "",
			    np->pathname.s, file->pathname.s);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_231.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_231.cpp,88,"[""member"", ""macro"", ""string"", ""member"", ""member""]","[""member"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,2132,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""A name buffer is too small"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_232.cpp,"{
				archive_string_free(&as);
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""A name buffer is too small"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_232.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_232.cpp,136,"[""member"", ""macro"", ""string""]","[""get_path_component_ret"", ""null"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.cpp,2194,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Found duplicate entries `%s' and its file type is ""
		    ""different"",
		    np->pathname.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_233.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Found duplicate entries `%s' and its file type is ""
		    ""different"",
		    np->pathname.s);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_233.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_233.cpp,6,[],"[""bool"", ""bool"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,77,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Xar not supported on this platform"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_234.cpp,"{
	struct archive_read *a = (struct archive_read *)_a;
	archive_check_magic(_a, ARCHIVE_READ_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_read_support_format_xar"");

	archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
	    ""Xar not supported on this platform"");
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_234.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_234.cpp,7,"[""member"", ""macro"", ""string""]",[]
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,452,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate xar data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_235.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate xar data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_235.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_235.cpp,12,"[""member"", ""macro"", ""string""]","[""calloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,542,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated archive header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_236.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Truncated archive header"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_236.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_236.cpp,21,"[""member"", ""macro"", ""string""]","[""ssize_t"", ""macro"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,549,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Invalid header magic"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_237.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Invalid header magic"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_237.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_237.cpp,28,"[""member"", ""macro"", ""string""]","[""archive_be32dec_ret"", ""macro"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,555,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported header version(%d)"",
		    archive_be16dec(b+6));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_238.cpp,"{
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Unsupported header version(%d)"",
		    archive_be16dec(b+6));
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_238.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_238.cpp,34,"[""member"", ""macro"", ""string"", ""archive_be16dec_ret""]","[""archive_be16dec_ret"", ""macro"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,591,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""TOC uncompressed size error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_239.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""TOC uncompressed size error"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_239.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_239.cpp,70,"[""member"", ""macro"", ""string""]","[""member"", ""archive_be64dec_ret"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,608,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated archive file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_240.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Truncated archive file"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_240.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_240.cpp,87,"[""member"", ""macro"", ""string""]","[""ssize_t"", ""member"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,705,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Gname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_241.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Gname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_241.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_241.cpp,50,"[""member"", ""macro"", ""string""]","[""unkown"", ""macro"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,709,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Gname cannot be converted from %s to current locale."",
		    archive_string_conversion_charset_name(xar->sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_242.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Gname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Gname cannot be converted from %s to current locale."",
		    archive_string_conversion_charset_name(xar->sconv));
		r = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_242.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_242.cpp,54,"[""member"", ""macro"", ""string"", ""archive_string_conversion_charset_name_ret""]","[""unkown"", ""macro"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,720,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Uname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_243.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Uname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_243.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_243.cpp,65,"[""member"", ""macro"", ""string""]","[""unkown"", ""macro"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,724,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Uname cannot be converted from %s to current locale."",
		    archive_string_conversion_charset_name(xar->sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_244.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Uname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Uname cannot be converted from %s to current locale."",
		    archive_string_conversion_charset_name(xar->sconv));
		r = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_244.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_244.cpp,69,"[""member"", ""macro"", ""string"", ""archive_string_conversion_charset_name_ret""]","[""unkown"", ""macro"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,734,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_245.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_245.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_245.cpp,79,"[""member"", ""macro"", ""string""]","[""unkown"", ""macro"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,738,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted from %s to current locale."",
		    archive_string_conversion_charset_name(xar->sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_246.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname cannot be converted from %s to current locale."",
		    archive_string_conversion_charset_name(xar->sconv));
		r = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_246.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_246.cpp,83,"[""member"", ""macro"", ""string"", ""archive_string_conversion_charset_name_ret""]","[""unkown"", ""macro"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,750,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_247.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_247.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_247.cpp,95,"[""member"", ""macro"", ""string""]","[""unkown"", ""macro"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,754,"archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Linkname cannot be converted from %s to current locale."",
		    archive_string_conversion_charset_name(xar->sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_248.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Linkname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive,
		    ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Linkname cannot be converted from %s to current locale."",
		    archive_string_conversion_charset_name(xar->sconv));
		r = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_248.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_248.cpp,99,"[""member"", ""macro"", ""string"", ""archive_string_conversion_charset_name_ret""]","[""unkown"", ""macro"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,805,"archive_set_error(&(a->archive), ARCHIVE_ERRNO_MISC,
			    ""Decompressed size error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_249.cpp,"{
			archive_set_error(&(a->archive), ARCHIVE_ERRNO_MISC,
			    ""Decompressed size error"");
			r = ARCHIVE_FATAL;
			break;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_249.cpp,"[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_249.cpp,150,"[""member"", ""macro"", ""string""]","[""size_t"", ""member"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,879,"archive_set_error(&(a->archive), ARCHIVE_ERRNO_MISC,
			    ""Decompressed size error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_250.cpp,"{
			archive_set_error(&(a->archive), ARCHIVE_ERRNO_MISC,
			    ""Decompressed size error"");
			r = ARCHIVE_FATAL;
			goto abort_read_data;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_250.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_250.cpp,44,"[""member"", ""macro"", ""string""]","[""member"", ""member"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,971,"archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Cannot seek."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_251.cpp,"{
				archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Cannot seek."");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_251.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_251.cpp,19,"[""member"", ""macro"", ""string""]","[""int64_t"", ""macro"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1008,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Truncated archive file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_252.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Truncated archive file"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_252.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_252.cpp,12,"[""member"", ""macro"", ""string""]","[""ssize_t"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1203,"archive_set_error(&a->archive,
			    ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_253.cpp,"{
			archive_set_error(&a->archive,
			    ENOMEM, ""Out of memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_253.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_253.cpp,16,"[""member"", ""macro"", ""string""]","[""int"", ""member"", ""<=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1210,"archive_set_error(&a->archive,
			    ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_254.cpp,"{
			archive_set_error(&a->archive,
			    ENOMEM, ""Out of memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_254.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_254.cpp,23,"[""member"", ""macro"", ""string""]","[""malloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1306,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_255.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_255.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_255.cpp,15,"[""member"", ""macro"", ""string""]","[""malloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1408,"archive_set_error(&(a->archive), ARCHIVE_ERRNO_MISC,
		    ""Sumcheck error"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_256.cpp,"archive_set_error(&(a->archive), ARCHIVE_ERRNO_MISC,
		    ""Sumcheck error"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_256.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_256.cpp,12,"[""member"", ""macro"", ""string""]","[""_checksum_final_ret"", ""macro"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1431,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_257.cpp,"{
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_257.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_257.cpp,18,"[""member"", ""macro"", ""string""]","[""inflateReset_ret"", ""macro"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1463,"archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail == NULL ? ""??"" : detail);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_258.cpp,"{
			int err = ARCHIVE_ERRNO_MISC;
			detail = NULL;
			switch (r) {
			case BZ_PARAM_ERROR:
				detail = ""invalid setup parameter"";
				break;
			case BZ_MEM_ERROR:
				err = ENOMEM;
				detail = ""out of memory"";
				break;
			case BZ_CONFIG_ERROR:
				detail = ""mis-compiled library"";
				break;
			}
			archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail == NULL ? ""??"" : detail);
			xar->bzstream_valid = 0;
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_258.cpp,"[0, 0, 0, 0, 3, 0, 1, 1, 3, 0, 2, 0, 0, 0, 0, 26, 0, 0, 1, 1, 0, 0, 1, 6, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0, 1, 0, 0, 7, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_258.cpp,50,"[""member"", ""int"", ""string"", ""string""]","[""enum enctype"", ""BZ2_bzDecompressInit_ret"", ""macro"", ""!="", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1500,"archive_set_error(&a->archive,
				    ENOMEM,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Cannot allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_259.cpp,"{
			case LZMA_MEM_ERROR:
				archive_set_error(&a->archive,
				    ENOMEM,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Cannot allocate memory"");
				break;
			case LZMA_OPTIONS_ERROR:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Invalid or unsupported options"");
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""lzma library"");
				break;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_259.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_259.cpp,87,[],"[""lzma_stream_decoder_ret"", ""enum enctype"", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1507,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Invalid or unsupported options"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_260.cpp,"{
			case LZMA_MEM_ERROR:
				archive_set_error(&a->archive,
				    ENOMEM,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Cannot allocate memory"");
				break;
			case LZMA_OPTIONS_ERROR:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Invalid or unsupported options"");
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""lzma library"");
				break;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_260.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_260.cpp,94,[],"[""enum enctype"", ""lzma_stream_decoder_ret"", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1514,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""lzma library"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_261.cpp,"{
			case LZMA_MEM_ERROR:
				archive_set_error(&a->archive,
				    ENOMEM,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Cannot allocate memory"");
				break;
			case LZMA_OPTIONS_ERROR:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Invalid or unsupported options"");
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""lzma library"");
				break;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_261.cpp,"[0, 0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_261.cpp,101,[],"[""lzma_alone_decoder_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1544,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""%s compression not supported on this platform"",
		    detail);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_262.cpp,"{
	case NONE:
		break;
	case GZIP:
		if (xar->stream_valid)
			r = inflateReset(&(xar->stream));
		else
			r = inflateInit(&(xar->stream));
		if (r != Z_OK) {
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Couldn't initialize zlib stream."");
			return (ARCHIVE_FATAL);
		}
		xar->stream_valid = 1;
		xar->stream.total_in = 0;
		xar->stream.total_out = 0;
		break;
#if defined(HAVE_BZLIB_H) && defined(BZ_CONFIG_ERROR)
	case BZIP2:
		if (xar->bzstream_valid) {
			BZ2_bzDecompressEnd(&(xar->bzstream));
			xar->bzstream_valid = 0;
		}
		r = BZ2_bzDecompressInit(&(xar->bzstream), 0, 0);
		if (r == BZ_MEM_ERROR)
			r = BZ2_bzDecompressInit(&(xar->bzstream), 0, 1);
		if (r != BZ_OK) {
			int err = ARCHIVE_ERRNO_MISC;
			detail = NULL;
			switch (r) {
			case BZ_PARAM_ERROR:
				detail = ""invalid setup parameter"";
				break;
			case BZ_MEM_ERROR:
				err = ENOMEM;
				detail = ""out of memory"";
				break;
			case BZ_CONFIG_ERROR:
				detail = ""mis-compiled library"";
				break;
			}
			archive_set_error(&a->archive, err,
			    ""Internal error initializing decompressor: %s"",
			    detail == NULL ? ""??"" : detail);
			xar->bzstream_valid = 0;
			return (ARCHIVE_FATAL);
		}
		xar->bzstream_valid = 1;
		xar->bzstream.total_in_lo32 = 0;
		xar->bzstream.total_in_hi32 = 0;
		xar->bzstream.total_out_lo32 = 0;
		xar->bzstream.total_out_hi32 = 0;
		break;
#endif
#if defined(HAVE_LZMA_H) && defined(HAVE_LIBLZMA)
#if LZMA_VERSION_MAJOR >= 5
/* Effectively disable the limiter. */
#define LZMA_MEMLIMIT   UINT64_MAX
#else
/* NOTE: This needs to check memory size which running system has. */
#define LZMA_MEMLIMIT   (1U << 30)
#endif
	case XZ:
	case LZMA:
		if (xar->lzstream_valid) {
			lzma_end(&(xar->lzstream));
			xar->lzstream_valid = 0;
		}
		if (xar->entry_encoding == XZ)
			r = lzma_stream_decoder(&(xar->lzstream),
			    LZMA_MEMLIMIT,/* memlimit */
			    LZMA_CONCATENATED);
		else
			r = lzma_alone_decoder(&(xar->lzstream),
			    LZMA_MEMLIMIT);/* memlimit */
		if (r != LZMA_OK) {
			switch (r) {
			case LZMA_MEM_ERROR:
				archive_set_error(&a->archive,
				    ENOMEM,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Cannot allocate memory"");
				break;
			case LZMA_OPTIONS_ERROR:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""compression library: ""
				    ""Invalid or unsupported options"");
				break;
			default:
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Internal error initializing ""
				    ""lzma library"");
				break;
			}
			return (ARCHIVE_FATAL);
		}
		xar->lzstream_valid = 1;
		xar->lzstream.total_in = 0;
		xar->lzstream.total_out = 0;
		break;
#endif
	/*
	 * Unsupported compression.
	 */
	default:
#if !defined(HAVE_BZLIB_H) || !defined(BZ_CONFIG_ERROR)
	case BZIP2:
#endif
#if !defined(HAVE_LZMA_H) || !defined(HAVE_LIBLZMA)
	case LZMA:
	case XZ:
#endif
		switch (xar->entry_encoding) {
		case BZIP2: detail = ""bzip2""; break;
		case LZMA: detail = ""lzma""; break;
		case XZ: detail = ""xz""; break;
		default: detail = ""??""; break;
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""%s compression not supported on this platform"",
		    detail);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_262.cpp,"[13, 0, 0, 0, 14, 0, 4, 3, 16, 3, 14, 0, 0, 0, 0, 204, 0, 0, 1, 1, 0, 0, 1, 38, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 1, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 9, 4, 0, 22, 0, 0, 37, 0, 43, 13, 0, 2, 2, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_262.cpp,131,"[""member"", ""macro"", ""string"", ""string""]","[""enum enctype""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1568,"archive_set_error(&a->archive, ENOMEM,
				    ""Couldn't allocate memory for out buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_263.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Couldn't allocate memory for out buffer"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_263.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_263.cpp,16,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1590,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""File decompression failed (%d)"", r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_264.cpp,"{
		case Z_OK: /* Decompressor made some progress.*/
		case Z_STREAM_END: /* Found end of stream. */
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""File decompression failed (%d)"", r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_264.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_264.cpp,38,"[""member"", ""macro"", ""string"", ""inflate_ret""]","[""inflate_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1610,"archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to clean up decompressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_265.cpp,"{
			case BZ_OK:
				break;
			default:
				archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to clean up decompressor"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_265.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_265.cpp,58,"[""member"", ""macro"", ""string""]","[""BZ2_bzDecompressEnd_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1620,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""bzip decompression failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_266.cpp,"{
		case BZ_STREAM_END: /* Found end of stream. */
			switch (BZ2_bzDecompressEnd(&(xar->bzstream))) {
			case BZ_OK:
				break;
			default:
				archive_set_error(&(a->archive),
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to clean up decompressor"");
				return (ARCHIVE_FATAL);
			}
			xar->bzstream_valid = 0;
			/* FALLTHROUGH */
		case BZ_OK: /* Decompressor made some progress. */
			break;
		default:
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""bzip decompression failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_266.cpp,"[0, 0, 0, 0, 2, 0, 2, 1, 3, 2, 2, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_266.cpp,68,"[""member"", ""macro"", ""string""]","[""BZ2_bzDecompress_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1645,"archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""%s decompression failed(%d)"",
			    (xar->entry_encoding == XZ)?""xz"":""lzma"",
			    r);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_267.cpp,"{
		case LZMA_STREAM_END: /* Found end of stream. */
			lzma_end(&(xar->lzstream));
			xar->lzstream_valid = 0;
			/* FALLTHROUGH */
		case LZMA_OK: /* Decompressor made some progress. */
			break;
		default:
			archive_set_error(&(a->archive),
			    ARCHIVE_ERRNO_MISC,
			    ""%s decompression failed(%d)"",
			    (xar->entry_encoding == XZ)?""xz"":""lzma"",
			    r);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_267.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 1, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_267.cpp,93,"[""member"", ""macro"", ""string"", ""string"", ""lzma_code_ret""]","[""lzma_code_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1691,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up zlib decompressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_268.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up zlib decompressor"");
			r = ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_268.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_268.cpp,10,"[""member"", ""macro"", ""string""]","[""inflateEnd_ret"", ""macro"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1700,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up bzip2 decompressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_269.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up bzip2 decompressor"");
			r = ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_269.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_269.cpp,19,"[""member"", ""macro"", ""string""]","[""BZ2_bzDecompressEnd_ret"", ""macro"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1758,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_271.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_271.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_271.cpp,8,"[""member"", ""macro"", ""string""]","[""calloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1807,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_272.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_272.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_272.cpp,8,"[""member"", ""macro"", ""string""]","[""calloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1887,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_273.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_273.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_273.cpp,7,"[""member"", ""macro"", ""string""]","[""malloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1895,"fprintf(stderr, ""UNKNOWNTAG_START:%s\n"", name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_274.cpp,"{
#if DEBUG
		fprintf(stderr, ""UNKNOWNTAG_START:%s\n"", name);
#endif
		xar->xmlsts_unknown = xar->xmlsts;
		xar->xmlsts = UNKNOWN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_274.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 3, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_274.cpp,15,"[""unkown"", ""string"", ""const char *""]","[""member"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1918,"fprintf(stderr, ""UNKNOWNTAG_END:%s\n"", name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_275.cpp,"{
#if DEBUG
			fprintf(stderr, ""UNKNOWNTAG_END:%s\n"", name);
#endif
			xar->xmlsts = xar->xmlsts_unknown;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_275.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_275.cpp,14,"[""unkown"", ""string"", ""const char *""]","[""member"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1934,"fprintf(stderr, ""xml_sta:[%s]\n"", name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_276.cpp,"{
	struct xar *xar;
	struct xmlattr *attr;

	xar = (struct xar *)(a->format->data);

#if DEBUG
	fprintf(stderr, ""xml_sta:[%s]\n"", name);
	for (attr = list->first; attr != NULL; attr = attr->next)
		fprintf(stderr, ""    attr:\""%s\""=\""%s\""\n"",
		    attr->name, attr->value);
#endif
	xar->base64text = 0;
	switch (xar->xmlsts) {
	case INIT:
		if (strcmp(name, ""xar"") == 0)
			xar->xmlsts = XAR;
		else
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case XAR:
		if (strcmp(name, ""toc"") == 0)
			xar->xmlsts = TOC;
		else
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case TOC:
		if (strcmp(name, ""creation-time"") == 0)
			xar->xmlsts = TOC_CREATION_TIME;
		else if (strcmp(name, ""checksum"") == 0)
			xar->xmlsts = TOC_CHECKSUM;
		else if (strcmp(name, ""file"") == 0) {
			if (file_new(a, xar, list) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
			xar->xmlsts = TOC_FILE;
		}
		else
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case TOC_CHECKSUM:
		if (strcmp(name, ""offset"") == 0)
			xar->xmlsts = TOC_CHECKSUM_OFFSET;
		else if (strcmp(name, ""size"") == 0)
			xar->xmlsts = TOC_CHECKSUM_SIZE;
		else
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case TOC_FILE:
		if (strcmp(name, ""file"") == 0) {
			if (file_new(a, xar, list) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		}
		else if (strcmp(name, ""data"") == 0)
			xar->xmlsts = FILE_DATA;
		else if (strcmp(name, ""ea"") == 0) {
			if (xattr_new(a, xar, list) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
			xar->xmlsts = FILE_EA;
		}
		else if (strcmp(name, ""ctime"") == 0)
			xar->xmlsts = FILE_CTIME;
		else if (strcmp(name, ""mtime"") == 0)
			xar->xmlsts = FILE_MTIME;
		else if (strcmp(name, ""atime"") == 0)
			xar->xmlsts = FILE_ATIME;
		else if (strcmp(name, ""group"") == 0)
			xar->xmlsts = FILE_GROUP;
		else if (strcmp(name, ""gid"") == 0)
			xar->xmlsts = FILE_GID;
		else if (strcmp(name, ""user"") == 0)
			xar->xmlsts = FILE_USER;
		else if (strcmp(name, ""uid"") == 0)
			xar->xmlsts = FILE_UID;
		else if (strcmp(name, ""mode"") == 0)
			xar->xmlsts = FILE_MODE;
		else if (strcmp(name, ""device"") == 0)
			xar->xmlsts = FILE_DEVICE;
		else if (strcmp(name, ""deviceno"") == 0)
			xar->xmlsts = FILE_DEVICENO;
		else if (strcmp(name, ""inode"") == 0)
			xar->xmlsts = FILE_INODE;
		else if (strcmp(name, ""link"") == 0)
			xar->xmlsts = FILE_LINK;
		else if (strcmp(name, ""type"") == 0) {
			xar->xmlsts = FILE_TYPE;
			for (attr = list->first; attr != NULL;
			    attr = attr->next) {
				if (strcmp(attr->name, ""link"") != 0)
					continue;
				if (strcmp(attr->value, ""original"") == 0) {
					xar->file->hdnext = xar->hdlink_orgs;
					xar->hdlink_orgs = xar->file;
				} else {
					xar->file->link = (unsigned)atol10(attr->value,
					    strlen(attr->value));
					if (xar->file->link > 0)
						if (add_link(a, xar, xar->file) != ARCHIVE_OK) {
							return (ARCHIVE_FATAL);
						};
				}
			}
		}
		else if (strcmp(name, ""name"") == 0) {
			xar->xmlsts = FILE_NAME;
			for (attr = list->first; attr != NULL;
			    attr = attr->next) {
				if (strcmp(attr->name, ""enctype"") == 0 &&
				    strcmp(attr->value, ""base64"") == 0)
					xar->base64text = 1;
			}
		}
		else if (strcmp(name, ""acl"") == 0)
			xar->xmlsts = FILE_ACL;
		else if (strcmp(name, ""flags"") == 0)
			xar->xmlsts = FILE_FLAGS;
		else if (strcmp(name, ""ext2"") == 0)
			xar->xmlsts = FILE_EXT2;
		else
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case FILE_DATA:
		if (strcmp(name, ""length"") == 0)
			xar->xmlsts = FILE_DATA_LENGTH;
		else if (strcmp(name, ""offset"") == 0)
			xar->xmlsts = FILE_DATA_OFFSET;
		else if (strcmp(name, ""size"") == 0)
			xar->xmlsts = FILE_DATA_SIZE;
		else if (strcmp(name, ""encoding"") == 0) {
			xar->xmlsts = FILE_DATA_ENCODING;
			xar->file->encoding = getencoding(list);
		}
		else if (strcmp(name, ""archived-checksum"") == 0) {
			xar->xmlsts = FILE_DATA_A_CHECKSUM;
			xar->file->a_sum.alg = getsumalgorithm(list);
		}
		else if (strcmp(name, ""extracted-checksum"") == 0) {
			xar->xmlsts = FILE_DATA_E_CHECKSUM;
			xar->file->e_sum.alg = getsumalgorithm(list);
		}
		else if (strcmp(name, ""content"") == 0)
			xar->xmlsts = FILE_DATA_CONTENT;
		else
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case FILE_DEVICE:
		if (strcmp(name, ""major"") == 0)
			xar->xmlsts = FILE_DEVICE_MAJOR;
		else if (strcmp(name, ""minor"") == 0)
			xar->xmlsts = FILE_DEVICE_MINOR;
		else
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case FILE_DATA_CONTENT:
		if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
			return (ARCHIVE_FATAL);
		break;
	case FILE_EA:
		if (strcmp(name, ""length"") == 0)
			xar->xmlsts = FILE_EA_LENGTH;
		else if (strcmp(name, ""offset"") == 0)
			xar->xmlsts = FILE_EA_OFFSET;
		else if (strcmp(name, ""size"") == 0)
			xar->xmlsts = FILE_EA_SIZE;
		else if (strcmp(name, ""encoding"") == 0) {
			xar->xmlsts = FILE_EA_ENCODING;
			xar->xattr->encoding = getencoding(list);
		} else if (strcmp(name, ""archived-checksum"") == 0)
			xar->xmlsts = FILE_EA_A_CHECKSUM;
		else if (strcmp(name, ""extracted-checksum"") == 0)
			xar->xmlsts = FILE_EA_E_CHECKSUM;
		else if (strcmp(name, ""name"") == 0)
			xar->xmlsts = FILE_EA_NAME;
		else if (strcmp(name, ""fstype"") == 0)
			xar->xmlsts = FILE_EA_FSTYPE;
		else
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case FILE_ACL:
		if (strcmp(name, ""appleextended"") == 0)
			xar->xmlsts = FILE_ACL_APPLEEXTENDED;
		else if (strcmp(name, ""default"") == 0)
			xar->xmlsts = FILE_ACL_DEFAULT;
		else if (strcmp(name, ""access"") == 0)
			xar->xmlsts = FILE_ACL_ACCESS;
		else
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case FILE_FLAGS:
		if (!xml_parse_file_flags(xar, name))
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case FILE_EXT2:
		if (!xml_parse_file_ext2(xar, name))
			if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
				return (ARCHIVE_FATAL);
		break;
	case TOC_CREATION_TIME:
	case TOC_CHECKSUM_OFFSET:
	case TOC_CHECKSUM_SIZE:
	case FILE_DATA_LENGTH:
	case FILE_DATA_OFFSET:
	case FILE_DATA_SIZE:
	case FILE_DATA_ENCODING:
	case FILE_DATA_A_CHECKSUM:
	case FILE_DATA_E_CHECKSUM:
	case FILE_EA_LENGTH:
	case FILE_EA_OFFSET:
	case FILE_EA_SIZE:
	case FILE_EA_ENCODING:
	case FILE_EA_A_CHECKSUM:
	case FILE_EA_E_CHECKSUM:
	case FILE_EA_NAME:
	case FILE_EA_FSTYPE:
	case FILE_CTIME:
	case FILE_MTIME:
	case FILE_ATIME:
	case FILE_GROUP:
	case FILE_GID:
	case FILE_USER:
	case FILE_UID:
	case FILE_INODE:
	case FILE_DEVICE_MAJOR:
	case FILE_DEVICE_MINOR:
	case FILE_DEVICENO:
	case FILE_MODE:
	case FILE_TYPE:
	case FILE_LINK:
	case FILE_NAME:
	case FILE_ACL_DEFAULT:
	case FILE_ACL_ACCESS:
	case FILE_ACL_APPLEEXTENDED:
	case FILE_FLAGS_USER_NODUMP:
	case FILE_FLAGS_USER_IMMUTABLE:
	case FILE_FLAGS_USER_APPEND:
	case FILE_FLAGS_USER_OPAQUE:
	case FILE_FLAGS_USER_NOUNLINK:
	case FILE_FLAGS_SYS_ARCHIVED:
	case FILE_FLAGS_SYS_IMMUTABLE:
	case FILE_FLAGS_SYS_APPEND:
	case FILE_FLAGS_SYS_NOUNLINK:
	case FILE_FLAGS_SYS_SNAPSHOT:
	case FILE_EXT2_SecureDeletion:
	case FILE_EXT2_Undelete:
	case FILE_EXT2_Compress:
	case FILE_EXT2_Synchronous:
	case FILE_EXT2_Immutable:
	case FILE_EXT2_AppendOnly:
	case FILE_EXT2_NoDump:
	case FILE_EXT2_NoAtime:
	case FILE_EXT2_CompDirty:
	case FILE_EXT2_CompBlock:
	case FILE_EXT2_NoCompBlock:
	case FILE_EXT2_CompError:
	case FILE_EXT2_BTree:
	case FILE_EXT2_HashIndexed:
	case FILE_EXT2_iMagic:
	case FILE_EXT2_Journaled:
	case FILE_EXT2_NoTail:
	case FILE_EXT2_DirSync:
	case FILE_EXT2_TopDir:
	case FILE_EXT2_Reserved:
	case UNKNOWN:
		if (unknowntag_start(a, xar, name) != ARCHIVE_OK)
			return (ARCHIVE_FATAL);
		break;
	}
	return (ARCHIVE_OK);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_276.cpp,"[71, 0, 3, 0, 13, 1, 18, 1, 78, 0, 76, 0, 0, 1, 0, 604, 0, 0, 2, 2, 0, 0, 3, 107, 0, 0, 0, 0, 2, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 74, 70, 1, 0, 78, 0, 0, 58, 47, 171, 2, 3, 0, 0, 3, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_276.cpp,9,"[""unkown"", ""string"", ""const char *""]",[]
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,1936,"fprintf(stderr, ""    attr:\""%s\""=\""%s\""\n"",
		    attr->name, attr->value);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_277.cpp,"fprintf(stderr, ""    attr:\""%s\""=\""%s\""\n"",
		    attr->name, attr->value)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_277.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_277.cpp,11,"[""unkown"", ""string"", ""member"", ""member""]","[""member"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,2216,"fprintf(stderr, ""xml_end:[%s]\n"", name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_278.cpp,"{
	struct archive_read *a;
	struct xar *xar;

	a = (struct archive_read *)userData;
	xar = (struct xar *)(a->format->data);

#if DEBUG
	fprintf(stderr, ""xml_end:[%s]\n"", name);
#endif
	switch (xar->xmlsts) {
	case INIT:
		break;
	case XAR:
		if (strcmp(name, ""xar"") == 0)
			xar->xmlsts = INIT;
		break;
	case TOC:
		if (strcmp(name, ""toc"") == 0)
			xar->xmlsts = XAR;
		break;
	case TOC_CREATION_TIME:
		if (strcmp(name, ""creation-time"") == 0)
			xar->xmlsts = TOC;
		break;
	case TOC_CHECKSUM:
		if (strcmp(name, ""checksum"") == 0)
			xar->xmlsts = TOC;
		break;
	case TOC_CHECKSUM_OFFSET:
		if (strcmp(name, ""offset"") == 0)
			xar->xmlsts = TOC_CHECKSUM;
		break;
	case TOC_CHECKSUM_SIZE:
		if (strcmp(name, ""size"") == 0)
			xar->xmlsts = TOC_CHECKSUM;
		break;
	case TOC_FILE:
		if (strcmp(name, ""file"") == 0) {
			if (xar->file->parent != NULL &&
			    ((xar->file->mode & AE_IFMT) == AE_IFDIR))
				xar->file->parent->subdirs++;
			xar->file = xar->file->parent;
			if (xar->file == NULL)
				xar->xmlsts = TOC;
		}
		break;
	case FILE_DATA:
		if (strcmp(name, ""data"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_DATA_LENGTH:
		if (strcmp(name, ""length"") == 0)
			xar->xmlsts = FILE_DATA;
		break;
	case FILE_DATA_OFFSET:
		if (strcmp(name, ""offset"") == 0)
			xar->xmlsts = FILE_DATA;
		break;
	case FILE_DATA_SIZE:
		if (strcmp(name, ""size"") == 0)
			xar->xmlsts = FILE_DATA;
		break;
	case FILE_DATA_ENCODING:
		if (strcmp(name, ""encoding"") == 0)
			xar->xmlsts = FILE_DATA;
		break;
	case FILE_DATA_A_CHECKSUM:
		if (strcmp(name, ""archived-checksum"") == 0)
			xar->xmlsts = FILE_DATA;
		break;
	case FILE_DATA_E_CHECKSUM:
		if (strcmp(name, ""extracted-checksum"") == 0)
			xar->xmlsts = FILE_DATA;
		break;
	case FILE_DATA_CONTENT:
		if (strcmp(name, ""content"") == 0)
			xar->xmlsts = FILE_DATA;
		break;
	case FILE_EA:
		if (strcmp(name, ""ea"") == 0) {
			xar->xmlsts = TOC_FILE;
			xar->xattr = NULL;
		}
		break;
	case FILE_EA_LENGTH:
		if (strcmp(name, ""length"") == 0)
			xar->xmlsts = FILE_EA;
		break;
	case FILE_EA_OFFSET:
		if (strcmp(name, ""offset"") == 0)
			xar->xmlsts = FILE_EA;
		break;
	case FILE_EA_SIZE:
		if (strcmp(name, ""size"") == 0)
			xar->xmlsts = FILE_EA;
		break;
	case FILE_EA_ENCODING:
		if (strcmp(name, ""encoding"") == 0)
			xar->xmlsts = FILE_EA;
		break;
	case FILE_EA_A_CHECKSUM:
		if (strcmp(name, ""archived-checksum"") == 0)
			xar->xmlsts = FILE_EA;
		break;
	case FILE_EA_E_CHECKSUM:
		if (strcmp(name, ""extracted-checksum"") == 0)
			xar->xmlsts = FILE_EA;
		break;
	case FILE_EA_NAME:
		if (strcmp(name, ""name"") == 0)
			xar->xmlsts = FILE_EA;
		break;
	case FILE_EA_FSTYPE:
		if (strcmp(name, ""fstype"") == 0)
			xar->xmlsts = FILE_EA;
		break;
	case FILE_CTIME:
		if (strcmp(name, ""ctime"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_MTIME:
		if (strcmp(name, ""mtime"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_ATIME:
		if (strcmp(name, ""atime"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_GROUP:
		if (strcmp(name, ""group"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_GID:
		if (strcmp(name, ""gid"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_USER:
		if (strcmp(name, ""user"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_UID:
		if (strcmp(name, ""uid"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_MODE:
		if (strcmp(name, ""mode"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_DEVICE:
		if (strcmp(name, ""device"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_DEVICE_MAJOR:
		if (strcmp(name, ""major"") == 0)
			xar->xmlsts = FILE_DEVICE;
		break;
	case FILE_DEVICE_MINOR:
		if (strcmp(name, ""minor"") == 0)
			xar->xmlsts = FILE_DEVICE;
		break;
	case FILE_DEVICENO:
		if (strcmp(name, ""deviceno"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_INODE:
		if (strcmp(name, ""inode"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_LINK:
		if (strcmp(name, ""link"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_TYPE:
		if (strcmp(name, ""type"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_NAME:
		if (strcmp(name, ""name"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_ACL:
		if (strcmp(name, ""acl"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_ACL_DEFAULT:
		if (strcmp(name, ""default"") == 0)
			xar->xmlsts = FILE_ACL;
		break;
	case FILE_ACL_ACCESS:
		if (strcmp(name, ""access"") == 0)
			xar->xmlsts = FILE_ACL;
		break;
	case FILE_ACL_APPLEEXTENDED:
		if (strcmp(name, ""appleextended"") == 0)
			xar->xmlsts = FILE_ACL;
		break;
	case FILE_FLAGS:
		if (strcmp(name, ""flags"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_FLAGS_USER_NODUMP:
		if (strcmp(name, ""UserNoDump"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_FLAGS_USER_IMMUTABLE:
		if (strcmp(name, ""UserImmutable"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_FLAGS_USER_APPEND:
		if (strcmp(name, ""UserAppend"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_FLAGS_USER_OPAQUE:
		if (strcmp(name, ""UserOpaque"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_FLAGS_USER_NOUNLINK:
		if (strcmp(name, ""UserNoUnlink"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_FLAGS_SYS_ARCHIVED:
		if (strcmp(name, ""SystemArchived"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_FLAGS_SYS_IMMUTABLE:
		if (strcmp(name, ""SystemImmutable"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_FLAGS_SYS_APPEND:
		if (strcmp(name, ""SystemAppend"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_FLAGS_SYS_NOUNLINK:
		if (strcmp(name, ""SystemNoUnlink"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_FLAGS_SYS_SNAPSHOT:
		if (strcmp(name, ""SystemSnapshot"") == 0)
			xar->xmlsts = FILE_FLAGS;
		break;
	case FILE_EXT2:
		if (strcmp(name, ""ext2"") == 0)
			xar->xmlsts = TOC_FILE;
		break;
	case FILE_EXT2_SecureDeletion:
		if (strcmp(name, ""SecureDeletion"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_Undelete:
		if (strcmp(name, ""Undelete"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_Compress:
		if (strcmp(name, ""Compress"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_Synchronous:
		if (strcmp(name, ""Synchronous"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_Immutable:
		if (strcmp(name, ""Immutable"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_AppendOnly:
		if (strcmp(name, ""AppendOnly"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_NoDump:
		if (strcmp(name, ""NoDump"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_NoAtime:
		if (strcmp(name, ""NoAtime"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_CompDirty:
		if (strcmp(name, ""CompDirty"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_CompBlock:
		if (strcmp(name, ""CompBlock"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_NoCompBlock:
		if (strcmp(name, ""NoCompBlock"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_CompError:
		if (strcmp(name, ""CompError"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_BTree:
		if (strcmp(name, ""BTree"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_HashIndexed:
		if (strcmp(name, ""HashIndexed"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_iMagic:
		if (strcmp(name, ""iMagic"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_Journaled:
		if (strcmp(name, ""Journaled"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_NoTail:
		if (strcmp(name, ""NoTail"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_DirSync:
		if (strcmp(name, ""DirSync"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_TopDir:
		if (strcmp(name, ""TopDir"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case FILE_EXT2_Reserved:
		if (strcmp(name, ""Reserved"") == 0)
			xar->xmlsts = FILE_EXT2;
		break;
	case UNKNOWN:
		unknowntag_end(xar, name);
		break;
	}
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_278.cpp,"[79, 0, 0, 0, 78, 0, 0, 1, 78, 0, 80, 0, 0, 0, 0, 592, 0, 0, 2, 2, 0, 0, 0, 153, 0, 0, 0, 0, 2, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 398, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 79, 78, 0, 0, 78, 0, 0, 83, 0, 157, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_278.cpp,10,"[""unkown"", ""string"", ""const char *""]",[]
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,2641,"fprintf(stderr, ""\tlen=%d:\""%s\""\n"", len, buff);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_279.cpp,"{
		char buff[1024];
		if (len > (int)(sizeof(buff)-1))
			len = (int)(sizeof(buff)-1);
		strncpy(buff, s, len);
		buff[len] = 0;
		fprintf(stderr, ""\tlen=%d:\""%s\""\n"", len, buff);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_279.cpp,"[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 20, 0, 0, 1, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 18, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 6, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_279.cpp,16,"[""unkown"", ""string"", ""int"", ""char *""]",[]
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3029,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_280.cpp,"{
			archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_280.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_280.cpp,13,"[""member"", ""macro"", ""string""]","[""malloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3036,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_281.cpp,"{
			free(attr);
			archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_281.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_281.cpp,20,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3044,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_282.cpp,"{
			free(attr->name);
			free(attr);
			archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_282.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_282.cpp,28,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3103,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""XML Parsing error: %s"", msg);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_283.cpp,"{
	case XML_PARSER_SEVERITY_VALIDITY_WARNING:
	case XML_PARSER_SEVERITY_WARNING:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""XML Parsing error: %s"", msg);
		break;
	case XML_PARSER_SEVERITY_VALIDITY_ERROR:
	case XML_PARSER_SEVERITY_ERROR:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""XML Parsing error: %s"", msg);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_283.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_283.cpp,11,"[""member"", ""macro"", ""string"", ""const char *""]","[""xmlParserSeverities""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3108,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""XML Parsing error: %s"", msg);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_284.cpp,"{
	case XML_PARSER_SEVERITY_VALIDITY_WARNING:
	case XML_PARSER_SEVERITY_WARNING:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""XML Parsing error: %s"", msg);
		break;
	case XML_PARSER_SEVERITY_VALIDITY_ERROR:
	case XML_PARSER_SEVERITY_ERROR:
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""XML Parsing error: %s"", msg);
		break;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_284.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_284.cpp,16,"[""member"", ""macro"", ""string"", ""const char *""]","[""xmlParserSeverities""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3123,"archive_set_error(&a->archive, ENOMEM,
		    ""Couldn't allocate memory for xml parser"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_285.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Couldn't allocate memory for xml parser"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_285.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_285.cpp,9,"[""member"", ""macro"", ""string""]","[""xmlReaderForIO_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3185,"archive_set_error(&a->archive, ENOMEM, ""Out of memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_286.cpp,"{
			archive_set_error(&a->archive, ENOMEM, ""Out of memory"");
			free(attr);
			free(name);
			free(value);
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_286.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_286.cpp,16,"[""member"", ""macro"", ""string""]","[""malloc_ret"", ""null"", ""=="", ""strdup_ret"", ""null"", ""=="", ""strdup_ret"", ""null"", ""=="", ""||"", ""||""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3247,"archive_set_error(&a->archive, ENOMEM,
		    ""Couldn't allocate memory for xml parser"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_287.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Couldn't allocate memory for xml parser"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_287.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_287.cpp,15,"[""member"", ""macro"", ""string""]","[""XML_ParserCreate_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.cpp,3276,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""XML Parsing failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_288.cpp,"{
			XML_ParserFree(parser);
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""XML Parsing failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_288.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_288.cpp,44,"[""member"", ""macro"", ""string""]","[""XML_Parse_ret"", ""macro"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,231,"archive_set_error(&a->archive, ENOMEM, ""Can't allocate cpio data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_289.cpp,"{
		archive_set_error(&a->archive, ENOMEM, ""Can't allocate cpio data"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_289.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_289.cpp,12,"[""member"", ""macro"", ""string""]","[""calloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,333,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""cpio: hdrcharset option needs a character-set name"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_290.cpp,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""cpio: hdrcharset option needs a character-set name"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_290.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_290.cpp,14,"[""member"", ""macro"", ""string""]","[""const char *"", ""null"", ""=="", ""member"", ""null"", ""=="", ""||""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,388,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_291.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_291.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_291.cpp,35,"[""member"", ""macro"", ""string""]","[""unkown"", ""macro"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,392,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname can't be converted from %s to current locale."",
		    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_292.cpp,"{
		if (errno == ENOMEM) {
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Pathname"");
			return (ARCHIVE_FATAL);
		}
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Pathname can't be converted from %s to current locale."",
		    archive_string_conversion_charset_name(sconv));
		r = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_292.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_292.cpp,39,"[""member"", ""macro"", ""string"", ""archive_string_conversion_charset_name_ret""]","[""unkown"", ""macro"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,404,"archive_set_error(&a->archive, ENOMEM,
			    ""Rejecting malformed cpio archive: symlink contents exceed 1 megabyte"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_293.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Rejecting malformed cpio archive: symlink contents exceed 1 megabyte"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_293.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_293.cpp,51,"[""member"", ""macro"", ""string""]","[""member"", ""int"", "">""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,415,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_294.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_294.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_294.cpp,62,"[""member"", ""macro"", ""string""]","[""unkown"", ""macro"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,419,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Linkname can't be converted from %s to ""
			    ""current locale."",
			    archive_string_conversion_charset_name(sconv));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_295.cpp,"{
			if (errno == ENOMEM) {
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for Linkname"");
				return (ARCHIVE_FATAL);
			}
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Linkname can't be converted from %s to ""
			    ""current locale."",
			    archive_string_conversion_charset_name(sconv));
			r = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_295.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_295.cpp,66,[],"[""unkown"", ""macro"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,560,"archive_set_error(&a->archive,
						    0,
						    ""Skipped %d bytes before ""
						    ""finding valid header"",
						    (int)skipped);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_296.cpp,"{
						archive_set_error(&a->archive,
						    0,
						    ""Skipped %d bytes before ""
						    ""finding valid header"",
						    (int)skipped);
						return (ARCHIVE_WARN);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_296.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_296.cpp,35,[],"[""size_t"", ""null"", "">""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,728,"archive_set_error(&a->archive,
						    0,
						    ""Skipped %d bytes before ""
						    ""finding valid header"",
						    (int)skipped);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_297.cpp,"{
						archive_set_error(&a->archive,
						    0,
						    ""Skipped %d bytes before ""
						    ""finding valid header"",
						    (int)skipped);
						return (ARCHIVE_WARN);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_297.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_297.cpp,41,[],"[""size_t"", ""null"", "">""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,875,"archive_set_error(&a->archive, 0,
		""End of file trying to read next cpio header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_298.cpp,"{
	    archive_set_error(&a->archive, 0,
		""End of file trying to read next cpio header"");
	    return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_298.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_298.cpp,13,"[""member"", ""null"", ""string""]","[""__archive_read_ahead_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,914,"archive_set_error(&a->archive, 0,
		""End of file trying to read next cpio header"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_299.cpp,"{
	    archive_set_error(&a->archive, 0,
		""End of file trying to read next cpio header"");
	    return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_299.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_299.cpp,13,"[""member"", ""null"", ""string""]","[""__archive_read_ahead_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,1059,"archive_set_error(&a->archive,
		    ENOMEM, ""Out of memory adding file to list"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_300.cpp,"{
		archive_set_error(&a->archive,
		    ENOMEM, ""Out of memory adding file to list"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_300.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_300.cpp,39,"[""member"", ""macro"", ""string""]","[""malloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.cpp,1073,"archive_set_error(&a->archive,
		    ENOMEM, ""Out of memory adding file to list"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_301.cpp,"{
		archive_set_error(&a->archive,
		    ENOMEM, ""Out of memory adding file to list"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_301.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_301.cpp,53,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,423,"archive_set_error(&a->archive, errno, ""Couldn't stat file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_302.cpp,"{
	if (a->pst != NULL) {
		/* Already have stat() data available. */
		return (ARCHIVE_OK);
	}
#ifdef HAVE_FSTAT
	if (a->fd >= 0 && fstat(a->fd, &a->st) == 0) {
		a->pst = &a->st;
		return (ARCHIVE_OK);
	}
#endif
	/*
	 * XXX At this point, symlinks should not be hit, otherwise
	 * XXX a race occurred.  Do we want to check explicitly for that?
	 */
	if (lstat(a->name, &a->st) == 0) {
		a->pst = &a->st;
		return (ARCHIVE_OK);
	}
	archive_set_error(&a->archive, errno, ""Couldn't stat file"");
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_302.cpp,"[3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 0, 0, 3, 0, 7, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_302.cpp,21,"[""member"", ""unkown"", ""string""]","[""lstat_ret"", ""null"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,671,"archive_set_error(&a->archive, errno,
			    ""chdir() failure"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_303.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""chdir() failure"");
			ret = ARCHIVE_FATAL;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_303.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_303.cpp,192,"[""member"", ""unkown"", ""string""]","[""fchdir_ret"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,801,"archive_set_error(&a->archive, 0,
		    ""Attempt to write to an empty file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_304.cpp,"{
		archive_set_error(&a->archive, 0,
		    ""Attempt to write to an empty file"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_304.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_304.cpp,11,"[""member"", ""null"", ""string""]","[""member"", ""null"", ""=="", ""member"", ""null"", ""<"", ""||""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,856,"archive_set_error(&a->archive, errno,
				    ""Seek failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_305.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Seek failed"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_305.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_305.cpp,66,"[""member"", ""unkown"", ""string""]","[""lseek_ret"", ""null"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,864,"archive_set_error(&a->archive, errno, ""Write failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_306.cpp,"{
			archive_set_error(&a->archive, errno, ""Write failed"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_306.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_306.cpp,74,"[""member"", ""unkown"", ""string""]","[""write_ret"", ""null"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,894,"archive_set_error(&a->archive, errno,
		    ""Failed to set UF_COMPRESSED file flag"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_307.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to set UF_COMPRESSED file flag"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_307.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_307.cpp,10,"[""member"", ""unkown"", ""string""]","[""fchflags_ret"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,932,"archive_set_error(&a->archive, errno,
		    ""Cannot restore xattr:%s"", DECMPFS_XATTR_NAME);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_308.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Cannot restore xattr:%s"", DECMPFS_XATTR_NAME);
		compression_type = archive_le32dec(
		    &a->decmpfs_header_p[DECMPFS_COMPRESSION_TYPE]);
		if (compression_type == CMP_RESOURCE_FORK)
			fremovexattr(a->fd, XATTR_RESOURCEFORK_NAME,
			    XATTR_SHOWCOMPRESSION);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_308.cpp,"[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_308.cpp,9,"[""member"", ""unkown"", ""string"", ""macro""]","[""fsetxattr_ret"", ""null"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,989,"archive_set_error(&a->archive, errno,
		    ""Cannot restore xattr: %s at %u pos %u bytes"",
		    XATTR_RESOURCEFORK_NAME,
		    (unsigned)position,
		    (unsigned)bytes);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_309.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Cannot restore xattr: %s at %u pos %u bytes"",
		    XATTR_RESOURCEFORK_NAME,
		    (unsigned)position,
		    (unsigned)bytes);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_309.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_309.cpp,9,"[""member"", ""unkown"", ""string"", ""macro"", ""uint32_t"", ""size_t""]","[""fsetxattr_ret"", ""null"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1066,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_310.cpp,"{
		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
		    ""Failed to initialize compressor"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_310.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_310.cpp,11,"[""member"", ""macro"", ""string""]","[""deflateReset_ret"", ""macro"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1093,"archive_set_error(&a->archive,
			    (r < 0)?errno:ARCHIVE_ERRNO_MISC,
			    ""Failed to read resource fork"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_311.cpp,"{
			archive_set_error(&a->archive,
			    (r < 0)?errno:ARCHIVE_ERRNO_MISC,
			    ""Failed to read resource fork"");
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_311.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_311.cpp,18,"[""member"", ""macro"", ""string""]","[""fgetxattr_ret"", ""archive_le32dec_ret"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1108,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to decompress resource fork"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_312.cpp,"{
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_MISC,
				    ""Failed to decompress resource fork"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_312.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_312.cpp,33,"[""member"", ""macro"", ""string""]","[""uncompress_ret"", ""macro"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1119,"archive_set_error(&a->archive, errno,
				    ""Write failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_313.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Write failed"");
				return (ARCHIVE_WARN);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_313.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_313.cpp,44,"[""member"", ""unkown"", ""string""]","[""write_ret"", ""null"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1129,"archive_set_error(&a->archive, errno,
		    ""Failed to remove resource fork"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_314.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to remove resource fork"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_314.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_314.cpp,54,"[""member"", ""unkown"", ""string""]","[""fremovexattr_ret"", ""int"", ""int"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1156,"archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Resource Fork"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_315.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Can't allocate memory for Resource Fork"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_315.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_315.cpp,20,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1177,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Failed to compress data"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_316.cpp,"{
		case Z_OK:
		case Z_STREAM_END:
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Failed to compress data"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_316.cpp,"[0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_316.cpp,41,"[""member"", ""macro"", ""string""]","[""deflate_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1304,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for decmpfs"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_317.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for decmpfs"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_317.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_317.cpp,17,"[""member"", ""macro"", ""string""]","[""malloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1334,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ResourceFork"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_318.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for ResourceFork"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_318.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_318.cpp,47,"[""member"", ""macro"", ""string""]","[""realloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1346,"archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for decmpfs"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_319.cpp,"{
				archive_set_error(&a->archive, ENOMEM,
				    ""Can't allocate memory for decmpfs"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_319.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_319.cpp,59,"[""member"", ""macro"", ""string""]","[""malloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1425,"archive_set_error(&a->archive, 0,
		    ""Attempt to write to an empty file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_320.cpp,"{
		archive_set_error(&a->archive, 0,
		    ""Attempt to write to an empty file"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_320.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_320.cpp,12,"[""member"", ""null"", ""string""]","[""member"", ""null"", ""=="", ""member"", ""null"", ""<"", ""||""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1440,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Seek failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_321.cpp,"{
			/* Can't support backward move. */
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Seek failed"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_321.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_321.cpp,27,"[""member"", ""macro"", ""string""]","[""member"", ""member"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1456,"archive_set_error(&a->archive, errno,
					    ""Write failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_322.cpp,"{
					archive_set_error(&a->archive, errno,
					    ""Write failed"");
					return (ARCHIVE_WARN);
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_322.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_322.cpp,43,"[""member"", ""unkown"", ""string""]","[""hfs_write_decmpfs_block_ret"", ""null"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1504,"archive_set_error(&a->archive, 0,
		    ""Too much data: Truncating file at %ju bytes"",
		    (uintmax_t)a->filesize);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_323.cpp,"{
		archive_set_error(&a->archive, 0,
		    ""Too much data: Truncating file at %ju bytes"",
		    (uintmax_t)a->filesize);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_323.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_323.cpp,18,"[""member"", ""null"", ""string"", ""member""]","[""hfs_write_data_block_ret"", ""size_t"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1572,"archive_set_error(&a->archive, errno,
			    ""File size could not be restored"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_324.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""File size could not be restored"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_324.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_324.cpp,43,"[""member"", ""unkown"", ""string""]","[""ftruncate_ret"", ""int"", ""int"", ""=="", ""member"", ""null"", ""=="", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1590,"archive_set_error(&a->archive, errno,
				    ""Seek failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_325.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Seek failed"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_325.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_325.cpp,61,"[""member"", ""unkown"", ""string""]","[""lseek_ret"", ""null"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1595,"archive_set_error(&a->archive, errno,
				    ""Write to restore size failed"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_326.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Write to restore size failed"");
				return (ARCHIVE_FATAL);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_326.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_326.cpp,66,"[""member"", ""unkown"", ""string""]","[""write_ret"", ""null"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1912,"archive_set_error(&a->archive, errno,
			    ""Could not unlink"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_327.cpp,"{
			/* We tried, but couldn't get rid of it. */
			archive_set_error(&a->archive, errno,
			    ""Could not unlink"");
			return(ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_327.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_327.cpp,26,"[""member"", ""unkown"", ""string""]","[""rmdir_ret"", ""null"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1930,"archive_set_error(&a->archive, en,
		    ""Hard-link target '%s' does not exist."",
		    archive_entry_hardlink(a->entry));",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_328.cpp,"{
		archive_set_error(&a->archive, en,
		    ""Hard-link target '%s' does not exist."",
		    archive_entry_hardlink(a->entry));
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_328.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_328.cpp,44,"[""member"", ""create_filesystem_object_ret"", ""string"", ""archive_entry_hardlink_ret""]","[""create_filesystem_object_ret"", ""macro"", ""=="", ""archive_entry_hardlink_ret"", ""null"", ""!="", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1953,"archive_set_error(&a->archive, errno,
			    ""Can't remove already-existing dir"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_329.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't remove already-existing dir"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_329.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_329.cpp,67,"[""member"", ""unkown"", ""string""]","[""rmdir_ret"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,1980,"archive_set_error(&a->archive, errno,
			    ""Can't stat existing object"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_330.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't stat existing object"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_330.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_330.cpp,94,"[""member"", ""unkown"", ""string""]","[""lstat_ret"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2000,"archive_set_error(&a->archive, 0,
			    ""Refusing to overwrite archive"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_331.cpp,"{
			archive_set_error(&a->archive, 0,
			    ""Refusing to overwrite archive"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_331.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_331.cpp,114,"[""member"", ""null"", ""string""]","[""member"", ""member"", ""member"", ""=="", ""member"", ""member"", ""=="", ""&&"", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2010,"archive_set_error(&a->archive, errno,
				    ""Can't unlink already-existing object"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_332.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't unlink already-existing object"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_332.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_332.cpp,124,"[""member"", ""unkown"", ""string""]","[""unlink_ret"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2022,"archive_set_error(&a->archive, errno,
				    ""Can't replace existing directory with non-directory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_333.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't replace existing directory with non-directory"");
				return (ARCHIVE_FAILED);
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_333.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_333.cpp,136,"[""member"", ""unkown"", ""string""]","[""rmdir_ret"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2047,"archive_set_error(&a->archive, en, ""Can't create '%s'"",
			    a->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_334.cpp,"archive_set_error(&a->archive, en, ""Can't create '%s'"",
			    a->name)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_334.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_334.cpp,161,"[""member"", ""create_filesystem_object_ret"", ""string"", ""member""]","[""member"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2350,"archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up compressor"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_337.cpp,"{
		case Z_OK:
			break;
		default:
			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
			    ""Failed to clean up compressor"");
			ret = ARCHIVE_FATAL;
			break;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_337.cpp,"[0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_337.cpp,31,"[""member"", ""macro"", ""string""]","[""deflateEnd_ret""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2439,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for a fixup"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_338.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for a fixup"");
		return (NULL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_338.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_338.cpp,7,"[""member"", ""macro"", ""string""]","[""calloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2469,"archive_string_sprintf(a_estr, errstr, path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_339.cpp,"archive_string_sprintf(a_estr, errstr, path)",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_339.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_339.cpp,7,"[""struct archive_string *"", ""const char *"", ""const char *""]","[""struct archive_string *""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2729,"archive_set_error(&a->archive, error_number, ""%s"",
		    error_string.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_349.cpp,"{
		archive_set_error(&a->archive, error_number, ""%s"",
		    error_string.s);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_349.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_349.cpp,10,"[""member"", ""int"", ""string"", ""member""]","[""check_symlinks_fsobj_ret"", ""macro"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2819,"fsobj_error(a_eno, a_estr, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty "", ""pathname"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_350.cpp,"{
		fsobj_error(a_eno, a_estr, ARCHIVE_ERRNO_MISC,
		    ""Invalid empty "", ""pathname"");
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_350.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_350.cpp,9,"[""int *"", ""struct archive_string *"", ""macro"", ""string"", ""string""]","[""char *"", ""char *"", ""char"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2830,"fsobj_error(a_eno, a_estr, ARCHIVE_ERRNO_MISC,
			    ""Path is "", ""absolute"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_351.cpp,"{
			fsobj_error(a_eno, a_estr, ARCHIVE_ERRNO_MISC,
			    ""Path is "", ""absolute"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_351.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_351.cpp,20,"[""int *"", ""struct archive_string *"", ""macro"", ""string"", ""string""]","[""bool""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2860,"fsobj_error(a_eno, a_estr,
						    ARCHIVE_ERRNO_MISC,
						    ""Path contains "", ""'..'"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_352.cpp,"{
						fsobj_error(a_eno, a_estr,
						    ARCHIVE_ERRNO_MISC,
						    ""Path contains "", ""'..'"");
						return (ARCHIVE_FAILED);
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_352.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_352.cpp,50,"[""int *"", ""struct archive_string *"", ""macro"", ""string"", ""string""]","[""bool""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2918,"archive_set_error(&a->archive, error_number, ""%s"",
		    error_string.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_353.cpp,"{
		archive_set_error(&a->archive, error_number, ""%s"",
		    error_string.s);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_353.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_353.cpp,10,"[""member"", ""int"", ""string"", ""member""]","[""cleanup_pathname_fsobj_ret"", ""macro"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2990,"archive_set_error(&a->archive, EEXIST,
			    ""Can't create directory '%s'"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_354.cpp,"{
			archive_set_error(&a->archive, EEXIST,
			    ""Can't create directory '%s'"", path);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_354.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_354.cpp,38,"[""member"", ""macro"", ""string"", ""char *""]","[""bool""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,2995,"archive_set_error(&a->archive, errno,
			    ""Can't create directory '%s': ""
			    ""Conflicting file cannot be removed"",
			    path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_355.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Can't create directory '%s': ""
			    ""Conflicting file cannot be removed"",
			    path);
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_355.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_355.cpp,43,[],"[""unlink_ret"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3003,"archive_set_error(&a->archive, errno,
		    ""Can't test directory '%s'"", path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_356.cpp,"{
		/* Stat failed? */
		archive_set_error(&a->archive, errno,
		    ""Can't test directory '%s'"", path);
		return (ARCHIVE_FAILED);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_356.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_356.cpp,51,"[""member"", ""unkown"", ""string"", ""char *""]","[""unkown"", ""macro"", ""!="", ""unkown"", ""macro"", ""!="", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3047,"archive_set_error(&a->archive, errno, ""Failed to create dir '%s'"",
	    path);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_357.cpp,"{
	struct stat st;
	struct fixup_entry *le;
	char *slash, *base;
	mode_t mode_final, mode;
	int r;

	/* Check for special names and just skip them. */
	slash = strrchr(path, '/');
	if (slash == NULL)
		base = path;
	else
		base = slash + 1;

	if (base[0] == '\0' ||
	    (base[0] == '.' && base[1] == '\0') ||
	    (base[0] == '.' && base[1] == '.' && base[2] == '\0')) {
		/* Don't bother trying to create null path, '.', or '..'. */
		if (slash != NULL) {
			*slash = '\0';
			r = create_dir(a, path);
			*slash = '/';
			return (r);
		}
		return (ARCHIVE_OK);
	}

	/*
	 * Yes, this should be stat() and not lstat().  Using lstat()
	 * here loses the ability to extract through symlinks.  Also note
	 * that this should not use the a->st cache.
	 */
	if (stat(path, &st) == 0) {
		if (S_ISDIR(st.st_mode))
			return (ARCHIVE_OK);
		if ((a->flags & ARCHIVE_EXTRACT_NO_OVERWRITE)) {
			archive_set_error(&a->archive, EEXIST,
			    ""Can't create directory '%s'"", path);
			return (ARCHIVE_FAILED);
		}
		if (unlink(path) != 0) {
			archive_set_error(&a->archive, errno,
			    ""Can't create directory '%s': ""
			    ""Conflicting file cannot be removed"",
			    path);
			return (ARCHIVE_FAILED);
		}
	} else if (errno != ENOENT && errno != ENOTDIR) {
		/* Stat failed? */
		archive_set_error(&a->archive, errno,
		    ""Can't test directory '%s'"", path);
		return (ARCHIVE_FAILED);
	} else if (slash != NULL) {
		*slash = '\0';
		r = create_dir(a, path);
		*slash = '/';
		if (r != ARCHIVE_OK)
			return (r);
	}

	/*
	 * Mode we want for the final restored directory.  Per POSIX,
	 * implicitly-created dirs must be created obeying the umask.
	 * There's no mention whether this is different for privileged
	 * restores (which the rest of this code handles by pretending
	 * umask=0).  I've chosen here to always obey the user's umask for
	 * implicit dirs, even if _EXTRACT_PERM was specified.
	 */
	mode_final = DEFAULT_DIR_MODE & ~a->user_umask;
	/* Mode we want on disk during the restore process. */
	mode = mode_final;
	mode |= MINIMUM_DIR_MODE;
	mode &= MAXIMUM_DIR_MODE;
	if (mkdir(path, mode) == 0) {
		if (mode != mode_final) {
			le = new_fixup(a, path);
			if (le == NULL)
				return (ARCHIVE_FATAL);
			le->fixup |=TODO_MODE_BASE;
			le->mode = mode_final;
		}
		return (ARCHIVE_OK);
	}

	/*
	 * Without the following check, a/b/../b/c/d fails at the
	 * second visit to 'b', so 'd' can't be created.  Note that we
	 * don't add it to the fixup list here, as it's already been
	 * added.
	 */
	if (stat(path, &st) == 0 && S_ISDIR(st.st_mode))
		return (ARCHIVE_OK);

	archive_set_error(&a->archive, errno, ""Failed to create dir '%s'"",
	    path);
	return (ARCHIVE_FAILED);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_357.cpp,"[14, 0, 0, 0, 0, 0, 11, 0, 0, 0, 16, 0, 0, 0, 0, 144, 0, 0, 5, 7, 0, 0, 0, 27, 0, 0, 0, 0, 3, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 14, 14, 1, 0, 14, 0, 0, 20, 2, 33, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_357.cpp,95,"[""member"", ""unkown"", ""string"", ""char *""]","[""stat_ret"", ""null"", ""=="", ""S_ISDIR_ret"", ""&&"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3071,"archive_set_error(&a->archive, errno,
		    ""Can't set UID=%jd"", (intmax_t)a->uid);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_358.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Can't set UID=%jd"", (intmax_t)a->uid);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_358.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_358.cpp,9,"[""member"", ""unkown"", ""string"", ""member""]","[""member"", ""null"", ""!="", ""member"", ""member"", ""!="", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3102,"archive_set_error(&a->archive, errno,
	    ""Can't set user=%jd/group=%jd for %s"",
	    (intmax_t)a->uid, (intmax_t)a->gid, a->name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_359.cpp,"{
#ifndef __CYGWIN__
/* unfortunately, on win32 there is no 'root' user with uid 0,
   so we just have to try the chown and see if it works */

	/* If we know we can't change it, don't bother trying. */
	if (a->user_uid != 0  &&  a->user_uid != a->uid) {
		archive_set_error(&a->archive, errno,
		    ""Can't set UID=%jd"", (intmax_t)a->uid);
		return (ARCHIVE_WARN);
	}
#endif

#ifdef HAVE_FCHOWN
	/* If we have an fd, we can avoid a race. */
	if (a->fd >= 0 && fchown(a->fd, a->uid, a->gid) == 0) {
		/* We've set owner and know uid/gid are correct. */
		a->todo &= ~(TODO_OWNER | TODO_SGID_CHECK | TODO_SUID_CHECK);
		return (ARCHIVE_OK);
	}
#endif

	/* We prefer lchown() but will use chown() if that's all we have. */
	/* Of course, if we have neither, this will always fail. */
#ifdef HAVE_LCHOWN
	if (lchown(a->name, a->uid, a->gid) == 0) {
		/* We've set owner and know uid/gid are correct. */
		a->todo &= ~(TODO_OWNER | TODO_SGID_CHECK | TODO_SUID_CHECK);
		return (ARCHIVE_OK);
	}
#elif HAVE_CHOWN
	if (!S_ISLNK(a->mode) && chown(a->name, a->uid, a->gid) == 0) {
		/* We've set owner and know uid/gid are correct. */
		a->todo &= ~(TODO_OWNER | TODO_SGID_CHECK | TODO_SUID_CHECK);
		return (ARCHIVE_OK);
	}
#endif

	archive_set_error(&a->archive, errno,
	    ""Can't set user=%jd/group=%jd for %s"",
	    (intmax_t)a->uid, (intmax_t)a->gid, a->name);
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_359.cpp,"[4, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 6, 0, 0, 5, 0, 20, 7, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_359.cpp,40,"[""member"", ""unkown"", ""string"", ""member"", ""member"", ""member""]","[""lchown_ret"", ""null"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3266,"archive_set_error(&a->archive, errno,
				  ""Can't restore time"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_360.cpp,"{
		archive_set_error(&a->archive, errno,
				  ""Can't restore time"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_360.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_360.cpp,51,"[""member"", ""unkown"", ""string""]","[""set_time_ret"", ""null"", ""!="", ""set_time_ret"", ""null"", ""!="", ""||""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3340,"archive_set_error(&a->archive, -1,
				    ""Can't restore SGID bit"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_361.cpp,"{
				/*
				 * This is only an error if you
				 * requested owner restore.  If you
				 * didn't, we'll try to restore
				 * sgid/suid, but won't consider it a
				 * problem if we can't.
				 */
				archive_set_error(&a->archive, -1,
				    ""Can't restore SGID bit"");
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_361.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_361.cpp,25,"[""member"", ""int"", ""string""]","[""bool""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3350,"archive_set_error(&a->archive, -1,
				    ""Can't restore SUID bit"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_362.cpp,"{
				archive_set_error(&a->archive, -1,
				    ""Can't restore SUID bit"");
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_362.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_362.cpp,35,"[""member"", ""int"", ""string""]","[""bool""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3366,"archive_set_error(&a->archive, -1,
				    ""Can't make file SUID"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_363.cpp,"{
				archive_set_error(&a->archive, -1,
				    ""Can't make file SUID"");
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_363.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_363.cpp,51,"[""member"", ""int"", ""string""]","[""bool""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3398,"archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_364.cpp,"{
			case ENOTSUP:
			case ENOSYS:
#if ENOTSUP != EOPNOTSUPP
			case EOPNOTSUPP:
#endif
				/*
				 * if lchmod is defined but the platform
				 * doesn't support it, silently ignore
				 * error
				 */
				break;
			default:
				archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_364.cpp,"[1, 0, 0, 0, 1, 0, 0, 0, 3, 1, 1, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 2, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_364.cpp,83,"[""member"", ""unkown"", ""string"", ""macro""]","[""unkown""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3414,"archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_365.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_365.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_365.cpp,99,"[""member"", ""unkown"", ""string"", ""macro""]","[""fchmod_ret"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3423,"archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_366.cpp,"{
				archive_set_error(&a->archive, errno,
				    ""Can't set permissions to 0%o"", (int)mode);
				r = ARCHIVE_WARN;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_366.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_366.cpp,108,"[""member"", ""unkown"", ""string"", ""macro""]","[""chmod_ret"", ""null"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3588,"archive_set_error(&a->archive, errno,
	    ""Failed to set file flags"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_368.cpp,"{
	int r;

	(void)mode; /* UNUSED */
	if (set == 0  && clear == 0)
		return (ARCHIVE_OK);

	/*
	 * XXX Is the stat here really necessary?  Or can I just use
	 * the 'set' flags directly?  In particular, I'm not sure
	 * about the correct approach if we're overwriting an existing
	 * file that already has flags on it. XXX
	 */
	if ((r = lazy_stat(a)) != ARCHIVE_OK)
		return (r);

	a->st.st_flags &= ~clear;
	a->st.st_flags |= set;
#ifdef HAVE_FCHFLAGS
	/* If platform has fchflags() and we were given an fd, use it. */
	if (fd >= 0 && fchflags(fd, a->st.st_flags) == 0)
		return (ARCHIVE_OK);
#endif
	/*
	 * If we can't use the fd to set the flags, we'll use the
	 * pathname to set flags.  We prefer lchflags() but will use
	 * chflags() if we must.
	 */
#ifdef HAVE_LCHFLAGS
	if (lchflags(name, a->st.st_flags) == 0)
		return (ARCHIVE_OK);
#elif defined(HAVE_CHFLAGS)
	if (S_ISLNK(a->st.st_mode)) {
		archive_set_error(&a->archive, errno,
		    ""Can't set file flags on symlink."");
		return (ARCHIVE_WARN);
	}
	if (chflags(name, a->st.st_flags) == 0)
		return (ARCHIVE_OK);
#endif
	archive_set_error(&a->archive, errno,
	    ""Failed to set file flags"");
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_368.cpp,"[6, 0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0, 65, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 6, 0, 0, 8, 0, 0, 5, 0, 15, 5, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_368.cpp,43,"[""member"", ""unkown"", ""string""]","[""lchflags_ret"", ""null"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3687,"archive_set_error(&a->archive, errno,
	    ""Failed to set file flags"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_369.cpp,"{
	int		 ret;
	int		 myfd = fd;
	int newflags, oldflags;
	int sf_mask = 0;

	if (set == 0 && clear == 0)
		return (ARCHIVE_OK);
	/* Only regular files and dirs can have flags. */
	if (!S_ISREG(mode) && !S_ISDIR(mode))
		return (ARCHIVE_OK);

	/* If we weren't given an fd, open it ourselves. */
	if (myfd < 0) {
		myfd = open(name, O_RDONLY | O_NONBLOCK | O_BINARY | O_CLOEXEC);
		__archive_ensure_cloexec_flag(myfd);
	}
	if (myfd < 0)
		return (ARCHIVE_OK);

	/*
	 * Linux has no define for the flags that are only settable by
	 * the root user.  This code may seem a little complex, but
	 * there seem to be some Linux systems that lack these
	 * defines. (?)  The code below degrades reasonably gracefully
	 * if sf_mask is incomplete.
	 */
#if defined(FS_IMMUTABLE_FL)
	sf_mask |= FS_IMMUTABLE_FL;
#elif defined(EXT2_IMMUTABLE_FL)
	sf_mask |= EXT2_IMMUTABLE_FL;
#endif
#if defined(FS_APPEND_FL)
	sf_mask |= FS_APPEND_FL;
#elif defined(EXT2_APPEND_FL)
	sf_mask |= EXT2_APPEND_FL;
#endif
#if defined(FS_JOURNAL_DATA_FL)
	sf_mask |= FS_JOURNAL_DATA_FL;
#endif
	/*
	 * XXX As above, this would be way simpler if we didn't have
	 * to read the current flags from disk. XXX
	 */
	ret = ARCHIVE_OK;

	/* Read the current file flags. */
	if (ioctl(myfd,
#ifdef FS_IOC_GETFLAGS
	    FS_IOC_GETFLAGS,
#else
	    EXT2_IOC_GETFLAGS,
#endif
	    &oldflags) < 0)
		goto fail;

	/* Try setting the flags as given. */
	newflags = (oldflags & ~clear) | set;
	if (ioctl(myfd,
#ifdef FS_IOC_SETFLAGS
	    FS_IOC_SETFLAGS,
#else
	    EXT2_IOC_SETFLAGS,
#endif
	    &newflags) >= 0)
		goto cleanup;
	if (errno != EPERM)
		goto fail;

	/* If we couldn't set all the flags, try again with a subset. */
	newflags &= ~sf_mask;
	oldflags &= sf_mask;
	newflags |= oldflags;
	if (ioctl(myfd,
#ifdef FS_IOC_SETFLAGS
	    FS_IOC_SETFLAGS,
#else
	    EXT2_IOC_SETFLAGS,
#endif
	    &newflags) >= 0)
		goto cleanup;

	/* We couldn't set the flags, so report the failure. */
fail:
	archive_set_error(&a->archive, errno,
	    ""Failed to set file flags"");
	ret = ARCHIVE_WARN;
cleanup:
	if (fd < 0)
		close(myfd);
	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_369.cpp,"[12, 0, 0, 0, 0, 0, 4, 0, 0, 0, 10, 2, 4, 0, 0, 99, 0, 0, 4, 5, 0, 0, 2, 10, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 9, 9, 3, 0, 14, 0, 0, 15, 0, 26, 17, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_369.cpp,87,"[""member"", ""unkown"", ""string""]","[""open_ret"", ""null"", ""<"", ""!"", ""unkown"", ""macro"", ""!="", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3754,"archive_set_error(&a->archive, errno,
		    ""Failed to read metadata(xattr)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_370.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to read metadata(xattr)"");
		ret = ARCHIVE_WARN;
		goto exit_xattr;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_370.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_370.cpp,9,"[""member"", ""unkown"", ""string""]","[""flistxattr_ret"", ""int"", ""int"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3761,"archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for metadata(xattr)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_371.cpp,"{
		archive_set_error(&a->archive, ENOMEM,
		    ""Can't allocate memory for metadata(xattr)"");
		ret = ARCHIVE_FATAL;
		goto exit_xattr;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_371.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_371.cpp,16,"[""member"", ""macro"", ""string""]","[""malloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3768,"archive_set_error(&a->archive, errno,
		    ""Failed to read metadata(xattr)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_372.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to read metadata(xattr)"");
		ret = ARCHIVE_WARN;
		goto exit_xattr;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_372.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_372.cpp,23,"[""member"", ""unkown"", ""string""]","[""flistxattr_ret"", ""int"", ""int"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3781,"archive_set_error(&a->archive, errno,
			    ""Failed to get metadata(xattr)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_373.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to get metadata(xattr)"");
			ret = ARCHIVE_WARN;
			goto exit_xattr;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_373.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_373.cpp,36,"[""member"", ""unkown"", ""string""]","[""fgetxattr_ret"", ""int"", ""int"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3789,"archive_set_error(&a->archive, ENOMEM,
			    ""Failed to get metadata(xattr)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_374.cpp,"{
			archive_set_error(&a->archive, ENOMEM,
			    ""Failed to get metadata(xattr)"");
			ret = ARCHIVE_WARN;
			free(xattr_val_saved);
			goto exit_xattr;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_374.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_374.cpp,44,"[""member"", ""macro"", ""string""]","[""realloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3797,"archive_set_error(&a->archive, errno,
			    ""Failed to get metadata(xattr)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_375.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to get metadata(xattr)"");
			ret = ARCHIVE_WARN;
			goto exit_xattr;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_375.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_375.cpp,52,"[""member"", ""unkown"", ""string""]","[""fgetxattr_ret"", ""int"", ""int"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3804,"archive_set_error(&a->archive, errno,
			    ""Failed to get metadata(xattr)"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_376.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to get metadata(xattr)"");
			ret = ARCHIVE_WARN;
			goto exit_xattr;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_376.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_376.cpp,59,"[""member"", ""unkown"", ""string""]","[""fsetxattr_ret"", ""int"", ""int"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3863,"archive_set_error(&a->archive, errno,
		    ""Failed to mkstemp"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_379.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to mkstemp"");
		archive_string_free(&tmpdatafork);
		return (-1);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_379.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_379.cpp,10,"[""member"", ""unkown"", ""string""]","[""mkstemp_ret"", ""null"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3871,"archive_set_error(&a->archive, errno,
		    ""Failed to restore metadata"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_380.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to restore metadata"");
		close(tmpfd);
		tmpfd = -1;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_380.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_380.cpp,18,"[""member"", ""unkown"", ""string""]","[""copyfile_ret"", ""null"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3901,"archive_set_error(&a->archive, errno,
			    ""Failed to open the data fork for metadata"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_381.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to open the data fork for metadata"");
			close(tmpfd);
			return (ARCHIVE_WARN);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_381.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_381.cpp,20,"[""member"", ""unkown"", ""string""]","[""open_ret"", ""int"", ""int"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3918,"archive_set_error(&a->archive, errno,
			    ""Failed to restore metadata"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_382.cpp,"{
			archive_set_error(&a->archive, errno,
			    ""Failed to restore metadata"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_382.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_382.cpp,37,"[""member"", ""unkown"", ""string""]","[""copyfile_ret"", ""null"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3945,"archive_set_error(&a->archive, errno,
				  ""Failed to restore metadata"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_383.cpp,"{
		archive_set_error(&a->archive, errno,
				  ""Failed to restore metadata"");
		archive_string_free(&tmp);
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_383.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_383.cpp,19,"[""member"", ""unkown"", ""string""]","[""mkstemp_ret"", ""null"", ""<""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,3953,"archive_set_error(&a->archive, errno,
				  ""Failed to restore metadata"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_384.cpp,"{
		archive_set_error(&a->archive, errno,
				  ""Failed to restore metadata"");
		ret = ARCHIVE_WARN;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_384.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_384.cpp,27,"[""member"", ""unkown"", ""string""]","[""write_ret"", ""size_t"", ""!=""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4010,"archive_set_error(&a->archive, errno,
		    ""Failed to open a restoring file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_385.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to open a restoring file"");
		ret = ARCHIVE_WARN;
		goto skip_appledouble;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_385.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_385.cpp,37,"[""member"", ""unkown"", ""string""]",[]
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4016,"archive_set_error(&a->archive, errno,
		    ""Failed to read a restoring file"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_386.cpp,"{
		archive_set_error(&a->archive, errno,
		    ""Failed to read a restoring file"");
		close(fd);
		ret = ARCHIVE_WARN;
		goto skip_appledouble;
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_386.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_386.cpp,43,"[""member"", ""unkown"", ""string""]",[]
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4090,"archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_387.cpp,"{
						warning_done = 1;
						archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_387.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_387.cpp,39,[],"[""int"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4097,"archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_388.cpp,"archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"")",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_388.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_388.cpp,46,"[""member"", ""unkown"", ""string""]","[""unkown"", ""macro"", ""=="", ""unkown"", ""macro"", ""=="", ""||"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4102,"archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid extended attribute encountered"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_389.cpp,"{
			archive_set_error(&a->archive,
			    ARCHIVE_ERRNO_FILE_FORMAT,
			    ""Invalid extended attribute encountered"");
			ret = ARCHIVE_WARN;
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_389.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_389.cpp,51,"[""member"", ""macro"", ""string""]","[""const char *"", ""null"", ""!="", ""strncmp_ret"", ""null"", ""!="", ""strncmp_ret"", ""null"", ""!="", ""&&"", ""&&"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4137,"archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Can't restore extended attribute ``%s''"",
				    name);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_390.cpp,"{
				/* Warn about other extended attributes. */
				archive_set_error(&a->archive,
				    ARCHIVE_ERRNO_FILE_FORMAT,
				    ""Can't restore extended attribute ``%s''"",
				    name);
				ret = ARCHIVE_WARN;
				continue;
			}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_390.cpp,"[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_390.cpp,23,"[""member"", ""macro"", ""string"", ""const char *""]","[""strncmp_ret"", ""null"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4161,"archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_391.cpp,"{
						warning_done = 1;
						archive_set_error(&a->archive,
						    errno,
						    ""Cannot restore extended ""
						    ""attributes on this file ""
						    ""system"");
					}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_391.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_391.cpp,47,[],"[""int"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4168,"archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_392.cpp,"{
					archive_set_error(&a->archive, errno,
					    ""Failed to set extended attribute"");
				}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_392.cpp,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_392.cpp,54,"[""member"", ""null"", ""string""]","[""null"", ""macro"", ""=="", ""null"", ""macro"", ""=="", ""||"", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.cpp,4191,"archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Cannot restore extended attributes on this system"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_393.cpp,"{
		warning_done = 1;
		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
		    ""Cannot restore extended attributes on this system"");
		return (ARCHIVE_WARN);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_393.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_393.cpp,9,"[""member"", ""macro"", ""string""]","[""archive_entry_xattr_count_ret"", ""null"", ""!="", ""int"", ""!"", ""&&""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_b64encode.cpp,91,"archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for b64encode filter"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_394.cpp,"{
		archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for b64encode filter"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_394.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_394.cpp,12,"[""member"", ""macro"", ""string""]","[""calloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_b64encode.cpp,121,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""mode option requires octal digits"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_395.cpp,"{
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""mode option requires octal digits"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_395.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_395.cpp,8,"[""member"", ""macro"", ""string""]","[""const char *"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_b64encode.cpp,129,"archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""name option requires a string"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_396.cpp,"{
			archive_set_error(f->archive, ARCHIVE_ERRNO_MISC,
			    ""name option requires a string"");
			return (ARCHIVE_FAILED);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_396.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_396.cpp,16,"[""member"", ""macro"", ""string""]","[""const char *"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_b64encode.cpp,169,"archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for b64encode buffer"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_397.cpp,"{
		archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for b64encode buffer"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_397.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_397.cpp,23,"[""member"", ""macro"", ""string""]","[""archive_string_ensure_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_b64encode.cpp,174,"archive_string_sprintf(&state->encoded_buff, ""begin-base64 %o %s\n"",
	    state->mode, state->name.s);",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_398.cpp,"{
	struct private_b64encode *state = (struct private_b64encode *)f->data;
	size_t bs = 65536, bpb;
	int ret;

	ret = __archive_write_open_filter(f->next_filter);
	if (ret != ARCHIVE_OK)
		return (ret);

	if (f->archive->magic == ARCHIVE_WRITE_MAGIC) {
		/* Buffer size should be a multiple number of the of bytes
		 * per block for performance. */
		bpb = archive_write_get_bytes_per_block(f->archive);
		if (bpb > bs)
			bs = bpb;
		else if (bpb != 0)
			bs -= bs % bpb;
	}

	state->bs = bs;
	if (archive_string_ensure(&state->encoded_buff, bs + 512) == NULL) {
		archive_set_error(f->archive, ENOMEM,
		    ""Can't allocate data for b64encode buffer"");
		return (ARCHIVE_FATAL);
	}

	archive_string_sprintf(&state->encoded_buff, ""begin-base64 %o %s\n"",
	    state->mode, state->name.s);

	f->data = state;
	return (0);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_398.cpp,"[5, 0, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 0, 70, 0, 0, 3, 4, 0, 0, 2, 6, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 5, 0, 0, 5, 0, 0, 8, 1, 11, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_398.cpp,28,"[""member"", ""string"", ""member"", ""member""]","[""archive_string_ensure_ret"", ""null"", ""=="", ""!""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_b64encode.cpp,273,"archive_string_sprintf(&state->encoded_buff, ""====\n"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_399.cpp,"{
	struct private_b64encode *state = (struct private_b64encode *)f->data;
	int ret, ret2;

	/* Flush remaining bytes. */
	if (state->hold_len != 0)
		b64_encode(&state->encoded_buff, state->hold, state->hold_len);
	archive_string_sprintf(&state->encoded_buff, ""====\n"");
	/* Write the last block */
	archive_write_set_bytes_in_last_block(f->archive, 1);
	ret = __archive_write_filter(f->next_filter,
	    state->encoded_buff.s, archive_strlen(&state->encoded_buff));
	ret2 = __archive_write_close_filter(f->next_filter);
	if (ret > ret2)
		ret = ret2;
	return (ret);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_399.cpp,"[2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 55, 0, 0, 2, 3, 0, 0, 1, 3, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 2, 0, 0, 6, 0, 0, 6, 0, 12, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_399.cpp,9,"[""member"", ""string""]",[]
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_read_extract.cpp,51,"archive_set_error(&a->archive, ENOMEM, ""Can't extract"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_400.cpp,"{
			archive_set_error(&a->archive, ENOMEM, ""Can't extract"");
			return (ARCHIVE_FATAL);
		}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_400.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_400.cpp,14,"[""member"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lrzip.cpp,68,"archive_set_error(_a, ENOMEM, ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_401.cpp,"{
		archive_set_error(_a, ENOMEM, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_401.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_401.cpp,11,"[""macro"", ""macro"", ""string""]","[""calloc_ret"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lrzip.cpp,74,"archive_set_error(_a, ENOMEM, ""Can't allocate memory"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_402.cpp,"{
		free(data);
		archive_set_error(_a, ENOMEM, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_402.cpp,"[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0]",second/download/CMake/CMake/CMake-joern/Kitware_CMake_repos_function_402.cpp,17,"[""macro"", ""macro"", ""string""]","[""member"", ""null"", ""==""]"
second/download/CMake/CMake/CMake/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lrzip.cpp,89,"archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external lrzip program for lrzip compression"");",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_log_403.cpp,"{
	struct archive_write_filter *f = __archive_write_allocate_filter(_a);
	struct write_lrzip *data;

	archive_check_magic(_a, ARCHIVE_WRITE_MAGIC,
	    ARCHIVE_STATE_NEW, ""archive_write_add_filter_lrzip"");

	data = calloc(1, sizeof(*data));
	if (data == NULL) {
		archive_set_error(_a, ENOMEM, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}
	data->pdata = __archive_write_program_allocate(""lrzip"");
	if (data->pdata == NULL) {
		free(data);
		archive_set_error(_a, ENOMEM, ""Can't allocate memory"");
		return (ARCHIVE_FATAL);
	}

	f->name = ""lrzip"";
	f->code = ARCHIVE_FILTER_LRZIP;
	f->data = data;
	f->open = archive_write_lrzip_open;
	f->options = archive_write_lrzip_options;
	f->write = archive_write_lrzip_write;
	f->close = archive_write_lrzip_close;
	f->free = archive_write_lrzip_free;

	/* Note: This filter always uses an external program, so we
	 * return ""warn"" to inform of the fact. */
	archive_set_error(_a, ARCHIVE_ERRNO_MISC,
	    ""Using external lrzip program for lrzip compression"");
	return (ARCHIVE_WARN);
}",second/download/CMake/CMake-gumtree/Kitware_CMake_repos_block_403.cpp,"[2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 72, 0, 0, 2, 2, 0, 0, 1, 7, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 40, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,